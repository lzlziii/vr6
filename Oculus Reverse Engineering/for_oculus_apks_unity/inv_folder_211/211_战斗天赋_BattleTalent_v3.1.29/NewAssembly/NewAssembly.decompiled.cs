using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using Il2CppDummyDll;
using OpenCvSharp.Detail;
using OpenCvSharp.Flann;
using OpenCvSharp.ML;
using OpenCvSharp.Util;
using UnityEngine;

[assembly: AssemblyVersion("0.0.0.0")]
namespace OpenCvSharp
{
	[Token(Token = "0x2000002")]
	[SuppressUnmanagedCodeSecurity]
	public static class NativeMethods
	{
		[Serializable]
		[Token(Token = "0x200017D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB258", Offset = "0x1DDB258")]
		private sealed class <>c
		{
			[Token(Token = "0x400063B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x600174C")]
			[Address(RVA = "0x4266D10", Offset = "0x4266D10", VA = "0x4266D10")]
			public <>c()
			{
			}

			[Token(Token = "0x600174D")]
			[Address(RVA = "0x4266D18", Offset = "0x4266D18", VA = "0x4266D18")]
			internal int <.cctor>b__13_0(ErrorCode status, string funcName, string errMsg, string fileName, int line, IntPtr userdata)
			{
				return default(int);
			}

			[Token(Token = "0x600174E")]
			[Address(RVA = "0x4266E28", Offset = "0x4266E28", VA = "0x4266E28")]
			internal int <.cctor>b__13_1(ErrorCode status, string funcName, string errMsg, string fileName, int line, IntPtr userdata)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool tried;

		[Token(Token = "0x4000002")]
		public const string DllVCRuntime = "vcruntime140";

		[Token(Token = "0x4000003")]
		public const string DllMsvcp = "msvcp140";

		[Token(Token = "0x4000004")]
		public const string DllExtern = "OpenCvSharpExtern";

		[Token(Token = "0x4000005")]
		public const string Version = "320";

		[Token(Token = "0x4000006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string[] RuntimeDllNames;

		[Token(Token = "0x4000007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string[] OpenCVDllNames;

		[Token(Token = "0x4000008")]
		public const string DllFfmpegX86 = "opencv_ffmpeg320";

		[Token(Token = "0x4000009")]
		public const string DllFfmpegX64 = "opencv_ffmpeg320_64";

		[Token(Token = "0x400000A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CvErrorCallback ErrorHandlerThrowException;

		[Token(Token = "0x400000B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CvErrorCallback ErrorHandlerIgnorance;

		[Token(Token = "0x400000C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static CvErrorCallback ErrorHandlerDefault;

		[PreserveSig]
		[Token(Token = "0x6000001")]
		[Address(RVA = "0x21781AC", Offset = "0x21781AC", VA = "0x21781AC")]
		public static extern IntPtr dlib_shapePredictor_new();

		[PreserveSig]
		[Token(Token = "0x6000002")]
		[Address(RVA = "0x2178220", Offset = "0x2178220", VA = "0x2178220")]
		public static extern void dlib_shapePredictor_loadData(IntPtr predictor, byte[] data, int dataSize);

		[PreserveSig]
		[Token(Token = "0x6000003")]
		[Address(RVA = "0x21782C0", Offset = "0x21782C0", VA = "0x21782C0")]
		public static extern bool dlib_shapePredictor_detectLandmarks(IntPtr predictor, IntPtr image, Rect roi, ref IntPtr landmarks);

		[PreserveSig]
		[Token(Token = "0x6000004")]
		[Address(RVA = "0x2178378", Offset = "0x2178378", VA = "0x2178378")]
		public static extern void dlib_shapePredictor_delete(IntPtr instance);

		[Token(Token = "0x6000005")]
		[Address(RVA = "0x21783F8", Offset = "0x21783F8", VA = "0x21783F8")]
		static NativeMethods()
		{
		}

		[Token(Token = "0x6000006")]
		[Address(RVA = "0x217862C", Offset = "0x217862C", VA = "0x217862C")]
		public static void LoadLibraries([Optional] IEnumerable<string> additionalPaths)
		{
		}

		[Token(Token = "0x6000007")]
		[Address(RVA = "0x2178ACC", Offset = "0x2178ACC", VA = "0x2178ACC")]
		private static void TryPInvoke()
		{
		}

		[Token(Token = "0x6000008")]
		[Address(RVA = "0x2179008", Offset = "0x2179008", VA = "0x2179008")]
		public static bool IsWindows()
		{
			return default(bool);
		}

		[Token(Token = "0x6000009")]
		[Address(RVA = "0x2178EAC", Offset = "0x2178EAC", VA = "0x2178EAC")]
		public static bool IsUnix()
		{
			return default(bool);
		}

		[Token(Token = "0x600000A")]
		[Address(RVA = "0x2179070", Offset = "0x2179070", VA = "0x2179070")]
		public static bool IsMono()
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x600000B")]
		[Address(RVA = "0x2179108", Offset = "0x2179108", VA = "0x2179108")]
		public static extern IntPtr aruco_getPredefinedDictionary(int name);

		[PreserveSig]
		[Token(Token = "0x600000C")]
		[Address(RVA = "0x217918C", Offset = "0x217918C", VA = "0x217918C")]
		public static extern void aruco_detectMarkers(IntPtr image, IntPtr dictionary, IntPtr corners, IntPtr ids, IntPtr detectParameters, IntPtr outrejectedImgPoints);

		[PreserveSig]
		[Token(Token = "0x600000D")]
		[Address(RVA = "0x2179250", Offset = "0x2179250", VA = "0x2179250")]
		public static extern void aruco_drawDetectedMarkers(IntPtr image, IntPtr[] corners, int cornerSize1, int[] contoursSize2, int[] ids, int idxLength, Scalar borderColor);

		[PreserveSig]
		[Token(Token = "0x600000E")]
		[Address(RVA = "0x217935C", Offset = "0x217935C", VA = "0x217935C")]
		public static extern void aruco_drawDetectedMarkers(IntPtr image, IntPtr[] corners, int cornerSize1, int[] contoursSize2, IntPtr ids, int idxLength, Scalar borderColor);

		[PreserveSig]
		[Token(Token = "0x600000F")]
		[Address(RVA = "0x2179460", Offset = "0x2179460", VA = "0x2179460")]
		public static extern void aruco_drawMarker(IntPtr dictionary, int id, int sidePixels, IntPtr mat, int borderBits);

		[PreserveSig]
		[Token(Token = "0x6000010")]
		[Address(RVA = "0x2179514", Offset = "0x2179514", VA = "0x2179514")]
		public static extern void aruco_drawAxis(IntPtr image, IntPtr cameraMatrix, double[] distCoeffs, int distCoeffsLength, double[] rvec, double[] tvec, float lenght);

		[PreserveSig]
		[Token(Token = "0x6000011")]
		[Address(RVA = "0x2179600", Offset = "0x2179600", VA = "0x2179600")]
		public static extern IntPtr aruco_DetectorParameters_create();

		[PreserveSig]
		[Token(Token = "0x6000012")]
		[Address(RVA = "0x2179678", Offset = "0x2179678", VA = "0x2179678")]
		public static extern void aruco_Ptr_DetectorParameters_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000013")]
		[Address(RVA = "0x21796FC", Offset = "0x21796FC", VA = "0x21796FC")]
		public static extern IntPtr aruco_Ptr_DetectorParameters_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000014")]
		[Address(RVA = "0x2179780", Offset = "0x2179780", VA = "0x2179780")]
		public static extern void aruco_DetectorParameters_setDoCornerRefinement(IntPtr obj, bool value);

		[PreserveSig]
		[Token(Token = "0x6000015")]
		[Address(RVA = "0x2179814", Offset = "0x2179814", VA = "0x2179814")]
		public static extern void aruco_DetectorParameters_setAdaptiveThreshConstant(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x6000016")]
		[Address(RVA = "0x21798A8", Offset = "0x21798A8", VA = "0x21798A8")]
		public static extern void aruco_DetectorParameters_setCornerRefinementMinAccuracy(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x6000017")]
		[Address(RVA = "0x217993C", Offset = "0x217993C", VA = "0x217993C")]
		public static extern void aruco_DetectorParameters_setErrorCorrectionRate(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x6000018")]
		[Address(RVA = "0x21799D0", Offset = "0x21799D0", VA = "0x21799D0")]
		public static extern void aruco_DetectorParameters_setMaxErroneousBitsInBorderRate(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x6000019")]
		[Address(RVA = "0x2179A64", Offset = "0x2179A64", VA = "0x2179A64")]
		public static extern void aruco_DetectorParameters_setMaxMarkerPerimeterRate(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x600001A")]
		[Address(RVA = "0x2179AF8", Offset = "0x2179AF8", VA = "0x2179AF8")]
		public static extern void aruco_DetectorParameters_setMinCornerDistanceRate(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x600001B")]
		[Address(RVA = "0x2179B8C", Offset = "0x2179B8C", VA = "0x2179B8C")]
		public static extern void aruco_DetectorParameters_setMinMarkerDistanceRate(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x600001C")]
		[Address(RVA = "0x2179C20", Offset = "0x2179C20", VA = "0x2179C20")]
		public static extern void aruco_DetectorParameters_setMinMarkerPerimeterRate(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x600001D")]
		[Address(RVA = "0x2179CB4", Offset = "0x2179CB4", VA = "0x2179CB4")]
		public static extern void aruco_DetectorParameters_setMinOtsuStdDev(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x600001E")]
		[Address(RVA = "0x2179D48", Offset = "0x2179D48", VA = "0x2179D48")]
		public static extern void aruco_DetectorParameters_setPerspectiveRemoveIgnoredMarginPerCell(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x600001F")]
		[Address(RVA = "0x2179DDC", Offset = "0x2179DDC", VA = "0x2179DDC")]
		public static extern void aruco_DetectorParameters_setPolygonalApproxAccuracyRate(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x6000020")]
		[Address(RVA = "0x2179E70", Offset = "0x2179E70", VA = "0x2179E70")]
		public static extern void aruco_DetectorParameters_setAdaptiveThreshWinSizeMax(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000021")]
		[Address(RVA = "0x2179F04", Offset = "0x2179F04", VA = "0x2179F04")]
		public static extern void aruco_DetectorParameters_setAdaptiveThreshWinSizeMin(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000022")]
		[Address(RVA = "0x2179F98", Offset = "0x2179F98", VA = "0x2179F98")]
		public static extern void aruco_DetectorParameters_setAdaptiveThreshWinSizeStep(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000023")]
		[Address(RVA = "0x217A02C", Offset = "0x217A02C", VA = "0x217A02C")]
		public static extern void aruco_DetectorParameters_setCornerRefinementMaxIterations(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000024")]
		[Address(RVA = "0x217A0C0", Offset = "0x217A0C0", VA = "0x217A0C0")]
		public static extern void aruco_DetectorParameters_setCornerRefinementWinSize(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000025")]
		[Address(RVA = "0x217A154", Offset = "0x217A154", VA = "0x217A154")]
		public static extern void aruco_DetectorParameters_setMarkerBorderBits(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000026")]
		[Address(RVA = "0x217A1E8", Offset = "0x217A1E8", VA = "0x217A1E8")]
		public static extern void aruco_DetectorParameters_setMinDistanceToBorder(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000027")]
		[Address(RVA = "0x217A27C", Offset = "0x217A27C", VA = "0x217A27C")]
		public static extern void aruco_DetectorParameters_setPerspectiveRemovePixelPerCell(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000028")]
		[Address(RVA = "0x217A310", Offset = "0x217A310", VA = "0x217A310")]
		public static extern bool aruco_DetectorParameters_getDoCornerRefinement(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000029")]
		[Address(RVA = "0x217A39C", Offset = "0x217A39C", VA = "0x217A39C")]
		public static extern double aruco_DetectorParameters_getAdaptiveThreshConstant(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600002A")]
		[Address(RVA = "0x217A420", Offset = "0x217A420", VA = "0x217A420")]
		public static extern double aruco_DetectorParameters_getCornerRefinementMinAccuracy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600002B")]
		[Address(RVA = "0x217A4A4", Offset = "0x217A4A4", VA = "0x217A4A4")]
		public static extern double aruco_DetectorParameters_getErrorCorrectionRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600002C")]
		[Address(RVA = "0x217A528", Offset = "0x217A528", VA = "0x217A528")]
		public static extern double aruco_DetectorParameters_getMaxErroneousBitsInBorderRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600002D")]
		[Address(RVA = "0x217A5AC", Offset = "0x217A5AC", VA = "0x217A5AC")]
		public static extern double aruco_DetectorParameters_getMaxMarkerPerimeterRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600002E")]
		[Address(RVA = "0x217A630", Offset = "0x217A630", VA = "0x217A630")]
		public static extern double aruco_DetectorParameters_getMinCornerDistanceRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600002F")]
		[Address(RVA = "0x217A6B4", Offset = "0x217A6B4", VA = "0x217A6B4")]
		public static extern double aruco_DetectorParameters_getMinMarkerDistanceRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000030")]
		[Address(RVA = "0x217A738", Offset = "0x217A738", VA = "0x217A738")]
		public static extern double aruco_DetectorParameters_getMinMarkerPerimeterRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000031")]
		[Address(RVA = "0x217A7BC", Offset = "0x217A7BC", VA = "0x217A7BC")]
		public static extern double aruco_DetectorParameters_getMinOtsuStdDev(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000032")]
		[Address(RVA = "0x217A840", Offset = "0x217A840", VA = "0x217A840")]
		public static extern double aruco_DetectorParameters_getPerspectiveRemoveIgnoredMarginPerCell(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000033")]
		[Address(RVA = "0x217A8C4", Offset = "0x217A8C4", VA = "0x217A8C4")]
		public static extern double aruco_DetectorParameters_getPolygonalApproxAccuracyRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000034")]
		[Address(RVA = "0x217A948", Offset = "0x217A948", VA = "0x217A948")]
		public static extern int aruco_DetectorParameters_getAdaptiveThreshWinSizeMax(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000035")]
		[Address(RVA = "0x217A9CC", Offset = "0x217A9CC", VA = "0x217A9CC")]
		public static extern int aruco_DetectorParameters_getAdaptiveThreshWinSizeMin(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000036")]
		[Address(RVA = "0x217AA50", Offset = "0x217AA50", VA = "0x217AA50")]
		public static extern int aruco_DetectorParameters_getAdaptiveThreshWinSizeStep(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000037")]
		[Address(RVA = "0x217AAD4", Offset = "0x217AAD4", VA = "0x217AAD4")]
		public static extern int aruco_DetectorParameters_getCornerRefinementMaxIterations(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000038")]
		[Address(RVA = "0x217AB58", Offset = "0x217AB58", VA = "0x217AB58")]
		public static extern int aruco_DetectorParameters_getCornerRefinementWinSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000039")]
		[Address(RVA = "0x217ABDC", Offset = "0x217ABDC", VA = "0x217ABDC")]
		public static extern int aruco_DetectorParameters_getMarkerBorderBits(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600003A")]
		[Address(RVA = "0x217AC60", Offset = "0x217AC60", VA = "0x217AC60")]
		public static extern int aruco_DetectorParameters_getMinDistanceToBorder(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600003B")]
		[Address(RVA = "0x217ACE4", Offset = "0x217ACE4", VA = "0x217ACE4")]
		public static extern int aruco_DetectorParameters_getPerspectiveRemovePixelPerCell(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600003C")]
		[Address(RVA = "0x217AD68", Offset = "0x217AD68", VA = "0x217AD68")]
		public static extern void aruco_Ptr_Dictionary_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600003D")]
		[Address(RVA = "0x217ADEC", Offset = "0x217ADEC", VA = "0x217ADEC")]
		public static extern IntPtr aruco_Ptr_Dictionary_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600003E")]
		[Address(RVA = "0x217AE70", Offset = "0x217AE70", VA = "0x217AE70")]
		public static extern void aruco_Dictionary_setMarkerSize(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600003F")]
		[Address(RVA = "0x217AF04", Offset = "0x217AF04", VA = "0x217AF04")]
		public static extern void aruco_Dictionary_setMaxCorrectionBits(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000040")]
		[Address(RVA = "0x217AF98", Offset = "0x217AF98", VA = "0x217AF98")]
		public static extern IntPtr aruco_Dictionary_getBytesList(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000041")]
		[Address(RVA = "0x217B01C", Offset = "0x217B01C", VA = "0x217B01C")]
		public static extern int aruco_Dictionary_getMarkerSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000042")]
		[Address(RVA = "0x217B0A0", Offset = "0x217B0A0", VA = "0x217B0A0")]
		public static extern int aruco_Dictionary_getMaxCorrectionBits(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000043")]
		[Address(RVA = "0x217B124", Offset = "0x217B124", VA = "0x217B124")]
		public static extern IntPtr bgsegm_createBackgroundSubtractorMOG(int history, int nmixtures, double backgroundRatio, double noiseSigma);

		[PreserveSig]
		[Token(Token = "0x6000044")]
		[Address(RVA = "0x217B1CC", Offset = "0x217B1CC", VA = "0x217B1CC")]
		public static extern void bgsegm_Ptr_BackgroundSubtractorMOG_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000045")]
		[Address(RVA = "0x217B24C", Offset = "0x217B24C", VA = "0x217B24C")]
		public static extern IntPtr bgsegm_Ptr_BackgroundSubtractorMOG_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000046")]
		[Address(RVA = "0x217B2CC", Offset = "0x217B2CC", VA = "0x217B2CC")]
		public static extern int bgsegm_BackgroundSubtractorMOG_getHistory(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000047")]
		[Address(RVA = "0x217B34C", Offset = "0x217B34C", VA = "0x217B34C")]
		public static extern void bgsegm_BackgroundSubtractorMOG_setHistory(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000048")]
		[Address(RVA = "0x217B3DC", Offset = "0x217B3DC", VA = "0x217B3DC")]
		public static extern int bgsegm_BackgroundSubtractorMOG_getNMixtures(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000049")]
		[Address(RVA = "0x217B45C", Offset = "0x217B45C", VA = "0x217B45C")]
		public static extern void bgsegm_BackgroundSubtractorMOG_setNMixtures(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x600004A")]
		[Address(RVA = "0x217B4EC", Offset = "0x217B4EC", VA = "0x217B4EC")]
		public static extern double bgsegm_BackgroundSubtractorMOG_getBackgroundRatio(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600004B")]
		[Address(RVA = "0x217B56C", Offset = "0x217B56C", VA = "0x217B56C")]
		public static extern void bgsegm_BackgroundSubtractorMOG_setBackgroundRatio(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x600004C")]
		[Address(RVA = "0x217B5FC", Offset = "0x217B5FC", VA = "0x217B5FC")]
		public static extern double bgsegm_BackgroundSubtractorMOG_getNoiseSigma(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600004D")]
		[Address(RVA = "0x217B67C", Offset = "0x217B67C", VA = "0x217B67C")]
		public static extern void bgsegm_BackgroundSubtractorMOG_setNoiseSigma(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x600004E")]
		[Address(RVA = "0x217B70C", Offset = "0x217B70C", VA = "0x217B70C")]
		public static extern IntPtr bgsegm_createBackgroundSubtractorGMG(int initializationFrames, double decisionThreshold);

		[PreserveSig]
		[Token(Token = "0x600004F")]
		[Address(RVA = "0x217B79C", Offset = "0x217B79C", VA = "0x217B79C")]
		public static extern void bgsegm_Ptr_BackgroundSubtractorGMG_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000050")]
		[Address(RVA = "0x217B81C", Offset = "0x217B81C", VA = "0x217B81C")]
		public static extern IntPtr bgsegm_Ptr_BackgroundSubtractorGMG_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000051")]
		[Address(RVA = "0x217B89C", Offset = "0x217B89C", VA = "0x217B89C")]
		public static extern int bgsegm_BackgroundSubtractorGMG_getMaxFeatures(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000052")]
		[Address(RVA = "0x217B91C", Offset = "0x217B91C", VA = "0x217B91C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setMaxFeatures(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000053")]
		[Address(RVA = "0x217B9AC", Offset = "0x217B9AC", VA = "0x217B9AC")]
		public static extern double bgsegm_BackgroundSubtractorGMG_getDefaultLearningRate(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000054")]
		[Address(RVA = "0x217BA2C", Offset = "0x217BA2C", VA = "0x217BA2C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setDefaultLearningRate(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x6000055")]
		[Address(RVA = "0x217BABC", Offset = "0x217BABC", VA = "0x217BABC")]
		public static extern int bgsegm_BackgroundSubtractorGMG_getNumFrames(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000056")]
		[Address(RVA = "0x217BB3C", Offset = "0x217BB3C", VA = "0x217BB3C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setNumFrames(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000057")]
		[Address(RVA = "0x217BBCC", Offset = "0x217BBCC", VA = "0x217BBCC")]
		public static extern int bgsegm_BackgroundSubtractorGMG_getQuantizationLevels(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000058")]
		[Address(RVA = "0x217BC4C", Offset = "0x217BC4C", VA = "0x217BC4C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setQuantizationLevels(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000059")]
		[Address(RVA = "0x217BCDC", Offset = "0x217BCDC", VA = "0x217BCDC")]
		public static extern double bgsegm_BackgroundSubtractorGMG_getBackgroundPrior(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600005A")]
		[Address(RVA = "0x217BD5C", Offset = "0x217BD5C", VA = "0x217BD5C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setBackgroundPrior(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x600005B")]
		[Address(RVA = "0x217BDEC", Offset = "0x217BDEC", VA = "0x217BDEC")]
		public static extern int bgsegm_BackgroundSubtractorGMG_getSmoothingRadius(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600005C")]
		[Address(RVA = "0x217BE6C", Offset = "0x217BE6C", VA = "0x217BE6C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setSmoothingRadius(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x600005D")]
		[Address(RVA = "0x217BEFC", Offset = "0x217BEFC", VA = "0x217BEFC")]
		public static extern double bgsegm_BackgroundSubtractorGMG_getDecisionThreshold(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600005E")]
		[Address(RVA = "0x217BF7C", Offset = "0x217BF7C", VA = "0x217BF7C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setDecisionThreshold(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x600005F")]
		[Address(RVA = "0x217C00C", Offset = "0x217C00C", VA = "0x217C00C")]
		public static extern int bgsegm_BackgroundSubtractorGMG_getUpdateBackgroundModel(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000060")]
		[Address(RVA = "0x217C08C", Offset = "0x217C08C", VA = "0x217C08C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setUpdateBackgroundModel(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000061")]
		[Address(RVA = "0x217C11C", Offset = "0x217C11C", VA = "0x217C11C")]
		public static extern double bgsegm_BackgroundSubtractorGMG_getMinVal(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000062")]
		[Address(RVA = "0x217C19C", Offset = "0x217C19C", VA = "0x217C19C")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setMinVal(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x6000063")]
		[Address(RVA = "0x217C22C", Offset = "0x217C22C", VA = "0x217C22C")]
		public static extern double bgsegm_BackgroundSubtractorGMG_getMaxVal(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000064")]
		[Address(RVA = "0x217C2AC", Offset = "0x217C2AC", VA = "0x217C2AC")]
		public static extern void bgsegm_BackgroundSubtractorGMG_setMaxVal(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x6000065")]
		[Address(RVA = "0x217C33C", Offset = "0x217C33C", VA = "0x217C33C")]
		public static extern IntPtr flann_Index_new(IntPtr features, IntPtr @params, int distType);

		[PreserveSig]
		[Token(Token = "0x6000066")]
		[Address(RVA = "0x217C3D4", Offset = "0x217C3D4", VA = "0x217C3D4")]
		public static extern void flann_Index_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000067")]
		[Address(RVA = "0x217C454", Offset = "0x217C454", VA = "0x217C454")]
		public static extern void flann_Index_knnSearch1(IntPtr obj, [In] float[] queries, int queriesLength, [Out] int[] indices, [Out] float[] dists, int knn, IntPtr @params);

		[PreserveSig]
		[Token(Token = "0x6000068")]
		[Address(RVA = "0x217C5F4", Offset = "0x217C5F4", VA = "0x217C5F4")]
		public static extern void flann_Index_knnSearch2(IntPtr obj, IntPtr queries, IntPtr indices, IntPtr dists, int knn, IntPtr @params);

		[PreserveSig]
		[Token(Token = "0x6000069")]
		[Address(RVA = "0x217C6B4", Offset = "0x217C6B4", VA = "0x217C6B4")]
		public static extern void flann_Index_knnSearch3(IntPtr obj, IntPtr queries, [Out] int[] indices, [Out] float[] dists, int knn, IntPtr @params);

		[PreserveSig]
		[Token(Token = "0x600006A")]
		[Address(RVA = "0x217C840", Offset = "0x217C840", VA = "0x217C840")]
		public static extern void flann_Index_radiusSearch1(IntPtr obj, [In] float[] queries, int queriesLength, [Out] int[] indices, int indicesLength, [Out] float[] dists, int dists_length, float radius, int maxResults, IntPtr @params);

		[PreserveSig]
		[Token(Token = "0x600006B")]
		[Address(RVA = "0x217CA24", Offset = "0x217CA24", VA = "0x217CA24")]
		public static extern void flann_Index_radiusSearch2(IntPtr obj, IntPtr queries, IntPtr indices, IntPtr dists, float radius, int maxResults, IntPtr @params);

		[PreserveSig]
		[Token(Token = "0x600006C")]
		[Address(RVA = "0x217CAF4", Offset = "0x217CAF4", VA = "0x217CAF4")]
		public static extern void flann_Index_radiusSearch3(IntPtr obj, IntPtr queries, [Out] int[] indices, int indicesLength, [Out] float[] dists, int distsLength, float radius, int maxResults, IntPtr @params);

		[PreserveSig]
		[Token(Token = "0x600006D")]
		[Address(RVA = "0x217CCDC", Offset = "0x217CCDC", VA = "0x217CCDC")]
		public static extern void flann_Index_save(IntPtr obj, string filename);

		[PreserveSig]
		[Token(Token = "0x600006E")]
		[Address(RVA = "0x217CD7C", Offset = "0x217CD7C", VA = "0x217CD7C")]
		public static extern IntPtr flann_IndexParams_new();

		[PreserveSig]
		[Token(Token = "0x600006F")]
		[Address(RVA = "0x217CDF0", Offset = "0x217CDF0", VA = "0x217CDF0")]
		public static extern void flann_IndexParams_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000070")]
		[Address(RVA = "0x217CE70", Offset = "0x217CE70", VA = "0x217CE70")]
		public static extern void flann_IndexParams_getString(IntPtr obj, string key, string defaultVal, StringBuilder result);

		[PreserveSig]
		[Token(Token = "0x6000071")]
		[Address(RVA = "0x217CF60", Offset = "0x217CF60", VA = "0x217CF60")]
		public static extern int flann_IndexParams_getInt(IntPtr obj, string key, int defaultVal);

		[PreserveSig]
		[Token(Token = "0x6000072")]
		[Address(RVA = "0x217D014", Offset = "0x217D014", VA = "0x217D014")]
		public static extern double flann_IndexParams_getDouble(IntPtr obj, string key, double defaultVal);

		[PreserveSig]
		[Token(Token = "0x6000073")]
		[Address(RVA = "0x217D0D0", Offset = "0x217D0D0", VA = "0x217D0D0")]
		public static extern void flann_IndexParams_setString(IntPtr obj, string key, string value);

		[PreserveSig]
		[Token(Token = "0x6000074")]
		[Address(RVA = "0x217D190", Offset = "0x217D190", VA = "0x217D190")]
		public static extern void flann_IndexParams_setInt(IntPtr obj, string key, int value);

		[PreserveSig]
		[Token(Token = "0x6000075")]
		[Address(RVA = "0x217D23C", Offset = "0x217D23C", VA = "0x217D23C")]
		public static extern void flann_IndexParams_setDouble(IntPtr obj, string key, double value);

		[PreserveSig]
		[Token(Token = "0x6000076")]
		[Address(RVA = "0x217D2F0", Offset = "0x217D2F0", VA = "0x217D2F0")]
		public static extern void flann_IndexParams_setFloat(IntPtr obj, string key, float value);

		[PreserveSig]
		[Token(Token = "0x6000077")]
		[Address(RVA = "0x217D3A4", Offset = "0x217D3A4", VA = "0x217D3A4")]
		public static extern void flann_IndexParams_setBool(IntPtr obj, string key, int value);

		[PreserveSig]
		[Token(Token = "0x6000078")]
		[Address(RVA = "0x217D450", Offset = "0x217D450", VA = "0x217D450")]
		public static extern void flann_IndexParams_setAlgorithm(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000079")]
		[Address(RVA = "0x217D4E0", Offset = "0x217D4E0", VA = "0x217D4E0")]
		public static extern IntPtr flann_LinearIndexParams_new();

		[PreserveSig]
		[Token(Token = "0x600007A")]
		[Address(RVA = "0x217D554", Offset = "0x217D554", VA = "0x217D554")]
		public static extern void flann_LinearIndexParams_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600007B")]
		[Address(RVA = "0x217D5D4", Offset = "0x217D5D4", VA = "0x217D5D4")]
		public static extern IntPtr flann_KDTreeIndexParams_new(int trees);

		[PreserveSig]
		[Token(Token = "0x600007C")]
		[Address(RVA = "0x217D654", Offset = "0x217D654", VA = "0x217D654")]
		public static extern void flann_KDTreeIndexParams_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600007D")]
		[Address(RVA = "0x217D6D4", Offset = "0x217D6D4", VA = "0x217D6D4")]
		public static extern IntPtr flann_KMeansIndexParams_new(int branching, int iterations, FlannCentersInit centers_init, float cb_index);

		[PreserveSig]
		[Token(Token = "0x600007E")]
		[Address(RVA = "0x217D77C", Offset = "0x217D77C", VA = "0x217D77C")]
		public static extern void flann_KMeansIndexParams_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600007F")]
		[Address(RVA = "0x217D7FC", Offset = "0x217D7FC", VA = "0x217D7FC")]
		public static extern IntPtr flann_CompositeIndexParams_new(int trees, int branching, int iterations, FlannCentersInit centers_init, float cb_index);

		[PreserveSig]
		[Token(Token = "0x6000080")]
		[Address(RVA = "0x217D8B4", Offset = "0x217D8B4", VA = "0x217D8B4")]
		public static extern void flann_CompositeIndexParams_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000081")]
		[Address(RVA = "0x217D934", Offset = "0x217D934", VA = "0x217D934")]
		public static extern IntPtr flann_AutotunedIndexParams_new(float targetPrecision, float build_weight, float memory_weight, float sample_fraction);

		[PreserveSig]
		[Token(Token = "0x6000082")]
		[Address(RVA = "0x217D9DC", Offset = "0x217D9DC", VA = "0x217D9DC")]
		public static extern void flann_AutotunedIndexParams_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000083")]
		[Address(RVA = "0x217DA5C", Offset = "0x217DA5C", VA = "0x217DA5C")]
		public static extern IntPtr flann_SavedIndexParams_new(string filename);

		[PreserveSig]
		[Token(Token = "0x6000084")]
		[Address(RVA = "0x217DAF4", Offset = "0x217DAF4", VA = "0x217DAF4")]
		public static extern void flann_SavedIndexParams_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000085")]
		[Address(RVA = "0x217DB74", Offset = "0x217DB74", VA = "0x217DB74")]
		public static extern IntPtr flann_SearchParams_new(int checks, float eps, int sorted);

		[PreserveSig]
		[Token(Token = "0x6000086")]
		[Address(RVA = "0x217DC14", Offset = "0x217DC14", VA = "0x217DC14")]
		public static extern void flann_SearchParams_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000087")]
		[Address(RVA = "0x217DC94", Offset = "0x217DC94", VA = "0x217DC94")]
		public static extern void highgui_namedWindow(string winname, int flags);

		[PreserveSig]
		[Token(Token = "0x6000088")]
		[Address(RVA = "0x217DD34", Offset = "0x217DD34", VA = "0x217DD34")]
		public static extern void highgui_destroyWindow(string winName);

		[PreserveSig]
		[Token(Token = "0x6000089")]
		[Address(RVA = "0x217DDC4", Offset = "0x217DDC4", VA = "0x217DDC4")]
		public static extern void highgui_destroyAllWindows();

		[PreserveSig]
		[Token(Token = "0x600008A")]
		[Address(RVA = "0x217DE34", Offset = "0x217DE34", VA = "0x217DE34")]
		public static extern void highgui_imshow(string winname, IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x600008B")]
		[Address(RVA = "0x217DED4", Offset = "0x217DED4", VA = "0x217DED4")]
		public static extern int highgui_startWindowThread();

		[PreserveSig]
		[Token(Token = "0x600008C")]
		[Address(RVA = "0x217DF48", Offset = "0x217DF48", VA = "0x217DF48")]
		public static extern int highgui_waitKey(int delay);

		[PreserveSig]
		[Token(Token = "0x600008D")]
		[Address(RVA = "0x217DFC8", Offset = "0x217DFC8", VA = "0x217DFC8")]
		public static extern void highgui_resizeWindow(string winName, int width, int height);

		[PreserveSig]
		[Token(Token = "0x600008E")]
		[Address(RVA = "0x217E070", Offset = "0x217E070", VA = "0x217E070")]
		public static extern void highgui_moveWindow(string winName, int x, int y);

		[PreserveSig]
		[Token(Token = "0x600008F")]
		[Address(RVA = "0x217E118", Offset = "0x217E118", VA = "0x217E118")]
		public static extern void highgui_setWindowProperty(string winName, int propId, double propValue);

		[PreserveSig]
		[Token(Token = "0x6000090")]
		[Address(RVA = "0x217E1C8", Offset = "0x217E1C8", VA = "0x217E1C8")]
		public static extern void highgui_setWindowTitle(string winname, string title);

		[PreserveSig]
		[Token(Token = "0x6000091")]
		[Address(RVA = "0x217E280", Offset = "0x217E280", VA = "0x217E280")]
		public static extern double highgui_getWindowProperty(string winName, int propId);

		[PreserveSig]
		[Token(Token = "0x6000092")]
		[Address(RVA = "0x217E330", Offset = "0x217E330", VA = "0x217E330")]
		public static extern void highgui_setMouseCallback(string winName, CvMouseCallback onMouse, IntPtr userData);

		[PreserveSig]
		[Token(Token = "0x6000093")]
		[Address(RVA = "0x217E3E0", Offset = "0x217E3E0", VA = "0x217E3E0")]
		public static extern int highgui_createTrackbar(string trackbarName, string winName, ref int value, int count, IntPtr onChange, IntPtr userData);

		[PreserveSig]
		[Token(Token = "0x6000094")]
		[Address(RVA = "0x217E4D0", Offset = "0x217E4D0", VA = "0x217E4D0")]
		public static extern int highgui_getTrackbarPos(string trackbarName, string winName);

		[PreserveSig]
		[Token(Token = "0x6000095")]
		[Address(RVA = "0x217E590", Offset = "0x217E590", VA = "0x217E590")]
		public static extern void highgui_setTrackbarPos(string trackbarName, string winName, int pos);

		[PreserveSig]
		[Token(Token = "0x6000096")]
		[Address(RVA = "0x217E650", Offset = "0x217E650", VA = "0x217E650")]
		public static extern int highgui_createButton(string barName, IntPtr onChange, IntPtr userdata, int type, int initialButtonState);

		[PreserveSig]
		[Token(Token = "0x6000097")]
		[Address(RVA = "0x217E718", Offset = "0x217E718", VA = "0x217E718")]
		public static extern IntPtr imgcodecs_imread(string filename, int flags);

		[PreserveSig]
		[Token(Token = "0x6000098")]
		[Address(RVA = "0x217E7C0", Offset = "0x217E7C0", VA = "0x217E7C0")]
		public static extern int imgcodecs_imreadmulti(string filename, IntPtr mats, int flags);

		[PreserveSig]
		[Token(Token = "0x6000099")]
		[Address(RVA = "0x217E870", Offset = "0x217E870", VA = "0x217E870")]
		public static extern int imgcodecs_imwrite(string filename, IntPtr img, [In] int[] @params, int paramsLength);

		[PreserveSig]
		[Token(Token = "0x600009A")]
		[Address(RVA = "0x217E934", Offset = "0x217E934", VA = "0x217E934")]
		public static extern IntPtr imgcodecs_imdecode_Mat(IntPtr buf, int flags);

		[PreserveSig]
		[Token(Token = "0x600009B")]
		[Address(RVA = "0x217E9C4", Offset = "0x217E9C4", VA = "0x217E9C4")]
		public static extern IntPtr imgcodecs_imdecode_vector(byte[] buf, IntPtr bufLength, int flags);

		[PreserveSig]
		[Token(Token = "0x600009C")]
		[Address(RVA = "0x217EA64", Offset = "0x217EA64", VA = "0x217EA64")]
		public static extern IntPtr imgcodecs_imdecode_InputArray(IntPtr buf, int flags);

		[PreserveSig]
		[Token(Token = "0x600009D")]
		[Address(RVA = "0x217EAF4", Offset = "0x217EAF4", VA = "0x217EAF4")]
		public static extern int imgcodecs_imencode_vector(string ext, IntPtr img, IntPtr buf, [In] int[] @params, int paramsLength);

		[PreserveSig]
		[Token(Token = "0x600009E")]
		[Address(RVA = "0x217EBC4", Offset = "0x217EBC4", VA = "0x217EBC4")]
		public static extern void imgcodecs_cvConvertImage_CvArr(IntPtr src, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x600009F")]
		[Address(RVA = "0x217EC5C", Offset = "0x217EC5C", VA = "0x217EC5C")]
		public static extern void imgcodecs_cvConvertImage_Mat(IntPtr src, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x60000A0")]
		[Address(RVA = "0x217ECF4", Offset = "0x217ECF4", VA = "0x217ECF4")]
		public static extern int imgcodecs_cvHaveImageReader(string fileName);

		[PreserveSig]
		[Token(Token = "0x60000A1")]
		[Address(RVA = "0x217ED8C", Offset = "0x217ED8C", VA = "0x217ED8C")]
		public static extern int imgcodecs_cvHaveImageWriter(string fileName);

		[PreserveSig]
		[Token(Token = "0x60000A2")]
		[Address(RVA = "0x217EE24", Offset = "0x217EE24", VA = "0x217EE24")]
		public static extern IntPtr objdetect_CascadeClassifier_new();

		[PreserveSig]
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x217EE98", Offset = "0x217EE98", VA = "0x217EE98")]
		public static extern IntPtr objdetect_CascadeClassifier_newFromFile(string fileName);

		[PreserveSig]
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x217EF30", Offset = "0x217EF30", VA = "0x217EF30")]
		public static extern void objdetect_CascadeClassifier_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x217EFB0", Offset = "0x217EFB0", VA = "0x217EFB0")]
		public static extern int objdetect_CascadeClassifier_empty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x217F030", Offset = "0x217F030", VA = "0x217F030")]
		public static extern int objdetect_CascadeClassifier_load(IntPtr obj, string fileName);

		[PreserveSig]
		[Token(Token = "0x60000A7")]
		[Address(RVA = "0x217F0DC", Offset = "0x217F0DC", VA = "0x217F0DC")]
		public static extern int objdetect_CascadeClassifier_read(IntPtr obj, IntPtr node);

		[PreserveSig]
		[Token(Token = "0x60000A8")]
		[Address(RVA = "0x217F16C", Offset = "0x217F16C", VA = "0x217F16C")]
		public static extern void objdetect_CascadeClassifier_detectMultiScale1(IntPtr obj, IntPtr image, IntPtr objects, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize);

		[PreserveSig]
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0x217F244", Offset = "0x217F244", VA = "0x217F244")]
		public static extern void objdetect_CascadeClassifier_detectMultiScale2(IntPtr obj, IntPtr image, IntPtr objects, IntPtr rejectLevels, IntPtr levelWeights, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize, int outputRejectLevels);

		[PreserveSig]
		[Token(Token = "0x60000AA")]
		[Address(RVA = "0x217F340", Offset = "0x217F340", VA = "0x217F340")]
		public static extern int objdetect_CascadeClassifier_isOldFormatCascade(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0x217F3C0", Offset = "0x217F3C0", VA = "0x217F3C0")]
		public static extern Size objdetect_CascadeClassifier_getOriginalWindowSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60000AC")]
		[Address(RVA = "0x217F440", Offset = "0x217F440", VA = "0x217F440")]
		public static extern int objdetect_CascadeClassifier_getFeatureType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x217F4C0", Offset = "0x217F4C0", VA = "0x217F4C0")]
		public static extern int objdetect_HOGDescriptor_sizeof();

		[PreserveSig]
		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x217F534", Offset = "0x217F534", VA = "0x217F534")]
		public static extern IntPtr objdetect_HOGDescriptor_new1();

		[PreserveSig]
		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x217F5A8", Offset = "0x217F5A8", VA = "0x217F5A8")]
		public static extern IntPtr objdetect_HOGDescriptor_new2(Size winSize, Size blockSize, Size blockStride, Size cellSize, int nbins, int derivAperture, double winSigma, HistogramNormType histogramNormType, double l2HysThreshold, int gammaCorrection, int nlevels);

		[PreserveSig]
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x217F6A0", Offset = "0x217F6A0", VA = "0x217F6A0")]
		public static extern IntPtr objdetect_HOGDescriptor_new3(string fileName);

		[PreserveSig]
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x217F738", Offset = "0x217F738", VA = "0x217F738")]
		public static extern void objdetect_HOGDescriptor_delete(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x217F7B8", Offset = "0x217F7B8", VA = "0x217F7B8")]
		public static extern IntPtr objdetect_HOGDescriptor_getDescriptorSize(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x217F838", Offset = "0x217F838", VA = "0x217F838")]
		public static extern int objdetect_HOGDescriptor_checkDetectorSize(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x217F8B8", Offset = "0x217F8B8", VA = "0x217F8B8")]
		public static extern double objdetect_HOGDescriptor_getWinSigma(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x217F938", Offset = "0x217F938", VA = "0x217F938")]
		public static extern void objdetect_HOGDescriptor_setSVMDetector(IntPtr self, IntPtr svmdetector);

		[PreserveSig]
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x217F9C8", Offset = "0x217F9C8", VA = "0x217F9C8")]
		public static extern bool objdetect_HOGDescriptor_load(IntPtr self, string filename, string objname);

		[PreserveSig]
		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x217FA94", Offset = "0x217FA94", VA = "0x217FA94")]
		public static extern void objdetect_HOGDescriptor_save(IntPtr self, string filename, string objname);

		[PreserveSig]
		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x217FB54", Offset = "0x217FB54", VA = "0x217FB54")]
		public static extern void objdetect_HOGDescriptor_compute(IntPtr self, IntPtr img, IntPtr descriptors, Size winStride, Size padding, [In] Point[] locations, int locationsLength);

		[PreserveSig]
		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x217FC24", Offset = "0x217FC24", VA = "0x217FC24")]
		public static extern void objdetect_HOGDescriptor_detect(IntPtr self, IntPtr img, IntPtr foundLocations, double hitThreshold, Size winStride, Size padding, [In] Point[] searchLocations, int searchLocationsLength);

		[PreserveSig]
		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x217FD04", Offset = "0x217FD04", VA = "0x217FD04")]
		public static extern void objdetect_HOGDescriptor_detect(IntPtr self, IntPtr img, IntPtr foundLocations, IntPtr weights, double hitThreshold, Size winStride, Size padding, [In] Point[] searchLocations, int searchLocationsLength);

		[PreserveSig]
		[Token(Token = "0x60000BB")]
		[Address(RVA = "0x217FDF4", Offset = "0x217FDF4", VA = "0x217FDF4")]
		public static extern void objdetect_HOGDescriptor_detectMultiScale(IntPtr self, IntPtr img, IntPtr foundLocations, double hitThreshold, Size winStride, Size padding, double scale, int groupThreshold);

		[PreserveSig]
		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x217FECC", Offset = "0x217FECC", VA = "0x217FECC")]
		public static extern void objdetect_HOGDescriptor_detectMultiScale(IntPtr self, IntPtr img, IntPtr foundLocations, IntPtr foundWeights, double hitThreshold, Size winStride, Size padding, double scale, int groupThreshold);

		[PreserveSig]
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x217FFAC", Offset = "0x217FFAC", VA = "0x217FFAC")]
		public static extern void objdetect_HOGDescriptor_computeGradient(IntPtr self, IntPtr img, IntPtr grad, IntPtr angleOfs, Size paddingTL, Size paddingBR);

		[PreserveSig]
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x218006C", Offset = "0x218006C", VA = "0x218006C")]
		public static extern void objdetect_HOGDescriptor_detectROI(IntPtr obj, IntPtr img, Point[] locations, int locationsLength, IntPtr foundLocations, IntPtr confidences, double hitThreshold, Size winStride, Size padding);

		[PreserveSig]
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x218015C", Offset = "0x218015C", VA = "0x218015C")]
		public static extern void objdetect_HOGDescriptor_detectMultiScaleROI(IntPtr obj, IntPtr img, IntPtr foundLocations, IntPtr roiScales, IntPtr roiLocations, IntPtr roiConfidences, double hitThreshold, int groupThreshold);

		[PreserveSig]
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x2180234", Offset = "0x2180234", VA = "0x2180234")]
		public static extern void objdetect_HOGDescriptor_readALTModel(IntPtr obj, string modelfile);

		[PreserveSig]
		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x21802D8", Offset = "0x21802D8", VA = "0x21802D8")]
		public static extern void objdetect_HOGDescriptor_groupRectangles(IntPtr obj, IntPtr rectList, IntPtr weights, int groupThreshold, double eps);

		[PreserveSig]
		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x2180390", Offset = "0x2180390", VA = "0x2180390")]
		public static extern Size objdetect_HOGDescriptor_winSize_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x2180410", Offset = "0x2180410", VA = "0x2180410")]
		public static extern Size objdetect_HOGDescriptor_blockSize_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000C4")]
		[Address(RVA = "0x2180490", Offset = "0x2180490", VA = "0x2180490")]
		public static extern Size objdetect_HOGDescriptor_blockStride_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x2180510", Offset = "0x2180510", VA = "0x2180510")]
		public static extern Size objdetect_HOGDescriptor_cellSize_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000C6")]
		[Address(RVA = "0x2180590", Offset = "0x2180590", VA = "0x2180590")]
		public static extern int objdetect_HOGDescriptor_nbins_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000C7")]
		[Address(RVA = "0x2180610", Offset = "0x2180610", VA = "0x2180610")]
		public static extern int objdetect_HOGDescriptor_derivAperture_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0x2180690", Offset = "0x2180690", VA = "0x2180690")]
		public static extern double objdetect_HOGDescriptor_winSigma_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x2180710", Offset = "0x2180710", VA = "0x2180710")]
		public static extern int objdetect_HOGDescriptor_histogramNormType_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x2180790", Offset = "0x2180790", VA = "0x2180790")]
		public static extern double objdetect_HOGDescriptor_L2HysThreshold_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x2180810", Offset = "0x2180810", VA = "0x2180810")]
		public static extern int objdetect_HOGDescriptor_gammaCorrection_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x2180890", Offset = "0x2180890", VA = "0x2180890")]
		public static extern int objdetect_HOGDescriptor_nlevels_get(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60000CD")]
		[Address(RVA = "0x2180910", Offset = "0x2180910", VA = "0x2180910")]
		public static extern void objdetect_HOGDescriptor_winSize_set(IntPtr self, Size value);

		[PreserveSig]
		[Token(Token = "0x60000CE")]
		[Address(RVA = "0x21809A0", Offset = "0x21809A0", VA = "0x21809A0")]
		public static extern void objdetect_HOGDescriptor_blockSize_set(IntPtr self, Size value);

		[PreserveSig]
		[Token(Token = "0x60000CF")]
		[Address(RVA = "0x2180A30", Offset = "0x2180A30", VA = "0x2180A30")]
		public static extern void objdetect_HOGDescriptor_blockStride_set(IntPtr self, Size value);

		[PreserveSig]
		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x2180AC0", Offset = "0x2180AC0", VA = "0x2180AC0")]
		public static extern void objdetect_HOGDescriptor_cellSize_set(IntPtr self, Size value);

		[PreserveSig]
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x2180B50", Offset = "0x2180B50", VA = "0x2180B50")]
		public static extern void objdetect_HOGDescriptor_nbins_set(IntPtr self, int value);

		[PreserveSig]
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0x2180BE0", Offset = "0x2180BE0", VA = "0x2180BE0")]
		public static extern void objdetect_HOGDescriptor_derivAperture_set(IntPtr self, int value);

		[PreserveSig]
		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x2180C70", Offset = "0x2180C70", VA = "0x2180C70")]
		public static extern void objdetect_HOGDescriptor_winSigma_set(IntPtr self, double value);

		[PreserveSig]
		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x2180D00", Offset = "0x2180D00", VA = "0x2180D00")]
		public static extern void objdetect_HOGDescriptor_histogramNormType_set(IntPtr self, int value);

		[PreserveSig]
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x2180D90", Offset = "0x2180D90", VA = "0x2180D90")]
		public static extern void objdetect_HOGDescriptor_L2HysThreshold_set(IntPtr self, double value);

		[PreserveSig]
		[Token(Token = "0x60000D6")]
		[Address(RVA = "0x2180E20", Offset = "0x2180E20", VA = "0x2180E20")]
		public static extern void objdetect_HOGDescriptor_gammaCorrection_set(IntPtr self, int value);

		[PreserveSig]
		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x2180EB0", Offset = "0x2180EB0", VA = "0x2180EB0")]
		public static extern void objdetect_HOGDescriptor_nlevels_set(IntPtr self, int value);

		[PreserveSig]
		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x2180F40", Offset = "0x2180F40", VA = "0x2180F40")]
		public static extern void objdetect_groupRectangles1(IntPtr rectList, int groupThreshold, double eps);

		[PreserveSig]
		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x2180FE0", Offset = "0x2180FE0", VA = "0x2180FE0")]
		public static extern void objdetect_groupRectangles2(IntPtr rectList, IntPtr weights, int groupThreshold, double eps);

		[PreserveSig]
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x2181088", Offset = "0x2181088", VA = "0x2181088")]
		public static extern void objdetect_groupRectangles3(IntPtr rectList, int groupThreshold, double eps, IntPtr weights, IntPtr levelWeights);

		[PreserveSig]
		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x2181140", Offset = "0x2181140", VA = "0x2181140")]
		public static extern void objdetect_groupRectangles4(IntPtr rectList, IntPtr rejectLevels, IntPtr levelWeights, int groupThreshold, double eps);

		[PreserveSig]
		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x21811F8", Offset = "0x21811F8", VA = "0x21811F8")]
		public static extern void objdetect_groupRectangles_meanshift(IntPtr rectList, IntPtr foundWeights, IntPtr foundScales, double detectThreshold, Size winDetSize);

		[PreserveSig]
		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x21812B0", Offset = "0x21812B0", VA = "0x21812B0")]
		public static extern void optflow_motempl_updateMotionHistory(IntPtr silhouette, IntPtr mhi, double timestamp, double duration);

		[PreserveSig]
		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x2181358", Offset = "0x2181358", VA = "0x2181358")]
		public static extern void optflow_motempl_calcMotionGradient(IntPtr mhi, IntPtr mask, IntPtr orientation, double delta1, double delta2, int apertureSize);

		[PreserveSig]
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x2181418", Offset = "0x2181418", VA = "0x2181418")]
		public static extern double optflow_motempl_calcGlobalOrientation(IntPtr orientation, IntPtr mask, IntPtr mhi, double timestamp, double duration);

		[PreserveSig]
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x21814C8", Offset = "0x21814C8", VA = "0x21814C8")]
		public static extern void optflow_motempl_segmentMotion(IntPtr mhi, IntPtr segmask, IntPtr boundingRects, double timestamp, double segThresh);

		[PreserveSig]
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x2181578", Offset = "0x2181578", VA = "0x2181578")]
		public static extern void optflow_calcOpticalFlowSF1(IntPtr from, IntPtr to, IntPtr flow, int layers, int averagingBlockSize, int maxFlow);

		[PreserveSig]
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x2181638", Offset = "0x2181638", VA = "0x2181638")]
		public static extern void optflow_calcOpticalFlowSF2(IntPtr from, IntPtr to, IntPtr flow, int layers, int averagingBlockSize, int maxFlow, double sigmaDist, double sigmaColor, int postprocessWindow, double sigmaDistFix, double sigmaColorFix, double occThr, int upscaleAveragingRadius, double upscaleSigmaDist, double upscaleSigmaColor, double speedUpThr);

		[PreserveSig]
		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x2181770", Offset = "0x2181770", VA = "0x2181770")]
		public static extern IntPtr vector_uchar_new1();

		[PreserveSig]
		[Token(Token = "0x60000E4")]
		[Address(RVA = "0x21817E0", Offset = "0x21817E0", VA = "0x21817E0")]
		public static extern IntPtr vector_uchar_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x218185C", Offset = "0x218185C", VA = "0x218185C")]
		public static extern IntPtr vector_uchar_new3([In] byte[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x21818F0", Offset = "0x21818F0", VA = "0x21818F0")]
		public static extern IntPtr vector_uchar_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x2181970", Offset = "0x2181970", VA = "0x2181970")]
		public static extern IntPtr vector_uchar_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000E8")]
		[Address(RVA = "0x21819F0", Offset = "0x21819F0", VA = "0x21819F0")]
		public static extern void vector_vector_uchar_copy(IntPtr vector, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x2181A80", Offset = "0x2181A80", VA = "0x2181A80")]
		public static extern void vector_uchar_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000EA")]
		[Address(RVA = "0x2181B00", Offset = "0x2181B00", VA = "0x2181B00")]
		public static extern IntPtr vector_int32_new1();

		[PreserveSig]
		[Token(Token = "0x60000EB")]
		[Address(RVA = "0x2181B70", Offset = "0x2181B70", VA = "0x2181B70")]
		public static extern IntPtr vector_int32_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x60000EC")]
		[Address(RVA = "0x2181BEC", Offset = "0x2181BEC", VA = "0x2181BEC")]
		public static extern IntPtr vector_int32_new3([In] int[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x2181C80", Offset = "0x2181C80", VA = "0x2181C80")]
		public static extern IntPtr vector_int32_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x2181D00", Offset = "0x2181D00", VA = "0x2181D00")]
		public static extern IntPtr vector_int32_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x2181D80", Offset = "0x2181D80", VA = "0x2181D80")]
		public static extern void vector_int32_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x2181E00", Offset = "0x2181E00", VA = "0x2181E00")]
		public static extern IntPtr vector_float_new1();

		[PreserveSig]
		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x2181E70", Offset = "0x2181E70", VA = "0x2181E70")]
		public static extern IntPtr vector_float_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x2181EEC", Offset = "0x2181EEC", VA = "0x2181EEC")]
		public static extern IntPtr vector_float_new3([In] float[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x2181F80", Offset = "0x2181F80", VA = "0x2181F80")]
		public static extern IntPtr vector_float_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x2182000", Offset = "0x2182000", VA = "0x2182000")]
		public static extern IntPtr vector_float_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x2182080", Offset = "0x2182080", VA = "0x2182080")]
		public static extern void vector_float_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x2182100", Offset = "0x2182100", VA = "0x2182100")]
		public static extern IntPtr vector_double_new1();

		[PreserveSig]
		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x2182174", Offset = "0x2182174", VA = "0x2182174")]
		public static extern IntPtr vector_double_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x21821F4", Offset = "0x21821F4", VA = "0x21821F4")]
		public static extern IntPtr vector_double_new3([In] double[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x218228C", Offset = "0x218228C", VA = "0x218228C")]
		public static extern IntPtr vector_double_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x218230C", Offset = "0x218230C", VA = "0x218230C")]
		public static extern IntPtr vector_double_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x218238C", Offset = "0x218238C", VA = "0x218238C")]
		public static extern void vector_double_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x218240C", Offset = "0x218240C", VA = "0x218240C")]
		public static extern IntPtr vector_Vec2f_new1();

		[PreserveSig]
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x218247C", Offset = "0x218247C", VA = "0x218247C")]
		public static extern IntPtr vector_Vec2f_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x21824F8", Offset = "0x21824F8", VA = "0x21824F8")]
		public static extern IntPtr vector_Vec2f_new3([In] Vec2f[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x218258C", Offset = "0x218258C", VA = "0x218258C")]
		public static extern IntPtr vector_Vec2f_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000100")]
		[Address(RVA = "0x218260C", Offset = "0x218260C", VA = "0x218260C")]
		public static extern IntPtr vector_Vec2f_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000101")]
		[Address(RVA = "0x218268C", Offset = "0x218268C", VA = "0x218268C")]
		public static extern void vector_Vec2f_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000102")]
		[Address(RVA = "0x218270C", Offset = "0x218270C", VA = "0x218270C")]
		public static extern IntPtr vector_Vec3f_new1();

		[PreserveSig]
		[Token(Token = "0x6000103")]
		[Address(RVA = "0x218277C", Offset = "0x218277C", VA = "0x218277C")]
		public static extern IntPtr vector_Vec3f_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000104")]
		[Address(RVA = "0x21827F8", Offset = "0x21827F8", VA = "0x21827F8")]
		public static extern IntPtr vector_Vec3f_new3([In] Vec3f[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000105")]
		[Address(RVA = "0x218288C", Offset = "0x218288C", VA = "0x218288C")]
		public static extern IntPtr vector_Vec3f_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000106")]
		[Address(RVA = "0x218290C", Offset = "0x218290C", VA = "0x218290C")]
		public static extern IntPtr vector_Vec3f_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000107")]
		[Address(RVA = "0x218298C", Offset = "0x218298C", VA = "0x218298C")]
		public static extern void vector_Vec3f_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000108")]
		[Address(RVA = "0x2182A0C", Offset = "0x2182A0C", VA = "0x2182A0C")]
		public static extern IntPtr vector_Vec4f_new1();

		[PreserveSig]
		[Token(Token = "0x6000109")]
		[Address(RVA = "0x2182A7C", Offset = "0x2182A7C", VA = "0x2182A7C")]
		public static extern IntPtr vector_Vec4f_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x600010A")]
		[Address(RVA = "0x2182AF8", Offset = "0x2182AF8", VA = "0x2182AF8")]
		public static extern IntPtr vector_Vec4f_new3([In] Vec4f[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x600010B")]
		[Address(RVA = "0x2182B8C", Offset = "0x2182B8C", VA = "0x2182B8C")]
		public static extern IntPtr vector_Vec4f_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600010C")]
		[Address(RVA = "0x2182C0C", Offset = "0x2182C0C", VA = "0x2182C0C")]
		public static extern IntPtr vector_Vec4f_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600010D")]
		[Address(RVA = "0x2182C8C", Offset = "0x2182C8C", VA = "0x2182C8C")]
		public static extern void vector_Vec4f_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600010E")]
		[Address(RVA = "0x2182D0C", Offset = "0x2182D0C", VA = "0x2182D0C")]
		public static extern IntPtr vector_Vec4i_new1();

		[PreserveSig]
		[Token(Token = "0x600010F")]
		[Address(RVA = "0x2182D7C", Offset = "0x2182D7C", VA = "0x2182D7C")]
		public static extern IntPtr vector_Vec4i_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000110")]
		[Address(RVA = "0x2182DF8", Offset = "0x2182DF8", VA = "0x2182DF8")]
		public static extern IntPtr vector_Vec4i_new3([In] Vec4i[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000111")]
		[Address(RVA = "0x2182E8C", Offset = "0x2182E8C", VA = "0x2182E8C")]
		public static extern IntPtr vector_Vec4i_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000112")]
		[Address(RVA = "0x2182F0C", Offset = "0x2182F0C", VA = "0x2182F0C")]
		public static extern IntPtr vector_Vec4i_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000113")]
		[Address(RVA = "0x2182F8C", Offset = "0x2182F8C", VA = "0x2182F8C")]
		public static extern void vector_Vec4i_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000114")]
		[Address(RVA = "0x218300C", Offset = "0x218300C", VA = "0x218300C")]
		public static extern IntPtr vector_Vec6f_new1();

		[PreserveSig]
		[Token(Token = "0x6000115")]
		[Address(RVA = "0x218307C", Offset = "0x218307C", VA = "0x218307C")]
		public static extern IntPtr vector_Vec6f_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000116")]
		[Address(RVA = "0x21830F8", Offset = "0x21830F8", VA = "0x21830F8")]
		public static extern IntPtr vector_Vec6f_new3([In] Vec6f[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000117")]
		[Address(RVA = "0x218318C", Offset = "0x218318C", VA = "0x218318C")]
		public static extern IntPtr vector_Vec6f_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000118")]
		[Address(RVA = "0x218320C", Offset = "0x218320C", VA = "0x218320C")]
		public static extern IntPtr vector_Vec6f_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000119")]
		[Address(RVA = "0x218328C", Offset = "0x218328C", VA = "0x218328C")]
		public static extern void vector_Vec6f_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600011A")]
		[Address(RVA = "0x218330C", Offset = "0x218330C", VA = "0x218330C")]
		public static extern IntPtr vector_Vec6d_new1();

		[PreserveSig]
		[Token(Token = "0x600011B")]
		[Address(RVA = "0x218337C", Offset = "0x218337C", VA = "0x218337C")]
		public static extern IntPtr vector_Vec6d_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x600011C")]
		[Address(RVA = "0x21833F8", Offset = "0x21833F8", VA = "0x21833F8")]
		public static extern IntPtr vector_Vec6d_new3([In] Vec6d[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x600011D")]
		[Address(RVA = "0x218348C", Offset = "0x218348C", VA = "0x218348C")]
		public static extern IntPtr vector_Vec6d_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600011E")]
		[Address(RVA = "0x218350C", Offset = "0x218350C", VA = "0x218350C")]
		public static extern IntPtr vector_Vec6d_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600011F")]
		[Address(RVA = "0x218358C", Offset = "0x218358C", VA = "0x218358C")]
		public static extern void vector_Vec6d_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000120")]
		[Address(RVA = "0x218360C", Offset = "0x218360C", VA = "0x218360C")]
		public static extern IntPtr vector_Point2i_new1();

		[PreserveSig]
		[Token(Token = "0x6000121")]
		[Address(RVA = "0x2183680", Offset = "0x2183680", VA = "0x2183680")]
		public static extern IntPtr vector_Point2i_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000122")]
		[Address(RVA = "0x2183700", Offset = "0x2183700", VA = "0x2183700")]
		public static extern IntPtr vector_Point2i_new3([In] Point[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000123")]
		[Address(RVA = "0x2183798", Offset = "0x2183798", VA = "0x2183798")]
		public static extern IntPtr vector_Point2i_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000124")]
		[Address(RVA = "0x2183818", Offset = "0x2183818", VA = "0x2183818")]
		public static extern IntPtr vector_Point2i_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000125")]
		[Address(RVA = "0x2183898", Offset = "0x2183898", VA = "0x2183898")]
		public static extern void vector_Point2i_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000126")]
		[Address(RVA = "0x2183918", Offset = "0x2183918", VA = "0x2183918")]
		public static extern IntPtr vector_Point2f_new1();

		[PreserveSig]
		[Token(Token = "0x6000127")]
		[Address(RVA = "0x218398C", Offset = "0x218398C", VA = "0x218398C")]
		public static extern IntPtr vector_Point2f_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000128")]
		[Address(RVA = "0x2183A0C", Offset = "0x2183A0C", VA = "0x2183A0C")]
		public static extern IntPtr vector_Point2f_new3([In] Point2f[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000129")]
		[Address(RVA = "0x2183AA4", Offset = "0x2183AA4", VA = "0x2183AA4")]
		public static extern IntPtr vector_Point2f_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600012A")]
		[Address(RVA = "0x2183B24", Offset = "0x2183B24", VA = "0x2183B24")]
		public static extern IntPtr vector_Point2f_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600012B")]
		[Address(RVA = "0x2183BA4", Offset = "0x2183BA4", VA = "0x2183BA4")]
		public static extern void vector_Point2f_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600012C")]
		[Address(RVA = "0x2183C24", Offset = "0x2183C24", VA = "0x2183C24")]
		public static extern IntPtr vector_Point3f_new1();

		[PreserveSig]
		[Token(Token = "0x600012D")]
		[Address(RVA = "0x2183C98", Offset = "0x2183C98", VA = "0x2183C98")]
		public static extern IntPtr vector_Point3f_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x600012E")]
		[Address(RVA = "0x2183D18", Offset = "0x2183D18", VA = "0x2183D18")]
		public static extern IntPtr vector_Point3f_new3([In] Point3f[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x600012F")]
		[Address(RVA = "0x2183DB0", Offset = "0x2183DB0", VA = "0x2183DB0")]
		public static extern IntPtr vector_Point3f_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000130")]
		[Address(RVA = "0x2183E30", Offset = "0x2183E30", VA = "0x2183E30")]
		public static extern IntPtr vector_Point3f_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000131")]
		[Address(RVA = "0x2183EB0", Offset = "0x2183EB0", VA = "0x2183EB0")]
		public static extern void vector_Point3f_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000132")]
		[Address(RVA = "0x2183F30", Offset = "0x2183F30", VA = "0x2183F30")]
		public static extern IntPtr vector_Rect_new1();

		[PreserveSig]
		[Token(Token = "0x6000133")]
		[Address(RVA = "0x2183FA4", Offset = "0x2183FA4", VA = "0x2183FA4")]
		public static extern IntPtr vector_Rect_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000134")]
		[Address(RVA = "0x2184024", Offset = "0x2184024", VA = "0x2184024")]
		public static extern IntPtr vector_Rect_new3([In] Rect[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000135")]
		[Address(RVA = "0x21840B8", Offset = "0x21840B8", VA = "0x21840B8")]
		public static extern IntPtr vector_Rect_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000136")]
		[Address(RVA = "0x2184138", Offset = "0x2184138", VA = "0x2184138")]
		public static extern IntPtr vector_Rect_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000137")]
		[Address(RVA = "0x21841B8", Offset = "0x21841B8", VA = "0x21841B8")]
		public static extern void vector_Rect_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000138")]
		[Address(RVA = "0x2184238", Offset = "0x2184238", VA = "0x2184238")]
		public static extern IntPtr vector_ERStat_new1();

		[PreserveSig]
		[Token(Token = "0x6000139")]
		[Address(RVA = "0x21842AC", Offset = "0x21842AC", VA = "0x21842AC")]
		public static extern IntPtr vector_ERStat_new2([In] IntPtr[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x600013A")]
		[Address(RVA = "0x2184344", Offset = "0x2184344", VA = "0x2184344")]
		public static extern IntPtr vector_ERStat_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600013B")]
		[Address(RVA = "0x21843C4", Offset = "0x21843C4", VA = "0x21843C4")]
		public static extern void vector_ERStat_getElement(IntPtr vector, int index, IntPtr output);

		[PreserveSig]
		[Token(Token = "0x600013C")]
		[Address(RVA = "0x218445C", Offset = "0x218445C", VA = "0x218445C")]
		public static extern void vector_ERStat_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600013D")]
		[Address(RVA = "0x21844DC", Offset = "0x21844DC", VA = "0x21844DC")]
		public static extern IntPtr vector_KeyPoint_new1();

		[PreserveSig]
		[Token(Token = "0x600013E")]
		[Address(RVA = "0x2184550", Offset = "0x2184550", VA = "0x2184550")]
		public static extern IntPtr vector_KeyPoint_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x600013F")]
		[Address(RVA = "0x21845D0", Offset = "0x21845D0", VA = "0x21845D0")]
		public static extern IntPtr vector_KeyPoint_new3([In] KeyPoint[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000140")]
		[Address(RVA = "0x2184668", Offset = "0x2184668", VA = "0x2184668")]
		public static extern IntPtr vector_KeyPoint_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000141")]
		[Address(RVA = "0x21846E8", Offset = "0x21846E8", VA = "0x21846E8")]
		public static extern IntPtr vector_KeyPoint_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000142")]
		[Address(RVA = "0x2184768", Offset = "0x2184768", VA = "0x2184768")]
		public static extern void vector_KeyPoint_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000143")]
		[Address(RVA = "0x21847E8", Offset = "0x21847E8", VA = "0x21847E8")]
		public static extern IntPtr vector_DMatch_new1();

		[PreserveSig]
		[Token(Token = "0x6000144")]
		[Address(RVA = "0x218485C", Offset = "0x218485C", VA = "0x218485C")]
		public static extern IntPtr vector_DMatch_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000145")]
		[Address(RVA = "0x21848DC", Offset = "0x21848DC", VA = "0x21848DC")]
		public static extern IntPtr vector_DMatch_new3([In] DMatch[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000146")]
		[Address(RVA = "0x2184974", Offset = "0x2184974", VA = "0x2184974")]
		public static extern IntPtr vector_DMatch_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000147")]
		[Address(RVA = "0x21849F4", Offset = "0x21849F4", VA = "0x21849F4")]
		public static extern IntPtr vector_DMatch_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000148")]
		[Address(RVA = "0x2184A74", Offset = "0x2184A74", VA = "0x2184A74")]
		public static extern void vector_DMatch_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000149")]
		[Address(RVA = "0x2184AF4", Offset = "0x2184AF4", VA = "0x2184AF4")]
		public static extern IntPtr vector_vector_int_new1();

		[PreserveSig]
		[Token(Token = "0x600014A")]
		[Address(RVA = "0x2184B68", Offset = "0x2184B68", VA = "0x2184B68")]
		public static extern IntPtr vector_vector_int_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x600014B")]
		[Address(RVA = "0x2184BE8", Offset = "0x2184BE8", VA = "0x2184BE8")]
		public static extern IntPtr vector_vector_int_getSize1(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600014C")]
		[Address(RVA = "0x2184C68", Offset = "0x2184C68", VA = "0x2184C68")]
		public static extern void vector_vector_int_getSize2(IntPtr vector, [In][Out] IntPtr[] size);

		[PreserveSig]
		[Token(Token = "0x600014D")]
		[Address(RVA = "0x2184D00", Offset = "0x2184D00", VA = "0x2184D00")]
		public static extern IntPtr vector_vector_int_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600014E")]
		[Address(RVA = "0x2184D80", Offset = "0x2184D80", VA = "0x2184D80")]
		public static extern void vector_vector_int_copy(IntPtr vec, IntPtr[] dst);

		[PreserveSig]
		[Token(Token = "0x600014F")]
		[Address(RVA = "0x2184E18", Offset = "0x2184E18", VA = "0x2184E18")]
		public static extern void vector_vector_int_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000150")]
		[Address(RVA = "0x2184E98", Offset = "0x2184E98", VA = "0x2184E98")]
		public static extern IntPtr vector_vector_float_new1();

		[PreserveSig]
		[Token(Token = "0x6000151")]
		[Address(RVA = "0x2184F0C", Offset = "0x2184F0C", VA = "0x2184F0C")]
		public static extern IntPtr vector_vector_float_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000152")]
		[Address(RVA = "0x2184F8C", Offset = "0x2184F8C", VA = "0x2184F8C")]
		public static extern IntPtr vector_vector_float_getSize1(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000153")]
		[Address(RVA = "0x218500C", Offset = "0x218500C", VA = "0x218500C")]
		public static extern void vector_vector_float_getSize2(IntPtr vector, [In][Out] IntPtr[] size);

		[PreserveSig]
		[Token(Token = "0x6000154")]
		[Address(RVA = "0x21850A4", Offset = "0x21850A4", VA = "0x21850A4")]
		public static extern IntPtr vector_vector_float_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000155")]
		[Address(RVA = "0x2185124", Offset = "0x2185124", VA = "0x2185124")]
		public static extern void vector_vector_float_copy(IntPtr vec, IntPtr[] dst);

		[PreserveSig]
		[Token(Token = "0x6000156")]
		[Address(RVA = "0x21851BC", Offset = "0x21851BC", VA = "0x21851BC")]
		public static extern void vector_vector_float_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000157")]
		[Address(RVA = "0x218523C", Offset = "0x218523C", VA = "0x218523C")]
		public static extern IntPtr vector_vector_double_new1();

		[PreserveSig]
		[Token(Token = "0x6000158")]
		[Address(RVA = "0x21852B0", Offset = "0x21852B0", VA = "0x21852B0")]
		public static extern IntPtr vector_vector_double_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000159")]
		[Address(RVA = "0x2185330", Offset = "0x2185330", VA = "0x2185330")]
		public static extern IntPtr vector_vector_double_getSize1(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600015A")]
		[Address(RVA = "0x21853B0", Offset = "0x21853B0", VA = "0x21853B0")]
		public static extern void vector_vector_double_getSize2(IntPtr vector, [In][Out] IntPtr[] size);

		[PreserveSig]
		[Token(Token = "0x600015B")]
		[Address(RVA = "0x2185448", Offset = "0x2185448", VA = "0x2185448")]
		public static extern IntPtr vector_vector_double_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600015C")]
		[Address(RVA = "0x21854C8", Offset = "0x21854C8", VA = "0x21854C8")]
		public static extern void vector_vector_double_copy(IntPtr vec, IntPtr[] dst);

		[PreserveSig]
		[Token(Token = "0x600015D")]
		[Address(RVA = "0x2185560", Offset = "0x2185560", VA = "0x2185560")]
		public static extern void vector_vector_double_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600015E")]
		[Address(RVA = "0x21855E0", Offset = "0x21855E0", VA = "0x21855E0")]
		public static extern IntPtr vector_vector_KeyPoint_new1();

		[PreserveSig]
		[Token(Token = "0x600015F")]
		[Address(RVA = "0x2185654", Offset = "0x2185654", VA = "0x2185654")]
		public static extern IntPtr vector_vector_KeyPoint_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000160")]
		[Address(RVA = "0x21856D4", Offset = "0x21856D4", VA = "0x21856D4")]
		public static extern IntPtr vector_vector_KeyPoint_new3(IntPtr[] values, int size1, int[] size2);

		[PreserveSig]
		[Token(Token = "0x6000161")]
		[Address(RVA = "0x218577C", Offset = "0x218577C", VA = "0x218577C")]
		public static extern IntPtr vector_vector_KeyPoint_getSize1(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000162")]
		[Address(RVA = "0x21857FC", Offset = "0x21857FC", VA = "0x21857FC")]
		public static extern void vector_vector_KeyPoint_getSize2(IntPtr vector, [In][Out] IntPtr[] size);

		[PreserveSig]
		[Token(Token = "0x6000163")]
		[Address(RVA = "0x2185894", Offset = "0x2185894", VA = "0x2185894")]
		public static extern IntPtr vector_vector_KeyPoint_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000164")]
		[Address(RVA = "0x2185914", Offset = "0x2185914", VA = "0x2185914")]
		public static extern void vector_vector_KeyPoint_copy(IntPtr vec, IntPtr[] dst);

		[PreserveSig]
		[Token(Token = "0x6000165")]
		[Address(RVA = "0x21859AC", Offset = "0x21859AC", VA = "0x21859AC")]
		public static extern void vector_vector_KeyPoint_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000166")]
		[Address(RVA = "0x2185A2C", Offset = "0x2185A2C", VA = "0x2185A2C")]
		public static extern IntPtr vector_vector_DMatch_new1();

		[PreserveSig]
		[Token(Token = "0x6000167")]
		[Address(RVA = "0x2185AA0", Offset = "0x2185AA0", VA = "0x2185AA0")]
		public static extern IntPtr vector_vector_DMatch_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000168")]
		[Address(RVA = "0x2185B20", Offset = "0x2185B20", VA = "0x2185B20")]
		public static extern IntPtr vector_vector_DMatch_getSize1(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000169")]
		[Address(RVA = "0x2185BA0", Offset = "0x2185BA0", VA = "0x2185BA0")]
		public static extern void vector_vector_DMatch_getSize2(IntPtr vector, [In][Out] IntPtr[] size);

		[PreserveSig]
		[Token(Token = "0x600016A")]
		[Address(RVA = "0x2185C38", Offset = "0x2185C38", VA = "0x2185C38")]
		public static extern IntPtr vector_vector_DMatch_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600016B")]
		[Address(RVA = "0x2185CB8", Offset = "0x2185CB8", VA = "0x2185CB8")]
		public static extern void vector_vector_DMatch_copy(IntPtr vec, IntPtr[] dst);

		[PreserveSig]
		[Token(Token = "0x600016C")]
		[Address(RVA = "0x2185D50", Offset = "0x2185D50", VA = "0x2185D50")]
		public static extern void vector_vector_DMatch_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600016D")]
		[Address(RVA = "0x2185DD0", Offset = "0x2185DD0", VA = "0x2185DD0")]
		public static extern IntPtr vector_vector_Point_new1();

		[PreserveSig]
		[Token(Token = "0x600016E")]
		[Address(RVA = "0x2185E44", Offset = "0x2185E44", VA = "0x2185E44")]
		public static extern IntPtr vector_vector_Point_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x600016F")]
		[Address(RVA = "0x2185EC4", Offset = "0x2185EC4", VA = "0x2185EC4")]
		public static extern IntPtr vector_vector_Point_new3(IntPtr size1, IntPtr[] size2, IntPtr[] source);

		[PreserveSig]
		[Token(Token = "0x6000170")]
		[Address(RVA = "0x2185F68", Offset = "0x2185F68", VA = "0x2185F68")]
		public static extern IntPtr vector_vector_Point_getSize1(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000171")]
		[Address(RVA = "0x2185FE8", Offset = "0x2185FE8", VA = "0x2185FE8")]
		public static extern void vector_vector_Point_getSize2(IntPtr vector, [In][Out] IntPtr[] size);

		[PreserveSig]
		[Token(Token = "0x6000172")]
		[Address(RVA = "0x2186080", Offset = "0x2186080", VA = "0x2186080")]
		public static extern IntPtr vector_vector_Point_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000173")]
		[Address(RVA = "0x2186100", Offset = "0x2186100", VA = "0x2186100")]
		public static extern void vector_vector_Point_copy(IntPtr vec, IntPtr[] dst);

		[PreserveSig]
		[Token(Token = "0x6000174")]
		[Address(RVA = "0x2186198", Offset = "0x2186198", VA = "0x2186198")]
		public static extern void vector_vector_Point_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000175")]
		[Address(RVA = "0x2186218", Offset = "0x2186218", VA = "0x2186218")]
		public static extern IntPtr vector_vector_Vec2i_new1();

		[PreserveSig]
		[Token(Token = "0x6000176")]
		[Address(RVA = "0x218628C", Offset = "0x218628C", VA = "0x218628C")]
		public static extern IntPtr vector_vector_Vec2i_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000177")]
		[Address(RVA = "0x218630C", Offset = "0x218630C", VA = "0x218630C")]
		public static extern IntPtr vector_vector_Vec2i_new3(IntPtr size1, IntPtr[] size2, IntPtr[] source);

		[PreserveSig]
		[Token(Token = "0x6000178")]
		[Address(RVA = "0x21863B0", Offset = "0x21863B0", VA = "0x21863B0")]
		public static extern IntPtr vector_vector_Vec2i_getSize1(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000179")]
		[Address(RVA = "0x2186430", Offset = "0x2186430", VA = "0x2186430")]
		public static extern void vector_vector_Vec2i_getSize2(IntPtr vector, [In][Out] IntPtr[] size);

		[PreserveSig]
		[Token(Token = "0x600017A")]
		[Address(RVA = "0x21864C8", Offset = "0x21864C8", VA = "0x21864C8")]
		public static extern IntPtr vector_vector_Vec2i_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600017B")]
		[Address(RVA = "0x2186548", Offset = "0x2186548", VA = "0x2186548")]
		public static extern void vector_vector_Vec2i_copy(IntPtr vec, IntPtr[] dst);

		[PreserveSig]
		[Token(Token = "0x600017C")]
		[Address(RVA = "0x21865E0", Offset = "0x21865E0", VA = "0x21865E0")]
		public static extern void vector_vector_Vec2i_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600017D")]
		[Address(RVA = "0x2186660", Offset = "0x2186660", VA = "0x2186660")]
		public static extern IntPtr vector_vector_Point2f_new1();

		[PreserveSig]
		[Token(Token = "0x600017E")]
		[Address(RVA = "0x21866D4", Offset = "0x21866D4", VA = "0x21866D4")]
		public static extern IntPtr vector_vector_Point2f_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x600017F")]
		[Address(RVA = "0x2186754", Offset = "0x2186754", VA = "0x2186754")]
		public static extern IntPtr vector_vector_Point2f_getSize1(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000180")]
		[Address(RVA = "0x21867D4", Offset = "0x21867D4", VA = "0x21867D4")]
		public static extern void vector_vector_Point2f_getSize2(IntPtr vector, [In][Out] IntPtr[] size);

		[PreserveSig]
		[Token(Token = "0x6000181")]
		[Address(RVA = "0x218686C", Offset = "0x218686C", VA = "0x218686C")]
		public static extern IntPtr vector_vector_Point2f_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000182")]
		[Address(RVA = "0x21868EC", Offset = "0x21868EC", VA = "0x21868EC")]
		public static extern void vector_vector_Point2f_copy(IntPtr vec, IntPtr[] dst);

		[PreserveSig]
		[Token(Token = "0x6000183")]
		[Address(RVA = "0x2186984", Offset = "0x2186984", VA = "0x2186984")]
		public static extern void vector_vector_Point2f_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000184")]
		[Address(RVA = "0x2186A04", Offset = "0x2186A04", VA = "0x2186A04")]
		public static extern IntPtr vector_string_new1();

		[PreserveSig]
		[Token(Token = "0x6000185")]
		[Address(RVA = "0x2186A78", Offset = "0x2186A78", VA = "0x2186A78")]
		public static extern IntPtr vector_string_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000186")]
		[Address(RVA = "0x2186AF8", Offset = "0x2186AF8", VA = "0x2186AF8")]
		public static extern IntPtr vector_string_getSize(IntPtr vec);

		[PreserveSig]
		[Token(Token = "0x6000187")]
		[Address(RVA = "0x2186B78", Offset = "0x2186B78", VA = "0x2186B78")]
		public static extern IntPtr vector_string_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000188")]
		[Address(RVA = "0x2186BF8", Offset = "0x2186BF8", VA = "0x2186BF8")]
		public unsafe static extern sbyte* vector_string_elemAt(IntPtr vector, int i);

		[PreserveSig]
		[Token(Token = "0x6000189")]
		[Address(RVA = "0x2186C88", Offset = "0x2186C88", VA = "0x2186C88")]
		public static extern void vector_string_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600018A")]
		[Address(RVA = "0x2186D08", Offset = "0x2186D08", VA = "0x2186D08")]
		public static extern void vector_string_setAt(IntPtr vector, int i, string value);

		[PreserveSig]
		[Token(Token = "0x600018B")]
		[Address(RVA = "0x2186DB4", Offset = "0x2186DB4", VA = "0x2186DB4")]
		public static extern IntPtr vector_vector_ERStat_new1();

		[PreserveSig]
		[Token(Token = "0x600018C")]
		[Address(RVA = "0x2186E28", Offset = "0x2186E28", VA = "0x2186E28")]
		public static extern IntPtr vector_vector_ERStat_new2(IntPtr size1, IntPtr[] sizes2, IntPtr[] src);

		[PreserveSig]
		[Token(Token = "0x600018D")]
		[Address(RVA = "0x2186ED0", Offset = "0x2186ED0", VA = "0x2186ED0")]
		public static extern IntPtr vector_vector_ERStat_getSize1(IntPtr vec);

		[PreserveSig]
		[Token(Token = "0x600018E")]
		[Address(RVA = "0x2186F50", Offset = "0x2186F50", VA = "0x2186F50")]
		public static extern void vector_vector_ERStat_getSize2(IntPtr vec, [In][Out] IntPtr[] sizes);

		[PreserveSig]
		[Token(Token = "0x600018F")]
		[Address(RVA = "0x2186FE8", Offset = "0x2186FE8", VA = "0x2186FE8")]
		public static extern void vector_vector_ERStat_getElement(IntPtr vector, int i, int j, IntPtr output);

		[PreserveSig]
		[Token(Token = "0x6000190")]
		[Address(RVA = "0x2187090", Offset = "0x2187090", VA = "0x2187090")]
		public static extern void vector_vector_ERStat_delete(IntPtr vec);

		[PreserveSig]
		[Token(Token = "0x6000191")]
		[Address(RVA = "0x2187110", Offset = "0x2187110", VA = "0x2187110")]
		public static extern IntPtr vector_Mat_new1();

		[PreserveSig]
		[Token(Token = "0x6000192")]
		[Address(RVA = "0x2187184", Offset = "0x2187184", VA = "0x2187184")]
		public static extern IntPtr vector_Mat_new2(IntPtr size);

		[PreserveSig]
		[Token(Token = "0x6000193")]
		[Address(RVA = "0x2187204", Offset = "0x2187204", VA = "0x2187204")]
		public static extern IntPtr vector_Mat_new3(IntPtr[] data, IntPtr dataLength);

		[PreserveSig]
		[Token(Token = "0x6000194")]
		[Address(RVA = "0x218729C", Offset = "0x218729C", VA = "0x218729C")]
		public static extern IntPtr vector_Mat_getSize(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000195")]
		[Address(RVA = "0x218731C", Offset = "0x218731C", VA = "0x218731C")]
		public static extern IntPtr vector_Mat_getPointer(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000196")]
		[Address(RVA = "0x218739C", Offset = "0x218739C", VA = "0x218739C")]
		public static extern void vector_Mat_delete(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000197")]
		[Address(RVA = "0x2187418", Offset = "0x2187418", VA = "0x2187418")]
		public static extern void vector_Mat_assignToArray(IntPtr vector, IntPtr[] arr);

		[PreserveSig]
		[Token(Token = "0x6000198")]
		[Address(RVA = "0x21874B0", Offset = "0x21874B0", VA = "0x21874B0")]
		public static extern void vector_Mat_addref(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000199")]
		[Address(RVA = "0x218752C", Offset = "0x218752C", VA = "0x218752C")]
		public static extern IntPtr stitching_createStitcher(int try_use_cpu);

		[PreserveSig]
		[Token(Token = "0x600019A")]
		[Address(RVA = "0x21875AC", Offset = "0x21875AC", VA = "0x21875AC")]
		public static extern void stitching_Ptr_Stitcher_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600019B")]
		[Address(RVA = "0x218762C", Offset = "0x218762C", VA = "0x218762C")]
		public static extern IntPtr stitching_Ptr_Stitcher_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600019C")]
		[Address(RVA = "0x21876AC", Offset = "0x21876AC", VA = "0x21876AC")]
		public static extern double stitching_Stitcher_registrationResol(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600019D")]
		[Address(RVA = "0x218772C", Offset = "0x218772C", VA = "0x218772C")]
		public static extern void stitching_Stitcher_setRegistrationResol(IntPtr obj, double resolMpx);

		[PreserveSig]
		[Token(Token = "0x600019E")]
		[Address(RVA = "0x21877BC", Offset = "0x21877BC", VA = "0x21877BC")]
		public static extern double stitching_Stitcher_seamEstimationResol(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600019F")]
		[Address(RVA = "0x218783C", Offset = "0x218783C", VA = "0x218783C")]
		public static extern void stitching_Stitcher_setSeamEstimationResol(IntPtr obj, double resolMpx);

		[PreserveSig]
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x21878CC", Offset = "0x21878CC", VA = "0x21878CC")]
		public static extern double stitching_Stitcher_compositingResol(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x218794C", Offset = "0x218794C", VA = "0x218794C")]
		public static extern void stitching_Stitcher_setCompositingResol(IntPtr obj, double resolMpx);

		[PreserveSig]
		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x21879DC", Offset = "0x21879DC", VA = "0x21879DC")]
		public static extern double stitching_Stitcher_panoConfidenceThresh(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0x2187A5C", Offset = "0x2187A5C", VA = "0x2187A5C")]
		public static extern void stitching_Stitcher_setPanoConfidenceThresh(IntPtr obj, double confThresh);

		[PreserveSig]
		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x2187AEC", Offset = "0x2187AEC", VA = "0x2187AEC")]
		public static extern int stitching_Stitcher_waveCorrection(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x2187B6C", Offset = "0x2187B6C", VA = "0x2187B6C")]
		public static extern void stitching_Stitcher_setWaveCorrection(IntPtr obj, int flag);

		[PreserveSig]
		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x2187BFC", Offset = "0x2187BFC", VA = "0x2187BFC")]
		public static extern int stitching_Stitcher_waveCorrectKind(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x2187C7C", Offset = "0x2187C7C", VA = "0x2187C7C")]
		public static extern void stitching_Stitcher_setWaveCorrectKind(IntPtr obj, int kind);

		[PreserveSig]
		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x2187D0C", Offset = "0x2187D0C", VA = "0x2187D0C")]
		public static extern int stitching_Stitcher_estimateTransform_InputArray1(IntPtr obj, IntPtr images);

		[PreserveSig]
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x2187D9C", Offset = "0x2187D9C", VA = "0x2187D9C")]
		public static extern int stitching_Stitcher_estimateTransform_InputArray2(IntPtr obj, IntPtr images, IntPtr[] rois, int roisSize1, int[] roisSize2);

		[PreserveSig]
		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x2187E5C", Offset = "0x2187E5C", VA = "0x2187E5C")]
		public static extern int stitching_Stitcher_estimateTransform_MatArray1(IntPtr obj, IntPtr[] images, int imagesSize);

		[PreserveSig]
		[Token(Token = "0x60001AB")]
		[Address(RVA = "0x2187EFC", Offset = "0x2187EFC", VA = "0x2187EFC")]
		public static extern int stitching_Stitcher_estimateTransform_MatArray2(IntPtr obj, IntPtr[] images, int imagesSize, IntPtr[] rois, int roisSize1, int[] roisSize2);

		[PreserveSig]
		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x2187FD4", Offset = "0x2187FD4", VA = "0x2187FD4")]
		public static extern int stitching_Stitcher_composePanorama1(IntPtr obj, IntPtr pano);

		[PreserveSig]
		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x2188064", Offset = "0x2188064", VA = "0x2188064")]
		public static extern int stitching_Stitcher_composePanorama2_InputArray(IntPtr obj, IntPtr images, IntPtr pano);

		[PreserveSig]
		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x21880FC", Offset = "0x21880FC", VA = "0x21880FC")]
		public static extern int stitching_Stitcher_composePanorama2_MatArray(IntPtr obj, IntPtr[] images, int imagesSize, IntPtr pano);

		[PreserveSig]
		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x21881AC", Offset = "0x21881AC", VA = "0x21881AC")]
		public static extern int stitching_Stitcher_stitch1_InputArray(IntPtr obj, IntPtr images, IntPtr pano);

		[PreserveSig]
		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x2188244", Offset = "0x2188244", VA = "0x2188244")]
		public static extern int stitching_Stitcher_stitch1_MatArray(IntPtr obj, IntPtr[] images, int imagesSize, IntPtr pano);

		[PreserveSig]
		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x21882F4", Offset = "0x21882F4", VA = "0x21882F4")]
		public static extern int stitching_Stitcher_stitch2_InputArray(IntPtr obj, IntPtr images, IntPtr[] rois, int roisSize1, int[] roisSize2, IntPtr pano);

		[PreserveSig]
		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x21883C4", Offset = "0x21883C4", VA = "0x21883C4")]
		public static extern int stitching_Stitcher_stitch2_MatArray(IntPtr obj, IntPtr[] images, int imagesSize, IntPtr[] rois, int roisSize1, int[] roisSize2, IntPtr pano);

		[PreserveSig]
		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x21884A4", Offset = "0x21884A4", VA = "0x21884A4")]
		public static extern void stitching_Stitcher_component(IntPtr obj, out IntPtr pointer, out int length);

		[PreserveSig]
		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x218853C", Offset = "0x218853C", VA = "0x218853C")]
		public static extern double stitching_Stitcher_workScale(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x21885BC", Offset = "0x21885BC", VA = "0x21885BC")]
		public static extern void superres_FrameSource_nextFrame(IntPtr obj, IntPtr frame);

		[PreserveSig]
		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x218864C", Offset = "0x218864C", VA = "0x218864C")]
		public static extern void superres_FrameSource_reset(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x21886CC", Offset = "0x21886CC", VA = "0x21886CC")]
		public static extern IntPtr superres_createFrameSource_Empty();

		[PreserveSig]
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x2188740", Offset = "0x2188740", VA = "0x2188740")]
		public static extern IntPtr superres_createFrameSource_Video(string fileName);

		[PreserveSig]
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x21887D8", Offset = "0x21887D8", VA = "0x21887D8")]
		public static extern IntPtr superres_createFrameSource_Video_CUDA(string fileName);

		[PreserveSig]
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x2188870", Offset = "0x2188870", VA = "0x2188870")]
		public static extern IntPtr superres_createFrameSource_Camera(int deviceId);

		[PreserveSig]
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x21888F0", Offset = "0x21888F0", VA = "0x21888F0")]
		public static extern IntPtr superres_Ptr_FrameSource_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x2188970", Offset = "0x2188970", VA = "0x2188970")]
		public static extern void superres_Ptr_FrameSource_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x21889F0", Offset = "0x21889F0", VA = "0x21889F0")]
		public static extern void superres_SuperResolution_setInput(IntPtr obj, IntPtr frameSource);

		[PreserveSig]
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x2188A80", Offset = "0x2188A80", VA = "0x2188A80")]
		public static extern void superres_SuperResolution_nextFrame(IntPtr obj, IntPtr frame);

		[PreserveSig]
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x2188B10", Offset = "0x2188B10", VA = "0x2188B10")]
		public static extern void superres_SuperResolution_reset(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x2188B90", Offset = "0x2188B90", VA = "0x2188B90")]
		public static extern void superres_SuperResolution_collectGarbage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x2188C10", Offset = "0x2188C10", VA = "0x2188C10")]
		public static extern IntPtr superres_createSuperResolution_BTVL1();

		[PreserveSig]
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x2188C84", Offset = "0x2188C84", VA = "0x2188C84")]
		public static extern IntPtr superres_createSuperResolution_BTVL1_CUDA();

		[PreserveSig]
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x2188CF8", Offset = "0x2188CF8", VA = "0x2188CF8")]
		public static extern IntPtr superres_Ptr_SuperResolution_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x2188D78", Offset = "0x2188D78", VA = "0x2188D78")]
		public static extern void superres_Ptr_SuperResolution_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x2188DF8", Offset = "0x2188DF8", VA = "0x2188DF8")]
		public static extern void superres_DenseOpticalFlowExt_calc(IntPtr obj, IntPtr frame0, IntPtr frame1, IntPtr flow1, IntPtr flow2);

		[PreserveSig]
		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x2188EA8", Offset = "0x2188EA8", VA = "0x2188EA8")]
		public static extern void superres_DenseOpticalFlowExt_collectGarbage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x2188F28", Offset = "0x2188F28", VA = "0x2188F28")]
		public static extern IntPtr superres_Ptr_DenseOpticalFlowExt_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x2188FA8", Offset = "0x2188FA8", VA = "0x2188FA8")]
		public static extern void superres_Ptr_DenseOpticalFlowExt_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x2189028", Offset = "0x2189028", VA = "0x2189028")]
		public static extern IntPtr superres_createOptFlow_Farneback();

		[PreserveSig]
		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x218909C", Offset = "0x218909C", VA = "0x218909C")]
		public static extern IntPtr superres_createOptFlow_Farneback_CUDA();

		[PreserveSig]
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x2189110", Offset = "0x2189110", VA = "0x2189110")]
		public static extern IntPtr superres_createOptFlow_DualTVL1();

		[PreserveSig]
		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x2189184", Offset = "0x2189184", VA = "0x2189184")]
		public static extern IntPtr superres_createOptFlow_DualTVL1_CUDA();

		[PreserveSig]
		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x21891F8", Offset = "0x21891F8", VA = "0x21891F8")]
		public static extern IntPtr superres_createOptFlow_Brox_CUDA();

		[PreserveSig]
		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x218926C", Offset = "0x218926C", VA = "0x218926C")]
		public static extern IntPtr superres_createOptFlow_PyrLK_CUDA();

		[PreserveSig]
		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x21892E0", Offset = "0x21892E0", VA = "0x21892E0")]
		public static extern void text_computeNMChannels(IntPtr img, out IntPtr channels, int mode);

		[PreserveSig]
		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x2189378", Offset = "0x2189378", VA = "0x2189378")]
		public static extern void text_MSERsToERStats(IntPtr image, IntPtr contours, IntPtr region);

		[PreserveSig]
		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x2189410", Offset = "0x2189410", VA = "0x2189410")]
		public static extern void text_createOCRHMMTransitionsTable(string vocabulary, IntPtr lexicon, IntPtr transition_probabilities_table);

		[PreserveSig]
		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x21894B8", Offset = "0x21894B8", VA = "0x21894B8")]
		public static extern void text_detectRegions(IntPtr image, IntPtr er_filter1, IntPtr er_filter2, IntPtr regions);

		[PreserveSig]
		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x2189560", Offset = "0x2189560", VA = "0x2189560")]
		public static extern void text_erGrouping1(IntPtr img, IntPtr channels, IntPtr regions, IntPtr groups, IntPtr groups_rects, int method, string filename, float minProbablity);

		[PreserveSig]
		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x218964C", Offset = "0x218964C", VA = "0x218964C")]
		public static extern void text_erGrouping2(IntPtr image, IntPtr channel, IntPtr regions, IntPtr groups_rects, int method, string filename, float minProbablity);

		[PreserveSig]
		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x2189730", Offset = "0x2189730", VA = "0x2189730")]
		public static extern IntPtr text_ERStat_new1();

		[PreserveSig]
		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x21897A4", Offset = "0x21897A4", VA = "0x21897A4")]
		public static extern IntPtr text_ERStat_new2(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x2189824", Offset = "0x2189824", VA = "0x2189824")]
		public static extern void text_ERStat_getRect(IntPtr obj, ref Rect output);

		[PreserveSig]
		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x21898B4", Offset = "0x21898B4", VA = "0x21898B4")]
		public static extern double text_ERStat_getProbability(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x2189934", Offset = "0x2189934", VA = "0x2189934")]
		public static extern void text_ERStat_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x21899B4", Offset = "0x21899B4", VA = "0x21899B4")]
		public static extern IntPtr text_loadOCRHMMClassifierCNN(string filename);

		[PreserveSig]
		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x2189A4C", Offset = "0x2189A4C", VA = "0x2189A4C")]
		public static extern IntPtr text_loadOCRHMMClassifierNM(string filename);

		[PreserveSig]
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x2189AE4", Offset = "0x2189AE4", VA = "0x2189AE4")]
		public static extern void text_OCRHMMDecoder_ClassifierCallback_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x2189B64", Offset = "0x2189B64", VA = "0x2189B64")]
		public static extern void text_OCRHMMDecoder_ClassifierCallback_eval(IntPtr obj, IntPtr image, IntPtr vecIntClass, IntPtr vecDoubleConfidence);

		[PreserveSig]
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x2189C0C", Offset = "0x2189C0C", VA = "0x2189C0C")]
		public static extern IntPtr text_OCRHMMDecoder_create(IntPtr classifier, string vocabulary, IntPtr transition_probabilities, IntPtr emission_probabilities, int mode);

		[PreserveSig]
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x2189CD8", Offset = "0x2189CD8", VA = "0x2189CD8")]
		public static extern void text_OCRHMMDecoder_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x2189D58", Offset = "0x2189D58", VA = "0x2189D58")]
		public static extern void text_OCRHMMDecoder_run(IntPtr decoder, IntPtr image, IntPtr rects, IntPtr texts, IntPtr confidences, int component_level);

		[PreserveSig]
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x2189E18", Offset = "0x2189E18", VA = "0x2189E18")]
		public static extern IntPtr text_loadOCRBeamSearchClassifierCNN(string fileName);

		[PreserveSig]
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x2189EB0", Offset = "0x2189EB0", VA = "0x2189EB0")]
		public static extern void text_OCRBeamSearchDecoder_ClassifierCallback_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x2189F30", Offset = "0x2189F30", VA = "0x2189F30")]
		public static extern void text_OCRBeamSearchDecoder_ClassifierCallback_eval(IntPtr obj, IntPtr input, IntPtr recognition_probabilities, IntPtr oversegmentation);

		[PreserveSig]
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x2189FD8", Offset = "0x2189FD8", VA = "0x2189FD8")]
		public static extern IntPtr text_OCRBeamSearchDecoder_create(IntPtr classifier, string vocabulary, IntPtr transition_probabilities_table, IntPtr emission_probabilities_table, int mode, int beam_size);

		[PreserveSig]
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x218A0B4", Offset = "0x218A0B4", VA = "0x218A0B4")]
		public static extern void text_OCRBeamSearchDecoder_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x218A134", Offset = "0x218A134", VA = "0x218A134")]
		public static extern void text_OCRBeamSearchDecoder_run(IntPtr decoder, IntPtr image, IntPtr rects, IntPtr texts, IntPtr confidences, int component_level);

		[PreserveSig]
		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x218A1F4", Offset = "0x218A1F4", VA = "0x218A1F4")]
		public static extern void text_OCRBeamSearchDecoder_run2(IntPtr decoder, IntPtr image, IntPtr mask, IntPtr rects, IntPtr texts, IntPtr confidences, int component_level);

		[PreserveSig]
		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x218A2BC", Offset = "0x218A2BC", VA = "0x218A2BC")]
		public static extern double text_ERFilter_Callback_eval(IntPtr obj, IntPtr stat);

		[PreserveSig]
		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x218A34C", Offset = "0x218A34C", VA = "0x218A34C")]
		public static extern void text_ERFilter_Callback_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x218A3CC", Offset = "0x218A3CC", VA = "0x218A3CC")]
		public static extern IntPtr text_loadClassifierNM1(string filename);

		[PreserveSig]
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x218A464", Offset = "0x218A464", VA = "0x218A464")]
		public static extern IntPtr text_loadClassifierNM2(string filename);

		[PreserveSig]
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x218A4FC", Offset = "0x218A4FC", VA = "0x218A4FC")]
		public static extern IntPtr text_createERFilterNM1(IntPtr cb, int thresholdDelta, float minArea, float maxArea, float minProbability, bool nonMaxSuppression, float minProbabilityDiff);

		[PreserveSig]
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x218A5C4", Offset = "0x218A5C4", VA = "0x218A5C4")]
		public static extern IntPtr text_createERFilterNM2(IntPtr cb, float minProbability);

		[PreserveSig]
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x218A654", Offset = "0x218A654", VA = "0x218A654")]
		public static extern void text_ERFilter_run(IntPtr obj, IntPtr image, IntPtr regions);

		[PreserveSig]
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x218A6E8", Offset = "0x218A6E8", VA = "0x218A6E8")]
		public static extern void text_ERFilter_setCallback(IntPtr obj, IntPtr cb);

		[PreserveSig]
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x218A778", Offset = "0x218A778", VA = "0x218A778")]
		public static extern void text_ERFilter_setThresholdDelta(IntPtr obj, int thresholdDelta);

		[PreserveSig]
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x218A808", Offset = "0x218A808", VA = "0x218A808")]
		public static extern void text_ERFilter_setMinArea(IntPtr obj, float minArea);

		[PreserveSig]
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x218A898", Offset = "0x218A898", VA = "0x218A898")]
		public static extern void text_ERFilter_setMaxArea(IntPtr obj, float maxArea);

		[PreserveSig]
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x218A928", Offset = "0x218A928", VA = "0x218A928")]
		public static extern void text_ERFilter_setMinProbability(IntPtr obj, float minProbability);

		[PreserveSig]
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x218A9B8", Offset = "0x218A9B8", VA = "0x218A9B8")]
		public static extern void text_ERFilter_setMinProbabilityDiff(IntPtr obj, float minProbabilityDiff);

		[PreserveSig]
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x218AA48", Offset = "0x218AA48", VA = "0x218AA48")]
		public static extern void text_ERFilter_setNonMaxSuppression(IntPtr obj, bool nonMaxSuppression);

		[PreserveSig]
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x218AAD8", Offset = "0x218AAD8", VA = "0x218AAD8")]
		public static extern int text_ERFilter_getNumRejected(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x218AB58", Offset = "0x218AB58", VA = "0x218AB58")]
		public static extern IntPtr tracking_Tracker_create(string trackerType);

		[PreserveSig]
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x218ABF4", Offset = "0x218ABF4", VA = "0x218ABF4")]
		public static extern bool tracking_Tracker_init(IntPtr obj, IntPtr image, Rect2d boundingBox);

		[PreserveSig]
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x218ACC0", Offset = "0x218ACC0", VA = "0x218ACC0")]
		public static extern bool tracking_Tracker_update(IntPtr obj, IntPtr image, ref Rect2d boundingBox);

		[PreserveSig]
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x218AD64", Offset = "0x218AD64", VA = "0x218AD64")]
		public static extern void tracking_Ptr_Tracker_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x218ADE8", Offset = "0x218ADE8", VA = "0x218ADE8")]
		public static extern IntPtr tracking_Ptr_Tracker_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x218AE6C", Offset = "0x218AE6C", VA = "0x218AE6C")]
		public static extern IntPtr xfeatures2d_BriefDescriptorExtractor_create(int bytes);

		[PreserveSig]
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x218AEEC", Offset = "0x218AEEC", VA = "0x218AEEC")]
		public static extern void xfeatures2d_Ptr_BriefDescriptorExtractor_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x218AF6C", Offset = "0x218AF6C", VA = "0x218AF6C")]
		public static extern void xfeatures2d_BriefDescriptorExtractor_read(IntPtr obj, IntPtr fn);

		[PreserveSig]
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x218AFFC", Offset = "0x218AFFC", VA = "0x218AFFC")]
		public static extern void xfeatures2d_BriefDescriptorExtractor_write(IntPtr obj, IntPtr fs);

		[PreserveSig]
		[Token(Token = "0x6000200")]
		[Address(RVA = "0x218B08C", Offset = "0x218B08C", VA = "0x218B08C")]
		public static extern int xfeatures2d_BriefDescriptorExtractor_descriptorSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000201")]
		[Address(RVA = "0x218B10C", Offset = "0x218B10C", VA = "0x218B10C")]
		public static extern int xfeatures2d_BriefDescriptorExtractor_descriptorType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000202")]
		[Address(RVA = "0x218B18C", Offset = "0x218B18C", VA = "0x218B18C")]
		public static extern IntPtr xfeatures2d_Ptr_BriefDescriptorExtractor_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000203")]
		[Address(RVA = "0x218B20C", Offset = "0x218B20C", VA = "0x218B20C")]
		public static extern IntPtr xfeatures2d_FREAK_create(int orientationNormalized, int scaleNormalized, float patternScale, int nOctaves, int[] selectedPairs, int selectedPairsLength);

		[PreserveSig]
		[Token(Token = "0x6000204")]
		[Address(RVA = "0x218B2D4", Offset = "0x218B2D4", VA = "0x218B2D4")]
		public static extern void xfeatures2d_Ptr_FREAK_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000205")]
		[Address(RVA = "0x218B354", Offset = "0x218B354", VA = "0x218B354")]
		public static extern IntPtr xfeatures2d_Ptr_FREAK_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000206")]
		[Address(RVA = "0x218B3D4", Offset = "0x218B3D4", VA = "0x218B3D4")]
		public static extern IntPtr xfeatures2d_StarDetector_create(int maxSize, int responseThreshold, int lineThresholdProjected, int lineThresholdBinarized, int suppressNonmaxSize);

		[PreserveSig]
		[Token(Token = "0x6000207")]
		[Address(RVA = "0x218B484", Offset = "0x218B484", VA = "0x218B484")]
		public static extern void xfeatures2d_Ptr_StarDetector_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000208")]
		[Address(RVA = "0x218B504", Offset = "0x218B504", VA = "0x218B504")]
		public static extern IntPtr xfeatures2d_Ptr_StarDetector_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000209")]
		[Address(RVA = "0x218B584", Offset = "0x218B584", VA = "0x218B584")]
		public static extern IntPtr xfeatures2d_SURF_create(double hessianThreshold, int nOctaves, int nOctaveLayers, int extended, int upright);

		[PreserveSig]
		[Token(Token = "0x600020A")]
		[Address(RVA = "0x218B63C", Offset = "0x218B63C", VA = "0x218B63C")]
		public static extern void xfeatures2d_Ptr_SURF_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600020B")]
		[Address(RVA = "0x218B6BC", Offset = "0x218B6BC", VA = "0x218B6BC")]
		public static extern IntPtr xfeatures2d_Ptr_SURF_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600020C")]
		[Address(RVA = "0x218B73C", Offset = "0x218B73C", VA = "0x218B73C")]
		public static extern double xfeatures2d_SURF_getHessianThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600020D")]
		[Address(RVA = "0x218B7BC", Offset = "0x218B7BC", VA = "0x218B7BC")]
		public static extern int xfeatures2d_SURF_getNOctaves(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600020E")]
		[Address(RVA = "0x218B83C", Offset = "0x218B83C", VA = "0x218B83C")]
		public static extern int xfeatures2d_SURF_getNOctaveLayers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600020F")]
		[Address(RVA = "0x218B8BC", Offset = "0x218B8BC", VA = "0x218B8BC")]
		public static extern int xfeatures2d_SURF_getExtended(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000210")]
		[Address(RVA = "0x218B93C", Offset = "0x218B93C", VA = "0x218B93C")]
		public static extern int xfeatures2d_SURF_getUpright(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000211")]
		[Address(RVA = "0x218B9BC", Offset = "0x218B9BC", VA = "0x218B9BC")]
		public static extern void xfeatures2d_SURF_setHessianThreshold(IntPtr obj, double value);

		[PreserveSig]
		[Token(Token = "0x6000212")]
		[Address(RVA = "0x218BA4C", Offset = "0x218BA4C", VA = "0x218BA4C")]
		public static extern void xfeatures2d_SURF_setNOctaves(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000213")]
		[Address(RVA = "0x218BADC", Offset = "0x218BADC", VA = "0x218BADC")]
		public static extern void xfeatures2d_SURF_setNOctaveLayers(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000214")]
		[Address(RVA = "0x218BB6C", Offset = "0x218BB6C", VA = "0x218BB6C")]
		public static extern void xfeatures2d_SURF_setExtended(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000215")]
		[Address(RVA = "0x218BBFC", Offset = "0x218BBFC", VA = "0x218BBFC")]
		public static extern void xfeatures2d_SURF_setUpright(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000216")]
		[Address(RVA = "0x218BC8C", Offset = "0x218BC8C", VA = "0x218BC8C")]
		public static extern IntPtr xfeatures2d_SIFT_create(int nfeatures, int nOctaveLayers, double contrastThreshold, double edgeThreshold, double sigma);

		[PreserveSig]
		[Token(Token = "0x6000217")]
		[Address(RVA = "0x218BD44", Offset = "0x218BD44", VA = "0x218BD44")]
		public static extern void xfeatures2d_Ptr_SIFT_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000218")]
		[Address(RVA = "0x218BDC4", Offset = "0x218BDC4", VA = "0x218BDC4")]
		public static extern IntPtr xfeatures2d_Ptr_SIFT_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000219")]
		[Address(RVA = "0x218BE44", Offset = "0x218BE44", VA = "0x218BE44")]
		public static extern void xphoto_balanceWhite(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x600021A")]
		[Address(RVA = "0x218BED4", Offset = "0x218BED4", VA = "0x218BED4")]
		public static extern void calib3d_Rodrigues(IntPtr src, IntPtr dst, IntPtr jacobian);

		[PreserveSig]
		[Token(Token = "0x600021B")]
		[Address(RVA = "0x218BF68", Offset = "0x218BF68", VA = "0x218BF68")]
		public static extern void calib3d_Rodrigues_VecToMat(IntPtr vector, IntPtr matrix, IntPtr jacobian);

		[PreserveSig]
		[Token(Token = "0x600021C")]
		[Address(RVA = "0x218C000", Offset = "0x218C000", VA = "0x218C000")]
		public static extern void calib3d_Rodrigues_MatToVec(IntPtr vector, IntPtr matrix, IntPtr jacobian);

		[PreserveSig]
		[Token(Token = "0x600021D")]
		[Address(RVA = "0x218C098", Offset = "0x218C098", VA = "0x218C098")]
		public static extern IntPtr calib3d_findHomography_InputArray(IntPtr srcPoints, IntPtr dstPoints, int method, double ransacReprojThreshold, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x600021E")]
		[Address(RVA = "0x218C150", Offset = "0x218C150", VA = "0x218C150")]
		public static extern IntPtr calib3d_findHomography_vector(Point2d[] srcPoints, int srcPointsLength, Point2d[] dstPoints, int dstPointsLength, int method, double ransacReprojThreshold, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x600021F")]
		[Address(RVA = "0x218C230", Offset = "0x218C230", VA = "0x218C230")]
		public static extern void calib3d_RQDecomp3x3_InputArray(IntPtr src, IntPtr mtxR, IntPtr mtxQ, IntPtr qx, IntPtr qy, IntPtr qz, out Vec3d outVal);

		[PreserveSig]
		[Token(Token = "0x6000220")]
		[Address(RVA = "0x218C2F8", Offset = "0x218C2F8", VA = "0x218C2F8")]
		public static extern void calib3d_RQDecomp3x3_Mat(IntPtr src, IntPtr mtxR, IntPtr mtxQ, IntPtr qx, IntPtr qy, IntPtr qz, out Vec3d outVal);

		[PreserveSig]
		[Token(Token = "0x6000221")]
		[Address(RVA = "0x218C3C0", Offset = "0x218C3C0", VA = "0x218C3C0")]
		public static extern void calib3d_decomposeProjectionMatrix_InputArray(IntPtr projMatrix, IntPtr cameraMatrix, IntPtr rotMatrix, IntPtr transVect, IntPtr rotMatrixX, IntPtr rotMatrixY, IntPtr rotMatrixZ, IntPtr eulerAngles);

		[PreserveSig]
		[Token(Token = "0x6000222")]
		[Address(RVA = "0x218C498", Offset = "0x218C498", VA = "0x218C498")]
		public static extern void calib3d_decomposeProjectionMatrix_Mat(IntPtr projMatrix, IntPtr cameraMatrix, IntPtr rotMatrix, IntPtr transVect, IntPtr rotMatrixX, IntPtr rotMatrixY, IntPtr rotMatrixZ, IntPtr eulerAngles);

		[PreserveSig]
		[Token(Token = "0x6000223")]
		[Address(RVA = "0x218C570", Offset = "0x218C570", VA = "0x218C570")]
		public static extern void calib3d_matMulDeriv(IntPtr a, IntPtr b, IntPtr dABdA, IntPtr dABdB);

		[PreserveSig]
		[Token(Token = "0x6000224")]
		[Address(RVA = "0x218C618", Offset = "0x218C618", VA = "0x218C618")]
		public static extern void calib3d_composeRT_InputArray(IntPtr rvec1, IntPtr tvec1, IntPtr rvec2, IntPtr tvec2, IntPtr rvec3, IntPtr tvec3, IntPtr dr3dr1, IntPtr dr3dt1, IntPtr dr3dr2, IntPtr dr3dt2, IntPtr dt3dr1, IntPtr dt3dt1, IntPtr dt3dr2, IntPtr dt3dt2);

		[PreserveSig]
		[Token(Token = "0x6000225")]
		[Address(RVA = "0x218C71C", Offset = "0x218C71C", VA = "0x218C71C")]
		public static extern void calib3d_composeRT_Mat(IntPtr rvec1, IntPtr tvec1, IntPtr rvec2, IntPtr tvec2, IntPtr rvec3, IntPtr tvec3, IntPtr dr3dr1, IntPtr dr3dt1, IntPtr dr3dr2, IntPtr dr3dt2, IntPtr dt3dr1, IntPtr dt3dt1, IntPtr dt3dr2, IntPtr dt3dt2);

		[PreserveSig]
		[Token(Token = "0x6000226")]
		[Address(RVA = "0x218C820", Offset = "0x218C820", VA = "0x218C820")]
		public static extern void calib3d_projectPoints_InputArray(IntPtr objectPoints, IntPtr rvec, IntPtr tvec, IntPtr cameraMatrix, IntPtr distCoeffs, IntPtr imagePoints, IntPtr jacobian, double aspectRatio);

		[PreserveSig]
		[Token(Token = "0x6000227")]
		[Address(RVA = "0x218C8F8", Offset = "0x218C8F8", VA = "0x218C8F8")]
		public static extern void calib3d_projectPoints_Mat(IntPtr objectPoints, IntPtr rvec, IntPtr tvec, IntPtr cameraMatrix, IntPtr distCoeffs, IntPtr imagePoints, IntPtr jacobian, double aspectRatio);

		[PreserveSig]
		[Token(Token = "0x6000228")]
		[Address(RVA = "0x218C9D0", Offset = "0x218C9D0", VA = "0x218C9D0")]
		public static extern void calib3d_solvePnP_InputArray(IntPtr selfectPoints, IntPtr imagePoints, IntPtr cameraMatrix, IntPtr distCoeffs, IntPtr rvec, IntPtr tvec, int useExtrinsicGuess, int flags);

		[PreserveSig]
		[Token(Token = "0x6000229")]
		[Address(RVA = "0x218CAA8", Offset = "0x218CAA8", VA = "0x218CAA8")]
		public static extern void calib3d_solvePnP_vector(Point3f[] objectPoints, int objectPointsLength, Point2f[] imagePoints, int imagePointsLength, IntPtr cameraMatrix, double[] distCoeffs, int distCoeffsLength, [Out] double[] rvec, [Out] double[] tvec, int useExtrinsicGuess, int flags);

		[PreserveSig]
		[Token(Token = "0x600022A")]
		[Address(RVA = "0x218CC8C", Offset = "0x218CC8C", VA = "0x218CC8C")]
		public static extern void calib3d_solvePnPRansac_InputArray(IntPtr objectPoints, IntPtr imagePoints, IntPtr cameraMatrix, IntPtr distCoeffs, IntPtr rvec, IntPtr tvec, int useExtrinsicGuess, int iterationsCount, float reprojectionError, double confidence, IntPtr inliers, int flags);

		[PreserveSig]
		[Token(Token = "0x600022B")]
		[Address(RVA = "0x218CD90", Offset = "0x218CD90", VA = "0x218CD90")]
		public static extern void calib3d_solvePnPRansac_vector(Point3f[] objectPoints, int objectPointsLength, Point2f[] imagePoints, int imagePointsLength, IntPtr cameraMatrix, double[] distCoeffs, int distCoeffsLength, [Out] double[] rvec, [Out] double[] tvec, int useExtrinsicGuess, int iterationsCount, float reprojectionError, double confidence, IntPtr inliers, int flags);

		[PreserveSig]
		[Token(Token = "0x600022C")]
		[Address(RVA = "0x218CF90", Offset = "0x218CF90", VA = "0x218CF90")]
		public static extern IntPtr calib3d_initCameraMatrix2D_Mat(IntPtr[] objectPoints, int objectPointsLength, IntPtr[] imagePoints, int imagePointsLength, Size imageSize, double aspectRatio);

		[PreserveSig]
		[Token(Token = "0x600022D")]
		[Address(RVA = "0x218D060", Offset = "0x218D060", VA = "0x218D060")]
		public static extern IntPtr calib3d_initCameraMatrix2D_array(IntPtr[] objectPoints, int opSize1, int[] opSize2, IntPtr[] imagePoints, int ipSize1, int[] ipSize2, Size imageSize, double aspectRatio);

		[PreserveSig]
		[Token(Token = "0x600022E")]
		[Address(RVA = "0x218D158", Offset = "0x218D158", VA = "0x218D158")]
		public static extern int calib3d_findChessboardCorners_InputArray(IntPtr image, Size patternSize, IntPtr corners, int flags);

		[PreserveSig]
		[Token(Token = "0x600022F")]
		[Address(RVA = "0x218D200", Offset = "0x218D200", VA = "0x218D200")]
		public static extern int calib3d_findChessboardCorners_vector(IntPtr image, Size patternSize, IntPtr corners, int flags);

		[PreserveSig]
		[Token(Token = "0x6000230")]
		[Address(RVA = "0x218D2A8", Offset = "0x218D2A8", VA = "0x218D2A8")]
		public static extern int calib3d_find4QuadCornerSubpix_InputArray(IntPtr img, IntPtr corners, Size regionSize);

		[PreserveSig]
		[Token(Token = "0x6000231")]
		[Address(RVA = "0x218D340", Offset = "0x218D340", VA = "0x218D340")]
		public static extern int calib3d_find4QuadCornerSubpix_vector(IntPtr img, IntPtr corners, Size regionSize);

		[PreserveSig]
		[Token(Token = "0x6000232")]
		[Address(RVA = "0x218D3D8", Offset = "0x218D3D8", VA = "0x218D3D8")]
		public static extern void calib3d_drawChessboardCorners_InputArray(IntPtr image, Size patternSize, IntPtr corners, int patternWasFound);

		[PreserveSig]
		[Token(Token = "0x6000233")]
		[Address(RVA = "0x218D480", Offset = "0x218D480", VA = "0x218D480")]
		public static extern void calib3d_drawChessboardCorners_array(IntPtr image, Size patternSize, Point2f[] corners, int cornersLength, int patternWasFound);

		[PreserveSig]
		[Token(Token = "0x6000234")]
		[Address(RVA = "0x218D538", Offset = "0x218D538", VA = "0x218D538")]
		public static extern int calib3d_findCirclesGrid_InputArray(IntPtr image, Size patternSize, IntPtr centers, int flags, IntPtr blobDetector);

		[PreserveSig]
		[Token(Token = "0x6000235")]
		[Address(RVA = "0x218D5E8", Offset = "0x218D5E8", VA = "0x218D5E8")]
		public static extern int calib3d_findCirclesGrid_vector(IntPtr image, Size patternSize, IntPtr centers, int flags, IntPtr blobDetector);

		[PreserveSig]
		[Token(Token = "0x6000236")]
		[Address(RVA = "0x218D698", Offset = "0x218D698", VA = "0x218D698")]
		public static extern double calib3d_calibrateCamera_InputArray(IntPtr[] objectPoints, int objectPointsSize, IntPtr[] imagePoints, int imagePointsSize, Size imageSize, IntPtr cameraMatrix, IntPtr distCoeffs, IntPtr rvecs, IntPtr tvecs, int flags, TermCriteria criteria);

		[PreserveSig]
		[Token(Token = "0x6000237")]
		[Address(RVA = "0x218D7AC", Offset = "0x218D7AC", VA = "0x218D7AC")]
		public static extern double calib3d_calibrateCamera_vector(IntPtr[] objectPoints, int opSize1, int[] opSize2, IntPtr[] imagePoints, int ipSize1, int[] ipSize2, Size imageSize, [In][Out] double[,] cameraMatrix, [In][Out] double[] distCoeffs, int distCoeffsSize, IntPtr rvecs, IntPtr tvecs, int flags, TermCriteria criteria);

		[PreserveSig]
		[Token(Token = "0x6000238")]
		[Address(RVA = "0x218D7C8", Offset = "0x218D7C8", VA = "0x218D7C8")]
		public static extern void calib3d_calibrationMatrixValues_InputArray(IntPtr cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx, out double fovy, out double focalLength, out Point2d principalPoint, out double aspectRatio);

		[PreserveSig]
		[Token(Token = "0x6000239")]
		[Address(RVA = "0x218D8A8", Offset = "0x218D8A8", VA = "0x218D8A8")]
		public static extern void calib3d_calibrationMatrixValues_array(double[,] cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx, out double fovy, out double focalLength, out Point2d principalPoint, out double aspectRatio);

		[PreserveSig]
		[Token(Token = "0x600023A")]
		[Address(RVA = "0x218D8C4", Offset = "0x218D8C4", VA = "0x218D8C4")]
		public static extern double calib3d_stereoCalibrate_InputArray(IntPtr[] objectPoints, int opSize, IntPtr[] imagePoints1, int ip1Size, IntPtr[] imagePoints2, int ip2Size, IntPtr cameraMatrix1, IntPtr distCoeffs1, IntPtr cameraMatrix2, IntPtr distCoeffs2, Size imageSize, IntPtr R, IntPtr T, IntPtr E, IntPtr F, int flags, TermCriteria criteria);

		[PreserveSig]
		[Token(Token = "0x600023B")]
		[Address(RVA = "0x218DA08", Offset = "0x218DA08", VA = "0x218DA08")]
		public static extern double calib3d_stereoCalibrate_array(IntPtr[] objectPoints, int opSize1, int[] opSizes2, IntPtr[] imagePoints1, int ip1Size1, int[] ip1Sizes2, IntPtr[] imagePoints2, int ip2Size1, int[] ip2Sizes2, [In][Out] double[,] cameraMatrix1, [In][Out] double[] distCoeffs1, int dc1Size, [In][Out] double[,] cameraMatrix2, [In][Out] double[] distCoeffs2, int dc2Size, Size imageSize, IntPtr R, IntPtr T, IntPtr E, IntPtr F, int flags, TermCriteria criteria);

		[PreserveSig]
		[Token(Token = "0x600023C")]
		[Address(RVA = "0x218DA24", Offset = "0x218DA24", VA = "0x218DA24")]
		public static extern void calib3d_stereoRectify_InputArray(IntPtr cameraMatrix1, IntPtr distCoeffs1, IntPtr cameraMatrix2, IntPtr distCoeffs2, Size imageSize, IntPtr R, IntPtr T, IntPtr R1, IntPtr R2, IntPtr P1, IntPtr P2, IntPtr Q, int flags, double alpha, Size newImageSize, out Rect validPixROI1, out Rect validPixROI2);

		[PreserveSig]
		[Token(Token = "0x600023D")]
		[Address(RVA = "0x218DB50", Offset = "0x218DB50", VA = "0x218DB50")]
		public static extern void calib3d_stereoRectify_array(double[,] cameraMatrix1, double[] distCoeffs1, int dc1Size, double[,] cameraMatrix2, double[] distCoeffs2, int dc2Size, Size imageSize, double[,] R, double[] T, double[,] R1, double[,] R2, double[,] P1, double[,] P2, double[,] Q, int flags, double alpha, Size newImageSize, out Rect validPixROI1, out Rect validPixROI2);

		[PreserveSig]
		[Token(Token = "0x600023E")]
		[Address(RVA = "0x218DB6C", Offset = "0x218DB6C", VA = "0x218DB6C")]
		public static extern int calib3d_stereoRectifyUncalibrated_InputArray(IntPtr points1, IntPtr points2, IntPtr F, Size imgSize, IntPtr H1, IntPtr H2, double threshold);

		[PreserveSig]
		[Token(Token = "0x600023F")]
		[Address(RVA = "0x218DC3C", Offset = "0x218DC3C", VA = "0x218DC3C")]
		public static extern int calib3d_stereoRectifyUncalibrated_array(Point2d[] points1, int points1Size, Point2d[] points2, int points2Size, [In] double[,] F, Size imgSize, [In][Out] double[,] H1, [In][Out] double[,] H2, double threshold);

		[PreserveSig]
		[Token(Token = "0x6000240")]
		[Address(RVA = "0x218DC58", Offset = "0x218DC58", VA = "0x218DC58")]
		public static extern float calib3d_rectify3Collinear_InputArray(IntPtr cameraMatrix1, IntPtr distCoeffs1, IntPtr cameraMatrix2, IntPtr distCoeffs2, IntPtr cameraMatrix3, IntPtr distCoeffs3, IntPtr[] imgpt1, int imgpt1Size, IntPtr[] imgpt3, int imgpt3Size, Size imageSize, IntPtr R12, IntPtr T12, IntPtr R13, IntPtr T13, IntPtr R1, IntPtr R2, IntPtr R3, IntPtr P1, IntPtr P2, IntPtr P3, IntPtr Q, double alpha, Size newImgSize, out Rect roi1, out Rect roi2, int flags);

		[PreserveSig]
		[Token(Token = "0x6000241")]
		[Address(RVA = "0x218DE14", Offset = "0x218DE14", VA = "0x218DE14")]
		public static extern IntPtr calib3d_getOptimalNewCameraMatrix_InputArray(IntPtr cameraMatrix, IntPtr distCoeffs, Size imageSize, double alpha, Size newImgSize, out Rect validPixROI, int centerPrincipalPoint);

		[PreserveSig]
		[Token(Token = "0x6000242")]
		[Address(RVA = "0x218DEE4", Offset = "0x218DEE4", VA = "0x218DEE4")]
		public static extern void calib3d_getOptimalNewCameraMatrix_array([In] double[,] cameraMatrix, [In] double[] distCoeffs, int distCoeffsSize, Size imageSize, double alpha, Size newImgSize, out Rect validPixROI, int centerPrincipalPoint, [In][Out] double[,] outValues);

		[PreserveSig]
		[Token(Token = "0x6000243")]
		[Address(RVA = "0x218DF00", Offset = "0x218DF00", VA = "0x218DF00")]
		public static extern void calib3d_convertPointsToHomogeneous_InputArray(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x6000244")]
		[Address(RVA = "0x218DF90", Offset = "0x218DF90", VA = "0x218DF90")]
		public static extern void calib3d_convertPointsToHomogeneous_array1([In] Vec2f[] src, [In][Out] Vec3f[] dst, int length);

		[PreserveSig]
		[Token(Token = "0x6000245")]
		[Address(RVA = "0x218E038", Offset = "0x218E038", VA = "0x218E038")]
		public static extern void calib3d_convertPointsToHomogeneous_array2([In] Vec3f[] src, [In][Out] Vec4f[] dst, int length);

		[PreserveSig]
		[Token(Token = "0x6000246")]
		[Address(RVA = "0x218E0E0", Offset = "0x218E0E0", VA = "0x218E0E0")]
		public static extern void calib3d_convertPointsFromHomogeneous_InputArray(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x6000247")]
		[Address(RVA = "0x218E170", Offset = "0x218E170", VA = "0x218E170")]
		public static extern void calib3d_convertPointsFromHomogeneous_array1([In] Vec3f[] src, [In][Out] Vec2f[] dst, int length);

		[PreserveSig]
		[Token(Token = "0x6000248")]
		[Address(RVA = "0x218E218", Offset = "0x218E218", VA = "0x218E218")]
		public static extern void calib3d_convertPointsFromHomogeneous_array2([In] Vec4f[] src, [In][Out] Vec3f[] dst, int length);

		[PreserveSig]
		[Token(Token = "0x6000249")]
		[Address(RVA = "0x218E2C0", Offset = "0x218E2C0", VA = "0x218E2C0")]
		public static extern void calib3d_convertPointsHomogeneous(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x600024A")]
		[Address(RVA = "0x218E350", Offset = "0x218E350", VA = "0x218E350")]
		public static extern IntPtr calib3d_findFundamentalMat_InputArray(IntPtr points1, IntPtr points2, int method, double param1, double param2, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x600024B")]
		[Address(RVA = "0x218E410", Offset = "0x218E410", VA = "0x218E410")]
		public static extern IntPtr calib3d_findFundamentalMat_array(Point2d[] points1, int points1Size, Point2d[] points2, int points2Size, int method, double param1, double param2, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x600024C")]
		[Address(RVA = "0x218E4F8", Offset = "0x218E4F8", VA = "0x218E4F8")]
		public static extern void calib3d_computeCorrespondEpilines_InputArray(IntPtr points, int whichImage, IntPtr F, IntPtr lines);

		[PreserveSig]
		[Token(Token = "0x600024D")]
		[Address(RVA = "0x218E5A0", Offset = "0x218E5A0", VA = "0x218E5A0")]
		public static extern void calib3d_computeCorrespondEpilines_array2d([In] Point2d[] points, int pointsSize, int whichImage, double[,] F, [In][Out] Point3f[] lines);

		[PreserveSig]
		[Token(Token = "0x600024E")]
		[Address(RVA = "0x218E5BC", Offset = "0x218E5BC", VA = "0x218E5BC")]
		public static extern void calib3d_computeCorrespondEpilines_array3d([In] Point3d[] points, int pointsSize, int whichImage, double[,] F, [In][Out] Point3f[] lines);

		[PreserveSig]
		[Token(Token = "0x600024F")]
		[Address(RVA = "0x218E5D8", Offset = "0x218E5D8", VA = "0x218E5D8")]
		public static extern void calib3d_triangulatePoints_InputArray(IntPtr projMatr1, IntPtr projMatr2, IntPtr projPoints1, IntPtr projPoints2, IntPtr points4D);

		[PreserveSig]
		[Token(Token = "0x6000250")]
		[Address(RVA = "0x218E688", Offset = "0x218E688", VA = "0x218E688")]
		public static extern void calib3d_triangulatePoints_array([In] double[,] projMatr1, [In] double[,] projMatr2, [In] Point2d[] projPoints1, int projPoints1Size, [In] Point2d[] projPoints2, int projPoints2Size, [In][Out] Vec4d[] points4D);

		[PreserveSig]
		[Token(Token = "0x6000251")]
		[Address(RVA = "0x218E6A4", Offset = "0x218E6A4", VA = "0x218E6A4")]
		public static extern void calib3d_correctMatches_InputArray(IntPtr F, IntPtr points1, IntPtr points2, IntPtr newPoints1, IntPtr newPoints2);

		[PreserveSig]
		[Token(Token = "0x6000252")]
		[Address(RVA = "0x218E754", Offset = "0x218E754", VA = "0x218E754")]
		public static extern void calib3d_correctMatches_array(double[,] F, Point2d[] points1, int points1Size, Point2d[] points2, int points2Size, Point2d[] newPoints1, Point2d[] newPoints2);

		[PreserveSig]
		[Token(Token = "0x6000253")]
		[Address(RVA = "0x218E770", Offset = "0x218E770", VA = "0x218E770")]
		public static extern void calib3d_filterSpeckles(IntPtr img, double newVal, int maxSpeckleSize, double maxDiff, IntPtr buf);

		[PreserveSig]
		[Token(Token = "0x6000254")]
		[Address(RVA = "0x218E820", Offset = "0x218E820", VA = "0x218E820")]
		public static extern Rect calib3d_getValidDisparityROI(Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int SADWindowSize);

		[PreserveSig]
		[Token(Token = "0x6000255")]
		[Address(RVA = "0x218E8E8", Offset = "0x218E8E8", VA = "0x218E8E8")]
		public static extern void calib3d_validateDisparity(IntPtr disparity, IntPtr cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp);

		[PreserveSig]
		[Token(Token = "0x6000256")]
		[Address(RVA = "0x218E998", Offset = "0x218E998", VA = "0x218E998")]
		public static extern void calib3d_reprojectImageTo3D(IntPtr disparity, IntPtr _3dImage, IntPtr Q, int handleMissingValues, int ddepth);

		[PreserveSig]
		[Token(Token = "0x6000257")]
		[Address(RVA = "0x218EA48", Offset = "0x218EA48", VA = "0x218EA48")]
		public static extern int calib3d_estimateAffine3D(IntPtr src, IntPtr dst, IntPtr outVal, IntPtr inliers, double ransacThreshold, double confidence);

		[PreserveSig]
		[Token(Token = "0x6000258")]
		[Address(RVA = "0x218EB08", Offset = "0x218EB08", VA = "0x218EB08")]
		public static extern void calib3d_StereoMatcher_compute(IntPtr obj, IntPtr left, IntPtr right, IntPtr disparity);

		[PreserveSig]
		[Token(Token = "0x6000259")]
		[Address(RVA = "0x218EBB0", Offset = "0x218EBB0", VA = "0x218EBB0")]
		public static extern int calib3d_StereoMatcher_getMinDisparity(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600025A")]
		[Address(RVA = "0x218EC30", Offset = "0x218EC30", VA = "0x218EC30")]
		public static extern void calib3d_StereoMatcher_setMinDisparity(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600025B")]
		[Address(RVA = "0x218ECC0", Offset = "0x218ECC0", VA = "0x218ECC0")]
		public static extern int calib3d_StereoMatcher_getNumDisparities(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600025C")]
		[Address(RVA = "0x218ED40", Offset = "0x218ED40", VA = "0x218ED40")]
		public static extern void calib3d_StereoMatcher_setNumDisparities(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600025D")]
		[Address(RVA = "0x218EDD0", Offset = "0x218EDD0", VA = "0x218EDD0")]
		public static extern int calib3d_StereoMatcher_getBlockSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600025E")]
		[Address(RVA = "0x218EE50", Offset = "0x218EE50", VA = "0x218EE50")]
		public static extern void calib3d_StereoMatcher_setBlockSize(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600025F")]
		[Address(RVA = "0x218EEE0", Offset = "0x218EEE0", VA = "0x218EEE0")]
		public static extern int calib3d_StereoMatcher_getSpeckleWindowSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000260")]
		[Address(RVA = "0x218EF60", Offset = "0x218EF60", VA = "0x218EF60")]
		public static extern void calib3d_StereoMatcher_setSpeckleWindowSize(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000261")]
		[Address(RVA = "0x218EFF0", Offset = "0x218EFF0", VA = "0x218EFF0")]
		public static extern int calib3d_StereoMatcher_getSpeckleRange(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000262")]
		[Address(RVA = "0x218F070", Offset = "0x218F070", VA = "0x218F070")]
		public static extern void calib3d_StereoMatcher_setSpeckleRange(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000263")]
		[Address(RVA = "0x218F100", Offset = "0x218F100", VA = "0x218F100")]
		public static extern int calib3d_StereoMatcher_getDisp12MaxDiff(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000264")]
		[Address(RVA = "0x218F180", Offset = "0x218F180", VA = "0x218F180")]
		public static extern void calib3d_StereoMatcher_setDisp12MaxDiff(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000265")]
		[Address(RVA = "0x218F210", Offset = "0x218F210", VA = "0x218F210")]
		public static extern void calib3d_Ptr_StereoBM_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000266")]
		[Address(RVA = "0x218F290", Offset = "0x218F290", VA = "0x218F290")]
		public static extern IntPtr calib3d_StereoBM_create(int numDisparities, int blockSize);

		[PreserveSig]
		[Token(Token = "0x6000267")]
		[Address(RVA = "0x218F320", Offset = "0x218F320", VA = "0x218F320")]
		public static extern int calib3d_StereoBM_getPreFilterType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000268")]
		[Address(RVA = "0x218F3A0", Offset = "0x218F3A0", VA = "0x218F3A0")]
		public static extern void calib3d_StereoBM_setPreFilterType(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000269")]
		[Address(RVA = "0x218F430", Offset = "0x218F430", VA = "0x218F430")]
		public static extern int calib3d_StereoBM_getPreFilterSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600026A")]
		[Address(RVA = "0x218F4B0", Offset = "0x218F4B0", VA = "0x218F4B0")]
		public static extern void calib3d_StereoBM_setPreFilterSize(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600026B")]
		[Address(RVA = "0x218F540", Offset = "0x218F540", VA = "0x218F540")]
		public static extern int calib3d_StereoBM_getPreFilterCap(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600026C")]
		[Address(RVA = "0x218F5C0", Offset = "0x218F5C0", VA = "0x218F5C0")]
		public static extern void calib3d_StereoBM_setPreFilterCap(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600026D")]
		[Address(RVA = "0x218F650", Offset = "0x218F650", VA = "0x218F650")]
		public static extern int calib3d_StereoBM_getTextureThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600026E")]
		[Address(RVA = "0x218F6D0", Offset = "0x218F6D0", VA = "0x218F6D0")]
		public static extern void calib3d_StereoBM_setTextureThreshold(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600026F")]
		[Address(RVA = "0x218F760", Offset = "0x218F760", VA = "0x218F760")]
		public static extern int calib3d_StereoBM_getUniquenessRatio(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000270")]
		[Address(RVA = "0x218F7E0", Offset = "0x218F7E0", VA = "0x218F7E0")]
		public static extern void calib3d_StereoBM_setUniquenessRatio(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000271")]
		[Address(RVA = "0x218F870", Offset = "0x218F870", VA = "0x218F870")]
		public static extern int calib3d_StereoBM_getSmallerBlockSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000272")]
		[Address(RVA = "0x218F8F0", Offset = "0x218F8F0", VA = "0x218F8F0")]
		public static extern void calib3d_StereoBM_setSmallerBlockSize(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000273")]
		[Address(RVA = "0x218F980", Offset = "0x218F980", VA = "0x218F980")]
		public static extern Rect calib3d_StereoBM_getROI1(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000274")]
		[Address(RVA = "0x218FA00", Offset = "0x218FA00", VA = "0x218FA00")]
		public static extern void calib3d_StereoBM_setROI1(IntPtr obj, Rect value);

		[PreserveSig]
		[Token(Token = "0x6000275")]
		[Address(RVA = "0x218FA94", Offset = "0x218FA94", VA = "0x218FA94")]
		public static extern Rect calib3d_StereoBM_getROI2(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000276")]
		[Address(RVA = "0x218FB14", Offset = "0x218FB14", VA = "0x218FB14")]
		public static extern void calib3d_StereoBM_setROI2(IntPtr obj, Rect value);

		[PreserveSig]
		[Token(Token = "0x6000277")]
		[Address(RVA = "0x218FBA8", Offset = "0x218FBA8", VA = "0x218FBA8")]
		public static extern void calib3d_Ptr_StereoSGBM_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000278")]
		[Address(RVA = "0x218FC28", Offset = "0x218FC28", VA = "0x218FC28")]
		public static extern IntPtr calib3d_StereoSGBM_create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize, int speckleRange, int mode);

		[PreserveSig]
		[Token(Token = "0x6000279")]
		[Address(RVA = "0x218FD1C", Offset = "0x218FD1C", VA = "0x218FD1C")]
		public static extern int calib3d_StereoSGBM_getPreFilterCap(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600027A")]
		[Address(RVA = "0x218FD9C", Offset = "0x218FD9C", VA = "0x218FD9C")]
		public static extern void calib3d_StereoSGBM_setPreFilterCap(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600027B")]
		[Address(RVA = "0x218FE2C", Offset = "0x218FE2C", VA = "0x218FE2C")]
		public static extern int calib3d_StereoSGBM_getUniquenessRatio(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600027C")]
		[Address(RVA = "0x218FEAC", Offset = "0x218FEAC", VA = "0x218FEAC")]
		public static extern void calib3d_StereoSGBM_setUniquenessRatio(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600027D")]
		[Address(RVA = "0x218FF3C", Offset = "0x218FF3C", VA = "0x218FF3C")]
		public static extern int calib3d_StereoSGBM_getP1(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600027E")]
		[Address(RVA = "0x218FFBC", Offset = "0x218FFBC", VA = "0x218FFBC")]
		public static extern void calib3d_StereoSGBM_setP1(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x600027F")]
		[Address(RVA = "0x219004C", Offset = "0x219004C", VA = "0x219004C")]
		public static extern int calib3d_StereoSGBM_getP2(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000280")]
		[Address(RVA = "0x21900CC", Offset = "0x21900CC", VA = "0x21900CC")]
		public static extern void calib3d_StereoSGBM_setP2(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000281")]
		[Address(RVA = "0x219015C", Offset = "0x219015C", VA = "0x219015C")]
		public static extern int calib3d_StereoSGBM_getMode(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x21901DC", Offset = "0x21901DC", VA = "0x21901DC")]
		public static extern void calib3d_StereoSGBM_setMode(IntPtr obj, int value);

		[PreserveSig]
		[Token(Token = "0x6000283")]
		[Address(RVA = "0x219026C", Offset = "0x219026C", VA = "0x219026C")]
		public static extern void core_setNumThreads(int nthreads);

		[PreserveSig]
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x21902EC", Offset = "0x21902EC", VA = "0x21902EC")]
		public static extern int core_getNumThreads();

		[PreserveSig]
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x2190360", Offset = "0x2190360", VA = "0x2190360")]
		public static extern int core_getThreadNum();

		[PreserveSig]
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x21903D0", Offset = "0x21903D0", VA = "0x21903D0")]
		public static extern void core_getBuildInformation(StringBuilder buf, int maxLength);

		[PreserveSig]
		[Token(Token = "0x6000287")]
		[Address(RVA = "0x219047C", Offset = "0x219047C", VA = "0x219047C")]
		public static extern int core_getBuildInformation_length();

		[PreserveSig]
		[Token(Token = "0x6000288")]
		[Address(RVA = "0x21904F0", Offset = "0x21904F0", VA = "0x21904F0")]
		public static extern long core_getTickCount();

		[PreserveSig]
		[Token(Token = "0x6000289")]
		[Address(RVA = "0x2190560", Offset = "0x2190560", VA = "0x2190560")]
		public static extern double core_getTickFrequency();

		[PreserveSig]
		[Token(Token = "0x600028A")]
		[Address(RVA = "0x21905D0", Offset = "0x21905D0", VA = "0x21905D0")]
		public static extern long core_getCPUTickCount();

		[PreserveSig]
		[Token(Token = "0x600028B")]
		[Address(RVA = "0x2190644", Offset = "0x2190644", VA = "0x2190644")]
		public static extern int core_checkHardwareSupport(int feature);

		[PreserveSig]
		[Token(Token = "0x600028C")]
		[Address(RVA = "0x21906C4", Offset = "0x21906C4", VA = "0x21906C4")]
		public static extern int core_getNumberOfCPUs();

		[PreserveSig]
		[Token(Token = "0x600028D")]
		[Address(RVA = "0x2190738", Offset = "0x2190738", VA = "0x2190738")]
		public static extern IntPtr core_fastMalloc(IntPtr bufSize);

		[PreserveSig]
		[Token(Token = "0x600028E")]
		[Address(RVA = "0x21907B8", Offset = "0x21907B8", VA = "0x21907B8")]
		public static extern void core_fastFree(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600028F")]
		[Address(RVA = "0x2190838", Offset = "0x2190838", VA = "0x2190838")]
		public static extern void core_setUseOptimized(int onoff);

		[PreserveSig]
		[Token(Token = "0x6000290")]
		[Address(RVA = "0x21908B8", Offset = "0x21908B8", VA = "0x21908B8")]
		public static extern int core_useOptimized();

		[PreserveSig]
		[Token(Token = "0x6000291")]
		[Address(RVA = "0x2178EF8", Offset = "0x2178EF8", VA = "0x2178EF8")]
		public static extern IntPtr redirectError(CvErrorCallback errCallback, IntPtr userdata, ref IntPtr prevUserdata);

		[PreserveSig]
		[Token(Token = "0x6000292")]
		[Address(RVA = "0x2190928", Offset = "0x2190928", VA = "0x2190928")]
		public static extern IntPtr core_cvarrToMat(IntPtr arr, int copyData, int allowND, int coiMode);

		[PreserveSig]
		[Token(Token = "0x6000293")]
		[Address(RVA = "0x21909D0", Offset = "0x21909D0", VA = "0x21909D0")]
		public static extern void core_extractImageCOI(IntPtr arr, IntPtr coiimg, int coi);

		[PreserveSig]
		[Token(Token = "0x6000294")]
		[Address(RVA = "0x2190A64", Offset = "0x2190A64", VA = "0x2190A64")]
		public static extern void core_insertImageCOI(IntPtr coiimg, IntPtr arr, int coi);

		[PreserveSig]
		[Token(Token = "0x6000295")]
		[Address(RVA = "0x2190AFC", Offset = "0x2190AFC", VA = "0x2190AFC")]
		public static extern void core_add(IntPtr src1, IntPtr src2, IntPtr dst, IntPtr mask, int dtype);

		[PreserveSig]
		[Token(Token = "0x6000296")]
		[Address(RVA = "0x2190BAC", Offset = "0x2190BAC", VA = "0x2190BAC")]
		public static extern void core_subtract(IntPtr src1, IntPtr src2, IntPtr dst, IntPtr mask, int dtype);

		[PreserveSig]
		[Token(Token = "0x6000297")]
		[Address(RVA = "0x2190C5C", Offset = "0x2190C5C", VA = "0x2190C5C")]
		public static extern void core_multiply(IntPtr src1, IntPtr src2, IntPtr dst, double scale, int dtype);

		[PreserveSig]
		[Token(Token = "0x6000298")]
		[Address(RVA = "0x2190D14", Offset = "0x2190D14", VA = "0x2190D14")]
		public static extern void core_divide(double scale, IntPtr src2, IntPtr dst, int dtype);

		[PreserveSig]
		[Token(Token = "0x6000299")]
		[Address(RVA = "0x2190DBC", Offset = "0x2190DBC", VA = "0x2190DBC")]
		public static extern void core_divide(IntPtr src1, IntPtr src2, IntPtr dst, double scale, int dtype);

		[PreserveSig]
		[Token(Token = "0x600029A")]
		[Address(RVA = "0x2190E74", Offset = "0x2190E74", VA = "0x2190E74")]
		public static extern void core_scaleAdd(IntPtr src1, double alpha, IntPtr src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x600029B")]
		[Address(RVA = "0x2190F1C", Offset = "0x2190F1C", VA = "0x2190F1C")]
		public static extern void core_addWeighted(IntPtr src1, double alpha, IntPtr src2, double beta, double gamma, IntPtr dst, int dtype);

		[PreserveSig]
		[Token(Token = "0x600029C")]
		[Address(RVA = "0x2190FEC", Offset = "0x2190FEC", VA = "0x2190FEC")]
		public static extern void core_convertScaleAbs(IntPtr src, IntPtr dst, double alpha, double beta);

		[PreserveSig]
		[Token(Token = "0x600029D")]
		[Address(RVA = "0x2191094", Offset = "0x2191094", VA = "0x2191094")]
		public static extern void core_LUT(IntPtr src, IntPtr lut, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x600029E")]
		[Address(RVA = "0x219112C", Offset = "0x219112C", VA = "0x219112C")]
		public static extern Scalar core_sum(IntPtr src);

		[PreserveSig]
		[Token(Token = "0x600029F")]
		[Address(RVA = "0x21911A8", Offset = "0x21911A8", VA = "0x21911A8")]
		public static extern int core_countNonZero(IntPtr src);

		[PreserveSig]
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x2191224", Offset = "0x2191224", VA = "0x2191224")]
		public static extern void core_findNonZero(IntPtr src, IntPtr idx);

		[PreserveSig]
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x21912B0", Offset = "0x21912B0", VA = "0x21912B0")]
		public static extern Scalar core_mean(IntPtr src, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x2191340", Offset = "0x2191340", VA = "0x2191340")]
		public static extern void core_meanStdDev_OutputArray(IntPtr src, IntPtr mean, IntPtr stddev, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x21913E8", Offset = "0x21913E8", VA = "0x21913E8")]
		public static extern void core_meanStdDev_Scalar(IntPtr src, out Scalar mean, out Scalar stddev, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x2191490", Offset = "0x2191490", VA = "0x2191490")]
		public static extern double core_norm(IntPtr src1, int normType, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x2191528", Offset = "0x2191528", VA = "0x2191528")]
		public static extern double core_norm(IntPtr src1, IntPtr src2, int normType, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x21915D0", Offset = "0x21915D0", VA = "0x21915D0")]
		public static extern void core_batchDistance(IntPtr src1, IntPtr src2, IntPtr dist, int dtype, IntPtr nidx, int normType, int k, IntPtr mask, int update, int crosscheck);

		[PreserveSig]
		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x21916BC", Offset = "0x21916BC", VA = "0x21916BC")]
		public static extern void core_normalize(IntPtr src, IntPtr dst, double alpha, double beta, int normType, int dtype, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x2191784", Offset = "0x2191784", VA = "0x2191784")]
		public static extern void core_minMaxLoc(IntPtr src, out double minVal, out double maxVal);

		[PreserveSig]
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x219181C", Offset = "0x219181C", VA = "0x219181C")]
		public static extern void core_minMaxLoc(IntPtr src, out double minVal, out double maxVal, out Point minLoc, out Point maxLoc, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x21918DC", Offset = "0x21918DC", VA = "0x21918DC")]
		public static extern void core_minMaxIdx(IntPtr src, out double minVal, out double maxVal);

		[PreserveSig]
		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x2191974", Offset = "0x2191974", VA = "0x2191974")]
		public static extern void core_minMaxIdx(IntPtr src, out double minVal, out double maxVal, out int minIdx, out int maxIdx, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x2191A34", Offset = "0x2191A34", VA = "0x2191A34")]
		public static extern void core_reduce(IntPtr src, IntPtr dst, int dim, int rtype, int dtype);

		[PreserveSig]
		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x2191AE4", Offset = "0x2191AE4", VA = "0x2191AE4")]
		public static extern void core_merge(IntPtr[] mv, uint count, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x2191B84", Offset = "0x2191B84", VA = "0x2191B84")]
		public static extern void core_split(IntPtr src, out IntPtr mv);

		[PreserveSig]
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x2191C14", Offset = "0x2191C14", VA = "0x2191C14")]
		public static extern void core_mixChannels(IntPtr[] src, uint nsrcs, IntPtr[] dst, uint ndsts, int[] fromTo, uint npairs);

		[PreserveSig]
		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x2191CEC", Offset = "0x2191CEC", VA = "0x2191CEC")]
		public static extern void core_extractChannel(IntPtr src, IntPtr dst, int coi);

		[PreserveSig]
		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x2191D84", Offset = "0x2191D84", VA = "0x2191D84")]
		public static extern void core_insertChannel(IntPtr src, IntPtr dst, int coi);

		[PreserveSig]
		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x2191E1C", Offset = "0x2191E1C", VA = "0x2191E1C")]
		public static extern void core_flip(IntPtr src, IntPtr dst, int flipCode);

		[PreserveSig]
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x2191EB4", Offset = "0x2191EB4", VA = "0x2191EB4")]
		public static extern void core_rotate(IntPtr src, IntPtr dst, int code);

		[PreserveSig]
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x2191F4C", Offset = "0x2191F4C", VA = "0x2191F4C")]
		public static extern void core_repeat(IntPtr src, int ny, int nx, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x2191FF4", Offset = "0x2191FF4", VA = "0x2191FF4")]
		public static extern IntPtr core_repeat(IntPtr src, int ny, int nx);

		[PreserveSig]
		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x219208C", Offset = "0x219208C", VA = "0x219208C")]
		public static extern void core_hconcat(IntPtr[] src, uint nsrc, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x219212C", Offset = "0x219212C", VA = "0x219212C")]
		public static extern void core_hconcat(IntPtr src1, IntPtr src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x21921C4", Offset = "0x21921C4", VA = "0x21921C4")]
		public static extern void core_vconcat(IntPtr[] src, uint nsrc, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x2192264", Offset = "0x2192264", VA = "0x2192264")]
		public static extern void core_vconcat(IntPtr src1, IntPtr src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x21922FC", Offset = "0x21922FC", VA = "0x21922FC")]
		public static extern void core_bitwise_and(IntPtr src1, IntPtr src2, IntPtr dst, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x21923A4", Offset = "0x21923A4", VA = "0x21923A4")]
		public static extern void core_bitwise_or(IntPtr src1, IntPtr src2, IntPtr dst, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x219244C", Offset = "0x219244C", VA = "0x219244C")]
		public static extern void core_bitwise_xor(IntPtr src1, IntPtr src2, IntPtr dst, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x21924F4", Offset = "0x21924F4", VA = "0x21924F4")]
		public static extern void core_bitwise_not(IntPtr src, IntPtr dst, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x219258C", Offset = "0x219258C", VA = "0x219258C")]
		public static extern void core_absdiff(IntPtr src1, IntPtr src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x2192624", Offset = "0x2192624", VA = "0x2192624")]
		public static extern void core_inRange(IntPtr src, IntPtr lowerb, IntPtr upperb, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x21926CC", Offset = "0x21926CC", VA = "0x21926CC")]
		public static extern void core_inRange(IntPtr src, Scalar lowerb, Scalar upperb, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x21927BC", Offset = "0x21927BC", VA = "0x21927BC")]
		public static extern void core_compare(IntPtr src1, IntPtr src2, IntPtr dst, int cmpop);

		[PreserveSig]
		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x2192864", Offset = "0x2192864", VA = "0x2192864")]
		public static extern void core_min1(IntPtr src1, IntPtr src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x21928FC", Offset = "0x21928FC", VA = "0x21928FC")]
		public static extern void core_max1(IntPtr src1, IntPtr src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x2192994", Offset = "0x2192994", VA = "0x2192994")]
		public static extern void core_min_MatMat(IntPtr src1, IntPtr src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x2192A2C", Offset = "0x2192A2C", VA = "0x2192A2C")]
		public static extern void core_min_MatDouble(IntPtr src1, double src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x2192ACC", Offset = "0x2192ACC", VA = "0x2192ACC")]
		public static extern void core_max_MatMat(IntPtr src1, IntPtr src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x2192B64", Offset = "0x2192B64", VA = "0x2192B64")]
		public static extern void core_max_MatDouble(IntPtr src1, double src2, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x2192C04", Offset = "0x2192C04", VA = "0x2192C04")]
		public static extern void core_sqrt(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x2192C94", Offset = "0x2192C94", VA = "0x2192C94")]
		public static extern void core_pow_Mat(IntPtr src, double power, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x2192D34", Offset = "0x2192D34", VA = "0x2192D34")]
		public static extern void core_exp_Mat(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x2192DC4", Offset = "0x2192DC4", VA = "0x2192DC4")]
		public static extern void core_log_Mat(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x2192E54", Offset = "0x2192E54", VA = "0x2192E54")]
		public static extern float core_cubeRoot(float val);

		[PreserveSig]
		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x2192ED8", Offset = "0x2192ED8", VA = "0x2192ED8")]
		public static extern float core_fastAtan2(float y, float x);

		[PreserveSig]
		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x2192F64", Offset = "0x2192F64", VA = "0x2192F64")]
		public static extern void core_polarToCart(IntPtr magnitude, IntPtr angle, IntPtr x, IntPtr y, int angleInDegrees);

		[PreserveSig]
		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x2193014", Offset = "0x2193014", VA = "0x2193014")]
		public static extern void core_cartToPolar(IntPtr x, IntPtr y, IntPtr magnitude, IntPtr angle, int angleInDegrees);

		[PreserveSig]
		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x21930C4", Offset = "0x21930C4", VA = "0x21930C4")]
		public static extern void core_phase(IntPtr x, IntPtr y, IntPtr angle, int angleInDegrees);

		[PreserveSig]
		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x219316C", Offset = "0x219316C", VA = "0x219316C")]
		public static extern void core_magnitude_Mat(IntPtr x, IntPtr y, IntPtr magnitude);

		[PreserveSig]
		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x2193204", Offset = "0x2193204", VA = "0x2193204")]
		public static extern int core_checkRange(IntPtr a, int quiet, out Point pos, double minVal, double maxVal);

		[PreserveSig]
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x21932B4", Offset = "0x21932B4", VA = "0x21932B4")]
		public static extern void core_patchNaNs(IntPtr a, double val);

		[PreserveSig]
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x2193344", Offset = "0x2193344", VA = "0x2193344")]
		public static extern void core_gemm(IntPtr src1, IntPtr src2, double alpha, IntPtr src3, double gamma, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x219340C", Offset = "0x219340C", VA = "0x219340C")]
		public static extern void core_mulTransposed(IntPtr src, IntPtr dst, int aTa, IntPtr delta, double scale, int dtype);

		[PreserveSig]
		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x21934CC", Offset = "0x21934CC", VA = "0x21934CC")]
		public static extern void core_transpose(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x219355C", Offset = "0x219355C", VA = "0x219355C")]
		public static extern void core_transform(IntPtr src, IntPtr dst, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x21935F4", Offset = "0x21935F4", VA = "0x21935F4")]
		public static extern void core_perspectiveTransform(IntPtr src, IntPtr dst, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x219368C", Offset = "0x219368C", VA = "0x219368C")]
		public static extern void core_perspectiveTransform_Mat(IntPtr src, IntPtr dst, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x2193724", Offset = "0x2193724", VA = "0x2193724")]
		public static extern void core_perspectiveTransform_Point2f(IntPtr src, int srcLength, IntPtr dst, int dstLength, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x21937D4", Offset = "0x21937D4", VA = "0x21937D4")]
		public static extern void core_perspectiveTransform_Point2d(IntPtr src, int srcLength, IntPtr dst, int dstLength, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x2193884", Offset = "0x2193884", VA = "0x2193884")]
		public static extern void core_perspectiveTransform_Point3f(IntPtr src, int srcLength, IntPtr dst, int dstLength, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x2193934", Offset = "0x2193934", VA = "0x2193934")]
		public static extern void core_perspectiveTransform_Point3d(IntPtr src, int srcLength, IntPtr dst, int dstLength, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x21939E4", Offset = "0x21939E4", VA = "0x21939E4")]
		public static extern void core_completeSymm(IntPtr mtx, int lowerToUpper);

		[PreserveSig]
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x2193A70", Offset = "0x2193A70", VA = "0x2193A70")]
		public static extern void core_setIdentity(IntPtr mtx, Scalar s);

		[PreserveSig]
		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x2193B20", Offset = "0x2193B20", VA = "0x2193B20")]
		public static extern double core_determinant(IntPtr mtx);

		[PreserveSig]
		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x2193BA0", Offset = "0x2193BA0", VA = "0x2193BA0")]
		public static extern Scalar core_trace(IntPtr mtx);

		[PreserveSig]
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x2193C20", Offset = "0x2193C20", VA = "0x2193C20")]
		public static extern double core_invert(IntPtr src, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x2193CB8", Offset = "0x2193CB8", VA = "0x2193CB8")]
		public static extern int core_solve(IntPtr src1, IntPtr src2, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x2193D60", Offset = "0x2193D60", VA = "0x2193D60")]
		public static extern void core_sort(IntPtr src, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x2193DF8", Offset = "0x2193DF8", VA = "0x2193DF8")]
		public static extern void core_sortIdx(IntPtr src, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x2193E90", Offset = "0x2193E90", VA = "0x2193E90")]
		public static extern int core_solveCubic(IntPtr coeffs, IntPtr roots);

		[PreserveSig]
		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x2193F20", Offset = "0x2193F20", VA = "0x2193F20")]
		public static extern double core_solvePoly(IntPtr coeffs, IntPtr roots, int maxIters);

		[PreserveSig]
		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x2193FB8", Offset = "0x2193FB8", VA = "0x2193FB8")]
		public static extern int core_eigen(IntPtr src, IntPtr eigenvalues, IntPtr eigenvectors);

		[PreserveSig]
		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x2194050", Offset = "0x2194050", VA = "0x2194050")]
		public static extern void core_calcCovarMatrix_Mat(IntPtr[] samples, int nsamples, IntPtr covar, IntPtr mean, int flags, int ctype);

		[PreserveSig]
		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x2194118", Offset = "0x2194118", VA = "0x2194118")]
		public static extern void core_calcCovarMatrix_InputArray(IntPtr samples, IntPtr covar, IntPtr mean, int flags, int ctype);

		[PreserveSig]
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x21941C8", Offset = "0x21941C8", VA = "0x21941C8")]
		public static extern void core_PCACompute(IntPtr data, IntPtr mean, IntPtr eigenvectors, int maxComponents);

		[PreserveSig]
		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x2194270", Offset = "0x2194270", VA = "0x2194270")]
		public static extern void core_PCAComputeVar(IntPtr data, IntPtr mean, IntPtr eigenvectors, double retainedVariance);

		[PreserveSig]
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x2194318", Offset = "0x2194318", VA = "0x2194318")]
		public static extern void core_PCAProject(IntPtr data, IntPtr mean, IntPtr eigenvectors, IntPtr result);

		[PreserveSig]
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x21943C0", Offset = "0x21943C0", VA = "0x21943C0")]
		public static extern void core_PCABackProject(IntPtr data, IntPtr mean, IntPtr eigenvectors, IntPtr result);

		[PreserveSig]
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x2194468", Offset = "0x2194468", VA = "0x2194468")]
		public static extern void core_SVDecomp(IntPtr src, IntPtr w, IntPtr u, IntPtr vt, int flags);

		[PreserveSig]
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x2194518", Offset = "0x2194518", VA = "0x2194518")]
		public static extern void core_SVBackSubst(IntPtr w, IntPtr u, IntPtr vt, IntPtr rhs, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x21945C8", Offset = "0x21945C8", VA = "0x21945C8")]
		public static extern double core_Mahalanobis(IntPtr v1, IntPtr v2, IntPtr icovar);

		[PreserveSig]
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x2194660", Offset = "0x2194660", VA = "0x2194660")]
		public static extern void core_dft(IntPtr src, IntPtr dst, int flags, int nonzeroRows);

		[PreserveSig]
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x2194708", Offset = "0x2194708", VA = "0x2194708")]
		public static extern void core_idft(IntPtr src, IntPtr dst, int flags, int nonzeroRows);

		[PreserveSig]
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x21947B0", Offset = "0x21947B0", VA = "0x21947B0")]
		public static extern void core_dct(IntPtr src, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x2194848", Offset = "0x2194848", VA = "0x2194848")]
		public static extern void core_idct(IntPtr src, IntPtr dst, int flags);

		[PreserveSig]
		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x21948E0", Offset = "0x21948E0", VA = "0x21948E0")]
		public static extern void core_mulSpectrums(IntPtr a, IntPtr b, IntPtr c, int flags, int conjB);

		[PreserveSig]
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x219498C", Offset = "0x219498C", VA = "0x219498C")]
		public static extern int core_getOptimalDFTSize(int vecsize);

		[PreserveSig]
		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x2194A0C", Offset = "0x2194A0C", VA = "0x2194A0C")]
		public static extern double core_kmeans(IntPtr data, int k, IntPtr bestLabels, TermCriteria criteria, int attempts, int flags, IntPtr centers);

		[PreserveSig]
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x2194AE4", Offset = "0x2194AE4", VA = "0x2194AE4")]
		public static extern ulong core_theRNG();

		[PreserveSig]
		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x2194B58", Offset = "0x2194B58", VA = "0x2194B58")]
		public static extern void core_randu_InputArray(IntPtr dst, IntPtr low, IntPtr high);

		[PreserveSig]
		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x2194BF0", Offset = "0x2194BF0", VA = "0x2194BF0")]
		public static extern void core_randu_Scalar(IntPtr dst, Scalar low, Scalar high);

		[PreserveSig]
		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x2194CCC", Offset = "0x2194CCC", VA = "0x2194CCC")]
		public static extern void core_randn_InputArray(IntPtr dst, IntPtr mean, IntPtr stddev);

		[PreserveSig]
		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x2194D64", Offset = "0x2194D64", VA = "0x2194D64")]
		public static extern void core_randn_Scalar(IntPtr dst, Scalar mean, Scalar stddev);

		[PreserveSig]
		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x2194E40", Offset = "0x2194E40", VA = "0x2194E40")]
		public static extern void core_randShuffle(IntPtr dst, double iterFactor, ref ulong rng);

		[PreserveSig]
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x2194EE0", Offset = "0x2194EE0", VA = "0x2194EE0")]
		public static extern void core_randShuffle(IntPtr dst, double iterFactor, IntPtr rng);

		[PreserveSig]
		[Token(Token = "0x6000300")]
		[Address(RVA = "0x2194F80", Offset = "0x2194F80", VA = "0x2194F80")]
		public static extern void core_Algorithm_write(IntPtr obj, IntPtr fs);

		[PreserveSig]
		[Token(Token = "0x6000301")]
		[Address(RVA = "0x2195010", Offset = "0x2195010", VA = "0x2195010")]
		public static extern void core_Algorithm_read(IntPtr obj, IntPtr fn);

		[PreserveSig]
		[Token(Token = "0x6000302")]
		[Address(RVA = "0x21950A0", Offset = "0x21950A0", VA = "0x21950A0")]
		public static extern int core_Algorithm_empty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000303")]
		[Address(RVA = "0x2195120", Offset = "0x2195120", VA = "0x2195120")]
		public static extern void core_Algorithm_save(IntPtr obj, string filename);

		[PreserveSig]
		[Token(Token = "0x6000304")]
		[Address(RVA = "0x21951C4", Offset = "0x21951C4", VA = "0x21951C4")]
		public static extern void core_Algorithm_getDefaultName(IntPtr obj, StringBuilder buf, int bufLength);

		[PreserveSig]
		[Token(Token = "0x6000305")]
		[Address(RVA = "0x219527C", Offset = "0x219527C", VA = "0x219527C")]
		public static extern IntPtr core_InputArray_new_byMat(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x6000306")]
		[Address(RVA = "0x21952FC", Offset = "0x21952FC", VA = "0x21952FC")]
		public static extern IntPtr core_InputArray_new_byMatExpr(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x6000307")]
		[Address(RVA = "0x219537C", Offset = "0x219537C", VA = "0x219537C")]
		public static extern IntPtr core_InputArray_new_byScalar(Scalar val);

		[PreserveSig]
		[Token(Token = "0x6000308")]
		[Address(RVA = "0x2195424", Offset = "0x2195424", VA = "0x2195424")]
		public static extern IntPtr core_InputArray_new_byDouble(double val);

		[PreserveSig]
		[Token(Token = "0x6000309")]
		[Address(RVA = "0x21954AC", Offset = "0x21954AC", VA = "0x21954AC")]
		public static extern IntPtr core_InputArray_new_byGpuMat(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x600030A")]
		[Address(RVA = "0x219552C", Offset = "0x219552C", VA = "0x219552C")]
		public static extern IntPtr core_InputArray_new_byVectorOfMat(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x600030B")]
		[Address(RVA = "0x21955AC", Offset = "0x21955AC", VA = "0x21955AC")]
		public static extern void core_InputArray_delete(IntPtr ia);

		[PreserveSig]
		[Token(Token = "0x600030C")]
		[Address(RVA = "0x219562C", Offset = "0x219562C", VA = "0x219562C")]
		public static extern IntPtr core_OutputArray_new_byMat(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x600030D")]
		[Address(RVA = "0x21956AC", Offset = "0x21956AC", VA = "0x21956AC")]
		public static extern IntPtr core_OutputArray_new_byGpuMat(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x600030E")]
		[Address(RVA = "0x219572C", Offset = "0x219572C", VA = "0x219572C")]
		public static extern IntPtr core_OutputArray_new_byScalar(Scalar val);

		[PreserveSig]
		[Token(Token = "0x600030F")]
		[Address(RVA = "0x21957D4", Offset = "0x21957D4", VA = "0x21957D4")]
		public static extern IntPtr core_OutputArray_new_byVectorOfMat(IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000310")]
		[Address(RVA = "0x2195854", Offset = "0x2195854", VA = "0x2195854")]
		public static extern void core_OutputArray_delete(IntPtr oa);

		[PreserveSig]
		[Token(Token = "0x6000311")]
		[Address(RVA = "0x21958D4", Offset = "0x21958D4", VA = "0x21958D4")]
		public static extern int core_InputArray_kind(IntPtr ia);

		[PreserveSig]
		[Token(Token = "0x6000312")]
		[Address(RVA = "0x2195954", Offset = "0x2195954", VA = "0x2195954")]
		public static extern IntPtr core_OutputArray_getMat(IntPtr oa);

		[PreserveSig]
		[Token(Token = "0x6000313")]
		[Address(RVA = "0x21959D4", Offset = "0x21959D4", VA = "0x21959D4")]
		public static extern Scalar core_OutputArray_getScalar(IntPtr oa);

		[PreserveSig]
		[Token(Token = "0x6000314")]
		[Address(RVA = "0x2195A54", Offset = "0x2195A54", VA = "0x2195A54")]
		public static extern void core_OutputArray_getVectorOfMat(IntPtr oa, IntPtr vector);

		[PreserveSig]
		[Token(Token = "0x6000315")]
		[Address(RVA = "0x2195AE4", Offset = "0x2195AE4", VA = "0x2195AE4")]
		public static extern IntPtr core_FileStorage_new1();

		[PreserveSig]
		[Token(Token = "0x6000316")]
		[Address(RVA = "0x2195B58", Offset = "0x2195B58", VA = "0x2195B58")]
		public static extern IntPtr core_FileStorage_new2(string source, int flags, string encoding);

		[PreserveSig]
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x2195C20", Offset = "0x2195C20", VA = "0x2195C20")]
		public static extern IntPtr core_FileStorage_newFromLegacy(IntPtr fs);

		[PreserveSig]
		[Token(Token = "0x6000318")]
		[Address(RVA = "0x2195CA0", Offset = "0x2195CA0", VA = "0x2195CA0")]
		public static extern void core_FileStorage_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000319")]
		[Address(RVA = "0x2195D20", Offset = "0x2195D20", VA = "0x2195D20")]
		public static extern int core_FileStorage_open(IntPtr obj, string filename, int flags, string encoding);

		[PreserveSig]
		[Token(Token = "0x600031A")]
		[Address(RVA = "0x2195DF8", Offset = "0x2195DF8", VA = "0x2195DF8")]
		public static extern int core_FileStorage_isOpened(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600031B")]
		[Address(RVA = "0x2195E78", Offset = "0x2195E78", VA = "0x2195E78")]
		public static extern void core_FileStorage_release(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600031C")]
		[Address(RVA = "0x2195EF8", Offset = "0x2195EF8", VA = "0x2195EF8")]
		public static extern void core_FileStorage_releaseAndGetString(IntPtr obj, StringBuilder buf, int bufLength);

		[PreserveSig]
		[Token(Token = "0x600031D")]
		[Address(RVA = "0x2195FB0", Offset = "0x2195FB0", VA = "0x2195FB0")]
		public static extern IntPtr core_FileStorage_getFirstTopLevelNode(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600031E")]
		[Address(RVA = "0x2196030", Offset = "0x2196030", VA = "0x2196030")]
		public static extern IntPtr core_FileStorage_root(IntPtr obj, int streamIdx);

		[PreserveSig]
		[Token(Token = "0x600031F")]
		[Address(RVA = "0x21960C0", Offset = "0x21960C0", VA = "0x21960C0")]
		public static extern IntPtr core_FileStorage_indexer(IntPtr obj, string nodeName);

		[PreserveSig]
		[Token(Token = "0x6000320")]
		[Address(RVA = "0x219616C", Offset = "0x219616C", VA = "0x219616C")]
		public static extern IntPtr core_FileStorage_toLegacy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000321")]
		[Address(RVA = "0x21961EC", Offset = "0x21961EC", VA = "0x21961EC")]
		public static extern void core_FileStorage_writeRaw(IntPtr obj, string fmt, IntPtr vec, IntPtr len);

		[PreserveSig]
		[Token(Token = "0x6000322")]
		[Address(RVA = "0x21962A8", Offset = "0x21962A8", VA = "0x21962A8")]
		public static extern void core_FileStorage_writeObj(IntPtr obj, string name, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x6000323")]
		[Address(RVA = "0x2196354", Offset = "0x2196354", VA = "0x2196354")]
		public static extern void core_FileStorage_getDefaultObjectName(string filename, StringBuilder buf, int bufLength);

		[PreserveSig]
		[Token(Token = "0x6000324")]
		[Address(RVA = "0x2196420", Offset = "0x2196420", VA = "0x2196420")]
		public unsafe static extern sbyte* core_FileStorage_elname(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000325")]
		[Address(RVA = "0x21964A0", Offset = "0x21964A0", VA = "0x21964A0")]
		public static extern IntPtr core_FileStorage_structs(IntPtr obj, out IntPtr resultLength);

		[PreserveSig]
		[Token(Token = "0x6000326")]
		[Address(RVA = "0x2196530", Offset = "0x2196530", VA = "0x2196530")]
		public static extern int core_FileStorage_state(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000327")]
		[Address(RVA = "0x21965B0", Offset = "0x21965B0", VA = "0x21965B0")]
		public static extern void core_FileStorage_write_int(IntPtr fs, string name, int value);

		[PreserveSig]
		[Token(Token = "0x6000328")]
		[Address(RVA = "0x219665C", Offset = "0x219665C", VA = "0x219665C")]
		public static extern void core_FileStorage_write_float(IntPtr fs, string name, float value);

		[PreserveSig]
		[Token(Token = "0x6000329")]
		[Address(RVA = "0x2196710", Offset = "0x2196710", VA = "0x2196710")]
		public static extern void core_FileStorage_write_double(IntPtr fs, string name, double value);

		[PreserveSig]
		[Token(Token = "0x600032A")]
		[Address(RVA = "0x21967C4", Offset = "0x21967C4", VA = "0x21967C4")]
		public static extern void core_FileStorage_write_String(IntPtr fs, string name, string value);

		[PreserveSig]
		[Token(Token = "0x600032B")]
		[Address(RVA = "0x2196884", Offset = "0x2196884", VA = "0x2196884")]
		public static extern void core_FileStorage_write_Mat(IntPtr fs, string name, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600032C")]
		[Address(RVA = "0x2196930", Offset = "0x2196930", VA = "0x2196930")]
		public static extern void core_FileStorage_write_SparseMat(IntPtr fs, string name, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600032D")]
		[Address(RVA = "0x21969DC", Offset = "0x21969DC", VA = "0x21969DC")]
		public static extern void core_FileStorage_write_vectorOfKeyPoint(IntPtr fs, string name, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600032E")]
		[Address(RVA = "0x2196A88", Offset = "0x2196A88", VA = "0x2196A88")]
		public static extern void core_FileStorage_write_vectorOfDMatch(IntPtr fs, string name, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600032F")]
		[Address(RVA = "0x2196B34", Offset = "0x2196B34", VA = "0x2196B34")]
		public static extern void core_FileStorage_writeScalar_int(IntPtr fs, int value);

		[PreserveSig]
		[Token(Token = "0x6000330")]
		[Address(RVA = "0x2196BC4", Offset = "0x2196BC4", VA = "0x2196BC4")]
		public static extern void core_FileStorage_writeScalar_float(IntPtr fs, float value);

		[PreserveSig]
		[Token(Token = "0x6000331")]
		[Address(RVA = "0x2196C54", Offset = "0x2196C54", VA = "0x2196C54")]
		public static extern void core_FileStorage_writeScalar_double(IntPtr fs, double value);

		[PreserveSig]
		[Token(Token = "0x6000332")]
		[Address(RVA = "0x2196CE4", Offset = "0x2196CE4", VA = "0x2196CE4")]
		public static extern void core_FileStorage_writeScalar_String(IntPtr fs, string value);

		[PreserveSig]
		[Token(Token = "0x6000333")]
		[Address(RVA = "0x2196D88", Offset = "0x2196D88", VA = "0x2196D88")]
		public static extern IntPtr core_FileNode_new1();

		[PreserveSig]
		[Token(Token = "0x6000334")]
		[Address(RVA = "0x2196DFC", Offset = "0x2196DFC", VA = "0x2196DFC")]
		public static extern IntPtr core_FileNode_new2(IntPtr fs, IntPtr node);

		[PreserveSig]
		[Token(Token = "0x6000335")]
		[Address(RVA = "0x2196E8C", Offset = "0x2196E8C", VA = "0x2196E8C")]
		public static extern IntPtr core_FileNode_new3(IntPtr node);

		[PreserveSig]
		[Token(Token = "0x6000336")]
		[Address(RVA = "0x2196F0C", Offset = "0x2196F0C", VA = "0x2196F0C")]
		public static extern void core_FileNode_delete(IntPtr node);

		[PreserveSig]
		[Token(Token = "0x6000337")]
		[Address(RVA = "0x2196F8C", Offset = "0x2196F8C", VA = "0x2196F8C")]
		public static extern IntPtr core_FileNode_operatorThis_byString(IntPtr obj, string nodeName);

		[PreserveSig]
		[Token(Token = "0x6000338")]
		[Address(RVA = "0x2197038", Offset = "0x2197038", VA = "0x2197038")]
		public static extern IntPtr core_FileNode_operatorThis_byInt(IntPtr obj, int i);

		[PreserveSig]
		[Token(Token = "0x6000339")]
		[Address(RVA = "0x21970C8", Offset = "0x21970C8", VA = "0x21970C8")]
		public static extern int core_FileNode_type(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600033A")]
		[Address(RVA = "0x2197148", Offset = "0x2197148", VA = "0x2197148")]
		public static extern int core_FileNode_empty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600033B")]
		[Address(RVA = "0x21971C8", Offset = "0x21971C8", VA = "0x21971C8")]
		public static extern int core_FileNode_isNone(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600033C")]
		[Address(RVA = "0x2197248", Offset = "0x2197248", VA = "0x2197248")]
		public static extern int core_FileNode_isSeq(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600033D")]
		[Address(RVA = "0x21972C8", Offset = "0x21972C8", VA = "0x21972C8")]
		public static extern int core_FileNode_isMap(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600033E")]
		[Address(RVA = "0x2197348", Offset = "0x2197348", VA = "0x2197348")]
		public static extern int core_FileNode_isInt(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600033F")]
		[Address(RVA = "0x21973C8", Offset = "0x21973C8", VA = "0x21973C8")]
		public static extern int core_FileNode_isReal(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000340")]
		[Address(RVA = "0x2197448", Offset = "0x2197448", VA = "0x2197448")]
		public static extern int core_FileNode_isString(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000341")]
		[Address(RVA = "0x21974C8", Offset = "0x21974C8", VA = "0x21974C8")]
		public static extern int core_FileNode_isNamed(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000342")]
		[Address(RVA = "0x2197548", Offset = "0x2197548", VA = "0x2197548")]
		public static extern void core_FileNode_name(IntPtr obj, StringBuilder buf, int bufLength);

		[PreserveSig]
		[Token(Token = "0x6000343")]
		[Address(RVA = "0x2197600", Offset = "0x2197600", VA = "0x2197600")]
		public static extern IntPtr core_FileNode_size(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000344")]
		[Address(RVA = "0x2197680", Offset = "0x2197680", VA = "0x2197680")]
		public static extern int core_FileNode_toInt(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000345")]
		[Address(RVA = "0x2197700", Offset = "0x2197700", VA = "0x2197700")]
		public static extern float core_FileNode_toFloat(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000346")]
		[Address(RVA = "0x2197780", Offset = "0x2197780", VA = "0x2197780")]
		public static extern double core_FileNode_toDouble(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000347")]
		[Address(RVA = "0x2197800", Offset = "0x2197800", VA = "0x2197800")]
		public static extern void core_FileNode_toString(IntPtr obj, StringBuilder buf, int bufLength);

		[PreserveSig]
		[Token(Token = "0x6000348")]
		[Address(RVA = "0x21978B8", Offset = "0x21978B8", VA = "0x21978B8")]
		public static extern void core_FileNode_toMat(IntPtr obj, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x6000349")]
		[Address(RVA = "0x2197948", Offset = "0x2197948", VA = "0x2197948")]
		public static extern void core_FileNode_readRaw(IntPtr obj, string fmt, IntPtr vec, IntPtr len);

		[PreserveSig]
		[Token(Token = "0x600034A")]
		[Address(RVA = "0x2197A04", Offset = "0x2197A04", VA = "0x2197A04")]
		public static extern IntPtr core_FileNode_readObj(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600034B")]
		[Address(RVA = "0x2197A84", Offset = "0x2197A84", VA = "0x2197A84")]
		public static extern void core_FileNode_read_int(IntPtr node, out int value, int defaultValue);

		[PreserveSig]
		[Token(Token = "0x600034C")]
		[Address(RVA = "0x2197B1C", Offset = "0x2197B1C", VA = "0x2197B1C")]
		public static extern void core_FileNode_read_float(IntPtr node, out float value, float defaultValue);

		[PreserveSig]
		[Token(Token = "0x600034D")]
		[Address(RVA = "0x2197BBC", Offset = "0x2197BBC", VA = "0x2197BBC")]
		public static extern void core_FileNode_read_double(IntPtr node, out double value, double defaultValue);

		[PreserveSig]
		[Token(Token = "0x600034E")]
		[Address(RVA = "0x2197C5C", Offset = "0x2197C5C", VA = "0x2197C5C")]
		public static extern void core_FileNode_read_String(IntPtr node, StringBuilder value, int valueCapacity, string defaultValue);

		[PreserveSig]
		[Token(Token = "0x600034F")]
		[Address(RVA = "0x2197D38", Offset = "0x2197D38", VA = "0x2197D38")]
		public static extern void core_FileNode_read_Mat(IntPtr node, IntPtr mat, IntPtr defaultMat);

		[PreserveSig]
		[Token(Token = "0x6000350")]
		[Address(RVA = "0x2197DD0", Offset = "0x2197DD0", VA = "0x2197DD0")]
		public static extern void core_FileNode_read_SparseMat(IntPtr node, IntPtr mat, IntPtr defaultMat);

		[PreserveSig]
		[Token(Token = "0x6000351")]
		[Address(RVA = "0x2197E68", Offset = "0x2197E68", VA = "0x2197E68")]
		public static extern void core_FileNode_read_vectorOfKeyPoint(IntPtr node, IntPtr keypoints);

		[PreserveSig]
		[Token(Token = "0x6000352")]
		[Address(RVA = "0x2197EF8", Offset = "0x2197EF8", VA = "0x2197EF8")]
		public static extern void core_FileNode_read_vectorOfDMatch(IntPtr node, IntPtr matches);

		[PreserveSig]
		[Token(Token = "0x6000353")]
		[Address(RVA = "0x2197F88", Offset = "0x2197F88", VA = "0x2197F88")]
		public static extern IntPtr core_PCA_new1();

		[PreserveSig]
		[Token(Token = "0x6000354")]
		[Address(RVA = "0x2197FFC", Offset = "0x2197FFC", VA = "0x2197FFC")]
		public static extern IntPtr core_PCA_new2(IntPtr data, IntPtr mean, int flags, int maxComponents);

		[PreserveSig]
		[Token(Token = "0x6000355")]
		[Address(RVA = "0x21980A4", Offset = "0x21980A4", VA = "0x21980A4")]
		public static extern IntPtr core_PCA_new3(IntPtr data, IntPtr mean, int flags, double retainedVariance);

		[PreserveSig]
		[Token(Token = "0x6000356")]
		[Address(RVA = "0x219814C", Offset = "0x219814C", VA = "0x219814C")]
		public static extern void core_PCA_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000357")]
		[Address(RVA = "0x21981CC", Offset = "0x21981CC", VA = "0x21981CC")]
		public static extern void core_PCA_operatorThis(IntPtr obj, IntPtr data, IntPtr mean, int flags, int maxComponents);

		[PreserveSig]
		[Token(Token = "0x6000358")]
		[Address(RVA = "0x219827C", Offset = "0x219827C", VA = "0x219827C")]
		public static extern void core_PCA_computeVar(IntPtr obj, IntPtr data, IntPtr mean, int flags, double retainedVariance);

		[PreserveSig]
		[Token(Token = "0x6000359")]
		[Address(RVA = "0x2198334", Offset = "0x2198334", VA = "0x2198334")]
		public static extern IntPtr core_PCA_project(IntPtr obj, IntPtr vec);

		[PreserveSig]
		[Token(Token = "0x600035A")]
		[Address(RVA = "0x21983C0", Offset = "0x21983C0", VA = "0x21983C0")]
		public static extern void core_PCA_project(IntPtr obj, IntPtr vec, IntPtr result);

		[PreserveSig]
		[Token(Token = "0x600035B")]
		[Address(RVA = "0x2198454", Offset = "0x2198454", VA = "0x2198454")]
		public static extern IntPtr core_PCA_backProject(IntPtr obj, IntPtr vec);

		[PreserveSig]
		[Token(Token = "0x600035C")]
		[Address(RVA = "0x21984E4", Offset = "0x21984E4", VA = "0x21984E4")]
		public static extern void core_PCA_backProject(IntPtr obj, IntPtr vec, IntPtr result);

		[PreserveSig]
		[Token(Token = "0x600035D")]
		[Address(RVA = "0x219857C", Offset = "0x219857C", VA = "0x219857C")]
		public static extern IntPtr core_PCA_eigenvectors(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600035E")]
		[Address(RVA = "0x21985FC", Offset = "0x21985FC", VA = "0x21985FC")]
		public static extern IntPtr core_PCA_eigenvalues(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600035F")]
		[Address(RVA = "0x219867C", Offset = "0x219867C", VA = "0x219867C")]
		public static extern IntPtr core_PCA_mean(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000360")]
		[Address(RVA = "0x21986FC", Offset = "0x21986FC", VA = "0x21986FC")]
		public static extern void core_RNG_fill(ref ulong state, IntPtr mat, int distType, IntPtr a, IntPtr b, int saturateRange);

		[PreserveSig]
		[Token(Token = "0x6000361")]
		[Address(RVA = "0x21987BC", Offset = "0x21987BC", VA = "0x21987BC")]
		public static extern double core_RNG_gaussian(ref ulong state, double sigma);

		[PreserveSig]
		[Token(Token = "0x6000362")]
		[Address(RVA = "0x2198848", Offset = "0x2198848", VA = "0x2198848")]
		public static extern IntPtr core_SVD_new();

		[PreserveSig]
		[Token(Token = "0x6000363")]
		[Address(RVA = "0x21988BC", Offset = "0x21988BC", VA = "0x21988BC")]
		public static extern IntPtr core_SVD_new(IntPtr src, int flags);

		[PreserveSig]
		[Token(Token = "0x6000364")]
		[Address(RVA = "0x219894C", Offset = "0x219894C", VA = "0x219894C")]
		public static extern void core_SVD_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000365")]
		[Address(RVA = "0x21989CC", Offset = "0x21989CC", VA = "0x21989CC")]
		public static extern void core_SVD_operatorThis(IntPtr obj, IntPtr src, int flags);

		[PreserveSig]
		[Token(Token = "0x6000366")]
		[Address(RVA = "0x2198A64", Offset = "0x2198A64", VA = "0x2198A64")]
		public static extern void core_SVD_backSubst(IntPtr obj, IntPtr rhs, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x6000367")]
		[Address(RVA = "0x2198AFC", Offset = "0x2198AFC", VA = "0x2198AFC")]
		public static extern void core_SVD_static_compute(IntPtr src, IntPtr w, IntPtr u, IntPtr vt, int flags);

		[PreserveSig]
		[Token(Token = "0x6000368")]
		[Address(RVA = "0x2198BAC", Offset = "0x2198BAC", VA = "0x2198BAC")]
		public static extern void core_SVD_static_compute(IntPtr src, IntPtr w, int flags);

		[PreserveSig]
		[Token(Token = "0x6000369")]
		[Address(RVA = "0x2198C44", Offset = "0x2198C44", VA = "0x2198C44")]
		public static extern void core_SVD_static_backSubst(IntPtr w, IntPtr u, IntPtr vt, IntPtr rhs, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x600036A")]
		[Address(RVA = "0x2198CF4", Offset = "0x2198CF4", VA = "0x2198CF4")]
		public static extern void core_SVD_static_solveZ(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x600036B")]
		[Address(RVA = "0x2198D84", Offset = "0x2198D84", VA = "0x2198D84")]
		public static extern IntPtr core_SVD_u(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600036C")]
		[Address(RVA = "0x2198E04", Offset = "0x2198E04", VA = "0x2198E04")]
		public static extern IntPtr core_SVD_w(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600036D")]
		[Address(RVA = "0x2198E84", Offset = "0x2198E84", VA = "0x2198E84")]
		public static extern IntPtr core_SVD_vt(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600036E")]
		[Address(RVA = "0x2178F94", Offset = "0x2178F94", VA = "0x2178F94")]
		public static extern ulong core_Mat_sizeof();

		[PreserveSig]
		[Token(Token = "0x600036F")]
		[Address(RVA = "0x2198F04", Offset = "0x2198F04", VA = "0x2198F04")]
		public static extern IntPtr core_Mat_new1();

		[PreserveSig]
		[Token(Token = "0x6000370")]
		[Address(RVA = "0x2198F78", Offset = "0x2198F78", VA = "0x2198F78")]
		public static extern IntPtr core_Mat_new2(int rows, int cols, int type);

		[PreserveSig]
		[Token(Token = "0x6000371")]
		[Address(RVA = "0x2199010", Offset = "0x2199010", VA = "0x2199010")]
		public static extern IntPtr core_Mat_new3(int rows, int cols, int type, Scalar scalar);

		[PreserveSig]
		[Token(Token = "0x6000372")]
		[Address(RVA = "0x21990D8", Offset = "0x21990D8", VA = "0x21990D8")]
		public static extern IntPtr core_Mat_new4(IntPtr mat, Range rowRange, Range colRange);

		[PreserveSig]
		[Token(Token = "0x6000373")]
		[Address(RVA = "0x2199170", Offset = "0x2199170", VA = "0x2199170")]
		public static extern IntPtr core_Mat_new5(IntPtr mat, Range rowRange);

		[PreserveSig]
		[Token(Token = "0x6000374")]
		[Address(RVA = "0x2199200", Offset = "0x2199200", VA = "0x2199200")]
		public static extern IntPtr core_Mat_new6(IntPtr mat, Range[] rowRange);

		[PreserveSig]
		[Token(Token = "0x6000375")]
		[Address(RVA = "0x2199298", Offset = "0x2199298", VA = "0x2199298")]
		public static extern IntPtr core_Mat_new7(IntPtr mat, Rect roi);

		[PreserveSig]
		[Token(Token = "0x6000376")]
		[Address(RVA = "0x2199330", Offset = "0x2199330", VA = "0x2199330")]
		public static extern IntPtr core_Mat_new8(int rows, int cols, int type, IntPtr data, IntPtr step);

		[PreserveSig]
		[Token(Token = "0x6000377")]
		[Address(RVA = "0x21993E0", Offset = "0x21993E0", VA = "0x21993E0")]
		public static extern IntPtr core_Mat_new9(int ndims, int[] sizes, int type, IntPtr data, IntPtr[] steps);

		[PreserveSig]
		[Token(Token = "0x6000378")]
		[Address(RVA = "0x21994A0", Offset = "0x21994A0", VA = "0x21994A0")]
		public static extern IntPtr core_Mat_new9(int ndims, int[] sizes, int type, IntPtr data, IntPtr steps);

		[PreserveSig]
		[Token(Token = "0x6000379")]
		[Address(RVA = "0x2199558", Offset = "0x2199558", VA = "0x2199558")]
		public static extern IntPtr core_Mat_new10(int ndims, int[] sizes, int type);

		[PreserveSig]
		[Token(Token = "0x600037A")]
		[Address(RVA = "0x21995F8", Offset = "0x21995F8", VA = "0x21995F8")]
		public static extern IntPtr core_Mat_new11(int ndims, int[] sizes, int type, Scalar s);

		[PreserveSig]
		[Token(Token = "0x600037B")]
		[Address(RVA = "0x21996C8", Offset = "0x21996C8", VA = "0x21996C8")]
		public static extern IntPtr core_Mat_new_FromIplImage(IntPtr img, int copyData);

		[PreserveSig]
		[Token(Token = "0x600037C")]
		[Address(RVA = "0x2199758", Offset = "0x2199758", VA = "0x2199758")]
		public static extern IntPtr core_Mat_new_FromCvMat(IntPtr mat, int copyData);

		[PreserveSig]
		[Token(Token = "0x600037D")]
		[Address(RVA = "0x21997E8", Offset = "0x21997E8", VA = "0x21997E8")]
		public static extern void core_Mat_release(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x600037E")]
		[Address(RVA = "0x2199868", Offset = "0x2199868", VA = "0x2199868")]
		public static extern void core_Mat_delete(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x600037F")]
		[Address(RVA = "0x21998E8", Offset = "0x21998E8", VA = "0x21998E8")]
		public static extern IntPtr core_Mat_adjustROI(IntPtr nativeObj, int dtop, int dbottom, int dleft, int dright);

		[PreserveSig]
		[Token(Token = "0x6000380")]
		[Address(RVA = "0x2199998", Offset = "0x2199998", VA = "0x2199998")]
		public static extern void core_Mat_assignTo1(IntPtr self, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x6000381")]
		[Address(RVA = "0x2199A28", Offset = "0x2199A28", VA = "0x2199A28")]
		public static extern void core_Mat_assignTo2(IntPtr self, IntPtr m, int type);

		[PreserveSig]
		[Token(Token = "0x6000382")]
		[Address(RVA = "0x2199AC0", Offset = "0x2199AC0", VA = "0x2199AC0")]
		public static extern int core_Mat_channels(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x2199B3C", Offset = "0x2199B3C", VA = "0x2199B3C")]
		public static extern int core_Mat_checkVector1(IntPtr self, int elemChannels);

		[PreserveSig]
		[Token(Token = "0x6000384")]
		[Address(RVA = "0x2199BCC", Offset = "0x2199BCC", VA = "0x2199BCC")]
		public static extern int core_Mat_checkVector2(IntPtr self, int elemChannels, int depth);

		[PreserveSig]
		[Token(Token = "0x6000385")]
		[Address(RVA = "0x2199C64", Offset = "0x2199C64", VA = "0x2199C64")]
		public static extern int core_Mat_checkVector3(IntPtr self, int elemChannels, int depth, int requireContinuous);

		[PreserveSig]
		[Token(Token = "0x6000386")]
		[Address(RVA = "0x2199D0C", Offset = "0x2199D0C", VA = "0x2199D0C")]
		public static extern IntPtr core_Mat_clone(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x6000387")]
		[Address(RVA = "0x2199D8C", Offset = "0x2199D8C", VA = "0x2199D8C")]
		public static extern IntPtr core_Mat_col_toMat(IntPtr self, int x);

		[PreserveSig]
		[Token(Token = "0x6000388")]
		[Address(RVA = "0x2199E1C", Offset = "0x2199E1C", VA = "0x2199E1C")]
		public static extern IntPtr core_Mat_col_toMatExpr(IntPtr self, int x);

		[PreserveSig]
		[Token(Token = "0x6000389")]
		[Address(RVA = "0x2199EAC", Offset = "0x2199EAC", VA = "0x2199EAC")]
		public static extern int core_Mat_cols(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x600038A")]
		[Address(RVA = "0x2199F2C", Offset = "0x2199F2C", VA = "0x2199F2C")]
		public static extern IntPtr core_Mat_colRange_toMat(IntPtr self, int startCol, int endCol);

		[PreserveSig]
		[Token(Token = "0x600038B")]
		[Address(RVA = "0x2199FC4", Offset = "0x2199FC4", VA = "0x2199FC4")]
		public static extern IntPtr core_Mat_colRange_toMatExpr(IntPtr self, int startCol, int endCol);

		[PreserveSig]
		[Token(Token = "0x600038C")]
		[Address(RVA = "0x219A05C", Offset = "0x219A05C", VA = "0x219A05C")]
		public static extern int core_Mat_dims(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x600038D")]
		[Address(RVA = "0x219A0DC", Offset = "0x219A0DC", VA = "0x219A0DC")]
		public static extern void core_Mat_convertTo(IntPtr self, IntPtr m, int rtype, double alpha, double beta);

		[PreserveSig]
		[Token(Token = "0x600038E")]
		[Address(RVA = "0x219A18C", Offset = "0x219A18C", VA = "0x219A18C")]
		public static extern void core_Mat_copyTo(IntPtr self, IntPtr m, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x600038F")]
		[Address(RVA = "0x219A224", Offset = "0x219A224", VA = "0x219A224")]
		public static extern void core_Mat_create(IntPtr self, int rows, int cols, int type);

		[PreserveSig]
		[Token(Token = "0x6000390")]
		[Address(RVA = "0x219A2CC", Offset = "0x219A2CC", VA = "0x219A2CC")]
		public static extern void core_Mat_create(IntPtr self, int ndims, int[] sizes, int type);

		[PreserveSig]
		[Token(Token = "0x6000391")]
		[Address(RVA = "0x219A37C", Offset = "0x219A37C", VA = "0x219A37C")]
		public static extern IntPtr core_Mat_cross(IntPtr self, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x6000392")]
		[Address(RVA = "0x219A40C", Offset = "0x219A40C", VA = "0x219A40C")]
		public unsafe static extern byte* core_Mat_data(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x6000393")]
		[Address(RVA = "0x219A48C", Offset = "0x219A48C", VA = "0x219A48C")]
		public static extern IntPtr core_Mat_datastart(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x6000394")]
		[Address(RVA = "0x219A50C", Offset = "0x219A50C", VA = "0x219A50C")]
		public static extern IntPtr core_Mat_dataend(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x6000395")]
		[Address(RVA = "0x219A58C", Offset = "0x219A58C", VA = "0x219A58C")]
		public static extern IntPtr core_Mat_datalimit(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x6000396")]
		[Address(RVA = "0x219A60C", Offset = "0x219A60C", VA = "0x219A60C")]
		public static extern int core_Mat_depth(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x6000397")]
		[Address(RVA = "0x219A68C", Offset = "0x219A68C", VA = "0x219A68C")]
		public static extern IntPtr core_Mat_diag(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x6000398")]
		[Address(RVA = "0x219A70C", Offset = "0x219A70C", VA = "0x219A70C")]
		public static extern IntPtr core_Mat_diag(IntPtr self, int d);

		[PreserveSig]
		[Token(Token = "0x6000399")]
		[Address(RVA = "0x219A79C", Offset = "0x219A79C", VA = "0x219A79C")]
		public static extern double core_Mat_dot(IntPtr self, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x600039A")]
		[Address(RVA = "0x219A82C", Offset = "0x219A82C", VA = "0x219A82C")]
		public static extern ulong core_Mat_elemSize(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x600039B")]
		[Address(RVA = "0x219A8A8", Offset = "0x219A8A8", VA = "0x219A8A8")]
		public static extern ulong core_Mat_elemSize1(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x600039C")]
		[Address(RVA = "0x219A928", Offset = "0x219A928", VA = "0x219A928")]
		public static extern int core_Mat_empty(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x600039D")]
		[Address(RVA = "0x219A9A8", Offset = "0x219A9A8", VA = "0x219A9A8")]
		public static extern IntPtr core_Mat_eye(int rows, int cols, int type);

		[PreserveSig]
		[Token(Token = "0x600039E")]
		[Address(RVA = "0x219AA3C", Offset = "0x219AA3C", VA = "0x219AA3C")]
		public static extern IntPtr core_Mat_inv1(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x600039F")]
		[Address(RVA = "0x219AABC", Offset = "0x219AABC", VA = "0x219AABC")]
		public static extern IntPtr core_Mat_inv2(IntPtr self, int method);

		[PreserveSig]
		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x219AB4C", Offset = "0x219AB4C", VA = "0x219AB4C")]
		public static extern int core_Mat_isContinuous(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x219ABCC", Offset = "0x219ABCC", VA = "0x219ABCC")]
		public static extern int core_Mat_isSubmatrix(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x219AC4C", Offset = "0x219AC4C", VA = "0x219AC4C")]
		public static extern void core_Mat_locateROI(IntPtr self, out Size wholeSize, out Point ofs);

		[PreserveSig]
		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x219ACE4", Offset = "0x219ACE4", VA = "0x219ACE4")]
		public static extern IntPtr core_Mat_mul1(IntPtr self, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x219AD74", Offset = "0x219AD74", VA = "0x219AD74")]
		public static extern IntPtr core_Mat_mul2(IntPtr self, IntPtr m, double scale);

		[PreserveSig]
		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x219AE14", Offset = "0x219AE14", VA = "0x219AE14")]
		public static extern IntPtr core_Mat_ones1(int rows, int cols, int type);

		[PreserveSig]
		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x219AEAC", Offset = "0x219AEAC", VA = "0x219AEAC")]
		public static extern IntPtr core_Mat_ones2(int ndims, int[] sz, int type);

		[PreserveSig]
		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x219AF4C", Offset = "0x219AF4C", VA = "0x219AF4C")]
		public static extern IntPtr core_Mat_reshape1(IntPtr self, int cn);

		[PreserveSig]
		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x219AFD8", Offset = "0x219AFD8", VA = "0x219AFD8")]
		public static extern IntPtr core_Mat_reshape2(IntPtr self, int cn, int rows);

		[PreserveSig]
		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x219B06C", Offset = "0x219B06C", VA = "0x219B06C")]
		public static extern IntPtr core_Mat_reshape3(IntPtr self, int cn, int newndims, int[] newsz);

		[PreserveSig]
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x219B118", Offset = "0x219B118", VA = "0x219B118")]
		public static extern int core_Mat_rows(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x219B198", Offset = "0x219B198", VA = "0x219B198")]
		public static extern IntPtr core_Mat_row_toMat(IntPtr self, int y);

		[PreserveSig]
		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x219B228", Offset = "0x219B228", VA = "0x219B228")]
		public static extern IntPtr core_Mat_row_toMatExpr(IntPtr self, int y);

		[PreserveSig]
		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x219B2B8", Offset = "0x219B2B8", VA = "0x219B2B8")]
		public static extern IntPtr core_Mat_rowRange_toMat(IntPtr self, int startRow, int endRow);

		[PreserveSig]
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x219B350", Offset = "0x219B350", VA = "0x219B350")]
		public static extern IntPtr core_Mat_rowRange_toMatExpr(IntPtr self, int startRow, int endRow);

		[PreserveSig]
		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x219B3E8", Offset = "0x219B3E8", VA = "0x219B3E8")]
		public static extern IntPtr core_Mat_setTo_Scalar(IntPtr self, Scalar value, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x219B4A8", Offset = "0x219B4A8", VA = "0x219B4A8")]
		public static extern IntPtr core_Mat_setTo_InputArray(IntPtr self, IntPtr value, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x219B540", Offset = "0x219B540", VA = "0x219B540")]
		public static extern Size core_Mat_size(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x219B5C0", Offset = "0x219B5C0", VA = "0x219B5C0")]
		public static extern int core_Mat_sizeAt(IntPtr self, int i);

		[PreserveSig]
		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x219B650", Offset = "0x219B650", VA = "0x219B650")]
		public static extern ulong core_Mat_step1(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x219B6D0", Offset = "0x219B6D0", VA = "0x219B6D0")]
		public static extern ulong core_Mat_step1(IntPtr self, int i);

		[PreserveSig]
		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x219B760", Offset = "0x219B760", VA = "0x219B760")]
		public static extern long core_Mat_step(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x219B7E0", Offset = "0x219B7E0", VA = "0x219B7E0")]
		public static extern ulong core_Mat_stepAt(IntPtr self, int i);

		[PreserveSig]
		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x219B870", Offset = "0x219B870", VA = "0x219B870")]
		public static extern IntPtr core_Mat_subMat1(IntPtr self, int rowStart, int rowEnd, int colStart, int colEnd);

		[PreserveSig]
		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x219B920", Offset = "0x219B920", VA = "0x219B920")]
		public static extern IntPtr core_Mat_subMat2(IntPtr self, int nRanges, Range[] ranges);

		[PreserveSig]
		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x219B9C0", Offset = "0x219B9C0", VA = "0x219B9C0")]
		public static extern IntPtr core_Mat_t(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x219BA40", Offset = "0x219BA40", VA = "0x219BA40")]
		public static extern ulong core_Mat_total(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x219BAC0", Offset = "0x219BAC0", VA = "0x219BAC0")]
		public static extern int core_Mat_type(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x219BB40", Offset = "0x219BB40", VA = "0x219BB40")]
		public static extern IntPtr core_Mat_zeros1(int rows, int cols, int type);

		[PreserveSig]
		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x219BBD8", Offset = "0x219BBD8", VA = "0x219BBD8")]
		public static extern IntPtr core_Mat_zeros2(int ndims, int[] sz, int type);

		[PreserveSig]
		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x219BC78", Offset = "0x219BC78", VA = "0x219BC78")]
		public unsafe static extern sbyte* core_Mat_dump(IntPtr self, string format);

		[PreserveSig]
		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x219BD24", Offset = "0x219BD24", VA = "0x219BD24")]
		public unsafe static extern void core_Mat_dump_delete(sbyte* buf);

		[PreserveSig]
		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x219BDA4", Offset = "0x219BDA4", VA = "0x219BDA4")]
		public static extern IntPtr core_Mat_ptr1d(IntPtr self, int i0);

		[PreserveSig]
		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x219BE34", Offset = "0x219BE34", VA = "0x219BE34")]
		public static extern IntPtr core_Mat_ptr2d(IntPtr self, int i0, int i1);

		[PreserveSig]
		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x219BECC", Offset = "0x219BECC", VA = "0x219BECC")]
		public static extern IntPtr core_Mat_ptr3d(IntPtr self, int i0, int i1, int i2);

		[PreserveSig]
		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x219BF74", Offset = "0x219BF74", VA = "0x219BF74")]
		public static extern IntPtr core_Mat_ptrnd(IntPtr self, int[] idx);

		[PreserveSig]
		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x219C00C", Offset = "0x219C00C", VA = "0x219C00C")]
		public static extern void core_Mat_assignment_FromMat(IntPtr self, IntPtr newMat);

		[PreserveSig]
		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x219C09C", Offset = "0x219C09C", VA = "0x219C09C")]
		public static extern void core_Mat_assignment_FromMatExpr(IntPtr self, IntPtr newMatExpr);

		[PreserveSig]
		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x219C12C", Offset = "0x219C12C", VA = "0x219C12C")]
		public static extern void core_Mat_assignment_FromScalar(IntPtr self, Scalar scalar);

		[PreserveSig]
		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x219C1DC", Offset = "0x219C1DC", VA = "0x219C1DC")]
		public static extern void core_Mat_IplImage(IntPtr self, IntPtr outImage);

		[PreserveSig]
		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x219C268", Offset = "0x219C268", VA = "0x219C268")]
		public static extern void core_Mat_IplImage_alignment(IntPtr self, out IntPtr outImage);

		[PreserveSig]
		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x219C2F8", Offset = "0x219C2F8", VA = "0x219C2F8")]
		public static extern void core_Mat_CvMat(IntPtr self, IntPtr outMat);

		[PreserveSig]
		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x219C388", Offset = "0x219C388", VA = "0x219C388")]
		public static extern IntPtr core_Mat_operatorUnaryMinus(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x219C408", Offset = "0x219C408", VA = "0x219C408")]
		public static extern IntPtr core_Mat_operatorAdd_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x219C498", Offset = "0x219C498", VA = "0x219C498")]
		public static extern IntPtr core_Mat_operatorAdd_MatScalar(IntPtr a, Scalar s);

		[PreserveSig]
		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x219C548", Offset = "0x219C548", VA = "0x219C548")]
		public static extern IntPtr core_Mat_operatorAdd_ScalarMat(Scalar s, IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x219C5F8", Offset = "0x219C5F8", VA = "0x219C5F8")]
		public static extern IntPtr core_Mat_operatorMinus_Mat(IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x219C678", Offset = "0x219C678", VA = "0x219C678")]
		public static extern IntPtr core_Mat_operatorSubtract_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x219C708", Offset = "0x219C708", VA = "0x219C708")]
		public static extern IntPtr core_Mat_operatorSubtract_MatScalar(IntPtr a, Scalar s);

		[PreserveSig]
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x219C7B8", Offset = "0x219C7B8", VA = "0x219C7B8")]
		public static extern IntPtr core_Mat_operatorSubtract_ScalarMat(Scalar s, IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x219C868", Offset = "0x219C868", VA = "0x219C868")]
		public static extern IntPtr core_Mat_operatorMultiply_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x219C8F8", Offset = "0x219C8F8", VA = "0x219C8F8")]
		public static extern IntPtr core_Mat_operatorMultiply_MatDouble(IntPtr a, double s);

		[PreserveSig]
		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x219C988", Offset = "0x219C988", VA = "0x219C988")]
		public static extern IntPtr core_Mat_operatorMultiply_DoubleMat(double s, IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x219CA18", Offset = "0x219CA18", VA = "0x219CA18")]
		public static extern IntPtr core_Mat_operatorDivide_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x219CAA8", Offset = "0x219CAA8", VA = "0x219CAA8")]
		public static extern IntPtr core_Mat_operatorDivide_MatDouble(IntPtr a, double s);

		[PreserveSig]
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x219CB38", Offset = "0x219CB38", VA = "0x219CB38")]
		public static extern IntPtr core_Mat_operatorDivide_DoubleMat(double s, IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x219CBC8", Offset = "0x219CBC8", VA = "0x219CBC8")]
		public static extern IntPtr core_Mat_operatorAnd_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x219CC58", Offset = "0x219CC58", VA = "0x219CC58")]
		public static extern IntPtr core_Mat_operatorAnd_MatDouble(IntPtr a, double s);

		[PreserveSig]
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x219CCE8", Offset = "0x219CCE8", VA = "0x219CCE8")]
		public static extern IntPtr core_Mat_operatorAnd_DoubleMat(double s, IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x219CD78", Offset = "0x219CD78", VA = "0x219CD78")]
		public static extern IntPtr core_Mat_operatorOr_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x219CE08", Offset = "0x219CE08", VA = "0x219CE08")]
		public static extern IntPtr core_Mat_operatorOr_MatDouble(IntPtr a, double s);

		[PreserveSig]
		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x219CE98", Offset = "0x219CE98", VA = "0x219CE98")]
		public static extern IntPtr core_Mat_operatorOr_DoubleMat(double s, IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x219CF28", Offset = "0x219CF28", VA = "0x219CF28")]
		public static extern IntPtr core_Mat_operatorXor_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x219CFB8", Offset = "0x219CFB8", VA = "0x219CFB8")]
		public static extern IntPtr core_Mat_operatorXor_MatDouble(IntPtr a, double s);

		[PreserveSig]
		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x219D048", Offset = "0x219D048", VA = "0x219D048")]
		public static extern IntPtr core_Mat_operatorXor_DoubleMat(double s, IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x219D0D8", Offset = "0x219D0D8", VA = "0x219D0D8")]
		public static extern IntPtr core_Mat_operatorNot(IntPtr a);

		[PreserveSig]
		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x219D158", Offset = "0x219D158", VA = "0x219D158")]
		public static extern IntPtr core_Mat_operatorLT_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x219D1E8", Offset = "0x219D1E8", VA = "0x219D1E8")]
		public static extern IntPtr core_Mat_operatorLT_DoubleMat(double a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x219D278", Offset = "0x219D278", VA = "0x219D278")]
		public static extern IntPtr core_Mat_operatorLT_MatDouble(IntPtr a, double b);

		[PreserveSig]
		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x219D308", Offset = "0x219D308", VA = "0x219D308")]
		public static extern IntPtr core_Mat_operatorLE_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x219D398", Offset = "0x219D398", VA = "0x219D398")]
		public static extern IntPtr core_Mat_operatorLE_DoubleMat(double a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x219D428", Offset = "0x219D428", VA = "0x219D428")]
		public static extern IntPtr core_Mat_operatorLE_MatDouble(IntPtr a, double b);

		[PreserveSig]
		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x219D4B8", Offset = "0x219D4B8", VA = "0x219D4B8")]
		public static extern IntPtr core_Mat_operatorGT_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x219D548", Offset = "0x219D548", VA = "0x219D548")]
		public static extern IntPtr core_Mat_operatorGT_DoubleMat(double a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x219D5D8", Offset = "0x219D5D8", VA = "0x219D5D8")]
		public static extern IntPtr core_Mat_operatorGT_MatDouble(IntPtr a, double b);

		[PreserveSig]
		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x219D668", Offset = "0x219D668", VA = "0x219D668")]
		public static extern IntPtr core_Mat_operatorGE_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x219D6F8", Offset = "0x219D6F8", VA = "0x219D6F8")]
		public static extern IntPtr core_Mat_operatorGE_DoubleMat(double a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x219D788", Offset = "0x219D788", VA = "0x219D788")]
		public static extern IntPtr core_Mat_operatorGE_MatDouble(IntPtr a, double b);

		[PreserveSig]
		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x219D818", Offset = "0x219D818", VA = "0x219D818")]
		public static extern IntPtr core_Mat_operatorEQ_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x219D8A8", Offset = "0x219D8A8", VA = "0x219D8A8")]
		public static extern IntPtr core_Mat_operatorEQ_DoubleMat(double a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x219D938", Offset = "0x219D938", VA = "0x219D938")]
		public static extern IntPtr core_Mat_operatorEQ_MatDouble(IntPtr a, double b);

		[PreserveSig]
		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x219D9C8", Offset = "0x219D9C8", VA = "0x219D9C8")]
		public static extern IntPtr core_Mat_operatorNE_MatMat(IntPtr a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x219DA58", Offset = "0x219DA58", VA = "0x219DA58")]
		public static extern IntPtr core_Mat_operatorNE_DoubleMat(double a, IntPtr b);

		[PreserveSig]
		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x219DAE8", Offset = "0x219DAE8", VA = "0x219DAE8")]
		public static extern IntPtr core_Mat_operatorNE_MatDouble(IntPtr a, double b);

		[PreserveSig]
		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x219DB78", Offset = "0x219DB78", VA = "0x219DB78")]
		public static extern IntPtr core_abs_Mat(IntPtr e);

		[PreserveSig]
		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x219DBF8", Offset = "0x219DBF8", VA = "0x219DBF8")]
		public static extern int core_Mat_nSetB(IntPtr obj, int row, int col, [In] byte[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x219DCB0", Offset = "0x219DCB0", VA = "0x219DCB0")]
		public static extern int core_Mat_nSetB(IntPtr obj, int row, int col, [In] byte[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x219DCCC", Offset = "0x219DCCC", VA = "0x219DCCC")]
		public static extern int core_Mat_nSetS(IntPtr obj, int row, int col, [In] short[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x219DD84", Offset = "0x219DD84", VA = "0x219DD84")]
		public static extern int core_Mat_nSetS(IntPtr obj, int row, int col, [In] short[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x219DDA0", Offset = "0x219DDA0", VA = "0x219DDA0")]
		public static extern int core_Mat_nSetS(IntPtr obj, int row, int col, [In] ushort[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x219DE58", Offset = "0x219DE58", VA = "0x219DE58")]
		public static extern int core_Mat_nSetS(IntPtr obj, int row, int col, [In] ushort[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x219DE74", Offset = "0x219DE74", VA = "0x219DE74")]
		public static extern int core_Mat_nSetI(IntPtr obj, int row, int col, [In] int[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x219DF2C", Offset = "0x219DF2C", VA = "0x219DF2C")]
		public static extern int core_Mat_nSetI(IntPtr obj, int row, int col, [In] int[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x219DF48", Offset = "0x219DF48", VA = "0x219DF48")]
		public static extern int core_Mat_nSetF(IntPtr obj, int row, int col, [In] float[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x219E000", Offset = "0x219E000", VA = "0x219E000")]
		public static extern int core_Mat_nSetF(IntPtr obj, int row, int col, [In] float[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x219E01C", Offset = "0x219E01C", VA = "0x219E01C")]
		public static extern int core_Mat_nSetD(IntPtr obj, int row, int col, [In] double[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000400")]
		[Address(RVA = "0x219E0D4", Offset = "0x219E0D4", VA = "0x219E0D4")]
		public static extern int core_Mat_nSetD(IntPtr obj, int row, int col, [In] double[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000401")]
		[Address(RVA = "0x219E0F0", Offset = "0x219E0F0", VA = "0x219E0F0")]
		public static extern int core_Mat_nSetVec3b(IntPtr obj, int row, int col, [In] Vec3b[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000402")]
		[Address(RVA = "0x219E1A8", Offset = "0x219E1A8", VA = "0x219E1A8")]
		public static extern int core_Mat_nSetVec3b(IntPtr obj, int row, int col, [In] Vec3b[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000403")]
		[Address(RVA = "0x219E1C4", Offset = "0x219E1C4", VA = "0x219E1C4")]
		public static extern int core_Mat_nSetVec3d(IntPtr obj, int row, int col, [In] Vec3d[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000404")]
		[Address(RVA = "0x219E27C", Offset = "0x219E27C", VA = "0x219E27C")]
		public static extern int core_Mat_nSetVec3d(IntPtr obj, int row, int col, [In] Vec3d[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000405")]
		[Address(RVA = "0x219E298", Offset = "0x219E298", VA = "0x219E298")]
		public static extern int core_Mat_nSetVec4f(IntPtr obj, int row, int col, [In] Vec4f[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000406")]
		[Address(RVA = "0x219E350", Offset = "0x219E350", VA = "0x219E350")]
		public static extern int core_Mat_nSetVec4f(IntPtr obj, int row, int col, [In] Vec4f[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000407")]
		[Address(RVA = "0x219E36C", Offset = "0x219E36C", VA = "0x219E36C")]
		public static extern int core_Mat_nSetVec6f(IntPtr obj, int row, int col, [In] Vec6f[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000408")]
		[Address(RVA = "0x219E424", Offset = "0x219E424", VA = "0x219E424")]
		public static extern int core_Mat_nSetVec6f(IntPtr obj, int row, int col, [In] Vec6f[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000409")]
		[Address(RVA = "0x219E440", Offset = "0x219E440", VA = "0x219E440")]
		public static extern int core_Mat_nSetVec4i(IntPtr obj, int row, int col, [In] Vec4i[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600040A")]
		[Address(RVA = "0x219E4F8", Offset = "0x219E4F8", VA = "0x219E4F8")]
		public static extern int core_Mat_nSetVec4i(IntPtr obj, int row, int col, [In] Vec4i[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600040B")]
		[Address(RVA = "0x219E514", Offset = "0x219E514", VA = "0x219E514")]
		public static extern int core_Mat_nSetPoint(IntPtr obj, int row, int col, [In] Point[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600040C")]
		[Address(RVA = "0x219E5CC", Offset = "0x219E5CC", VA = "0x219E5CC")]
		public static extern int core_Mat_nSetPoint(IntPtr obj, int row, int col, [In] Point[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600040D")]
		[Address(RVA = "0x219E5E8", Offset = "0x219E5E8", VA = "0x219E5E8")]
		public static extern int core_Mat_nSetPoint2f(IntPtr obj, int row, int col, [In] Point2f[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600040E")]
		[Address(RVA = "0x219E6A0", Offset = "0x219E6A0", VA = "0x219E6A0")]
		public static extern int core_Mat_nSetPoint2f(IntPtr obj, int row, int col, [In] Point2f[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600040F")]
		[Address(RVA = "0x219E6BC", Offset = "0x219E6BC", VA = "0x219E6BC")]
		public static extern int core_Mat_nSetPoint2d(IntPtr obj, int row, int col, [In] Point2d[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000410")]
		[Address(RVA = "0x219E774", Offset = "0x219E774", VA = "0x219E774")]
		public static extern int core_Mat_nSetPoint2d(IntPtr obj, int row, int col, [In] Point2d[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000411")]
		[Address(RVA = "0x219E790", Offset = "0x219E790", VA = "0x219E790")]
		public static extern int core_Mat_nSetPoint3i(IntPtr obj, int row, int col, [In] Point3i[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000412")]
		[Address(RVA = "0x219E848", Offset = "0x219E848", VA = "0x219E848")]
		public static extern int core_Mat_nSetPoint3i(IntPtr obj, int row, int col, [In] Point3i[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000413")]
		[Address(RVA = "0x219E864", Offset = "0x219E864", VA = "0x219E864")]
		public static extern int core_Mat_nSetPoint3f(IntPtr obj, int row, int col, [In] Point3f[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000414")]
		[Address(RVA = "0x219E91C", Offset = "0x219E91C", VA = "0x219E91C")]
		public static extern int core_Mat_nSetPoint3f(IntPtr obj, int row, int col, [In] Point3f[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000415")]
		[Address(RVA = "0x219E938", Offset = "0x219E938", VA = "0x219E938")]
		public static extern int core_Mat_nSetPoint3d(IntPtr obj, int row, int col, [In] Point3d[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000416")]
		[Address(RVA = "0x219E9F0", Offset = "0x219E9F0", VA = "0x219E9F0")]
		public static extern int core_Mat_nSetPoint3d(IntPtr obj, int row, int col, [In] Point3d[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000417")]
		[Address(RVA = "0x219EA0C", Offset = "0x219EA0C", VA = "0x219EA0C")]
		public static extern int core_Mat_nSetRect(IntPtr obj, int row, int col, [In] Rect[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000418")]
		[Address(RVA = "0x219EAC0", Offset = "0x219EAC0", VA = "0x219EAC0")]
		public static extern int core_Mat_nSetRect(IntPtr obj, int row, int col, [In] Rect[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000419")]
		[Address(RVA = "0x219EADC", Offset = "0x219EADC", VA = "0x219EADC")]
		public static extern int core_Mat_nGetB(IntPtr obj, int row, int col, [In][Out] byte[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600041A")]
		[Address(RVA = "0x219EB94", Offset = "0x219EB94", VA = "0x219EB94")]
		public static extern int core_Mat_nGetB(IntPtr obj, int row, int col, [In][Out] byte[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600041B")]
		[Address(RVA = "0x219EBB0", Offset = "0x219EBB0", VA = "0x219EBB0")]
		public static extern int core_Mat_nGetS(IntPtr obj, int row, int col, [In][Out] short[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600041C")]
		[Address(RVA = "0x219EC68", Offset = "0x219EC68", VA = "0x219EC68")]
		public static extern int core_Mat_nGetS(IntPtr obj, int row, int col, [In][Out] short[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600041D")]
		[Address(RVA = "0x219EC84", Offset = "0x219EC84", VA = "0x219EC84")]
		public static extern int core_Mat_nGetS(IntPtr obj, int row, int col, [In][Out] ushort[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600041E")]
		[Address(RVA = "0x219ED3C", Offset = "0x219ED3C", VA = "0x219ED3C")]
		public static extern int core_Mat_nGetS(IntPtr obj, int row, int col, [In][Out] ushort[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600041F")]
		[Address(RVA = "0x219ED58", Offset = "0x219ED58", VA = "0x219ED58")]
		public static extern int core_Mat_nGetI(IntPtr obj, int row, int col, [In][Out] int[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000420")]
		[Address(RVA = "0x219EE10", Offset = "0x219EE10", VA = "0x219EE10")]
		public static extern int core_Mat_nGetI(IntPtr obj, int row, int col, [In][Out] int[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000421")]
		[Address(RVA = "0x219EE2C", Offset = "0x219EE2C", VA = "0x219EE2C")]
		public static extern int core_Mat_nGetF(IntPtr obj, int row, int col, [In][Out] float[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000422")]
		[Address(RVA = "0x219EEE4", Offset = "0x219EEE4", VA = "0x219EEE4")]
		public static extern int core_Mat_nGetF(IntPtr obj, int row, int col, [In][Out] float[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000423")]
		[Address(RVA = "0x219EF00", Offset = "0x219EF00", VA = "0x219EF00")]
		public static extern int core_Mat_nGetD(IntPtr obj, int row, int col, [In][Out] double[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000424")]
		[Address(RVA = "0x219EFB8", Offset = "0x219EFB8", VA = "0x219EFB8")]
		public static extern int core_Mat_nGetD(IntPtr obj, int row, int col, [In][Out] double[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000425")]
		[Address(RVA = "0x219EFD4", Offset = "0x219EFD4", VA = "0x219EFD4")]
		public static extern int core_Mat_nGetVec3b(IntPtr obj, int row, int col, [In][Out] Vec3b[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000426")]
		[Address(RVA = "0x219F08C", Offset = "0x219F08C", VA = "0x219F08C")]
		public static extern int core_Mat_nGetVec3b(IntPtr obj, int row, int col, [In][Out] Vec3b[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000427")]
		[Address(RVA = "0x219F0A8", Offset = "0x219F0A8", VA = "0x219F0A8")]
		public static extern int core_Mat_nGetVec3d(IntPtr obj, int row, int col, [In][Out] Vec3d[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000428")]
		[Address(RVA = "0x219F160", Offset = "0x219F160", VA = "0x219F160")]
		public static extern int core_Mat_nGetVec3d(IntPtr obj, int row, int col, [In][Out] Vec3d[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000429")]
		[Address(RVA = "0x219F17C", Offset = "0x219F17C", VA = "0x219F17C")]
		public static extern int core_Mat_nGetVec4f(IntPtr obj, int row, int col, [In][Out] Vec4f[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600042A")]
		[Address(RVA = "0x219F234", Offset = "0x219F234", VA = "0x219F234")]
		public static extern int core_Mat_nGetVec4f(IntPtr obj, int row, int col, [In][Out] Vec4f[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600042B")]
		[Address(RVA = "0x219F250", Offset = "0x219F250", VA = "0x219F250")]
		public static extern int core_Mat_nGetVec6f(IntPtr obj, int row, int col, [In][Out] Vec6f[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600042C")]
		[Address(RVA = "0x219F308", Offset = "0x219F308", VA = "0x219F308")]
		public static extern int core_Mat_nGetVec6f(IntPtr obj, int row, int col, [In][Out] Vec6f[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600042D")]
		[Address(RVA = "0x219F324", Offset = "0x219F324", VA = "0x219F324")]
		public static extern int core_Mat_nGetVec4i(IntPtr obj, int row, int col, [In][Out] Vec4i[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600042E")]
		[Address(RVA = "0x219F3DC", Offset = "0x219F3DC", VA = "0x219F3DC")]
		public static extern int core_Mat_nGetVec4i(IntPtr obj, int row, int col, [In][Out] Vec4i[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600042F")]
		[Address(RVA = "0x219F3F8", Offset = "0x219F3F8", VA = "0x219F3F8")]
		public static extern int core_Mat_nGetPoint(IntPtr obj, int row, int col, [In][Out] Point[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000430")]
		[Address(RVA = "0x219F4B0", Offset = "0x219F4B0", VA = "0x219F4B0")]
		public static extern int core_Mat_nGetPoint(IntPtr obj, int row, int col, [In][Out] Point[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000431")]
		[Address(RVA = "0x219F4CC", Offset = "0x219F4CC", VA = "0x219F4CC")]
		public static extern int core_Mat_nGetPoint2f(IntPtr obj, int row, int col, [In][Out] Point2f[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000432")]
		[Address(RVA = "0x219F584", Offset = "0x219F584", VA = "0x219F584")]
		public static extern int core_Mat_nGetPoint2f(IntPtr obj, int row, int col, [In][Out] Point2f[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000433")]
		[Address(RVA = "0x219F5A0", Offset = "0x219F5A0", VA = "0x219F5A0")]
		public static extern int core_Mat_nGetPoint2d(IntPtr obj, int row, int col, [In][Out] Point2d[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000434")]
		[Address(RVA = "0x219F658", Offset = "0x219F658", VA = "0x219F658")]
		public static extern int core_Mat_nGetPoint2d(IntPtr obj, int row, int col, [In][Out] Point2d[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000435")]
		[Address(RVA = "0x219F674", Offset = "0x219F674", VA = "0x219F674")]
		public static extern int core_Mat_nGetPoint3i(IntPtr obj, int row, int col, [In][Out] Point3i[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000436")]
		[Address(RVA = "0x219F72C", Offset = "0x219F72C", VA = "0x219F72C")]
		public static extern int core_Mat_nGetPoint3i(IntPtr obj, int row, int col, [In][Out] Point3i[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000437")]
		[Address(RVA = "0x219F748", Offset = "0x219F748", VA = "0x219F748")]
		public static extern int core_Mat_nGetPoint3f(IntPtr obj, int row, int col, [In][Out] Point3f[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000438")]
		[Address(RVA = "0x219F800", Offset = "0x219F800", VA = "0x219F800")]
		public static extern int core_Mat_nGetPoint3f(IntPtr obj, int row, int col, [In][Out] Point3f[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x6000439")]
		[Address(RVA = "0x219F81C", Offset = "0x219F81C", VA = "0x219F81C")]
		public static extern int core_Mat_nGetPoint3d(IntPtr obj, int row, int col, [In][Out] Point3d[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600043A")]
		[Address(RVA = "0x219F8D4", Offset = "0x219F8D4", VA = "0x219F8D4")]
		public static extern int core_Mat_nGetPoint3d(IntPtr obj, int row, int col, [In][Out] Point3d[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600043B")]
		[Address(RVA = "0x219F8F0", Offset = "0x219F8F0", VA = "0x219F8F0")]
		public static extern int core_Mat_nGetRect(IntPtr obj, int row, int col, [In][Out] Rect[] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600043C")]
		[Address(RVA = "0x219F9A4", Offset = "0x219F9A4", VA = "0x219F9A4")]
		public static extern int core_Mat_nGetRect(IntPtr obj, int row, int col, [In][Out] Rect[,] vals, int valsLength);

		[PreserveSig]
		[Token(Token = "0x600043D")]
		[Address(RVA = "0x219F9C0", Offset = "0x219F9C0", VA = "0x219F9C0")]
		public static extern void core_Mat_push_back_Mat(IntPtr self, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x600043E")]
		[Address(RVA = "0x219FA50", Offset = "0x219FA50", VA = "0x219FA50")]
		public static extern void core_Mat_push_back_char(IntPtr self, sbyte v);

		[PreserveSig]
		[Token(Token = "0x600043F")]
		[Address(RVA = "0x219FAE0", Offset = "0x219FAE0", VA = "0x219FAE0")]
		public static extern void core_Mat_push_back_uchar(IntPtr self, byte v);

		[PreserveSig]
		[Token(Token = "0x6000440")]
		[Address(RVA = "0x2174870", Offset = "0x2174870", VA = "0x2174870")]
		public static extern void core_Mat_push_back_short(IntPtr self, short v);

		[PreserveSig]
		[Token(Token = "0x6000441")]
		[Address(RVA = "0x2175FA8", Offset = "0x2175FA8", VA = "0x2175FA8")]
		public static extern void core_Mat_push_back_ushort(IntPtr self, ushort v);

		[PreserveSig]
		[Token(Token = "0x6000442")]
		[Address(RVA = "0x219FB70", Offset = "0x219FB70", VA = "0x219FB70")]
		public static extern void core_Mat_push_back_int(IntPtr self, int v);

		[PreserveSig]
		[Token(Token = "0x6000443")]
		[Address(RVA = "0x219FC00", Offset = "0x219FC00", VA = "0x219FC00")]
		public static extern void core_Mat_push_back_float(IntPtr self, float v);

		[PreserveSig]
		[Token(Token = "0x6000444")]
		[Address(RVA = "0x219FC90", Offset = "0x219FC90", VA = "0x219FC90")]
		public static extern void core_Mat_push_back_double(IntPtr self, double v);

		[PreserveSig]
		[Token(Token = "0x6000445")]
		[Address(RVA = "0x219FD20", Offset = "0x219FD20", VA = "0x219FD20")]
		public static extern void core_Mat_push_back_Vec2b(IntPtr self, Vec2b v);

		[PreserveSig]
		[Token(Token = "0x6000446")]
		[Address(RVA = "0x219FDB0", Offset = "0x219FDB0", VA = "0x219FDB0")]
		public static extern void core_Mat_push_back_Vec3b(IntPtr self, Vec3b v);

		[PreserveSig]
		[Token(Token = "0x6000447")]
		[Address(RVA = "0x219FE40", Offset = "0x219FE40", VA = "0x219FE40")]
		public static extern void core_Mat_push_back_Vec4b(IntPtr self, Vec4b v);

		[PreserveSig]
		[Token(Token = "0x6000448")]
		[Address(RVA = "0x219FED0", Offset = "0x219FED0", VA = "0x219FED0")]
		public static extern void core_Mat_push_back_Vec6b(IntPtr self, Vec6b v);

		[PreserveSig]
		[Token(Token = "0x6000449")]
		[Address(RVA = "0x219FF60", Offset = "0x219FF60", VA = "0x219FF60")]
		public static extern void core_Mat_push_back_Vec2s(IntPtr self, Vec2s v);

		[PreserveSig]
		[Token(Token = "0x600044A")]
		[Address(RVA = "0x219FFF0", Offset = "0x219FFF0", VA = "0x219FFF0")]
		public static extern void core_Mat_push_back_Vec3s(IntPtr self, Vec3s v);

		[PreserveSig]
		[Token(Token = "0x600044B")]
		[Address(RVA = "0x21A0080", Offset = "0x21A0080", VA = "0x21A0080")]
		public static extern void core_Mat_push_back_Vec4s(IntPtr self, Vec4s v);

		[PreserveSig]
		[Token(Token = "0x600044C")]
		[Address(RVA = "0x21A0110", Offset = "0x21A0110", VA = "0x21A0110")]
		public static extern void core_Mat_push_back_Vec6s(IntPtr self, Vec6s v);

		[PreserveSig]
		[Token(Token = "0x600044D")]
		[Address(RVA = "0x21A01A8", Offset = "0x21A01A8", VA = "0x21A01A8")]
		public static extern void core_Mat_push_back_Vec2w(IntPtr self, Vec2w v);

		[PreserveSig]
		[Token(Token = "0x600044E")]
		[Address(RVA = "0x21A0238", Offset = "0x21A0238", VA = "0x21A0238")]
		public static extern void core_Mat_push_back_Vec3w(IntPtr self, Vec3w v);

		[PreserveSig]
		[Token(Token = "0x600044F")]
		[Address(RVA = "0x21A02C8", Offset = "0x21A02C8", VA = "0x21A02C8")]
		public static extern void core_Mat_push_back_Vec4w(IntPtr self, Vec4w v);

		[PreserveSig]
		[Token(Token = "0x6000450")]
		[Address(RVA = "0x21A0358", Offset = "0x21A0358", VA = "0x21A0358")]
		public static extern void core_Mat_push_back_Vec6w(IntPtr self, Vec6w v);

		[PreserveSig]
		[Token(Token = "0x6000451")]
		[Address(RVA = "0x21A03F0", Offset = "0x21A03F0", VA = "0x21A03F0")]
		public static extern void core_Mat_push_back_Vec2i(IntPtr self, Vec2i v);

		[PreserveSig]
		[Token(Token = "0x6000452")]
		[Address(RVA = "0x21A0480", Offset = "0x21A0480", VA = "0x21A0480")]
		public static extern void core_Mat_push_back_Vec3i(IntPtr self, Vec3i v);

		[PreserveSig]
		[Token(Token = "0x6000453")]
		[Address(RVA = "0x21A0518", Offset = "0x21A0518", VA = "0x21A0518")]
		public static extern void core_Mat_push_back_Vec4i(IntPtr self, Vec4i v);

		[PreserveSig]
		[Token(Token = "0x6000454")]
		[Address(RVA = "0x21A05AC", Offset = "0x21A05AC", VA = "0x21A05AC")]
		public static extern void core_Mat_push_back_Vec6i(IntPtr self, Vec6i v);

		[PreserveSig]
		[Token(Token = "0x6000455")]
		[Address(RVA = "0x21A064C", Offset = "0x21A064C", VA = "0x21A064C")]
		public static extern void core_Mat_push_back_Vec2f(IntPtr self, Vec2f v);

		[PreserveSig]
		[Token(Token = "0x6000456")]
		[Address(RVA = "0x21A06E4", Offset = "0x21A06E4", VA = "0x21A06E4")]
		public static extern void core_Mat_push_back_Vec3f(IntPtr self, Vec3f v);

		[PreserveSig]
		[Token(Token = "0x6000457")]
		[Address(RVA = "0x21A078C", Offset = "0x21A078C", VA = "0x21A078C")]
		public static extern void core_Mat_push_back_Vec4f(IntPtr self, Vec4f v);

		[PreserveSig]
		[Token(Token = "0x6000458")]
		[Address(RVA = "0x21A0838", Offset = "0x21A0838", VA = "0x21A0838")]
		public static extern void core_Mat_push_back_Vec6f(IntPtr self, Vec6f v);

		[PreserveSig]
		[Token(Token = "0x6000459")]
		[Address(RVA = "0x21A08D8", Offset = "0x21A08D8", VA = "0x21A08D8")]
		public static extern void core_Mat_push_back_Vec2d(IntPtr self, Vec2d v);

		[PreserveSig]
		[Token(Token = "0x600045A")]
		[Address(RVA = "0x21A096C", Offset = "0x21A096C", VA = "0x21A096C")]
		public static extern void core_Mat_push_back_Vec3d(IntPtr self, Vec3d v);

		[PreserveSig]
		[Token(Token = "0x600045B")]
		[Address(RVA = "0x21A0A14", Offset = "0x21A0A14", VA = "0x21A0A14")]
		public static extern void core_Mat_push_back_Vec6d(IntPtr self, Vec6d v);

		[PreserveSig]
		[Token(Token = "0x600045C")]
		[Address(RVA = "0x21A0AB4", Offset = "0x21A0AB4", VA = "0x21A0AB4")]
		public static extern void core_Mat_push_back_Point(IntPtr self, Point v);

		[PreserveSig]
		[Token(Token = "0x600045D")]
		[Address(RVA = "0x216CFC4", Offset = "0x216CFC4", VA = "0x216CFC4")]
		public static extern void core_Mat_push_back_Point2f(IntPtr self, Point2f v);

		[PreserveSig]
		[Token(Token = "0x600045E")]
		[Address(RVA = "0x21A0B44", Offset = "0x21A0B44", VA = "0x21A0B44")]
		public static extern void core_Mat_push_back_Point2d(IntPtr self, Point2d v);

		[PreserveSig]
		[Token(Token = "0x600045F")]
		[Address(RVA = "0x21718DC", Offset = "0x21718DC", VA = "0x21718DC")]
		public static extern void core_Mat_push_back_Point3i(IntPtr self, Point3i v);

		[PreserveSig]
		[Token(Token = "0x6000460")]
		[Address(RVA = "0x2170094", Offset = "0x2170094", VA = "0x2170094")]
		public static extern void core_Mat_push_back_Point3f(IntPtr self, Point3f v);

		[PreserveSig]
		[Token(Token = "0x6000461")]
		[Address(RVA = "0x216E80C", Offset = "0x216E80C", VA = "0x216E80C")]
		public static extern void core_Mat_push_back_Point3d(IntPtr self, Point3d v);

		[PreserveSig]
		[Token(Token = "0x6000462")]
		[Address(RVA = "0x21A0BDC", Offset = "0x21A0BDC", VA = "0x21A0BDC")]
		public static extern void core_Mat_push_back_Size(IntPtr self, Size v);

		[PreserveSig]
		[Token(Token = "0x6000463")]
		[Address(RVA = "0x21A0C6C", Offset = "0x21A0C6C", VA = "0x21A0C6C")]
		public static extern void core_Mat_push_back_Size2f(IntPtr self, Size2f v);

		[PreserveSig]
		[Token(Token = "0x6000464")]
		[Address(RVA = "0x2173118", Offset = "0x2173118", VA = "0x2173118")]
		public static extern void core_Mat_push_back_Rect(IntPtr self, Rect v);

		[PreserveSig]
		[Token(Token = "0x6000465")]
		[Address(RVA = "0x21A0D04", Offset = "0x21A0D04", VA = "0x21A0D04")]
		public static extern void core_Mat_reserve(IntPtr obj, IntPtr sz);

		[PreserveSig]
		[Token(Token = "0x6000466")]
		[Address(RVA = "0x21A0D90", Offset = "0x21A0D90", VA = "0x21A0D90")]
		public static extern void core_Mat_resize1(IntPtr obj, IntPtr sz);

		[PreserveSig]
		[Token(Token = "0x6000467")]
		[Address(RVA = "0x21A0E1C", Offset = "0x21A0E1C", VA = "0x21A0E1C")]
		public static extern void core_Mat_resize2(IntPtr obj, IntPtr sz, Scalar s);

		[PreserveSig]
		[Token(Token = "0x6000468")]
		[Address(RVA = "0x21A0EDC", Offset = "0x21A0EDC", VA = "0x21A0EDC")]
		public static extern void core_Mat_pop_back(IntPtr obj, IntPtr nelems);

		[PreserveSig]
		[Token(Token = "0x6000469")]
		[Address(RVA = "0x21A0F68", Offset = "0x21A0F68", VA = "0x21A0F68")]
		public static extern void core_Mat_forEach_uchar(IntPtr m, MatForeachFunctionByte proc);

		[PreserveSig]
		[Token(Token = "0x600046A")]
		[Address(RVA = "0x21A1000", Offset = "0x21A1000", VA = "0x21A1000")]
		public static extern void core_Mat_forEach_Vec2b(IntPtr m, MatForeachFunctionVec2b proc);

		[PreserveSig]
		[Token(Token = "0x600046B")]
		[Address(RVA = "0x21A1098", Offset = "0x21A1098", VA = "0x21A1098")]
		public static extern void core_Mat_forEach_Vec3b(IntPtr m, MatForeachFunctionVec3b proc);

		[PreserveSig]
		[Token(Token = "0x600046C")]
		[Address(RVA = "0x21A1130", Offset = "0x21A1130", VA = "0x21A1130")]
		public static extern void core_Mat_forEach_Vec4b(IntPtr m, MatForeachFunctionVec4b proc);

		[PreserveSig]
		[Token(Token = "0x600046D")]
		[Address(RVA = "0x21A11C8", Offset = "0x21A11C8", VA = "0x21A11C8")]
		public static extern void core_Mat_forEach_Vec6b(IntPtr m, MatForeachFunctionVec6b proc);

		[PreserveSig]
		[Token(Token = "0x600046E")]
		[Address(RVA = "0x21A1260", Offset = "0x21A1260", VA = "0x21A1260")]
		public static extern void core_Mat_forEach_short(IntPtr m, MatForeachFunctionInt16 proc);

		[PreserveSig]
		[Token(Token = "0x600046F")]
		[Address(RVA = "0x21A12F8", Offset = "0x21A12F8", VA = "0x21A12F8")]
		public static extern void core_Mat_forEach_Vec2s(IntPtr m, MatForeachFunctionVec2s proc);

		[PreserveSig]
		[Token(Token = "0x6000470")]
		[Address(RVA = "0x21A1390", Offset = "0x21A1390", VA = "0x21A1390")]
		public static extern void core_Mat_forEach_Vec3s(IntPtr m, MatForeachFunctionVec3s proc);

		[PreserveSig]
		[Token(Token = "0x6000471")]
		[Address(RVA = "0x21A1428", Offset = "0x21A1428", VA = "0x21A1428")]
		public static extern void core_Mat_forEach_Vec4s(IntPtr m, MatForeachFunctionVec4s proc);

		[PreserveSig]
		[Token(Token = "0x6000472")]
		[Address(RVA = "0x21A14C0", Offset = "0x21A14C0", VA = "0x21A14C0")]
		public static extern void core_Mat_forEach_Vec6s(IntPtr m, MatForeachFunctionVec6s proc);

		[PreserveSig]
		[Token(Token = "0x6000473")]
		[Address(RVA = "0x21A1558", Offset = "0x21A1558", VA = "0x21A1558")]
		public static extern void core_Mat_forEach_int(IntPtr m, MatForeachFunctionInt32 proc);

		[PreserveSig]
		[Token(Token = "0x6000474")]
		[Address(RVA = "0x21A15F0", Offset = "0x21A15F0", VA = "0x21A15F0")]
		public static extern void core_Mat_forEach_Vec2i(IntPtr m, MatForeachFunctionVec2i proc);

		[PreserveSig]
		[Token(Token = "0x6000475")]
		[Address(RVA = "0x21A1688", Offset = "0x21A1688", VA = "0x21A1688")]
		public static extern void core_Mat_forEach_Vec3i(IntPtr m, MatForeachFunctionVec3i proc);

		[PreserveSig]
		[Token(Token = "0x6000476")]
		[Address(RVA = "0x21A1720", Offset = "0x21A1720", VA = "0x21A1720")]
		public static extern void core_Mat_forEach_Vec4i(IntPtr m, MatForeachFunctionVec4i proc);

		[PreserveSig]
		[Token(Token = "0x6000477")]
		[Address(RVA = "0x21A17B8", Offset = "0x21A17B8", VA = "0x21A17B8")]
		public static extern void core_Mat_forEach_Vec6i(IntPtr m, MatForeachFunctionVec6i proc);

		[PreserveSig]
		[Token(Token = "0x6000478")]
		[Address(RVA = "0x21A1850", Offset = "0x21A1850", VA = "0x21A1850")]
		public static extern void core_Mat_forEach_float(IntPtr m, MatForeachFunctionFloat proc);

		[PreserveSig]
		[Token(Token = "0x6000479")]
		[Address(RVA = "0x21A18E8", Offset = "0x21A18E8", VA = "0x21A18E8")]
		public static extern void core_Mat_forEach_Vec2f(IntPtr m, MatForeachFunctionVec2f proc);

		[PreserveSig]
		[Token(Token = "0x600047A")]
		[Address(RVA = "0x21A1980", Offset = "0x21A1980", VA = "0x21A1980")]
		public static extern void core_Mat_forEach_Vec3f(IntPtr m, MatForeachFunctionVec3f proc);

		[PreserveSig]
		[Token(Token = "0x600047B")]
		[Address(RVA = "0x21A1A18", Offset = "0x21A1A18", VA = "0x21A1A18")]
		public static extern void core_Mat_forEach_Vec4f(IntPtr m, MatForeachFunctionVec4f proc);

		[PreserveSig]
		[Token(Token = "0x600047C")]
		[Address(RVA = "0x21A1AB0", Offset = "0x21A1AB0", VA = "0x21A1AB0")]
		public static extern void core_Mat_forEach_Vec6f(IntPtr m, MatForeachFunctionVec6f proc);

		[PreserveSig]
		[Token(Token = "0x600047D")]
		[Address(RVA = "0x21A1B48", Offset = "0x21A1B48", VA = "0x21A1B48")]
		public static extern void core_Mat_forEach_double(IntPtr m, MatForeachFunctionDouble proc);

		[PreserveSig]
		[Token(Token = "0x600047E")]
		[Address(RVA = "0x21A1BE0", Offset = "0x21A1BE0", VA = "0x21A1BE0")]
		public static extern void core_Mat_forEach_Vec2d(IntPtr m, MatForeachFunctionVec2d proc);

		[PreserveSig]
		[Token(Token = "0x600047F")]
		[Address(RVA = "0x21A1C78", Offset = "0x21A1C78", VA = "0x21A1C78")]
		public static extern void core_Mat_forEach_Vec3d(IntPtr m, MatForeachFunctionVec3d proc);

		[PreserveSig]
		[Token(Token = "0x6000480")]
		[Address(RVA = "0x21A1D10", Offset = "0x21A1D10", VA = "0x21A1D10")]
		public static extern void core_Mat_forEach_Vec4d(IntPtr m, MatForeachFunctionVec4d proc);

		[PreserveSig]
		[Token(Token = "0x6000481")]
		[Address(RVA = "0x21A1DA8", Offset = "0x21A1DA8", VA = "0x21A1DA8")]
		public static extern void core_Mat_forEach_Vec6d(IntPtr m, MatForeachFunctionVec6d proc);

		[PreserveSig]
		[Token(Token = "0x6000482")]
		[Address(RVA = "0x21A1E40", Offset = "0x21A1E40", VA = "0x21A1E40")]
		public static extern IntPtr core_MatExpr_new();

		[PreserveSig]
		[Token(Token = "0x6000483")]
		[Address(RVA = "0x21A1EB0", Offset = "0x21A1EB0", VA = "0x21A1EB0")]
		public static extern IntPtr core_MatExpr_new(IntPtr mat);

		[PreserveSig]
		[Token(Token = "0x6000484")]
		[Address(RVA = "0x21A1F2C", Offset = "0x21A1F2C", VA = "0x21A1F2C")]
		public static extern void core_MatExpr_delete(IntPtr expr);

		[PreserveSig]
		[Token(Token = "0x6000485")]
		[Address(RVA = "0x21A1FAC", Offset = "0x21A1FAC", VA = "0x21A1FAC")]
		public static extern IntPtr core_MatExpr_toMat(IntPtr expr);

		[PreserveSig]
		[Token(Token = "0x6000486")]
		[Address(RVA = "0x21A202C", Offset = "0x21A202C", VA = "0x21A202C")]
		public static extern IntPtr core_operatorUnaryMinus_MatExpr(IntPtr e);

		[PreserveSig]
		[Token(Token = "0x6000487")]
		[Address(RVA = "0x21A20AC", Offset = "0x21A20AC", VA = "0x21A20AC")]
		public static extern IntPtr core_operatorUnaryNot_MatExpr(IntPtr e);

		[PreserveSig]
		[Token(Token = "0x6000488")]
		[Address(RVA = "0x21A212C", Offset = "0x21A212C", VA = "0x21A212C")]
		public static extern IntPtr core_operatorAdd_MatExprMat(IntPtr e, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x6000489")]
		[Address(RVA = "0x21A21BC", Offset = "0x21A21BC", VA = "0x21A21BC")]
		public static extern IntPtr core_operatorAdd_MatMatExpr(IntPtr m, IntPtr e);

		[PreserveSig]
		[Token(Token = "0x600048A")]
		[Address(RVA = "0x21A224C", Offset = "0x21A224C", VA = "0x21A224C")]
		public static extern IntPtr core_operatorAdd_MatExprScalar(IntPtr e, Scalar s);

		[PreserveSig]
		[Token(Token = "0x600048B")]
		[Address(RVA = "0x21A22FC", Offset = "0x21A22FC", VA = "0x21A22FC")]
		public static extern IntPtr core_operatorAdd_ScalarMatExpr(Scalar s, IntPtr e);

		[PreserveSig]
		[Token(Token = "0x600048C")]
		[Address(RVA = "0x21A23AC", Offset = "0x21A23AC", VA = "0x21A23AC")]
		public static extern IntPtr core_operatorAdd_MatExprMatExpr(IntPtr e1, IntPtr e2);

		[PreserveSig]
		[Token(Token = "0x600048D")]
		[Address(RVA = "0x21A243C", Offset = "0x21A243C", VA = "0x21A243C")]
		public static extern IntPtr core_operatorSubtract_MatExprMat(IntPtr e, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x600048E")]
		[Address(RVA = "0x21A24CC", Offset = "0x21A24CC", VA = "0x21A24CC")]
		public static extern IntPtr core_operatorSubtract_MatMatExpr(IntPtr m, IntPtr e);

		[PreserveSig]
		[Token(Token = "0x600048F")]
		[Address(RVA = "0x21A255C", Offset = "0x21A255C", VA = "0x21A255C")]
		public static extern IntPtr core_operatorSubtract_MatExprScalar(IntPtr e, Scalar s);

		[PreserveSig]
		[Token(Token = "0x6000490")]
		[Address(RVA = "0x21A260C", Offset = "0x21A260C", VA = "0x21A260C")]
		public static extern IntPtr core_operatorSubtract_ScalarMatExpr(Scalar s, IntPtr e);

		[PreserveSig]
		[Token(Token = "0x6000491")]
		[Address(RVA = "0x21A26BC", Offset = "0x21A26BC", VA = "0x21A26BC")]
		public static extern IntPtr core_operatorSubtract_MatExprMatExpr(IntPtr e1, IntPtr e2);

		[PreserveSig]
		[Token(Token = "0x6000492")]
		[Address(RVA = "0x21A274C", Offset = "0x21A274C", VA = "0x21A274C")]
		public static extern IntPtr core_operatorMultiply_MatExprMat(IntPtr e, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x6000493")]
		[Address(RVA = "0x21A27DC", Offset = "0x21A27DC", VA = "0x21A27DC")]
		public static extern IntPtr core_operatorMultiply_MatMatExpr(IntPtr m, IntPtr e);

		[PreserveSig]
		[Token(Token = "0x6000494")]
		[Address(RVA = "0x21A286C", Offset = "0x21A286C", VA = "0x21A286C")]
		public static extern IntPtr core_operatorMultiply_MatExprDouble(IntPtr e, double s);

		[PreserveSig]
		[Token(Token = "0x6000495")]
		[Address(RVA = "0x21A28FC", Offset = "0x21A28FC", VA = "0x21A28FC")]
		public static extern IntPtr core_operatorMultiply_DoubleMatExpr(double s, IntPtr e);

		[PreserveSig]
		[Token(Token = "0x6000496")]
		[Address(RVA = "0x21A298C", Offset = "0x21A298C", VA = "0x21A298C")]
		public static extern IntPtr core_operatorMultiply_MatExprMatExpr(IntPtr e1, IntPtr e2);

		[PreserveSig]
		[Token(Token = "0x6000497")]
		[Address(RVA = "0x21A2A1C", Offset = "0x21A2A1C", VA = "0x21A2A1C")]
		public static extern IntPtr core_operatorDivide_MatExprMat(IntPtr e, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x6000498")]
		[Address(RVA = "0x21A2AAC", Offset = "0x21A2AAC", VA = "0x21A2AAC")]
		public static extern IntPtr core_operatorDivide_MatMatExpr(IntPtr m, IntPtr e);

		[PreserveSig]
		[Token(Token = "0x6000499")]
		[Address(RVA = "0x21A2B3C", Offset = "0x21A2B3C", VA = "0x21A2B3C")]
		public static extern IntPtr core_operatorDivide_MatExprDouble(IntPtr e, double s);

		[PreserveSig]
		[Token(Token = "0x600049A")]
		[Address(RVA = "0x21A2BCC", Offset = "0x21A2BCC", VA = "0x21A2BCC")]
		public static extern IntPtr core_operatorDivide_DoubleMatExpr(double s, IntPtr e);

		[PreserveSig]
		[Token(Token = "0x600049B")]
		[Address(RVA = "0x21A2C5C", Offset = "0x21A2C5C", VA = "0x21A2C5C")]
		public static extern IntPtr core_operatorDivide_MatExprMatExpr(IntPtr e1, IntPtr e2);

		[PreserveSig]
		[Token(Token = "0x600049C")]
		[Address(RVA = "0x21A2CEC", Offset = "0x21A2CEC", VA = "0x21A2CEC")]
		public static extern IntPtr core_MatExpr_row(IntPtr self, int y);

		[PreserveSig]
		[Token(Token = "0x600049D")]
		[Address(RVA = "0x21A2D7C", Offset = "0x21A2D7C", VA = "0x21A2D7C")]
		public static extern IntPtr core_MatExpr_col(IntPtr self, int x);

		[PreserveSig]
		[Token(Token = "0x600049E")]
		[Address(RVA = "0x21A2E0C", Offset = "0x21A2E0C", VA = "0x21A2E0C")]
		public static extern IntPtr core_MatExpr_diag(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x600049F")]
		[Address(RVA = "0x21A2E8C", Offset = "0x21A2E8C", VA = "0x21A2E8C")]
		public static extern IntPtr core_MatExpr_diag(IntPtr self, int d);

		[PreserveSig]
		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x21A2F1C", Offset = "0x21A2F1C", VA = "0x21A2F1C")]
		public static extern IntPtr core_MatExpr_submat(IntPtr self, int rowStart, int rowEnd, int colStart, int colEnd);

		[PreserveSig]
		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x21A2FCC", Offset = "0x21A2FCC", VA = "0x21A2FCC")]
		public static extern IntPtr core_MatExpr_cross(IntPtr self, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x21A305C", Offset = "0x21A305C", VA = "0x21A305C")]
		public static extern double core_MatExpr_dot(IntPtr self, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x21A30E8", Offset = "0x21A30E8", VA = "0x21A30E8")]
		public static extern IntPtr core_MatExpr_t(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x21A3168", Offset = "0x21A3168", VA = "0x21A3168")]
		public static extern IntPtr core_MatExpr_inv(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x21A31E4", Offset = "0x21A31E4", VA = "0x21A31E4")]
		public static extern IntPtr core_MatExpr_inv(IntPtr self, int method);

		[PreserveSig]
		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x21A3270", Offset = "0x21A3270", VA = "0x21A3270")]
		public static extern IntPtr core_MatExpr_mul_toMatExpr(IntPtr self, IntPtr e, double scale);

		[PreserveSig]
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x21A3310", Offset = "0x21A3310", VA = "0x21A3310")]
		public static extern IntPtr core_MatExpr_mul_toMat(IntPtr self, IntPtr m, double scale);

		[PreserveSig]
		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x21A33B0", Offset = "0x21A33B0", VA = "0x21A33B0")]
		public static extern Size core_MatExpr_size(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x21A342C", Offset = "0x21A342C", VA = "0x21A342C")]
		public static extern int core_MatExpr_type(IntPtr self);

		[PreserveSig]
		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x21A34A8", Offset = "0x21A34A8", VA = "0x21A34A8")]
		public static extern IntPtr core_abs_MatExpr(IntPtr e);

		[PreserveSig]
		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x21A3528", Offset = "0x21A3528", VA = "0x21A3528")]
		public static extern ulong core_SparseMat_sizeof();

		[PreserveSig]
		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x21A359C", Offset = "0x21A359C", VA = "0x21A359C")]
		public static extern IntPtr core_SparseMat_new1();

		[PreserveSig]
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x21A3610", Offset = "0x21A3610", VA = "0x21A3610")]
		public static extern IntPtr core_SparseMat_new2(int dims, int[] sizes, int type);

		[PreserveSig]
		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x21A36B0", Offset = "0x21A36B0", VA = "0x21A36B0")]
		public static extern IntPtr core_SparseMat_new3(IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x21A3730", Offset = "0x21A3730", VA = "0x21A3730")]
		public static extern void core_SparseMat_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x21A37B0", Offset = "0x21A37B0", VA = "0x21A37B0")]
		public static extern void core_SparseMat_operatorAssign_SparseMat(IntPtr obj, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x21A3840", Offset = "0x21A3840", VA = "0x21A3840")]
		public static extern void core_SparseMat_operatorAssign_Mat(IntPtr obj, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x21A38D0", Offset = "0x21A38D0", VA = "0x21A38D0")]
		public static extern IntPtr core_SparseMat_clone(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x21A3950", Offset = "0x21A3950", VA = "0x21A3950")]
		public static extern void core_SparseMat_copyTo_SparseMat(IntPtr obj, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x21A39E0", Offset = "0x21A39E0", VA = "0x21A39E0")]
		public static extern void core_SparseMat_copyTo_Mat(IntPtr obj, IntPtr m);

		[PreserveSig]
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x21A3A70", Offset = "0x21A3A70", VA = "0x21A3A70")]
		public static extern void core_SparseMat_convertTo_SparseMat(IntPtr obj, IntPtr m, int rtype, double alpha);

		[PreserveSig]
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x21A3B18", Offset = "0x21A3B18", VA = "0x21A3B18")]
		public static extern void core_SparseMat_convertTo_Mat(IntPtr obj, IntPtr m, int rtype, double alpha, double beta);

		[PreserveSig]
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x21A3BC8", Offset = "0x21A3BC8", VA = "0x21A3BC8")]
		public static extern void core_SparseMat_assignTo(IntPtr obj, IntPtr m, int type);

		[PreserveSig]
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x21A3C60", Offset = "0x21A3C60", VA = "0x21A3C60")]
		public static extern void core_SparseMat_create(IntPtr obj, int dims, int[] sizes, int type);

		[PreserveSig]
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x21A3D10", Offset = "0x21A3D10", VA = "0x21A3D10")]
		public static extern void core_SparseMat_clear(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x21A3D90", Offset = "0x21A3D90", VA = "0x21A3D90")]
		public static extern void core_SparseMat_addref(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x21A3E10", Offset = "0x21A3E10", VA = "0x21A3E10")]
		public static extern void core_SparseMat_release(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x21A3E90", Offset = "0x21A3E90", VA = "0x21A3E90")]
		public static extern int core_SparseMat_elemSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x21A3F10", Offset = "0x21A3F10", VA = "0x21A3F10")]
		public static extern int core_SparseMat_elemSize1(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x21A3F90", Offset = "0x21A3F90", VA = "0x21A3F90")]
		public static extern int core_SparseMat_type(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x21A4010", Offset = "0x21A4010", VA = "0x21A4010")]
		public static extern int core_SparseMat_depth(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x21A4090", Offset = "0x21A4090", VA = "0x21A4090")]
		public static extern int core_SparseMat_channels(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x21A4110", Offset = "0x21A4110", VA = "0x21A4110")]
		public static extern IntPtr core_SparseMat_size1(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x21A4190", Offset = "0x21A4190", VA = "0x21A4190")]
		public static extern int core_SparseMat_size2(IntPtr obj, int i);

		[PreserveSig]
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x21A4220", Offset = "0x21A4220", VA = "0x21A4220")]
		public static extern int core_SparseMat_dims(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x21A42A0", Offset = "0x21A42A0", VA = "0x21A42A0")]
		public static extern IntPtr core_SparseMat_nzcount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x21A4320", Offset = "0x21A4320", VA = "0x21A4320")]
		public static extern IntPtr core_SparseMat_hash_1d(IntPtr obj, int i0);

		[PreserveSig]
		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x21A43B0", Offset = "0x21A43B0", VA = "0x21A43B0")]
		public static extern IntPtr core_SparseMat_hash_2d(IntPtr obj, int i0, int i1);

		[PreserveSig]
		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x21A4448", Offset = "0x21A4448", VA = "0x21A4448")]
		public static extern IntPtr core_SparseMat_hash_3d(IntPtr obj, int i0, int i1, int i2);

		[PreserveSig]
		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x21A44F0", Offset = "0x21A44F0", VA = "0x21A44F0")]
		public static extern IntPtr core_SparseMat_hash_nd(IntPtr obj, int[] idx);

		[PreserveSig]
		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x21A4588", Offset = "0x21A4588", VA = "0x21A4588")]
		public static extern IntPtr core_SparseMat_ptr_1d(IntPtr obj, int i0, int createMissing, ref ulong hashval);

		[PreserveSig]
		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x21A4630", Offset = "0x21A4630", VA = "0x21A4630")]
		public static extern IntPtr core_SparseMat_ptr_1d(IntPtr obj, int i0, int createMissing, IntPtr hashval);

		[PreserveSig]
		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x21A46D8", Offset = "0x21A46D8", VA = "0x21A46D8")]
		public static extern IntPtr core_SparseMat_ptr_2d(IntPtr obj, int i0, int i1, int createMissing, ref ulong hashval);

		[PreserveSig]
		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x21A4788", Offset = "0x21A4788", VA = "0x21A4788")]
		public static extern IntPtr core_SparseMat_ptr_2d(IntPtr obj, int i0, int i1, int createMissing, IntPtr hashval);

		[PreserveSig]
		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x21A4838", Offset = "0x21A4838", VA = "0x21A4838")]
		public static extern IntPtr core_SparseMat_ptr_3d(IntPtr obj, int i0, int i1, int i2, int createMissing, ref ulong hashval);

		[PreserveSig]
		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x21A48F8", Offset = "0x21A48F8", VA = "0x21A48F8")]
		public static extern IntPtr core_SparseMat_ptr_3d(IntPtr obj, int i0, int i1, int i2, int createMissing, IntPtr hashval);

		[PreserveSig]
		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x21A49B8", Offset = "0x21A49B8", VA = "0x21A49B8")]
		public static extern IntPtr core_SparseMat_ptr_nd(IntPtr obj, int[] idx, int createMissing, ref ulong hashval);

		[PreserveSig]
		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x21A4A68", Offset = "0x21A4A68", VA = "0x21A4A68")]
		public static extern IntPtr core_SparseMat_ptr_nd(IntPtr obj, int[] idx, int createMissing, IntPtr hashval);

		[PreserveSig]
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x21A4B18", Offset = "0x21A4B18", VA = "0x21A4B18")]
		public static extern IntPtr face_createEigenFaceRecognizer(int numComponents, double threshold);

		[PreserveSig]
		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x21A4BAC", Offset = "0x21A4BAC", VA = "0x21A4BAC")]
		public static extern IntPtr face_createFisherFaceRecognizer(int numComponents, double threshold);

		[PreserveSig]
		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x21A4C40", Offset = "0x21A4C40", VA = "0x21A4C40")]
		public static extern IntPtr face_createLBPHFaceRecognizer(int radius, int neighbors, int gridX, int gridY, double threshold);

		[PreserveSig]
		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x21A4CFC", Offset = "0x21A4CFC", VA = "0x21A4CFC")]
		public static extern int face_BasicFaceRecognizer_getNumComponents(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x21A4D80", Offset = "0x21A4D80", VA = "0x21A4D80")]
		public static extern void face_BasicFaceRecognizer_setNumComponents(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x21A4E14", Offset = "0x21A4E14", VA = "0x21A4E14")]
		public static extern double face_BasicFaceRecognizer_getThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x21A4E98", Offset = "0x21A4E98", VA = "0x21A4E98")]
		public static extern void face_BasicFaceRecognizer_setThreshold(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x21A4F2C", Offset = "0x21A4F2C", VA = "0x21A4F2C")]
		public static extern void face_BasicFaceRecognizer_getProjections(IntPtr obj, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x21A4FC0", Offset = "0x21A4FC0", VA = "0x21A4FC0")]
		public static extern void face_BasicFaceRecognizer_getLabels(IntPtr obj, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x21A5054", Offset = "0x21A5054", VA = "0x21A5054")]
		public static extern void face_BasicFaceRecognizer_getEigenValues(IntPtr obj, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x21A50E8", Offset = "0x21A50E8", VA = "0x21A50E8")]
		public static extern void face_BasicFaceRecognizer_getEigenVectors(IntPtr obj, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x21A517C", Offset = "0x21A517C", VA = "0x21A517C")]
		public static extern void face_BasicFaceRecognizer_getMean(IntPtr obj, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x21A5210", Offset = "0x21A5210", VA = "0x21A5210")]
		public static extern IntPtr face_Ptr_BasicFaceRecognizer_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x21A5294", Offset = "0x21A5294", VA = "0x21A5294")]
		public static extern void face_Ptr_BasicFaceRecognizer_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x21A5318", Offset = "0x21A5318", VA = "0x21A5318")]
		public static extern void face_FaceRecognizer_train(IntPtr obj, IntPtr[] src, int srcLength, int[] labels, int labelsLength);

		[PreserveSig]
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x21A53DC", Offset = "0x21A53DC", VA = "0x21A53DC")]
		public static extern void face_FaceRecognizer_update(IntPtr obj, IntPtr[] src, int srcLength, int[] labels, int labelsLength);

		[PreserveSig]
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x21A54A0", Offset = "0x21A54A0", VA = "0x21A54A0")]
		public static extern int face_FaceRecognizer_predict1(IntPtr obj, IntPtr src);

		[PreserveSig]
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x21A5534", Offset = "0x21A5534", VA = "0x21A5534")]
		public static extern void face_FaceRecognizer_predict2(IntPtr obj, IntPtr src, out int label, out double confidence);

		[PreserveSig]
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x21A55E0", Offset = "0x21A55E0", VA = "0x21A55E0")]
		public static extern void face_FaceRecognizer_save1(IntPtr obj, string filename);

		[PreserveSig]
		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x21A5688", Offset = "0x21A5688", VA = "0x21A5688")]
		public static extern void face_FaceRecognizer_load1(IntPtr obj, string filename);

		[PreserveSig]
		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x21A5730", Offset = "0x21A5730", VA = "0x21A5730")]
		public static extern void face_FaceRecognizer_save2(IntPtr obj, IntPtr fs);

		[PreserveSig]
		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x21A57C4", Offset = "0x21A57C4", VA = "0x21A57C4")]
		public static extern void face_FaceRecognizer_load2(IntPtr obj, IntPtr fs);

		[PreserveSig]
		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x21A5858", Offset = "0x21A5858", VA = "0x21A5858")]
		public static extern void face_FaceRecognizer_setLabelInfo(IntPtr obj, int label, string strInfo);

		[PreserveSig]
		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x21A5908", Offset = "0x21A5908", VA = "0x21A5908")]
		public static extern void face_FaceRecognizer_getLabelInfo(IntPtr obj, int label, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x21A59A4", Offset = "0x21A59A4", VA = "0x21A59A4")]
		public static extern void face_FaceRecognizer_getLabelsByString(IntPtr obj, string str, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x21A5A54", Offset = "0x21A5A54", VA = "0x21A5A54")]
		public static extern double face_FaceRecognizer_getThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x21A5AD8", Offset = "0x21A5AD8", VA = "0x21A5AD8")]
		public static extern void face_FaceRecognizer_setThreshold(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x21A5B6C", Offset = "0x21A5B6C", VA = "0x21A5B6C")]
		public static extern int face_LBPHFaceRecognizer_getGridX(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x21A5BF0", Offset = "0x21A5BF0", VA = "0x21A5BF0")]
		public static extern void face_LBPHFaceRecognizer_setGridX(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x21A5C84", Offset = "0x21A5C84", VA = "0x21A5C84")]
		public static extern int face_LBPHFaceRecognizer_getGridY(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x21A5D08", Offset = "0x21A5D08", VA = "0x21A5D08")]
		public static extern void face_LBPHFaceRecognizer_setGridY(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x21A5D9C", Offset = "0x21A5D9C", VA = "0x21A5D9C")]
		public static extern int face_LBPHFaceRecognizer_getRadius(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x21A5E20", Offset = "0x21A5E20", VA = "0x21A5E20")]
		public static extern void face_LBPHFaceRecognizer_setRadius(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x21A5EB4", Offset = "0x21A5EB4", VA = "0x21A5EB4")]
		public static extern int face_LBPHFaceRecognizer_getNeighbors(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x21A5F38", Offset = "0x21A5F38", VA = "0x21A5F38")]
		public static extern void face_LBPHFaceRecognizer_setNeighbors(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x21A5FCC", Offset = "0x21A5FCC", VA = "0x21A5FCC")]
		public static extern double face_LBPHFaceRecognizer_getThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x21A6050", Offset = "0x21A6050", VA = "0x21A6050")]
		public static extern void face_LBPHFaceRecognizer_setThreshold(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x21A60E4", Offset = "0x21A60E4", VA = "0x21A60E4")]
		public static extern void face_LBPHFaceRecognizer_getHistograms(IntPtr obj, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x21A6178", Offset = "0x21A6178", VA = "0x21A6178")]
		public static extern void face_LBPHFaceRecognizer_getLabels(IntPtr obj, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x21A620C", Offset = "0x21A620C", VA = "0x21A620C")]
		public static extern IntPtr face_Ptr_LBPHFaceRecognizer_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x21A6290", Offset = "0x21A6290", VA = "0x21A6290")]
		public static extern void face_Ptr_LBPHFaceRecognizer_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x21A6314", Offset = "0x21A6314", VA = "0x21A6314")]
		public static extern void features2d_drawKeypoints(IntPtr image, KeyPoint[] keypoints, int keypointsLength, IntPtr outImage, Scalar color, int flags);

		[PreserveSig]
		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x21A63FC", Offset = "0x21A63FC", VA = "0x21A63FC")]
		public static extern void features2d_drawMatches1(IntPtr img1, KeyPoint[] keypoints1, int keypoints1Length, IntPtr img2, KeyPoint[] keypoints2, int keypoints2Length, DMatch[] matches1to2, int matches1to2Length, IntPtr outImg, Scalar matchColor, Scalar singlePointColor, byte[] matchesMask, int matchesMaskLength, int flags);

		[PreserveSig]
		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x21A657C", Offset = "0x21A657C", VA = "0x21A657C")]
		public static extern void features2d_drawMatches2(IntPtr img1, KeyPoint[] keypoints1, int keypoints1Length, IntPtr img2, KeyPoint[] keypoints2, int keypoints2Length, IntPtr[] matches1to2, int matches1to2Size1, int[] matches1to2Size2, IntPtr outImg, Scalar matchColor, Scalar singlePointColor, IntPtr[] matchesMask, int matchesMaskSize1, int[] matchesMaskSize2, int flags);

		[PreserveSig]
		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x21A6734", Offset = "0x21A6734", VA = "0x21A6734")]
		public static extern void features2d_evaluateFeatureDetector(IntPtr img1, IntPtr img2, IntPtr H1to2, IntPtr keypoints1, IntPtr keypoints2, out float repeatability, out int correspCount);

		[PreserveSig]
		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x21A67FC", Offset = "0x21A67FC", VA = "0x21A67FC")]
		public static extern void features2d_computeRecallPrecisionCurve(IntPtr[] matches1to2, int matches1to2Size1, int[] matches1to2Size2, IntPtr[] correctMatches1to2Mask, int correctMatches1to2MaskSize1, int[] correctMatches1to2MaskSize2, IntPtr recallPrecisionCurve);

		[PreserveSig]
		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x21A68E4", Offset = "0x21A68E4", VA = "0x21A68E4")]
		public static extern float features2d_getRecall(Point2f[] recallPrecisionCurve, int recallPrecisionCurveSize, float l_precision);

		[PreserveSig]
		[Token(Token = "0x6000500")]
		[Address(RVA = "0x21A698C", Offset = "0x21A698C", VA = "0x21A698C")]
		public static extern int features2d_getNearestPoint(Point2f[] recallPrecisionCurve, int recallPrecisionCurveSize, float l_precision);

		[PreserveSig]
		[Token(Token = "0x6000501")]
		[Address(RVA = "0x21A6A34", Offset = "0x21A6A34", VA = "0x21A6A34")]
		public static extern IntPtr features2d_AKAZE_create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves, int nOctaveLayers, int diffusivity);

		[PreserveSig]
		[Token(Token = "0x6000502")]
		[Address(RVA = "0x21A6B04", Offset = "0x21A6B04", VA = "0x21A6B04")]
		public static extern void features2d_Ptr_AKAZE_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000503")]
		[Address(RVA = "0x21A6B84", Offset = "0x21A6B84", VA = "0x21A6B84")]
		public static extern IntPtr features2d_Ptr_AKAZE_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000504")]
		[Address(RVA = "0x21A6C04", Offset = "0x21A6C04", VA = "0x21A6C04")]
		public static extern void features2d_AKAZE_setDescriptorType(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000505")]
		[Address(RVA = "0x21A6C94", Offset = "0x21A6C94", VA = "0x21A6C94")]
		public static extern int features2d_AKAZE_getDescriptorType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000506")]
		[Address(RVA = "0x21A6D14", Offset = "0x21A6D14", VA = "0x21A6D14")]
		public static extern void features2d_AKAZE_setDescriptorSize(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000507")]
		[Address(RVA = "0x21A6DA4", Offset = "0x21A6DA4", VA = "0x21A6DA4")]
		public static extern int features2d_AKAZE_getDescriptorSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000508")]
		[Address(RVA = "0x21A6E24", Offset = "0x21A6E24", VA = "0x21A6E24")]
		public static extern void features2d_AKAZE_setDescriptorChannels(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000509")]
		[Address(RVA = "0x21A6EB4", Offset = "0x21A6EB4", VA = "0x21A6EB4")]
		public static extern int features2d_AKAZE_getDescriptorChannels(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600050A")]
		[Address(RVA = "0x21A6F34", Offset = "0x21A6F34", VA = "0x21A6F34")]
		public static extern void features2d_AKAZE_setThreshold(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x600050B")]
		[Address(RVA = "0x21A6FC4", Offset = "0x21A6FC4", VA = "0x21A6FC4")]
		public static extern double features2d_AKAZE_getThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600050C")]
		[Address(RVA = "0x21A7044", Offset = "0x21A7044", VA = "0x21A7044")]
		public static extern void features2d_AKAZE_setNOctaves(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600050D")]
		[Address(RVA = "0x21A70D4", Offset = "0x21A70D4", VA = "0x21A70D4")]
		public static extern int features2d_AKAZE_getNOctaves(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600050E")]
		[Address(RVA = "0x21A7154", Offset = "0x21A7154", VA = "0x21A7154")]
		public static extern void features2d_AKAZE_setNOctaveLayers(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600050F")]
		[Address(RVA = "0x21A71E4", Offset = "0x21A71E4", VA = "0x21A71E4")]
		public static extern int features2d_AKAZE_getNOctaveLayers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000510")]
		[Address(RVA = "0x21A7264", Offset = "0x21A7264", VA = "0x21A7264")]
		public static extern void features2d_AKAZE_setDiffusivity(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000511")]
		[Address(RVA = "0x21A72F4", Offset = "0x21A72F4", VA = "0x21A72F4")]
		public static extern int features2d_AKAZE_getDiffusivity(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000512")]
		[Address(RVA = "0x21A7374", Offset = "0x21A7374", VA = "0x21A7374")]
		public static extern void features2d_AGAST(IntPtr image, IntPtr keypoints, int threshold, int nonmaxSuppression, int type);

		[PreserveSig]
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x21A7424", Offset = "0x21A7424", VA = "0x21A7424")]
		public static extern IntPtr features2d_AgastFeatureDetector_create(int threshold, int nonmaxSuppression, int type);

		[PreserveSig]
		[Token(Token = "0x6000514")]
		[Address(RVA = "0x21A74BC", Offset = "0x21A74BC", VA = "0x21A74BC")]
		public static extern void features2d_Ptr_AgastFeatureDetector_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000515")]
		[Address(RVA = "0x21A753C", Offset = "0x21A753C", VA = "0x21A753C")]
		public static extern IntPtr features2d_Ptr_AgastFeatureDetector_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000516")]
		[Address(RVA = "0x21A75BC", Offset = "0x21A75BC", VA = "0x21A75BC")]
		public static extern void features2d_AgastFeatureDetector_setThreshold(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000517")]
		[Address(RVA = "0x21A764C", Offset = "0x21A764C", VA = "0x21A764C")]
		public static extern int features2d_AgastFeatureDetector_getThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000518")]
		[Address(RVA = "0x21A76CC", Offset = "0x21A76CC", VA = "0x21A76CC")]
		public static extern void features2d_AgastFeatureDetector_setNonmaxSuppression(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x21A775C", Offset = "0x21A775C", VA = "0x21A775C")]
		public static extern int features2d_AgastFeatureDetector_getNonmaxSuppression(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600051A")]
		[Address(RVA = "0x21A77DC", Offset = "0x21A77DC", VA = "0x21A77DC")]
		public static extern void features2d_AgastFeatureDetector_setType(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600051B")]
		[Address(RVA = "0x21A786C", Offset = "0x21A786C", VA = "0x21A786C")]
		public static extern int features2d_AgastFeatureDetector_getType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600051C")]
		[Address(RVA = "0x21A78EC", Offset = "0x21A78EC", VA = "0x21A78EC")]
		public static extern IntPtr features2d_BRISK_create1(int thresh, int octaves, float patternScale);

		[PreserveSig]
		[Token(Token = "0x600051D")]
		[Address(RVA = "0x21A798C", Offset = "0x21A798C", VA = "0x21A798C")]
		public static extern IntPtr features2d_BRISK_create2(float[] radiusList, int radiusListLength, int[] numberList, int numberListLength, float dMax, float dMin, int[] indexChange, int indexChangeLength);

		[PreserveSig]
		[Token(Token = "0x600051E")]
		[Address(RVA = "0x21A7A7C", Offset = "0x21A7A7C", VA = "0x21A7A7C")]
		public static extern void features2d_Ptr_BRISK_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600051F")]
		[Address(RVA = "0x21A7AFC", Offset = "0x21A7AFC", VA = "0x21A7AFC")]
		public static extern IntPtr features2d_Ptr_BRISK_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000520")]
		[Address(RVA = "0x21A7B7C", Offset = "0x21A7B7C", VA = "0x21A7B7C")]
		public static extern void features2d_DescriptorMatcher_add(IntPtr obj, IntPtr[] descriptors, int descriptorLength);

		[PreserveSig]
		[Token(Token = "0x6000521")]
		[Address(RVA = "0x21A7C1C", Offset = "0x21A7C1C", VA = "0x21A7C1C")]
		public static extern void features2d_DescriptorMatcher_getTrainDescriptors(IntPtr obj, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x6000522")]
		[Address(RVA = "0x21A7CAC", Offset = "0x21A7CAC", VA = "0x21A7CAC")]
		public static extern void features2d_DescriptorMatcher_clear(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000523")]
		[Address(RVA = "0x21A7D2C", Offset = "0x21A7D2C", VA = "0x21A7D2C")]
		public static extern int features2d_DescriptorMatcher_empty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000524")]
		[Address(RVA = "0x21A7DAC", Offset = "0x21A7DAC", VA = "0x21A7DAC")]
		public static extern int features2d_DescriptorMatcher_isMaskSupported(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000525")]
		[Address(RVA = "0x21A7E2C", Offset = "0x21A7E2C", VA = "0x21A7E2C")]
		public static extern void features2d_DescriptorMatcher_train(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000526")]
		[Address(RVA = "0x21A7EAC", Offset = "0x21A7EAC", VA = "0x21A7EAC")]
		public static extern void features2d_DescriptorMatcher_match1(IntPtr obj, IntPtr queryDescriptors, IntPtr trainDescriptors, IntPtr matches, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x6000527")]
		[Address(RVA = "0x21A7F5C", Offset = "0x21A7F5C", VA = "0x21A7F5C")]
		public static extern void features2d_DescriptorMatcher_knnMatch1(IntPtr obj, IntPtr queryDescriptors, IntPtr trainDescriptors, IntPtr matches, int k, IntPtr mask, int compactResult);

		[PreserveSig]
		[Token(Token = "0x6000528")]
		[Address(RVA = "0x21A8024", Offset = "0x21A8024", VA = "0x21A8024")]
		public static extern void features2d_DescriptorMatcher_radiusMatch1(IntPtr obj, IntPtr queryDescriptors, IntPtr trainDescriptors, IntPtr matches, float maxDistance, IntPtr mask, int compactResult);

		[PreserveSig]
		[Token(Token = "0x6000529")]
		[Address(RVA = "0x21A80F4", Offset = "0x21A80F4", VA = "0x21A80F4")]
		public static extern void features2d_DescriptorMatcher_match2(IntPtr obj, IntPtr queryDescriptors, IntPtr matches, IntPtr[] masks, int masksSize);

		[PreserveSig]
		[Token(Token = "0x600052A")]
		[Address(RVA = "0x21A81AC", Offset = "0x21A81AC", VA = "0x21A81AC")]
		public static extern void features2d_DescriptorMatcher_knnMatch2(IntPtr obj, IntPtr queryDescriptors, IntPtr matches, int k, IntPtr[] masks, int masksSize, int compactResult);

		[PreserveSig]
		[Token(Token = "0x600052B")]
		[Address(RVA = "0x21A827C", Offset = "0x21A827C", VA = "0x21A827C")]
		public static extern void features2d_DescriptorMatcher_radiusMatch2(IntPtr obj, IntPtr queryDescriptors, IntPtr matches, float maxDistance, IntPtr[] masks, int masksSize, int compactResult);

		[PreserveSig]
		[Token(Token = "0x600052C")]
		[Address(RVA = "0x21A8354", Offset = "0x21A8354", VA = "0x21A8354")]
		public static extern IntPtr features2d_DescriptorMatcher_create(string descriptorMatcherType);

		[PreserveSig]
		[Token(Token = "0x600052D")]
		[Address(RVA = "0x21A83EC", Offset = "0x21A83EC", VA = "0x21A83EC")]
		public static extern IntPtr features2d_Ptr_DescriptorMatcher_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600052E")]
		[Address(RVA = "0x21A846C", Offset = "0x21A846C", VA = "0x21A846C")]
		public static extern void features2d_Ptr_DescriptorMatcher_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600052F")]
		[Address(RVA = "0x21A84EC", Offset = "0x21A84EC", VA = "0x21A84EC")]
		public static extern IntPtr features2d_BFMatcher_new(int normType, int crossCheck);

		[PreserveSig]
		[Token(Token = "0x6000530")]
		[Address(RVA = "0x21A857C", Offset = "0x21A857C", VA = "0x21A857C")]
		public static extern void features2d_BFMatcher_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000531")]
		[Address(RVA = "0x21A85FC", Offset = "0x21A85FC", VA = "0x21A85FC")]
		public static extern int features2d_BFMatcher_isMaskSupported(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000532")]
		[Address(RVA = "0x21A867C", Offset = "0x21A867C", VA = "0x21A867C")]
		public static extern IntPtr features2d_Ptr_BFMatcher_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000533")]
		[Address(RVA = "0x21A86FC", Offset = "0x21A86FC", VA = "0x21A86FC")]
		public static extern void features2d_Ptr_BFMatcher_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000534")]
		[Address(RVA = "0x21A877C", Offset = "0x21A877C", VA = "0x21A877C")]
		public static extern IntPtr features2d_FlannBasedMatcher_new(IntPtr indexParams, IntPtr searchParams);

		[PreserveSig]
		[Token(Token = "0x6000535")]
		[Address(RVA = "0x21A880C", Offset = "0x21A880C", VA = "0x21A880C")]
		public static extern void features2d_FlannBasedMatcher_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000536")]
		[Address(RVA = "0x21A888C", Offset = "0x21A888C", VA = "0x21A888C")]
		public static extern void features2d_FlannBasedMatcher_add(IntPtr obj, IntPtr[] descriptors, int descriptorsSize);

		[PreserveSig]
		[Token(Token = "0x6000537")]
		[Address(RVA = "0x21A892C", Offset = "0x21A892C", VA = "0x21A892C")]
		public static extern void features2d_FlannBasedMatcher_clear(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000538")]
		[Address(RVA = "0x21A89AC", Offset = "0x21A89AC", VA = "0x21A89AC")]
		public static extern void features2d_FlannBasedMatcher_train(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000539")]
		[Address(RVA = "0x21A8A2C", Offset = "0x21A8A2C", VA = "0x21A8A2C")]
		public static extern int features2d_FlannBasedMatcher_isMaskSupported(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600053A")]
		[Address(RVA = "0x21A8AAC", Offset = "0x21A8AAC", VA = "0x21A8AAC")]
		public static extern IntPtr features2d_Ptr_FlannBasedMatcher_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600053B")]
		[Address(RVA = "0x21A8B2C", Offset = "0x21A8B2C", VA = "0x21A8B2C")]
		public static extern void features2d_Ptr_FlannBasedMatcher_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600053C")]
		[Address(RVA = "0x21A8BAC", Offset = "0x21A8BAC", VA = "0x21A8BAC")]
		public static extern void features2d_FAST1(IntPtr image, IntPtr keypoints, int threshold, int nonmaxSupression);

		[PreserveSig]
		[Token(Token = "0x600053D")]
		[Address(RVA = "0x21A8C54", Offset = "0x21A8C54", VA = "0x21A8C54")]
		public static extern void features2d_FAST2(IntPtr image, IntPtr keypoints, int threshold, int nonmaxSupression, int type);

		[PreserveSig]
		[Token(Token = "0x600053E")]
		[Address(RVA = "0x21A8D04", Offset = "0x21A8D04", VA = "0x21A8D04")]
		public static extern IntPtr features2d_FastFeatureDetector_create(int threshold, int nonmaxSuppression);

		[PreserveSig]
		[Token(Token = "0x600053F")]
		[Address(RVA = "0x21A8D94", Offset = "0x21A8D94", VA = "0x21A8D94")]
		public static extern void features2d_Ptr_FastFeatureDetector_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000540")]
		[Address(RVA = "0x21A8E14", Offset = "0x21A8E14", VA = "0x21A8E14")]
		public static extern IntPtr features2d_Ptr_FastFeatureDetector_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000541")]
		[Address(RVA = "0x21A8E94", Offset = "0x21A8E94", VA = "0x21A8E94")]
		public static extern void features2d_FastFeatureDetector_setThreshold(IntPtr obj, int threshold);

		[PreserveSig]
		[Token(Token = "0x6000542")]
		[Address(RVA = "0x21A8F24", Offset = "0x21A8F24", VA = "0x21A8F24")]
		public static extern int features2d_FastFeatureDetector_getThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000543")]
		[Address(RVA = "0x21A8FA4", Offset = "0x21A8FA4", VA = "0x21A8FA4")]
		public static extern void features2d_FastFeatureDetector_setNonmaxSuppression(IntPtr obj, int f);

		[PreserveSig]
		[Token(Token = "0x6000544")]
		[Address(RVA = "0x21A9034", Offset = "0x21A9034", VA = "0x21A9034")]
		public static extern int features2d_FastFeatureDetector_getNonmaxSuppression(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000545")]
		[Address(RVA = "0x21A90B4", Offset = "0x21A90B4", VA = "0x21A90B4")]
		public static extern void features2d_FastFeatureDetector_setType(IntPtr obj, int type);

		[PreserveSig]
		[Token(Token = "0x6000546")]
		[Address(RVA = "0x21A9144", Offset = "0x21A9144", VA = "0x21A9144")]
		public static extern int features2d_FastFeatureDetector_getType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000547")]
		[Address(RVA = "0x21A91C4", Offset = "0x21A91C4", VA = "0x21A91C4")]
		public static extern IntPtr features2d_Ptr_Feature2D_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000548")]
		[Address(RVA = "0x21A9244", Offset = "0x21A9244", VA = "0x21A9244")]
		public static extern void features2d_Ptr_Feature2D_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000549")]
		[Address(RVA = "0x21A92C4", Offset = "0x21A92C4", VA = "0x21A92C4")]
		public static extern void features2d_Feature2D_detect_Mat1(IntPtr detector, IntPtr image, IntPtr keypoints, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x600054A")]
		[Address(RVA = "0x21A9368", Offset = "0x21A9368", VA = "0x21A9368")]
		public static extern void features2d_Feature2D_detect_Mat2(IntPtr detector, IntPtr[] images, int imageLength, IntPtr keypoints, IntPtr[] mask);

		[PreserveSig]
		[Token(Token = "0x600054B")]
		[Address(RVA = "0x21A9428", Offset = "0x21A9428", VA = "0x21A9428")]
		public static extern void features2d_Feature2D_detect_InputArray(IntPtr detector, IntPtr image, IntPtr keypoints, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x600054C")]
		[Address(RVA = "0x21A94D0", Offset = "0x21A94D0", VA = "0x21A94D0")]
		public static extern void features2d_Feature2D_compute1(IntPtr obj, IntPtr image, IntPtr keypoints, IntPtr descriptors);

		[PreserveSig]
		[Token(Token = "0x600054D")]
		[Address(RVA = "0x21A9578", Offset = "0x21A9578", VA = "0x21A9578")]
		public static extern void features2d_Feature2D_compute2(IntPtr detector, IntPtr[] images, int imageLength, IntPtr keypoints, IntPtr[] descriptors, int descriptorsLength);

		[PreserveSig]
		[Token(Token = "0x600054E")]
		[Address(RVA = "0x21A9648", Offset = "0x21A9648", VA = "0x21A9648")]
		public static extern void features2d_Feature2D_detectAndCompute(IntPtr detector, IntPtr image, IntPtr mask, IntPtr keypoints, IntPtr descriptors, int useProvidedKeypoints);

		[PreserveSig]
		[Token(Token = "0x600054F")]
		[Address(RVA = "0x21A9708", Offset = "0x21A9708", VA = "0x21A9708")]
		public static extern int features2d_Feature2D_descriptorSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000550")]
		[Address(RVA = "0x21A9788", Offset = "0x21A9788", VA = "0x21A9788")]
		public static extern int features2d_Feature2D_descriptorType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000551")]
		[Address(RVA = "0x21A9808", Offset = "0x21A9808", VA = "0x21A9808")]
		public static extern int features2d_Feature2D_defaultNorm(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000552")]
		[Address(RVA = "0x21A9888", Offset = "0x21A9888", VA = "0x21A9888")]
		public static extern int features2d_Feature2D_empty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000553")]
		[Address(RVA = "0x21A9908", Offset = "0x21A9908", VA = "0x21A9908")]
		public static extern IntPtr features2d_GFTTDetector_create(int maxCorners, double qualityLevel, double minDistance, int blockSize, int useHarrisDetector, double k);

		[PreserveSig]
		[Token(Token = "0x6000554")]
		[Address(RVA = "0x21A99C8", Offset = "0x21A99C8", VA = "0x21A99C8")]
		public static extern IntPtr features2d_Ptr_GFTTDetector_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000555")]
		[Address(RVA = "0x21A9A48", Offset = "0x21A9A48", VA = "0x21A9A48")]
		public static extern void features2d_Ptr_GFTTDetector_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000556")]
		[Address(RVA = "0x21A9AC8", Offset = "0x21A9AC8", VA = "0x21A9AC8")]
		public static extern void features2d_GFTTDetector_setMaxFeatures(IntPtr obj, int maxFeatures);

		[PreserveSig]
		[Token(Token = "0x6000557")]
		[Address(RVA = "0x21A9B58", Offset = "0x21A9B58", VA = "0x21A9B58")]
		public static extern int features2d_GFTTDetector_getMaxFeatures(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000558")]
		[Address(RVA = "0x21A9BD8", Offset = "0x21A9BD8", VA = "0x21A9BD8")]
		public static extern void features2d_GFTTDetector_setQualityLevel(IntPtr obj, double qlevel);

		[PreserveSig]
		[Token(Token = "0x6000559")]
		[Address(RVA = "0x21A9C68", Offset = "0x21A9C68", VA = "0x21A9C68")]
		public static extern double features2d_GFTTDetector_getQualityLevel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600055A")]
		[Address(RVA = "0x21A9CE8", Offset = "0x21A9CE8", VA = "0x21A9CE8")]
		public static extern void features2d_GFTTDetector_setMinDistance(IntPtr obj, double minDistance);

		[PreserveSig]
		[Token(Token = "0x600055B")]
		[Address(RVA = "0x21A9D78", Offset = "0x21A9D78", VA = "0x21A9D78")]
		public static extern double features2d_GFTTDetector_getMinDistance(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600055C")]
		[Address(RVA = "0x21A9DF8", Offset = "0x21A9DF8", VA = "0x21A9DF8")]
		public static extern void features2d_GFTTDetector_setBlockSize(IntPtr obj, int blockSize);

		[PreserveSig]
		[Token(Token = "0x600055D")]
		[Address(RVA = "0x21A9E88", Offset = "0x21A9E88", VA = "0x21A9E88")]
		public static extern int features2d_GFTTDetector_getBlockSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600055E")]
		[Address(RVA = "0x21A9F08", Offset = "0x21A9F08", VA = "0x21A9F08")]
		public static extern void features2d_GFTTDetector_setHarrisDetector(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600055F")]
		[Address(RVA = "0x21A9F98", Offset = "0x21A9F98", VA = "0x21A9F98")]
		public static extern int features2d_GFTTDetector_getHarrisDetector(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000560")]
		[Address(RVA = "0x21AA018", Offset = "0x21AA018", VA = "0x21AA018")]
		public static extern void features2d_GFTTDetector_setK(IntPtr obj, double k);

		[PreserveSig]
		[Token(Token = "0x6000561")]
		[Address(RVA = "0x21AA0A8", Offset = "0x21AA0A8", VA = "0x21AA0A8")]
		public static extern double features2d_GFTTDetector_getK(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000562")]
		[Address(RVA = "0x21AA128", Offset = "0x21AA128", VA = "0x21AA128")]
		public static extern IntPtr features2d_KAZE_create(bool extended, bool upright, float threshold, int nOctaves, int nOctaveLayers, int diffusivity);

		[PreserveSig]
		[Token(Token = "0x6000563")]
		[Address(RVA = "0x21AA1E8", Offset = "0x21AA1E8", VA = "0x21AA1E8")]
		public static extern void features2d_Ptr_KAZE_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000564")]
		[Address(RVA = "0x21AA268", Offset = "0x21AA268", VA = "0x21AA268")]
		public static extern IntPtr features2d_Ptr_KAZE_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000565")]
		[Address(RVA = "0x21AA2E8", Offset = "0x21AA2E8", VA = "0x21AA2E8")]
		public static extern void features2d_KAZE_setDiffusivity(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000566")]
		[Address(RVA = "0x21AA378", Offset = "0x21AA378", VA = "0x21AA378")]
		public static extern int features2d_KAZE_getDiffusivity(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000567")]
		[Address(RVA = "0x21AA3F8", Offset = "0x21AA3F8", VA = "0x21AA3F8")]
		public static extern void features2d_KAZE_setExtended(IntPtr obj, bool val);

		[PreserveSig]
		[Token(Token = "0x6000568")]
		[Address(RVA = "0x21AA488", Offset = "0x21AA488", VA = "0x21AA488")]
		public static extern bool features2d_KAZE_getExtended(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000569")]
		[Address(RVA = "0x21AA510", Offset = "0x21AA510", VA = "0x21AA510")]
		public static extern void features2d_KAZE_setNOctaveLayers(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600056A")]
		[Address(RVA = "0x21AA5A0", Offset = "0x21AA5A0", VA = "0x21AA5A0")]
		public static extern int features2d_KAZE_getNOctaveLayers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600056B")]
		[Address(RVA = "0x21AA620", Offset = "0x21AA620", VA = "0x21AA620")]
		public static extern void features2d_KAZE_setNOctaves(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600056C")]
		[Address(RVA = "0x21AA6B0", Offset = "0x21AA6B0", VA = "0x21AA6B0")]
		public static extern int features2d_KAZE_getNOctaves(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600056D")]
		[Address(RVA = "0x21AA730", Offset = "0x21AA730", VA = "0x21AA730")]
		public static extern void features2d_KAZE_setThreshold(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x600056E")]
		[Address(RVA = "0x21AA7C0", Offset = "0x21AA7C0", VA = "0x21AA7C0")]
		public static extern double features2d_KAZE_getThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600056F")]
		[Address(RVA = "0x21AA840", Offset = "0x21AA840", VA = "0x21AA840")]
		public static extern void features2d_KAZE_setUpright(IntPtr obj, bool val);

		[PreserveSig]
		[Token(Token = "0x6000570")]
		[Address(RVA = "0x21AA8D0", Offset = "0x21AA8D0", VA = "0x21AA8D0")]
		public static extern bool features2d_KAZE_getUpright(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000571")]
		[Address(RVA = "0x21AA958", Offset = "0x21AA958", VA = "0x21AA958")]
		public static extern void features2d_KeyPointsFilter_runByImageBorder(IntPtr keypoints, Size imageSize, int borderSize);

		[PreserveSig]
		[Token(Token = "0x6000572")]
		[Address(RVA = "0x21AA9F0", Offset = "0x21AA9F0", VA = "0x21AA9F0")]
		public static extern void features2d_KeyPointsFilter_runByKeypointSize(IntPtr keypoints, float minSize, float maxSize);

		[PreserveSig]
		[Token(Token = "0x6000573")]
		[Address(RVA = "0x21AAA88", Offset = "0x21AAA88", VA = "0x21AAA88")]
		public static extern void features2d_KeyPointsFilter_runByPixelsMask(IntPtr keypoints, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x6000574")]
		[Address(RVA = "0x21AAB18", Offset = "0x21AAB18", VA = "0x21AAB18")]
		public static extern void features2d_KeyPointsFilter_removeDuplicated(IntPtr keypoints);

		[PreserveSig]
		[Token(Token = "0x6000575")]
		[Address(RVA = "0x21AAB98", Offset = "0x21AAB98", VA = "0x21AAB98")]
		public static extern void features2d_KeyPointsFilter_retainBest(IntPtr keypoints, int npoints);

		[PreserveSig]
		[Token(Token = "0x6000576")]
		[Address(RVA = "0x21AAC28", Offset = "0x21AAC28", VA = "0x21AAC28")]
		public static extern IntPtr features2d_MSER_create(int delta, int minArea, int maxArea, double maxVariation, double minDiversity, int maxEvolution, double areaThreshold, double minMargin, int edgeBlurSize);

		[PreserveSig]
		[Token(Token = "0x6000577")]
		[Address(RVA = "0x21AAD08", Offset = "0x21AAD08", VA = "0x21AAD08")]
		public static extern void features2d_Ptr_MSER_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000578")]
		[Address(RVA = "0x21AAD88", Offset = "0x21AAD88", VA = "0x21AAD88")]
		public static extern IntPtr features2d_Ptr_MSER_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000579")]
		[Address(RVA = "0x21AAE08", Offset = "0x21AAE08", VA = "0x21AAE08")]
		public static extern void features2d_MSER_detectRegions(IntPtr obj, IntPtr image, IntPtr msers, IntPtr bboxes);

		[PreserveSig]
		[Token(Token = "0x600057A")]
		[Address(RVA = "0x21AAEB0", Offset = "0x21AAEB0", VA = "0x21AAEB0")]
		public static extern void features2d_MSER_setDelta(IntPtr obj, int delta);

		[PreserveSig]
		[Token(Token = "0x600057B")]
		[Address(RVA = "0x21AAF40", Offset = "0x21AAF40", VA = "0x21AAF40")]
		public static extern int features2d_MSER_getDelta(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600057C")]
		[Address(RVA = "0x21AAFC0", Offset = "0x21AAFC0", VA = "0x21AAFC0")]
		public static extern void features2d_MSER_setMinArea(IntPtr obj, int minArea);

		[PreserveSig]
		[Token(Token = "0x600057D")]
		[Address(RVA = "0x21AB050", Offset = "0x21AB050", VA = "0x21AB050")]
		public static extern int features2d_MSER_getMinArea(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600057E")]
		[Address(RVA = "0x21AB0D0", Offset = "0x21AB0D0", VA = "0x21AB0D0")]
		public static extern void features2d_MSER_setMaxArea(IntPtr obj, int maxArea);

		[PreserveSig]
		[Token(Token = "0x600057F")]
		[Address(RVA = "0x21AB160", Offset = "0x21AB160", VA = "0x21AB160")]
		public static extern int features2d_MSER_getMaxArea(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000580")]
		[Address(RVA = "0x21AB1E0", Offset = "0x21AB1E0", VA = "0x21AB1E0")]
		public static extern void features2d_MSER_setPass2Only(IntPtr obj, int f);

		[PreserveSig]
		[Token(Token = "0x6000581")]
		[Address(RVA = "0x21AB270", Offset = "0x21AB270", VA = "0x21AB270")]
		public static extern int features2d_MSER_getPass2Only(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000582")]
		[Address(RVA = "0x21AB2F0", Offset = "0x21AB2F0", VA = "0x21AB2F0")]
		public static extern IntPtr features2d_ORB_create(int nFeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int wtaK, int scoreType, int patchSize);

		[PreserveSig]
		[Token(Token = "0x6000583")]
		[Address(RVA = "0x21AB3C8", Offset = "0x21AB3C8", VA = "0x21AB3C8")]
		public static extern void features2d_Ptr_ORB_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000584")]
		[Address(RVA = "0x21AB448", Offset = "0x21AB448", VA = "0x21AB448")]
		public static extern IntPtr features2d_Ptr_ORB_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000585")]
		[Address(RVA = "0x21AB4C8", Offset = "0x21AB4C8", VA = "0x21AB4C8")]
		public static extern void features2d_ORB_setMaxFeatures(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000586")]
		[Address(RVA = "0x21AB558", Offset = "0x21AB558", VA = "0x21AB558")]
		public static extern int features2d_ORB_getMaxFeatures(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000587")]
		[Address(RVA = "0x21AB5D8", Offset = "0x21AB5D8", VA = "0x21AB5D8")]
		public static extern void features2d_ORB_setScaleFactor(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000588")]
		[Address(RVA = "0x21AB668", Offset = "0x21AB668", VA = "0x21AB668")]
		public static extern double features2d_ORB_getScaleFactor(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000589")]
		[Address(RVA = "0x21AB6E8", Offset = "0x21AB6E8", VA = "0x21AB6E8")]
		public static extern void features2d_ORB_setNLevels(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600058A")]
		[Address(RVA = "0x21AB778", Offset = "0x21AB778", VA = "0x21AB778")]
		public static extern int features2d_ORB_getNLevels(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600058B")]
		[Address(RVA = "0x21AB7F8", Offset = "0x21AB7F8", VA = "0x21AB7F8")]
		public static extern void features2d_ORB_setEdgeThreshold(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600058C")]
		[Address(RVA = "0x21AB888", Offset = "0x21AB888", VA = "0x21AB888")]
		public static extern int features2d_ORB_getEdgeThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600058D")]
		[Address(RVA = "0x21AB908", Offset = "0x21AB908", VA = "0x21AB908")]
		public static extern void features2d_ORB_setFirstLevel(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600058E")]
		[Address(RVA = "0x21AB998", Offset = "0x21AB998", VA = "0x21AB998")]
		public static extern int features2d_ORB_getFirstLevel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600058F")]
		[Address(RVA = "0x21ABA18", Offset = "0x21ABA18", VA = "0x21ABA18")]
		public static extern void features2d_ORB_setWTA_K(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000590")]
		[Address(RVA = "0x21ABAA8", Offset = "0x21ABAA8", VA = "0x21ABAA8")]
		public static extern int features2d_ORB_getWTA_K(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000591")]
		[Address(RVA = "0x21ABB28", Offset = "0x21ABB28", VA = "0x21ABB28")]
		public static extern void features2d_ORB_setScoreType(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000592")]
		[Address(RVA = "0x21ABBB8", Offset = "0x21ABBB8", VA = "0x21ABBB8")]
		public static extern int features2d_ORB_getScoreType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000593")]
		[Address(RVA = "0x21ABC38", Offset = "0x21ABC38", VA = "0x21ABC38")]
		public static extern void features2d_ORB_setPatchSize(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000594")]
		[Address(RVA = "0x21ABCC8", Offset = "0x21ABCC8", VA = "0x21ABCC8")]
		public static extern int features2d_ORB_getPatchSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000595")]
		[Address(RVA = "0x21ABD48", Offset = "0x21ABD48", VA = "0x21ABD48")]
		public static extern void features2d_ORB_setFastThreshold(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000596")]
		[Address(RVA = "0x21ABDD8", Offset = "0x21ABDD8", VA = "0x21ABDD8")]
		public static extern int features2d_ORB_getFastThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000597")]
		[Address(RVA = "0x21ABE58", Offset = "0x21ABE58", VA = "0x21ABE58")]
		public static extern IntPtr features2d_SimpleBlobDetector_create(ref SimpleBlobDetector.WParams parameters);

		[PreserveSig]
		[Token(Token = "0x6000598")]
		[Address(RVA = "0x21ABED8", Offset = "0x21ABED8", VA = "0x21ABED8")]
		public static extern IntPtr features2d_Ptr_SimpleBlobDetector_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000599")]
		[Address(RVA = "0x21ABF58", Offset = "0x21ABF58", VA = "0x21ABF58")]
		public static extern void features2d_Ptr_SimpleBlobDetector_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600059A")]
		[Address(RVA = "0x21ABFD8", Offset = "0x21ABFD8", VA = "0x21ABFD8")]
		public static extern IntPtr imgproc_getGaussianKernel(int ksize, double sigma, int ktype);

		[PreserveSig]
		[Token(Token = "0x600059B")]
		[Address(RVA = "0x21AC078", Offset = "0x21AC078", VA = "0x21AC078")]
		public static extern void imgproc_getDerivKernels(IntPtr kx, IntPtr ky, int dx, int dy, int ksize, int normalize, int ktype);

		[PreserveSig]
		[Token(Token = "0x600059C")]
		[Address(RVA = "0x21AC140", Offset = "0x21AC140", VA = "0x21AC140")]
		public static extern IntPtr imgproc_getGaborKernel(Size ksize, double sigma, double theta, double lambd, double gamma, double psi, int ktype);

		[PreserveSig]
		[Token(Token = "0x600059D")]
		[Address(RVA = "0x21AC210", Offset = "0x21AC210", VA = "0x21AC210")]
		public static extern IntPtr imgproc_getStructuringElement(int shape, Size ksize, Point anchor);

		[PreserveSig]
		[Token(Token = "0x600059E")]
		[Address(RVA = "0x21AC2A8", Offset = "0x21AC2A8", VA = "0x21AC2A8")]
		public static extern void imgproc_copyMakeBorder(IntPtr src, IntPtr dst, int top, int bottom, int left, int right, int borderType, Scalar value);

		[PreserveSig]
		[Token(Token = "0x600059F")]
		[Address(RVA = "0x21AC3A0", Offset = "0x21AC3A0", VA = "0x21AC3A0")]
		public static extern void imgproc_medianBlur(IntPtr src, IntPtr dst, int ksize);

		[PreserveSig]
		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x21AC438", Offset = "0x21AC438", VA = "0x21AC438")]
		public static extern void imgproc_GaussianBlur(IntPtr src, IntPtr dst, Size ksize, double sigmaX, double sigmaY, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x21AC4F8", Offset = "0x21AC4F8", VA = "0x21AC4F8")]
		public static extern void imgproc_bilateralFilter(IntPtr src, IntPtr dst, int d, double sigmaColor, double sigmaSpace, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x21AC5B8", Offset = "0x21AC5B8", VA = "0x21AC5B8")]
		public static extern void imgproc_boxFilter(IntPtr src, IntPtr dst, int ddepth, Size ksize, Point anchor, int normalize, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x21AC67C", Offset = "0x21AC67C", VA = "0x21AC67C")]
		public static extern void imgproc_blur(IntPtr src, IntPtr dst, Size ksize, Point anchor, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x21AC72C", Offset = "0x21AC72C", VA = "0x21AC72C")]
		public static extern void imgproc_filter2D(IntPtr src, IntPtr dst, int ddepth, IntPtr kernel, Point anchor, double delta, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x21AC7FC", Offset = "0x21AC7FC", VA = "0x21AC7FC")]
		public static extern void imgproc_sepFilter2D(IntPtr src, IntPtr dst, int ddepth, IntPtr kernelX, IntPtr kernelY, Point anchor, double delta, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x21AC8D4", Offset = "0x21AC8D4", VA = "0x21AC8D4")]
		public static extern void imgproc_Sobel(IntPtr src, IntPtr dst, int ddepth, int dx, int dy, int ksize, double scale, double delta, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x21AC9B4", Offset = "0x21AC9B4", VA = "0x21AC9B4")]
		public static extern void imgproc_Scharr(IntPtr src, IntPtr dst, int ddepth, int dx, int dy, double scale, double delta, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x21ACA8C", Offset = "0x21ACA8C", VA = "0x21ACA8C")]
		public static extern void imgproc_Laplacian(IntPtr src, IntPtr dst, int ddepth, int ksize, double scale, double delta, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x21ACB50", Offset = "0x21ACB50", VA = "0x21ACB50")]
		public static extern void imgproc_Canny(IntPtr src, IntPtr edges, double threshold1, double threshold2, int apertureSize, int L2gradient);

		[PreserveSig]
		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x21ACC10", Offset = "0x21ACC10", VA = "0x21ACC10")]
		public static extern void imgproc_cornerEigenValsAndVecs(IntPtr src, IntPtr dst, int blockSize, int ksize, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x21ACCC0", Offset = "0x21ACCC0", VA = "0x21ACCC0")]
		public static extern void imgproc_preCornerDetect(IntPtr src, IntPtr dst, int ksize, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x21ACD68", Offset = "0x21ACD68", VA = "0x21ACD68")]
		public static extern void imgproc_cornerSubPix(IntPtr image, IntPtr corners, Size winSize, Size zeroZone, TermCriteria criteria);

		[PreserveSig]
		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x21ACE28", Offset = "0x21ACE28", VA = "0x21ACE28")]
		public static extern void imgproc_goodFeaturesToTrack(IntPtr src, IntPtr corners, int maxCorners, double qualityLevel, double minDistance, IntPtr mask, int blockSize, int useHarrisDetector, double k);

		[PreserveSig]
		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x21ACF10", Offset = "0x21ACF10", VA = "0x21ACF10")]
		public static extern void imgproc_HoughLines(IntPtr src, IntPtr lines, double rho, double theta, int threshold, double srn, double stn);

		[PreserveSig]
		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x21ACFD8", Offset = "0x21ACFD8", VA = "0x21ACFD8")]
		public static extern void imgproc_HoughLinesP(IntPtr src, IntPtr lines, double rho, double theta, int threshold, double minLineLength, double maxLineG);

		[PreserveSig]
		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x21AD0A0", Offset = "0x21AD0A0", VA = "0x21AD0A0")]
		public static extern void imgproc_HoughCircles(IntPtr src, IntPtr circles, int method, double dp, double minDist, double param1, double param2, int minRadius, int maxRadius);

		[PreserveSig]
		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x21AD180", Offset = "0x21AD180", VA = "0x21AD180")]
		public static extern void imgproc_erode(IntPtr src, IntPtr dst, IntPtr kernel, Point anchor, int iterations, int borderType, Scalar borderValue);

		[PreserveSig]
		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x21AD270", Offset = "0x21AD270", VA = "0x21AD270")]
		public static extern void imgproc_dilate(IntPtr src, IntPtr dst, IntPtr kernel, Point anchor, int iterations, int borderType, Scalar borderValue);

		[PreserveSig]
		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x21AD360", Offset = "0x21AD360", VA = "0x21AD360")]
		public static extern void imgproc_morphologyEx(IntPtr src, IntPtr dst, int op, IntPtr kernel, Point anchor, int iterations, int borderType, Scalar borderValue);

		[PreserveSig]
		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x21AD458", Offset = "0x21AD458", VA = "0x21AD458")]
		public static extern void imgproc_resize(IntPtr src, IntPtr dst, Size dsize, double fx, double fy, int interpolation);

		[PreserveSig]
		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x21AD518", Offset = "0x21AD518", VA = "0x21AD518")]
		public static extern void imgproc_warpAffine(IntPtr src, IntPtr dst, IntPtr m, Size dsize, int flags, int borderMode, Scalar borderValue);

		[PreserveSig]
		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x21AD608", Offset = "0x21AD608", VA = "0x21AD608")]
		public static extern void imgproc_warpPerspective_MisInputArray(IntPtr src, IntPtr dst, IntPtr m, Size dsize, int flags, int borderMode, Scalar borderValue);

		[PreserveSig]
		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x21AD6F8", Offset = "0x21AD6F8", VA = "0x21AD6F8")]
		public static extern void imgproc_warpPerspective_MisArray(IntPtr src, IntPtr dst, float[,] m, int mRow, int mCol, Size dsize, int flags, int borderMode, Scalar borderValue);

		[PreserveSig]
		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x21AD714", Offset = "0x21AD714", VA = "0x21AD714")]
		public static extern void imgproc_remap(IntPtr src, IntPtr dst, IntPtr map1, IntPtr map2, int interpolation, int borderMode, Scalar borderValue);

		[PreserveSig]
		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x21AD804", Offset = "0x21AD804", VA = "0x21AD804")]
		public static extern void imgproc_convertMaps(IntPtr map1, IntPtr map2, IntPtr dstmap1, IntPtr dstmap2, int dstmap1Type, int nninterpolation);

		[PreserveSig]
		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x21AD8C4", Offset = "0x21AD8C4", VA = "0x21AD8C4")]
		public static extern IntPtr imgproc_getRotationMatrix2D(Point2f center, double angle, double scale);

		[PreserveSig]
		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x21AD96C", Offset = "0x21AD96C", VA = "0x21AD96C")]
		public static extern void imgproc_invertAffineTransform(IntPtr m, IntPtr im);

		[PreserveSig]
		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x21AD9FC", Offset = "0x21AD9FC", VA = "0x21AD9FC")]
		public static extern IntPtr imgproc_getPerspectiveTransform1(Point2f[] src, Point2f[] dst);

		[PreserveSig]
		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x21ADA9C", Offset = "0x21ADA9C", VA = "0x21ADA9C")]
		public static extern IntPtr imgproc_getPerspectiveTransform2(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x21ADB2C", Offset = "0x21ADB2C", VA = "0x21ADB2C")]
		public static extern IntPtr imgproc_getAffineTransform1(Point2f[] src, Point2f[] dst);

		[PreserveSig]
		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x21ADBCC", Offset = "0x21ADBCC", VA = "0x21ADBCC")]
		public static extern IntPtr imgproc_getAffineTransform2(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x21ADC5C", Offset = "0x21ADC5C", VA = "0x21ADC5C")]
		public static extern void imgproc_getRectSubPix(IntPtr image, Size patchSize, Point2f center, IntPtr patch, int patchType);

		[PreserveSig]
		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x21ADD1C", Offset = "0x21ADD1C", VA = "0x21ADD1C")]
		public static extern void imgproc_logPolar(IntPtr src, IntPtr dst, Point2f center, double m, int flags);

		[PreserveSig]
		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x21ADDDC", Offset = "0x21ADDDC", VA = "0x21ADDDC")]
		public static extern void imgproc_linearPolar(IntPtr src, IntPtr dst, Point2f center, double maxRadius, int flags);

		[PreserveSig]
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x21ADE9C", Offset = "0x21ADE9C", VA = "0x21ADE9C")]
		public static extern void imgproc_integral1(IntPtr src, IntPtr sum, int sdepth);

		[PreserveSig]
		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x21ADF30", Offset = "0x21ADF30", VA = "0x21ADF30")]
		public static extern void imgproc_integral2(IntPtr src, IntPtr sum, IntPtr sqsum, int sdepth);

		[PreserveSig]
		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x21ADFD4", Offset = "0x21ADFD4", VA = "0x21ADFD4")]
		public static extern void imgproc_integral3(IntPtr src, IntPtr sum, IntPtr sqsum, IntPtr tilted, int sdepth);

		[PreserveSig]
		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x21AE080", Offset = "0x21AE080", VA = "0x21AE080")]
		public static extern void imgproc_accumulate(IntPtr src, IntPtr dst, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x21AE118", Offset = "0x21AE118", VA = "0x21AE118")]
		public static extern void imgproc_accumulateSquare(IntPtr src, IntPtr dst, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x21AE1AC", Offset = "0x21AE1AC", VA = "0x21AE1AC")]
		public static extern void imgproc_accumulateProduct(IntPtr src1, IntPtr src2, IntPtr dst, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x21AE254", Offset = "0x21AE254", VA = "0x21AE254")]
		public static extern void imgproc_accumulateWeighted(IntPtr src, IntPtr dst, double alpha, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x21AE2FC", Offset = "0x21AE2FC", VA = "0x21AE2FC")]
		public static extern double imgproc_PSNR(IntPtr src1, IntPtr src2);

		[PreserveSig]
		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x21AE38C", Offset = "0x21AE38C", VA = "0x21AE38C")]
		public static extern Point2d imgproc_phaseCorrelate(IntPtr src1, IntPtr src2, IntPtr window);

		[PreserveSig]
		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x21AE424", Offset = "0x21AE424", VA = "0x21AE424")]
		public static extern Point2d imgproc_phaseCorrelateRes(IntPtr src1, IntPtr src2, IntPtr window, out double response);

		[PreserveSig]
		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x21AE4CC", Offset = "0x21AE4CC", VA = "0x21AE4CC")]
		public static extern void imgproc_createHanningWindow(IntPtr dst, Size winSize, int type);

		[PreserveSig]
		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x21AE564", Offset = "0x21AE564", VA = "0x21AE564")]
		public static extern double imgproc_threshold(IntPtr src, IntPtr dst, double thresh, double maxval, int type);

		[PreserveSig]
		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x21AE610", Offset = "0x21AE610", VA = "0x21AE610")]
		public static extern void imgproc_adaptiveThreshold(IntPtr src, IntPtr dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double c);

		[PreserveSig]
		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x21AE6D8", Offset = "0x21AE6D8", VA = "0x21AE6D8")]
		public static extern void imgproc_pyrDown(IntPtr src, IntPtr dst, Size dstsize, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x21AE780", Offset = "0x21AE780", VA = "0x21AE780")]
		public static extern void imgproc_pyrUp(IntPtr src, IntPtr dst, Size dstsize, int borderType);

		[PreserveSig]
		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x21AE828", Offset = "0x21AE828", VA = "0x21AE828")]
		public static extern void imgproc_undistort(IntPtr src, IntPtr dst, IntPtr cameraMatrix, IntPtr distCoeffs, IntPtr newCameraMatrix);

		[PreserveSig]
		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x21AE8D4", Offset = "0x21AE8D4", VA = "0x21AE8D4")]
		public static extern void imgproc_initUndistortRectifyMap(IntPtr cameraMatrix, IntPtr distCoeffs, IntPtr r, IntPtr newCameraMatrix, Size size, int m1Type, IntPtr map1, IntPtr map2);

		[PreserveSig]
		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x21AE9AC", Offset = "0x21AE9AC", VA = "0x21AE9AC")]
		public static extern float imgproc_initWideAngleProjMap(IntPtr cameraMatrix, IntPtr distCoeffs, Size imageSize, int destImageWidth, int m1Type, IntPtr map1, IntPtr map2, int projType, double alpha);

		[PreserveSig]
		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x21AEA94", Offset = "0x21AEA94", VA = "0x21AEA94")]
		public static extern IntPtr imgproc_getDefaultNewCameraMatrix(IntPtr cameraMatrix, Size imgSize, int centerPrincipalPoint);

		[PreserveSig]
		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x21AEB2C", Offset = "0x21AEB2C", VA = "0x21AEB2C")]
		public static extern void imgproc_undistortPoints(IntPtr src, IntPtr dst, IntPtr cameraMatrix, IntPtr distCoeffs, IntPtr r, IntPtr p);

		[PreserveSig]
		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x21AEBEC", Offset = "0x21AEBEC", VA = "0x21AEBEC")]
		public static extern void imgproc_calcHist1(IntPtr[] images, int nimages, int[] channels, IntPtr mask, IntPtr hist, int dims, int[] histSize, IntPtr[] ranges, int uniform, int accumulate);

		[PreserveSig]
		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x21AECF4", Offset = "0x21AECF4", VA = "0x21AECF4")]
		public static extern void imgproc_calcBackProject(IntPtr[] images, int nimages, int[] channels, IntPtr hist, IntPtr backProject, IntPtr[] ranges, int uniform);

		[PreserveSig]
		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x21AEDD4", Offset = "0x21AEDD4", VA = "0x21AEDD4")]
		public static extern double imgproc_compareHist1(IntPtr h1, IntPtr h2, int method);

		[PreserveSig]
		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x21AEE68", Offset = "0x21AEE68", VA = "0x21AEE68")]
		public static extern void imgproc_equalizeHist(IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x21AEEF8", Offset = "0x21AEEF8", VA = "0x21AEEF8")]
		public static extern float imgproc_EMD(IntPtr signature1, IntPtr signature2, int distType, IntPtr cost, out float lowerBound, IntPtr flow);

		[PreserveSig]
		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x21AEFB8", Offset = "0x21AEFB8", VA = "0x21AEFB8")]
		public static extern void imgproc_watershed(IntPtr image, IntPtr markers);

		[PreserveSig]
		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x21AF044", Offset = "0x21AF044", VA = "0x21AF044")]
		public static extern void imgproc_pyrMeanShiftFiltering(IntPtr src, IntPtr dst, double sp, double sr, int maxLevel, TermCriteria termcrit);

		[PreserveSig]
		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x21AF10C", Offset = "0x21AF10C", VA = "0x21AF10C")]
		public static extern void imgproc_grabCut(IntPtr img, IntPtr mask, Rect rect, IntPtr bgdModel, IntPtr fgdModel, int iterCount, int mode);

		[PreserveSig]
		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x21AF1E4", Offset = "0x21AF1E4", VA = "0x21AF1E4")]
		public static extern void imgproc_distanceTransformWithLabels(IntPtr src, IntPtr dst, IntPtr labels, int distanceType, int maskSize, int labelType);

		[PreserveSig]
		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x21AF2A4", Offset = "0x21AF2A4", VA = "0x21AF2A4")]
		public static extern void imgproc_distanceTransform(IntPtr src, IntPtr dst, int distanceType, int maskSize);

		[PreserveSig]
		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x21AF34C", Offset = "0x21AF34C", VA = "0x21AF34C")]
		public static extern int imgproc_floodFill(IntPtr image, Point seedPoint, Scalar newVal, out Rect rect, Scalar loDiff, Scalar upDiff, int flags);

		[PreserveSig]
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x21AF464", Offset = "0x21AF464", VA = "0x21AF464")]
		public static extern int imgproc_floodFill(IntPtr image, IntPtr mask, Point seedPoint, Scalar newVal, out Rect rect, Scalar loDiff, Scalar upDiff, int flags);

		[PreserveSig]
		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x21AF580", Offset = "0x21AF580", VA = "0x21AF580")]
		public static extern void imgproc_cvtColor(IntPtr src, IntPtr dst, int code, int dstCn);

		[PreserveSig]
		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x2177FB4", Offset = "0x2177FB4", VA = "0x2177FB4")]
		public static extern Moments.NativeStruct imgproc_moments(IntPtr arr, int binaryImage);

		[PreserveSig]
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x21AF628", Offset = "0x21AF628", VA = "0x21AF628")]
		public static extern void imgproc_matchTemplate(IntPtr image, IntPtr templ, IntPtr result, int method, IntPtr mask);

		[PreserveSig]
		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x21AF6D8", Offset = "0x21AF6D8", VA = "0x21AF6D8")]
		public static extern int imgproc_connectedComponents(IntPtr image, IntPtr labels, int connectivity, int ltype);

		[PreserveSig]
		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x21AF780", Offset = "0x21AF780", VA = "0x21AF780")]
		public static extern int imgproc_connectedComponentsWithStats(IntPtr image, IntPtr labels, IntPtr stats, IntPtr centroids, int connectivity, int ltype);

		[PreserveSig]
		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x21AF840", Offset = "0x21AF840", VA = "0x21AF840")]
		public static extern void imgproc_findContours1_vector(IntPtr image, out IntPtr contours, out IntPtr hierarchy, int mode, int method, Point offset);

		[PreserveSig]
		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x21AF900", Offset = "0x21AF900", VA = "0x21AF900")]
		public static extern void imgproc_findContours1_OutputArray(IntPtr image, out IntPtr contours, IntPtr hierarchy, int mode, int method, Point offset);

		[PreserveSig]
		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x21AF9C0", Offset = "0x21AF9C0", VA = "0x21AF9C0")]
		public static extern void imgproc_findContours2_vector(IntPtr image, out IntPtr contours, int mode, int method, Point offset);

		[PreserveSig]
		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x21AFA70", Offset = "0x21AFA70", VA = "0x21AFA70")]
		public static extern void imgproc_findContours2_OutputArray(IntPtr image, out IntPtr contours, int mode, int method, Point offset);

		[PreserveSig]
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x21AFB20", Offset = "0x21AFB20", VA = "0x21AFB20")]
		public static extern void imgproc_drawContours_vector_fix(IntPtr image, IntPtr[] contours, int contoursSize1, int[] contoursSize2, Scalar color, int contourIdx, int thickness, int lineType, Vec4i[] hierarchy, int hiearchyLength, int maxLevel, Point offset);

		[PreserveSig]
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x21AFC64", Offset = "0x21AFC64", VA = "0x21AFC64")]
		public static extern void imgproc_drawContours_vector_fix(IntPtr image, IntPtr[] contours, int contoursSize1, int[] contoursSize2, Scalar color, int contourIdx, int thickness, int lineType, IntPtr hierarchy, int hiearchyLength, int maxLevel, Point offset);

		[PreserveSig]
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x21AFDA0", Offset = "0x21AFDA0", VA = "0x21AFDA0")]
		public static extern void imgproc_drawContours_InputArray(IntPtr image, IntPtr[] contours, int contoursLength, int contourIdx, Scalar color, int thickness, int lineType, IntPtr hierarchy, int maxLevel, Point offset);

		[PreserveSig]
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x21AFEB8", Offset = "0x21AFEB8", VA = "0x21AFEB8")]
		public static extern void imgproc_approxPolyDP_InputArray(IntPtr curve, IntPtr approxCurve, double epsilon, int closed);

		[PreserveSig]
		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x21AFF60", Offset = "0x21AFF60", VA = "0x21AFF60")]
		public static extern void imgproc_approxPolyDP_Point(Point[] curve, int curveLength, out IntPtr approxCurve, double epsilon, int closed);

		[PreserveSig]
		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x21B0020", Offset = "0x21B0020", VA = "0x21B0020")]
		public static extern void imgproc_approxPolyDP_Point2f(Point2f[] curve, int curveLength, out IntPtr approxCurve, double epsilon, int closed);

		[PreserveSig]
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x21B00E0", Offset = "0x21B00E0", VA = "0x21B00E0")]
		public static extern double imgproc_arcLength_InputArray(IntPtr curve, int closed);

		[PreserveSig]
		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x21B0170", Offset = "0x21B0170", VA = "0x21B0170")]
		public static extern double imgproc_arcLength_Point(Point[] curve, int curveLength, int closed);

		[PreserveSig]
		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x21B0210", Offset = "0x21B0210", VA = "0x21B0210")]
		public static extern double imgproc_arcLength_Point2f(Point2f[] curve, int curveLength, int closed);

		[PreserveSig]
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x21B02B0", Offset = "0x21B02B0", VA = "0x21B02B0")]
		public static extern Rect imgproc_boundingRect_InputArray(IntPtr curve);

		[PreserveSig]
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x21B0330", Offset = "0x21B0330", VA = "0x21B0330")]
		public static extern Rect imgproc_boundingRect_Point(Point[] curve, int curveLength);

		[PreserveSig]
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x21B03C8", Offset = "0x21B03C8", VA = "0x21B03C8")]
		public static extern Rect imgproc_boundingRect_Point2f(Point2f[] curve, int curveLength);

		[PreserveSig]
		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x21B0460", Offset = "0x21B0460", VA = "0x21B0460")]
		public static extern double imgproc_contourArea_InputArray(IntPtr contour, int oriented);

		[PreserveSig]
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x21B04F0", Offset = "0x21B04F0", VA = "0x21B04F0")]
		public static extern double imgproc_contourArea_Point(Point[] contour, int contourLength, int oriented);

		[PreserveSig]
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x21B0590", Offset = "0x21B0590", VA = "0x21B0590")]
		public static extern double imgproc_contourArea_Point2f(Point2f[] contour, int contourLength, int oriented);

		[PreserveSig]
		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x21B0630", Offset = "0x21B0630", VA = "0x21B0630")]
		public static extern RotatedRect imgproc_minAreaRect_InputArray(IntPtr points);

		[PreserveSig]
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x21B06C0", Offset = "0x21B06C0", VA = "0x21B06C0")]
		public static extern RotatedRect imgproc_minAreaRect_Point(Point[] points, int pointsLength);

		[PreserveSig]
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x21B0760", Offset = "0x21B0760", VA = "0x21B0760")]
		public static extern RotatedRect imgproc_minAreaRect_Point2f(Point2f[] points, int pointsLength);

		[PreserveSig]
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x21B0800", Offset = "0x21B0800", VA = "0x21B0800")]
		public static extern void imgproc_minEnclosingCircle_InputArray(IntPtr points, out Point2f center, out float radius);

		[PreserveSig]
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x21B0898", Offset = "0x21B0898", VA = "0x21B0898")]
		public static extern void imgproc_minEnclosingCircle_Point(Point[] points, int pointsLength, out Point2f center, out float radius);

		[PreserveSig]
		[Token(Token = "0x6000600")]
		[Address(RVA = "0x21B0948", Offset = "0x21B0948", VA = "0x21B0948")]
		public static extern void imgproc_minEnclosingCircle_Point2f(Point2f[] points, int pointsLength, out Point2f center, out float radius);

		[PreserveSig]
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x21B09F8", Offset = "0x21B09F8", VA = "0x21B09F8")]
		public static extern double imgproc_matchShapes_InputArray(IntPtr contour1, IntPtr contour2, int method, double parameter);

		[PreserveSig]
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x21B0AA0", Offset = "0x21B0AA0", VA = "0x21B0AA0")]
		public static extern double imgproc_matchShapes_Point(Point[] contour1, int contour1Length, Point[] contour2, int contour2Length, int method, double parameter);

		[PreserveSig]
		[Token(Token = "0x6000603")]
		[Address(RVA = "0x21B0B70", Offset = "0x21B0B70", VA = "0x21B0B70")]
		public static extern void imgproc_convexHull_InputArray(IntPtr points, IntPtr hull, int clockwise, int returnPoints);

		[PreserveSig]
		[Token(Token = "0x6000604")]
		[Address(RVA = "0x21B0C18", Offset = "0x21B0C18", VA = "0x21B0C18")]
		public static extern void imgproc_convexHull_Point_ReturnsPoints(Point[] points, int pointsLength, out IntPtr hull, int clockwise);

		[PreserveSig]
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x21B0CC8", Offset = "0x21B0CC8", VA = "0x21B0CC8")]
		public static extern void imgproc_convexHull_Point2f_ReturnsPoints(Point2f[] points, int pointsLength, out IntPtr hull, int clockwise);

		[PreserveSig]
		[Token(Token = "0x6000606")]
		[Address(RVA = "0x21B0D78", Offset = "0x21B0D78", VA = "0x21B0D78")]
		public static extern void imgproc_convexHull_Point_ReturnsIndices(Point[] points, int pointsLength, out IntPtr hull, int clockwise);

		[PreserveSig]
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x21B0E28", Offset = "0x21B0E28", VA = "0x21B0E28")]
		public static extern void imgproc_convexHull_Point2f_ReturnsIndices(Point2f[] points, int pointsLength, out IntPtr hull, int clockwise);

		[PreserveSig]
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x21B0ED8", Offset = "0x21B0ED8", VA = "0x21B0ED8")]
		public static extern void imgproc_convexityDefects_InputArray(IntPtr contour, IntPtr convexHull, IntPtr convexityDefects);

		[PreserveSig]
		[Token(Token = "0x6000609")]
		[Address(RVA = "0x21B0F70", Offset = "0x21B0F70", VA = "0x21B0F70")]
		public static extern void imgproc_convexityDefects_Point(Point[] contour, int contourLength, int[] convexHull, int convexHullLength, out IntPtr convexityDefects);

		[PreserveSig]
		[Token(Token = "0x600060A")]
		[Address(RVA = "0x21B1030", Offset = "0x21B1030", VA = "0x21B1030")]
		public static extern void imgproc_convexityDefects_Point2f(Point2f[] contour, int contourLength, int[] convexHull, int convexHullLength, out IntPtr convexityDefects);

		[PreserveSig]
		[Token(Token = "0x600060B")]
		[Address(RVA = "0x21B10EC", Offset = "0x21B10EC", VA = "0x21B10EC")]
		public static extern int imgproc_isContourConvex_InputArray(IntPtr contour);

		[PreserveSig]
		[Token(Token = "0x600060C")]
		[Address(RVA = "0x21B116C", Offset = "0x21B116C", VA = "0x21B116C")]
		public static extern int imgproc_isContourConvex_Point(Point[] contour, int contourLength);

		[PreserveSig]
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x21B1204", Offset = "0x21B1204", VA = "0x21B1204")]
		public static extern int imgproc_isContourConvex_Point2f(Point2f[] contour, int contourLength);

		[PreserveSig]
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x21B129C", Offset = "0x21B129C", VA = "0x21B129C")]
		public static extern float imgproc_intersectConvexConvex_InputArray(IntPtr p1, IntPtr p2, IntPtr p12, int handleNested);

		[PreserveSig]
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x21B1344", Offset = "0x21B1344", VA = "0x21B1344")]
		public static extern float imgproc_intersectConvexConvex_Point(Point[] p1, int p1Length, Point[] p2, int p2Length, out IntPtr p12, int handleNested);

		[PreserveSig]
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x21B1414", Offset = "0x21B1414", VA = "0x21B1414")]
		public static extern float imgproc_intersectConvexConvex_Point2f(Point2f[] p1, int p1Length, Point2f[] p2, int p2Length, out IntPtr p12, int handleNested);

		[PreserveSig]
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x21B14E4", Offset = "0x21B14E4", VA = "0x21B14E4")]
		public static extern RotatedRect imgproc_fitEllipse_InputArray(IntPtr points);

		[PreserveSig]
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x21B1574", Offset = "0x21B1574", VA = "0x21B1574")]
		public static extern RotatedRect imgproc_fitEllipse_Point(Point[] points, int pointsLength);

		[PreserveSig]
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x21B1614", Offset = "0x21B1614", VA = "0x21B1614")]
		public static extern RotatedRect imgproc_fitEllipse_Point2f(Point2f[] points, int pointsLength);

		[PreserveSig]
		[Token(Token = "0x6000614")]
		[Address(RVA = "0x21B16B4", Offset = "0x21B16B4", VA = "0x21B16B4")]
		public static extern void imgproc_fitLine_InputArray(IntPtr points, IntPtr line, int distType, double param, double reps, double aeps);

		[PreserveSig]
		[Token(Token = "0x6000615")]
		[Address(RVA = "0x21B1774", Offset = "0x21B1774", VA = "0x21B1774")]
		public static extern void imgproc_fitLine_Point(Point[] points, int pointsLength, [In][Out] float[] line, int distType, double param, double reps, double aeps);

		[PreserveSig]
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x21B1854", Offset = "0x21B1854", VA = "0x21B1854")]
		public static extern void imgproc_fitLine_Point2f(Point2f[] points, int pointsLength, [In][Out] float[] line, int distType, double param, double reps, double aeps);

		[PreserveSig]
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x21B1934", Offset = "0x21B1934", VA = "0x21B1934")]
		public static extern void imgproc_fitLine_Point3i(Point3i[] points, int pointsLength, [In][Out] float[] line, int distType, double param, double reps, double aeps);

		[PreserveSig]
		[Token(Token = "0x6000618")]
		[Address(RVA = "0x21B1A14", Offset = "0x21B1A14", VA = "0x21B1A14")]
		public static extern void imgproc_fitLine_Point3f(Point3f[] points, int pointsLength, [In][Out] float[] line, int distType, double param, double reps, double aeps);

		[PreserveSig]
		[Token(Token = "0x6000619")]
		[Address(RVA = "0x21B1AF4", Offset = "0x21B1AF4", VA = "0x21B1AF4")]
		public static extern double imgproc_pointPolygonTest_InputArray(IntPtr contour, Point2f pt, int measureDist);

		[PreserveSig]
		[Token(Token = "0x600061A")]
		[Address(RVA = "0x21B1B9C", Offset = "0x21B1B9C", VA = "0x21B1B9C")]
		public static extern double imgproc_pointPolygonTest_Point(Point[] contour, int contourLength, Point2f pt, int measureDist);

		[PreserveSig]
		[Token(Token = "0x600061B")]
		[Address(RVA = "0x21B1C54", Offset = "0x21B1C54", VA = "0x21B1C54")]
		public static extern double imgproc_pointPolygonTest_Point2f(Point2f[] contour, int contourLength, Point2f pt, int measureDist);

		[PreserveSig]
		[Token(Token = "0x600061C")]
		[Address(RVA = "0x21B1D0C", Offset = "0x21B1D0C", VA = "0x21B1D0C")]
		public static extern int imgproc_rotatedRectangleIntersection_OutputArray(RotatedRect rect1, RotatedRect rect2, IntPtr intersectingRegion);

		[PreserveSig]
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x21B1DC0", Offset = "0x21B1DC0", VA = "0x21B1DC0")]
		public static extern int imgproc_rotatedRectangleIntersection_vector(RotatedRect rect1, RotatedRect rect2, IntPtr intersectingRegion);

		[PreserveSig]
		[Token(Token = "0x600061E")]
		[Address(RVA = "0x21B1E78", Offset = "0x21B1E78", VA = "0x21B1E78")]
		public static extern void imgproc_applyColorMap(IntPtr src, IntPtr dst, int colormap);

		[PreserveSig]
		[Token(Token = "0x600061F")]
		[Address(RVA = "0x21B1F10", Offset = "0x21B1F10", VA = "0x21B1F10")]
		public static extern void imgproc_line(IntPtr img, Point pt1, Point pt2, Scalar color, int thickness, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x21B2000", Offset = "0x21B2000", VA = "0x21B2000")]
		public static extern void imgproc_arrowedLine(IntPtr img, Point pt1, Point pt2, Scalar color, int thickness, int lineType, int shift, double tipLength);

		[PreserveSig]
		[Token(Token = "0x6000621")]
		[Address(RVA = "0x21B2100", Offset = "0x21B2100", VA = "0x21B2100")]
		public static extern void imgproc_rectangle_InputOutputArray(IntPtr img, Point pt1, Point pt2, Scalar color, int thickness, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x6000622")]
		[Address(RVA = "0x21B21F0", Offset = "0x21B21F0", VA = "0x21B21F0")]
		public static extern void imgproc_rectangle_Mat(IntPtr img, Rect rect, Scalar color, int thickness, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x6000623")]
		[Address(RVA = "0x21B22E0", Offset = "0x21B22E0", VA = "0x21B22E0")]
		public static extern void imgproc_circle(IntPtr img, Point center, int radius, Scalar color, int thickness, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x21B23D0", Offset = "0x21B23D0", VA = "0x21B23D0")]
		public static extern void imgproc_ellipse1(IntPtr img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x21B24E8", Offset = "0x21B24E8", VA = "0x21B24E8")]
		public static extern void imgproc_ellipse2(IntPtr img, RotatedRect box, Scalar color, int thickness, int lineType);

		[PreserveSig]
		[Token(Token = "0x6000626")]
		[Address(RVA = "0x21B25D0", Offset = "0x21B25D0", VA = "0x21B25D0")]
		public static extern void imgproc_fillConvexPoly_Mat(IntPtr img, Point[] pts, int npts, Scalar color, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x21B26B8", Offset = "0x21B26B8", VA = "0x21B26B8")]
		public static extern void imgproc_fillConvexPoly_InputOutputArray(IntPtr img, IntPtr points, Scalar color, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x6000628")]
		[Address(RVA = "0x21B2790", Offset = "0x21B2790", VA = "0x21B2790")]
		public static extern void imgproc_fillPoly_Mat(IntPtr img, IntPtr[] pts, int[] npts, int ncontours, Scalar color, int lineType, int shift, Point offset);

		[PreserveSig]
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x21B2898", Offset = "0x21B2898", VA = "0x21B2898")]
		public static extern void imgproc_fillPoly_InputOutputArray(IntPtr img, IntPtr pts, Scalar color, int lineType, int shift, Point offset);

		[PreserveSig]
		[Token(Token = "0x600062A")]
		[Address(RVA = "0x21B2978", Offset = "0x21B2978", VA = "0x21B2978")]
		public static extern void imgproc_polylines_Mat(IntPtr img, IntPtr[] pts, int[] npts, int ncontours, int isClosed, Scalar color, int thickness, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x600062B")]
		[Address(RVA = "0x21B2A90", Offset = "0x21B2A90", VA = "0x21B2A90")]
		public static extern void imgproc_polylines_InputOutputArray(IntPtr img, IntPtr pts, int isClosed, Scalar color, int thickness, int lineType, int shift);

		[PreserveSig]
		[Token(Token = "0x600062C")]
		[Address(RVA = "0x21B2B80", Offset = "0x21B2B80", VA = "0x21B2B80")]
		public static extern int imgproc_clipLine1(Size imgSize, ref Point pt1, ref Point pt2);

		[PreserveSig]
		[Token(Token = "0x600062D")]
		[Address(RVA = "0x21B2C14", Offset = "0x21B2C14", VA = "0x21B2C14")]
		public static extern int imgproc_clipLine2(Rect imgRect, ref Point pt1, ref Point pt2);

		[PreserveSig]
		[Token(Token = "0x600062E")]
		[Address(RVA = "0x21B2CB8", Offset = "0x21B2CB8", VA = "0x21B2CB8")]
		public static extern void imgproc_ellipse2Poly(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, IntPtr pts);

		[PreserveSig]
		[Token(Token = "0x600062F")]
		[Address(RVA = "0x21B2D80", Offset = "0x21B2D80", VA = "0x21B2D80")]
		public static extern void core_putText(IntPtr img, string text, Point org, int fontFace, double fontScale, Scalar color, int thickness, int lineType, int bottomLeftOrigin);

		[PreserveSig]
		[Token(Token = "0x6000630")]
		[Address(RVA = "0x21B2E9C", Offset = "0x21B2E9C", VA = "0x21B2E9C")]
		public static extern Size core_getTextSize(string text, int fontFace, double fontScale, int thickness, out int baseLine);

		[PreserveSig]
		[Token(Token = "0x6000631")]
		[Address(RVA = "0x21B2F6C", Offset = "0x21B2F6C", VA = "0x21B2F6C")]
		public static extern IntPtr imgproc_createCLAHE(double clipLimit, Size tileGridSize);

		[PreserveSig]
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x21B2FFC", Offset = "0x21B2FFC", VA = "0x21B2FFC")]
		public static extern void imgproc_Ptr_CLAHE_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000633")]
		[Address(RVA = "0x21B307C", Offset = "0x21B307C", VA = "0x21B307C")]
		public static extern IntPtr imgproc_Ptr_CLAHE_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000634")]
		[Address(RVA = "0x21B30FC", Offset = "0x21B30FC", VA = "0x21B30FC")]
		public static extern void imgproc_CLAHE_apply(IntPtr obj, IntPtr src, IntPtr dst);

		[PreserveSig]
		[Token(Token = "0x6000635")]
		[Address(RVA = "0x21B3194", Offset = "0x21B3194", VA = "0x21B3194")]
		public static extern void imgproc_CLAHE_setClipLimit(IntPtr obj, double clipLimit);

		[PreserveSig]
		[Token(Token = "0x6000636")]
		[Address(RVA = "0x21B3224", Offset = "0x21B3224", VA = "0x21B3224")]
		public static extern double imgproc_CLAHE_getClipLimit(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x21B32A4", Offset = "0x21B32A4", VA = "0x21B32A4")]
		public static extern void imgproc_CLAHE_setTilesGridSize(IntPtr obj, Size tileGridSize);

		[PreserveSig]
		[Token(Token = "0x6000638")]
		[Address(RVA = "0x21B3334", Offset = "0x21B3334", VA = "0x21B3334")]
		public static extern Size imgproc_CLAHE_getTilesGridSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x21B33B4", Offset = "0x21B33B4", VA = "0x21B33B4")]
		public static extern void imgproc_CLAHE_collectGarbage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600063A")]
		[Address(RVA = "0x21B3434", Offset = "0x21B3434", VA = "0x21B3434")]
		public static extern void imgproc_GeneralizedHough_setTemplate1(IntPtr obj, IntPtr templ, Point templCenter);

		[PreserveSig]
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x21B34CC", Offset = "0x21B34CC", VA = "0x21B34CC")]
		public static extern void imgproc_GeneralizedHough_setTemplate2(IntPtr obj, IntPtr edges, IntPtr dx, IntPtr dy, Point templCenter);

		[PreserveSig]
		[Token(Token = "0x600063C")]
		[Address(RVA = "0x21B357C", Offset = "0x21B357C", VA = "0x21B357C")]
		public static extern void imgproc_GeneralizedHough_detect1(IntPtr obj, IntPtr image, IntPtr positions, IntPtr votes);

		[PreserveSig]
		[Token(Token = "0x600063D")]
		[Address(RVA = "0x21B3620", Offset = "0x21B3620", VA = "0x21B3620")]
		public static extern void imgproc_GeneralizedHough_detect2(IntPtr obj, IntPtr edges, IntPtr dx, IntPtr dy, IntPtr positions, IntPtr votes);

		[PreserveSig]
		[Token(Token = "0x600063E")]
		[Address(RVA = "0x21B36E0", Offset = "0x21B36E0", VA = "0x21B36E0")]
		public static extern void imgproc_GeneralizedHough_setCannyLowThresh(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600063F")]
		[Address(RVA = "0x21B3770", Offset = "0x21B3770", VA = "0x21B3770")]
		public static extern int imgproc_GeneralizedHough_getCannyLowThresh(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000640")]
		[Address(RVA = "0x21B37F0", Offset = "0x21B37F0", VA = "0x21B37F0")]
		public static extern void imgproc_GeneralizedHough_setCannyHighThresh(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x21B3880", Offset = "0x21B3880", VA = "0x21B3880")]
		public static extern int imgproc_GeneralizedHough_getCannyHighThresh(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000642")]
		[Address(RVA = "0x21B3900", Offset = "0x21B3900", VA = "0x21B3900")]
		public static extern void imgproc_GeneralizedHough_setMinDist(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000643")]
		[Address(RVA = "0x21B3990", Offset = "0x21B3990", VA = "0x21B3990")]
		public static extern double imgproc_GeneralizedHough_getMinDist(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000644")]
		[Address(RVA = "0x21B3A10", Offset = "0x21B3A10", VA = "0x21B3A10")]
		public static extern void imgproc_GeneralizedHough_setDp(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000645")]
		[Address(RVA = "0x21B3AA0", Offset = "0x21B3AA0", VA = "0x21B3AA0")]
		public static extern double imgproc_GeneralizedHough_getDp(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000646")]
		[Address(RVA = "0x21B3B20", Offset = "0x21B3B20", VA = "0x21B3B20")]
		public static extern void imgproc_GeneralizedHough_setMaxBufferSize(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x21B3BB0", Offset = "0x21B3BB0", VA = "0x21B3BB0")]
		public static extern int imgproc_GeneralizedHough_getMaxBufferSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000648")]
		[Address(RVA = "0x21B3C30", Offset = "0x21B3C30", VA = "0x21B3C30")]
		public static extern IntPtr imgproc_createGeneralizedHoughBallard();

		[PreserveSig]
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x21B3CA4", Offset = "0x21B3CA4", VA = "0x21B3CA4")]
		public static extern IntPtr imgproc_Ptr_GeneralizedHoughBallard_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x21B3D24", Offset = "0x21B3D24", VA = "0x21B3D24")]
		public static extern void imgproc_Ptr_GeneralizedHoughBallard_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x21B3DA4", Offset = "0x21B3DA4", VA = "0x21B3DA4")]
		public static extern void imgproc_GeneralizedHoughBallard_setLevels(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x21B3E34", Offset = "0x21B3E34", VA = "0x21B3E34")]
		public static extern int imgproc_GeneralizedHoughBallard_getLevels(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x21B3EB4", Offset = "0x21B3EB4", VA = "0x21B3EB4")]
		public static extern void imgproc_GeneralizedHoughBallard_setVotesThreshold(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x21B3F44", Offset = "0x21B3F44", VA = "0x21B3F44")]
		public static extern int imgproc_GeneralizedHoughBallard_getVotesThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600064F")]
		[Address(RVA = "0x21B3FC4", Offset = "0x21B3FC4", VA = "0x21B3FC4")]
		public static extern IntPtr imgproc_createGeneralizedHoughGuil();

		[PreserveSig]
		[Token(Token = "0x6000650")]
		[Address(RVA = "0x21B4038", Offset = "0x21B4038", VA = "0x21B4038")]
		public static extern IntPtr imgproc_Ptr_GeneralizedHoughGuil_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x21B40B8", Offset = "0x21B40B8", VA = "0x21B40B8")]
		public static extern void imgproc_Ptr_GeneralizedHoughGuil_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000652")]
		[Address(RVA = "0x21B4138", Offset = "0x21B4138", VA = "0x21B4138")]
		public static extern void imgproc_GeneralizedHoughGuil_setXi(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x21B41C8", Offset = "0x21B41C8", VA = "0x21B41C8")]
		public static extern double imgproc_GeneralizedHoughGuil_getXi(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000654")]
		[Address(RVA = "0x21B4248", Offset = "0x21B4248", VA = "0x21B4248")]
		public static extern void imgproc_GeneralizedHoughGuil_setLevels(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000655")]
		[Address(RVA = "0x21B42D8", Offset = "0x21B42D8", VA = "0x21B42D8")]
		public static extern int imgproc_GeneralizedHoughGuil_getLevels(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000656")]
		[Address(RVA = "0x21B4358", Offset = "0x21B4358", VA = "0x21B4358")]
		public static extern void imgproc_GeneralizedHoughGuil_setAngleEpsilon(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000657")]
		[Address(RVA = "0x21B43E8", Offset = "0x21B43E8", VA = "0x21B43E8")]
		public static extern double imgproc_GeneralizedHoughGuil_getAngleEpsilon(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000658")]
		[Address(RVA = "0x21B4468", Offset = "0x21B4468", VA = "0x21B4468")]
		public static extern void imgproc_GeneralizedHoughGuil_setMinAngle(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000659")]
		[Address(RVA = "0x21B44F8", Offset = "0x21B44F8", VA = "0x21B44F8")]
		public static extern double imgproc_GeneralizedHoughGuil_getMinAngle(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600065A")]
		[Address(RVA = "0x21B4578", Offset = "0x21B4578", VA = "0x21B4578")]
		public static extern void imgproc_GeneralizedHoughGuil_setMaxAngle(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x600065B")]
		[Address(RVA = "0x21B4608", Offset = "0x21B4608", VA = "0x21B4608")]
		public static extern double imgproc_GeneralizedHoughGuil_getMaxAngle(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600065C")]
		[Address(RVA = "0x21B4688", Offset = "0x21B4688", VA = "0x21B4688")]
		public static extern void imgproc_GeneralizedHoughGuil_setAngleStep(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x21B4718", Offset = "0x21B4718", VA = "0x21B4718")]
		public static extern double imgproc_GeneralizedHoughGuil_getAngleStep(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x21B4798", Offset = "0x21B4798", VA = "0x21B4798")]
		public static extern void imgproc_GeneralizedHoughGuil_setAngleThresh(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x21B4828", Offset = "0x21B4828", VA = "0x21B4828")]
		public static extern int imgproc_GeneralizedHoughGuil_getAngleThresh(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000660")]
		[Address(RVA = "0x21B48A8", Offset = "0x21B48A8", VA = "0x21B48A8")]
		public static extern void imgproc_GeneralizedHoughGuil_setMinScale(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000661")]
		[Address(RVA = "0x21B4938", Offset = "0x21B4938", VA = "0x21B4938")]
		public static extern double imgproc_GeneralizedHoughGuil_getMinScale(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000662")]
		[Address(RVA = "0x21B49B8", Offset = "0x21B49B8", VA = "0x21B49B8")]
		public static extern void imgproc_GeneralizedHoughGuil_setMaxScale(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000663")]
		[Address(RVA = "0x21B4A48", Offset = "0x21B4A48", VA = "0x21B4A48")]
		public static extern double imgproc_GeneralizedHoughGuil_getMaxScale(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x21B4AC8", Offset = "0x21B4AC8", VA = "0x21B4AC8")]
		public static extern void imgproc_GeneralizedHoughGuil_setScaleStep(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x21B4B58", Offset = "0x21B4B58", VA = "0x21B4B58")]
		public static extern double imgproc_GeneralizedHoughGuil_getScaleStep(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000666")]
		[Address(RVA = "0x21B4BD8", Offset = "0x21B4BD8", VA = "0x21B4BD8")]
		public static extern void imgproc_GeneralizedHoughGuil_setScaleThresh(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x21B4C68", Offset = "0x21B4C68", VA = "0x21B4C68")]
		public static extern int imgproc_GeneralizedHoughGuil_getScaleThresh(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x21B4CE8", Offset = "0x21B4CE8", VA = "0x21B4CE8")]
		public static extern void imgproc_GeneralizedHoughGuil_setPosThresh(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000669")]
		[Address(RVA = "0x21B4D78", Offset = "0x21B4D78", VA = "0x21B4D78")]
		public static extern int imgproc_GeneralizedHoughGuil_getPosThresh(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x21B4DF8", Offset = "0x21B4DF8", VA = "0x21B4DF8")]
		public static extern IntPtr imgproc_LineIterator_new(IntPtr img, Point pt1, Point pt2, int connectivity, int leftToRight);

		[PreserveSig]
		[Token(Token = "0x600066B")]
		[Address(RVA = "0x21B4EA8", Offset = "0x21B4EA8", VA = "0x21B4EA8")]
		public static extern void imgproc_LineIterator_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600066C")]
		[Address(RVA = "0x21B4F28", Offset = "0x21B4F28", VA = "0x21B4F28")]
		public static extern IntPtr imgproc_LineIterator_operatorEntity(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600066D")]
		[Address(RVA = "0x21B4FA8", Offset = "0x21B4FA8", VA = "0x21B4FA8")]
		public static extern void imgproc_LineIterator_operatorPP(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x21B5028", Offset = "0x21B5028", VA = "0x21B5028")]
		public static extern Point imgproc_LineIterator_pos(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600066F")]
		[Address(RVA = "0x21B50A8", Offset = "0x21B50A8", VA = "0x21B50A8")]
		public static extern IntPtr imgproc_LineIterator_ptr_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x21B5128", Offset = "0x21B5128", VA = "0x21B5128")]
		public static extern void imgproc_LineIterator_ptr_set(IntPtr obj, IntPtr val);

		[PreserveSig]
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x21B51B8", Offset = "0x21B51B8", VA = "0x21B51B8")]
		public static extern IntPtr imgproc_LineIterator_ptr0_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x21B5238", Offset = "0x21B5238", VA = "0x21B5238")]
		public static extern int imgproc_LineIterator_step_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x21B52B8", Offset = "0x21B52B8", VA = "0x21B52B8")]
		public static extern void imgproc_LineIterator_step_set(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x21B5348", Offset = "0x21B5348", VA = "0x21B5348")]
		public static extern int imgproc_LineIterator_elemSize_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x21B53C8", Offset = "0x21B53C8", VA = "0x21B53C8")]
		public static extern void imgproc_LineIterator_elemSize_set(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x21B5458", Offset = "0x21B5458", VA = "0x21B5458")]
		public static extern int imgproc_LineIterator_err_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x21B54D8", Offset = "0x21B54D8", VA = "0x21B54D8")]
		public static extern void imgproc_LineIterator_err_set(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000678")]
		[Address(RVA = "0x21B5568", Offset = "0x21B5568", VA = "0x21B5568")]
		public static extern int imgproc_LineIterator_count_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000679")]
		[Address(RVA = "0x21B55E8", Offset = "0x21B55E8", VA = "0x21B55E8")]
		public static extern void imgproc_LineIterator_count_set(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x21B5678", Offset = "0x21B5678", VA = "0x21B5678")]
		public static extern int imgproc_LineIterator_minusDelta_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600067B")]
		[Address(RVA = "0x21B56F8", Offset = "0x21B56F8", VA = "0x21B56F8")]
		public static extern void imgproc_LineIterator_minusDelta_set(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600067C")]
		[Address(RVA = "0x21B5788", Offset = "0x21B5788", VA = "0x21B5788")]
		public static extern int imgproc_LineIterator_plusDelta_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600067D")]
		[Address(RVA = "0x21B5808", Offset = "0x21B5808", VA = "0x21B5808")]
		public static extern void imgproc_LineIterator_plusDelta_set(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600067E")]
		[Address(RVA = "0x21B5898", Offset = "0x21B5898", VA = "0x21B5898")]
		public static extern int imgproc_LineIterator_minusStep_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600067F")]
		[Address(RVA = "0x21B5918", Offset = "0x21B5918", VA = "0x21B5918")]
		public static extern void imgproc_LineIterator_minusStep_set(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000680")]
		[Address(RVA = "0x21B59A8", Offset = "0x21B59A8", VA = "0x21B59A8")]
		public static extern int imgproc_LineIterator_plusStep_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000681")]
		[Address(RVA = "0x21B5A28", Offset = "0x21B5A28", VA = "0x21B5A28")]
		public static extern void imgproc_LineIterator_plusStep_set(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000682")]
		[Address(RVA = "0x21B5AB8", Offset = "0x21B5AB8", VA = "0x21B5AB8")]
		public static extern void imgproc_LineSegmentDetector_detect_OutputArray(IntPtr obj, IntPtr image, IntPtr lines, IntPtr width, IntPtr prec, IntPtr nfa);

		[PreserveSig]
		[Token(Token = "0x6000683")]
		[Address(RVA = "0x21B5B78", Offset = "0x21B5B78", VA = "0x21B5B78")]
		public static extern void imgproc_LineSegmentDetector_detect_vector(IntPtr obj, IntPtr image, IntPtr lines, IntPtr width, IntPtr prec, IntPtr nfa);

		[PreserveSig]
		[Token(Token = "0x6000684")]
		[Address(RVA = "0x21B5C38", Offset = "0x21B5C38", VA = "0x21B5C38")]
		public static extern void imgproc_LineSegmentDetector_drawSegments(IntPtr obj, IntPtr image, IntPtr lines);

		[PreserveSig]
		[Token(Token = "0x6000685")]
		[Address(RVA = "0x21B5CD0", Offset = "0x21B5CD0", VA = "0x21B5CD0")]
		public static extern int imgproc_LineSegmentDetector_compareSegments(IntPtr obj, Size size, IntPtr lines1, IntPtr lines2, IntPtr image);

		[PreserveSig]
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x21B5D80", Offset = "0x21B5D80", VA = "0x21B5D80")]
		public static extern IntPtr imgproc_createLineSegmentDetector(int refine, double scale, double sigma_scale, double quant, double ang_th, double log_eps, double density_th, int n_bins);

		[PreserveSig]
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x21B5E58", Offset = "0x21B5E58", VA = "0x21B5E58")]
		public static extern void imgproc_Ptr_LineSegmentDetector_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x21B5ED8", Offset = "0x21B5ED8", VA = "0x21B5ED8")]
		public static extern IntPtr imgproc_Ptr_LineSegmentDetector_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000689")]
		[Address(RVA = "0x21B5F58", Offset = "0x21B5F58", VA = "0x21B5F58")]
		public static extern IntPtr imgproc_Subdiv2D_new();

		[PreserveSig]
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x21B5FCC", Offset = "0x21B5FCC", VA = "0x21B5FCC")]
		public static extern IntPtr imgproc_Subdiv2D_new(Rect rect);

		[PreserveSig]
		[Token(Token = "0x600068B")]
		[Address(RVA = "0x21B605C", Offset = "0x21B605C", VA = "0x21B605C")]
		public static extern void imgproc_Subdiv2D_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x21B60DC", Offset = "0x21B60DC", VA = "0x21B60DC")]
		public static extern void imgproc_Subdiv2D_initDelaunay(IntPtr obj, Rect rect);

		[PreserveSig]
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x21B6174", Offset = "0x21B6174", VA = "0x21B6174")]
		public static extern int imgproc_Subdiv2D_insert(IntPtr obj, Point2f pt);

		[PreserveSig]
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x21B620C", Offset = "0x21B620C", VA = "0x21B620C")]
		public static extern void imgproc_Subdiv2D_insert(IntPtr obj, Point2f[] ptArray, int length);

		[PreserveSig]
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x21B62AC", Offset = "0x21B62AC", VA = "0x21B62AC")]
		public static extern int imgproc_Subdiv2D_locate(IntPtr obj, Point2f pt, out int edge, out int vertex);

		[PreserveSig]
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x21B635C", Offset = "0x21B635C", VA = "0x21B635C")]
		public static extern int imgproc_Subdiv2D_findNearest(IntPtr obj, Point2f pt, out Point2f nearestPt);

		[PreserveSig]
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x21B6404", Offset = "0x21B6404", VA = "0x21B6404")]
		public static extern void imgproc_Subdiv2D_getEdgeList(IntPtr obj, out IntPtr edgeList);

		[PreserveSig]
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x21B6494", Offset = "0x21B6494", VA = "0x21B6494")]
		public static extern void imgproc_Subdiv2D_getTriangleList(IntPtr obj, out IntPtr triangleList);

		[PreserveSig]
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x21B6524", Offset = "0x21B6524", VA = "0x21B6524")]
		public static extern void imgproc_Subdiv2D_getVoronoiFacetList(IntPtr obj, int[] idx, int idxCount, out IntPtr facetList, out IntPtr facetCenters);

		[PreserveSig]
		[Token(Token = "0x6000694")]
		[Address(RVA = "0x21B65D8", Offset = "0x21B65D8", VA = "0x21B65D8")]
		public static extern void imgproc_Subdiv2D_getVoronoiFacetList(IntPtr obj, IntPtr idx, int idxCount, out IntPtr facetList, out IntPtr facetCenters);

		[PreserveSig]
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x21B6684", Offset = "0x21B6684", VA = "0x21B6684")]
		public static extern Point2f imgproc_Subdiv2D_getVertex(IntPtr obj, int vertex, out int firstEdge);

		[PreserveSig]
		[Token(Token = "0x6000696")]
		[Address(RVA = "0x21B671C", Offset = "0x21B671C", VA = "0x21B671C")]
		public static extern int imgproc_Subdiv2D_getEdge(IntPtr obj, int edge, int nextEdgeType);

		[PreserveSig]
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x21B67B4", Offset = "0x21B67B4", VA = "0x21B67B4")]
		public static extern int imgproc_Subdiv2D_nextEdge(IntPtr obj, int edge);

		[PreserveSig]
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x21B6844", Offset = "0x21B6844", VA = "0x21B6844")]
		public static extern int imgproc_Subdiv2D_rotateEdge(IntPtr obj, int edge, int rotate);

		[PreserveSig]
		[Token(Token = "0x6000699")]
		[Address(RVA = "0x21B68DC", Offset = "0x21B68DC", VA = "0x21B68DC")]
		public static extern int imgproc_Subdiv2D_symEdge(IntPtr obj, int edge);

		[PreserveSig]
		[Token(Token = "0x600069A")]
		[Address(RVA = "0x21B696C", Offset = "0x21B696C", VA = "0x21B696C")]
		public static extern int imgproc_Subdiv2D_edgeOrg(IntPtr obj, int edge, out Point2f orgpt);

		[PreserveSig]
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x21B6A04", Offset = "0x21B6A04", VA = "0x21B6A04")]
		public static extern int imgproc_Subdiv2D_edgeDst(IntPtr obj, int edge, out Point2f dstpt);

		[PreserveSig]
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x21B6A9C", Offset = "0x21B6A9C", VA = "0x21B6A9C")]
		public static extern void ml_ANN_MLP_setTrainMethod(IntPtr obj, int method, double param1, double param2);

		[PreserveSig]
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x21B6B44", Offset = "0x21B6B44", VA = "0x21B6B44")]
		public static extern int ml_ANN_MLP_getTrainMethod(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600069E")]
		[Address(RVA = "0x21B6BC4", Offset = "0x21B6BC4", VA = "0x21B6BC4")]
		public static extern void ml_ANN_MLP_setActivationFunction(IntPtr obj, int type, double param1, double param2);

		[PreserveSig]
		[Token(Token = "0x600069F")]
		[Address(RVA = "0x21B6C6C", Offset = "0x21B6C6C", VA = "0x21B6C6C")]
		public static extern void ml_ANN_MLP_setLayerSizes(IntPtr obj, IntPtr layerSizes);

		[PreserveSig]
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x21B6CFC", Offset = "0x21B6CFC", VA = "0x21B6CFC")]
		public static extern IntPtr ml_ANN_MLP_getLayerSizes(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x21B6D7C", Offset = "0x21B6D7C", VA = "0x21B6D7C")]
		public static extern TermCriteria ml_ANN_MLP_getTermCriteria(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x21B6DFC", Offset = "0x21B6DFC", VA = "0x21B6DFC")]
		public static extern void ml_ANN_MLP_setTermCriteria(IntPtr obj, TermCriteria val);

		[PreserveSig]
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x21B6E94", Offset = "0x21B6E94", VA = "0x21B6E94")]
		public static extern double ml_ANN_MLP_getBackpropWeightScale(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x21B6F14", Offset = "0x21B6F14", VA = "0x21B6F14")]
		public static extern void ml_ANN_MLP_setBackpropWeightScale(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x21B6FA4", Offset = "0x21B6FA4", VA = "0x21B6FA4")]
		public static extern double ml_ANN_MLP_getBackpropMomentumScale(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x21B7024", Offset = "0x21B7024", VA = "0x21B7024")]
		public static extern void ml_ANN_MLP_setBackpropMomentumScale(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x21B70B4", Offset = "0x21B70B4", VA = "0x21B70B4")]
		public static extern double ml_ANN_MLP_getRpropDW0(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x21B7134", Offset = "0x21B7134", VA = "0x21B7134")]
		public static extern void ml_ANN_MLP_setRpropDW0(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x21B71C4", Offset = "0x21B71C4", VA = "0x21B71C4")]
		public static extern double ml_ANN_MLP_getRpropDWPlus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x21B7244", Offset = "0x21B7244", VA = "0x21B7244")]
		public static extern void ml_ANN_MLP_setRpropDWPlus(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x21B72D4", Offset = "0x21B72D4", VA = "0x21B72D4")]
		public static extern double ml_ANN_MLP_getRpropDWMinus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x21B7354", Offset = "0x21B7354", VA = "0x21B7354")]
		public static extern void ml_ANN_MLP_setRpropDWMinus(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x21B73E4", Offset = "0x21B73E4", VA = "0x21B73E4")]
		public static extern double ml_ANN_MLP_getRpropDWMin(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x21B7464", Offset = "0x21B7464", VA = "0x21B7464")]
		public static extern void ml_ANN_MLP_setRpropDWMin(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x21B74F4", Offset = "0x21B74F4", VA = "0x21B74F4")]
		public static extern double ml_ANN_MLP_getRpropDWMax(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x21B7574", Offset = "0x21B7574", VA = "0x21B7574")]
		public static extern void ml_ANN_MLP_setRpropDWMax(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x21B7604", Offset = "0x21B7604", VA = "0x21B7604")]
		public static extern IntPtr ml_ANN_MLP_getWeights(IntPtr obj, int layerIdx);

		[PreserveSig]
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x21B7694", Offset = "0x21B7694", VA = "0x21B7694")]
		public static extern IntPtr ml_ANN_MLP_create();

		[PreserveSig]
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x21B7704", Offset = "0x21B7704", VA = "0x21B7704")]
		public static extern void ml_Ptr_ANN_MLP_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x21B7784", Offset = "0x21B7784", VA = "0x21B7784")]
		public static extern IntPtr ml_Ptr_ANN_MLP_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x21B7804", Offset = "0x21B7804", VA = "0x21B7804")]
		public static extern int ml_Boost_getBoostType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x21B7884", Offset = "0x21B7884", VA = "0x21B7884")]
		public static extern void ml_Boost_setBoostType(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x21B7914", Offset = "0x21B7914", VA = "0x21B7914")]
		public static extern int ml_Boost_getWeakCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x21B7994", Offset = "0x21B7994", VA = "0x21B7994")]
		public static extern void ml_Boost_setWeakCount(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x21B7A24", Offset = "0x21B7A24", VA = "0x21B7A24")]
		public static extern double ml_Boost_getWeightTrimRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x21B7AA4", Offset = "0x21B7AA4", VA = "0x21B7AA4")]
		public static extern void ml_Boost_setWeightTrimRate(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x21B7B34", Offset = "0x21B7B34", VA = "0x21B7B34")]
		public static extern IntPtr ml_Boost_create();

		[PreserveSig]
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x21B7BA8", Offset = "0x21B7BA8", VA = "0x21B7BA8")]
		public static extern void ml_Ptr_Boost_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x21B7C28", Offset = "0x21B7C28", VA = "0x21B7C28")]
		public static extern IntPtr ml_Ptr_Boost_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x21B7CA8", Offset = "0x21B7CA8", VA = "0x21B7CA8")]
		public static extern int ml_EM_getClustersNumber(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x21B7D28", Offset = "0x21B7D28", VA = "0x21B7D28")]
		public static extern void ml_EM_setClustersNumber(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x21B7DB8", Offset = "0x21B7DB8", VA = "0x21B7DB8")]
		public static extern int ml_EM_getCovarianceMatrixType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x21B7E38", Offset = "0x21B7E38", VA = "0x21B7E38")]
		public static extern void ml_EM_setCovarianceMatrixType(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x21B7EC8", Offset = "0x21B7EC8", VA = "0x21B7EC8")]
		public static extern TermCriteria ml_EM_getTermCriteria(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x21B7F48", Offset = "0x21B7F48", VA = "0x21B7F48")]
		public static extern void ml_EM_setTermCriteria(IntPtr obj, TermCriteria val);

		[PreserveSig]
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x21B7FE0", Offset = "0x21B7FE0", VA = "0x21B7FE0")]
		public static extern IntPtr ml_EM_getWeights(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x21B8060", Offset = "0x21B8060", VA = "0x21B8060")]
		public static extern IntPtr ml_EM_getMeans(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x21B80E0", Offset = "0x21B80E0", VA = "0x21B80E0")]
		public static extern void ml_EM_getCovs(IntPtr obj, IntPtr covs);

		[PreserveSig]
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x21B8170", Offset = "0x21B8170", VA = "0x21B8170")]
		public static extern Vec2d ml_EM_predict2(IntPtr model, IntPtr sample, IntPtr probs);

		[PreserveSig]
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x21B8208", Offset = "0x21B8208", VA = "0x21B8208")]
		public static extern int ml_EM_trainEM(IntPtr obj, IntPtr samples, IntPtr logLikelihoods, IntPtr labels, IntPtr probs);

		[PreserveSig]
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x21B82B8", Offset = "0x21B82B8", VA = "0x21B82B8")]
		public static extern int ml_EM_trainE(IntPtr model, IntPtr samples, IntPtr means0, IntPtr covs0, IntPtr weights0, IntPtr logLikelihoods, IntPtr labels, IntPtr probs);

		[PreserveSig]
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x21B8390", Offset = "0x21B8390", VA = "0x21B8390")]
		public static extern int ml_EM_trainM(IntPtr model, IntPtr samples, IntPtr probs0, IntPtr logLikelihoods, IntPtr labels, IntPtr probs);

		[PreserveSig]
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x21B8450", Offset = "0x21B8450", VA = "0x21B8450")]
		public static extern IntPtr ml_EM_create();

		[PreserveSig]
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x21B84C4", Offset = "0x21B84C4", VA = "0x21B84C4")]
		public static extern IntPtr ml_Ptr_EM_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x21B8544", Offset = "0x21B8544", VA = "0x21B8544")]
		public static extern void ml_Ptr_EM_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x21B85C4", Offset = "0x21B85C4", VA = "0x21B85C4")]
		public static extern int ml_KNearest_getDefaultK(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x21B8644", Offset = "0x21B8644", VA = "0x21B8644")]
		public static extern void ml_KNearest_setDefaultK(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x21B86D4", Offset = "0x21B86D4", VA = "0x21B86D4")]
		public static extern int ml_KNearest_getIsClassifier(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x21B8754", Offset = "0x21B8754", VA = "0x21B8754")]
		public static extern void ml_KNearest_setIsClassifier(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x21B87E4", Offset = "0x21B87E4", VA = "0x21B87E4")]
		public static extern int ml_KNearest_getEmax(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x21B8864", Offset = "0x21B8864", VA = "0x21B8864")]
		public static extern void ml_KNearest_setEmax(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x21B88F4", Offset = "0x21B88F4", VA = "0x21B88F4")]
		public static extern int ml_KNearest_getAlgorithmType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x21B8974", Offset = "0x21B8974", VA = "0x21B8974")]
		public static extern void ml_KNearest_setAlgorithmType(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x21B8A04", Offset = "0x21B8A04", VA = "0x21B8A04")]
		public static extern float ml_KNearest_findNearest(IntPtr obj, IntPtr samples, int k, IntPtr results, IntPtr neighborResponses, IntPtr dist);

		[PreserveSig]
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x21B8AC4", Offset = "0x21B8AC4", VA = "0x21B8AC4")]
		public static extern IntPtr ml_KNearest_create();

		[PreserveSig]
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x21B8B38", Offset = "0x21B8B38", VA = "0x21B8B38")]
		public static extern void ml_Ptr_KNearest_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x21B8BB8", Offset = "0x21B8BB8", VA = "0x21B8BB8")]
		public static extern IntPtr ml_Ptr_KNearest_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x21B8C38", Offset = "0x21B8C38", VA = "0x21B8C38")]
		public static extern double ml_LogisticRegression_getLearningRate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x21B8CB8", Offset = "0x21B8CB8", VA = "0x21B8CB8")]
		public static extern void ml_LogisticRegression_setLearningRate(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x21B8D48", Offset = "0x21B8D48", VA = "0x21B8D48")]
		public static extern int ml_LogisticRegression_getIterations(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x21B8DC8", Offset = "0x21B8DC8", VA = "0x21B8DC8")]
		public static extern void ml_LogisticRegression_setIterations(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x21B8E58", Offset = "0x21B8E58", VA = "0x21B8E58")]
		public static extern int ml_LogisticRegression_getRegularization(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x21B8ED8", Offset = "0x21B8ED8", VA = "0x21B8ED8")]
		public static extern void ml_LogisticRegression_setRegularization(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x21B8F68", Offset = "0x21B8F68", VA = "0x21B8F68")]
		public static extern int ml_LogisticRegression_getTrainMethod(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x21B8FE8", Offset = "0x21B8FE8", VA = "0x21B8FE8")]
		public static extern void ml_LogisticRegression_setTrainMethod(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x21B9078", Offset = "0x21B9078", VA = "0x21B9078")]
		public static extern int ml_LogisticRegression_getMiniBatchSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x21B90F8", Offset = "0x21B90F8", VA = "0x21B90F8")]
		public static extern void ml_LogisticRegression_setMiniBatchSize(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x21B9188", Offset = "0x21B9188", VA = "0x21B9188")]
		public static extern TermCriteria ml_LogisticRegression_getTermCriteria(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x21B9208", Offset = "0x21B9208", VA = "0x21B9208")]
		public static extern void ml_LogisticRegression_setTermCriteria(IntPtr obj, TermCriteria val);

		[PreserveSig]
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x21B92A0", Offset = "0x21B92A0", VA = "0x21B92A0")]
		public static extern float ml_LogisticRegression_predict(IntPtr obj, IntPtr samples, IntPtr results, int flags);

		[PreserveSig]
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x21B9348", Offset = "0x21B9348", VA = "0x21B9348")]
		public static extern IntPtr ml_LogisticRegression_get_learnt_thetas(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x21B93C8", Offset = "0x21B93C8", VA = "0x21B93C8")]
		public static extern IntPtr ml_LogisticRegression_create();

		[PreserveSig]
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x21B943C", Offset = "0x21B943C", VA = "0x21B943C")]
		public static extern void ml_Ptr_LogisticRegression_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x21B94BC", Offset = "0x21B94BC", VA = "0x21B94BC")]
		public static extern IntPtr ml_Ptr_LogisticRegression_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x21B953C", Offset = "0x21B953C", VA = "0x21B953C")]
		public static extern float ml_NormalBayesClassifier_predictProb(IntPtr obj, IntPtr inputs, IntPtr samples, IntPtr outputProbs, int flags);

		[PreserveSig]
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x21B95E8", Offset = "0x21B95E8", VA = "0x21B95E8")]
		public static extern IntPtr ml_NormalBayesClassifier_create();

		[PreserveSig]
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x21B965C", Offset = "0x21B965C", VA = "0x21B965C")]
		public static extern void ml_Ptr_NormalBayesClassifier_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x21B96DC", Offset = "0x21B96DC", VA = "0x21B96DC")]
		public static extern IntPtr ml_Ptr_NormalBayesClassifier_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x21B975C", Offset = "0x21B975C", VA = "0x21B975C")]
		public static extern int ml_SVM_getType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x21B97DC", Offset = "0x21B97DC", VA = "0x21B97DC")]
		public static extern void ml_SVM_setType(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x21B986C", Offset = "0x21B986C", VA = "0x21B986C")]
		public static extern double ml_SVM_getGamma(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x21B98EC", Offset = "0x21B98EC", VA = "0x21B98EC")]
		public static extern void ml_SVM_setGamma(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x21B997C", Offset = "0x21B997C", VA = "0x21B997C")]
		public static extern double ml_SVM_getCoef0(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x21B99FC", Offset = "0x21B99FC", VA = "0x21B99FC")]
		public static extern void ml_SVM_setCoef0(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x21B9A8C", Offset = "0x21B9A8C", VA = "0x21B9A8C")]
		public static extern double ml_SVM_getDegree(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x21B9B0C", Offset = "0x21B9B0C", VA = "0x21B9B0C")]
		public static extern void ml_SVM_setDegree(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x21B9B98", Offset = "0x21B9B98", VA = "0x21B9B98")]
		public static extern double ml_SVM_getC(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x21B9C18", Offset = "0x21B9C18", VA = "0x21B9C18")]
		public static extern void ml_SVM_setC(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x21B9CA8", Offset = "0x21B9CA8", VA = "0x21B9CA8")]
		public static extern double ml_SVM_getP(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x21B9D28", Offset = "0x21B9D28", VA = "0x21B9D28")]
		public static extern void ml_SVM_setP(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x21B9DB8", Offset = "0x21B9DB8", VA = "0x21B9DB8")]
		public static extern double ml_SVM_getNu(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x21B9E38", Offset = "0x21B9E38", VA = "0x21B9E38")]
		public static extern void ml_SVM_setNu(IntPtr obj, double val);

		[PreserveSig]
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x21B9EC8", Offset = "0x21B9EC8", VA = "0x21B9EC8")]
		public static extern IntPtr ml_SVM_getClassWeights(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x21B9F48", Offset = "0x21B9F48", VA = "0x21B9F48")]
		public static extern void ml_SVM_setClassWeights(IntPtr obj, IntPtr val);

		[PreserveSig]
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x21B9FD8", Offset = "0x21B9FD8", VA = "0x21B9FD8")]
		public static extern TermCriteria ml_SVM_getTermCriteria(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x21BA058", Offset = "0x21BA058", VA = "0x21BA058")]
		public static extern void ml_SVM_setTermCriteria(IntPtr obj, TermCriteria val);

		[PreserveSig]
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x21BA0F0", Offset = "0x21BA0F0", VA = "0x21BA0F0")]
		public static extern int ml_SVM_getKernelType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x21BA170", Offset = "0x21BA170", VA = "0x21BA170")]
		public static extern void ml_SVM_setKernel(IntPtr obj, int kernelType);

		[PreserveSig]
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x21BA200", Offset = "0x21BA200", VA = "0x21BA200")]
		public static extern IntPtr ml_SVM_getSupportVectors(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x21BA280", Offset = "0x21BA280", VA = "0x21BA280")]
		public static extern double ml_SVM_getDecisionFunction(IntPtr obj, int i, IntPtr alpha, IntPtr svidx);

		[PreserveSig]
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x21BA328", Offset = "0x21BA328", VA = "0x21BA328")]
		public static extern ParamGrid ml_SVM_getDefaultGrid(int paramId);

		[PreserveSig]
		[Token(Token = "0x6000706")]
		[Address(RVA = "0x21BA3A8", Offset = "0x21BA3A8", VA = "0x21BA3A8")]
		public static extern IntPtr ml_SVM_create();

		[PreserveSig]
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x21BA41C", Offset = "0x21BA41C", VA = "0x21BA41C")]
		public static extern void ml_Ptr_SVM_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x21BA498", Offset = "0x21BA498", VA = "0x21BA498")]
		public static extern IntPtr ml_Ptr_SVM_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x21BA518", Offset = "0x21BA518", VA = "0x21BA518")]
		public static extern void ml_StatModel_clear(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x21BA598", Offset = "0x21BA598", VA = "0x21BA598")]
		public static extern int ml_StatModel_getVarCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600070B")]
		[Address(RVA = "0x21BA618", Offset = "0x21BA618", VA = "0x21BA618")]
		public static extern int ml_StatModel_empty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x21BA698", Offset = "0x21BA698", VA = "0x21BA698")]
		public static extern int ml_StatModel_isTrained(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600070D")]
		[Address(RVA = "0x21BA718", Offset = "0x21BA718", VA = "0x21BA718")]
		public static extern int ml_StatModel_isClassifier(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600070E")]
		[Address(RVA = "0x21BA798", Offset = "0x21BA798", VA = "0x21BA798")]
		public static extern int ml_StatModel_train1(IntPtr obj, IntPtr trainData, int flags);

		[PreserveSig]
		[Token(Token = "0x600070F")]
		[Address(RVA = "0x21BA830", Offset = "0x21BA830", VA = "0x21BA830")]
		public static extern int ml_StatModel_train2(IntPtr obj, IntPtr samples, int layout, IntPtr responses);

		[PreserveSig]
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x21BA8D8", Offset = "0x21BA8D8", VA = "0x21BA8D8")]
		public static extern float ml_StatModel_calcError(IntPtr obj, IntPtr data, int test, IntPtr resp);

		[PreserveSig]
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x21BA980", Offset = "0x21BA980", VA = "0x21BA980")]
		public static extern float ml_StatModel_predict(IntPtr obj, IntPtr samples, IntPtr results, int flags);

		[PreserveSig]
		[Token(Token = "0x6000712")]
		[Address(RVA = "0x21BAA28", Offset = "0x21BAA28", VA = "0x21BAA28")]
		public static extern void ml_StatModel_save(IntPtr obj, string filename);

		[PreserveSig]
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x21BAAC8", Offset = "0x21BAAC8", VA = "0x21BAAC8")]
		public static extern void photo_inpaint(IntPtr src, IntPtr inpaintMask, IntPtr dst, double inpaintRadius, int flags);

		[PreserveSig]
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x21BAB80", Offset = "0x21BAB80", VA = "0x21BAB80")]
		public static extern void photo_fastNlMeansDenoising(IntPtr src, IntPtr dst, float h, int templateWindowSize, int searchWindowSize);

		[PreserveSig]
		[Token(Token = "0x6000715")]
		[Address(RVA = "0x21BAC38", Offset = "0x21BAC38", VA = "0x21BAC38")]
		public static extern void photo_fastNlMeansDenoisingColored(IntPtr src, IntPtr dst, float h, float hColor, int templateWindowSize, int searchWindowSize);

		[PreserveSig]
		[Token(Token = "0x6000716")]
		[Address(RVA = "0x21BACF8", Offset = "0x21BACF8", VA = "0x21BACF8")]
		public static extern void photo_fastNlMeansDenoisingMulti(IntPtr[] srcImgs, int srcImgsLength, IntPtr dst, int imgToDenoiseIndex, int temporalWindowSize, float h, int templateWindowSize, int searchWindowSize);

		[PreserveSig]
		[Token(Token = "0x6000717")]
		[Address(RVA = "0x21BADD8", Offset = "0x21BADD8", VA = "0x21BADD8")]
		public static extern void photo_fastNlMeansDenoisingColoredMulti(IntPtr[] srcImgs, int srcImgsLength, IntPtr dst, int imgToDenoiseIndex, int temporalWindowSize, float h, float hColor, int templateWindowSize, int searchWindowSize);

		[PreserveSig]
		[Token(Token = "0x6000718")]
		[Address(RVA = "0x21BAEC0", Offset = "0x21BAEC0", VA = "0x21BAEC0")]
		public static extern void photo_denoise_TVL1(IntPtr[] observations, int observationsSize, IntPtr result, double lambda, int niters);

		[PreserveSig]
		[Token(Token = "0x6000719")]
		[Address(RVA = "0x21BAF80", Offset = "0x21BAF80", VA = "0x21BAF80")]
		public static extern void photo_decolor(IntPtr src, IntPtr grayscale, IntPtr color_boost);

		[PreserveSig]
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x21BB018", Offset = "0x21BB018", VA = "0x21BB018")]
		public static extern void photo_seamlessClone(IntPtr src, IntPtr dst, IntPtr mask, Point p, IntPtr blend, int flags);

		[PreserveSig]
		[Token(Token = "0x600071B")]
		[Address(RVA = "0x21BB0D8", Offset = "0x21BB0D8", VA = "0x21BB0D8")]
		public static extern void photo_colorChange(IntPtr src, IntPtr mask, IntPtr dst, float red_mul, float green_mul, float blue_mul);

		[PreserveSig]
		[Token(Token = "0x600071C")]
		[Address(RVA = "0x21BB194", Offset = "0x21BB194", VA = "0x21BB194")]
		public static extern void photo_illuminationChange(IntPtr src, IntPtr mask, IntPtr dst, float alpha, float beta);

		[PreserveSig]
		[Token(Token = "0x600071D")]
		[Address(RVA = "0x21BB244", Offset = "0x21BB244", VA = "0x21BB244")]
		public static extern void photo_textureFlattening(IntPtr src, IntPtr mask, IntPtr dst, float low_threshold, float high_threshold, int kernel_size);

		[PreserveSig]
		[Token(Token = "0x600071E")]
		[Address(RVA = "0x21BB304", Offset = "0x21BB304", VA = "0x21BB304")]
		public static extern void photo_edgePreservingFilter(IntPtr src, IntPtr dst, int flags, float sigma_s, float sigma_r);

		[PreserveSig]
		[Token(Token = "0x600071F")]
		[Address(RVA = "0x21BB3B4", Offset = "0x21BB3B4", VA = "0x21BB3B4")]
		public static extern void photo_detailEnhance(IntPtr src, IntPtr dst, float sigma_s, float sigma_r);

		[PreserveSig]
		[Token(Token = "0x6000720")]
		[Address(RVA = "0x21BB45C", Offset = "0x21BB45C", VA = "0x21BB45C")]
		public static extern void photo_pencilSketch(IntPtr src, IntPtr dst1, IntPtr dst2, float sigma_s, float sigma_r, float shade_factor);

		[PreserveSig]
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x21BB51C", Offset = "0x21BB51C", VA = "0x21BB51C")]
		public static extern void photo_stylization(IntPtr src, IntPtr dst, float sigma_s, float sigma_r);

		[PreserveSig]
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x21BB5C0", Offset = "0x21BB5C0", VA = "0x21BB5C0")]
		public static extern IntPtr photo_createCalibrateDebevec(int samples, float lambda, int random);

		[PreserveSig]
		[Token(Token = "0x6000723")]
		[Address(RVA = "0x21BB660", Offset = "0x21BB660", VA = "0x21BB660")]
		public static extern IntPtr photo_createCalibrateRobertson(int maxIter, float threshold);

		[PreserveSig]
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x21BB6F0", Offset = "0x21BB6F0", VA = "0x21BB6F0")]
		public static extern void photo_Ptr_CalibrateDebevec_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x21BB770", Offset = "0x21BB770", VA = "0x21BB770")]
		public static extern void photo_Ptr_CalibrateRobertson_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000726")]
		[Address(RVA = "0x21BB7F0", Offset = "0x21BB7F0", VA = "0x21BB7F0")]
		public static extern IntPtr photo_Ptr_CalibrateDebevec_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000727")]
		[Address(RVA = "0x21BB870", Offset = "0x21BB870", VA = "0x21BB870")]
		public static extern IntPtr photo_Ptr_CalibrateRobertson_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x21BB8F0", Offset = "0x21BB8F0", VA = "0x21BB8F0")]
		public static extern void photo_CalibrateCRF_process(IntPtr obj, IntPtr[] srcImgs, int srcImgsLength, IntPtr dst, [In] float[] times);

		[PreserveSig]
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x21BB9B0", Offset = "0x21BB9B0", VA = "0x21BB9B0")]
		public static extern float shape_ShapeDistanceExtractor_computeDistance(IntPtr obj, IntPtr contour1, IntPtr contour2);

		[PreserveSig]
		[Token(Token = "0x600072A")]
		[Address(RVA = "0x21BBA48", Offset = "0x21BBA48", VA = "0x21BBA48")]
		public static extern void shape_Ptr_ShapeContextDistanceExtractor_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600072B")]
		[Address(RVA = "0x21BBAC8", Offset = "0x21BBAC8", VA = "0x21BBAC8")]
		public static extern IntPtr shape_Ptr_ShapeContextDistanceExtractor_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600072C")]
		[Address(RVA = "0x21BBB48", Offset = "0x21BBB48", VA = "0x21BBB48")]
		public static extern void shape_ShapeContextDistanceExtractor_setAngularBins(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600072D")]
		[Address(RVA = "0x21BBBD8", Offset = "0x21BBBD8", VA = "0x21BBBD8")]
		public static extern int shape_ShapeContextDistanceExtractor_getAngularBins(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600072E")]
		[Address(RVA = "0x21BBC58", Offset = "0x21BBC58", VA = "0x21BBC58")]
		public static extern void shape_ShapeContextDistanceExtractor_setRadialBins(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x21BBCE8", Offset = "0x21BBCE8", VA = "0x21BBCE8")]
		public static extern int shape_ShapeContextDistanceExtractor_getRadialBins(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000730")]
		[Address(RVA = "0x21BBD68", Offset = "0x21BBD68", VA = "0x21BBD68")]
		public static extern void shape_ShapeContextDistanceExtractor_setInnerRadius(IntPtr obj, float val);

		[PreserveSig]
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x21BBDF8", Offset = "0x21BBDF8", VA = "0x21BBDF8")]
		public static extern float shape_ShapeContextDistanceExtractor_getInnerRadius(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000732")]
		[Address(RVA = "0x21BBE78", Offset = "0x21BBE78", VA = "0x21BBE78")]
		public static extern void shape_ShapeContextDistanceExtractor_setOuterRadius(IntPtr obj, float val);

		[PreserveSig]
		[Token(Token = "0x6000733")]
		[Address(RVA = "0x21BBF08", Offset = "0x21BBF08", VA = "0x21BBF08")]
		public static extern float shape_ShapeContextDistanceExtractor_getOuterRadius(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000734")]
		[Address(RVA = "0x21BBF88", Offset = "0x21BBF88", VA = "0x21BBF88")]
		public static extern void shape_ShapeContextDistanceExtractor_setRotationInvariant(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000735")]
		[Address(RVA = "0x21BC018", Offset = "0x21BC018", VA = "0x21BC018")]
		public static extern int shape_ShapeContextDistanceExtractor_getRotationInvariant(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000736")]
		[Address(RVA = "0x21BC098", Offset = "0x21BC098", VA = "0x21BC098")]
		public static extern void shape_ShapeContextDistanceExtractor_setShapeContextWeight(IntPtr obj, float val);

		[PreserveSig]
		[Token(Token = "0x6000737")]
		[Address(RVA = "0x21BC128", Offset = "0x21BC128", VA = "0x21BC128")]
		public static extern float shape_ShapeContextDistanceExtractor_getShapeContextWeight(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000738")]
		[Address(RVA = "0x21BC1A8", Offset = "0x21BC1A8", VA = "0x21BC1A8")]
		public static extern void shape_ShapeContextDistanceExtractor_setImageAppearanceWeight(IntPtr obj, float val);

		[PreserveSig]
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x21BC238", Offset = "0x21BC238", VA = "0x21BC238")]
		public static extern float shape_ShapeContextDistanceExtractor_getImageAppearanceWeight(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x21BC2B8", Offset = "0x21BC2B8", VA = "0x21BC2B8")]
		public static extern void shape_ShapeContextDistanceExtractor_setBendingEnergyWeight(IntPtr obj, float val);

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x21BC348", Offset = "0x21BC348", VA = "0x21BC348")]
		public static extern float shape_ShapeContextDistanceExtractor_getBendingEnergyWeight(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600073C")]
		[Address(RVA = "0x21BC3C8", Offset = "0x21BC3C8", VA = "0x21BC3C8")]
		public static extern void shape_ShapeContextDistanceExtractor_setImages(IntPtr obj, IntPtr image1, IntPtr image2);

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x21BC460", Offset = "0x21BC460", VA = "0x21BC460")]
		public static extern void shape_ShapeContextDistanceExtractor_getImages(IntPtr obj, IntPtr image1, IntPtr image2);

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0x21BC4F8", Offset = "0x21BC4F8", VA = "0x21BC4F8")]
		public static extern void shape_ShapeContextDistanceExtractor_setIterations(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x600073F")]
		[Address(RVA = "0x21BC588", Offset = "0x21BC588", VA = "0x21BC588")]
		public static extern int shape_ShapeContextDistanceExtractor_getIterations(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0x21BC608", Offset = "0x21BC608", VA = "0x21BC608")]
		public static extern void shape_ShapeContextDistanceExtractor_setStdDev(IntPtr obj, float val);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x21BC698", Offset = "0x21BC698", VA = "0x21BC698")]
		public static extern float shape_ShapeContextDistanceExtractor_getStdDev(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000742")]
		[Address(RVA = "0x21BC718", Offset = "0x21BC718", VA = "0x21BC718")]
		public static extern IntPtr shape_createShapeContextDistanceExtractor(int nAngularBins, int nRadialBins, float innerRadius, float outerRadius, int iterations);

		[PreserveSig]
		[Token(Token = "0x6000743")]
		[Address(RVA = "0x21BC7C8", Offset = "0x21BC7C8", VA = "0x21BC7C8")]
		public static extern void shape_Ptr_HausdorffDistanceExtractor_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x21BC848", Offset = "0x21BC848", VA = "0x21BC848")]
		public static extern IntPtr shape_Ptr_HausdorffDistanceExtractor_get(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000745")]
		[Address(RVA = "0x21BC8C8", Offset = "0x21BC8C8", VA = "0x21BC8C8")]
		public static extern void shape_HausdorffDistanceExtractor_setDistanceFlag(IntPtr obj, int val);

		[PreserveSig]
		[Token(Token = "0x6000746")]
		[Address(RVA = "0x21BC958", Offset = "0x21BC958", VA = "0x21BC958")]
		public static extern int shape_HausdorffDistanceExtractor_getDistanceFlag(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000747")]
		[Address(RVA = "0x21BC9D8", Offset = "0x21BC9D8", VA = "0x21BC9D8")]
		public static extern void shape_HausdorffDistanceExtractor_setRankProportion(IntPtr obj, float val);

		[PreserveSig]
		[Token(Token = "0x6000748")]
		[Address(RVA = "0x21BCA68", Offset = "0x21BCA68", VA = "0x21BCA68")]
		public static extern float shape_HausdorffDistanceExtractor_getRankProportion(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000749")]
		[Address(RVA = "0x21BCAE8", Offset = "0x21BCAE8", VA = "0x21BCAE8")]
		public static extern IntPtr shape_createHausdorffDistanceExtractor(int distanceFlag, float rankProp);

		[PreserveSig]
		[Token(Token = "0x600074A")]
		[Address(RVA = "0x21BCB78", Offset = "0x21BCB78", VA = "0x21BCB78")]
		public static extern RotatedRect video_CamShift(IntPtr probImage, ref Rect window, TermCriteria criteria);

		[PreserveSig]
		[Token(Token = "0x600074B")]
		[Address(RVA = "0x21BCC28", Offset = "0x21BCC28", VA = "0x21BCC28")]
		public static extern int video_meanShift(IntPtr probImage, ref Rect window, TermCriteria criteria);

		[PreserveSig]
		[Token(Token = "0x600074C")]
		[Address(RVA = "0x21BCCD0", Offset = "0x21BCCD0", VA = "0x21BCCD0")]
		public static extern IntPtr video_KalmanFilter_new1();

		[PreserveSig]
		[Token(Token = "0x600074D")]
		[Address(RVA = "0x21BCD44", Offset = "0x21BCD44", VA = "0x21BCD44")]
		public static extern IntPtr video_KalmanFilter_new2(int dynamParams, int measureParams, int controlParams, int type);

		[PreserveSig]
		[Token(Token = "0x600074E")]
		[Address(RVA = "0x21BCDEC", Offset = "0x21BCDEC", VA = "0x21BCDEC")]
		public static extern void video_KalmanFilter_init(IntPtr obj, int dynamParams, int measureParams, int controlParams, int type);

		[PreserveSig]
		[Token(Token = "0x600074F")]
		[Address(RVA = "0x21BCE9C", Offset = "0x21BCE9C", VA = "0x21BCE9C")]
		public static extern void video_KalmanFilter_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0x21BCF1C", Offset = "0x21BCF1C", VA = "0x21BCF1C")]
		public static extern IntPtr video_KalmanFilter_predict(IntPtr obj, IntPtr control);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x21BCFAC", Offset = "0x21BCFAC", VA = "0x21BCFAC")]
		public static extern IntPtr video_KalmanFilter_correct(IntPtr obj, IntPtr measurement);

		[PreserveSig]
		[Token(Token = "0x6000752")]
		[Address(RVA = "0x21BD03C", Offset = "0x21BD03C", VA = "0x21BD03C")]
		public static extern IntPtr video_KalmanFilter_statePre(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000753")]
		[Address(RVA = "0x21BD0BC", Offset = "0x21BD0BC", VA = "0x21BD0BC")]
		public static extern IntPtr video_KalmanFilter_statePost(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x21BD13C", Offset = "0x21BD13C", VA = "0x21BD13C")]
		public static extern IntPtr video_KalmanFilter_transitionMatrix(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000755")]
		[Address(RVA = "0x21BD1BC", Offset = "0x21BD1BC", VA = "0x21BD1BC")]
		public static extern IntPtr video_KalmanFilter_controlMatrix(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000756")]
		[Address(RVA = "0x21BD23C", Offset = "0x21BD23C", VA = "0x21BD23C")]
		public static extern IntPtr video_KalmanFilter_measurementMatrix(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000757")]
		[Address(RVA = "0x21BD2BC", Offset = "0x21BD2BC", VA = "0x21BD2BC")]
		public static extern IntPtr video_KalmanFilter_processNoiseCov(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000758")]
		[Address(RVA = "0x21BD33C", Offset = "0x21BD33C", VA = "0x21BD33C")]
		public static extern IntPtr video_KalmanFilter_measurementNoiseCov(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000759")]
		[Address(RVA = "0x21BD3BC", Offset = "0x21BD3BC", VA = "0x21BD3BC")]
		public static extern IntPtr video_KalmanFilter_errorCovPre(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600075A")]
		[Address(RVA = "0x21BD43C", Offset = "0x21BD43C", VA = "0x21BD43C")]
		public static extern IntPtr video_KalmanFilter_gain(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600075B")]
		[Address(RVA = "0x21BD4BC", Offset = "0x21BD4BC", VA = "0x21BD4BC")]
		public static extern IntPtr video_KalmanFilter_errorCovPost(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600075C")]
		[Address(RVA = "0x21BD53C", Offset = "0x21BD53C", VA = "0x21BD53C")]
		public static extern int video_buildOpticalFlowPyramid1(IntPtr img, IntPtr pyramid, Size winSize, int maxLevel, int withDerivatives, int pyrBorder, int derivBorder, int tryReuseInputImage);

		[PreserveSig]
		[Token(Token = "0x600075D")]
		[Address(RVA = "0x21BD614", Offset = "0x21BD614", VA = "0x21BD614")]
		public static extern int video_buildOpticalFlowPyramid2(IntPtr img, IntPtr pyramidVec, Size winSize, int maxLevel, int withDerivatives, int pyrBorder, int derivBorder, int tryReuseInputImage);

		[PreserveSig]
		[Token(Token = "0x600075E")]
		[Address(RVA = "0x21BD6EC", Offset = "0x21BD6EC", VA = "0x21BD6EC")]
		public static extern void video_calcOpticalFlowPyrLK_InputArray(IntPtr prevImg, IntPtr nextImg, IntPtr prevPts, IntPtr nextPts, IntPtr status, IntPtr err, Size winSize, int maxLevel, TermCriteria criteria, int flags, double minEigThreshold);

		[PreserveSig]
		[Token(Token = "0x600075F")]
		[Address(RVA = "0x21BD7E8", Offset = "0x21BD7E8", VA = "0x21BD7E8")]
		public static extern void video_calcOpticalFlowPyrLK_vector(IntPtr prevImg, IntPtr nextImg, Point2f[] prevPts, int prevPtsSize, IntPtr nextPts, IntPtr status, IntPtr err, Size winSize, int maxLevel, TermCriteria criteria, int flags, double minEigThreshold);

		[PreserveSig]
		[Token(Token = "0x6000760")]
		[Address(RVA = "0x21BD904", Offset = "0x21BD904", VA = "0x21BD904")]
		public static extern void video_calcOpticalFlowFarneback(IntPtr prev, IntPtr next, IntPtr flow, double pyrScale, int levels, int winSize, int iterations, int polyN, double polySigma, int flags);

		[PreserveSig]
		[Token(Token = "0x6000761")]
		[Address(RVA = "0x21BD9F4", Offset = "0x21BD9F4", VA = "0x21BD9F4")]
		public static extern IntPtr video_estimateRigidTransform(IntPtr src, IntPtr dst, int fullAffine);

		[PreserveSig]
		[Token(Token = "0x6000762")]
		[Address(RVA = "0x21BDA8C", Offset = "0x21BDA8C", VA = "0x21BDA8C")]
		public static extern void video_DenseOpticalFlow_calc(IntPtr obj, IntPtr i0, IntPtr i1, IntPtr flow);

		[PreserveSig]
		[Token(Token = "0x6000763")]
		[Address(RVA = "0x21BDB34", Offset = "0x21BDB34", VA = "0x21BDB34")]
		public static extern void video_DenseOpticalFlow_collectGarbage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000764")]
		[Address(RVA = "0x21BDBB4", Offset = "0x21BDBB4", VA = "0x21BDBB4")]
		public static extern IntPtr video_createOptFlow_DualTVL1();

		[PreserveSig]
		[Token(Token = "0x6000765")]
		[Address(RVA = "0x21BDC28", Offset = "0x21BDC28", VA = "0x21BDC28")]
		public static extern IntPtr video_Ptr_DenseOpticalFlow_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000766")]
		[Address(RVA = "0x21BDCA8", Offset = "0x21BDCA8", VA = "0x21BDCA8")]
		public static extern void video_Ptr_DenseOpticalFlow_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000767")]
		[Address(RVA = "0x21BDD28", Offset = "0x21BDD28", VA = "0x21BDD28")]
		public static extern void video_BackgroundSubtractor_getBackgroundImage(IntPtr self, IntPtr backgroundImage);

		[PreserveSig]
		[Token(Token = "0x6000768")]
		[Address(RVA = "0x21BDDB8", Offset = "0x21BDDB8", VA = "0x21BDDB8")]
		public static extern void video_BackgroundSubtractor_apply(IntPtr self, IntPtr image, IntPtr fgmask, double learningRate);

		[PreserveSig]
		[Token(Token = "0x6000769")]
		[Address(RVA = "0x21BDE5C", Offset = "0x21BDE5C", VA = "0x21BDE5C")]
		public static extern void video_Ptr_BackgroundSubtractor_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600076A")]
		[Address(RVA = "0x21BDEDC", Offset = "0x21BDEDC", VA = "0x21BDEDC")]
		public static extern IntPtr video_Ptr_BackgroundSubtractor_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600076B")]
		[Address(RVA = "0x21BDF5C", Offset = "0x21BDF5C", VA = "0x21BDF5C")]
		public static extern IntPtr video_createBackgroundSubtractorMOG2(int history, double varThreshold, int detectShadows);

		[PreserveSig]
		[Token(Token = "0x600076C")]
		[Address(RVA = "0x21BDFFC", Offset = "0x21BDFFC", VA = "0x21BDFFC")]
		public static extern void video_Ptr_BackgroundSubtractorMOG2_delete(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600076D")]
		[Address(RVA = "0x21BE07C", Offset = "0x21BE07C", VA = "0x21BE07C")]
		public static extern IntPtr video_Ptr_BackgroundSubtractorMOG2_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600076E")]
		[Address(RVA = "0x21BE0FC", Offset = "0x21BE0FC", VA = "0x21BE0FC")]
		public static extern int video_BackgroundSubtractorMOG2_getHistory(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600076F")]
		[Address(RVA = "0x21BE17C", Offset = "0x21BE17C", VA = "0x21BE17C")]
		public static extern void video_BackgroundSubtractorMOG2_setHistory(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000770")]
		[Address(RVA = "0x21BE20C", Offset = "0x21BE20C", VA = "0x21BE20C")]
		public static extern int video_BackgroundSubtractorMOG2_getNMixtures(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000771")]
		[Address(RVA = "0x21BE28C", Offset = "0x21BE28C", VA = "0x21BE28C")]
		public static extern void video_BackgroundSubtractorMOG2_setNMixtures(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x21BE31C", Offset = "0x21BE31C", VA = "0x21BE31C")]
		public static extern double video_BackgroundSubtractorMOG2_getBackgroundRatio(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000773")]
		[Address(RVA = "0x21BE39C", Offset = "0x21BE39C", VA = "0x21BE39C")]
		public static extern void video_BackgroundSubtractorMOG2_setBackgroundRatio(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x21BE42C", Offset = "0x21BE42C", VA = "0x21BE42C")]
		public static extern double video_BackgroundSubtractorMOG2_getVarThreshold(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x21BE4AC", Offset = "0x21BE4AC", VA = "0x21BE4AC")]
		public static extern void video_BackgroundSubtractorMOG2_setVarThreshold(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x6000776")]
		[Address(RVA = "0x21BE53C", Offset = "0x21BE53C", VA = "0x21BE53C")]
		public static extern double video_BackgroundSubtractorMOG2_getVarThresholdGen(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000777")]
		[Address(RVA = "0x21BE5BC", Offset = "0x21BE5BC", VA = "0x21BE5BC")]
		public static extern void video_BackgroundSubtractorMOG2_setVarThresholdGen(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x6000778")]
		[Address(RVA = "0x21BE64C", Offset = "0x21BE64C", VA = "0x21BE64C")]
		public static extern double video_BackgroundSubtractorMOG2_getVarInit(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x21BE6CC", Offset = "0x21BE6CC", VA = "0x21BE6CC")]
		public static extern void video_BackgroundSubtractorMOG2_setVarInit(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x21BE75C", Offset = "0x21BE75C", VA = "0x21BE75C")]
		public static extern double video_BackgroundSubtractorMOG2_getVarMin(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600077B")]
		[Address(RVA = "0x21BE7DC", Offset = "0x21BE7DC", VA = "0x21BE7DC")]
		public static extern void video_BackgroundSubtractorMOG2_setVarMin(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x600077C")]
		[Address(RVA = "0x21BE86C", Offset = "0x21BE86C", VA = "0x21BE86C")]
		public static extern double video_BackgroundSubtractorMOG2_getVarMax(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x21BE8EC", Offset = "0x21BE8EC", VA = "0x21BE8EC")]
		public static extern void video_BackgroundSubtractorMOG2_setVarMax(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x21BE97C", Offset = "0x21BE97C", VA = "0x21BE97C")]
		public static extern double video_BackgroundSubtractorMOG2_getComplexityReductionThreshold(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x21BE9FC", Offset = "0x21BE9FC", VA = "0x21BE9FC")]
		public static extern void video_BackgroundSubtractorMOG2_setComplexityReductionThreshold(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x6000780")]
		[Address(RVA = "0x21BEA8C", Offset = "0x21BEA8C", VA = "0x21BEA8C")]
		public static extern int video_BackgroundSubtractorMOG2_getDetectShadows(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000781")]
		[Address(RVA = "0x21BEB0C", Offset = "0x21BEB0C", VA = "0x21BEB0C")]
		public static extern void video_BackgroundSubtractorMOG2_setDetectShadows(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000782")]
		[Address(RVA = "0x21BEB9C", Offset = "0x21BEB9C", VA = "0x21BEB9C")]
		public static extern int video_BackgroundSubtractorMOG2_getShadowValue(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x21BEC1C", Offset = "0x21BEC1C", VA = "0x21BEC1C")]
		public static extern void video_BackgroundSubtractorMOG2_setShadowValue(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000784")]
		[Address(RVA = "0x21BECAC", Offset = "0x21BECAC", VA = "0x21BECAC")]
		public static extern double video_BackgroundSubtractorMOG2_getShadowThreshold(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000785")]
		[Address(RVA = "0x21BED2C", Offset = "0x21BED2C", VA = "0x21BED2C")]
		public static extern void video_BackgroundSubtractorMOG2_setShadowThreshold(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x6000786")]
		[Address(RVA = "0x21BEDBC", Offset = "0x21BEDBC", VA = "0x21BEDBC")]
		public static extern IntPtr video_createBackgroundSubtractorKNN(int history, double dist2Threshold, int detectShadows);

		[PreserveSig]
		[Token(Token = "0x6000787")]
		[Address(RVA = "0x21BEE5C", Offset = "0x21BEE5C", VA = "0x21BEE5C")]
		public static extern void video_Ptr_BackgroundSubtractorKNN_delete(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x21BEEDC", Offset = "0x21BEEDC", VA = "0x21BEEDC")]
		public static extern IntPtr video_Ptr_BackgroundSubtractorKNN_get(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000789")]
		[Address(RVA = "0x21BEF5C", Offset = "0x21BEF5C", VA = "0x21BEF5C")]
		public static extern int video_BackgroundSubtractorKNN_getHistory(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600078A")]
		[Address(RVA = "0x21BEFDC", Offset = "0x21BEFDC", VA = "0x21BEFDC")]
		public static extern void video_BackgroundSubtractorKNN_setHistory(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x21BF06C", Offset = "0x21BF06C", VA = "0x21BF06C")]
		public static extern int video_BackgroundSubtractorKNN_getNSamples(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0x21BF0EC", Offset = "0x21BF0EC", VA = "0x21BF0EC")]
		public static extern void video_BackgroundSubtractorKNN_setNSamples(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x600078D")]
		[Address(RVA = "0x21BF17C", Offset = "0x21BF17C", VA = "0x21BF17C")]
		public static extern int video_BackgroundSubtractorKNN_getDist2Threshold(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0x21BF1FC", Offset = "0x21BF1FC", VA = "0x21BF1FC")]
		public static extern void video_BackgroundSubtractorKNN_setDist2Threshold(IntPtr ptr, double value);

		[PreserveSig]
		[Token(Token = "0x600078F")]
		[Address(RVA = "0x21BF28C", Offset = "0x21BF28C", VA = "0x21BF28C")]
		public static extern int video_BackgroundSubtractorKNN_getkNNSamples(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000790")]
		[Address(RVA = "0x21BF30C", Offset = "0x21BF30C", VA = "0x21BF30C")]
		public static extern void video_BackgroundSubtractorKNN_setkNNSamples(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x21BF39C", Offset = "0x21BF39C", VA = "0x21BF39C")]
		public static extern int video_BackgroundSubtractorKNN_getDetectShadows(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000792")]
		[Address(RVA = "0x21BF41C", Offset = "0x21BF41C", VA = "0x21BF41C")]
		public static extern void video_BackgroundSubtractorKNN_setDetectShadows(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0x21BF4AC", Offset = "0x21BF4AC", VA = "0x21BF4AC")]
		public static extern int video_BackgroundSubtractorKNN_getShadowValue(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000794")]
		[Address(RVA = "0x21BF52C", Offset = "0x21BF52C", VA = "0x21BF52C")]
		public static extern void video_BackgroundSubtractorKNN_setShadowValue(IntPtr ptr, int value);

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0x21BF5BC", Offset = "0x21BF5BC", VA = "0x21BF5BC")]
		public static extern double video_BackgroundSubtractorKNN_getShadowThreshold(IntPtr ptr);

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x21BF63C", Offset = "0x21BF63C", VA = "0x21BF63C")]
		public static extern void video_BackgroundSubtractorKNN_setShadowThreshold(IntPtr ptr, double value);
	}
	[Token(Token = "0x2000003")]
	public class ShapePredictor : DisposableCvObject
	{
		[Token(Token = "0x400000D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x4276FCC", Offset = "0x4276FCC", VA = "0x4276FCC")]
		public ShapePredictor()
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x4277044", Offset = "0x4277044", VA = "0x4277044", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x4277144", Offset = "0x4277144", VA = "0x4277144")]
		public void LoadData(byte[] data)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x42771CC", Offset = "0x42771CC", VA = "0x42771CC")]
		public Point[] DetectLandmarks(Mat image, Rect roi)
		{
			return null;
		}
	}
	[Token(Token = "0x2000004")]
	internal class Constants
	{
		[Token(Token = "0x400000E")]
		public const string DllExtern = "OpenCvSharpExtern";

		[Token(Token = "0x400000F")]
		public const string Version = "320";

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x2222C84", Offset = "0x2222C84", VA = "0x2222C84")]
		public Constants()
		{
		}
	}
	[Token(Token = "0x2000005")]
	public static class Cv2
	{
		[Serializable]
		[Token(Token = "0x200017E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB268", Offset = "0x1DDB268")]
		private sealed class <>c
		{
			[Token(Token = "0x400063C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400063D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static OpenCvSharp.Util.Func<Mat, Vec3d> <>9__38_0;

			[Token(Token = "0x400063E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static OpenCvSharp.Util.Func<Mat, Vec3d> <>9__38_1;

			[Token(Token = "0x400063F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static OpenCvSharp.Util.Func<DMatch[], int> <>9__227_0;

			[Token(Token = "0x4000640")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static OpenCvSharp.Util.Func<byte[], int> <>9__227_1;

			[Token(Token = "0x4000641")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static OpenCvSharp.Util.Func<Rangef, float[]> <>9__321_0;

			[Token(Token = "0x4000642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static OpenCvSharp.Util.Func<Rangef, float[]> <>9__323_0;

			[Token(Token = "0x4000643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static OpenCvSharp.Util.Func<Point[], int> <>9__423_0;

			[Token(Token = "0x4000644")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static OpenCvSharp.Util.Func<HierarchyIndex, Vec4i> <>9__423_1;

			[Token(Token = "0x4000645")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static OpenCvSharp.Util.Func<Mat, InputArray> <>9__446_0;

			[Token(Token = "0x4000646")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static OpenCvSharp.Util.Func<Mat, InputArray> <>9__448_0;

			[Token(Token = "0x6001750")]
			[Address(RVA = "0x3EA7F28", Offset = "0x3EA7F28", VA = "0x3EA7F28")]
			public <>c()
			{
			}

			[Token(Token = "0x6001751")]
			[Address(RVA = "0x3EA7F30", Offset = "0x3EA7F30", VA = "0x3EA7F30")]
			internal Vec3d <CalibrateCamera>b__38_0(Mat m)
			{
				return default(Vec3d);
			}

			[Token(Token = "0x6001752")]
			[Address(RVA = "0x3EA7F8C", Offset = "0x3EA7F8C", VA = "0x3EA7F8C")]
			internal Vec3d <CalibrateCamera>b__38_1(Mat m)
			{
				return default(Vec3d);
			}

			[Token(Token = "0x6001753")]
			[Address(RVA = "0x3EA7FE8", Offset = "0x3EA7FE8", VA = "0x3EA7FE8")]
			internal int <DrawMatches>b__227_0(DMatch[] dm)
			{
				return default(int);
			}

			[Token(Token = "0x6001754")]
			[Address(RVA = "0x3EA8000", Offset = "0x3EA8000", VA = "0x3EA8000")]
			internal int <DrawMatches>b__227_1(byte[] dm)
			{
				return default(int);
			}

			[Token(Token = "0x6001755")]
			[Address(RVA = "0x3EA8018", Offset = "0x3EA8018", VA = "0x3EA8018")]
			internal float[] <CalcHist>b__321_0(Rangef r)
			{
				return null;
			}

			[Token(Token = "0x6001756")]
			[Address(RVA = "0x3EA80A4", Offset = "0x3EA80A4", VA = "0x3EA80A4")]
			internal float[] <CalcBackProject>b__323_0(Rangef r)
			{
				return null;
			}

			[Token(Token = "0x6001757")]
			[Address(RVA = "0x3EA8130", Offset = "0x3EA8130", VA = "0x3EA8130")]
			internal int <DrawContours>b__423_0(Point[] pts)
			{
				return default(int);
			}

			[Token(Token = "0x6001758")]
			[Address(RVA = "0x3EA8148", Offset = "0x3EA8148", VA = "0x3EA8148")]
			internal Vec4i <DrawContours>b__423_1(HierarchyIndex hi)
			{
				return default(Vec4i);
			}

			[Token(Token = "0x6001759")]
			[Address(RVA = "0x3EA8164", Offset = "0x3EA8164", VA = "0x3EA8164")]
			internal InputArray <FastNlMeansDenoisingMulti>b__446_0(Mat m)
			{
				return null;
			}

			[Token(Token = "0x600175A")]
			[Address(RVA = "0x3EA81C8", Offset = "0x3EA81C8", VA = "0x3EA81C8")]
			internal InputArray <FastNlMeansDenoisingColoredMulti>b__448_0(Mat m)
			{
				return null;
			}
		}

		[Token(Token = "0x4000010")]
		public const double PI = Math.PI;

		[Token(Token = "0x4000011")]
		public const double LOG2 = 0.6931471805599453;

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x2222C8C", Offset = "0x2222C8C", VA = "0x2222C8C")]
		internal static IntPtr ToPtr(ICvPtrHolder obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x2222D44", Offset = "0x2222D44", VA = "0x2222D44")]
		public static void Rodrigues(InputArray src, OutputArray dst, [Optional] OutputArray jacobian)
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x2222EA4", Offset = "0x2222EA4", VA = "0x2222EA4")]
		public static void Rodrigues(double[] vector, out double[,] matrix, out double[,] jacobian)
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x22232D0", Offset = "0x22232D0", VA = "0x22232D0")]
		public static void Rodrigues(double[] vector, out double[,] matrix)
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x22232F4", Offset = "0x22232F4", VA = "0x22232F4")]
		public static void Rodrigues(double[,] matrix, out double[] vector, out double[,] jacobian)
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x2223744", Offset = "0x2223744", VA = "0x2223744")]
		public static void Rodrigues(double[,] matrix, out double[] vector)
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x2223768", Offset = "0x2223768", VA = "0x2223768")]
		public static Mat FindHomography(InputArray srcPoints, InputArray dstPoints, HomographyMethods method = HomographyMethods.None, double ransacReprojThreshold = 3.0, [Optional] OutputArray mask)
		{
			return null;
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x22238EC", Offset = "0x22238EC", VA = "0x22238EC")]
		public static Mat FindHomography(IEnumerable<Point2d> srcPoints, IEnumerable<Point2d> dstPoints, HomographyMethods method = HomographyMethods.None, double ransacReprojThreshold = 3.0, [Optional] OutputArray mask)
		{
			return null;
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x2223A74", Offset = "0x2223A74", VA = "0x2223A74")]
		public static Vec3d RQDecomp3x3(InputArray src, OutputArray mtxR, OutputArray mtxQ, [Optional] OutputArray qx, [Optional] OutputArray qy, [Optional] OutputArray qz)
		{
			return default(Vec3d);
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x2223C70", Offset = "0x2223C70", VA = "0x2223C70")]
		public static Vec3d RQDecomp3x3(double[,] src, out double[,] mtxR, out double[,] mtxQ)
		{
			return default(Vec3d);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x2223CA0", Offset = "0x2223CA0", VA = "0x2223CA0")]
		public static Vec3d RQDecomp3x3(double[,] src, out double[,] mtxR, out double[,] mtxQ, out double[,] qx, out double[,] qy, out double[,] qz)
		{
			return default(Vec3d);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x22244FC", Offset = "0x22244FC", VA = "0x22244FC")]
		public static void DecomposeProjectionMatrix(InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, [Optional] OutputArray rotMatrixX, [Optional] OutputArray rotMatrixY, [Optional] OutputArray rotMatrixZ, [Optional] OutputArray eulerAngles)
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x2224780", Offset = "0x2224780", VA = "0x2224780")]
		public static void DecomposeProjectionMatrix(double[,] projMatrix, out double[,] cameraMatrix, out double[,] rotMatrix, out double[] transVect, out double[,] rotMatrixX, out double[,] rotMatrixY, out double[,] rotMatrixZ, out double[] eulerAngles)
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x22251D8", Offset = "0x22251D8", VA = "0x22251D8")]
		public static void DecomposeProjectionMatrix(double[,] projMatrix, out double[,] cameraMatrix, out double[,] rotMatrix, out double[] transVect)
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x222520C", Offset = "0x222520C", VA = "0x222520C")]
		public static void MatMulDeriv(InputArray a, InputArray b, OutputArray dABdA, OutputArray dABdB)
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x22253C8", Offset = "0x22253C8", VA = "0x22253C8")]
		public static void ComposeRT(InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, [Optional] OutputArray dr3dr1, [Optional] OutputArray dr3dt1, [Optional] OutputArray dr3dr2, [Optional] OutputArray dr3dt2, [Optional] OutputArray dt3dr1, [Optional] OutputArray dt3dt1, [Optional] OutputArray dt3dr2, [Optional] OutputArray dt3dt2)
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x2225670", Offset = "0x2225670", VA = "0x2225670")]
		public static void ComposeRT(double[] rvec1, double[] tvec1, double[] rvec2, double[] tvec2, out double[] rvec3, out double[] tvec3, out double[,] dr3dr1, out double[,] dr3dt1, out double[,] dr3dr2, out double[,] dr3dt2, out double[,] dt3dr1, out double[,] dt3dt1, out double[,] dt3dr2, out double[,] dt3dt2)
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x22267B0", Offset = "0x22267B0", VA = "0x22267B0")]
		public static void ComposeRT(double[] rvec1, double[] tvec1, double[] rvec2, double[] tvec2, out double[] rvec3, out double[] tvec3)
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x2226810", Offset = "0x2226810", VA = "0x2226810")]
		public static void ProjectPoints(InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, [Optional] OutputArray jacobian, double aspectRatio = 0.0)
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x2226A38", Offset = "0x2226A38", VA = "0x2226A38")]
		public static void ProjectPoints(IEnumerable<Point3f> objectPoints, double[] rvec, double[] tvec, double[,] cameraMatrix, double[] distCoeffs, out Point2f[] imagePoints, out double[,] jacobian, double aspectRatio = 0.0)
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x2227300", Offset = "0x2227300", VA = "0x2227300")]
		public static void SolvePnP(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess = false, SolvePnPFlags flags = SolvePnPFlags.Iterative)
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x2227550", Offset = "0x2227550", VA = "0x2227550")]
		public static void SolvePnP(IEnumerable<Point3f> objectPoints, IEnumerable<Point2f> imagePoints, double[,] cameraMatrix, IEnumerable<double> distCoeffs, out double[] rvec, out double[] tvec, bool useExtrinsicGuess = false, SolvePnPFlags flags = SolvePnPFlags.Iterative)
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x22278C0", Offset = "0x22278C0", VA = "0x22278C0")]
		public static void SolvePnPRansac(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess = false, int iterationsCount = 100, float reprojectionError = 8f, double confidence = 0.99, [Optional] OutputArray inliers, SolvePnPFlags flags = SolvePnPFlags.Iterative)
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x2227B88", Offset = "0x2227B88", VA = "0x2227B88")]
		public static void SolvePnPRansac(IEnumerable<Point3f> objectPoints, IEnumerable<Point2f> imagePoints, double[,] cameraMatrix, IEnumerable<double> distCoeffs, out double[] rvec, out double[] tvec)
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x2227BC8", Offset = "0x2227BC8", VA = "0x2227BC8")]
		public static void SolvePnPRansac(IEnumerable<Point3f> objectPoints, IEnumerable<Point2f> imagePoints, double[,] cameraMatrix, IEnumerable<double> distCoeffs, out double[] rvec, out double[] tvec, out int[] inliers, bool useExtrinsicGuess = false, int iterationsCount = 100, float reprojectionError = 8f, double confidence = 0.99, SolvePnPFlags flags = SolvePnPFlags.Iterative)
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x2228074", Offset = "0x2228074", VA = "0x2228074")]
		public static Mat InitCameraMatrix2D(IEnumerable<Mat> objectPoints, IEnumerable<Mat> imagePoints, Size imageSize, double aspectRatio = 1.0)
		{
			return null;
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x22281C8", Offset = "0x22281C8", VA = "0x22281C8")]
		public static Mat InitCameraMatrix2D(IEnumerable<IEnumerable<Point3d>> objectPoints, IEnumerable<IEnumerable<Point2d>> imagePoints, Size imageSize, double aspectRatio = 1.0)
		{
			return null;
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x2228570", Offset = "0x2228570", VA = "0x2228570")]
		public static bool FindChessboardCorners(InputArray image, Size patternSize, OutputArray corners, ChessboardFlags flags = ChessboardFlags.AdaptiveThresh | ChessboardFlags.NormalizeImage)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x22286B8", Offset = "0x22286B8", VA = "0x22286B8")]
		public static bool FindChessboardCorners(InputArray image, Size patternSize, out Point2f[] corners, ChessboardFlags flags = ChessboardFlags.AdaptiveThresh | ChessboardFlags.NormalizeImage)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x22288BC", Offset = "0x22288BC", VA = "0x22288BC")]
		public static bool Find4QuadCornerSubpix(InputArray img, InputOutputArray corners, Size regionSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x22289F4", Offset = "0x22289F4", VA = "0x22289F4")]
		public static bool Find4QuadCornerSubpix(InputArray img, [In][Out] Point2f[] corners, Size regionSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x2228C78", Offset = "0x2228C78", VA = "0x2228C78")]
		public static void DrawChessboardCorners(InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x2228DB0", Offset = "0x2228DB0", VA = "0x2228DB0")]
		public static void DrawChessboardCorners(InputOutputArray image, Size patternSize, IEnumerable<Point2f> corners, bool patternWasFound)
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x2228EF4", Offset = "0x2228EF4", VA = "0x2228EF4")]
		public static bool FindCirclesGrid(InputArray image, Size patternSize, OutputArray centers, FindCirclesGridFlags flags = FindCirclesGridFlags.SymmetricGrid, [Optional] Feature2D blobDetector)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x2229050", Offset = "0x2229050", VA = "0x2229050")]
		public static bool FindCirclesGrid(InputArray image, Size patternSize, out Point2f[] centers, FindCirclesGridFlags flags = FindCirclesGridFlags.SymmetricGrid, [Optional] Feature2D blobDetector)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x2229270", Offset = "0x2229270", VA = "0x2229270")]
		public static double CalibrateCamera(IEnumerable<Mat> objectPoints, IEnumerable<Mat> imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, out Mat[] rvecs, out Mat[] tvecs, CalibrationFlags flags = CalibrationFlags.None, [Optional] TermCriteria? criteria)
		{
			return default(double);
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x22296D0", Offset = "0x22296D0", VA = "0x22296D0")]
		public static double CalibrateCamera(IEnumerable<IEnumerable<Point3f>> objectPoints, IEnumerable<IEnumerable<Point2f>> imagePoints, Size imageSize, double[,] cameraMatrix, double[] distCoeffs, out Vec3d[] rvecs, out Vec3d[] tvecs, CalibrationFlags flags = CalibrationFlags.None, [Optional] TermCriteria? criteria)
		{
			return default(double);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x2229E88", Offset = "0x2229E88", VA = "0x2229E88")]
		public static void CalibrationMatrixValues(InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx, out double fovy, out double focalLength, out Point2d principalPoint, out double aspectRatio)
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x2229FB0", Offset = "0x2229FB0", VA = "0x2229FB0")]
		public static void CalibrationMatrixValues(double[,] cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx, out double fovy, out double focalLength, out Point2d principalPoint, out double aspectRatio)
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x222A114", Offset = "0x222A114", VA = "0x222A114")]
		public static double StereoCalibrate(IEnumerable<InputArray> objectPoints, IEnumerable<InputArray> imagePoints1, IEnumerable<InputArray> imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, CalibrationFlags flags = CalibrationFlags.FixIntrinsic, [Optional] TermCriteria? criteria)
		{
			return default(double);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x222A508", Offset = "0x222A508", VA = "0x222A508")]
		public static double StereoCalibrate(IEnumerable<IEnumerable<Point3f>> objectPoints, IEnumerable<IEnumerable<Point2f>> imagePoints1, IEnumerable<IEnumerable<Point2f>> imagePoints2, double[,] cameraMatrix1, double[] distCoeffs1, double[,] cameraMatrix2, double[] distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, CalibrationFlags flags = CalibrationFlags.FixIntrinsic, [Optional] TermCriteria? criteria)
		{
			return default(double);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x222AB28", Offset = "0x222AB28", VA = "0x222AB28")]
		public static void StereoRectify(InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, StereoRectificationFlags flags = StereoRectificationFlags.ZeroDisparity, double alpha = -1.0, [Optional] Size? newImageSize)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x222AC3C", Offset = "0x222AC3C", VA = "0x222AC3C")]
		public static void StereoRectify(InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, StereoRectificationFlags flags, double alpha, Size newImageSize, out Rect validPixROI1, out Rect validPixROI2)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x222B098", Offset = "0x222B098", VA = "0x222B098")]
		public static void StereoRectify(double[,] cameraMatrix1, double[] distCoeffs1, double[,] cameraMatrix2, double[] distCoeffs2, Size imageSize, double[,] R, double[] T, out double[,] R1, out double[,] R2, out double[,] P1, out double[,] P2, out double[,] Q, StereoRectificationFlags flags = StereoRectificationFlags.ZeroDisparity, double alpha = -1.0, [Optional] Size? newImageSize)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x222B1AC", Offset = "0x222B1AC", VA = "0x222B1AC")]
		public static void StereoRectify(double[,] cameraMatrix1, double[] distCoeffs1, double[,] cameraMatrix2, double[] distCoeffs2, Size imageSize, double[,] R, double[] T, out double[,] R1, out double[,] R2, out double[,] P1, out double[,] P2, out double[,] Q, StereoRectificationFlags flags, double alpha, Size newImageSize, out Rect validPixROI1, out Rect validPixROI2)
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x222B4AC", Offset = "0x222B4AC", VA = "0x222B4AC")]
		public static bool StereoRectifyUncalibrated(InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold = 5.0)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x222B6DC", Offset = "0x222B6DC", VA = "0x222B6DC")]
		public static bool StereoRectifyUncalibrated(IEnumerable<Point2d> points1, IEnumerable<Point2d> points2, double[,] F, Size imgSize, out double[,] H1, out double[,] H2, double threshold = 5.0)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x222B924", Offset = "0x222B924", VA = "0x222B924")]
		public static float Rectify3Collinear(InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, InputArray cameraMatrix3, InputArray distCoeffs3, IEnumerable<InputArray> imgpt1, IEnumerable<InputArray> imgpt3, Size imageSize, InputArray R12, InputArray T12, InputArray R13, InputArray T13, OutputArray R1, OutputArray R2, OutputArray R3, OutputArray P1, OutputArray P2, OutputArray P3, OutputArray Q, double alpha, Size newImgSize, out Rect roi1, out Rect roi2, StereoRectificationFlags flags)
		{
			return default(float);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x222BFC8", Offset = "0x222BFC8", VA = "0x222BFC8")]
		public static Mat GetOptimalNewCameraMatrix(InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize, out Rect validPixROI, bool centerPrincipalPoint = false)
		{
			return null;
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x222C110", Offset = "0x222C110", VA = "0x222C110")]
		public static double[,] GetOptimalNewCameraMatrix(double[,] cameraMatrix, double[] distCoeffs, Size imageSize, double alpha, Size newImgSize, out Rect validPixROI, bool centerPrincipalPoint = false)
		{
			return null;
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x222C24C", Offset = "0x222C24C", VA = "0x222C24C")]
		public static void ConvertPointsToHomogeneous(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x222C36C", Offset = "0x222C36C", VA = "0x222C36C")]
		public static Vec3f[] ConvertPointsToHomogeneous(IEnumerable<Vec2f> src)
		{
			return null;
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x222C460", Offset = "0x222C460", VA = "0x222C460")]
		public static Vec4f[] ConvertPointsToHomogeneous(IEnumerable<Vec3f> src)
		{
			return null;
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x222C554", Offset = "0x222C554", VA = "0x222C554")]
		public static void ConvertPointsFromHomogeneous(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x222C674", Offset = "0x222C674", VA = "0x222C674")]
		public static Vec2f[] ConvertPointsFromHomogeneous(IEnumerable<Vec3f> src)
		{
			return null;
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x222C768", Offset = "0x222C768", VA = "0x222C768")]
		public static Vec3f[] ConvertPointsFromHomogeneous(IEnumerable<Vec4f> src)
		{
			return null;
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x222C85C", Offset = "0x222C85C", VA = "0x222C85C")]
		public static void ConvertPointsHomogeneous(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x222C97C", Offset = "0x222C97C", VA = "0x222C97C")]
		public static Mat FindFundamentalMat(InputArray points1, InputArray points2, FundamentalMatMethod method = FundamentalMatMethod.Ransac, double param1 = 3.0, double param2 = 0.99, [Optional] OutputArray mask)
		{
			return null;
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x222CB08", Offset = "0x222CB08", VA = "0x222CB08")]
		public static Mat FindFundamentalMat(IEnumerable<Point2d> points1, IEnumerable<Point2d> points2, FundamentalMatMethod method = FundamentalMatMethod.Ransac, double param1 = 3.0, double param2 = 0.99, [Optional] OutputArray mask)
		{
			return null;
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x222CC98", Offset = "0x222CC98", VA = "0x222CC98")]
		public static void ComputeCorrespondEpilines(InputArray points, int whichImage, InputArray F, OutputArray lines)
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x222CE0C", Offset = "0x222CE0C", VA = "0x222CE0C")]
		public static Point3f[] ComputeCorrespondEpilines(IEnumerable<Point2d> points, int whichImage, double[,] F)
		{
			return null;
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x222CF94", Offset = "0x222CF94", VA = "0x222CF94")]
		public static Point3f[] ComputeCorrespondEpilines(IEnumerable<Point3d> points, int whichImage, double[,] F)
		{
			return null;
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x222D11C", Offset = "0x222D11C", VA = "0x222D11C")]
		public static void TriangulatePoints(InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x222D310", Offset = "0x222D310", VA = "0x222D310")]
		public static Vec4d[] TriangulatePoints(double[,] projMatr1, double[,] projMatr2, IEnumerable<Point2d> projPoints1, IEnumerable<Point2d> projPoints2)
		{
			return null;
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x222D548", Offset = "0x222D548", VA = "0x222D548")]
		public static void CorrectMatches(InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x222D750", Offset = "0x222D750", VA = "0x222D750")]
		public static void CorrectMatches(double[,] F, IEnumerable<Point2d> points1, IEnumerable<Point2d> points2, out Point2d[] newPoints1, out Point2d[] newPoints2)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x222D8EC", Offset = "0x222D8EC", VA = "0x222D8EC")]
		public static void FilterSpeckles(InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, [Optional] InputOutputArray buf)
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x222D9FC", Offset = "0x222D9FC", VA = "0x222D9FC")]
		public static Rect GetValidDisparityROI(Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int SADWindowSize)
		{
			return default(Rect);
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x222DAAC", Offset = "0x222DAAC", VA = "0x222DAAC")]
		public static void ValidateDisparity(InputOutputArray disparity, InputArray cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp = 1)
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x222DBEC", Offset = "0x222DBEC", VA = "0x222DBEC")]
		public static void ReprojectImageTo3D(InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues = false, int ddepth = -1)
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x222DD68", Offset = "0x222DD68", VA = "0x222DD68")]
		public static int EstimateAffine3D(InputArray src, InputArray dst, OutputArray outVal, OutputArray inliers, double ransacThreshold = 3.0, double confidence = 0.99)
		{
			return default(int);
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x222DF48", Offset = "0x222DF48", VA = "0x222DF48")]
		public static void SetNumThreads(int nthreads)
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x222DFB0", Offset = "0x222DFB0", VA = "0x222DFB0")]
		public static int GetNumThreads()
		{
			return default(int);
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x222E010", Offset = "0x222E010", VA = "0x222E010")]
		public static int GetThreadNum()
		{
			return default(int);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x222E070", Offset = "0x222E070", VA = "0x222E070")]
		public static string GetBuildInformation()
		{
			return null;
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x222E12C", Offset = "0x222E12C", VA = "0x222E12C")]
		public static long GetTickCount()
		{
			return default(long);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x222E18C", Offset = "0x222E18C", VA = "0x222E18C")]
		public static double GetTickFrequency()
		{
			return default(double);
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x222E1EC", Offset = "0x222E1EC", VA = "0x222E1EC")]
		public static long GetCpuTickCount()
		{
			return default(long);
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x222E24C", Offset = "0x222E24C", VA = "0x222E24C")]
		public static bool CheckHardwareSupport(CpuFeatures feature)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x222E2C0", Offset = "0x222E2C0", VA = "0x222E2C0")]
		public static int GetNumberOfCpus()
		{
			return default(int);
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x222E320", Offset = "0x222E320", VA = "0x222E320")]
		public static IntPtr FastMalloc(long bufSize)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x222E3A8", Offset = "0x222E3A8", VA = "0x222E3A8")]
		public static void FastFree(IntPtr ptr)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x222E410", Offset = "0x222E410", VA = "0x222E410")]
		public static void SetUseOptimized(bool onoff)
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x222E47C", Offset = "0x222E47C", VA = "0x222E47C")]
		public static bool UseOptimized()
		{
			return default(bool);
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x222E4E8", Offset = "0x222E4E8", VA = "0x222E4E8")]
		public static int AlignSize(int sz, int n)
		{
			return default(int);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x222E57C", Offset = "0x222E57C", VA = "0x222E57C")]
		public static MatExpr Abs(Mat src)
		{
			return null;
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x222E6A0", Offset = "0x222E6A0", VA = "0x222E6A0")]
		public static MatExpr Abs(MatExpr src)
		{
			return null;
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x222E7C4", Offset = "0x222E7C4", VA = "0x222E7C4")]
		public static void Add(InputArray src1, InputArray src2, OutputArray dst, [Optional] InputArray mask, int dtype = -1)
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x222E98C", Offset = "0x222E98C", VA = "0x222E98C")]
		public static void Subtract(InputArray src1, InputArray src2, OutputArray dst, [Optional] InputArray mask, int dtype = -1)
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x222EB54", Offset = "0x222EB54", VA = "0x222EB54")]
		public static void Multiply(InputArray src1, InputArray src2, OutputArray dst, double scale = 1.0, int dtype = -1)
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x222ED18", Offset = "0x222ED18", VA = "0x222ED18")]
		public static void Divide(InputArray src1, InputArray src2, OutputArray dst, double scale = 1.0, int dtype = -1)
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x222EEDC", Offset = "0x222EEDC", VA = "0x222EEDC")]
		public static void Divide(double scale, InputArray src2, OutputArray dst, int dtype = -1)
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x222F048", Offset = "0x222F048", VA = "0x222F048")]
		public static void ScaleAdd(InputArray src1, double alpha, InputArray src2, OutputArray dst)
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x222F1FC", Offset = "0x222F1FC", VA = "0x222F1FC")]
		public static void AddWeighted(InputArray src1, double alpha, InputArray src2, double beta, double gamma, OutputArray dst, int dtype = -1)
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x222F3D8", Offset = "0x222F3D8", VA = "0x222F3D8")]
		public static void ConvertScaleAbs(InputArray src, OutputArray dst, double alpha = 1.0, double beta = 0.0)
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x222F53C", Offset = "0x222F53C", VA = "0x222F53C")]
		public static void LUT(InputArray src, InputArray lut, OutputArray dst, int interpolation = 0)
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x222F6E0", Offset = "0x222F6E0", VA = "0x222F6E0")]
		public static void LUT(InputArray src, byte[] lut, OutputArray dst, int interpolation = 0)
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x222F8CC", Offset = "0x222F8CC", VA = "0x222F8CC")]
		public static Scalar Sum(InputArray src)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x222F9F4", Offset = "0x222F9F4", VA = "0x222F9F4")]
		public static int CountNonZero(InputArray mtx)
		{
			return default(int);
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x222FABC", Offset = "0x222FABC", VA = "0x222FABC")]
		public static void FindNonZero(InputArray src, OutputArray idx)
		{
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x222FC08", Offset = "0x222FC08", VA = "0x222FC08")]
		public static Scalar Mean(InputArray src, [Optional] InputArray mask)
		{
			return default(Scalar);
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x222FD58", Offset = "0x222FD58", VA = "0x222FD58")]
		public static void MeanStdDev(InputArray src, OutputArray mean, OutputArray stddev, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x222FF24", Offset = "0x222FF24", VA = "0x222FF24")]
		public static void MeanStdDev(InputArray src, out Scalar mean, out Scalar stddev, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x2230058", Offset = "0x2230058", VA = "0x2230058")]
		public static double Norm(InputArray src1, NormTypes normType = NormTypes.L2, [Optional] InputArray mask)
		{
			return default(double);
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x2230198", Offset = "0x2230198", VA = "0x2230198")]
		public static double Norm(InputArray src1, InputArray src2, NormTypes normType = NormTypes.L2, [Optional] InputArray mask)
		{
			return default(double);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x2230330", Offset = "0x2230330", VA = "0x2230330")]
		public static void BatchDistance(InputArray src1, InputArray src2, OutputArray dist, int dtype, OutputArray nidx, NormTypes normType = NormTypes.L2, int k = 0, [Optional] InputArray mask, int update = 0, bool crosscheck = false)
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x2230580", Offset = "0x2230580", VA = "0x2230580")]
		public static void Normalize(InputArray src, InputOutputArray dst, double alpha = 1.0, double beta = 0.0, NormTypes normType = NormTypes.L2, int dtype = -1, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x2230718", Offset = "0x2230718", VA = "0x2230718")]
		public static void MinMaxLoc(InputArray src, out double minVal, out double maxVal)
		{
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x2230824", Offset = "0x2230824", VA = "0x2230824")]
		public static void MinMaxLoc(InputArray src, out Point minLoc, out Point maxLoc)
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x2230858", Offset = "0x2230858", VA = "0x2230858")]
		public static void MinMaxLoc(InputArray src, out double minVal, out double maxVal, out Point minLoc, out Point maxLoc, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x2230998", Offset = "0x2230998", VA = "0x2230998")]
		public static void MinMaxIdx(InputArray src, out double minVal, out double maxVal)
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x2230AA4", Offset = "0x2230AA4", VA = "0x2230AA4")]
		public static void MinMaxIdx(InputArray src, out int minIdx, out int maxIdx)
		{
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x2230AD8", Offset = "0x2230AD8", VA = "0x2230AD8")]
		public static void MinMaxIdx(InputArray src, out double minVal, out double maxVal, out int minIdx, out int maxIdx, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x2230C18", Offset = "0x2230C18", VA = "0x2230C18")]
		public static void Reduce(InputArray src, OutputArray dst, ReduceDimension dim, ReduceTypes rtype, int dtype)
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x2230D8C", Offset = "0x2230D8C", VA = "0x2230D8C")]
		public static void Merge(Mat[] mv, Mat dst)
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x2230FE8", Offset = "0x2230FE8", VA = "0x2230FE8")]
		public static void Split(Mat src, out Mat[] mv)
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x22311E4", Offset = "0x22311E4", VA = "0x22311E4")]
		public static Mat[] Split(Mat src)
		{
			return null;
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x223120C", Offset = "0x223120C", VA = "0x223120C")]
		public static void MixChannels(Mat[] src, Mat[] dst, int[] fromTo)
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x2231504", Offset = "0x2231504", VA = "0x2231504")]
		public static void ExtractChannel(InputArray src, OutputArray dst, int coi)
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x2231660", Offset = "0x2231660", VA = "0x2231660")]
		public static void InsertChannel(InputArray src, InputOutputArray dst, int coi)
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x22317BC", Offset = "0x22317BC", VA = "0x22317BC")]
		public static void Flip(InputArray src, OutputArray dst, FlipMode flipCode)
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x2231918", Offset = "0x2231918", VA = "0x2231918")]
		public static void Rotate(InputArray src, OutputArray dst, RotateFlags code)
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x2231A74", Offset = "0x2231A74", VA = "0x2231A74")]
		public static void Repeat(InputArray src, int ny, int nx, OutputArray dst)
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x2231BD8", Offset = "0x2231BD8", VA = "0x2231BD8")]
		public static Mat Repeat(Mat src, int ny, int nx)
		{
			return null;
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x2231D14", Offset = "0x2231D14", VA = "0x2231D14")]
		public static void HConcat(Mat[] src, OutputArray dst)
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x2231F0C", Offset = "0x2231F0C", VA = "0x2231F0C")]
		public static void HConcat(InputArray src1, InputArray src2, OutputArray dst)
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x22320B0", Offset = "0x22320B0", VA = "0x22320B0")]
		public static void VConcat(Mat[] src, OutputArray dst)
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x22322A8", Offset = "0x22322A8", VA = "0x22322A8")]
		public static void VConcat(InputArray src1, InputArray src2, OutputArray dst)
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x223244C", Offset = "0x223244C", VA = "0x223244C")]
		public static void BitwiseAnd(InputArray src1, InputArray src2, OutputArray dst, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x22220C8", Offset = "0x22220C8", VA = "0x22220C8")]
		public static void BitwiseOr(InputArray src1, InputArray src2, OutputArray dst, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x223260C", Offset = "0x223260C", VA = "0x223260C")]
		public static void BitwiseXor(InputArray src1, InputArray src2, OutputArray dst, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x223278C", Offset = "0x223278C", VA = "0x223278C")]
		public static void BitwiseNot(InputArray src, OutputArray dst, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x22328C0", Offset = "0x22328C0", VA = "0x22328C0")]
		public static void Absdiff(InputArray src1, InputArray src2, OutputArray dst)
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x2232A24", Offset = "0x2232A24", VA = "0x2232A24")]
		public static void InRange(InputArray src, InputArray lowerb, InputArray upperb, OutputArray dst)
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x2232BD4", Offset = "0x2232BD4", VA = "0x2232BD4")]
		public static void InRange(InputArray src, Scalar lowerb, Scalar upperb, OutputArray dst)
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x222299C", Offset = "0x222299C", VA = "0x222299C")]
		public static void Compare(InputArray src1, InputArray src2, OutputArray dst, CmpTypes cmpop)
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x2232D54", Offset = "0x2232D54", VA = "0x2232D54")]
		public static void Min(InputArray src1, InputArray src2, OutputArray dst)
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x2232EF8", Offset = "0x2232EF8", VA = "0x2232EF8")]
		public static void Min(Mat src1, Mat src2, Mat dst)
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x223309C", Offset = "0x223309C", VA = "0x223309C")]
		public static void Min(Mat src1, double src2, Mat dst)
		{
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x22331F8", Offset = "0x22331F8", VA = "0x22331F8")]
		public static void Max(InputArray src1, InputArray src2, OutputArray dst)
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x223339C", Offset = "0x223339C", VA = "0x223339C")]
		public static void Max(Mat src1, Mat src2, Mat dst)
		{
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x2233540", Offset = "0x2233540", VA = "0x2233540")]
		public static void Max(Mat src1, double src2, Mat dst)
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x223369C", Offset = "0x223369C", VA = "0x223369C")]
		public static void Sqrt(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x22337E8", Offset = "0x22337E8", VA = "0x22337E8")]
		public static void Pow(InputArray src, double power, OutputArray dst)
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x2233944", Offset = "0x2233944", VA = "0x2233944")]
		public static void Exp(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x2233A90", Offset = "0x2233A90", VA = "0x2233A90")]
		public static void Log(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x2233BDC", Offset = "0x2233BDC", VA = "0x2233BDC")]
		public static float CubeRoot(float val)
		{
			return default(float);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x2233C4C", Offset = "0x2233C4C", VA = "0x2233C4C")]
		public static float FastAtan2(float y, float x)
		{
			return default(float);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x2233CC4", Offset = "0x2233CC4", VA = "0x2233CC4")]
		public static void PolarToCart(InputArray magnitude, InputArray angle, OutputArray x, OutputArray y, bool angleInDegrees = false)
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x2233ED0", Offset = "0x2233ED0", VA = "0x2233ED0")]
		public static void CartToPolar(InputArray x, InputArray y, OutputArray magnitude, OutputArray angle, bool angleInDegrees = false)
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x22340DC", Offset = "0x22340DC", VA = "0x22340DC")]
		public static void Phase(InputArray x, InputArray y, OutputArray angle, bool angleInDegrees = false)
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x2234290", Offset = "0x2234290", VA = "0x2234290")]
		public static void Magnitude(InputArray x, InputArray y, OutputArray magnitude)
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x2234434", Offset = "0x2234434", VA = "0x2234434")]
		public static bool CheckRange(InputArray src, bool quiet = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x2234470", Offset = "0x2234470", VA = "0x2234470")]
		public static bool CheckRange(InputArray src, bool quiet, out Point pos, double minVal = double.MinValue, double maxVal = double.MaxValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x22345A8", Offset = "0x22345A8", VA = "0x22345A8")]
		public static void PatchNaNs(InputOutputArray a, double val = 0.0)
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x22346AC", Offset = "0x22346AC", VA = "0x22346AC")]
		public static void Gemm(InputArray src1, InputArray src2, double alpha, InputArray src3, double gamma, OutputArray dst, GemmFlags flags = GemmFlags.None)
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x22348D0", Offset = "0x22348D0", VA = "0x22348D0")]
		public static void MulTransposed(InputArray src, OutputArray dst, bool aTa, [Optional] InputArray delta, double scale = 1.0, int dtype = -1)
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x2234A70", Offset = "0x2234A70", VA = "0x2234A70")]
		public static void Transpose(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x2234BBC", Offset = "0x2234BBC", VA = "0x2234BBC")]
		public static void Transform(InputArray src, OutputArray dst, InputArray m)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x2234D54", Offset = "0x2234D54", VA = "0x2234D54")]
		public static void PerspectiveTransform(InputArray src, OutputArray dst, InputArray m)
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x2234EEC", Offset = "0x2234EEC", VA = "0x2234EEC")]
		public static Point2f[] PerspectiveTransform(IEnumerable<Point2f> src, Mat m)
		{
			return null;
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x22351D8", Offset = "0x22351D8", VA = "0x22351D8")]
		public static Point2d[] PerspectiveTransform(IEnumerable<Point2d> src, Mat m)
		{
			return null;
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x22354C4", Offset = "0x22354C4", VA = "0x22354C4")]
		public static Point3f[] PerspectiveTransform(IEnumerable<Point3f> src, Mat m)
		{
			return null;
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x22357B0", Offset = "0x22357B0", VA = "0x22357B0")]
		public static Point3d[] PerspectiveTransform(IEnumerable<Point3d> src, Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x2235A9C", Offset = "0x2235A9C", VA = "0x2235A9C")]
		public static void CompleteSymm(InputOutputArray mtx, bool lowerToUpper = false)
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x2235B80", Offset = "0x2235B80", VA = "0x2235B80")]
		public static void SetIdentity(InputOutputArray mtx, [Optional] Scalar? s)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x2235CD0", Offset = "0x2235CD0", VA = "0x2235CD0")]
		public static double Determinant(InputArray mtx)
		{
			return default(double);
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x2235DD8", Offset = "0x2235DD8", VA = "0x2235DD8")]
		public static Scalar Trace(InputArray mtx)
		{
			return default(Scalar);
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x2235F00", Offset = "0x2235F00", VA = "0x2235F00")]
		public static double Invert(InputArray src, OutputArray dst, DecompTypes flags = DecompTypes.LU)
		{
			return default(double);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x2236070", Offset = "0x2236070", VA = "0x2236070")]
		public static bool Solve(InputArray src1, InputArray src2, OutputArray dst, DecompTypes flags = DecompTypes.LU)
		{
			return default(bool);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x2236238", Offset = "0x2236238", VA = "0x2236238")]
		public static void Sort(InputArray src, OutputArray dst, SortFlags flags)
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x2236394", Offset = "0x2236394", VA = "0x2236394")]
		public static void SortIdx(InputArray src, OutputArray dst, SortFlags flags)
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x22364F0", Offset = "0x22364F0", VA = "0x22364F0")]
		public static int SolveCubic(InputArray coeffs, OutputArray roots)
		{
			return default(int);
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x223664C", Offset = "0x223664C", VA = "0x223664C")]
		public static double SolvePoly(InputArray coeffs, OutputArray roots, int maxIters = 300)
		{
			return default(double);
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x22367BC", Offset = "0x22367BC", VA = "0x22367BC")]
		public static bool Eigen(InputArray src, OutputArray eigenvalues, OutputArray eigenvectors)
		{
			return default(bool);
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x2236970", Offset = "0x2236970", VA = "0x2236970")]
		public static void CalcCovarMatrix(Mat[] samples, Mat covar, Mat mean, CovarFlags flags)
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x2236A0C", Offset = "0x2236A0C", VA = "0x2236A0C")]
		public static void CalcCovarMatrix(Mat[] samples, Mat covar, Mat mean, CovarFlags flags, MatType ctype)
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x2236BE0", Offset = "0x2236BE0", VA = "0x2236BE0")]
		public static void CalcCovarMatrix(InputArray samples, OutputArray covar, InputOutputArray mean, CovarFlags flags)
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x2236C7C", Offset = "0x2236C7C", VA = "0x2236C7C")]
		public static void CalcCovarMatrix(InputArray samples, OutputArray covar, InputOutputArray mean, CovarFlags flags, MatType ctype)
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x2236E58", Offset = "0x2236E58", VA = "0x2236E58")]
		public static void PCACompute(InputArray data, InputOutputArray mean, OutputArray eigenvectors, int maxComponents = 0)
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x223700C", Offset = "0x223700C", VA = "0x223700C")]
		public static void PCAComputeVar(InputArray data, InputOutputArray mean, OutputArray eigenvectors, double retainedVariance)
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x22371C0", Offset = "0x22371C0", VA = "0x22371C0")]
		public static void PCAProject(InputArray data, InputArray mean, InputArray eigenvectors, OutputArray result)
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x22373B0", Offset = "0x22373B0", VA = "0x22373B0")]
		public static void PCABackProject(InputArray data, InputArray mean, InputArray eigenvectors, OutputArray result)
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x22375AC", Offset = "0x22375AC", VA = "0x22375AC")]
		public static void SVDecomp(InputArray src, OutputArray w, OutputArray u, OutputArray vt, SVD.Flags flags = SVD.Flags.None)
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x2237784", Offset = "0x2237784", VA = "0x2237784")]
		public static void SVBackSubst(InputArray w, InputArray u, InputArray vt, InputArray rhs, OutputArray dst)
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x2237978", Offset = "0x2237978", VA = "0x2237978")]
		public static double Mahalanobis(InputArray v1, InputArray v2, InputArray icovar)
		{
			return default(double);
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x2237AD0", Offset = "0x2237AD0", VA = "0x2237AD0")]
		public static double Mahalonobis(InputArray v1, InputArray v2, InputArray icovar)
		{
			return default(double);
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x2237AD4", Offset = "0x2237AD4", VA = "0x2237AD4")]
		public static void Dft(InputArray src, OutputArray dst, DftFlags flags = DftFlags.None, int nonzeroRows = 0)
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x2237C38", Offset = "0x2237C38", VA = "0x2237C38")]
		public static void Idft(InputArray src, OutputArray dst, DftFlags flags = DftFlags.None, int nonzeroRows = 0)
		{
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x2237D9C", Offset = "0x2237D9C", VA = "0x2237D9C")]
		public static void Dct(InputArray src, OutputArray dst, DctFlags flags = DctFlags.None)
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x2237EF8", Offset = "0x2237EF8", VA = "0x2237EF8")]
		public static void Idct(InputArray src, OutputArray dst, DctFlags flags = DctFlags.None)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x2238054", Offset = "0x2238054", VA = "0x2238054")]
		public static void MulSpectrums(InputArray a, InputArray b, OutputArray c, DftFlags flags, bool conjB = false)
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x2238210", Offset = "0x2238210", VA = "0x2238210")]
		public static int GetOptimalDFTSize(int vecsize)
		{
			return default(int);
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x2238278", Offset = "0x2238278", VA = "0x2238278")]
		public static double Kmeans(InputArray data, int k, InputOutputArray bestLabels, TermCriteria criteria, int attempts, KMeansFlags flags, [Optional] OutputArray centers)
		{
			return default(double);
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x2238448", Offset = "0x2238448", VA = "0x2238448")]
		public static RNG TheRNG()
		{
			return null;
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x22384D8", Offset = "0x22384D8", VA = "0x22384D8")]
		public static void Randu(InputOutputArray dst, InputArray low, InputArray high)
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x223867C", Offset = "0x223867C", VA = "0x223867C")]
		public static void Randu(InputOutputArray dst, Scalar low, Scalar high)
		{
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x2238834", Offset = "0x2238834", VA = "0x2238834")]
		public static void Randn(InputOutputArray dst, InputArray mean, InputArray stddev)
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x22389D8", Offset = "0x22389D8", VA = "0x22389D8")]
		public static void Randn(InputOutputArray dst, Scalar mean, Scalar stddev)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x2238B0C", Offset = "0x2238B0C", VA = "0x2238B0C")]
		public static void RandShuffle(InputOutputArray dst, double iterFactor, [Optional] RNG rng)
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x2238C70", Offset = "0x2238C70", VA = "0x2238C70")]
		public static void Write(FileStorage fs, string name, int value)
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x2238D10", Offset = "0x2238D10", VA = "0x2238D10")]
		public static void Write(FileStorage fs, string name, float value)
		{
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x2238DB8", Offset = "0x2238DB8", VA = "0x2238DB8")]
		public static void Write(FileStorage fs, string name, double value)
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x2238E60", Offset = "0x2238E60", VA = "0x2238E60")]
		public static void Write(FileStorage fs, string name, string value)
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x2238F00", Offset = "0x2238F00", VA = "0x2238F00")]
		public static void Write(FileStorage fs, string name, Mat value)
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x2238FA0", Offset = "0x2238FA0", VA = "0x2238FA0")]
		public static void Write(FileStorage fs, string name, SparseMat value)
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x2239040", Offset = "0x2239040", VA = "0x2239040")]
		public static void Write(FileStorage fs, string name, IEnumerable<KeyPoint> value)
		{
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x22390E0", Offset = "0x22390E0", VA = "0x22390E0")]
		public static void Write(FileStorage fs, string name, IEnumerable<DMatch> value)
		{
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x2239180", Offset = "0x2239180", VA = "0x2239180")]
		public static void WriteScalar(FileStorage fs, int value)
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x2239218", Offset = "0x2239218", VA = "0x2239218")]
		public static void WriteScalar(FileStorage fs, float value)
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x22392B0", Offset = "0x22392B0", VA = "0x22392B0")]
		public static void WriteScalar(FileStorage fs, double value)
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x2239348", Offset = "0x2239348", VA = "0x2239348")]
		public static void WriteScalar(FileStorage fs, string value)
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x22393E0", Offset = "0x22393E0", VA = "0x22393E0")]
		public static int ReadInt(FileNode node, int defaultValue = 0)
		{
			return default(int);
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x2239478", Offset = "0x2239478", VA = "0x2239478")]
		public static float ReadFloat(FileNode node, float defaultValue = 0f)
		{
			return default(float);
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x2239510", Offset = "0x2239510", VA = "0x2239510")]
		public static double ReadDouble(FileNode node, double defaultValue = 0.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x22395A8", Offset = "0x22395A8", VA = "0x22395A8")]
		public static string ReadString(FileNode node, [Optional] string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x2239640", Offset = "0x2239640", VA = "0x2239640")]
		public static Mat ReadMat(FileNode node, [Optional] Mat defaultMat)
		{
			return null;
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x22396D8", Offset = "0x22396D8", VA = "0x22396D8")]
		public static SparseMat ReadSparseMat(FileNode node, [Optional] SparseMat defaultMat)
		{
			return null;
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x2239770", Offset = "0x2239770", VA = "0x2239770")]
		public static KeyPoint[] ReadKeyPoints(FileNode node)
		{
			return null;
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x22397F8", Offset = "0x22397F8", VA = "0x22397F8")]
		public static DMatch[] ReadDMatches(FileNode node)
		{
			return null;
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x2239880", Offset = "0x2239880", VA = "0x2239880")]
		public static KeyPoint[] FAST(InputArray image, int threshold, bool nonmaxSupression = true)
		{
			return null;
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x2239A94", Offset = "0x2239A94", VA = "0x2239A94")]
		public static KeyPoint[] FAST(InputArray image, int threshold, bool nonmaxSupression, FASTType type)
		{
			return null;
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x2239CB8", Offset = "0x2239CB8", VA = "0x2239CB8")]
		public static KeyPoint[] AGAST(InputArray image, int threshold, bool nonmaxSuppression, AGASTType type)
		{
			return null;
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x2239EDC", Offset = "0x2239EDC", VA = "0x2239EDC")]
		public static void DrawKeypoints(Mat image, IEnumerable<KeyPoint> keypoints, Mat outImage, [Optional] Scalar? color, DrawMatchesFlags flags = DrawMatchesFlags.Default)
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x223A0C4", Offset = "0x223A0C4", VA = "0x223A0C4")]
		public static void DrawMatches(Mat img1, IEnumerable<KeyPoint> keypoints1, Mat img2, IEnumerable<KeyPoint> keypoints2, IEnumerable<DMatch> matches1To2, Mat outImg, [Optional] Scalar? matchColor, [Optional] Scalar? singlePointColor, [Optional] IEnumerable<byte> matchesMask, DrawMatchesFlags flags = DrawMatchesFlags.Default)
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x223A418", Offset = "0x223A418", VA = "0x223A418")]
		public static void DrawMatches(Mat img1, IEnumerable<KeyPoint> keypoints1, Mat img2, IEnumerable<KeyPoint> keypoints2, IEnumerable<IEnumerable<DMatch>> matches1To2, Mat outImg, [Optional] Scalar? matchColor, [Optional] Scalar? singlePointColor, [Optional] IEnumerable<IEnumerable<byte>> matchesMask, DrawMatchesFlags flags = DrawMatchesFlags.Default)
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x223AC84", Offset = "0x223AC84", VA = "0x223AC84")]
		public static void EvaluateFeatureDetector(Mat img1, Mat img2, Mat H1to2, ref KeyPoint[] keypoints1, ref KeyPoint[] keypoints2, out float repeatability, out int correspCount)
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x223B050", Offset = "0x223B050", VA = "0x223B050")]
		public static Point2f[] ComputeRecallPrecisionCurve(DMatch[][] matches1to2, byte[][] correctMatches1to2Mask)
		{
			return null;
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x223B47C", Offset = "0x223B47C", VA = "0x223B47C")]
		public static float GetRecall(IEnumerable<Point2f> recallPrecisionCurve, float lPrecision)
		{
			return default(float);
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x223B558", Offset = "0x223B558", VA = "0x223B558")]
		public static int GetNearestPoint(IEnumerable<Point2f> recallPrecisionCurve, float lPrecision)
		{
			return default(int);
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x223B634", Offset = "0x223B634", VA = "0x223B634")]
		public static void NamedWindow(string winname)
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x223B63C", Offset = "0x223B63C", VA = "0x223B63C")]
		public static void NamedWindow(string winname, WindowMode flags)
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x223B78C", Offset = "0x223B78C", VA = "0x223B78C")]
		public static void DestroyWindow(string winName)
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x223B848", Offset = "0x223B848", VA = "0x223B848")]
		public static void DestroyAllWindows()
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x223B8A8", Offset = "0x223B8A8", VA = "0x223B8A8")]
		public static void ImShow(string winname, Mat mat)
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x223BA28", Offset = "0x223BA28", VA = "0x223BA28")]
		public static int StartWindowThread()
		{
			return default(int);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x223BA88", Offset = "0x223BA88", VA = "0x223BA88")]
		public static int WaitKey(int delay = 0)
		{
			return default(int);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x223BB80", Offset = "0x223BB80", VA = "0x223BB80")]
		public static void ResizeWindow(string winName, int width, int height)
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x223BC4C", Offset = "0x223BC4C", VA = "0x223BC4C")]
		public static void MoveWindow(string winName, int x, int y)
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x223BD18", Offset = "0x223BD18", VA = "0x223BD18")]
		public static void SetWindowProperty(string winName, WindowProperty propId, double propValue)
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x223BDEC", Offset = "0x223BDEC", VA = "0x223BDEC")]
		public static void SetWindowTitle(string winname, string title)
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x223BEDC", Offset = "0x223BEDC", VA = "0x223BEDC")]
		public static double GetWindowProperty(string winName, WindowProperty propId)
		{
			return default(double);
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x223BFA0", Offset = "0x223BFA0", VA = "0x223BFA0")]
		public static void SetMouseCallback(string windowName, CvMouseCallback onMouse)
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x223C0A0", Offset = "0x223C0A0", VA = "0x223C0A0")]
		public static Mat ImRead(string fileName, ImreadModes flags = ImreadModes.Color)
		{
			return null;
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x223C114", Offset = "0x223C114", VA = "0x223C114")]
		public static bool ImReadMulti(string filename, out Mat[] mats, ImreadModes flags = ImreadModes.AnyColor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x223C2F0", Offset = "0x223C2F0", VA = "0x223C2F0")]
		public static bool ImWrite(string fileName, Mat img, [Optional] int[] prms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x223C430", Offset = "0x223C430", VA = "0x223C430")]
		public static bool ImWrite(string fileName, Mat img, params ImageEncodingParam[] prms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x223C558", Offset = "0x223C558", VA = "0x223C558")]
		public static Mat ImDecode(Mat buf, ImreadModes flags)
		{
			return null;
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x223C68C", Offset = "0x223C68C", VA = "0x223C68C")]
		public static Mat ImDecode(InputArray buf, ImreadModes flags)
		{
			return null;
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x223C7C0", Offset = "0x223C7C0", VA = "0x223C7C0")]
		public static Mat ImDecode(byte[] buf, ImreadModes flags)
		{
			return null;
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x223C8C0", Offset = "0x223C8C0", VA = "0x223C8C0")]
		public static bool ImEncode(string ext, InputArray img, out byte[] buf, [Optional] int[] prms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x223CB18", Offset = "0x223CB18", VA = "0x223CB18")]
		public static void ImEncode(string ext, InputArray img, out byte[] buf, params ImageEncodingParam[] prms)
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x223CC5C", Offset = "0x223CC5C", VA = "0x223CC5C")]
		public static void ConvertImage(Mat src, Mat dst, ConvertImageModes flags = ConvertImageModes.None)
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x223CE08", Offset = "0x223CE08", VA = "0x223CE08")]
		public static bool HaveImageReader(string fileName)
		{
			return default(bool);
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x223CEBC", Offset = "0x223CEBC", VA = "0x223CEBC")]
		public static bool HaveImageWriter(string fileName)
		{
			return default(bool);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x223CF70", Offset = "0x223CF70", VA = "0x223CF70")]
		public static Mat GetGaussianKernel(int ksize, double sigma, [Optional] MatType? ktype)
		{
			return null;
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x223D07C", Offset = "0x223D07C", VA = "0x223D07C")]
		public static void GetDerivKernels(OutputArray kx, OutputArray ky, int dx, int dy, int ksize, bool normalize = false, [Optional] MatType? ktype)
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x223D254", Offset = "0x223D254", VA = "0x223D254")]
		public static Mat GetGaborKernel(Size ksize, double sigma, double theta, double lambd, double gamma, double psi, int ktype)
		{
			return null;
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x223D33C", Offset = "0x223D33C", VA = "0x223D33C")]
		public static Mat GetStructuringElement(MorphShapes shape, Size ksize)
		{
			return null;
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x223D38C", Offset = "0x223D38C", VA = "0x223D38C")]
		public static Mat GetStructuringElement(MorphShapes shape, Size ksize, Point anchor)
		{
			return null;
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x223D43C", Offset = "0x223D43C", VA = "0x223D43C")]
		public static void CopyMakeBorder(InputArray src, OutputArray dst, int top, int bottom, int left, int right, BorderTypes borderType, [Optional] Scalar? value)
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x223D620", Offset = "0x223D620", VA = "0x223D620")]
		public static void MedianBlur(InputArray src, OutputArray dst, int ksize)
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x223D77C", Offset = "0x223D77C", VA = "0x223D77C")]
		public static void GaussianBlur(InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x223D8F8", Offset = "0x223D8F8", VA = "0x223D8F8")]
		public static void BilateralFilter(InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x223DA74", Offset = "0x223DA74", VA = "0x223DA74")]
		public static void BoxFilter(InputArray src, OutputArray dst, MatType ddepth, Size ksize, [Optional] Point? anchor, bool normalize = true, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x223DC68", Offset = "0x223DC68", VA = "0x223DC68")]
		public static void Blur(InputArray src, OutputArray dst, Size ksize, [Optional] Point? anchor, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x223DE20", Offset = "0x223DE20", VA = "0x223DE20")]
		public static void Filter2D(InputArray src, OutputArray dst, MatType ddepth, InputArray kernel, [Optional] Point? anchor, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x223E050", Offset = "0x223E050", VA = "0x223E050")]
		public static void SepFilter2D(InputArray src, OutputArray dst, MatType ddepth, InputArray kernelX, InputArray kernelY, [Optional] Point? anchor, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x223E2CC", Offset = "0x223E2CC", VA = "0x223E2CC")]
		public static void Sobel(InputArray src, OutputArray dst, MatType ddepth, int xorder, int yorder, int ksize = 3, double scale = 1.0, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x223E490", Offset = "0x223E490", VA = "0x223E490")]
		public static void Scharr(InputArray src, OutputArray dst, MatType ddepth, int xorder, int yorder, double scale = 1.0, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x223E644", Offset = "0x223E644", VA = "0x223E644")]
		public static void Laplacian(InputArray src, OutputArray dst, MatType ddepth, int ksize = 1, double scale = 1.0, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x223E7F0", Offset = "0x223E7F0", VA = "0x223E7F0")]
		public static void Canny(InputArray src, OutputArray edges, double threshold1, double threshold2, int apertureSize = 3, bool L2gradient = false)
		{
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x223E96C", Offset = "0x223E96C", VA = "0x223E96C")]
		public static void CornerEigenValsAndVecs(InputArray src, OutputArray dst, int blockSize, int ksize, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x223EAE0", Offset = "0x223EAE0", VA = "0x223EAE0")]
		public static void PreCornerDetect(InputArray src, OutputArray dst, int ksize, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x223EC44", Offset = "0x223EC44", VA = "0x223EC44")]
		public static Point2f[] CornerSubPix(InputArray image, IEnumerable<Point2f> inputCorners, Size winSize, Size zeroZone, TermCriteria criteria)
		{
			return null;
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x223EEE4", Offset = "0x223EEE4", VA = "0x223EEE4")]
		public static Point2f[] GoodFeaturesToTrack(InputArray src, int maxCorners, double qualityLevel, double minDistance, InputArray mask, int blockSize, bool useHarrisDetector, double k)
		{
			return null;
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x223F14C", Offset = "0x223F14C", VA = "0x223F14C")]
		public static LineSegmentPolar[] HoughLines(InputArray image, double rho, double theta, int threshold, double srn = 0.0, double stn = 0.0)
		{
			return null;
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x223F384", Offset = "0x223F384", VA = "0x223F384")]
		public static LineSegmentPoint[] HoughLinesP(InputArray image, double rho, double theta, int threshold, double minLineLength = 0.0, double maxLineGap = 0.0)
		{
			return null;
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x223F5C8", Offset = "0x223F5C8", VA = "0x223F5C8")]
		public static CircleSegment[] HoughCircles(InputArray image, HoughMethods method, double dp, double minDist, double param1 = 100.0, double param2 = 100.0, int minRadius = 0, int maxRadius = 0)
		{
			return null;
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x223F824", Offset = "0x223F824", VA = "0x223F824")]
		public static Scalar MorphologyDefaultBorderValue()
		{
			return default(Scalar);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x223F88C", Offset = "0x223F88C", VA = "0x223F88C")]
		public static void Dilate(InputArray src, OutputArray dst, InputArray element, [Optional] Point? anchor, int iterations = 1, BorderTypes borderType = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x223FAA4", Offset = "0x223FAA4", VA = "0x223FAA4")]
		public static void Erode(InputArray src, OutputArray dst, InputArray element, [Optional] Point? anchor, int iterations = 1, BorderTypes borderType = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x223FCBC", Offset = "0x223FCBC", VA = "0x223FCBC")]
		public static void MorphologyEx(InputArray src, OutputArray dst, MorphTypes op, InputArray element, [Optional] Point? anchor, int iterations = 1, BorderTypes borderType = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x223FEE4", Offset = "0x223FEE4", VA = "0x223FEE4")]
		public static void Resize(InputArray src, OutputArray dst, Size dsize, double fx = 0.0, double fy = 0.0, InterpolationFlags interpolation = InterpolationFlags.Linear)
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x2240060", Offset = "0x2240060", VA = "0x2240060")]
		public static void WarpAffine(InputArray src, OutputArray dst, InputArray m, Size dsize, InterpolationFlags flags = InterpolationFlags.Linear, BorderTypes borderMode = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x224028C", Offset = "0x224028C", VA = "0x224028C")]
		public static void WarpPerspective(InputArray src, OutputArray dst, InputArray m, Size dsize, InterpolationFlags flags = InterpolationFlags.Linear, BorderTypes borderMode = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x22404B8", Offset = "0x22404B8", VA = "0x22404B8")]
		public static void WarpPerspective(InputArray src, OutputArray dst, float[,] m, Size dsize, InterpolationFlags flags = InterpolationFlags.Linear, BorderTypes borderMode = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x2240708", Offset = "0x2240708", VA = "0x2240708")]
		public static void Remap(InputArray src, OutputArray dst, InputArray map1, InputArray map2, InterpolationFlags interpolation = InterpolationFlags.Linear, BorderTypes borderMode = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x2240970", Offset = "0x2240970", VA = "0x2240970")]
		public static void ConvertMaps(InputArray map1, InputArray map2, OutputArray dstmap1, OutputArray dstmap2, MatType dstmap1Type, bool nnInterpolation = false)
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x2240BA8", Offset = "0x2240BA8", VA = "0x2240BA8")]
		public static Mat GetRotationMatrix2D(Point2f center, double angle, double scale)
		{
			return null;
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x2240C68", Offset = "0x2240C68", VA = "0x2240C68")]
		public static void InvertAffineTransform(InputArray m, OutputArray im)
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x2240DB4", Offset = "0x2240DB4", VA = "0x2240DB4")]
		public static Mat GetPerspectiveTransform(IEnumerable<Point2f> src, IEnumerable<Point2f> dst)
		{
			return null;
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x2240EE8", Offset = "0x2240EE8", VA = "0x2240EE8")]
		public static Mat GetPerspectiveTransform(InputArray src, InputArray dst)
		{
			return null;
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x2241064", Offset = "0x2241064", VA = "0x2241064")]
		public static Mat GetAffineTransform(IEnumerable<Point2f> src, IEnumerable<Point2f> dst)
		{
			return null;
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x2241198", Offset = "0x2241198", VA = "0x2241198")]
		public static Mat GetAffineTransform(InputArray src, InputArray dst)
		{
			return null;
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x2241314", Offset = "0x2241314", VA = "0x2241314")]
		public static void GetRectSubPix(InputArray image, Size patchSize, Point2f center, OutputArray patch, int patchType = -1)
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x2241490", Offset = "0x2241490", VA = "0x2241490")]
		public static void LogPolar(InputArray src, OutputArray dst, Point2f center, double m, InterpolationFlags flags)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x2241614", Offset = "0x2241614", VA = "0x2241614")]
		public static void LinearPolar(InputArray src, OutputArray dst, Point2f center, double maxRadius, InterpolationFlags flags)
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x2241798", Offset = "0x2241798", VA = "0x2241798")]
		public static void Integral(InputArray src, OutputArray sum, int sdepth = -1)
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x22418F4", Offset = "0x22418F4", VA = "0x22418F4")]
		public static void Integral(InputArray src, OutputArray sum, OutputArray sqsum, int sdepth = -1)
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x2241AA8", Offset = "0x2241AA8", VA = "0x2241AA8")]
		public static void Integral(InputArray src, OutputArray sum, OutputArray sqsum, OutputArray tilted, int sdepth = -1)
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x2241CB4", Offset = "0x2241CB4", VA = "0x2241CB4")]
		public static void Accumulate(InputArray src, InputOutputArray dst, InputArray mask)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x2241E1C", Offset = "0x2241E1C", VA = "0x2241E1C")]
		public static void AccumulateSquare(InputArray src, InputOutputArray dst, InputArray mask)
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x2241F84", Offset = "0x2241F84", VA = "0x2241F84")]
		public static void AccumulateProduct(InputArray src1, InputArray src2, InputOutputArray dst, InputArray mask)
		{
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x2242144", Offset = "0x2242144", VA = "0x2242144")]
		public static void AccumulateWeighted(InputArray src, InputOutputArray dst, double alpha, InputArray mask)
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x22422BC", Offset = "0x22422BC", VA = "0x22422BC")]
		public static double PSNR(InputArray src1, InputArray src2)
		{
			return default(double);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x224241C", Offset = "0x224241C", VA = "0x224241C")]
		public static Point2d PhaseCorrelate(InputArray src1, InputArray src2, [Optional] InputArray window)
		{
			return default(Point2d);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x22425A0", Offset = "0x22425A0", VA = "0x22425A0")]
		public static Point2d PhaseCorrelateRes(InputArray src1, InputArray src2, InputArray window)
		{
			return default(Point2d);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x22425C4", Offset = "0x22425C4", VA = "0x22425C4")]
		public static Point2d PhaseCorrelateRes(InputArray src1, InputArray src2, InputArray window, out double response)
		{
			return default(Point2d);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x2242778", Offset = "0x2242778", VA = "0x2242778")]
		public static void CreateHanningWindow(InputOutputArray dst, Size winSize, MatType type)
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x2242884", Offset = "0x2242884", VA = "0x2242884")]
		public static double Threshold(InputArray src, OutputArray dst, double thresh, double maxval, ThresholdTypes type)
		{
			return default(double);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x2242A04", Offset = "0x2242A04", VA = "0x2242A04")]
		public static void AdaptiveThreshold(InputArray src, OutputArray dst, double maxValue, AdaptiveThresholdTypes adaptiveMethod, ThresholdTypes thresholdType, int blockSize, double c)
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x2242B90", Offset = "0x2242B90", VA = "0x2242B90")]
		public static void PyrDown(InputArray src, OutputArray dst, [Optional] Size? dstSize, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x2242D20", Offset = "0x2242D20", VA = "0x2242D20")]
		public static void PyrUp(InputArray src, OutputArray dst, [Optional] Size? dstSize, BorderTypes borderType = BorderTypes.Reflect101)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x2242EB0", Offset = "0x2242EB0", VA = "0x2242EB0")]
		public static void Undistort(InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, [Optional] InputArray newCameraMatrix)
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x2243078", Offset = "0x2243078", VA = "0x2243078")]
		public static void InitUndistortRectifyMap(InputArray cameraMatrix, InputArray distCoeffs, InputArray r, InputArray newCameraMatrix, Size size, MatType m1Type, OutputArray map1, OutputArray map2)
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x2243354", Offset = "0x2243354", VA = "0x2243354")]
		public static float InitWideAngleProjMap(InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, int destImageWidth, MatType m1Type, OutputArray map1, OutputArray map2, ProjectionType projType, double alpha = 0.0)
		{
			return default(float);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x22435C8", Offset = "0x22435C8", VA = "0x22435C8")]
		public static Mat GetDefaultNewCameraMatrix(InputArray cameraMatrix, [Optional] Size? imgSize, bool centerPrincipalPoint = false)
		{
			return null;
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x224372C", Offset = "0x224372C", VA = "0x224372C")]
		public static void UndistortPoints(InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, [Optional] InputArray r, [Optional] InputArray p)
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x224393C", Offset = "0x224393C", VA = "0x224393C")]
		public static void CalcHist(Mat[] images, int[] channels, InputArray mask, OutputArray hist, int dims, int[] histSize, Rangef[] ranges, bool uniform = true, bool accumulate = false)
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x2243AF8", Offset = "0x2243AF8", VA = "0x2243AF8")]
		public static void CalcHist(Mat[] images, int[] channels, InputArray mask, OutputArray hist, int dims, int[] histSize, float[][] ranges, bool uniform = true, bool accumulate = false)
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x2243E24", Offset = "0x2243E24", VA = "0x2243E24")]
		public static void CalcBackProject(Mat[] images, int[] channels, InputArray hist, OutputArray backProject, Rangef[] ranges, bool uniform = true)
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x22441DC", Offset = "0x22441DC", VA = "0x22441DC")]
		public static double CompareHist(InputArray h1, InputArray h2, HistCompMethods method)
		{
			return default(double);
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x224434C", Offset = "0x224434C", VA = "0x224434C")]
		public static void EqualizeHist(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x2244498", Offset = "0x2244498", VA = "0x2244498")]
		public static CLAHE CreateCLAHE(double clipLimit = 40.0, [Optional] Size? tileGridSize)
		{
			return null;
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x22444A0", Offset = "0x22444A0", VA = "0x22444A0")]
		public static float EMD(InputArray signature1, InputArray signature2, DistanceTypes distType)
		{
			return default(float);
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x224469C", Offset = "0x224469C", VA = "0x224469C")]
		public static float EMD(InputArray signature1, InputArray signature2, DistanceTypes distType, InputArray cost)
		{
			return default(float);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x22446C8", Offset = "0x22446C8", VA = "0x22446C8")]
		public static float EMD(InputArray signature1, InputArray signature2, DistanceTypes distType, InputArray cost, out float lowerBound)
		{
			return default(float);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x22444D0", Offset = "0x22444D0", VA = "0x22444D0")]
		public static float EMD(InputArray signature1, InputArray signature2, DistanceTypes distType, InputArray cost, out float lowerBound, OutputArray flow)
		{
			return default(float);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x22446D4", Offset = "0x22446D4", VA = "0x22446D4")]
		public static void Watershed(InputArray image, InputOutputArray markers)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x2244820", Offset = "0x2244820", VA = "0x2244820")]
		public static void PyrMeanShiftFiltering(InputArray src, OutputArray dst, double sp, double sr, int maxLevel = 1, [Optional] TermCriteria? termcrit)
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x22449F0", Offset = "0x22449F0", VA = "0x22449F0")]
		public static void GrabCut(InputArray img, InputOutputArray mask, Rect rect, InputOutputArray bgdModel, InputOutputArray fgdModel, int iterCount, GrabCutModes mode)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x2244C1C", Offset = "0x2244C1C", VA = "0x2244C1C")]
		public static void DistanceTransformWithLabels(InputArray src, OutputArray dst, OutputArray labels, DistanceTypes distanceType, DistanceMaskSize maskSize, DistanceTransformLabelTypes labelType = DistanceTransformLabelTypes.CComp)
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x2244DE8", Offset = "0x2244DE8", VA = "0x2244DE8")]
		public static void DistanceTransform(InputArray src, OutputArray dst, DistanceTypes distanceType, DistanceMaskSize maskSize)
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x2244F4C", Offset = "0x2244F4C", VA = "0x2244F4C")]
		public static int FloodFill(InputOutputArray image, Point seedPoint, Scalar newVal)
		{
			return default(int);
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x2244F90", Offset = "0x2244F90", VA = "0x2244F90")]
		public static int FloodFill(InputOutputArray image, Point seedPoint, Scalar newVal, out Rect rect, [Optional] Scalar? loDiff, [Optional] Scalar? upDiff, FloodFillFlags flags = FloodFillFlags.Link4)
		{
			return default(int);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x2245160", Offset = "0x2245160", VA = "0x2245160")]
		public static int FloodFill(InputOutputArray image, InputOutputArray mask, Point seedPoint, Scalar newVal)
		{
			return default(int);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x22451A4", Offset = "0x22451A4", VA = "0x22451A4")]
		public static int FloodFill(InputOutputArray image, InputOutputArray mask, Point seedPoint, Scalar newVal, out Rect rect, [Optional] Scalar? loDiff, [Optional] Scalar? upDiff, FloodFillFlags flags = FloodFillFlags.Link4)
		{
			return default(int);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x22453CC", Offset = "0x22453CC", VA = "0x22453CC")]
		public static void CvtColor(InputArray src, OutputArray dst, ColorConversionCodes code, int dstCn = 0)
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x2245530", Offset = "0x2245530", VA = "0x2245530")]
		public static Moments Moments(InputArray array, bool binaryImage = false)
		{
			return null;
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x22455A4", Offset = "0x22455A4", VA = "0x22455A4")]
		public static Moments Moments(byte[,] array, bool binaryImage = false)
		{
			return null;
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x2245618", Offset = "0x2245618", VA = "0x2245618")]
		public static Moments Moments(float[,] array, bool binaryImage = false)
		{
			return null;
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x224568C", Offset = "0x224568C", VA = "0x224568C")]
		public static Moments Moments(IEnumerable<Point> array, bool binaryImage = false)
		{
			return null;
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x2245700", Offset = "0x2245700", VA = "0x2245700")]
		public static Moments Moments(IEnumerable<Point2f> array, bool binaryImage = false)
		{
			return null;
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x2245774", Offset = "0x2245774", VA = "0x2245774")]
		public static void MatchTemplate(InputArray image, InputArray templ, OutputArray result, TemplateMatchModes method, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x2245960", Offset = "0x2245960", VA = "0x2245960")]
		public static int ConnectedComponents(InputArray image, OutputArray labels, PixelConnectivity connectivity = PixelConnectivity.Connectivity8)
		{
			return default(int);
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x22459EC", Offset = "0x22459EC", VA = "0x22459EC")]
		public static int ConnectedComponents(InputArray image, OutputArray labels, PixelConnectivity connectivity, MatType ltype)
		{
			return default(int);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x2245B80", Offset = "0x2245B80", VA = "0x2245B80")]
		public static int ConnectedComponents(InputArray image, out int[,] labels, PixelConnectivity connectivity)
		{
			return default(int);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x2245D2C", Offset = "0x2245D2C", VA = "0x2245D2C")]
		public static int ConnectedComponentsWithStats(InputArray image, OutputArray labels, OutputArray stats, OutputArray centroids, PixelConnectivity connectivity = PixelConnectivity.Connectivity8)
		{
			return default(int);
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x2245DD0", Offset = "0x2245DD0", VA = "0x2245DD0")]
		public static int ConnectedComponentsWithStats(InputArray image, OutputArray labels, OutputArray stats, OutputArray centroids, PixelConnectivity connectivity, MatType ltype)
		{
			return default(int);
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x2246014", Offset = "0x2246014", VA = "0x2246014")]
		public static ConnectedComponents ConnectedComponentsEx(InputArray image, PixelConnectivity connectivity = PixelConnectivity.Connectivity8)
		{
			return null;
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x22466C4", Offset = "0x22466C4", VA = "0x22466C4")]
		public static void FindContours(InputOutputArray image, out Point[][] contours, out HierarchyIndex[] hierarchy, RetrievalModes mode, ContourApproximationModes method, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x2246A44", Offset = "0x2246A44", VA = "0x2246A44")]
		public static void FindContours(InputOutputArray image, out Mat[] contours, OutputArray hierarchy, RetrievalModes mode, ContourApproximationModes method, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x2246CB8", Offset = "0x2246CB8", VA = "0x2246CB8")]
		public static Point[][] FindContoursAsArray(InputOutputArray image, RetrievalModes mode, ContourApproximationModes method, [Optional] Point? offset)
		{
			return null;
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x2246ECC", Offset = "0x2246ECC", VA = "0x2246ECC")]
		public static MatOfPoint[] FindContoursAsMat(InputOutputArray image, RetrievalModes mode, ContourApproximationModes method, [Optional] Point? offset)
		{
			return null;
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x22470E8", Offset = "0x22470E8", VA = "0x22470E8")]
		public static void ApproxPolyDP(InputArray curve, OutputArray approxCurve, double epsilon, bool closed)
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x2247254", Offset = "0x2247254", VA = "0x2247254")]
		public static Point[] ApproxPolyDP(IEnumerable<Point> curve, double epsilon, bool closed)
		{
			return null;
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x2247440", Offset = "0x2247440", VA = "0x2247440")]
		public static Point2f[] ApproxPolyDP(IEnumerable<Point2f> curve, double epsilon, bool closed)
		{
			return null;
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x224762C", Offset = "0x224762C", VA = "0x224762C")]
		public static double ArcLength(InputArray curve, bool closed)
		{
			return default(double);
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x2247744", Offset = "0x2247744", VA = "0x2247744")]
		public static double ArcLength(IEnumerable<Point> curve, bool closed)
		{
			return default(double);
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x2247828", Offset = "0x2247828", VA = "0x2247828")]
		public static double ArcLength(IEnumerable<Point2f> curve, bool closed)
		{
			return default(double);
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x224790C", Offset = "0x224790C", VA = "0x224790C")]
		public static Rect BoundingRect(InputArray curve)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x2247A1C", Offset = "0x2247A1C", VA = "0x2247A1C")]
		public static Rect BoundingRect(IEnumerable<Point> curve)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x2247AE8", Offset = "0x2247AE8", VA = "0x2247AE8")]
		public static Rect BoundingRect(IEnumerable<Point2f> curve)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x2247BB4", Offset = "0x2247BB4", VA = "0x2247BB4")]
		public static double ContourArea(InputArray contour, bool oriented = false)
		{
			return default(double);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x2247CCC", Offset = "0x2247CCC", VA = "0x2247CCC")]
		public static double ContourArea(IEnumerable<Point> contour, bool oriented = false)
		{
			return default(double);
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x2247DB0", Offset = "0x2247DB0", VA = "0x2247DB0")]
		public static double ContourArea(IEnumerable<Point2f> contour, bool oriented = false)
		{
			return default(double);
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x2247E94", Offset = "0x2247E94", VA = "0x2247E94")]
		public static RotatedRect MinAreaRect(InputArray points)
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x2247F98", Offset = "0x2247F98", VA = "0x2247F98")]
		public static RotatedRect MinAreaRect(IEnumerable<Point> points)
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x2248074", Offset = "0x2248074", VA = "0x2248074")]
		public static RotatedRect MinAreaRect(IEnumerable<Point2f> points)
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x2248150", Offset = "0x2248150", VA = "0x2248150")]
		public static void MinEnclosingCircle(InputArray points, out Point2f center, out float radius)
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x224825C", Offset = "0x224825C", VA = "0x224825C")]
		public static void MinEnclosingCircle(IEnumerable<Point> points, out Point2f center, out float radius)
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x2248340", Offset = "0x2248340", VA = "0x2248340")]
		public static void MinEnclosingCircle(IEnumerable<Point2f> points, out Point2f center, out float radius)
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x2248424", Offset = "0x2248424", VA = "0x2248424")]
		public static double MatchShapes(InputArray contour1, InputArray contour2, ShapeMatchModes method, double parameter = 0.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x2248584", Offset = "0x2248584", VA = "0x2248584")]
		public static double MatchShapes(IEnumerable<Point> contour1, IEnumerable<Point> contour2, ShapeMatchModes method, double parameter = 0.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x22486B0", Offset = "0x22486B0", VA = "0x22486B0")]
		public static void ConvexHull(InputArray points, OutputArray hull, bool clockwise = false, bool returnPoints = true)
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x2248818", Offset = "0x2248818", VA = "0x2248818")]
		public static Point[] ConvexHull(IEnumerable<Point> points, bool clockwise = false)
		{
			return null;
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x22489EC", Offset = "0x22489EC", VA = "0x22489EC")]
		public static Point2f[] ConvexHull(IEnumerable<Point2f> points, bool clockwise = false)
		{
			return null;
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x2248BC0", Offset = "0x2248BC0", VA = "0x2248BC0")]
		public static int[] ConvexHullIndices(IEnumerable<Point> points, bool clockwise = false)
		{
			return null;
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x2248D94", Offset = "0x2248D94", VA = "0x2248D94")]
		public static int[] ConvexHullIndices(IEnumerable<Point2f> points, bool clockwise = false)
		{
			return null;
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x2248F68", Offset = "0x2248F68", VA = "0x2248F68")]
		public static void ConvexityDefects(InputArray contour, InputArray convexHull, OutputArray convexityDefects)
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x224910C", Offset = "0x224910C", VA = "0x224910C")]
		public static Vec4i[] ConvexityDefects(IEnumerable<Point> contour, IEnumerable<int> convexHull)
		{
			return null;
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0x2249318", Offset = "0x2249318", VA = "0x2249318")]
		public static Vec4i[] ConvexityDefects(IEnumerable<Point2f> contour, IEnumerable<int> convexHull)
		{
			return null;
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x2249524", Offset = "0x2249524", VA = "0x2249524")]
		public static bool IsContourConvex(InputArray contour)
		{
			return default(bool);
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0x224962C", Offset = "0x224962C", VA = "0x224962C")]
		public static bool IsContourConvex(IEnumerable<Point> contour)
		{
			return default(bool);
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x2249704", Offset = "0x2249704", VA = "0x2249704")]
		public static bool IsContourConvex(IEnumerable<Point2f> contour)
		{
			return default(bool);
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x22497DC", Offset = "0x22497DC", VA = "0x22497DC")]
		public static float IntersectConvexConvex(InputArray p1, InputArray p2, OutputArray p12, bool handleNested = true)
		{
			return default(float);
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x22499A4", Offset = "0x22499A4", VA = "0x22499A4")]
		public static float IntersectConvexConvex(IEnumerable<Point> p1, IEnumerable<Point> p2, out Point[] p12, bool handleNested = true)
		{
			return default(float);
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x2249BDC", Offset = "0x2249BDC", VA = "0x2249BDC")]
		public static float IntersectConvexConvex(IEnumerable<Point2f> p1, IEnumerable<Point2f> p2, out Point2f[] p12, bool handleNested = true)
		{
			return default(float);
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x2249E14", Offset = "0x2249E14", VA = "0x2249E14")]
		public static RotatedRect FitEllipse(InputArray points)
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x2249F18", Offset = "0x2249F18", VA = "0x2249F18")]
		public static RotatedRect FitEllipse(IEnumerable<Point> points)
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x2249FF4", Offset = "0x2249FF4", VA = "0x2249FF4")]
		public static RotatedRect FitEllipse(IEnumerable<Point2f> points)
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x224A0D0", Offset = "0x224A0D0", VA = "0x224A0D0")]
		public static void FitLine(InputArray points, OutputArray line, DistanceTypes distType, double param, double reps, double aeps)
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x224A254", Offset = "0x224A254", VA = "0x224A254")]
		public static Line2D FitLine(IEnumerable<Point> points, DistanceTypes distType, double param, double reps, double aeps)
		{
			return null;
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x224A3A0", Offset = "0x224A3A0", VA = "0x224A3A0")]
		public static Line2D FitLine(IEnumerable<Point2f> points, DistanceTypes distType, double param, double reps, double aeps)
		{
			return null;
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x224A4EC", Offset = "0x224A4EC", VA = "0x224A4EC")]
		public static Line3D FitLine(IEnumerable<Point3i> points, DistanceTypes distType, double param, double reps, double aeps)
		{
			return null;
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x224A638", Offset = "0x224A638", VA = "0x224A638")]
		public static Line3D FitLine(IEnumerable<Point3f> points, DistanceTypes distType, double param, double reps, double aeps)
		{
			return null;
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x224A784", Offset = "0x224A784", VA = "0x224A784")]
		public static double PointPolygonTest(InputArray contour, Point2f pt, bool measureDist)
		{
			return default(double);
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x224A8AC", Offset = "0x224A8AC", VA = "0x224A8AC")]
		public static double PointPolygonTest(IEnumerable<Point> contour, Point2f pt, bool measureDist)
		{
			return default(double);
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x224A9A8", Offset = "0x224A9A8", VA = "0x224A9A8")]
		public static double PointPolygonTest(IEnumerable<Point2f> contour, Point2f pt, bool measureDist)
		{
			return default(double);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x224AAA4", Offset = "0x224AAA4", VA = "0x224AAA4")]
		public static RectanglesIntersectTypes RotatedRectangleIntersection(RotatedRect rect1, RotatedRect rect2, OutputArray intersectingRegion)
		{
			return default(RectanglesIntersectTypes);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x224ABE4", Offset = "0x224ABE4", VA = "0x224ABE4")]
		public static RectanglesIntersectTypes RotatedRectangleIntersection(RotatedRect rect1, RotatedRect rect2, out Point2f[] intersectingRegion)
		{
			return default(RectanglesIntersectTypes);
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x224ADB4", Offset = "0x224ADB4", VA = "0x224ADB4")]
		public static Point2f[] BoxPoints(RotatedRect box)
		{
			return null;
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x224ADBC", Offset = "0x224ADBC", VA = "0x224ADBC")]
		public static void ApplyColorMap(InputArray src, OutputArray dst, ColormapTypes colormap)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x224AF18", Offset = "0x224AF18", VA = "0x224AF18")]
		public static void Line(InputOutputArray img, int pt1X, int pt1Y, int pt2X, int pt2Y, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x224AFD0", Offset = "0x224AFD0", VA = "0x224AFD0")]
		public static void Line(InputOutputArray img, Point pt1, Point pt2, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x224B114", Offset = "0x224B114", VA = "0x224B114")]
		public static void ArrowedLine(InputOutputArray img, Point pt1, Point pt2, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0, double tipLength = 0.1)
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x224B268", Offset = "0x224B268", VA = "0x224B268")]
		public static void Rectangle(InputOutputArray img, Point pt1, Point pt2, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x224B3A0", Offset = "0x224B3A0", VA = "0x224B3A0")]
		public static void Rectangle(InputOutputArray img, Rect rect, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x224B500", Offset = "0x224B500", VA = "0x224B500")]
		public static void Rectangle(Mat img, Point pt1, Point pt2, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x224B6A0", Offset = "0x224B6A0", VA = "0x224B6A0")]
		public static void Rectangle(Mat img, Rect rect, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x224B7F8", Offset = "0x224B7F8", VA = "0x224B7F8")]
		public static void Circle(InputOutputArray img, int centerX, int centerY, int radius, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x224B88C", Offset = "0x224B88C", VA = "0x224B88C")]
		public static void Circle(InputOutputArray img, Point center, int radius, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x224B9D0", Offset = "0x224B9D0", VA = "0x224B9D0")]
		public static void Ellipse(InputOutputArray img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x224BB3C", Offset = "0x224BB3C", VA = "0x224BB3C")]
		public static void Ellipse(InputOutputArray img, RotatedRect box, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x224BC94", Offset = "0x224BC94", VA = "0x224BC94")]
		public static void FillConvexPoly(Mat img, IEnumerable<Point> pts, Scalar color, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x224BE00", Offset = "0x224BE00", VA = "0x224BE00")]
		public static void FillConvexPoly(InputOutputArray img, InputArray pts, Scalar color, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x224BF94", Offset = "0x224BF94", VA = "0x224BF94")]
		public static void FillPoly(Mat img, IEnumerable<IEnumerable<Point>> pts, Scalar color, LineTypes lineType = LineTypes.Link8, int shift = 0, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x224C528", Offset = "0x224C528", VA = "0x224C528")]
		public static void FillPoly(InputOutputArray img, InputArray pts, Scalar color, LineTypes lineType = LineTypes.Link8, int shift = 0, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x224C6F8", Offset = "0x224C6F8", VA = "0x224C6F8")]
		public static void Polylines(Mat img, IEnumerable<IEnumerable<Point>> pts, bool isClosed, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x224CC78", Offset = "0x224CC78", VA = "0x224CC78")]
		public static void Polylines(InputOutputArray img, InputArray pts, bool isClosed, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x224CE24", Offset = "0x224CE24", VA = "0x224CE24")]
		public static void DrawContours(InputOutputArray image, IEnumerable<IEnumerable<Point>> contours, int contourIdx, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, [Optional] IEnumerable<HierarchyIndex> hierarchy, int maxLevel = int.MaxValue, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x224D35C", Offset = "0x224D35C", VA = "0x224D35C")]
		public static void DrawContours(InputOutputArray image, IEnumerable<Mat> contours, int contourIdx, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, [Optional] Mat hierarchy, int maxLevel = int.MaxValue, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x224D52C", Offset = "0x224D52C", VA = "0x224D52C")]
		public static bool ClipLine(Size imgSize, ref Point pt1, ref Point pt2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x224D5B8", Offset = "0x224D5B8", VA = "0x224D5B8")]
		public static bool ClipLine(Rect imgRect, ref Point pt1, ref Point pt2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x224D654", Offset = "0x224D654", VA = "0x224D654")]
		public static Point[] Ellipse2Poly(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta)
		{
			return null;
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x224D7F4", Offset = "0x224D7F4", VA = "0x224D7F4")]
		public static void PutText(InputOutputArray img, string text, Point org, HersheyFonts fontFace, double fontScale, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, bool bottomLeftOrigin = false)
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x224D97C", Offset = "0x224D97C", VA = "0x224D97C")]
		public static Size GetTextSize(string text, HersheyFonts fontFace, double fontScale, int thickness, out int baseLine)
		{
			return default(Size);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x224DA60", Offset = "0x224DA60", VA = "0x224DA60")]
		public static void GroupRectangles(IList<Rect> rectList, int groupThreshold, double eps = 0.2)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x224DC30", Offset = "0x224DC30", VA = "0x224DC30")]
		public static void GroupRectangles(IList<Rect> rectList, out int[] weights, int groupThreshold, double eps = 0.2)
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x224DF1C", Offset = "0x224DF1C", VA = "0x224DF1C")]
		public static void GroupRectangles(IList<Rect> rectList, int groupThreshold, double eps, out int[] weights, out double[] levelWeights)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x224E314", Offset = "0x224E314", VA = "0x224E314")]
		public static void GroupRectangles(IList<Rect> rectList, out int[] rejectLevels, out double[] levelWeights, int groupThreshold, double eps = 0.2)
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x224E710", Offset = "0x224E710", VA = "0x224E710")]
		public static void GroupRectanglesMeanshift(IList<Rect> rectList, out double[] foundWeights, out double[] foundScales, double detectThreshold = 0.0, [Optional] Size? winDetSize)
		{
		}

		[Token(Token = "0x600094D")]
		private static void ClearAndAddRange<T>(IList<T> list, IEnumerable<T> values)
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x224EB48", Offset = "0x224EB48", VA = "0x224EB48")]
		public static void UpdateMotionHistory(InputArray silhouette, InputOutputArray mhi, double timestamp, double duration)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x224EC80", Offset = "0x224EC80", VA = "0x224EC80")]
		public static void CalcMotionGradient(InputArray mhi, OutputArray mask, OutputArray orientation, double delta1, double delta2, int apertureSize = 3)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x224EE18", Offset = "0x224EE18", VA = "0x224EE18")]
		public static double CalcGlobalOrientation(InputArray orientation, InputArray mask, InputArray mhi, double timestamp, double duration)
		{
			return default(double);
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x224EF88", Offset = "0x224EF88", VA = "0x224EF88")]
		public static void SegmentMotion(InputArray mhi, OutputArray segmask, out Rect[] boundingRects, double timestamp, double segThresh)
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x224F1CC", Offset = "0x224F1CC", VA = "0x224F1CC")]
		public static void CalcOpticalFlowSF(Mat from, Mat to, Mat flow, int layers, int averagingBlockSize, int maxFlow)
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x224F34C", Offset = "0x224F34C", VA = "0x224F34C")]
		public static void calcOpticalFlowSF(Mat from, Mat to, Mat flow, int layers, int averagingBlockSize, int maxFlow, double sigmaDist, double sigmaColor, int postprocessWindow, double sigmaDistFix, double sigmaColorFix, double occThr, int upscaleAveragingRadius, double upscaleSigmaDist, double upscaleSigmaColor, double speedUpThr)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x224F544", Offset = "0x224F544", VA = "0x224F544")]
		public static void Inpaint(InputArray src, InputArray inpaintMask, OutputArray dst, double inpaintRadius, InpaintMethod flags)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x224F6C8", Offset = "0x224F6C8", VA = "0x224F6C8")]
		public static void FastNlMeansDenoising(InputArray src, OutputArray dst, float h = 3f, int templateWindowSize = 7, int searchWindowSize = 21)
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x224F810", Offset = "0x224F810", VA = "0x224F810")]
		public static void FastNlMeansDenoisingColored(InputArray src, OutputArray dst, float h = 3f, float hColor = 3f, int templateWindowSize = 7, int searchWindowSize = 21)
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x224F960", Offset = "0x224F960", VA = "0x224F960")]
		public static void FastNlMeansDenoisingMulti(IEnumerable<InputArray> srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h = 3f, int templateWindowSize = 7, int searchWindowSize = 21)
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x224FAB4", Offset = "0x224FAB4", VA = "0x224FAB4")]
		public static void FastNlMeansDenoisingMulti(IEnumerable<Mat> srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h = 3f, int templateWindowSize = 7, int searchWindowSize = 21)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x224FBEC", Offset = "0x224FBEC", VA = "0x224FBEC")]
		public static void FastNlMeansDenoisingColoredMulti(IEnumerable<InputArray> srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h = 3f, float hColor = 3f, int templateWindowSize = 7, int searchWindowSize = 21)
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x224FD48", Offset = "0x224FD48", VA = "0x224FD48")]
		public static void FastNlMeansDenoisingColoredMulti(IEnumerable<Mat> srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h = 3f, float hColor = 3f, int templateWindowSize = 7, int searchWindowSize = 21)
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x224FE88", Offset = "0x224FE88", VA = "0x224FE88")]
		public static void DenoiseTVL1(IEnumerable<Mat> observations, Mat result, double lambda = 1.0, int niters = 30)
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x224FFE8", Offset = "0x224FFE8", VA = "0x224FFE8")]
		public static void Decolor(InputArray src, OutputArray grayscale, OutputArray colorBoost)
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x225018C", Offset = "0x225018C", VA = "0x225018C")]
		public static void SeamlessClone(InputArray src, InputArray dst, InputArray mask, Point p, OutputArray blend, SeamlessCloneMethods flags)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x2250380", Offset = "0x2250380", VA = "0x2250380")]
		public static void ColorChange(InputArray src, InputArray mask, OutputArray dst, float redMul = 1f, float greenMul = 1f, float blueMul = 1f)
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x225052C", Offset = "0x225052C", VA = "0x225052C")]
		public static void IlluminationChange(InputArray src, InputArray mask, OutputArray dst, float alpha = 0.2f, float beta = 0.4f)
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x22506C8", Offset = "0x22506C8", VA = "0x22506C8")]
		public static void TextureFlattening(InputArray src, InputArray mask, OutputArray dst, float lowThreshold = 30f, float highThreshold = 45f, int kernelSize = 3)
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x2250874", Offset = "0x2250874", VA = "0x2250874")]
		public static void EdgePreservingFilter(InputArray src, OutputArray dst, EdgePreservingMethods flags = EdgePreservingMethods.RecursFilter, float sigmaS = 60f, float sigmaR = 0.4f)
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x22509E8", Offset = "0x22509E8", VA = "0x22509E8")]
		public static void DetailEnhance(InputArray src, OutputArray dst, float sigmaS = 10f, float sigmaR = 0.15f)
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x2250B4C", Offset = "0x2250B4C", VA = "0x2250B4C")]
		public static void PencilSketch(InputArray src, OutputArray dst1, OutputArray dst2, float sigmaS = 60f, float sigmaR = 0.07f, float shadeFactor = 0.02f)
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x2250D18", Offset = "0x2250D18", VA = "0x2250D18")]
		public static void Stylization(InputArray src, OutputArray dst, float sigmaS = 60f, float sigmaR = 0.45f)
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x2250E7C", Offset = "0x2250E7C", VA = "0x2250E7C")]
		public static FrameSource CreateFrameSource_Empty()
		{
			return null;
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x2250E84", Offset = "0x2250E84", VA = "0x2250E84")]
		public static FrameSource CreateFrameSource_Video(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x2250E8C", Offset = "0x2250E8C", VA = "0x2250E8C")]
		public static FrameSource CreateFrameSource_Video_CUDA(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x2250E94", Offset = "0x2250E94", VA = "0x2250E94")]
		public static FrameSource CreateFrameSource_Camera(int deviceId)
		{
			return null;
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x2250E9C", Offset = "0x2250E9C", VA = "0x2250E9C")]
		public static SuperResolution CreateSuperResolution_BTVL1()
		{
			return null;
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x2250EA4", Offset = "0x2250EA4", VA = "0x2250EA4")]
		public static SuperResolution CreateSuperResolution_BTVL1_CUDA()
		{
			return null;
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x2250EAC", Offset = "0x2250EAC", VA = "0x2250EAC")]
		public static SuperResolution CreateSuperResolution_BTVL1_OCL()
		{
			return null;
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x2250F0C", Offset = "0x2250F0C", VA = "0x2250F0C")]
		public static DenseOpticalFlowExt CreateOptFlow_Farneback()
		{
			return null;
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x2250F14", Offset = "0x2250F14", VA = "0x2250F14")]
		public static DenseOpticalFlowExt CreateOptFlow_Farneback_GPU()
		{
			return null;
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x2250F1C", Offset = "0x2250F1C", VA = "0x2250F1C")]
		public static DenseOpticalFlowExt CreateOptFlow_Farneback_OCL()
		{
			return null;
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x2250F7C", Offset = "0x2250F7C", VA = "0x2250F7C")]
		public static DenseOpticalFlowExt CreateOptFlow_Simple()
		{
			return null;
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x2250F84", Offset = "0x2250F84", VA = "0x2250F84")]
		public static DenseOpticalFlowExt CreateOptFlow_DualTVL1Ex()
		{
			return null;
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x2250F8C", Offset = "0x2250F8C", VA = "0x2250F8C")]
		public static DenseOpticalFlowExt CreateOptFlow_DualTVL1_GPU()
		{
			return null;
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x2250F94", Offset = "0x2250F94", VA = "0x2250F94")]
		public static DenseOpticalFlowExt CreateOptFlow_DualTVL1_OCL()
		{
			return null;
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x2250F9C", Offset = "0x2250F9C", VA = "0x2250F9C")]
		public static DenseOpticalFlowExt CreateOptFlow_Brox_GPU()
		{
			return null;
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x2250FA4", Offset = "0x2250FA4", VA = "0x2250FA4")]
		public static DenseOpticalFlowExt CreateOptFlow_PyrLK_GPU()
		{
			return null;
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x2250FAC", Offset = "0x2250FAC", VA = "0x2250FAC")]
		public static DenseOpticalFlowExt CreateOptFlow_PyrLK_OCL()
		{
			return null;
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x2250FB4", Offset = "0x2250FB4", VA = "0x2250FB4")]
		public static RotatedRect CamShift(InputArray probImage, ref Rect window, TermCriteria criteria)
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x22510AC", Offset = "0x22510AC", VA = "0x22510AC")]
		public static int MeanShift(InputArray probImage, ref Rect window, TermCriteria criteria)
		{
			return default(int);
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x225119C", Offset = "0x225119C", VA = "0x225119C")]
		public static int BuildOpticalFlowPyramid(InputArray img, OutputArray pyramid, Size winSize, int maxLevel, bool withDerivatives = true, BorderTypes pyrBorder = BorderTypes.Reflect101, BorderTypes derivBorder = BorderTypes.Constant, bool tryReuseInputImage = true)
		{
			return default(int);
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x225131C", Offset = "0x225131C", VA = "0x225131C")]
		public static int BuildOpticalFlowPyramid(InputArray img, out Mat[] pyramid, Size winSize, int maxLevel, bool withDerivatives = true, BorderTypes pyrBorder = BorderTypes.Reflect101, BorderTypes derivBorder = BorderTypes.Constant, bool tryReuseInputImage = true)
		{
			return default(int);
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x2251550", Offset = "0x2251550", VA = "0x2251550")]
		public static void CalcOpticalFlowPyrLK(InputArray prevImg, InputArray nextImg, InputArray prevPts, InputOutputArray nextPts, OutputArray status, OutputArray err, [Optional] Size? winSize, int maxLevel = 3, [Optional] TermCriteria? criteria, OpticalFlowFlags flags = OpticalFlowFlags.None, double minEigThreshold = 0.0001)
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x2251874", Offset = "0x2251874", VA = "0x2251874")]
		public static void CalcOpticalFlowPyrLK(InputArray prevImg, InputArray nextImg, Point2f[] prevPts, ref Point2f[] nextPts, out byte[] status, out float[] err, [Optional] Size? winSize, int maxLevel = 3, [Optional] TermCriteria? criteria, OpticalFlowFlags flags = OpticalFlowFlags.None, double minEigThreshold = 0.0001)
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x2251DF8", Offset = "0x2251DF8", VA = "0x2251DF8")]
		public static void CalcOpticalFlowFarneback(InputArray prev, InputArray next, InputOutputArray flow, double pyrScale, int levels, int winsize, int iterations, int polyN, double polySigma, OpticalFlowFlags flags)
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x2251FBC", Offset = "0x2251FBC", VA = "0x2251FBC")]
		public static Mat EstimateRigidTransform(InputArray src, InputArray dst, bool fullAffine)
		{
			return null;
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x2252108", Offset = "0x2252108", VA = "0x2252108")]
		public static DenseOpticalFlow CreateOptFlow_DualTVL1()
		{
			return null;
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x2252110", Offset = "0x2252110", VA = "0x2252110")]
		public static void BalanceWhite(InputArray src, OutputArray dst)
		{
		}
	}
	[Token(Token = "0x2000006")]
	public abstract class CvObject : ICvPtrHolder
	{
		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected IntPtr ptr;

		[Token(Token = "0x17000001")]
		public IntPtr CvPtr
		{
			[Token(Token = "0x6000982")]
			[Address(RVA = "0x3EA8A74", Offset = "0x3EA8A74", VA = "0x3EA8A74", Slot = "4")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x3EA8A40", Offset = "0x3EA8A40", VA = "0x3EA8A40")]
		protected CvObject()
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x3EA8A48", Offset = "0x3EA8A48", VA = "0x3EA8A48")]
		protected CvObject(IntPtr ptr)
		{
		}
	}
	[Token(Token = "0x2000007")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA618", Offset = "0x1DDA618")]
	public delegate int CvErrorCallback(ErrorCode status, string funcName, string errMsg, string fileName, int line, IntPtr userdata);
	[Token(Token = "0x2000008")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA62C", Offset = "0x1DDA62C")]
	public delegate void CvMouseCallback(MouseEvent @event, int x, int y, MouseEvent flags);
	[Token(Token = "0x2000009")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA640", Offset = "0x1DDA640")]
	public delegate void CvTrackbarCallback(int pos);
	[Token(Token = "0x200000A")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA654", Offset = "0x1DDA654")]
	public delegate void CvTrackbarCallback2(int pos, object userdata);
	[Token(Token = "0x200000B")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA668", Offset = "0x1DDA668")]
	internal delegate void CvTrackbarCallback2Native(int pos, IntPtr userdata);
	[Token(Token = "0x200000C")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA67C", Offset = "0x1DDA67C")]
	public unsafe delegate void MatForeachFunctionByte(byte* value, int* position);
	[Token(Token = "0x200000D")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA690", Offset = "0x1DDA690")]
	public unsafe delegate void MatForeachFunctionVec2b(Vec2b* value, int* position);
	[Token(Token = "0x200000E")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA6A4", Offset = "0x1DDA6A4")]
	public unsafe delegate void MatForeachFunctionVec3b(Vec3b* value, int* position);
	[Token(Token = "0x200000F")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA6B8", Offset = "0x1DDA6B8")]
	public unsafe delegate void MatForeachFunctionVec4b(Vec4b* value, int* position);
	[Token(Token = "0x2000010")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA6CC", Offset = "0x1DDA6CC")]
	public unsafe delegate void MatForeachFunctionVec6b(Vec6b* value, int* position);
	[Token(Token = "0x2000011")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA6E0", Offset = "0x1DDA6E0")]
	public unsafe delegate void MatForeachFunctionInt16(short* value, int* position);
	[Token(Token = "0x2000012")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA6F4", Offset = "0x1DDA6F4")]
	public unsafe delegate void MatForeachFunctionVec2s(Vec2s* value, int* position);
	[Token(Token = "0x2000013")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA708", Offset = "0x1DDA708")]
	public unsafe delegate void MatForeachFunctionVec3s(Vec3s* value, int* position);
	[Token(Token = "0x2000014")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA71C", Offset = "0x1DDA71C")]
	public unsafe delegate void MatForeachFunctionVec4s(Vec4s* value, int* position);
	[Token(Token = "0x2000015")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA730", Offset = "0x1DDA730")]
	public unsafe delegate void MatForeachFunctionVec6s(Vec6s* value, int* position);
	[Token(Token = "0x2000016")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA744", Offset = "0x1DDA744")]
	public unsafe delegate void MatForeachFunctionInt32(int* value, int* position);
	[Token(Token = "0x2000017")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA758", Offset = "0x1DDA758")]
	public unsafe delegate void MatForeachFunctionVec2i(Vec2i* value, int* position);
	[Token(Token = "0x2000018")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA76C", Offset = "0x1DDA76C")]
	public unsafe delegate void MatForeachFunctionVec3i(Vec3i* value, int* position);
	[Token(Token = "0x2000019")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA780", Offset = "0x1DDA780")]
	public unsafe delegate void MatForeachFunctionVec4i(Vec4i* value, int* position);
	[Token(Token = "0x200001A")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA794", Offset = "0x1DDA794")]
	public unsafe delegate void MatForeachFunctionVec6i(Vec6i* value, int* position);
	[Token(Token = "0x200001B")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA7A8", Offset = "0x1DDA7A8")]
	public unsafe delegate void MatForeachFunctionFloat(float* value, int* position);
	[Token(Token = "0x200001C")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA7BC", Offset = "0x1DDA7BC")]
	public unsafe delegate void MatForeachFunctionVec2f(Vec2f* value, int* position);
	[Token(Token = "0x200001D")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA7D0", Offset = "0x1DDA7D0")]
	public unsafe delegate void MatForeachFunctionVec3f(Vec3f* value, int* position);
	[Token(Token = "0x200001E")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA7E4", Offset = "0x1DDA7E4")]
	public unsafe delegate void MatForeachFunctionVec4f(Vec4f* value, int* position);
	[Token(Token = "0x200001F")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA7F8", Offset = "0x1DDA7F8")]
	public unsafe delegate void MatForeachFunctionVec6f(Vec6f* value, int* position);
	[Token(Token = "0x2000020")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA80C", Offset = "0x1DDA80C")]
	public unsafe delegate void MatForeachFunctionDouble(double* value, int* position);
	[Token(Token = "0x2000021")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA820", Offset = "0x1DDA820")]
	public unsafe delegate void MatForeachFunctionVec2d(Vec2d* value, int* position);
	[Token(Token = "0x2000022")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA834", Offset = "0x1DDA834")]
	public unsafe delegate void MatForeachFunctionVec3d(Vec3d* value, int* position);
	[Token(Token = "0x2000023")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA848", Offset = "0x1DDA848")]
	public unsafe delegate void MatForeachFunctionVec4d(Vec4d* value, int* position);
	[Token(Token = "0x2000024")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1DDA85C", Offset = "0x1DDA85C")]
	public unsafe delegate void MatForeachFunctionVec6d(Vec6d* value, int* position);
	[Token(Token = "0x2000025")]
	public abstract class DisposableCvObject : DisposableObject, ICvPtrHolder
	{
		[Token(Token = "0x4000013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected IntPtr ptr;

		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool disposed;

		[Token(Token = "0x17000002")]
		public IntPtr CvPtr
		{
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0x3EA8CF8", Offset = "0x3EA8CF8", VA = "0x3EA8CF8", Slot = "6")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x3EB02A8", Offset = "0x3EB02A8", VA = "0x3EB02A8")]
		protected DisposableCvObject()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x3EB030C", Offset = "0x3EB030C", VA = "0x3EB030C")]
		protected DisposableCvObject(IntPtr ptr)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x3EB02B0", Offset = "0x3EB02B0", VA = "0x3EB02B0")]
		protected DisposableCvObject(bool isEnabledDispose)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x3EB0338", Offset = "0x3EB0338", VA = "0x3EB0338")]
		protected DisposableCvObject(IntPtr ptr, bool isEnabledDispose)
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x3EAE2A8", Offset = "0x3EAE2A8", VA = "0x3EAE2A8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x3EB03CC", Offset = "0x3EB03CC", VA = "0x3EB03CC", Slot = "7")]
		protected virtual void DisposeUnmanaged()
		{
		}
	}
	[Token(Token = "0x2000026")]
	public abstract class DisposableObject : IDisposable
	{
		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBAA8", Offset = "0x1DDBAA8")]
		private bool <IsDisposed>k__BackingField;

		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBAB8", Offset = "0x1DDBAB8")]
		private bool <IsEnabledDispose>k__BackingField;

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected GCHandle dataHandle;

		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBAC8", Offset = "0x1DDBAC8")]
		private IntPtr <AllocatedMemory>k__BackingField;

		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBAD8", Offset = "0x1DDBAD8")]
		private long <AllocatedMemorySize>k__BackingField;

		[Token(Token = "0x17000003")]
		public bool IsDisposed
		{
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0x3EB0444", Offset = "0x3EB0444", VA = "0x3EB0444")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF98", Offset = "0x1DDBF98")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A08")]
			[Address(RVA = "0x3EB044C", Offset = "0x3EB044C", VA = "0x3EB044C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBFA8", Offset = "0x1DDBFA8")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000004")]
		public bool IsEnabledDispose
		{
			[Token(Token = "0x6000A09")]
			[Address(RVA = "0x3EB0458", Offset = "0x3EB0458", VA = "0x3EB0458")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBFB8", Offset = "0x1DDBFB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0x3EB0460", Offset = "0x3EB0460", VA = "0x3EB0460")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBFC8", Offset = "0x1DDBFC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000005")]
		protected IntPtr AllocatedMemory
		{
			[Token(Token = "0x6000A0B")]
			[Address(RVA = "0x3EB046C", Offset = "0x3EB046C", VA = "0x3EB046C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBFD8", Offset = "0x1DDBFD8")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0x3EB0474", Offset = "0x3EB0474", VA = "0x3EB0474")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBFE8", Offset = "0x1DDBFE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000006")]
		protected long AllocatedMemorySize
		{
			[Token(Token = "0x6000A0D")]
			[Address(RVA = "0x3EB047C", Offset = "0x3EB047C", VA = "0x3EB047C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBFF8", Offset = "0x1DDBFF8")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000A0E")]
			[Address(RVA = "0x3EB0484", Offset = "0x3EB0484", VA = "0x3EB0484")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC008", Offset = "0x1DDC008")]
			set
			{
			}
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x3EAA430", Offset = "0x3EAA430", VA = "0x3EAA430")]
		protected DisposableObject()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x3EB0364", Offset = "0x3EB0364", VA = "0x3EB0364")]
		protected DisposableObject(bool isEnabledDispose)
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x3EAE22C", Offset = "0x3EAE22C", VA = "0x3EAE22C", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x3EAA870", Offset = "0x3EAA870", VA = "0x3EAA870", Slot = "5")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x3EB03D0", Offset = "0x3EB03D0", VA = "0x3EB03D0", Slot = "1")]
		~DisposableObject()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x3EB048C", Offset = "0x3EB048C", VA = "0x3EB048C")]
		protected internal GCHandle AllocGCHandle(object obj)
		{
			return default(GCHandle);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x3EB0554", Offset = "0x3EB0554", VA = "0x3EB0554")]
		protected IntPtr AllocMemory(int size)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x3EB0668", Offset = "0x3EB0668", VA = "0x3EB0668")]
		protected void NotifyMemoryPressure(long size)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x3EA8ED8", Offset = "0x3EA8ED8", VA = "0x3EA8ED8")]
		public void ThrowIfDisposed()
		{
		}
	}
	[Token(Token = "0x2000027")]
	public interface ICvPtrHolder
	{
		[Token(Token = "0x17000007")]
		IntPtr CvPtr
		{
			[Token(Token = "0x6000A13")]
			get;
		}
	}
	[Serializable]
	[Token(Token = "0x2000028")]
	public class MatProxy : IDisposable
	{
		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBAE8", Offset = "0x1DDBAE8")]
		private byte[] <ImageData>k__BackingField;

		[Token(Token = "0x17000008")]
		public byte[] ImageData
		{
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0x2176634", Offset = "0x2176634", VA = "0x2176634")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC018", Offset = "0x1DDC018")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0x217663C", Offset = "0x217663C", VA = "0x217663C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC028", Offset = "0x1DDC028")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x2176644", Offset = "0x2176644", VA = "0x2176644")]
		public MatProxy(Mat image)
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x21767A4", Offset = "0x21767A4", VA = "0x21767A4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x21767B0", Offset = "0x21767B0", VA = "0x21767B0")]
		public Stream CreateBitmapStream()
		{
			return null;
		}
	}
	[Token(Token = "0x2000029")]
	public class OpenCVException : ApplicationException
	{
		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBAF8", Offset = "0x1DDBAF8")]
		private ErrorCode <Status>k__BackingField;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB08", Offset = "0x1DDBB08")]
		private string <FuncName>k__BackingField;

		[Token(Token = "0x400001D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB18", Offset = "0x1DDBB18")]
		private string <ErrMsg>k__BackingField;

		[Token(Token = "0x400001E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB28", Offset = "0x1DDBB28")]
		private string <FileName>k__BackingField;

		[Token(Token = "0x400001F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB38", Offset = "0x1DDBB38")]
		private int <Line>k__BackingField;

		[Token(Token = "0x17000009")]
		public ErrorCode Status
		{
			[Token(Token = "0x6000A19")]
			[Address(RVA = "0x4269B00", Offset = "0x4269B00", VA = "0x4269B00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC038", Offset = "0x1DDC038")]
			get
			{
				return default(ErrorCode);
			}
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0x4269B08", Offset = "0x4269B08", VA = "0x4269B08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC048", Offset = "0x1DDC048")]
			set
			{
			}
		}

		[Token(Token = "0x1700000A")]
		public string FuncName
		{
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0x4269B10", Offset = "0x4269B10", VA = "0x4269B10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC058", Offset = "0x1DDC058")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0x4269B18", Offset = "0x4269B18", VA = "0x4269B18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC068", Offset = "0x1DDC068")]
			set
			{
			}
		}

		[Token(Token = "0x1700000B")]
		public string ErrMsg
		{
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0x4269B20", Offset = "0x4269B20", VA = "0x4269B20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC078", Offset = "0x1DDC078")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0x4269B28", Offset = "0x4269B28", VA = "0x4269B28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC088", Offset = "0x1DDC088")]
			set
			{
			}
		}

		[Token(Token = "0x1700000C")]
		public string FileName
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0x4269B30", Offset = "0x4269B30", VA = "0x4269B30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC098", Offset = "0x1DDC098")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A20")]
			[Address(RVA = "0x4269B38", Offset = "0x4269B38", VA = "0x4269B38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC0A8", Offset = "0x1DDC0A8")]
			set
			{
			}
		}

		[Token(Token = "0x1700000D")]
		public int Line
		{
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0x4269B40", Offset = "0x4269B40", VA = "0x4269B40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC0B8", Offset = "0x1DDC0B8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0x4269B48", Offset = "0x4269B48", VA = "0x4269B48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC0C8", Offset = "0x1DDC0C8")]
			set
			{
			}
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x4266DA4", Offset = "0x4266DA4", VA = "0x4266DA4")]
		public OpenCVException(ErrorCode status, string funcName, string errMsg, string fileName, int line)
		{
		}
	}
	[Token(Token = "0x200002A")]
	public class OpenCvSharpException : ApplicationException
	{
		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x4269B50", Offset = "0x4269B50", VA = "0x4269B50")]
		public OpenCvSharpException()
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x4269B58", Offset = "0x4269B58", VA = "0x4269B58")]
		public OpenCvSharpException(string message)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x4269B60", Offset = "0x4269B60", VA = "0x4269B60")]
		public OpenCvSharpException(string messageFormat, params object[] args)
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x4269B98", Offset = "0x4269B98", VA = "0x4269B98")]
		public OpenCvSharpException(string message, Exception innerException)
		{
		}
	}
	[Token(Token = "0x200002B")]
	public static class Win32Api
	{
		[Token(Token = "0x200017F")]
		public enum ColorTableType
		{
			[Token(Token = "0x4000648")]
			Rgb,
			[Token(Token = "0x4000649")]
			Palette
		}

		[Token(Token = "0x2000180")]
		public struct ICONINFO
		{
			[Token(Token = "0x400064A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool IsIcon;

			[Token(Token = "0x400064B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int HotSpotX;

			[Token(Token = "0x400064C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int HotSoptY;

			[Token(Token = "0x400064D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IntPtr MaskHbitmap;

			[Token(Token = "0x400064E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IntPtr ColorHbitmap;
		}

		[Token(Token = "0x2000181")]
		public struct BITMAPINFOHEADER
		{
			[Token(Token = "0x400064F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public uint Size;

			[Token(Token = "0x4000650")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Width;

			[Token(Token = "0x4000651")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int Height;

			[Token(Token = "0x4000652")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public ushort Planes;

			[Token(Token = "0x4000653")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public ushort BitCount;

			[Token(Token = "0x4000654")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public uint Compression;

			[Token(Token = "0x4000655")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public uint SizeImage;

			[Token(Token = "0x4000656")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int XPelsPerMeter;

			[Token(Token = "0x4000657")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int YPelsPerMeter;

			[Token(Token = "0x4000658")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uint ClrUsed;

			[Token(Token = "0x4000659")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public uint ClrImportant;
		}

		[Token(Token = "0x2000182")]
		public struct RGBQUAD
		{
			[Token(Token = "0x400065A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public byte Blue;

			[Token(Token = "0x400065B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public byte Green;

			[Token(Token = "0x400065C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
			public byte Red;

			[Token(Token = "0x400065D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
			public byte Reserved;
		}

		[Token(Token = "0x2000183")]
		public struct BITMAPINFO
		{
			[Token(Token = "0x400065E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BITMAPINFOHEADER Header;

			[Token(Token = "0x400065F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RGBQUAD[] Colors;
		}

		[Token(Token = "0x4000020")]
		public const int DIB_RGB_COLORS = 0;

		[Token(Token = "0x4000021")]
		public const int DIB_PAL_COLORS = 1;

		[Token(Token = "0x4000022")]
		public const int BI_RGB = 0;

		[Token(Token = "0x4000023")]
		public const int BI_RLE8 = 1;

		[Token(Token = "0x4000024")]
		public const int BI_RLE4 = 2;

		[Token(Token = "0x4000025")]
		public const int BI_BITFIELDS = 3;

		[Token(Token = "0x4000026")]
		public const int BI_JPEG = 4;

		[Token(Token = "0x4000027")]
		public const int BI_PNG = 5;

		[Token(Token = "0x4000028")]
		public const int BLACKONWHITE = 1;

		[Token(Token = "0x4000029")]
		public const int WHITEONBLACK = 2;

		[Token(Token = "0x400002A")]
		public const int COLORONCOLOR = 3;

		[Token(Token = "0x400002B")]
		public const int HALFTONE = 4;

		[Token(Token = "0x400002C")]
		public const int MAXSTRETCHBLTMODE = 4;

		[Token(Token = "0x400002D")]
		public const uint SRCCOPY = 13369376u;

		[Token(Token = "0x400002E")]
		public const uint SRCPAINT = 15597702u;

		[Token(Token = "0x400002F")]
		public const uint SRCAND = 8913094u;

		[Token(Token = "0x4000030")]
		public const uint SRCINVERT = 6684742u;

		[Token(Token = "0x4000031")]
		public const uint SRCERASE = 4457256u;

		[Token(Token = "0x4000032")]
		public const uint NOTSRCCOPY = 3342344u;

		[Token(Token = "0x4000033")]
		public const uint NOTSRCERASE = 1114278u;

		[Token(Token = "0x4000034")]
		public const uint MERGECOPY = 12583114u;

		[Token(Token = "0x4000035")]
		public const uint MERGEPAINT = 12255782u;

		[Token(Token = "0x4000036")]
		public const uint PATCOPY = 15728673u;

		[Token(Token = "0x4000037")]
		public const uint PATPAINT = 16452105u;

		[Token(Token = "0x4000038")]
		public const uint PATINVERT = 5898313u;

		[Token(Token = "0x4000039")]
		public const uint DSTINVERT = 5570569u;

		[Token(Token = "0x400003A")]
		public const uint BLACKNESS = 66u;

		[Token(Token = "0x400003B")]
		public const uint WHITENESS = 16711778u;

		[Token(Token = "0x400003C")]
		public const uint NOMIRRORBITMAP = 2147483648u;

		[Token(Token = "0x400003D")]
		public const uint CAPTUREBLT = 1073741824u;

		[PreserveSig]
		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x40665C4", Offset = "0x40665C4", VA = "0x40665C4")]
		public static extern IntPtr LoadLibrary(string lpFileName);

		[PreserveSig]
		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x4066658", Offset = "0x4066658", VA = "0x4066658")]
		public static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

		[PreserveSig]
		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x4066704", Offset = "0x4066704", VA = "0x4066704")]
		public static extern bool FreeLibrary(IntPtr hLibModule);

		[PreserveSig]
		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x4066788", Offset = "0x4066788", VA = "0x4066788")]
		public static extern int SetDIBitsToDevice(IntPtr hdc, int XDest, int YDest, uint dwWidth, uint dwHeight, int XSrc, int YSrc, uint uStartScan, uint cScanLines, IntPtr lpvBits, ref BITMAPINFO lpbmi, uint fuColorUse);

		[PreserveSig]
		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x40668C4", Offset = "0x40668C4", VA = "0x40668C4")]
		public static extern int SetDIBitsToDevice(IntPtr hdc, int XDest, int YDest, uint dwWidth, uint dwHeight, int XSrc, int YSrc, uint uStartScan, uint cScanLines, IntPtr lpvBits, IntPtr lpbmi, uint fuColorUse);

		[PreserveSig]
		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x40669B0", Offset = "0x40669B0", VA = "0x40669B0")]
		public static extern int GetDIBColorTable(IntPtr dc, int index, int entries, [In][Out] RGBQUAD[] colors);

		[PreserveSig]
		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x4066A6C", Offset = "0x4066A6C", VA = "0x4066A6C")]
		public static extern int GetDIBits(IntPtr dc, IntPtr bmp, int startScan, int scanLineCount, [In][Out] byte[] data, IntPtr info, ColorTableType usage);

		[PreserveSig]
		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x4066B48", Offset = "0x4066B48", VA = "0x4066B48")]
		public static extern IntPtr CreateCompatibleDC(IntPtr hdc);

		[PreserveSig]
		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x4066BD4", Offset = "0x4066BD4", VA = "0x4066BD4")]
		public static extern bool GetIconInfo(IntPtr icon, out ICONINFO info);

		[PreserveSig]
		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x4066CA8", Offset = "0x4066CA8", VA = "0x4066CA8")]
		public static extern IntPtr GetDC(IntPtr window);

		[PreserveSig]
		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x4066D34", Offset = "0x4066D34", VA = "0x4066D34")]
		public static extern bool ReleaseDC(IntPtr window, IntPtr dc);

		[PreserveSig]
		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x4066DD4", Offset = "0x4066DD4", VA = "0x4066DD4")]
		public static extern IntPtr SelectObject(IntPtr hdc, IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x4066E70", Offset = "0x4066E70", VA = "0x4066E70")]
		public static extern bool DeleteObject(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x4066F00", Offset = "0x4066F00", VA = "0x4066F00")]
		public static extern bool DeleteDC(IntPtr hdc);

		[PreserveSig]
		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x4066F8C", Offset = "0x4066F8C", VA = "0x4066F8C")]
		public static extern int SetStretchBltMode(IntPtr hdc, int iStretchMode);

		[PreserveSig]
		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x4067028", Offset = "0x4067028", VA = "0x4067028")]
		public static extern int StretchDIBits(IntPtr hdc, int XDest, int YDest, int nDestWidth, int nDestHeight, int XSrc, int YSrc, int nSrcWidth, int nSrcHeight, IntPtr lpBits, ref BITMAPINFO lpBitsInfo, uint iUsage, uint dwRop);
	}
	[Token(Token = "0x200002C")]
	public class Unity
	{
		[StructLayout(2)]
		[Token(Token = "0x2000184")]
		private struct Color32Bytes
		{
			[Token(Token = "0x4000660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public byte[] byteArray;

			[Token(Token = "0x4000661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Color32[] colors;
		}

		[Token(Token = "0x2000185")]
		public class TextureConversionParams
		{
			[Token(Token = "0x4000662")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE98", Offset = "0x1DDBE98")]
			private bool <FlipVertically>k__BackingField;

			[Token(Token = "0x4000663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBEA8", Offset = "0x1DDBEA8")]
			private bool <FlipHorizontally>k__BackingField;

			[Token(Token = "0x4000664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBEB8", Offset = "0x1DDBEB8")]
			private int <RotationAngle>k__BackingField;

			[Token(Token = "0x4000665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly TextureConversionParams Default;

			[Token(Token = "0x1700021E")]
			public bool FlipVertically
			{
				[Token(Token = "0x600175B")]
				[Address(RVA = "0x4056BF4", Offset = "0x4056BF4", VA = "0x4056BF4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD040", Offset = "0x1DDD040")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600175C")]
				[Address(RVA = "0x4056BFC", Offset = "0x4056BFC", VA = "0x4056BFC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD050", Offset = "0x1DDD050")]
				set
				{
				}
			}

			[Token(Token = "0x1700021F")]
			public bool FlipHorizontally
			{
				[Token(Token = "0x600175D")]
				[Address(RVA = "0x4056C08", Offset = "0x4056C08", VA = "0x4056C08")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD060", Offset = "0x1DDD060")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600175E")]
				[Address(RVA = "0x4056C10", Offset = "0x4056C10", VA = "0x4056C10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD070", Offset = "0x1DDD070")]
				set
				{
				}
			}

			[Token(Token = "0x17000220")]
			public int RotationAngle
			{
				[Token(Token = "0x600175F")]
				[Address(RVA = "0x4056C1C", Offset = "0x4056C1C", VA = "0x4056C1C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD080", Offset = "0x1DDD080")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001760")]
				[Address(RVA = "0x4056C24", Offset = "0x4056C24", VA = "0x4056C24")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD090", Offset = "0x1DDD090")]
				set
				{
				}
			}

			[Token(Token = "0x6001761")]
			[Address(RVA = "0x4056C2C", Offset = "0x4056C2C", VA = "0x4056C2C")]
			public TextureConversionParams()
			{
			}
		}

		[PreserveSig]
		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x405648C", Offset = "0x405648C", VA = "0x405648C")]
		private static extern IntPtr utils_texture_to_mat(IntPtr pixels32, int w, int h, bool flipVetically, bool flipHorizontally, int rotationAngle);

		[PreserveSig]
		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x405654C", Offset = "0x405654C", VA = "0x405654C")]
		private static extern IntPtr utils_mat_to_texture_2(IntPtr mat);

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x40565CC", Offset = "0x40565CC", VA = "0x40565CC")]
		public static Mat TextureToMat(Texture2D texture, [Optional] TextureConversionParams parameters)
		{
			return null;
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x4056828", Offset = "0x4056828", VA = "0x4056828")]
		public static Mat TextureToMat(WebCamTexture texture, [Optional] TextureConversionParams parameters)
		{
			return null;
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x40566AC", Offset = "0x40566AC", VA = "0x40566AC")]
		public static Mat PixelsToMat(Color32[] pixels32, int width, int height, bool flipVertically, bool flipHorizontally, int rotationAngle)
		{
			return null;
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x4056908", Offset = "0x4056908", VA = "0x4056908")]
		public static Texture2D MatToTexture(Mat mat, [Optional] Texture2D outTexture)
		{
			return null;
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x4056BEC", Offset = "0x4056BEC", VA = "0x4056BEC")]
		public Unity()
		{
		}
	}
	[Token(Token = "0x200002D")]
	internal static class PlatformUtil
	{
		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x426B5E4", Offset = "0x426B5E4", VA = "0x426B5E4")]
		public static long AlignSize(long sz, int n)
		{
			return default(long);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x426B5FC", Offset = "0x426B5FC", VA = "0x426B5FC")]
		public static long TruncateForX86(long value)
		{
			return default(long);
		}
	}
	[Token(Token = "0x200002E")]
	internal interface IStdVector<out T> : IDisposable
	{
		[Token(Token = "0x1700000E")]
		int Size
		{
			[Token(Token = "0x6000A41")]
			get;
		}

		[Token(Token = "0x1700000F")]
		IntPtr ElemPtr
		{
			[Token(Token = "0x6000A42")]
			get;
		}

		[Token(Token = "0x6000A43")]
		T[] ToArray();
	}
	[Token(Token = "0x200002F")]
	internal class VectorOfByte : DisposableCvObject, IStdVector<byte>, IDisposable
	{
		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000010")]
		public int Size
		{
			[Token(Token = "0x6000A48")]
			[Address(RVA = "0x405C1D8", Offset = "0x405C1D8", VA = "0x405C1D8", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000011")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A49")]
			[Address(RVA = "0x405C264", Offset = "0x405C264", VA = "0x405C264", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x405BE9C", Offset = "0x405BE9C", VA = "0x405BE9C")]
		public VectorOfByte()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x405BF14", Offset = "0x405BF14", VA = "0x405BF14")]
		public VectorOfByte(int size)
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x405BFF0", Offset = "0x405BFF0", VA = "0x405BFF0")]
		public VectorOfByte(IEnumerable<byte> data)
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x405C0F0", Offset = "0x405C0F0", VA = "0x405C0F0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x405C2D0", Offset = "0x405C2D0", VA = "0x405C2D0", Slot = "10")]
		public byte[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000030")]
	internal class VectorOfDMatch : DisposableCvObject, IStdVector<DMatch>, IDisposable
	{
		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000012")]
		public int Size
		{
			[Token(Token = "0x6000A50")]
			[Address(RVA = "0x405C700", Offset = "0x405C700", VA = "0x405C700", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000013")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A51")]
			[Address(RVA = "0x405C78C", Offset = "0x405C78C", VA = "0x405C78C", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x405C398", Offset = "0x405C398", VA = "0x405C398")]
		public VectorOfDMatch()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x405C410", Offset = "0x405C410", VA = "0x405C410")]
		public VectorOfDMatch(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x405C43C", Offset = "0x405C43C", VA = "0x405C43C")]
		public VectorOfDMatch(int size)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x405C518", Offset = "0x405C518", VA = "0x405C518")]
		public VectorOfDMatch(IEnumerable<DMatch> data)
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x405C618", Offset = "0x405C618", VA = "0x405C618", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x405C7F8", Offset = "0x405C7F8", VA = "0x405C7F8", Slot = "10")]
		public DMatch[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000031")]
	internal class VectorOfDouble : DisposableCvObject, IStdVector<double>, IDisposable
	{
		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000014")]
		public int Size
		{
			[Token(Token = "0x6000A57")]
			[Address(RVA = "0x405CD50", Offset = "0x405CD50", VA = "0x405CD50", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000015")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A58")]
			[Address(RVA = "0x405CDDC", Offset = "0x405CDDC", VA = "0x405CDDC", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x405CA14", Offset = "0x405CA14", VA = "0x405CA14")]
		public VectorOfDouble()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x405CA8C", Offset = "0x405CA8C", VA = "0x405CA8C")]
		public VectorOfDouble(int size)
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x405CB68", Offset = "0x405CB68", VA = "0x405CB68")]
		public VectorOfDouble(IEnumerable<double> data)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x405CC68", Offset = "0x405CC68", VA = "0x405CC68", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x405CE48", Offset = "0x405CE48", VA = "0x405CE48", Slot = "10")]
		public double[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000032")]
	internal class VectorOfERStat : DisposableCvObject
	{
		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000016")]
		public int Size
		{
			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0x405D1C8", Offset = "0x405D1C8", VA = "0x405D1C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x405CF10", Offset = "0x405CF10", VA = "0x405CF10")]
		public VectorOfERStat()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x405CF88", Offset = "0x405CF88", VA = "0x405CF88")]
		public VectorOfERStat(ERStat[] source)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x405D0E0", Offset = "0x405D0E0", VA = "0x405D0E0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x405D254", Offset = "0x405D254", VA = "0x405D254")]
		public ERStat GetElement(int index)
		{
			return null;
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x405D314", Offset = "0x405D314", VA = "0x405D314")]
		public ERStat[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000033")]
	public class VectorOfFloat : DisposableCvObject, IStdVector<float>, IDisposable
	{
		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000017")]
		public int Size
		{
			[Token(Token = "0x6000A64")]
			[Address(RVA = "0x405D778", Offset = "0x405D778", VA = "0x405D778", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000018")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A65")]
			[Address(RVA = "0x405D804", Offset = "0x405D804", VA = "0x405D804", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x405D43C", Offset = "0x405D43C", VA = "0x405D43C")]
		public VectorOfFloat()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x405D4B4", Offset = "0x405D4B4", VA = "0x405D4B4")]
		public VectorOfFloat(int size)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x405D590", Offset = "0x405D590", VA = "0x405D590")]
		public VectorOfFloat(IEnumerable<float> data)
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x405D690", Offset = "0x405D690", VA = "0x405D690", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x405D870", Offset = "0x405D870", VA = "0x405D870", Slot = "10")]
		public float[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000034")]
	public class VectorOfInt32 : DisposableCvObject, IStdVector<int>, IDisposable
	{
		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000019")]
		public int Size
		{
			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0x405DCA0", Offset = "0x405DCA0", VA = "0x405DCA0", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700001A")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A6D")]
			[Address(RVA = "0x405DD2C", Offset = "0x405DD2C", VA = "0x405DD2C", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x405D938", Offset = "0x405D938", VA = "0x405D938")]
		public VectorOfInt32()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x405D9B0", Offset = "0x405D9B0", VA = "0x405D9B0")]
		public VectorOfInt32(int size)
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x405DA8C", Offset = "0x405DA8C", VA = "0x405DA8C")]
		public VectorOfInt32(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x405DAB8", Offset = "0x405DAB8", VA = "0x405DAB8")]
		public VectorOfInt32(IEnumerable<int> data)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x405DBB8", Offset = "0x405DBB8", VA = "0x405DBB8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x405DD98", Offset = "0x405DD98", VA = "0x405DD98", Slot = "10")]
		public int[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000035")]
	internal class VectorOfKeyPoint : DisposableCvObject, IStdVector<KeyPoint>, IDisposable
	{
		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700001B")]
		public int Size
		{
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0x405E1C8", Offset = "0x405E1C8", VA = "0x405E1C8", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700001C")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A75")]
			[Address(RVA = "0x405E254", Offset = "0x405E254", VA = "0x405E254", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x405DE60", Offset = "0x405DE60", VA = "0x405DE60")]
		public VectorOfKeyPoint()
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x405DED8", Offset = "0x405DED8", VA = "0x405DED8")]
		public VectorOfKeyPoint(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x405DF04", Offset = "0x405DF04", VA = "0x405DF04")]
		public VectorOfKeyPoint(int size)
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x405DFE0", Offset = "0x405DFE0", VA = "0x405DFE0")]
		public VectorOfKeyPoint(IEnumerable<KeyPoint> data)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x405E0E0", Offset = "0x405E0E0", VA = "0x405E0E0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x405E2C0", Offset = "0x405E2C0", VA = "0x405E2C0", Slot = "10")]
		public KeyPoint[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000036")]
	internal class VectorOfMat : DisposableCvObject, IStdVector<Mat>, IDisposable
	{
		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700001D")]
		public int Size
		{
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0x405E838", Offset = "0x405E838", VA = "0x405E838", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700001E")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0x405E8C4", Offset = "0x405E8C4", VA = "0x405E8C4", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x405E4DC", Offset = "0x405E4DC", VA = "0x405E4DC")]
		public VectorOfMat()
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x405E554", Offset = "0x405E554", VA = "0x405E554")]
		public VectorOfMat(int size)
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x405E630", Offset = "0x405E630", VA = "0x405E630")]
		public VectorOfMat(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x405E65C", Offset = "0x405E65C", VA = "0x405E65C")]
		public VectorOfMat(IEnumerable<Mat> mats)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x405E750", Offset = "0x405E750", VA = "0x405E750", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x405E930", Offset = "0x405E930", VA = "0x405E930", Slot = "10")]
		public Mat[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000A7F")]
		public T[] ToArray<T>() where T : Mat, new()
		{
			return null;
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x405E980", Offset = "0x405E980", VA = "0x405E980")]
		public void AddRef()
		{
		}
	}
	[Token(Token = "0x2000037")]
	public class VectorOfPoint : DisposableCvObject, IStdVector<Point>, IDisposable
	{
		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700001F")]
		public int Size
		{
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0x405ED54", Offset = "0x405ED54", VA = "0x405ED54", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000020")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0x405EDE0", Offset = "0x405EDE0", VA = "0x405EDE0", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x405E9EC", Offset = "0x405E9EC", VA = "0x405E9EC")]
		public VectorOfPoint()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x405EA64", Offset = "0x405EA64", VA = "0x405EA64")]
		public VectorOfPoint(int size)
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x405EB40", Offset = "0x405EB40", VA = "0x405EB40")]
		public VectorOfPoint(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x405EB6C", Offset = "0x405EB6C", VA = "0x405EB6C")]
		public VectorOfPoint(IEnumerable<Point> data)
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x405EC6C", Offset = "0x405EC6C", VA = "0x405EC6C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x405EE4C", Offset = "0x405EE4C", VA = "0x405EE4C", Slot = "10")]
		public Point[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000038")]
	public class VectorOfPoint2f : DisposableCvObject, IStdVector<Point2f>, IDisposable
	{
		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000021")]
		public int Size
		{
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0x405F320", Offset = "0x405F320", VA = "0x405F320", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000022")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0x405F3AC", Offset = "0x405F3AC", VA = "0x405F3AC", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x405EFE4", Offset = "0x405EFE4", VA = "0x405EFE4")]
		public VectorOfPoint2f()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x4054DC4", Offset = "0x4054DC4", VA = "0x4054DC4")]
		public VectorOfPoint2f(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x405F05C", Offset = "0x405F05C", VA = "0x405F05C")]
		public VectorOfPoint2f(int size)
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x405F138", Offset = "0x405F138", VA = "0x405F138")]
		public VectorOfPoint2f(IEnumerable<Point2f> data)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x405F238", Offset = "0x405F238", VA = "0x405F238", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x4054DF0", Offset = "0x4054DF0", VA = "0x4054DF0", Slot = "10")]
		public Point2f[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000039")]
	public class VectorOfPoint3f : DisposableCvObject, IStdVector<Point3f>, IDisposable
	{
		[Token(Token = "0x4000048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000023")]
		public int Size
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0x405F754", Offset = "0x405F754", VA = "0x405F754", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000024")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A96")]
			[Address(RVA = "0x405F7E0", Offset = "0x405F7E0", VA = "0x405F7E0", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x405F418", Offset = "0x405F418", VA = "0x405F418")]
		public VectorOfPoint3f()
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x405F490", Offset = "0x405F490", VA = "0x405F490")]
		public VectorOfPoint3f(int size)
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x405F56C", Offset = "0x405F56C", VA = "0x405F56C")]
		public VectorOfPoint3f(IEnumerable<Point3f> data)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x405F66C", Offset = "0x405F66C", VA = "0x405F66C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x405F84C", Offset = "0x405F84C", VA = "0x405F84C", Slot = "10")]
		public Point3f[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x200003A")]
	internal class VectorOfRect : DisposableCvObject, IStdVector<Rect>, IDisposable
	{
		[Token(Token = "0x4000049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000025")]
		public int Size
		{
			[Token(Token = "0x6000A9C")]
			[Address(RVA = "0x405FD24", Offset = "0x405FD24", VA = "0x405FD24", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000026")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000A9D")]
			[Address(RVA = "0x405FDB0", Offset = "0x405FDB0", VA = "0x405FDB0", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x405F9E8", Offset = "0x405F9E8", VA = "0x405F9E8")]
		public VectorOfRect()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x405FA60", Offset = "0x405FA60", VA = "0x405FA60")]
		public VectorOfRect(int size)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x405FB3C", Offset = "0x405FB3C", VA = "0x405FB3C")]
		public VectorOfRect(IEnumerable<Rect> data)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x405FC3C", Offset = "0x405FC3C", VA = "0x405FC3C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x405FE1C", Offset = "0x405FE1C", VA = "0x405FE1C", Slot = "10")]
		public Rect[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x200003B")]
	internal class VectorOfString : DisposableCvObject, IStdVector<string>, IDisposable
	{
		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000027")]
		public int Size
		{
			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0x4060460", Offset = "0x4060460", VA = "0x4060460", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000028")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0x40604EC", Offset = "0x40604EC", VA = "0x40604EC", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x405FFB4", Offset = "0x405FFB4", VA = "0x405FFB4")]
		public VectorOfString()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x406002C", Offset = "0x406002C", VA = "0x406002C")]
		public VectorOfString(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x4060058", Offset = "0x4060058", VA = "0x4060058")]
		public VectorOfString(int size)
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x4060134", Offset = "0x4060134", VA = "0x4060134")]
		public VectorOfString(IList<string> data)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x4060378", Offset = "0x4060378", VA = "0x4060378", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x40602F4", Offset = "0x40602F4", VA = "0x40602F4")]
		public void SetValue(string value, int position)
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x4060558", Offset = "0x4060558", VA = "0x4060558", Slot = "10")]
		public string[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x200003C")]
	internal class VectorOfVec2f : DisposableCvObject, IStdVector<Vec2f>, IDisposable
	{
		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000029")]
		public int Size
		{
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0x40609F4", Offset = "0x40609F4", VA = "0x40609F4", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700002A")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0x4060A80", Offset = "0x4060A80", VA = "0x4060A80", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x40606B8", Offset = "0x40606B8", VA = "0x40606B8")]
		public VectorOfVec2f()
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x4060730", Offset = "0x4060730", VA = "0x4060730")]
		public VectorOfVec2f(int size)
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x406080C", Offset = "0x406080C", VA = "0x406080C")]
		public VectorOfVec2f(IEnumerable<Vec2f> data)
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x406090C", Offset = "0x406090C", VA = "0x406090C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x4060AEC", Offset = "0x4060AEC", VA = "0x4060AEC", Slot = "10")]
		public Vec2f[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000AAF")]
		public T[] ToArray<T>() where T : struct
		{
			return null;
		}
	}
	[Token(Token = "0x200003D")]
	internal class VectorOfVec3f : DisposableCvObject, IStdVector<Vec3f>, IDisposable
	{
		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700002B")]
		public int Size
		{
			[Token(Token = "0x6000AB4")]
			[Address(RVA = "0x4060E78", Offset = "0x4060E78", VA = "0x4060E78", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700002C")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0x4060F04", Offset = "0x4060F04", VA = "0x4060F04", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x4060B3C", Offset = "0x4060B3C", VA = "0x4060B3C")]
		public VectorOfVec3f()
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x4060BB4", Offset = "0x4060BB4", VA = "0x4060BB4")]
		public VectorOfVec3f(int size)
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x4060C90", Offset = "0x4060C90", VA = "0x4060C90")]
		public VectorOfVec3f(IEnumerable<Vec3f> data)
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x4060D90", Offset = "0x4060D90", VA = "0x4060D90", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x4060F70", Offset = "0x4060F70", VA = "0x4060F70", Slot = "10")]
		public Vec3f[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000AB7")]
		public T[] ToArray<T>() where T : struct
		{
			return null;
		}
	}
	[Token(Token = "0x200003E")]
	internal class VectorOfVec4f : DisposableCvObject, IStdVector<Vec4f>, IDisposable
	{
		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700002D")]
		public int Size
		{
			[Token(Token = "0x6000ABD")]
			[Address(RVA = "0x40612FC", Offset = "0x40612FC", VA = "0x40612FC", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700002E")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0x4061388", Offset = "0x4061388", VA = "0x4061388", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x4060FC0", Offset = "0x4060FC0", VA = "0x4060FC0")]
		public VectorOfVec4f()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x4061038", Offset = "0x4061038", VA = "0x4061038")]
		public VectorOfVec4f(int size)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x4061114", Offset = "0x4061114", VA = "0x4061114")]
		public VectorOfVec4f(IEnumerable<Vec4f> data)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x40544EC", Offset = "0x40544EC", VA = "0x40544EC")]
		public VectorOfVec4f(IntPtr p)
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x4061214", Offset = "0x4061214", VA = "0x4061214", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x4054518", Offset = "0x4054518", VA = "0x4054518", Slot = "10")]
		public Vec4f[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000AC0")]
		public T[] ToArray<T>() where T : struct
		{
			return null;
		}
	}
	[Token(Token = "0x200003F")]
	internal class VectorOfVec4i : DisposableCvObject, IStdVector<Vec4i>, IDisposable
	{
		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700002F")]
		public int Size
		{
			[Token(Token = "0x6000AC6")]
			[Address(RVA = "0x406175C", Offset = "0x406175C", VA = "0x406175C", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000030")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0x40617E8", Offset = "0x40617E8", VA = "0x40617E8", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x40613F4", Offset = "0x40613F4", VA = "0x40613F4")]
		public VectorOfVec4i()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x406146C", Offset = "0x406146C", VA = "0x406146C")]
		public VectorOfVec4i(int size)
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x4061548", Offset = "0x4061548", VA = "0x4061548")]
		public VectorOfVec4i(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x4061574", Offset = "0x4061574", VA = "0x4061574")]
		public VectorOfVec4i(IEnumerable<Vec4i> data)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x4061674", Offset = "0x4061674", VA = "0x4061674", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x4061854", Offset = "0x4061854", VA = "0x4061854", Slot = "10")]
		public Vec4i[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000AC9")]
		public T[] ToArray<T>() where T : struct
		{
			return null;
		}
	}
	[Token(Token = "0x2000040")]
	internal class VectorOfVec6d : DisposableCvObject, IStdVector<Vec6d>, IDisposable
	{
		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000031")]
		public int Size
		{
			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0x4061C0C", Offset = "0x4061C0C", VA = "0x4061C0C", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000032")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0x4061C98", Offset = "0x4061C98", VA = "0x4061C98", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x40618A4", Offset = "0x40618A4", VA = "0x40618A4")]
		public VectorOfVec6d()
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x406191C", Offset = "0x406191C", VA = "0x406191C")]
		public VectorOfVec6d(int size)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x40619F8", Offset = "0x40619F8", VA = "0x40619F8")]
		public VectorOfVec6d(IEnumerable<Vec6d> data)
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x4061AF8", Offset = "0x4061AF8", VA = "0x4061AF8")]
		public VectorOfVec6d(IntPtr p)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x4061B24", Offset = "0x4061B24", VA = "0x4061B24", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x4061D04", Offset = "0x4061D04", VA = "0x4061D04", Slot = "10")]
		public Vec6d[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000AD2")]
		public T[] ToArray<T>() where T : struct
		{
			return null;
		}
	}
	[Token(Token = "0x2000041")]
	internal class VectorOfVec6f : DisposableCvObject, IStdVector<Vec6f>, IDisposable
	{
		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000033")]
		public int Size
		{
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0x4062090", Offset = "0x4062090", VA = "0x4062090", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000034")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x406211C", Offset = "0x406211C", VA = "0x406211C", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x4061D54", Offset = "0x4061D54", VA = "0x4061D54")]
		public VectorOfVec6f()
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x4061DCC", Offset = "0x4061DCC", VA = "0x4061DCC")]
		public VectorOfVec6f(int size)
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x4061EA8", Offset = "0x4061EA8", VA = "0x4061EA8")]
		public VectorOfVec6f(IEnumerable<Vec6f> data)
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x4054718", Offset = "0x4054718", VA = "0x4054718")]
		public VectorOfVec6f(IntPtr p)
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x4061FA8", Offset = "0x4061FA8", VA = "0x4061FA8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x4054744", Offset = "0x4054744", VA = "0x4054744", Slot = "10")]
		public Vec6f[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000ADB")]
		public T[] ToArray<T>() where T : struct
		{
			return null;
		}
	}
	[Token(Token = "0x2000042")]
	internal class VectorOfVectorDMatch : DisposableCvObject, IStdVector<DMatch[]>, IDisposable
	{
		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000035")]
		public int Size1
		{
			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0x40623C4", Offset = "0x40623C4", VA = "0x40623C4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000036")]
		public int Size
		{
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0x4062450", Offset = "0x4062450", VA = "0x4062450", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000037")]
		public long[] Size2
		{
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0x4062454", Offset = "0x4062454", VA = "0x4062454")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0x4062588", Offset = "0x4062588", VA = "0x4062588", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x4062188", Offset = "0x4062188", VA = "0x4062188")]
		public VectorOfVectorDMatch()
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x4062200", Offset = "0x4062200", VA = "0x4062200")]
		public VectorOfVectorDMatch(int size)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x40622DC", Offset = "0x40622DC", VA = "0x40622DC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x40625F4", Offset = "0x40625F4", VA = "0x40625F4", Slot = "10")]
		public DMatch[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000043")]
	internal class VectorOfVectorDouble : DisposableCvObject, IStdVector<double[]>, IDisposable
	{
		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000039")]
		public int Size1
		{
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0x4062AB8", Offset = "0x4062AB8", VA = "0x4062AB8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700003A")]
		public int Size
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0x4062B44", Offset = "0x4062B44", VA = "0x4062B44", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700003B")]
		public long[] Size2
		{
			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0x4062B48", Offset = "0x4062B48", VA = "0x4062B48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0x4062C7C", Offset = "0x4062C7C", VA = "0x4062C7C", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x406287C", Offset = "0x406287C", VA = "0x406287C")]
		public VectorOfVectorDouble()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x40628F4", Offset = "0x40628F4", VA = "0x40628F4")]
		public VectorOfVectorDouble(int size)
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x40629D0", Offset = "0x40629D0", VA = "0x40629D0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x4062CE8", Offset = "0x4062CE8", VA = "0x4062CE8", Slot = "10")]
		public double[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000044")]
	internal class VectorOfVectorERStat : DisposableCvObject
	{
		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700003D")]
		public int Size1
		{
			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0x4063314", Offset = "0x4063314", VA = "0x4063314")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700003E")]
		public int Size
		{
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0x40633A0", Offset = "0x40633A0", VA = "0x40633A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700003F")]
		public long[] Size2
		{
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0x40633A4", Offset = "0x40633A4", VA = "0x40633A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x4062F70", Offset = "0x4062F70", VA = "0x4062F70")]
		public VectorOfVectorERStat()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x4062FE8", Offset = "0x4062FE8", VA = "0x4062FE8")]
		public VectorOfVectorERStat(ERStat[][] source)
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x4063200", Offset = "0x4063200", VA = "0x4063200")]
		public VectorOfVectorERStat(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x406322C", Offset = "0x406322C", VA = "0x406322C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x40634D8", Offset = "0x40634D8", VA = "0x40634D8")]
		public ERStat GetElement(int i, int j)
		{
			return null;
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x40635A8", Offset = "0x40635A8", VA = "0x40635A8")]
		public ERStat[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000045")]
	internal class VectorOfVectorFloat : DisposableCvObject, IStdVector<float[]>, IDisposable
	{
		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000040")]
		public int Size1
		{
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0x40639F4", Offset = "0x40639F4", VA = "0x40639F4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000041")]
		public int Size
		{
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0x4063A80", Offset = "0x4063A80", VA = "0x4063A80", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000042")]
		public long[] Size2
		{
			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0x4063A84", Offset = "0x4063A84", VA = "0x4063A84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0x4063BB8", Offset = "0x4063BB8", VA = "0x4063BB8", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x40637B8", Offset = "0x40637B8", VA = "0x40637B8")]
		public VectorOfVectorFloat()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x4063830", Offset = "0x4063830", VA = "0x4063830")]
		public VectorOfVectorFloat(int size)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x406390C", Offset = "0x406390C", VA = "0x406390C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x4063C24", Offset = "0x4063C24", VA = "0x4063C24", Slot = "10")]
		public float[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000046")]
	internal class VectorOfVectorInt : DisposableCvObject, IStdVector<int[]>, IDisposable
	{
		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000044")]
		public int Size1
		{
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0x40640E8", Offset = "0x40640E8", VA = "0x40640E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000045")]
		public int Size
		{
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0x4064174", Offset = "0x4064174", VA = "0x4064174", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000046")]
		public long[] Size2
		{
			[Token(Token = "0x6000B02")]
			[Address(RVA = "0x4064178", Offset = "0x4064178", VA = "0x4064178")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000047")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000B03")]
			[Address(RVA = "0x40642AC", Offset = "0x40642AC", VA = "0x40642AC", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x4063EAC", Offset = "0x4063EAC", VA = "0x4063EAC")]
		public VectorOfVectorInt()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x4063F24", Offset = "0x4063F24", VA = "0x4063F24")]
		public VectorOfVectorInt(int size)
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x4064000", Offset = "0x4064000", VA = "0x4064000", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x4064318", Offset = "0x4064318", VA = "0x4064318", Slot = "10")]
		public int[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000047")]
	internal class VectorOfVectorKeyPoint : DisposableCvObject, IStdVector<KeyPoint[]>, IDisposable
	{
		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000048")]
		public int Size1
		{
			[Token(Token = "0x6000B09")]
			[Address(RVA = "0x40649C0", Offset = "0x40649C0", VA = "0x40649C0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000049")]
		public int Size
		{
			[Token(Token = "0x6000B0A")]
			[Address(RVA = "0x4064A4C", Offset = "0x4064A4C", VA = "0x4064A4C", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004A")]
		public long[] Size2
		{
			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0x4064A50", Offset = "0x4064A50", VA = "0x4064A50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0x4064B84", Offset = "0x4064B84", VA = "0x4064B84", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x40645A0", Offset = "0x40645A0", VA = "0x40645A0")]
		public VectorOfVectorKeyPoint()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x4064618", Offset = "0x4064618", VA = "0x4064618")]
		public VectorOfVectorKeyPoint(int size)
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x40646F4", Offset = "0x40646F4", VA = "0x40646F4")]
		public VectorOfVectorKeyPoint(KeyPoint[][] values)
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x40648D8", Offset = "0x40648D8", VA = "0x40648D8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x4064BF0", Offset = "0x4064BF0", VA = "0x4064BF0", Slot = "10")]
		public KeyPoint[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000048")]
	internal class VectorOfVectorPoint : DisposableCvObject, IStdVector<Point[]>, IDisposable
	{
		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700004C")]
		public int Size1
		{
			[Token(Token = "0x6000B13")]
			[Address(RVA = "0x4065330", Offset = "0x4065330", VA = "0x4065330")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004D")]
		public int Size
		{
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0x40653BC", Offset = "0x40653BC", VA = "0x40653BC", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004E")]
		public long[] Size2
		{
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0x40653C0", Offset = "0x40653C0", VA = "0x40653C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0x40654F4", Offset = "0x40654F4", VA = "0x40654F4", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x4064E78", Offset = "0x4064E78", VA = "0x4064E78")]
		public VectorOfVectorPoint()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x4064EF0", Offset = "0x4064EF0", VA = "0x4064EF0")]
		public VectorOfVectorPoint(Point[][] source)
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x4065140", Offset = "0x4065140", VA = "0x4065140")]
		public VectorOfVectorPoint(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x406516C", Offset = "0x406516C", VA = "0x406516C")]
		public VectorOfVectorPoint(int size)
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x4065248", Offset = "0x4065248", VA = "0x4065248", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x4065560", Offset = "0x4065560", VA = "0x4065560", Slot = "10")]
		public Point[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000049")]
	internal class VectorOfVectorPoint2f : DisposableCvObject, IStdVector<Point2f[]>, IDisposable
	{
		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000050")]
		public int Size1
		{
			[Token(Token = "0x6000B1C")]
			[Address(RVA = "0x4065A24", Offset = "0x4065A24", VA = "0x4065A24")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000051")]
		public int Size
		{
			[Token(Token = "0x6000B1D")]
			[Address(RVA = "0x4065AB0", Offset = "0x4065AB0", VA = "0x4065AB0", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000052")]
		public long[] Size2
		{
			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0x4065AB4", Offset = "0x4065AB4", VA = "0x4065AB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0x4065BE8", Offset = "0x4065BE8", VA = "0x4065BE8", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x40657E8", Offset = "0x40657E8", VA = "0x40657E8")]
		public VectorOfVectorPoint2f()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x4054B10", Offset = "0x4054B10", VA = "0x4054B10")]
		public VectorOfVectorPoint2f(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x4065860", Offset = "0x4065860", VA = "0x4065860")]
		public VectorOfVectorPoint2f(int size)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x406593C", Offset = "0x406593C", VA = "0x406593C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x4054B3C", Offset = "0x4054B3C", VA = "0x4054B3C", Slot = "10")]
		public Point2f[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x200004A")]
	internal class VectorOfVectorVec2i : DisposableCvObject, IStdVector<Vec2i[]>, IDisposable
	{
		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000054")]
		public int Size1
		{
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0x406610C", Offset = "0x406610C", VA = "0x406610C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000055")]
		public int Size
		{
			[Token(Token = "0x6000B27")]
			[Address(RVA = "0x4066198", Offset = "0x4066198", VA = "0x4066198", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000056")]
		public long[] Size2
		{
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0x406619C", Offset = "0x406619C", VA = "0x406619C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		public IntPtr ElemPtr
		{
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0x40662D0", Offset = "0x40662D0", VA = "0x40662D0", Slot = "9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x4065C54", Offset = "0x4065C54", VA = "0x4065C54")]
		public VectorOfVectorVec2i()
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x4065CCC", Offset = "0x4065CCC", VA = "0x4065CCC")]
		public VectorOfVectorVec2i(Vec2i[][] source)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x4065F1C", Offset = "0x4065F1C", VA = "0x4065F1C")]
		public VectorOfVectorVec2i(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x4065F48", Offset = "0x4065F48", VA = "0x4065F48")]
		public VectorOfVectorVec2i(int size)
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x4066024", Offset = "0x4066024", VA = "0x4066024", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x406633C", Offset = "0x406633C", VA = "0x406633C", Slot = "10")]
		public Vec2i[][] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x200004B")]
	public class BackgroundSubtractorGMG : BackgroundSubtractor
	{
		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<BackgroundSubtractorGMG> objectPtr;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool disposed;

		[Token(Token = "0x17000058")]
		public int MaxFeatures
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0x221B964", Offset = "0x221B964", VA = "0x221B964")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0x221BA38", Offset = "0x221BA38", VA = "0x221BA38")]
			set
			{
			}
		}

		[Token(Token = "0x17000059")]
		public double DefaultLearningRate
		{
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0x221BB1C", Offset = "0x221BB1C", VA = "0x221BB1C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B31")]
			[Address(RVA = "0x221BBF0", Offset = "0x221BBF0", VA = "0x221BBF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public int NumFrames
		{
			[Token(Token = "0x6000B32")]
			[Address(RVA = "0x221BCD4", Offset = "0x221BCD4", VA = "0x221BCD4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B33")]
			[Address(RVA = "0x221BDA8", Offset = "0x221BDA8", VA = "0x221BDA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public int QuantizationLevels
		{
			[Token(Token = "0x6000B34")]
			[Address(RVA = "0x221BE8C", Offset = "0x221BE8C", VA = "0x221BE8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B35")]
			[Address(RVA = "0x221BF60", Offset = "0x221BF60", VA = "0x221BF60")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		public double BackgroundPrior
		{
			[Token(Token = "0x6000B36")]
			[Address(RVA = "0x221C044", Offset = "0x221C044", VA = "0x221C044")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B37")]
			[Address(RVA = "0x221C118", Offset = "0x221C118", VA = "0x221C118")]
			set
			{
			}
		}

		[Token(Token = "0x1700005D")]
		public int SmoothingRadius
		{
			[Token(Token = "0x6000B38")]
			[Address(RVA = "0x221C1FC", Offset = "0x221C1FC", VA = "0x221C1FC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B39")]
			[Address(RVA = "0x221C2D0", Offset = "0x221C2D0", VA = "0x221C2D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700005E")]
		public double DecisionThreshold
		{
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0x221C3B4", Offset = "0x221C3B4", VA = "0x221C3B4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B3B")]
			[Address(RVA = "0x221C488", Offset = "0x221C488", VA = "0x221C488")]
			set
			{
			}
		}

		[Token(Token = "0x1700005F")]
		public bool UpdateBackgroundModel
		{
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0x221C56C", Offset = "0x221C56C", VA = "0x221C56C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0x221C64C", Offset = "0x221C64C", VA = "0x221C64C")]
			set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public double MinVal
		{
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0x221C734", Offset = "0x221C734", VA = "0x221C734")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B3F")]
			[Address(RVA = "0x221C808", Offset = "0x221C808", VA = "0x221C808")]
			set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public double MaxVal
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0x221C8EC", Offset = "0x221C8EC", VA = "0x221C8EC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0x221C9C0", Offset = "0x221C9C0", VA = "0x221C9C0")]
			set
			{
			}
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x221B730", Offset = "0x221B730", VA = "0x221B730")]
		public static BackgroundSubtractorGMG Create(int initializationFrames = 120, double decisionThreshold = 0.8)
		{
			return null;
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x221B7D4", Offset = "0x221B7D4", VA = "0x221B7D4")]
		internal BackgroundSubtractorGMG(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x221B880", Offset = "0x221B880", VA = "0x221B880", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200004C")]
	public class BackgroundSubtractorMOG : BackgroundSubtractor
	{
		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<BackgroundSubtractorMOG> objectPtr;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool disposed;

		[Token(Token = "0x17000062")]
		public int History
		{
			[Token(Token = "0x6000B45")]
			[Address(RVA = "0x221DB58", Offset = "0x221DB58", VA = "0x221DB58")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B46")]
			[Address(RVA = "0x221DC2C", Offset = "0x221DC2C", VA = "0x221DC2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public int NMixtures
		{
			[Token(Token = "0x6000B47")]
			[Address(RVA = "0x221DD10", Offset = "0x221DD10", VA = "0x221DD10")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0x221DDE4", Offset = "0x221DDE4", VA = "0x221DDE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public double BackgroundRatio
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0x221DEC8", Offset = "0x221DEC8", VA = "0x221DEC8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0x221DF9C", Offset = "0x221DF9C", VA = "0x221DF9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000065")]
		public double NoiseSigma
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0x221E080", Offset = "0x221E080", VA = "0x221E080")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0x221E154", Offset = "0x221E154", VA = "0x221E154")]
			set
			{
			}
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x221D90C", Offset = "0x221D90C", VA = "0x221D90C")]
		public static BackgroundSubtractorMOG Create(int history = 200, int nMixtures = 5, double backgroundRatio = 0.7, double noiseSigma = 0.0)
		{
			return null;
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x221D9C8", Offset = "0x221D9C8", VA = "0x221D9C8")]
		internal BackgroundSubtractorMOG(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x221DA74", Offset = "0x221DA74", VA = "0x221DA74", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200004D")]
	[Flags]
	public enum CalibrationFlags
	{
		[Token(Token = "0x400005F")]
		None = 0,
		[Token(Token = "0x4000060")]
		UseIntrinsicGuess = 1,
		[Token(Token = "0x4000061")]
		FixAspectRatio = 2,
		[Token(Token = "0x4000062")]
		FixPrincipalPoint = 4,
		[Token(Token = "0x4000063")]
		ZeroTangentDist = 8,
		[Token(Token = "0x4000064")]
		FixFocalLength = 0x10,
		[Token(Token = "0x4000065")]
		FixK1 = 0x20,
		[Token(Token = "0x4000066")]
		FixK2 = 0x40,
		[Token(Token = "0x4000067")]
		FixK3 = 0x80,
		[Token(Token = "0x4000068")]
		FixK4 = 0x800,
		[Token(Token = "0x4000069")]
		FixK5 = 0x1000,
		[Token(Token = "0x400006A")]
		FixK6 = 0x2000,
		[Token(Token = "0x400006B")]
		RationalModel = 0x4000,
		[Token(Token = "0x400006C")]
		ThinPrismModel = 0x8000,
		[Token(Token = "0x400006D")]
		FixS1S2S3S4 = 0x8000,
		[Token(Token = "0x400006E")]
		FixIntrinsic = 0x100,
		[Token(Token = "0x400006F")]
		SameFocalLength = 0x200,
		[Token(Token = "0x4000070")]
		ZeroDisparity = 0x400
	}
	[Token(Token = "0x200004E")]
	[Flags]
	public enum ChessboardFlags
	{
		[Token(Token = "0x4000072")]
		None = 0,
		[Token(Token = "0x4000073")]
		AdaptiveThresh = 1,
		[Token(Token = "0x4000074")]
		NormalizeImage = 2,
		[Token(Token = "0x4000075")]
		FilterQuads = 4,
		[Token(Token = "0x4000076")]
		FastCheck = 8
	}
	[Token(Token = "0x200004F")]
	[Flags]
	public enum FindCirclesGridFlags
	{
		[Token(Token = "0x4000078")]
		SymmetricGrid = 1,
		[Token(Token = "0x4000079")]
		AsymmetricGrid = 2,
		[Token(Token = "0x400007A")]
		Clustering = 4
	}
	[Token(Token = "0x2000050")]
	[Flags]
	public enum FundamentalMatMethod
	{
		[Token(Token = "0x400007C")]
		Point7 = 1,
		[Token(Token = "0x400007D")]
		Point8 = 2,
		[Token(Token = "0x400007E")]
		LMedS = 4,
		[Token(Token = "0x400007F")]
		Ransac = 8
	}
	[Token(Token = "0x2000051")]
	[Flags]
	public enum HomographyMethods
	{
		[Token(Token = "0x4000081")]
		None = 0,
		[Token(Token = "0x4000082")]
		LMedS = 4,
		[Token(Token = "0x4000083")]
		Ransac = 8,
		[Token(Token = "0x4000084")]
		Rho = 0x10
	}
	[Token(Token = "0x2000052")]
	public enum SolvePnPFlags
	{
		[Token(Token = "0x4000086")]
		Iterative,
		[Token(Token = "0x4000087")]
		EPNP,
		[Token(Token = "0x4000088")]
		P3P,
		[Token(Token = "0x4000089")]
		DLS,
		[Token(Token = "0x400008A")]
		UPNP
	}
	[Token(Token = "0x2000053")]
	public enum StereoRectificationFlags
	{
		[Token(Token = "0x400008C")]
		None = 0,
		[Token(Token = "0x400008D")]
		ZeroDisparity = 0x400
	}
	[Token(Token = "0x2000054")]
	public class StereoBM : StereoMatcher
	{
		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<StereoBM> ptrObj;

		[Token(Token = "0x17000066")]
		public int PreFilterType
		{
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0x4279BD4", Offset = "0x4279BD4", VA = "0x4279BD4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0x4279CA8", Offset = "0x4279CA8", VA = "0x4279CA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public int PreFilterSize
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0x4279D8C", Offset = "0x4279D8C", VA = "0x4279D8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0x4279E60", Offset = "0x4279E60", VA = "0x4279E60")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public int PreFilterCap
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0x4279F44", Offset = "0x4279F44", VA = "0x4279F44")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0x427A018", Offset = "0x427A018", VA = "0x427A018")]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public int TextureThreshold
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0x427A0FC", Offset = "0x427A0FC", VA = "0x427A0FC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0x427A1D0", Offset = "0x427A1D0", VA = "0x427A1D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public int UniquenessRatio
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0x427A2B4", Offset = "0x427A2B4", VA = "0x427A2B4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0x427A388", Offset = "0x427A388", VA = "0x427A388")]
			set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public int SmallerBlockSize
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0x427A46C", Offset = "0x427A46C", VA = "0x427A46C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0x427A540", Offset = "0x427A540", VA = "0x427A540")]
			set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public Rect ROI1
		{
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0x427A624", Offset = "0x427A624", VA = "0x427A624")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0x427A6F8", Offset = "0x427A6F8", VA = "0x427A6F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700006D")]
		public Rect ROI2
		{
			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0x427A7E4", Offset = "0x427A7E4", VA = "0x427A7E4")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0x427A8B8", Offset = "0x427A8B8", VA = "0x427A8B8")]
			set
			{
			}
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x4279990", Offset = "0x4279990", VA = "0x4279990")]
		protected StereoBM(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x4279A4C", Offset = "0x4279A4C", VA = "0x4279A4C")]
		public static StereoBM Create(int numDisparities = 0, int blockSize = 21)
		{
			return null;
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x4279AF0", Offset = "0x4279AF0", VA = "0x4279AF0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000055")]
	public class StereoMatcher : Algorithm
	{
		[Token(Token = "0x1700006E")]
		public int MinDisparity
		{
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0x427A9A4", Offset = "0x427A9A4", VA = "0x427A9A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0x427AA10", Offset = "0x427AA10", VA = "0x427AA10")]
			set
			{
			}
		}

		[Token(Token = "0x1700006F")]
		public int NumDisparities
		{
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0x427AA8C", Offset = "0x427AA8C", VA = "0x427AA8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B64")]
			[Address(RVA = "0x427AAF8", Offset = "0x427AAF8", VA = "0x427AAF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000070")]
		public int BlockSize
		{
			[Token(Token = "0x6000B65")]
			[Address(RVA = "0x427AB74", Offset = "0x427AB74", VA = "0x427AB74")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B66")]
			[Address(RVA = "0x427ABE0", Offset = "0x427ABE0", VA = "0x427ABE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public int SpeckleWindowSize
		{
			[Token(Token = "0x6000B67")]
			[Address(RVA = "0x427AC5C", Offset = "0x427AC5C", VA = "0x427AC5C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B68")]
			[Address(RVA = "0x427ACC8", Offset = "0x427ACC8", VA = "0x427ACC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000072")]
		public int SpeckleRange
		{
			[Token(Token = "0x6000B69")]
			[Address(RVA = "0x427AD44", Offset = "0x427AD44", VA = "0x427AD44")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B6A")]
			[Address(RVA = "0x427ADB0", Offset = "0x427ADB0", VA = "0x427ADB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000073")]
		public int Disp12MaxDiff
		{
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0x427AE2C", Offset = "0x427AE2C", VA = "0x427AE2C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0x427AE98", Offset = "0x427AE98", VA = "0x427AE98")]
			set
			{
			}
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x4279A20", Offset = "0x4279A20", VA = "0x4279A20")]
		protected StereoMatcher(IntPtr ptr)
		{
		}
	}
	[Token(Token = "0x2000056")]
	public enum StereoSGBMMode
	{
		[Token(Token = "0x4000091")]
		SGBM,
		[Token(Token = "0x4000092")]
		HH
	}
	[Token(Token = "0x2000057")]
	public class StereoSGBM : StereoMatcher
	{
		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<StereoSGBM> ptrObj;

		[Token(Token = "0x17000074")]
		public int PreFilterCap
		{
			[Token(Token = "0x6000B70")]
			[Address(RVA = "0x427B19C", Offset = "0x427B19C", VA = "0x427B19C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B71")]
			[Address(RVA = "0x427B270", Offset = "0x427B270", VA = "0x427B270")]
			set
			{
			}
		}

		[Token(Token = "0x17000075")]
		public int UniquenessRatio
		{
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0x427B354", Offset = "0x427B354", VA = "0x427B354")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0x427B428", Offset = "0x427B428", VA = "0x427B428")]
			set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public int P1
		{
			[Token(Token = "0x6000B74")]
			[Address(RVA = "0x427B50C", Offset = "0x427B50C", VA = "0x427B50C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B75")]
			[Address(RVA = "0x427B5E0", Offset = "0x427B5E0", VA = "0x427B5E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000077")]
		public int P2
		{
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0x427B6C4", Offset = "0x427B6C4", VA = "0x427B6C4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B77")]
			[Address(RVA = "0x427B798", Offset = "0x427B798", VA = "0x427B798")]
			set
			{
			}
		}

		[Token(Token = "0x17000078")]
		public StereoSGBMMode Mode
		{
			[Token(Token = "0x6000B78")]
			[Address(RVA = "0x427B87C", Offset = "0x427B87C", VA = "0x427B87C")]
			get
			{
				return default(StereoSGBMMode);
			}
			[Token(Token = "0x6000B79")]
			[Address(RVA = "0x427B950", Offset = "0x427B950", VA = "0x427B950")]
			set
			{
			}
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x427AF14", Offset = "0x427AF14", VA = "0x427AF14")]
		protected StereoSGBM(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x427AFA4", Offset = "0x427AFA4", VA = "0x427AFA4")]
		public static StereoSGBM Create(int minDisparity, int numDisparities, int blockSize, int p1 = 0, int p2 = 0, int disp12MaxDiff = 0, int preFilterCap = 0, int uniquenessRatio = 0, int speckleWindowSize = 0, int speckleRange = 0, StereoSGBMMode mode = StereoSGBMMode.SGBM)
		{
			return null;
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x427B0B8", Offset = "0x427B0B8", VA = "0x427B0B8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000058")]
	public abstract class Algorithm : DisposableCvObject
	{
		[Token(Token = "0x17000079")]
		public virtual bool Empty
		{
			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0x22184AC", Offset = "0x22184AC", VA = "0x22184AC", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x2218224", Offset = "0x2218224", VA = "0x2218224", Slot = "8")]
		public virtual void Write(FileStorage fs)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x2218368", Offset = "0x2218368", VA = "0x2218368", Slot = "9")]
		public virtual void Read(FileNode fn)
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x2218598", Offset = "0x2218598", VA = "0x2218598", Slot = "11")]
		public virtual void Save(string filename)
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x22186C8", Offset = "0x22186C8", VA = "0x22186C8", Slot = "12")]
		public virtual string GetDefaultName()
		{
			return null;
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x2218804", Offset = "0x2218804", VA = "0x2218804")]
		protected Algorithm()
		{
		}
	}
	[Token(Token = "0x2000059")]
	public enum AlgorithmParamType
	{
		[Token(Token = "0x4000096")]
		Int,
		[Token(Token = "0x4000097")]
		Boolean,
		[Token(Token = "0x4000098")]
		Real,
		[Token(Token = "0x4000099")]
		String,
		[Token(Token = "0x400009A")]
		Mat,
		[Token(Token = "0x400009B")]
		MatVector,
		[Token(Token = "0x400009C")]
		Algorithm,
		[Token(Token = "0x400009D")]
		Float,
		[Token(Token = "0x400009E")]
		UnsignedInt,
		[Token(Token = "0x400009F")]
		UInt64,
		[Token(Token = "0x40000A0")]
		Short,
		[Token(Token = "0x40000A1")]
		UChar
	}
	[Token(Token = "0x200005A")]
	public enum CmpTypes
	{
		[Token(Token = "0x40000A3")]
		EQ,
		[Token(Token = "0x40000A4")]
		GT,
		[Token(Token = "0x40000A5")]
		GE,
		[Token(Token = "0x40000A6")]
		LT,
		[Token(Token = "0x40000A7")]
		LE,
		[Token(Token = "0x40000A8")]
		NE
	}
	[Token(Token = "0x200005B")]
	[Flags]
	public enum CovarFlags
	{
		[Token(Token = "0x40000AA")]
		Scrambled = 0,
		[Token(Token = "0x40000AB")]
		Normal = 1,
		[Token(Token = "0x40000AC")]
		UseAvg = 2,
		[Token(Token = "0x40000AD")]
		Scale = 4,
		[Token(Token = "0x40000AE")]
		Rows = 8,
		[Token(Token = "0x40000AF")]
		Cols = 0x10
	}
	[Token(Token = "0x200005C")]
	public enum CpuFeatures
	{
		[Token(Token = "0x40000B1")]
		MMX = 1,
		[Token(Token = "0x40000B2")]
		SSE = 2,
		[Token(Token = "0x40000B3")]
		SSE2 = 3,
		[Token(Token = "0x40000B4")]
		SSE3 = 4,
		[Token(Token = "0x40000B5")]
		SSSE3 = 5,
		[Token(Token = "0x40000B6")]
		SSE4_1 = 6,
		[Token(Token = "0x40000B7")]
		SSE4_2 = 7,
		[Token(Token = "0x40000B8")]
		POPCNT = 8,
		[Token(Token = "0x40000B9")]
		AVX = 10,
		[Token(Token = "0x40000BA")]
		AVX2 = 11,
		[Token(Token = "0x40000BB")]
		FMA3 = 12,
		[Token(Token = "0x40000BC")]
		AVX_512F = 13,
		[Token(Token = "0x40000BD")]
		AVX_512BW = 14,
		[Token(Token = "0x40000BE")]
		AVX_512CD = 15,
		[Token(Token = "0x40000BF")]
		AVX_512DQ = 16,
		[Token(Token = "0x40000C0")]
		AVX_512ER = 17,
		[Token(Token = "0x40000C1")]
		AVX_512IFMA512 = 18,
		[Token(Token = "0x40000C2")]
		AVX_512PF = 19,
		[Token(Token = "0x40000C3")]
		AVX_512VBMI = 20,
		[Token(Token = "0x40000C4")]
		AVX_512VL = 21,
		[Token(Token = "0x40000C5")]
		NEON = 100
	}
	[Token(Token = "0x200005D")]
	[Flags]
	public enum CriteriaType
	{
		[Token(Token = "0x40000C7")]
		Count = 1,
		[Token(Token = "0x40000C8")]
		MaxIter = 1,
		[Token(Token = "0x40000C9")]
		Eps = 2
	}
	[Token(Token = "0x200005E")]
	[Flags]
	public enum DctFlags
	{
		[Token(Token = "0x40000CB")]
		None = 0,
		[Token(Token = "0x40000CC")]
		Inverse = 1,
		[Token(Token = "0x40000CD")]
		Rows = 4
	}
	[Token(Token = "0x200005F")]
	public enum DecompTypes
	{
		[Token(Token = "0x40000CF")]
		LU = 0,
		[Token(Token = "0x40000D0")]
		SVD = 1,
		[Token(Token = "0x40000D1")]
		Eig = 2,
		[Token(Token = "0x40000D2")]
		Cholesky = 3,
		[Token(Token = "0x40000D3")]
		QR = 4,
		[Token(Token = "0x40000D4")]
		Normal = 16
	}
	[Token(Token = "0x2000060")]
	[Flags]
	public enum DftFlags
	{
		[Token(Token = "0x40000D6")]
		None = 0,
		[Token(Token = "0x40000D7")]
		Inverse = 1,
		[Token(Token = "0x40000D8")]
		Scale = 2,
		[Token(Token = "0x40000D9")]
		Rows = 4,
		[Token(Token = "0x40000DA")]
		ComplexOutput = 0x10,
		[Token(Token = "0x40000DB")]
		RealOutput = 0x20
	}
	[Token(Token = "0x2000061")]
	public enum DistributionType
	{
		[Token(Token = "0x40000DD")]
		Uniform,
		[Token(Token = "0x40000DE")]
		Normal
	}
	[Token(Token = "0x2000062")]
	public enum DumpFormat
	{
		[Token(Token = "0x40000E0")]
		Default,
		[Token(Token = "0x40000E1")]
		Python,
		[Token(Token = "0x40000E2")]
		NumPy,
		[Token(Token = "0x40000E3")]
		Csv,
		[Token(Token = "0x40000E4")]
		C
	}
	[Token(Token = "0x2000063")]
	public enum ErrorCode
	{
		[Token(Token = "0x40000E6")]
		StsOk = 0,
		[Token(Token = "0x40000E7")]
		StsBackTrace = -1,
		[Token(Token = "0x40000E8")]
		StsError = -2,
		[Token(Token = "0x40000E9")]
		StsInternal = -3,
		[Token(Token = "0x40000EA")]
		StsNoMem = -4,
		[Token(Token = "0x40000EB")]
		StsBadArg = -5,
		[Token(Token = "0x40000EC")]
		StsBadFunc = -6,
		[Token(Token = "0x40000ED")]
		StsNoConv = -7,
		[Token(Token = "0x40000EE")]
		StsAutoTrace = -8,
		[Token(Token = "0x40000EF")]
		HeaderIsNull = -9,
		[Token(Token = "0x40000F0")]
		BadImageSize = -10,
		[Token(Token = "0x40000F1")]
		BadOffset = -11,
		[Token(Token = "0x40000F2")]
		BadDataPtr = -12,
		[Token(Token = "0x40000F3")]
		BadStep = -13,
		[Token(Token = "0x40000F4")]
		BadModelOrChSeq = -14,
		[Token(Token = "0x40000F5")]
		BadNumChannels = -15,
		[Token(Token = "0x40000F6")]
		BadNumChannel1U = -16,
		[Token(Token = "0x40000F7")]
		BadDepth = -17,
		[Token(Token = "0x40000F8")]
		BadAlphaChannel = -18,
		[Token(Token = "0x40000F9")]
		BadOrder = -19,
		[Token(Token = "0x40000FA")]
		BadOrigin = -20,
		[Token(Token = "0x40000FB")]
		BadAlign = -21,
		[Token(Token = "0x40000FC")]
		BadCallBack = -22,
		[Token(Token = "0x40000FD")]
		BadTileSize = -23,
		[Token(Token = "0x40000FE")]
		BadCOI = -24,
		[Token(Token = "0x40000FF")]
		BadROISize = -25,
		[Token(Token = "0x4000100")]
		MaskIsTiled = -26,
		[Token(Token = "0x4000101")]
		StsNullPtr = -27,
		[Token(Token = "0x4000102")]
		StsVecLengthErr = -28,
		[Token(Token = "0x4000103")]
		StsFilterStructContentErr = -29,
		[Token(Token = "0x4000104")]
		StsKernelStructContentErr = -30,
		[Token(Token = "0x4000105")]
		StsFilterOffsetErr = -31,
		[Token(Token = "0x4000106")]
		StsBadSize = -201,
		[Token(Token = "0x4000107")]
		StsDivByZero = -202,
		[Token(Token = "0x4000108")]
		StsInplaceNotSupported = -203,
		[Token(Token = "0x4000109")]
		StsObjectNotFound = -204,
		[Token(Token = "0x400010A")]
		StsUnmatchedFormats = -205,
		[Token(Token = "0x400010B")]
		StsBadFlag = -206,
		[Token(Token = "0x400010C")]
		StsBadPoint = -207,
		[Token(Token = "0x400010D")]
		StsBadMask = -208,
		[Token(Token = "0x400010E")]
		StsUnmatchedSizes = -209,
		[Token(Token = "0x400010F")]
		StsUnsupportedFormat = -210,
		[Token(Token = "0x4000110")]
		StsOutOfRange = -211,
		[Token(Token = "0x4000111")]
		StsParseError = -212,
		[Token(Token = "0x4000112")]
		StsNotImplemented = -213,
		[Token(Token = "0x4000113")]
		StsBadMemBlock = -214,
		[Token(Token = "0x4000114")]
		StsAssert = -215,
		[Token(Token = "0x4000115")]
		GpuNotSupported = -216,
		[Token(Token = "0x4000116")]
		GpuApiCallError = -217,
		[Token(Token = "0x4000117")]
		OpenGlNotSupported = -218,
		[Token(Token = "0x4000118")]
		OpenGlApiCallError = -219,
		[Token(Token = "0x4000119")]
		OpenCLApiCallError = -220,
		[Token(Token = "0x400011A")]
		OpenCLDoubleNotSupported = -221,
		[Token(Token = "0x400011B")]
		OpenCLInitError = -222,
		[Token(Token = "0x400011C")]
		OpenCLNoAMDBlasFft = -223
	}
	[Token(Token = "0x2000064")]
	[Flags]
	public enum GemmFlags
	{
		[Token(Token = "0x400011E")]
		None = 0,
		[Token(Token = "0x400011F")]
		A_T = 1,
		[Token(Token = "0x4000120")]
		B_T = 2,
		[Token(Token = "0x4000121")]
		C_T = 4
	}
	[Token(Token = "0x2000065")]
	[Flags]
	public enum HersheyFonts
	{
		[Token(Token = "0x4000123")]
		HersheySimplex = 0,
		[Token(Token = "0x4000124")]
		HersheyPlain = 1,
		[Token(Token = "0x4000125")]
		HersheyDuplex = 2,
		[Token(Token = "0x4000126")]
		HersheyComplex = 3,
		[Token(Token = "0x4000127")]
		HersheyTriplex = 4,
		[Token(Token = "0x4000128")]
		HersheyComplexSmall = 5,
		[Token(Token = "0x4000129")]
		HersheyScriptSimplex = 6,
		[Token(Token = "0x400012A")]
		HersheyScriptComplex = 7,
		[Token(Token = "0x400012B")]
		Italic = 0x10
	}
	[Token(Token = "0x2000066")]
	[Flags]
	public enum InOutArrayKind
	{
		[Token(Token = "0x400012D")]
		None = 0,
		[Token(Token = "0x400012E")]
		Mat = 0x10000,
		[Token(Token = "0x400012F")]
		Matx = 0x20000,
		[Token(Token = "0x4000130")]
		StdVector = 0x30000,
		[Token(Token = "0x4000131")]
		VectorVector = 0x40000,
		[Token(Token = "0x4000132")]
		VectorMat = 0x50000,
		[Token(Token = "0x4000133")]
		Expr = 0x60000,
		[Token(Token = "0x4000134")]
		OpenGLBuffer = 0x70000,
		[Token(Token = "0x4000135")]
		OpenGLTexture = 0x80000,
		[Token(Token = "0x4000136")]
		GpuMat = 0x90000,
		[Token(Token = "0x4000137")]
		OclMat = 0xA0000,
		[Token(Token = "0x4000138")]
		FixedType = int.MinValue,
		[Token(Token = "0x4000139")]
		FixedSize = 0x40000000
	}
	[Token(Token = "0x2000067")]
	[Flags]
	public enum KMeansFlags
	{
		[Token(Token = "0x400013B")]
		RandomCenters = 0,
		[Token(Token = "0x400013C")]
		PpCenters = 2,
		[Token(Token = "0x400013D")]
		UseInitialLabels = 1
	}
	[Token(Token = "0x2000068")]
	public enum MatDiagType
	{
		[Token(Token = "0x400013F")]
		Upper = -1,
		[Token(Token = "0x4000140")]
		Main,
		[Token(Token = "0x4000141")]
		Lower
	}
	[Token(Token = "0x2000069")]
	[Flags]
	public enum NormTypes
	{
		[Token(Token = "0x4000143")]
		INF = 1,
		[Token(Token = "0x4000144")]
		L1 = 2,
		[Token(Token = "0x4000145")]
		L2 = 4,
		[Token(Token = "0x4000146")]
		L2SQR = 5,
		[Token(Token = "0x4000147")]
		Hamming = 6,
		[Token(Token = "0x4000148")]
		Hamming2 = 7,
		[Token(Token = "0x4000149")]
		Relative = 8,
		[Token(Token = "0x400014A")]
		MinMax = 0x20
	}
	[Token(Token = "0x200006A")]
	public enum ReduceDimension
	{
		[Token(Token = "0x400014C")]
		Row = 0,
		[Token(Token = "0x400014D")]
		Column = 1,
		[Token(Token = "0x400014E")]
		Auto = -1
	}
	[Token(Token = "0x200006B")]
	public enum ReduceTypes
	{
		[Token(Token = "0x4000150")]
		Sum,
		[Token(Token = "0x4000151")]
		Avg,
		[Token(Token = "0x4000152")]
		Max,
		[Token(Token = "0x4000153")]
		Min
	}
	[Token(Token = "0x200006C")]
	public enum RotateFlags
	{
		[Token(Token = "0x4000155")]
		Rotate90Clockwise,
		[Token(Token = "0x4000156")]
		Rotate180,
		[Token(Token = "0x4000157")]
		Rotate90CounterClockwise
	}
	[Token(Token = "0x200006D")]
	[Flags]
	public enum SortFlags
	{
		[Token(Token = "0x4000159")]
		EveryRow = 0,
		[Token(Token = "0x400015A")]
		EveryColumn = 1,
		[Token(Token = "0x400015B")]
		Ascending = 0,
		[Token(Token = "0x400015C")]
		Descending = 0x10
	}
	[Token(Token = "0x200006E")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDA960", Offset = "0x1DDA960")]
	public class FileNode : DisposableCvObject
	{
		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x1700007A")]
		public FileNode Item
		{
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x3EB65A4", Offset = "0x3EB65A4", VA = "0x3EB65A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		public FileNode Item
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x3EB66D4", Offset = "0x3EB66D4", VA = "0x3EB66D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007C")]
		public bool Empty
		{
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x3EB67D4", Offset = "0x3EB67D4", VA = "0x3EB67D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007D")]
		public bool IsNone
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x3EB6890", Offset = "0x3EB6890", VA = "0x3EB6890")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007E")]
		public bool IsSeq
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x3EB694C", Offset = "0x3EB694C", VA = "0x3EB694C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007F")]
		public bool IsMap
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x3EB6A08", Offset = "0x3EB6A08", VA = "0x3EB6A08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000080")]
		public bool IsInt
		{
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0x3EB6AC4", Offset = "0x3EB6AC4", VA = "0x3EB6AC4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000081")]
		public bool IsReal
		{
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x3EB6B80", Offset = "0x3EB6B80", VA = "0x3EB6B80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000082")]
		public bool IsString
		{
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0x3EB6C3C", Offset = "0x3EB6C3C", VA = "0x3EB6C3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000083")]
		public bool IsNamed
		{
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0x3EB6CF8", Offset = "0x3EB6CF8", VA = "0x3EB6CF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000084")]
		public string Name
		{
			[Token(Token = "0x6000B92")]
			[Address(RVA = "0x3EB6DB4", Offset = "0x3EB6DB4", VA = "0x3EB6DB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		public long Size
		{
			[Token(Token = "0x6000B93")]
			[Address(RVA = "0x3EB6EC0", Offset = "0x3EB6EC0", VA = "0x3EB6EC0")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x3EB5FE0", Offset = "0x3EB5FE0", VA = "0x3EB5FE0")]
		public FileNode()
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x3EB6058", Offset = "0x3EB6058", VA = "0x3EB6058")]
		public FileNode(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x3EB6084", Offset = "0x3EB6084", VA = "0x3EB6084", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x3EB6178", Offset = "0x3EB6178", VA = "0x3EB6178")]
		public static explicit operator int(FileNode node)
		{
			return default(int);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x3EB622C", Offset = "0x3EB622C", VA = "0x3EB622C")]
		public static explicit operator float(FileNode node)
		{
			return default(float);
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x3EB62E0", Offset = "0x3EB62E0", VA = "0x3EB62E0")]
		public static explicit operator double(FileNode node)
		{
			return default(double);
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x3EB6394", Offset = "0x3EB6394", VA = "0x3EB6394")]
		public static explicit operator string(FileNode node)
		{
			return null;
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x3EB64A4", Offset = "0x3EB64A4", VA = "0x3EB64A4")]
		public static explicit operator Mat(FileNode node)
		{
			return null;
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x3EB6F90", Offset = "0x3EB6F90", VA = "0x3EB6F90")]
		public void ReadRaw(string fmt, IntPtr vec, long len)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x3EB70B0", Offset = "0x3EB70B0", VA = "0x3EB70B0")]
		public IntPtr ReadObj()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x3EB7160", Offset = "0x3EB7160", VA = "0x3EB7160")]
		public int ReadInt(int defaultValue = 0)
		{
			return default(int);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x3EB71EC", Offset = "0x3EB71EC", VA = "0x3EB71EC")]
		public float ReadFloat(float defaultValue = 0f)
		{
			return default(float);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x3EB7278", Offset = "0x3EB7278", VA = "0x3EB7278")]
		public double ReadDouble(double defaultValue = 0.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x3EB7304", Offset = "0x3EB7304", VA = "0x3EB7304")]
		public string ReadString([Optional] string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x3EB73D4", Offset = "0x3EB73D4", VA = "0x3EB73D4")]
		public Mat ReadMat([Optional] Mat defaultMat)
		{
			return null;
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x3EB7534", Offset = "0x3EB7534", VA = "0x3EB7534")]
		public SparseMat ReadSparseMat([Optional] SparseMat defaultMat)
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x3EB7694", Offset = "0x3EB7694", VA = "0x3EB7694")]
		public KeyPoint[] ReadKeyPoints()
		{
			return null;
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x3EB77FC", Offset = "0x3EB77FC", VA = "0x3EB77FC")]
		public DMatch[] ReadDMatches()
		{
			return null;
		}
	}
	[Token(Token = "0x200006F")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDA998", Offset = "0x1DDA998")]
	public class FileStorage : DisposableCvObject
	{
		[Token(Token = "0x2000186")]
		[Flags]
		public enum Mode
		{
			[Token(Token = "0x4000667")]
			Read = 0,
			[Token(Token = "0x4000668")]
			Write = 1,
			[Token(Token = "0x4000669")]
			Append = 2,
			[Token(Token = "0x400066A")]
			Memory = 4,
			[Token(Token = "0x400066B")]
			FotmatMask = 0x38,
			[Token(Token = "0x400066C")]
			FormatAuto = 0,
			[Token(Token = "0x400066D")]
			FormatXml = 8,
			[Token(Token = "0x400066E")]
			FormatYaml = 0x10
		}

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000086")]
		public FileNode Item
		{
			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0x3EB7BB0", Offset = "0x3EB7BB0", VA = "0x3EB7BB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public string ElName
		{
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0x3EB7CE0", Offset = "0x3EB7CE0", VA = "0x3EB7CE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public byte[] Structs
		{
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0x3EB7DB0", Offset = "0x3EB7DB0", VA = "0x3EB7DB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		public int State
		{
			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0x3EB7EE4", Offset = "0x3EB7EE4", VA = "0x3EB7EE4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x3EB7964", Offset = "0x3EB7964", VA = "0x3EB7964")]
		public FileStorage()
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x3EB79DC", Offset = "0x3EB79DC", VA = "0x3EB79DC")]
		public FileStorage(string source, Mode flags, [Optional] string encoding)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x3EB7ABC", Offset = "0x3EB7ABC", VA = "0x3EB7ABC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x3EB7F94", Offset = "0x3EB7F94", VA = "0x3EB7F94", Slot = "8")]
		public virtual bool Open(string fileName, Mode flags, [Optional] string encoding)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x3EB80A8", Offset = "0x3EB80A8", VA = "0x3EB80A8", Slot = "9")]
		public virtual bool IsOpened()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x3EB8164", Offset = "0x3EB8164", VA = "0x3EB8164", Slot = "10")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x3EB81EC", Offset = "0x3EB81EC", VA = "0x3EB81EC")]
		public string ReleaseAndGetString()
		{
			return null;
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x3EB8304", Offset = "0x3EB8304", VA = "0x3EB8304")]
		public FileNode GetFirstTopLevelNode()
		{
			return null;
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x3EB83F4", Offset = "0x3EB83F4", VA = "0x3EB83F4")]
		public FileNode Root(int streamidx = 0)
		{
			return null;
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x3EB84F4", Offset = "0x3EB84F4", VA = "0x3EB84F4")]
		public void WriteRaw(string fmt, IntPtr vec, long len)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x3EB8578", Offset = "0x3EB8578", VA = "0x3EB8578")]
		public void WriteObj(string name, IntPtr obj)
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x3EB8670", Offset = "0x3EB8670", VA = "0x3EB8670")]
		public static string GetDefaultObjectName(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x3EB87C4", Offset = "0x3EB87C4", VA = "0x3EB87C4")]
		public void Write(string name, int value)
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x3EB8888", Offset = "0x3EB8888", VA = "0x3EB8888")]
		public void Write(string name, float value)
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x3EB8954", Offset = "0x3EB8954", VA = "0x3EB8954")]
		public void Write(string name, double value)
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x3EB8A20", Offset = "0x3EB8A20", VA = "0x3EB8A20")]
		public void Write(string name, string value)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x3EB8B04", Offset = "0x3EB8B04", VA = "0x3EB8B04")]
		public void Write(string name, Mat value)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x3EB8C20", Offset = "0x3EB8C20", VA = "0x3EB8C20")]
		public void Write(string name, SparseMat value)
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x3EB8D3C", Offset = "0x3EB8D3C", VA = "0x3EB8D3C")]
		public void Write(string name, IEnumerable<KeyPoint> value)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x3EB8EF8", Offset = "0x3EB8EF8", VA = "0x3EB8EF8")]
		public void Write(string name, IEnumerable<DMatch> value)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x3EB90B4", Offset = "0x3EB90B4", VA = "0x3EB90B4")]
		public void WriteScalar(int value)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x3EB9130", Offset = "0x3EB9130", VA = "0x3EB9130")]
		public void WriteScalar(float value)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x3EB91AC", Offset = "0x3EB91AC", VA = "0x3EB91AC")]
		public void WriteScalar(double value)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x3EB9228", Offset = "0x3EB9228", VA = "0x3EB9228")]
		public void WriteScalar(string value)
		{
		}
	}
	[Token(Token = "0x2000070")]
	public class InputArray : DisposableCvObject
	{
		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private object obj;

		[Token(Token = "0x4000161")]
		public const int KIND_SHIFT = 16;

		[Token(Token = "0x4000162")]
		public const int KIND_MASK = 1073676288;

		[Token(Token = "0x1700008A")]
		public InOutArrayKind Kind
		{
			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0x304FFF0", Offset = "0x304FFF0", VA = "0x304FFF0")]
			get
			{
				return default(InOutArrayKind);
			}
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x304F848", Offset = "0x304F848", VA = "0x304F848")]
		internal InputArray(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x304F880", Offset = "0x304F880", VA = "0x304F880")]
		internal InputArray(Mat mat)
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x304F934", Offset = "0x304F934", VA = "0x304F934")]
		internal InputArray(MatExpr expr)
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x304F9E8", Offset = "0x304F9E8", VA = "0x304F9E8")]
		internal InputArray(Scalar val)
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x304FA90", Offset = "0x304FA90", VA = "0x304FA90")]
		internal InputArray(double val)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x304FB18", Offset = "0x304FB18", VA = "0x304FB18")]
		internal InputArray(IEnumerable<Mat> mat)
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x304FCB8", Offset = "0x304FCB8", VA = "0x304FCB8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x304FDC8", Offset = "0x304FDC8", VA = "0x304FDC8")]
		public static implicit operator InputArray(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x304FE2C", Offset = "0x304FE2C", VA = "0x304FE2C")]
		public static implicit operator InputArray(MatExpr expr)
		{
			return null;
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x304FE90", Offset = "0x304FE90", VA = "0x304FE90")]
		public static implicit operator InputArray(Scalar val)
		{
			return null;
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x304FF1C", Offset = "0x304FF1C", VA = "0x304FF1C")]
		public static implicit operator InputArray(double val)
		{
			return null;
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x304FF88", Offset = "0x304FF88", VA = "0x304FF88")]
		public static explicit operator InputArray(List<Mat> mats)
		{
			return null;
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x304FFEC", Offset = "0x304FFEC", VA = "0x304FFEC")]
		public static explicit operator InputArray(Mat[] mats)
		{
			return null;
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x304FDCC", Offset = "0x304FDCC", VA = "0x304FDCC")]
		public static InputArray Create(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x304FE30", Offset = "0x304FE30", VA = "0x304FE30")]
		public static InputArray Create(MatExpr expr)
		{
			return null;
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x304FE94", Offset = "0x304FE94", VA = "0x304FE94")]
		public static InputArray Create(Scalar val)
		{
			return null;
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x304FF20", Offset = "0x304FF20", VA = "0x304FF20")]
		public static InputArray Create(double val)
		{
			return null;
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x304FF8C", Offset = "0x304FF8C", VA = "0x304FF8C")]
		public static InputArray Create(IEnumerable<Mat> matVector)
		{
			return null;
		}

		[Token(Token = "0x6000BCD")]
		public static InputArray Create<T>(IEnumerable<T> enumerable) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000BCE")]
		public static InputArray Create<T>(IEnumerable<T> enumerable, MatType type) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000BCF")]
		public static InputArray Create<T>(T[] array) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000BD0")]
		public static InputArray Create<T>(T[] array, MatType type) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000BD1")]
		public static InputArray Create<T>(T[,] array) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000BD2")]
		public static InputArray Create<T>(T[,] array, MatType type) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x3050068", Offset = "0x3050068", VA = "0x3050068")]
		private static MatType EstimateType(Type t)
		{
			return default(MatType);
		}
	}
	[Token(Token = "0x2000071")]
	public class InputOutputArray : OutputArray
	{
		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x305107C", Offset = "0x305107C", VA = "0x305107C")]
		internal InputOutputArray(Mat mat)
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x3051084", Offset = "0x3051084", VA = "0x3051084")]
		public static implicit operator InputOutputArray(Mat mat)
		{
			return null;
		}
	}
	[Token(Token = "0x2000072")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDA9D0", Offset = "0x1DDA9D0")]
	public class Mat : DisposableCvObject, ICloneable
	{
		[Token(Token = "0x2000187")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB288", Offset = "0x1DDB288")]
		public class MatExprIndexer : MatExprRangeIndexer
		{
			[Token(Token = "0x17000221")]
			public override MatExpr Item
			{
				[Token(Token = "0x6001764")]
				[Address(RVA = "0x3AB0C04", Offset = "0x3AB0C04", VA = "0x3AB0C04", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001765")]
				[Address(RVA = "0x3AB0C88", Offset = "0x3AB0C88", VA = "0x3AB0C88", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000222")]
			public override MatExpr Item
			{
				[Token(Token = "0x6001766")]
				[Address(RVA = "0x3AB0DA8", Offset = "0x3AB0DA8", VA = "0x3AB0DA8", Slot = "6")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001767")]
				[Address(RVA = "0x3AB0DCC", Offset = "0x3AB0DCC", VA = "0x3AB0DCC", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000223")]
			public override MatExpr Item
			{
				[Token(Token = "0x6001768")]
				[Address(RVA = "0x3AB0ED4", Offset = "0x3AB0ED4", VA = "0x3AB0ED4", Slot = "8")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001769")]
				[Address(RVA = "0x3AB0EF8", Offset = "0x3AB0EF8", VA = "0x3AB0EF8", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000224")]
			public override MatExpr Item
			{
				[Token(Token = "0x600176A")]
				[Address(RVA = "0x3AB1000", Offset = "0x3AB1000", VA = "0x3AB1000", Slot = "10")]
				get
				{
					return null;
				}
				[Token(Token = "0x600176B")]
				[Address(RVA = "0x3AB1024", Offset = "0x3AB1024", VA = "0x3AB1024", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001763")]
			[Address(RVA = "0x3AB0B9C", Offset = "0x3AB0B9C", VA = "0x3AB0B9C")]
			protected internal MatExprIndexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x2000188")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB2C0", Offset = "0x1DDB2C0")]
		public class ColExprIndexer : MatRowColExprIndexer
		{
			[Token(Token = "0x17000225")]
			public override MatExpr Item
			{
				[Token(Token = "0x600176D")]
				[Address(RVA = "0x3AB0280", Offset = "0x3AB0280", VA = "0x3AB0280", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x600176E")]
				[Address(RVA = "0x3AB0374", Offset = "0x3AB0374", VA = "0x3AB0374", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000226")]
			public override MatExpr Item
			{
				[Token(Token = "0x600176F")]
				[Address(RVA = "0x3AB047C", Offset = "0x3AB047C", VA = "0x3AB047C", Slot = "6")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001770")]
				[Address(RVA = "0x3AB054C", Offset = "0x3AB054C", VA = "0x3AB054C", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x600176C")]
			[Address(RVA = "0x3AB0278", Offset = "0x3AB0278", VA = "0x3AB0278")]
			protected internal ColExprIndexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x2000189")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB2F8", Offset = "0x1DDB2F8")]
		public class RowExprIndexer : MatRowColExprIndexer
		{
			[Token(Token = "0x17000227")]
			public override MatExpr Item
			{
				[Token(Token = "0x6001772")]
				[Address(RVA = "0x3AB1124", Offset = "0x3AB1124", VA = "0x3AB1124", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001773")]
				[Address(RVA = "0x3AB11EC", Offset = "0x3AB11EC", VA = "0x3AB11EC", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000228")]
			public override MatExpr Item
			{
				[Token(Token = "0x6001774")]
				[Address(RVA = "0x3AB12F4", Offset = "0x3AB12F4", VA = "0x3AB12F4", Slot = "6")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001775")]
				[Address(RVA = "0x3AB13C4", Offset = "0x3AB13C4", VA = "0x3AB13C4", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x6001771")]
			[Address(RVA = "0x3AB111C", Offset = "0x3AB111C", VA = "0x3AB111C")]
			protected internal RowExprIndexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x200018A")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB330", Offset = "0x1DDB330")]
		public sealed class Indexer<T> : MatIndexer<T> where T : struct
		{
			[Token(Token = "0x400066F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly long ptrVal;

			[Token(Token = "0x17000229")]
			public override T Item
			{
				[Token(Token = "0x6001777")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x6001778")]
				set
				{
				}
			}

			[Token(Token = "0x1700022A")]
			public override T Item
			{
				[Token(Token = "0x6001779")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x600177A")]
				set
				{
				}
			}

			[Token(Token = "0x1700022B")]
			public override T Item
			{
				[Token(Token = "0x600177B")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x600177C")]
				set
				{
				}
			}

			[Token(Token = "0x1700022C")]
			public override T Item
			{
				[Token(Token = "0x600177D")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x600177E")]
				set
				{
				}
			}

			[Token(Token = "0x6001776")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x200018B")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB368", Offset = "0x1DDB368")]
		public class ColIndexer : MatRowColIndexer
		{
			[Token(Token = "0x1700022D")]
			public override Mat Item
			{
				[Token(Token = "0x6001780")]
				[Address(RVA = "0x3AB066C", Offset = "0x3AB066C", VA = "0x3AB066C", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001781")]
				[Address(RVA = "0x3AB0734", Offset = "0x3AB0734", VA = "0x3AB0734", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700022E")]
			public override Mat Item
			{
				[Token(Token = "0x6001782")]
				[Address(RVA = "0x3AB08F8", Offset = "0x3AB08F8", VA = "0x3AB08F8", Slot = "6")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001783")]
				[Address(RVA = "0x3AB09C8", Offset = "0x3AB09C8", VA = "0x3AB09C8", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x600177F")]
			[Address(RVA = "0x3AB0664", Offset = "0x3AB0664", VA = "0x3AB0664")]
			protected internal ColIndexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x200018C")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB3A0", Offset = "0x1DDB3A0")]
		public class RowIndexer : MatRowColIndexer
		{
			[Token(Token = "0x1700022F")]
			public override Mat Item
			{
				[Token(Token = "0x6001785")]
				[Address(RVA = "0x3AB14D8", Offset = "0x3AB14D8", VA = "0x3AB14D8", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001786")]
				[Address(RVA = "0x3AB15A0", Offset = "0x3AB15A0", VA = "0x3AB15A0", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000230")]
			public override Mat Item
			{
				[Token(Token = "0x6001787")]
				[Address(RVA = "0x3AB1764", Offset = "0x3AB1764", VA = "0x3AB1764", Slot = "6")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001788")]
				[Address(RVA = "0x3AB1834", Offset = "0x3AB1834", VA = "0x3AB1834", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x6001784")]
			[Address(RVA = "0x3AB14D0", Offset = "0x3AB14D0", VA = "0x3AB14D0")]
			protected internal RowIndexer(Mat parent)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200018D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB3D8", Offset = "0x1DDB3D8")]
		private sealed class <>c
		{
			[Token(Token = "0x4000670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static OpenCvSharp.Util.Func<long, IntPtr> <>9__13_0;

			[Token(Token = "0x4000672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static OpenCvSharp.Util.Func<long, IntPtr> <>9__14_0;

			[Token(Token = "0x4000673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static OpenCvSharp.Util.Func<DMatch, Vec4f> <>9__267_0;

			[Token(Token = "0x4000674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static OpenCvSharp.Util.Func<DMatch, Vec4f> <>9__268_0;

			[Token(Token = "0x600178A")]
			[Address(RVA = "0x3AB00F0", Offset = "0x3AB00F0", VA = "0x3AB00F0")]
			public <>c()
			{
			}

			[Token(Token = "0x600178B")]
			[Address(RVA = "0x3AB00F8", Offset = "0x3AB00F8", VA = "0x3AB00F8")]
			internal IntPtr <.ctor>b__13_0(long s)
			{
				return default(IntPtr);
			}

			[Token(Token = "0x600178C")]
			[Address(RVA = "0x3AB0124", Offset = "0x3AB0124", VA = "0x3AB0124")]
			internal IntPtr <.ctor>b__14_0(long s)
			{
				return default(IntPtr);
			}

			[Token(Token = "0x600178D")]
			[Address(RVA = "0x3AB0150", Offset = "0x3AB0150", VA = "0x3AB0150")]
			internal Vec4f <SetArray>b__267_0(DMatch d)
			{
				return default(Vec4f);
			}

			[Token(Token = "0x600178E")]
			[Address(RVA = "0x3AB0160", Offset = "0x3AB0160", VA = "0x3AB0160")]
			internal Vec4f <SetArray>b__268_0(DMatch d)
			{
				return default(Vec4f);
			}
		}

		[Token(Token = "0x200018E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB3E8", Offset = "0x1DDB3E8")]
		private sealed class <>c__DisplayClass190_0
		{
			[Token(Token = "0x4000675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MatType t;

			[Token(Token = "0x600178F")]
			[Address(RVA = "0x3AB0170", Offset = "0x3AB0170", VA = "0x3AB0170")]
			public <>c__DisplayClass190_0()
			{
			}

			[Token(Token = "0x6001790")]
			[Address(RVA = "0x3AB0178", Offset = "0x3AB0178", VA = "0x3AB0178")]
			internal bool <CheckArgumentsForConvert>b__0(MatType type)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200018F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB3F8", Offset = "0x1DDB3F8")]
		private sealed class <>c__DisplayClass191_0
		{
			[Token(Token = "0x4000676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MatType t;

			[Token(Token = "0x6001791")]
			[Address(RVA = "0x3AB01F4", Offset = "0x3AB01F4", VA = "0x3AB01F4")]
			public <>c__DisplayClass191_0()
			{
			}

			[Token(Token = "0x6001792")]
			[Address(RVA = "0x3AB01FC", Offset = "0x3AB01FC", VA = "0x3AB01FC")]
			internal bool <CheckArgumentsForConvert>b__0(MatType type)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int SizeOf;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MatExprIndexer matExprIndexer;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ColExprIndexer colExprIndexer;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RowExprIndexer rowExprIndexer;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ColIndexer colIndexer;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RowIndexer rowIndexer;

		[Token(Token = "0x1700008B")]
		public Mat Item
		{
			[Token(Token = "0x6000C18")]
			[Address(RVA = "0x305FE24", Offset = "0x305FE24", VA = "0x305FE24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x305FF64", Offset = "0x305FF64", VA = "0x305FF64")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public Mat Item
		{
			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0x30601CC", Offset = "0x30601CC", VA = "0x30601CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x30601EC", Offset = "0x30601EC", VA = "0x30601EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public Mat Item
		{
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0x306034C", Offset = "0x306034C", VA = "0x306034C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0x3060384", Offset = "0x3060384", VA = "0x3060384")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public Mat Item
		{
			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0x30604E0", Offset = "0x30604E0", VA = "0x30604E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0x306054C", Offset = "0x306054C", VA = "0x306054C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public MatExprIndexer Expr
		{
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0x3060660", Offset = "0x3060660", VA = "0x3060660")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		public ColExprIndexer ColExpr
		{
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0x30606E8", Offset = "0x30606E8", VA = "0x30606E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		public RowExprIndexer RowExpr
		{
			[Token(Token = "0x6000C22")]
			[Address(RVA = "0x3060770", Offset = "0x3060770", VA = "0x3060770")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000092")]
		public int Cols
		{
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0x3060E74", Offset = "0x3060E74", VA = "0x3060E74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000093")]
		public int Width
		{
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0x3060EE0", Offset = "0x3060EE0", VA = "0x3060EE0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000094")]
		public IntPtr Data
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0x3061458", Offset = "0x3061458", VA = "0x3061458")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000095")]
		public unsafe byte* DataPointer
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0x306145C", Offset = "0x306145C", VA = "0x306145C")]
			get
			{
				//IL_0002: Expected I, but got O
				return (byte*)unchecked((nint)null);
			}
		}

		[Token(Token = "0x17000096")]
		public IntPtr DataStart
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x30614D4", Offset = "0x30614D4", VA = "0x30614D4")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000097")]
		public IntPtr DataEnd
		{
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x306154C", Offset = "0x306154C", VA = "0x306154C")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000098")]
		public IntPtr DataLimit
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x30615C4", Offset = "0x30615C4", VA = "0x30615C4")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000099")]
		public int Rows
		{
			[Token(Token = "0x6000C49")]
			[Address(RVA = "0x3061E24", Offset = "0x3061E24", VA = "0x3061E24")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700009A")]
		public int Height
		{
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0x3061E90", Offset = "0x3061E90", VA = "0x3061E90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700009B")]
		public ColIndexer Col
		{
			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0x3063018", Offset = "0x3063018", VA = "0x3063018")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public RowIndexer Row
		{
			[Token(Token = "0x6000C70")]
			[Address(RVA = "0x3063164", Offset = "0x3063164", VA = "0x3063164")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x305205C", Offset = "0x305205C", VA = "0x305205C")]
		public Mat(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x305BDE0", Offset = "0x305BDE0", VA = "0x305BDE0")]
		public Mat()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x305BE58", Offset = "0x305BE58", VA = "0x305BE58")]
		public Mat(string fileName, ImreadModes flags = ImreadModes.Color)
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x305BF84", Offset = "0x305BF84", VA = "0x305BF84")]
		public Mat(int rows, int cols, MatType type)
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x305C044", Offset = "0x305C044", VA = "0x305C044")]
		public Mat(Size size, MatType type)
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x305C0FC", Offset = "0x305C0FC", VA = "0x305C0FC")]
		public Mat(int rows, int cols, MatType type, Scalar s)
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x305C1EC", Offset = "0x305C1EC", VA = "0x305C1EC")]
		public Mat(Size size, MatType type, Scalar s)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x305C2D4", Offset = "0x305C2D4", VA = "0x305C2D4")]
		public Mat(Mat m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x305C3E8", Offset = "0x305C3E8", VA = "0x305C3E8")]
		public Mat(Mat m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x305C484", Offset = "0x305C484", VA = "0x305C484")]
		public Mat(Mat m, Rect roi)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x305C530", Offset = "0x305C530", VA = "0x305C530")]
		public Mat(int rows, int cols, MatType type, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x305C61C", Offset = "0x305C61C", VA = "0x305C61C")]
		public Mat(int rows, int cols, MatType type, Array data, long step = 0L)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x305C738", Offset = "0x305C738", VA = "0x305C738")]
		public Mat(IEnumerable<int> sizes, MatType type, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x305C9B8", Offset = "0x305C9B8", VA = "0x305C9B8")]
		public Mat(IEnumerable<int> sizes, MatType type, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x305CC68", Offset = "0x305CC68", VA = "0x305CC68")]
		public Mat(IEnumerable<int> sizes, MatType type)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x305CD7C", Offset = "0x305CD7C", VA = "0x305CD7C")]
		public Mat(IEnumerable<int> sizes, MatType type, Scalar s)
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x305CEC0", Offset = "0x305CEC0", VA = "0x305CEC0")]
		public void Release()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x305CEC8", Offset = "0x305CEC8", VA = "0x305CEC8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x305CFCC", Offset = "0x305CFCC", VA = "0x305CFCC")]
		public static Mat FromStream(Stream stream, ImreadModes mode)
		{
			return null;
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x305D238", Offset = "0x305D238", VA = "0x305D238")]
		public static Mat ImDecode(byte[] imageBytes, ImreadModes mode = ImreadModes.Color)
		{
			return null;
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x305D1C4", Offset = "0x305D1C4", VA = "0x305D1C4")]
		public static Mat FromImageData(byte[] imageBytes, ImreadModes mode = ImreadModes.Color)
		{
			return null;
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x305D2D0", Offset = "0x305D2D0", VA = "0x305D2D0")]
		public static Mat Diag(Mat d)
		{
			return null;
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x305D39C", Offset = "0x305D39C", VA = "0x305D39C")]
		public static MatExpr Eye(Size size, MatType type)
		{
			return null;
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x305D418", Offset = "0x305D418", VA = "0x305D418")]
		public static MatExpr Eye(int rows, int cols, MatType type)
		{
			return null;
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x305D4E8", Offset = "0x305D4E8", VA = "0x305D4E8")]
		public static MatExpr Ones(int rows, int cols, MatType type)
		{
			return null;
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x305D5B8", Offset = "0x305D5B8", VA = "0x305D5B8")]
		public static MatExpr Ones(Size size, MatType type)
		{
			return null;
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x305D634", Offset = "0x305D634", VA = "0x305D634")]
		public static MatExpr Ones(MatType type, params int[] sizes)
		{
			return null;
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x305D740", Offset = "0x305D740", VA = "0x305D740")]
		public static MatExpr Zeros(int rows, int cols, MatType type)
		{
			return null;
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x305D810", Offset = "0x305D810", VA = "0x305D810")]
		public static MatExpr Zeros(Size size, MatType type)
		{
			return null;
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x305D88C", Offset = "0x305D88C", VA = "0x305D88C")]
		public static MatExpr Zeros(MatType type, params int[] sizes)
		{
			return null;
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x305D998", Offset = "0x305D998", VA = "0x305D998")]
		public static MatExpr operator -(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x305DA4C", Offset = "0x305DA4C", VA = "0x305DA4C")]
		public static Mat operator +(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x305DA50", Offset = "0x305DA50", VA = "0x305DA50")]
		public static MatExpr operator +(Mat a, Mat b)
		{
			return null;
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x305DB94", Offset = "0x305DB94", VA = "0x305DB94")]
		public static MatExpr operator +(Mat a, Scalar s)
		{
			return null;
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x305DCBC", Offset = "0x305DCBC", VA = "0x305DCBC")]
		public static MatExpr operator +(Scalar s, Mat a)
		{
			return null;
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x305DDE4", Offset = "0x305DDE4", VA = "0x305DDE4")]
		public static MatExpr operator -(Mat a, Mat b)
		{
			return null;
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x305DF28", Offset = "0x305DF28", VA = "0x305DF28")]
		public static MatExpr operator -(Mat a, Scalar s)
		{
			return null;
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x305E050", Offset = "0x305E050", VA = "0x305E050")]
		public static MatExpr operator -(Scalar s, Mat a)
		{
			return null;
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x305E178", Offset = "0x305E178", VA = "0x305E178")]
		public static MatExpr operator *(Mat a, Mat b)
		{
			return null;
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x305E2BC", Offset = "0x305E2BC", VA = "0x305E2BC")]
		public static MatExpr operator *(Mat a, double s)
		{
			return null;
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x305E3C4", Offset = "0x305E3C4", VA = "0x305E3C4")]
		public static MatExpr operator *(double s, Mat a)
		{
			return null;
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x305E4CC", Offset = "0x305E4CC", VA = "0x305E4CC")]
		public static MatExpr operator /(Mat a, Mat b)
		{
			return null;
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x305E610", Offset = "0x305E610", VA = "0x305E610")]
		public static MatExpr operator /(Mat a, double s)
		{
			return null;
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x305E718", Offset = "0x305E718", VA = "0x305E718")]
		public static MatExpr operator /(double s, Mat a)
		{
			return null;
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x305E820", Offset = "0x305E820", VA = "0x305E820")]
		public static MatExpr operator &(Mat a, Mat b)
		{
			return null;
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x305E964", Offset = "0x305E964", VA = "0x305E964")]
		public static MatExpr operator &(Mat a, double s)
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x305EA6C", Offset = "0x305EA6C", VA = "0x305EA6C")]
		public static MatExpr operator &(double s, Mat a)
		{
			return null;
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x305EB74", Offset = "0x305EB74", VA = "0x305EB74")]
		public static MatExpr operator |(Mat a, Mat b)
		{
			return null;
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x305ECB8", Offset = "0x305ECB8", VA = "0x305ECB8")]
		public static MatExpr operator |(Mat a, double s)
		{
			return null;
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x305EDC0", Offset = "0x305EDC0", VA = "0x305EDC0")]
		public static MatExpr operator |(double s, Mat a)
		{
			return null;
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x305EEC8", Offset = "0x305EEC8", VA = "0x305EEC8")]
		public static MatExpr operator ^(Mat a, Mat b)
		{
			return null;
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x305F00C", Offset = "0x305F00C", VA = "0x305F00C")]
		public static MatExpr operator ^(Mat a, double s)
		{
			return null;
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x305F114", Offset = "0x305F114", VA = "0x305F114")]
		public static MatExpr operator ^(double s, Mat a)
		{
			return null;
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x305F21C", Offset = "0x305F21C", VA = "0x305F21C")]
		public static MatExpr operator ~(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x305F314", Offset = "0x305F314", VA = "0x305F314")]
		public MatExpr LessThan(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x305F440", Offset = "0x305F440", VA = "0x305F440")]
		public MatExpr LessThan(double d)
		{
			return null;
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x305F4EC", Offset = "0x305F4EC", VA = "0x305F4EC")]
		public MatExpr LessThanOrEqual(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x305F618", Offset = "0x305F618", VA = "0x305F618")]
		public MatExpr LessThanOrEqual(double d)
		{
			return null;
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x305F6C4", Offset = "0x305F6C4", VA = "0x305F6C4")]
		public MatExpr Equals(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x305F7F0", Offset = "0x305F7F0", VA = "0x305F7F0")]
		public MatExpr Equals(double d)
		{
			return null;
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x305F89C", Offset = "0x305F89C", VA = "0x305F89C")]
		public MatExpr NotEquals(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x305F9C8", Offset = "0x305F9C8", VA = "0x305F9C8")]
		public MatExpr NotEquals(double d)
		{
			return null;
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x305FA74", Offset = "0x305FA74", VA = "0x305FA74")]
		public MatExpr GreaterThan(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x305FBA0", Offset = "0x305FBA0", VA = "0x305FBA0")]
		public MatExpr GreaterThan(double d)
		{
			return null;
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x305FC4C", Offset = "0x305FC4C", VA = "0x305FC4C")]
		public MatExpr GreaterThanOrEqual(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x305FD78", Offset = "0x305FD78", VA = "0x305FD78")]
		public MatExpr GreaterThanOrEqual(double d)
		{
			return null;
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x30607F8", Offset = "0x30607F8", VA = "0x30607F8")]
		public Mat AdjustROI(int dtop, int dbottom, int dleft, int dright)
		{
			return null;
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x30608CC", Offset = "0x30608CC", VA = "0x30608CC")]
		public void AssignTo(Mat m, MatType type)
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x30609D0", Offset = "0x30609D0", VA = "0x30609D0")]
		public void AssignTo(Mat m)
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x3060A68", Offset = "0x3060A68", VA = "0x3060A68")]
		public int Channels()
		{
			return default(int);
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x3060AE0", Offset = "0x3060AE0", VA = "0x3060AE0")]
		public int CheckVector(int elemChannels)
		{
			return default(int);
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x3060B68", Offset = "0x3060B68", VA = "0x3060B68")]
		public int CheckVector(int elemChannels, int depth)
		{
			return default(int);
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x3060BF8", Offset = "0x3060BF8", VA = "0x3060BF8")]
		public int CheckVector(int elemChannels, int depth, bool requireContinuous)
		{
			return default(int);
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x3060C9C", Offset = "0x3060C9C", VA = "0x3060C9C")]
		public Mat Clone()
		{
			return null;
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x3060D40", Offset = "0x3060D40", VA = "0x3060D40", Slot = "8")]
		private object System.ICloneable.Clone()
		{
			return null;
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x3060D44", Offset = "0x3060D44", VA = "0x3060D44")]
		public Mat Clone(Rect roi)
		{
			return null;
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x30600D4", Offset = "0x30600D4", VA = "0x30600D4")]
		public int Dims()
		{
			return default(int);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x3060F4C", Offset = "0x3060F4C", VA = "0x3060F4C")]
		public void ConvertTo(Mat m, MatType rtype, double alpha = 1.0, double beta = 0.0)
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x30601C4", Offset = "0x30601C4", VA = "0x30601C4")]
		public void CopyTo(Mat m)
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x3061068", Offset = "0x3061068", VA = "0x3061068")]
		public void CopyTo(Mat m, Mat mask)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x306115C", Offset = "0x306115C", VA = "0x306115C")]
		public void Create(int rows, int cols, MatType type)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x306121C", Offset = "0x306121C", VA = "0x306121C")]
		public void Create(Size size, MatType type)
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x3061230", Offset = "0x3061230", VA = "0x3061230")]
		public void Create(MatType type, params int[] sizes)
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x3061350", Offset = "0x3061350", VA = "0x3061350")]
		public Mat Cross(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x306163C", Offset = "0x306163C", VA = "0x306163C")]
		public int Depth()
		{
			return default(int);
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x305D2E8", Offset = "0x305D2E8", VA = "0x305D2E8")]
		public Mat Diag(MatDiagType d = MatDiagType.Main)
		{
			return null;
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x30616B4", Offset = "0x30616B4", VA = "0x30616B4")]
		public double Dot(Mat m)
		{
			return default(double);
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x3061790", Offset = "0x3061790", VA = "0x3061790")]
		public int ElemSize()
		{
			return default(int);
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x306180C", Offset = "0x306180C", VA = "0x306180C")]
		public int ElemSize1()
		{
			return default(int);
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x3061888", Offset = "0x3061888", VA = "0x3061888")]
		public bool Empty()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x306190C", Offset = "0x306190C", VA = "0x306190C")]
		public Mat Inv(DecompTypes method = DecompTypes.LU)
		{
			return null;
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x30619C0", Offset = "0x30619C0", VA = "0x30619C0")]
		public bool IsContinuous()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x3061A44", Offset = "0x3061A44", VA = "0x3061A44")]
		public bool IsSubmatrix()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x3061AC8", Offset = "0x3061AC8", VA = "0x3061AC8")]
		public void LocateROI(out Size wholeSize, out Point ofs)
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x3061B58", Offset = "0x3061B58", VA = "0x3061B58")]
		public MatExpr Mul(Mat m, double scale = 1.0)
		{
			return null;
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x3061C68", Offset = "0x3061C68", VA = "0x3061C68")]
		public Mat Reshape(int cn, int rows = 0)
		{
			return null;
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x3061D24", Offset = "0x3061D24", VA = "0x3061D24")]
		public Mat Reshape(int cn, params int[] newDims)
		{
			return null;
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x3061EFC", Offset = "0x3061EFC", VA = "0x3061EFC")]
		public Mat SetTo(Scalar value, [Optional] InputArray mask)
		{
			return null;
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x3061FF4", Offset = "0x3061FF4", VA = "0x3061FF4")]
		public Mat SetTo(InputArray value, [Optional] InputArray mask)
		{
			return null;
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x306014C", Offset = "0x306014C", VA = "0x306014C")]
		public Size Size()
		{
			return default(Size);
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x30605D8", Offset = "0x30605D8", VA = "0x30605D8")]
		public int Size(int dim)
		{
			return default(int);
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x3062120", Offset = "0x3062120", VA = "0x3062120")]
		public long Step()
		{
			return default(long);
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x3062198", Offset = "0x3062198", VA = "0x3062198")]
		public long Step(int i)
		{
			return default(long);
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x3062220", Offset = "0x3062220", VA = "0x3062220")]
		public long Step1()
		{
			return default(long);
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x3062298", Offset = "0x3062298", VA = "0x3062298")]
		public long Step1(int i)
		{
			return default(long);
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x3062320", Offset = "0x3062320", VA = "0x3062320")]
		public Mat T()
		{
			return null;
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x30623C4", Offset = "0x30623C4", VA = "0x30623C4")]
		public long Total()
		{
			return default(long);
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x306243C", Offset = "0x306243C", VA = "0x306243C")]
		public MatType Type()
		{
			return default(MatType);
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x30624F0", Offset = "0x30624F0", VA = "0x30624F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x3062A2C", Offset = "0x3062A2C", VA = "0x3062A2C")]
		public string Dump(DumpFormat format = DumpFormat.Default)
		{
			return null;
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x3062B70", Offset = "0x3062B70", VA = "0x3062B70")]
		private static string GetDumpFormatString(DumpFormat format)
		{
			return null;
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x3062C8C", Offset = "0x3062C8C", VA = "0x3062C8C")]
		public Mat EmptyClone()
		{
			return null;
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x3062D14", Offset = "0x3062D14", VA = "0x3062D14")]
		public IntPtr Ptr(int i0)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x3062D9C", Offset = "0x3062D9C", VA = "0x3062D9C")]
		public IntPtr Ptr(int i0, int i1)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x3062E2C", Offset = "0x3062E2C", VA = "0x3062E2C")]
		public IntPtr Ptr(int i0, int i1, int i2)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x3062ECC", Offset = "0x3062ECC", VA = "0x3062ECC")]
		public IntPtr Ptr(params int[] idx)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000C5E")]
		public Indexer<T> GetGenericIndexer<T>() where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000C5F")]
		public T Get<T>(int i0) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000C60")]
		public T Get<T>(int i0, int i1) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000C61")]
		public T Get<T>(int i0, int i1, int i2) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000C62")]
		public T Get<T>(params int[] idx) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000C63")]
		public T At<T>(int i0) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000C64")]
		public T At<T>(int i0, int i1) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000C65")]
		public T At<T>(int i0, int i1, int i2) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000C66")]
		public T At<T>(params int[] idx) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x6000C67")]
		public void Set<T>(int i0, T value) where T : struct
		{
		}

		[Token(Token = "0x6000C68")]
		public void Set<T>(int i0, int i1, T value) where T : struct
		{
		}

		[Token(Token = "0x6000C69")]
		public void Set<T>(int i0, int i1, int i2, T value) where T : struct
		{
		}

		[Token(Token = "0x6000C6A")]
		public void Set<T>(int[] idx, T value) where T : struct
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x3062F54", Offset = "0x3062F54", VA = "0x3062F54")]
		public Mat ColRange(int startCol, int endCol)
		{
			return null;
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x3063010", Offset = "0x3063010", VA = "0x3063010")]
		public Mat ColRange(Range range)
		{
			return null;
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x30630A0", Offset = "0x30630A0", VA = "0x30630A0")]
		public Mat RowRange(int startRow, int endRow)
		{
			return null;
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x306315C", Offset = "0x306315C", VA = "0x306315C")]
		public Mat RowRange(Range range)
		{
			return null;
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x305FE28", Offset = "0x305FE28", VA = "0x305FE28")]
		public Mat SubMat(int rowStart, int rowEnd, int colStart, int colEnd)
		{
			return null;
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x30601DC", Offset = "0x30601DC", VA = "0x30601DC")]
		public Mat SubMat(Range rowRange, Range colRange)
		{
			return null;
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x3060368", Offset = "0x3060368", VA = "0x3060368")]
		public Mat SubMat(Rect roi)
		{
			return null;
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x30604EC", Offset = "0x30604EC", VA = "0x30604EC")]
		public Mat SubMat(params Range[] ranges)
		{
			return null;
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x30631EC", Offset = "0x30631EC", VA = "0x30631EC")]
		private void CheckArgumentsForConvert(int row, int col, Array data, params MatType[] acceptableTypes)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x3063534", Offset = "0x3063534", VA = "0x3063534")]
		private void CheckArgumentsForConvert(int row, int col, Array data, int dataDimension, params MatType[] acceptableTypes)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x306388C", Offset = "0x306388C", VA = "0x306388C")]
		public void GetArray(int row, int col, byte[] data)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x30639AC", Offset = "0x30639AC", VA = "0x30639AC")]
		public void GetArray(int row, int col, byte[,] data)
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x3063AE0", Offset = "0x3063AE0", VA = "0x3063AE0")]
		public void GetArray(int row, int col, short[] data)
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x3063C00", Offset = "0x3063C00", VA = "0x3063C00")]
		public void GetArray(int row, int col, short[,] data)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x3063D34", Offset = "0x3063D34", VA = "0x3063D34")]
		public void GetArray(int row, int col, ushort[] data)
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x3063E54", Offset = "0x3063E54", VA = "0x3063E54")]
		public void GetArray(int row, int col, ushort[,] data)
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x3063F88", Offset = "0x3063F88", VA = "0x3063F88")]
		public void GetArray(int row, int col, int[] data)
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x30640CC", Offset = "0x30640CC", VA = "0x30640CC")]
		public void GetArray(int row, int col, int[,] data)
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x3064224", Offset = "0x3064224", VA = "0x3064224")]
		public void GetArray(int row, int col, float[] data)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x3064368", Offset = "0x3064368", VA = "0x3064368")]
		public void GetArray(int row, int col, float[,] data)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x30644C0", Offset = "0x30644C0", VA = "0x30644C0")]
		public void GetArray(int row, int col, double[] data)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x3064604", Offset = "0x3064604", VA = "0x3064604")]
		public void GetArray(int row, int col, double[,] data)
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x306475C", Offset = "0x306475C", VA = "0x306475C")]
		public double[] GetArray(int row, int col)
		{
			return null;
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x30648A8", Offset = "0x30648A8", VA = "0x30648A8")]
		public void GetArray(int row, int col, Vec3b[] data)
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x30649C4", Offset = "0x30649C4", VA = "0x30649C4")]
		public void GetArray(int row, int col, Vec3b[,] data)
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x3064AF4", Offset = "0x3064AF4", VA = "0x3064AF4")]
		public void GetArray(int row, int col, Vec3d[] data)
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x3064C10", Offset = "0x3064C10", VA = "0x3064C10")]
		public void GetArray(int row, int col, Vec3d[,] data)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x3064D40", Offset = "0x3064D40", VA = "0x3064D40")]
		public void GetArray(int row, int col, Vec4f[] data)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x3064E5C", Offset = "0x3064E5C", VA = "0x3064E5C")]
		public void GetArray(int row, int col, Vec4f[,] data)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x3064F8C", Offset = "0x3064F8C", VA = "0x3064F8C")]
		public void GetArray(int row, int col, Vec6f[] data)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x30650A8", Offset = "0x30650A8", VA = "0x30650A8")]
		public void GetArray(int row, int col, Vec6f[,] data)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x30651D8", Offset = "0x30651D8", VA = "0x30651D8")]
		public void GetArray(int row, int col, Vec4i[] data)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x30652F4", Offset = "0x30652F4", VA = "0x30652F4")]
		public void GetArray(int row, int col, Vec4i[,] data)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x3065424", Offset = "0x3065424", VA = "0x3065424")]
		public void GetArray(int row, int col, Point[] data)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x3065540", Offset = "0x3065540", VA = "0x3065540")]
		public void GetArray(int row, int col, Point[,] data)
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x3065670", Offset = "0x3065670", VA = "0x3065670")]
		public void GetArray(int row, int col, Point2f[] data)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x3065790", Offset = "0x3065790", VA = "0x3065790")]
		public void GetArray(int row, int col, Point2f[,] data)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x30658C4", Offset = "0x30658C4", VA = "0x30658C4")]
		public void GetArray(int row, int col, Point2d[] data)
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x30659E4", Offset = "0x30659E4", VA = "0x30659E4")]
		public void GetArray(int row, int col, Point2d[,] data)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x3065B18", Offset = "0x3065B18", VA = "0x3065B18")]
		public void GetArray(int row, int col, Point3i[] data)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x3065C38", Offset = "0x3065C38", VA = "0x3065C38")]
		public void GetArray(int row, int col, Point3i[,] data)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x3065D6C", Offset = "0x3065D6C", VA = "0x3065D6C")]
		public void GetArray(int row, int col, Point3f[] data)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x3065E8C", Offset = "0x3065E8C", VA = "0x3065E8C")]
		public void GetArray(int row, int col, Point3f[,] data)
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x3065FC0", Offset = "0x3065FC0", VA = "0x3065FC0")]
		public void GetArray(int row, int col, Point3d[] data)
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x30660E0", Offset = "0x30660E0", VA = "0x30660E0")]
		public void GetArray(int row, int col, Point3d[,] data)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x3066214", Offset = "0x3066214", VA = "0x3066214")]
		public void GetArray(int row, int col, Rect[] data)
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x3066334", Offset = "0x3066334", VA = "0x3066334")]
		public void GetArray(int row, int col, Rect[,] data)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x3066468", Offset = "0x3066468", VA = "0x3066468")]
		public void GetArray(int row, int col, DMatch[] data)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x306662C", Offset = "0x306662C", VA = "0x306662C")]
		public void GetArray(int row, int col, DMatch[,] data)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x3066878", Offset = "0x3066878", VA = "0x3066878")]
		public void SetArray(int row, int col, params byte[] data)
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x30669BC", Offset = "0x30669BC", VA = "0x30669BC")]
		public void SetArray(int row, int col, byte[,] data)
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x3066B14", Offset = "0x3066B14", VA = "0x3066B14")]
		public void SetArray(int row, int col, params short[] data)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x3066C34", Offset = "0x3066C34", VA = "0x3066C34")]
		public void SetArray(int row, int col, short[,] data)
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x3066D68", Offset = "0x3066D68", VA = "0x3066D68")]
		public void SetArray(int row, int col, params ushort[] data)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x3066E88", Offset = "0x3066E88", VA = "0x3066E88")]
		public void SetArray(int row, int col, ushort[,] data)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x3066FBC", Offset = "0x3066FBC", VA = "0x3066FBC")]
		public void SetArray(int row, int col, params int[] data)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x3067100", Offset = "0x3067100", VA = "0x3067100")]
		public void SetArray(int row, int col, int[,] data)
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x3067258", Offset = "0x3067258", VA = "0x3067258")]
		public void SetArray(int row, int col, params float[] data)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x306739C", Offset = "0x306739C", VA = "0x306739C")]
		public void SetArray(int row, int col, float[,] data)
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x30674F4", Offset = "0x30674F4", VA = "0x30674F4")]
		public void SetArray(int row, int col, params double[] data)
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x3067638", Offset = "0x3067638", VA = "0x3067638")]
		public void SetArray(int row, int col, double[,] data)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x3067790", Offset = "0x3067790", VA = "0x3067790")]
		public void SetArray(int row, int col, params Vec3b[] data)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x30678B0", Offset = "0x30678B0", VA = "0x30678B0")]
		public void SetArray(int row, int col, Vec3b[,] data)
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x30679E4", Offset = "0x30679E4", VA = "0x30679E4")]
		public void SetArray(int row, int col, params Vec3d[] data)
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x3067B04", Offset = "0x3067B04", VA = "0x3067B04")]
		public void SetArray(int row, int col, Vec3d[,] data)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x3067C38", Offset = "0x3067C38", VA = "0x3067C38")]
		public void SetArray(int row, int col, params Vec4f[] data)
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x3067D58", Offset = "0x3067D58", VA = "0x3067D58")]
		public void SetArray(int row, int col, Vec4f[,] data)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x3067E8C", Offset = "0x3067E8C", VA = "0x3067E8C")]
		public void SetArray(int row, int col, params Vec6f[] data)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x3067FAC", Offset = "0x3067FAC", VA = "0x3067FAC")]
		public void SetArray(int row, int col, Vec6f[,] data)
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x30680E0", Offset = "0x30680E0", VA = "0x30680E0")]
		public void SetArray(int row, int col, params Vec4i[] data)
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x3068200", Offset = "0x3068200", VA = "0x3068200")]
		public void SetArray(int row, int col, Vec4i[,] data)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x3068334", Offset = "0x3068334", VA = "0x3068334")]
		public void SetArray(int row, int col, params Point[] data)
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x3068454", Offset = "0x3068454", VA = "0x3068454")]
		public void SetArray(int row, int col, Point[,] data)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x3068588", Offset = "0x3068588", VA = "0x3068588")]
		public void SetArray(int row, int col, params Point2f[] data)
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x30686A8", Offset = "0x30686A8", VA = "0x30686A8")]
		public void SetArray(int row, int col, Point2f[,] data)
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x30687DC", Offset = "0x30687DC", VA = "0x30687DC")]
		public void SetArray(int row, int col, params Point2d[] data)
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x30688FC", Offset = "0x30688FC", VA = "0x30688FC")]
		public void SetArray(int row, int col, Point2d[,] data)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x3068A2C", Offset = "0x3068A2C", VA = "0x3068A2C")]
		public void SetArray(int row, int col, params Point3i[] data)
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x3068B4C", Offset = "0x3068B4C", VA = "0x3068B4C")]
		public void SetArray(int row, int col, Point3i[,] data)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x3068C80", Offset = "0x3068C80", VA = "0x3068C80")]
		public void SetArray(int row, int col, params Point3f[] data)
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x3068DA0", Offset = "0x3068DA0", VA = "0x3068DA0")]
		public void SetArray(int row, int col, Point3f[,] data)
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x3068ED4", Offset = "0x3068ED4", VA = "0x3068ED4")]
		public void SetArray(int row, int col, params Point3d[] data)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x3068FF4", Offset = "0x3068FF4", VA = "0x3068FF4")]
		public void SetArray(int row, int col, Point3d[,] data)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x3069128", Offset = "0x3069128", VA = "0x3069128")]
		public void SetArray(int row, int col, params Rect[] data)
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x3069248", Offset = "0x3069248", VA = "0x3069248")]
		public void SetArray(int row, int col, Rect[,] data)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x306937C", Offset = "0x306937C", VA = "0x306937C")]
		public void SetArray(int row, int col, params DMatch[] data)
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x3069578", Offset = "0x3069578", VA = "0x3069578")]
		public void SetArray(int row, int col, DMatch[,] data)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x3069774", Offset = "0x3069774", VA = "0x3069774")]
		public void Reserve(long sz)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x3069814", Offset = "0x3069814", VA = "0x3069814")]
		public void Resize(long sz)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x30698B4", Offset = "0x30698B4", VA = "0x30698B4")]
		public void Resize(long sz, Scalar s)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x3069984", Offset = "0x3069984", VA = "0x3069984")]
		public void Add(Mat m)
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x3069A60", Offset = "0x3069A60", VA = "0x3069A60")]
		public void PushBack(Mat m)
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x3069A64", Offset = "0x3069A64", VA = "0x3069A64")]
		public void PopBack(long nElems = 1L)
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x3069B04", Offset = "0x3069B04", VA = "0x3069B04")]
		public byte[] ToBytes(string ext = ".png", [Optional] int[] prms)
		{
			return null;
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x3069B9C", Offset = "0x3069B9C", VA = "0x3069B9C")]
		public byte[] ToBytes(string ext = ".png", params ImageEncodingParam[] prms)
		{
			return null;
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x3069C34", Offset = "0x3069C34", VA = "0x3069C34")]
		public MemoryStream ToMemoryStream(string ext = ".png", params ImageEncodingParam[] prms)
		{
			return null;
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x3069CD8", Offset = "0x3069CD8", VA = "0x3069CD8")]
		public void WriteToStream(Stream stream, string ext = ".png", params ImageEncodingParam[] prms)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x3069DC0", Offset = "0x3069DC0", VA = "0x3069DC0")]
		public void DrawMarker(int x, int y, Scalar color, MarkerStyle style = MarkerStyle.Cross, int size = 10, LineTypes lineType = LineTypes.Link8, int thickness = 1)
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x306A504", Offset = "0x306A504", VA = "0x306A504")]
		public Mat Alignment(int n = 4)
		{
			return null;
		}

		[Token(Token = "0x6000CD0")]
		public TMat Cast<TMat>() where TMat : Mat, new()
		{
			return null;
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x306A618", Offset = "0x306A618", VA = "0x306A618")]
		public void ForEachAsByte(MatForeachFunctionByte operation)
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x306A768", Offset = "0x306A768", VA = "0x306A768")]
		public void ForEachAsVec2b(MatForeachFunctionVec2b operation)
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x306A8B8", Offset = "0x306A8B8", VA = "0x306A8B8")]
		public void ForEachAsVec3b(MatForeachFunctionVec3b operation)
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x306AA08", Offset = "0x306AA08", VA = "0x306AA08")]
		public void ForEachAsVec4b(MatForeachFunctionVec4b operation)
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x306AB58", Offset = "0x306AB58", VA = "0x306AB58")]
		public void ForEachAsVec6b(MatForeachFunctionVec6b operation)
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x306ACA8", Offset = "0x306ACA8", VA = "0x306ACA8")]
		public void ForEachAsInt16(MatForeachFunctionInt16 operation)
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x306ADF8", Offset = "0x306ADF8", VA = "0x306ADF8")]
		public void ForEachAsVec2s(MatForeachFunctionVec2s operation)
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x306AF48", Offset = "0x306AF48", VA = "0x306AF48")]
		public void ForEachAsVec3s(MatForeachFunctionVec3s operation)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x306B098", Offset = "0x306B098", VA = "0x306B098")]
		public void ForEachAsVec4s(MatForeachFunctionVec4s operation)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x306B1E8", Offset = "0x306B1E8", VA = "0x306B1E8")]
		public void ForEachAsVec6s(MatForeachFunctionVec6s operation)
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x306B338", Offset = "0x306B338", VA = "0x306B338")]
		public void ForEachAsInt32(MatForeachFunctionInt32 operation)
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x306B488", Offset = "0x306B488", VA = "0x306B488")]
		public void ForEachAsVec2i(MatForeachFunctionVec2i operation)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x306B5D8", Offset = "0x306B5D8", VA = "0x306B5D8")]
		public void ForEachAsVec3i(MatForeachFunctionVec3i operation)
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x306B728", Offset = "0x306B728", VA = "0x306B728")]
		public void ForEachAsVec4i(MatForeachFunctionVec4i operation)
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x306B878", Offset = "0x306B878", VA = "0x306B878")]
		public void ForEachAsVec6i(MatForeachFunctionVec6i operation)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x306B9C8", Offset = "0x306B9C8", VA = "0x306B9C8")]
		public void ForEachAsFloat(MatForeachFunctionFloat operation)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x306BB18", Offset = "0x306BB18", VA = "0x306BB18")]
		public void ForEachAsVec2f(MatForeachFunctionVec2f operation)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x306BC68", Offset = "0x306BC68", VA = "0x306BC68")]
		public void ForEachAsVec3f(MatForeachFunctionVec3f operation)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x306BDB8", Offset = "0x306BDB8", VA = "0x306BDB8")]
		public void ForEachAsVec4f(MatForeachFunctionVec4f operation)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x306BF08", Offset = "0x306BF08", VA = "0x306BF08")]
		public void ForEachAsVec6f(MatForeachFunctionVec6f operation)
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x306C058", Offset = "0x306C058", VA = "0x306C058")]
		public void ForEachAsDouble(MatForeachFunctionDouble operation)
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x306C1A8", Offset = "0x306C1A8", VA = "0x306C1A8")]
		public void ForEachAsVec2d(MatForeachFunctionVec2d operation)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x306C2F8", Offset = "0x306C2F8", VA = "0x306C2F8")]
		public void ForEachAsVec3d(MatForeachFunctionVec3d operation)
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x306C448", Offset = "0x306C448", VA = "0x306C448")]
		public void ForEachAsVec4d(MatForeachFunctionVec4d operation)
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x306C598", Offset = "0x306C598", VA = "0x306C598")]
		public void ForEachAsVec6d(MatForeachFunctionVec6d operation)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x306C6E8", Offset = "0x306C6E8", VA = "0x306C6E8")]
		public MatExpr Abs()
		{
			return null;
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x306C6F0", Offset = "0x306C6F0", VA = "0x306C6F0")]
		public Mat ConvertScaleAbs(double alpha = 1.0, double beta = 0.0)
		{
			return null;
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x306C78C", Offset = "0x306C78C", VA = "0x306C78C")]
		public Mat LUT(InputArray lut, int interpolation = 0)
		{
			return null;
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x306C828", Offset = "0x306C828", VA = "0x306C828")]
		public Mat LUT(byte[] lut, int interpolation = 0)
		{
			return null;
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x306C8C4", Offset = "0x306C8C4", VA = "0x306C8C4")]
		public Scalar Sum()
		{
			return default(Scalar);
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x306C8DC", Offset = "0x306C8DC", VA = "0x306C8DC")]
		public int CountNonZero()
		{
			return default(int);
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x306C8F4", Offset = "0x306C8F4", VA = "0x306C8F4")]
		public Mat FindNonZero()
		{
			return null;
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x306C978", Offset = "0x306C978", VA = "0x306C978")]
		public Scalar Mean([Optional] InputArray mask)
		{
			return default(Scalar);
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x306C9A0", Offset = "0x306C9A0", VA = "0x306C9A0")]
		public void MeanStdDev(OutputArray mean, OutputArray stddev, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x306C9E0", Offset = "0x306C9E0", VA = "0x306C9E0")]
		public double Norm(NormTypes normType = NormTypes.L2, [Optional] InputArray mask)
		{
			return default(double);
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x306CA10", Offset = "0x306CA10", VA = "0x306CA10")]
		public Mat Normalize(double alpha = 1.0, double beta = 0.0, NormTypes normType = NormTypes.L2, int dtype = -1, [Optional] InputArray mask)
		{
			return null;
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x306CAD0", Offset = "0x306CAD0", VA = "0x306CAD0")]
		public Mat Rotate(RotateFlags flags)
		{
			return null;
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x306CB64", Offset = "0x306CB64", VA = "0x306CB64")]
		public void MinMaxLoc(out double minVal, out double maxVal)
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x306CB94", Offset = "0x306CB94", VA = "0x306CB94")]
		public void MinMaxLoc(out Point minLoc, out Point maxLoc)
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x306CBC4", Offset = "0x306CBC4", VA = "0x306CBC4")]
		public void MinMaxLoc(out double minVal, out double maxVal, out Point minLoc, out Point maxLoc, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x306CC1C", Offset = "0x306CC1C", VA = "0x306CC1C")]
		public void MinMaxIdx(out double minVal, out double maxVal)
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x306CC4C", Offset = "0x306CC4C", VA = "0x306CC4C")]
		public void MinMaxIdx(out int minIdx, out int maxIdx)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x306CC7C", Offset = "0x306CC7C", VA = "0x306CC7C")]
		public void MinMaxIdx(out double minVal, out double maxVal, out int minIdx, out int maxIdx, [Optional] InputArray mask)
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x306CCD4", Offset = "0x306CCD4", VA = "0x306CCD4")]
		public Mat Reduce(ReduceDimension dim, ReduceTypes rtype, int dtype)
		{
			return null;
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x306CD80", Offset = "0x306CD80", VA = "0x306CD80")]
		public Mat[] Split()
		{
			return null;
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x306CD88", Offset = "0x306CD88", VA = "0x306CD88")]
		public Mat ExtractChannel(int coi)
		{
			return null;
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x306CE1C", Offset = "0x306CE1C", VA = "0x306CE1C")]
		public void InsertChannel(InputOutputArray dst, int coi)
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x306CE4C", Offset = "0x306CE4C", VA = "0x306CE4C")]
		public Mat Flip(FlipMode flipCode)
		{
			return null;
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x306CEE0", Offset = "0x306CEE0", VA = "0x306CEE0")]
		public Mat Repeat(int ny, int nx)
		{
			return null;
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x306CF7C", Offset = "0x306CF7C", VA = "0x306CF7C")]
		public Mat InRange(InputArray lowerb, InputArray upperb)
		{
			return null;
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x306D018", Offset = "0x306D018", VA = "0x306D018")]
		public Mat InRange(Scalar lowerb, Scalar upperb)
		{
			return null;
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x306D0FC", Offset = "0x306D0FC", VA = "0x306D0FC")]
		public Mat Sqrt()
		{
			return null;
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x306D180", Offset = "0x306D180", VA = "0x306D180")]
		public Mat Pow(double power)
		{
			return null;
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x306D214", Offset = "0x306D214", VA = "0x306D214")]
		public Mat Exp()
		{
			return null;
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x306D298", Offset = "0x306D298", VA = "0x306D298")]
		public Mat Log()
		{
			return null;
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x306D31C", Offset = "0x306D31C", VA = "0x306D31C")]
		public bool CheckRange(bool quiet = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x306D344", Offset = "0x306D344", VA = "0x306D344")]
		public bool CheckRange(bool quiet, out Point pos, double minVal = double.MinValue, double maxVal = double.MaxValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x306D38C", Offset = "0x306D38C", VA = "0x306D38C")]
		public void PatchNaNs(double val = 0.0)
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x306D3B4", Offset = "0x306D3B4", VA = "0x306D3B4")]
		public Mat MulTransposed(bool aTa, [Optional] InputArray delta, double scale = 1.0, int dtype = -1)
		{
			return null;
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x306D470", Offset = "0x306D470", VA = "0x306D470")]
		public Mat Transpose()
		{
			return null;
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x306D4F4", Offset = "0x306D4F4", VA = "0x306D4F4")]
		public Mat Transform(InputArray m)
		{
			return null;
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x306D588", Offset = "0x306D588", VA = "0x306D588")]
		public Mat PerspectiveTransform(InputArray m)
		{
			return null;
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x306D61C", Offset = "0x306D61C", VA = "0x306D61C")]
		public void CompleteSymm(bool lowerToUpper = false)
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x306D644", Offset = "0x306D644", VA = "0x306D644")]
		public void SetIdentity([Optional] Scalar? s)
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x306D688", Offset = "0x306D688", VA = "0x306D688")]
		public double Determinant()
		{
			return default(double);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x306D6A0", Offset = "0x306D6A0", VA = "0x306D6A0")]
		public Scalar Trace()
		{
			return default(Scalar);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x306D6B8", Offset = "0x306D6B8", VA = "0x306D6B8")]
		public Mat Sort(SortFlags flags)
		{
			return null;
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x306D74C", Offset = "0x306D74C", VA = "0x306D74C")]
		public Mat SortIdx(SortFlags flags)
		{
			return null;
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x306D7E0", Offset = "0x306D7E0", VA = "0x306D7E0")]
		public Mat Dft(DftFlags flags = DftFlags.None, int nonzeroRows = 0)
		{
			return null;
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x306D87C", Offset = "0x306D87C", VA = "0x306D87C")]
		public Mat Idft(DftFlags flags = DftFlags.None, int nonzeroRows = 0)
		{
			return null;
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x306D918", Offset = "0x306D918", VA = "0x306D918")]
		public Mat Dct(DctFlags flags = DctFlags.None)
		{
			return null;
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x306D9AC", Offset = "0x306D9AC", VA = "0x306D9AC")]
		public Mat Idct(DctFlags flags = DctFlags.None)
		{
			return null;
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x306DA40", Offset = "0x306DA40", VA = "0x306DA40")]
		public void Randu(InputArray low, InputArray high)
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x306DA70", Offset = "0x306DA70", VA = "0x306DA70")]
		public void Randu(Scalar low, Scalar high)
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x306DAE8", Offset = "0x306DAE8", VA = "0x306DAE8")]
		public void Randn(InputArray mean, InputArray stddev)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x306DB18", Offset = "0x306DB18", VA = "0x306DB18")]
		public void Randn(Scalar mean, Scalar stddev)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x306DB90", Offset = "0x306DB90", VA = "0x306DB90")]
		public void RandShuffle(double iterFactor, [Optional] RNG rng)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x306A450", Offset = "0x306A450", VA = "0x306A450")]
		public void Line(int pt1X, int pt1Y, int pt2X, int pt2Y, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x306DBC8", Offset = "0x306DBC8", VA = "0x306DBC8")]
		public void Line(Point pt1, Point pt2, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x306DC50", Offset = "0x306DC50", VA = "0x306DC50")]
		public void Rectangle(Point pt1, Point pt2, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x306DC58", Offset = "0x306DC58", VA = "0x306DC58")]
		public void Rectangle(Rect rect, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x306A3C0", Offset = "0x306A3C0", VA = "0x306A3C0")]
		public void Circle(int centerX, int centerY, int radius, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x306DC60", Offset = "0x306DC60", VA = "0x306DC60")]
		public void Circle(Point center, int radius, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x306DCE8", Offset = "0x306DCE8", VA = "0x306DCE8")]
		public void Ellipse(Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x306DD98", Offset = "0x306DD98", VA = "0x306DD98")]
		public void Ellipse(RotatedRect box, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8)
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x306A4FC", Offset = "0x306A4FC", VA = "0x306A4FC")]
		public void FillConvexPoly(IEnumerable<Point> pts, Scalar color, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x306DE24", Offset = "0x306DE24", VA = "0x306DE24")]
		public void FillPoly(IEnumerable<IEnumerable<Point>> pts, Scalar color, LineTypes lineType = LineTypes.Link8, int shift = 0, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x306A4F0", Offset = "0x306A4F0", VA = "0x306A4F0")]
		public void Polylines(IEnumerable<IEnumerable<Point>> pts, bool isClosed, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, int shift = 0)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x306DE30", Offset = "0x306DE30", VA = "0x306DE30")]
		public void PutText(string text, Point org, HersheyFonts fontFace, double fontScale, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, bool bottomLeftOrigin = false)
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x3069B50", Offset = "0x3069B50", VA = "0x3069B50")]
		public byte[] ImEncode(string ext = ".png", [Optional] int[] prms)
		{
			return null;
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x3069BE8", Offset = "0x3069BE8", VA = "0x3069BE8")]
		public byte[] ImEncode(string ext = ".png", params ImageEncodingParam[] prms)
		{
			return null;
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x306DED0", Offset = "0x306DED0", VA = "0x306DED0")]
		public bool ImWrite(string fileName, [Optional] int[] prms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x306DEE4", Offset = "0x306DEE4", VA = "0x306DEE4")]
		public bool ImWrite(string fileName, params ImageEncodingParam[] prms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x306DEF8", Offset = "0x306DEF8", VA = "0x306DEF8")]
		public bool SaveImage(string fileName, [Optional] int[] prms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x306DF0C", Offset = "0x306DF0C", VA = "0x306DF0C")]
		public bool SaveImage(string fileName, params ImageEncodingParam[] prms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x306DF20", Offset = "0x306DF20", VA = "0x306DF20")]
		public Mat CopyMakeBorder(int top, int bottom, int left, int right, BorderTypes borderType, [Optional] Scalar? value)
		{
			return null;
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x306E004", Offset = "0x306E004", VA = "0x306E004")]
		public Mat MedianBlur(int ksize)
		{
			return null;
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x306E098", Offset = "0x306E098", VA = "0x306E098")]
		public Mat GaussianBlur(Size ksize, double sigmaX, double sigmaY = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x306E14C", Offset = "0x306E14C", VA = "0x306E14C")]
		public Mat BilateralFilter(int d, double sigmaColor, double sigmaSpace, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x306E200", Offset = "0x306E200", VA = "0x306E200")]
		public Mat BoxFilter(MatType ddepth, Size ksize, [Optional] Point? anchor, bool normalize = true, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x306E2D4", Offset = "0x306E2D4", VA = "0x306E2D4")]
		public Mat Blur(Size ksize, [Optional] Point? anchor, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x306E388", Offset = "0x306E388", VA = "0x306E388")]
		public Mat Filter2D(MatType ddepth, InputArray kernel, [Optional] Point? anchor, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x306E45C", Offset = "0x306E45C", VA = "0x306E45C")]
		public Mat SepFilter2D(MatType ddepth, InputArray kernelX, InputArray kernelY, [Optional] Point? anchor, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x306E540", Offset = "0x306E540", VA = "0x306E540")]
		public Mat Sobel(MatType ddepth, int xorder, int yorder, int ksize = 3, double scale = 1.0, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x306E61C", Offset = "0x306E61C", VA = "0x306E61C")]
		public Mat Scharr(MatType ddepth, int xorder, int yorder, double scale = 1.0, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x306E6E8", Offset = "0x306E6E8", VA = "0x306E6E8")]
		public Mat Laplacian(MatType ddepth, int ksize = 1, double scale = 1.0, double delta = 0.0, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x306E7AC", Offset = "0x306E7AC", VA = "0x306E7AC")]
		public Mat Canny(double threshold1, double threshold2, int apertureSize = 3, bool L2gradient = false)
		{
			return null;
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x306E860", Offset = "0x306E860", VA = "0x306E860")]
		public Mat CornerEigenValsAndVecs(int blockSize, int ksize, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x306E90C", Offset = "0x306E90C", VA = "0x306E90C")]
		public Mat PreCornerDetect(int ksize, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x306E9A8", Offset = "0x306E9A8", VA = "0x306E9A8")]
		public Point2f[] CornerSubPix(IEnumerable<Point2f> inputCorners, Size winSize, Size zeroZone, TermCriteria criteria)
		{
			return null;
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x306EA00", Offset = "0x306EA00", VA = "0x306EA00")]
		public Point2f[] GoodFeaturesToTrack(int maxCorners, double qualityLevel, double minDistance, InputArray mask, int blockSize, bool useHarrisDetector, double k)
		{
			return null;
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x306EA70", Offset = "0x306EA70", VA = "0x306EA70")]
		public LineSegmentPolar[] HoughLines(double rho, double theta, int threshold, double srn = 0.0, double stn = 0.0)
		{
			return null;
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x306EAC8", Offset = "0x306EAC8", VA = "0x306EAC8")]
		public LineSegmentPoint[] HoughLinesP(double rho, double theta, int threshold, double minLineLength = 0.0, double maxLineGap = 0.0)
		{
			return null;
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x306EB20", Offset = "0x306EB20", VA = "0x306EB20")]
		public CircleSegment[] HoughCircles(HoughMethods method, double dp, double minDist, double param1 = 100.0, double param2 = 100.0, int minRadius = 0, int maxRadius = 0)
		{
			return null;
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x306EB90", Offset = "0x306EB90", VA = "0x306EB90")]
		public Mat Dilate(InputArray element, [Optional] Point? anchor, int iterations = 1, BorderTypes borderType = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
			return null;
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x306EC74", Offset = "0x306EC74", VA = "0x306EC74")]
		public Mat Erode(InputArray element, [Optional] Point? anchor, int iterations = 1, BorderTypes borderType = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
			return null;
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x306ED58", Offset = "0x306ED58", VA = "0x306ED58")]
		public Mat MorphologyEx(MorphTypes op, InputArray element, [Optional] Point? anchor, int iterations = 1, BorderTypes borderType = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
			return null;
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x306EE4C", Offset = "0x306EE4C", VA = "0x306EE4C")]
		public Mat Resize(Size dsize, double fx = 0.0, double fy = 0.0, InterpolationFlags interpolation = InterpolationFlags.Linear)
		{
			return null;
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x306EF00", Offset = "0x306EF00", VA = "0x306EF00")]
		public Mat WarpAffine(InputArray m, Size dsize, InterpolationFlags flags = InterpolationFlags.Linear, BorderTypes borderMode = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
			return null;
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x306EFDC", Offset = "0x306EFDC", VA = "0x306EFDC")]
		public Mat WarpPerspective(Mat m, Size dsize, InterpolationFlags flags = InterpolationFlags.Linear, BorderTypes borderMode = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
			return null;
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x306F0C4", Offset = "0x306F0C4", VA = "0x306F0C4")]
		public Mat Remap(InputArray map1, InputArray map2, InterpolationFlags interpolation = InterpolationFlags.Linear, BorderTypes borderMode = BorderTypes.Constant, [Optional] Scalar? borderValue)
		{
			return null;
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x306F1A0", Offset = "0x306F1A0", VA = "0x306F1A0")]
		public Mat InvertAffineTransform()
		{
			return null;
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x306F224", Offset = "0x306F224", VA = "0x306F224")]
		public Mat GetRectSubPix(Size patchSize, Point2f center, int patchType = -1)
		{
			return null;
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x306F2D8", Offset = "0x306F2D8", VA = "0x306F2D8")]
		public Mat Accumulate(InputArray mask)
		{
			return null;
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x306F368", Offset = "0x306F368", VA = "0x306F368")]
		public Mat AccumulateSquare(InputArray mask)
		{
			return null;
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x306F3F8", Offset = "0x306F3F8", VA = "0x306F3F8")]
		public void CreateHanningWindow(Size winSize, MatType type)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x306F428", Offset = "0x306F428", VA = "0x306F428")]
		public Mat Threshold(double thresh, double maxval, ThresholdTypes type)
		{
			return null;
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x306F4D4", Offset = "0x306F4D4", VA = "0x306F4D4")]
		public Mat AdaptiveThreshold(double maxValue, AdaptiveThresholdTypes adaptiveMethod, ThresholdTypes thresholdType, int blockSize, double c)
		{
			return null;
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x306F598", Offset = "0x306F598", VA = "0x306F598")]
		public Mat PyrDown([Optional] Size? dstSize, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x306F644", Offset = "0x306F644", VA = "0x306F644")]
		public Mat PyrUp([Optional] Size? dstSize, BorderTypes borderType = BorderTypes.Reflect101)
		{
			return null;
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x306F6F0", Offset = "0x306F6F0", VA = "0x306F6F0")]
		public Mat Undistort(InputArray cameraMatrix, InputArray distCoeffs, [Optional] InputArray newCameraMatrix)
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x306F79C", Offset = "0x306F79C", VA = "0x306F79C")]
		public Mat GetDefaultNewCameraMatrix([Optional] Size? imgSize, bool centerPrincipalPoint = false)
		{
			return null;
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x306F7DC", Offset = "0x306F7DC", VA = "0x306F7DC")]
		public Mat UndistortPoints(InputArray cameraMatrix, InputArray distCoeffs, [Optional] InputArray r, [Optional] InputArray p)
		{
			return null;
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x306F890", Offset = "0x306F890", VA = "0x306F890")]
		public Mat EqualizeHist()
		{
			return null;
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x306F914", Offset = "0x306F914", VA = "0x306F914")]
		public void Watershed(InputOutputArray markers)
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x306F93C", Offset = "0x306F93C", VA = "0x306F93C")]
		public Mat PyrMeanShiftFiltering(double sp, double sr, int maxLevel = 1, [Optional] TermCriteria? termcrit)
		{
			return null;
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x306FA08", Offset = "0x306FA08", VA = "0x306FA08")]
		public void GrabCut(InputOutputArray mask, Rect rect, InputOutputArray bgdModel, InputOutputArray fgdModel, int iterCount, GrabCutModes mode)
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x306FA78", Offset = "0x306FA78", VA = "0x306FA78")]
		public int FloodFill(Point seedPoint, Scalar newVal)
		{
			return default(int);
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x306FAD0", Offset = "0x306FAD0", VA = "0x306FAD0")]
		public int FloodFill(Point seedPoint, Scalar newVal, out Rect rect, [Optional] Scalar? loDiff, [Optional] Scalar? upDiff, FloodFillFlags flags = FloodFillFlags.Link4)
		{
			return default(int);
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x306FB84", Offset = "0x306FB84", VA = "0x306FB84")]
		public int FloodFill(InputOutputArray mask, Point seedPoint, Scalar newVal)
		{
			return default(int);
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x306FBE4", Offset = "0x306FBE4", VA = "0x306FBE4")]
		public int FloodFill(InputOutputArray mask, Point seedPoint, Scalar newVal, out Rect rect, [Optional] Scalar? loDiff, [Optional] Scalar? upDiff, FloodFillFlags flags = FloodFillFlags.Link4)
		{
			return default(int);
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x306FCA0", Offset = "0x306FCA0", VA = "0x306FCA0")]
		public Mat CvtColor(ColorConversionCodes code, int dstCn = 0)
		{
			return null;
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x306FD3C", Offset = "0x306FD3C", VA = "0x306FD3C")]
		public Moments Moments(bool binaryImage = false)
		{
			return null;
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x306FDC0", Offset = "0x306FDC0", VA = "0x306FDC0")]
		public Mat MatchTemplate(InputArray templ, TemplateMatchModes method)
		{
			return null;
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x306FE60", Offset = "0x306FE60", VA = "0x306FE60")]
		public int ConnectedComponents(OutputArray labels, PixelConnectivity connectivity = PixelConnectivity.Connectivity8)
		{
			return default(int);
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x306FEF8", Offset = "0x306FEF8", VA = "0x306FEF8")]
		public int ConnectedComponents(OutputArray labels, PixelConnectivity connectivity, MatType ltype)
		{
			return default(int);
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x306FF38", Offset = "0x306FF38", VA = "0x306FF38")]
		public int ConnectedComponents(out int[,] labels, PixelConnectivity connectivity)
		{
			return default(int);
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x306FF68", Offset = "0x306FF68", VA = "0x306FF68")]
		public int ConnectedComponentsWithStats(OutputArray labels, OutputArray stats, OutputArray centroids, PixelConnectivity connectivity = PixelConnectivity.Connectivity8)
		{
			return default(int);
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x3070018", Offset = "0x3070018", VA = "0x3070018")]
		public int ConnectedComponentsWithStats(OutputArray labels, OutputArray stats, OutputArray centroids, PixelConnectivity connectivity, MatType ltype)
		{
			return default(int);
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x3070070", Offset = "0x3070070", VA = "0x3070070")]
		public ConnectedComponents ConnectedComponentsEx(PixelConnectivity connectivity = PixelConnectivity.Connectivity8)
		{
			return null;
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x3070098", Offset = "0x3070098", VA = "0x3070098")]
		public void FindContours(out Point[][] contours, out HierarchyIndex[] hierarchy, RetrievalModes mode, ContourApproximationModes method, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x30700F8", Offset = "0x30700F8", VA = "0x30700F8")]
		public void FindContours(out Mat[] contours, OutputArray hierarchy, RetrievalModes mode, ContourApproximationModes method, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x3070158", Offset = "0x3070158", VA = "0x3070158")]
		public Point[][] FindContoursAsArray(RetrievalModes mode, ContourApproximationModes method, [Optional] Point? offset)
		{
			return null;
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x30701A0", Offset = "0x30701A0", VA = "0x30701A0")]
		public MatOfPoint[] FindContoursAsMat(RetrievalModes mode, ContourApproximationModes method, [Optional] Point? offset)
		{
			return null;
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x30701E8", Offset = "0x30701E8", VA = "0x30701E8")]
		public void DrawContours(IEnumerable<IEnumerable<Point>> contours, int contourIdx, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, [Optional] IEnumerable<HierarchyIndex> hierarchy, int maxLevel = int.MaxValue, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x307028C", Offset = "0x307028C", VA = "0x307028C")]
		public void DrawContours(InputOutputArray image, IEnumerable<Mat> contours, int contourIdx, Scalar color, int thickness = 1, LineTypes lineType = LineTypes.Link8, [Optional] Mat hierarchy, int maxLevel = int.MaxValue, [Optional] Point? offset)
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x30702BC", Offset = "0x30702BC", VA = "0x30702BC")]
		public Mat ApproxPolyDP(double epsilon, bool closed)
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x3070360", Offset = "0x3070360", VA = "0x3070360")]
		public double ArcLength(bool closed)
		{
			return default(double);
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x3070388", Offset = "0x3070388", VA = "0x3070388")]
		public Rect BoundingRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x30703A0", Offset = "0x30703A0", VA = "0x30703A0")]
		public double ContourArea(bool oriented = false)
		{
			return default(double);
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x30703C8", Offset = "0x30703C8", VA = "0x30703C8")]
		public RotatedRect MinAreaRect()
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x30703F0", Offset = "0x30703F0", VA = "0x30703F0")]
		public void MinEnclosingCircle(out Point2f center, out float radius)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x3070420", Offset = "0x3070420", VA = "0x3070420")]
		public Mat ConvexHull(InputArray points, bool clockwise = false, bool returnPoints = true)
		{
			return null;
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x30704B0", Offset = "0x30704B0", VA = "0x30704B0")]
		public Point[] ConvexHullPoints(InputArray points, bool clockwise = false)
		{
			return null;
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x3070554", Offset = "0x3070554", VA = "0x3070554")]
		public Point2f[] ConvexHullFloatPoints(InputArray points, bool clockwise = false)
		{
			return null;
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x30705F8", Offset = "0x30705F8", VA = "0x30705F8")]
		public int[] ConvexHullIndices(InputArray points, bool clockwise = false)
		{
			return null;
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x307069C", Offset = "0x307069C", VA = "0x307069C")]
		public Mat ConvexityDefects(InputArray convexHull)
		{
			return null;
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x3070730", Offset = "0x3070730", VA = "0x3070730")]
		public Vec4i[] ConvexityDefectsAsVec(InputArray convexHull)
		{
			return null;
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x30707DC", Offset = "0x30707DC", VA = "0x30707DC")]
		public bool IsContourConvex()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x30707F4", Offset = "0x30707F4", VA = "0x30707F4")]
		public RotatedRect FitEllipse()
		{
			return default(RotatedRect);
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x307081C", Offset = "0x307081C", VA = "0x307081C")]
		public Line2D FitLine2D(DistanceTypes distType, double param, double reps, double aeps)
		{
			return null;
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x307091C", Offset = "0x307091C", VA = "0x307091C")]
		public Line3D FitLine3D(DistanceTypes distType, double param, double reps, double aeps)
		{
			return null;
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x3070A1C", Offset = "0x3070A1C", VA = "0x3070A1C")]
		public double PointPolygonTest(Point2f pt, bool measureDist)
		{
			return default(double);
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x3070A5C", Offset = "0x3070A5C", VA = "0x3070A5C")]
		public MatOfFloat DistanceTransform(DistanceTypes distanceType, DistanceMaskSize maskSize)
		{
			return null;
		}
	}
	[Token(Token = "0x2000073")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAA08", Offset = "0x1DDAA08")]
	public abstract class MatIndexer<T> where T : struct
	{
		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Mat parent;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly long[] steps;

		[Token(Token = "0x1700009D")]
		public abstract T Item
		{
			[Token(Token = "0x6000D80")]
			get;
			[Token(Token = "0x6000D81")]
			set;
		}

		[Token(Token = "0x1700009E")]
		public abstract T Item
		{
			[Token(Token = "0x6000D82")]
			get;
			[Token(Token = "0x6000D83")]
			set;
		}

		[Token(Token = "0x1700009F")]
		public abstract T Item
		{
			[Token(Token = "0x6000D84")]
			get;
			[Token(Token = "0x6000D85")]
			set;
		}

		[Token(Token = "0x170000A0")]
		public abstract T Item
		{
			[Token(Token = "0x6000D86")]
			get;
			[Token(Token = "0x6000D87")]
			set;
		}

		[Token(Token = "0x6000D88")]
		internal MatIndexer(Mat parent)
		{
		}
	}
	[Token(Token = "0x2000074")]
	public class MatOfByte : Mat<byte, MatOfByte>
	{
		[Token(Token = "0x2000190")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB408", Offset = "0x1DDB408")]
		public new sealed class Indexer : MatIndexer<byte>
		{
			[Token(Token = "0x4000677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000231")]
			public override byte Item
			{
				[Token(Token = "0x6001794")]
				[Address(RVA = "0x3ABB058", Offset = "0x3ABB058", VA = "0x3ABB058", Slot = "4")]
				get
				{
					return default(byte);
				}
				[Token(Token = "0x6001795")]
				[Address(RVA = "0x3ABB09C", Offset = "0x3ABB09C", VA = "0x3ABB09C", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000232")]
			public override byte Item
			{
				[Token(Token = "0x6001796")]
				[Address(RVA = "0x3ABB0E0", Offset = "0x3ABB0E0", VA = "0x3ABB0E0", Slot = "6")]
				get
				{
					return default(byte);
				}
				[Token(Token = "0x6001797")]
				[Address(RVA = "0x3ABB134", Offset = "0x3ABB134", VA = "0x3ABB134", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000233")]
			public override byte Item
			{
				[Token(Token = "0x6001798")]
				[Address(RVA = "0x3ABB188", Offset = "0x3ABB188", VA = "0x3ABB188", Slot = "8")]
				get
				{
					return default(byte);
				}
				[Token(Token = "0x6001799")]
				[Address(RVA = "0x3ABB1F0", Offset = "0x3ABB1F0", VA = "0x3ABB1F0", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000234")]
			public override byte Item
			{
				[Token(Token = "0x600179A")]
				[Address(RVA = "0x3ABB258", Offset = "0x3ABB258", VA = "0x3ABB258", Slot = "10")]
				get
				{
					return default(byte);
				}
				[Token(Token = "0x600179B")]
				[Address(RVA = "0x3ABB2E4", Offset = "0x3ABB2E4", VA = "0x3ABB2E4", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001793")]
			[Address(RVA = "0x3ABA710", Offset = "0x3ABA710", VA = "0x3ABA710")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x2000191")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB440", Offset = "0x1DDB440")]
		private sealed class <GetEnumerator>d__28 : IEnumerator<byte>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private byte <>2__current;

			[Token(Token = "0x400067A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatOfByte <>4__this;

			[Token(Token = "0x400067B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x400067C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <rows>5__3;

			[Token(Token = "0x400067D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <cols>5__4;

			[Token(Token = "0x400067E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <r>5__5;

			[Token(Token = "0x400067F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <c>5__6;

			[Token(Token = "0x17000235")]
			private byte System.Collections.Generic.IEnumerator<System.Byte>.Current
			{
				[Token(Token = "0x600179F")]
				[Address(RVA = "0x3ABAF8C", Offset = "0x3ABAF8C", VA = "0x3ABAF8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(byte);
				}
			}

			[Token(Token = "0x17000236")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017A1")]
				[Address(RVA = "0x3ABAFF4", Offset = "0x3ABAFF4", VA = "0x3ABAFF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600179C")]
			[Address(RVA = "0x3ABAC38", Offset = "0x3ABAC38", VA = "0x3ABAC38")]
			[DebuggerHidden]
			public <GetEnumerator>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x600179D")]
			[Address(RVA = "0x3ABADF0", Offset = "0x3ABADF0", VA = "0x3ABADF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600179E")]
			[Address(RVA = "0x3ABADF4", Offset = "0x3ABADF4", VA = "0x3ABADF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017A0")]
			[Address(RVA = "0x3ABAF94", Offset = "0x3ABAF94", VA = "0x3ABAF94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x400016D")]
		private const int ThisDepth = 0;

		[Token(Token = "0x400016E")]
		private const int ThisChannels = 1;

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x3AB9C3C", Offset = "0x3AB9C3C", VA = "0x3AB9C3C")]
		public MatOfByte()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x3AB9C8C", Offset = "0x3AB9C8C", VA = "0x3AB9C8C")]
		public MatOfByte(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x3AB9CEC", Offset = "0x3AB9CEC", VA = "0x3AB9CEC")]
		public MatOfByte(Mat mat)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x3AB9D4C", Offset = "0x3AB9D4C", VA = "0x3AB9D4C")]
		public MatOfByte(int rows, int cols)
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x3AB9DE0", Offset = "0x3AB9DE0", VA = "0x3AB9DE0")]
		public MatOfByte(Size size)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x3AB9E6C", Offset = "0x3AB9E6C", VA = "0x3AB9E6C")]
		public MatOfByte(int rows, int cols, byte s)
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x3AB9F44", Offset = "0x3AB9F44", VA = "0x3AB9F44")]
		public MatOfByte(Size size, byte s)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x3ABA00C", Offset = "0x3ABA00C", VA = "0x3ABA00C")]
		public MatOfByte(MatOfByte m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x3ABA08C", Offset = "0x3ABA08C", VA = "0x3ABA08C")]
		public MatOfByte(MatOfByte m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x3ABA0F4", Offset = "0x3ABA0F4", VA = "0x3ABA0F4")]
		public MatOfByte(MatOfByte m, Rect roi)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x3ABA16C", Offset = "0x3ABA16C", VA = "0x3ABA16C")]
		public MatOfByte(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x3ABA218", Offset = "0x3ABA218", VA = "0x3ABA218")]
		public MatOfByte(int rows, int cols, byte[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x3ABA2C4", Offset = "0x3ABA2C4", VA = "0x3ABA2C4")]
		public MatOfByte(int rows, int cols, byte[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x3ABA370", Offset = "0x3ABA370", VA = "0x3ABA370")]
		public MatOfByte(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x3ABA414", Offset = "0x3ABA414", VA = "0x3ABA414")]
		public MatOfByte(IEnumerable<int> sizes, byte[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x3ABA4B8", Offset = "0x3ABA4B8", VA = "0x3ABA4B8")]
		public MatOfByte(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x3ABA55C", Offset = "0x3ABA55C", VA = "0x3ABA55C")]
		public MatOfByte(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x3ABA5E8", Offset = "0x3ABA5E8", VA = "0x3ABA5E8")]
		public MatOfByte(IEnumerable<int> sizes, byte s)
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x3ABA6B0", Offset = "0x3ABA6B0", VA = "0x3ABA6B0", Slot = "18")]
		public override MatIndexer<byte> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x3ABA78C", Offset = "0x3ABA78C", VA = "0x3ABA78C")]
		public static MatOfByte FromArray(params byte[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x3ABA884", Offset = "0x3ABA884", VA = "0x3ABA884")]
		public static MatOfByte FromArray(byte[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x3ABA9B8", Offset = "0x3ABA9B8", VA = "0x3ABA9B8")]
		public static MatOfByte FromArray(IEnumerable<byte> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x3ABAA38", Offset = "0x3ABAA38", VA = "0x3ABAA38", Slot = "20")]
		public override byte[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x3ABAAD0", Offset = "0x3ABAAD0", VA = "0x3ABAAD0", Slot = "21")]
		public override byte[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x3ABABBC", Offset = "0x3ABABBC", VA = "0x3ABABBC", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC0D8", Offset = "0x1DDC0D8")]
		public override IEnumerator<byte> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x3ABAC64", Offset = "0x3ABAC64", VA = "0x3ABAC64", Slot = "22")]
		public override void Add(byte value)
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x3ABACEC", Offset = "0x3ABACEC", VA = "0x3ABACEC")]
		public void Add(sbyte value)
		{
		}
	}
	[Token(Token = "0x2000075")]
	public class MatOfByte3 : Mat<Vec3b, MatOfByte3>
	{
		[Token(Token = "0x2000192")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB450", Offset = "0x1DDB450")]
		public new sealed class Indexer : MatIndexer<Vec3b>
		{
			[Token(Token = "0x4000680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000237")]
			public override Vec3b Item
			{
				[Token(Token = "0x60017A3")]
				[Address(RVA = "0x3ABC7AC", Offset = "0x3ABC7AC", VA = "0x3ABC7AC", Slot = "4")]
				get
				{
					return default(Vec3b);
				}
				[Token(Token = "0x60017A4")]
				[Address(RVA = "0x3ABC7F8", Offset = "0x3ABC7F8", VA = "0x3ABC7F8", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000238")]
			public override Vec3b Item
			{
				[Token(Token = "0x60017A5")]
				[Address(RVA = "0x3ABC844", Offset = "0x3ABC844", VA = "0x3ABC844", Slot = "6")]
				get
				{
					return default(Vec3b);
				}
				[Token(Token = "0x60017A6")]
				[Address(RVA = "0x3ABC8A0", Offset = "0x3ABC8A0", VA = "0x3ABC8A0", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000239")]
			public override Vec3b Item
			{
				[Token(Token = "0x60017A7")]
				[Address(RVA = "0x3ABC8FC", Offset = "0x3ABC8FC", VA = "0x3ABC8FC", Slot = "8")]
				get
				{
					return default(Vec3b);
				}
				[Token(Token = "0x60017A8")]
				[Address(RVA = "0x3ABC96C", Offset = "0x3ABC96C", VA = "0x3ABC96C", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x1700023A")]
			public override Vec3b Item
			{
				[Token(Token = "0x60017A9")]
				[Address(RVA = "0x3ABC9DC", Offset = "0x3ABC9DC", VA = "0x3ABC9DC", Slot = "10")]
				get
				{
					return default(Vec3b);
				}
				[Token(Token = "0x60017AA")]
				[Address(RVA = "0x3ABCA74", Offset = "0x3ABCA74", VA = "0x3ABCA74", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x60017A2")]
			[Address(RVA = "0x3ABBE38", Offset = "0x3ABBE38", VA = "0x3ABBE38")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x2000193")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB488", Offset = "0x1DDB488")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Vec3b>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000681")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000682")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Vec3b <>2__current;

			[Token(Token = "0x4000683")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatOfByte3 <>4__this;

			[Token(Token = "0x4000684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x4000685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <rows>5__3;

			[Token(Token = "0x4000686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <cols>5__4;

			[Token(Token = "0x4000687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <r>5__5;

			[Token(Token = "0x4000688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <c>5__6;

			[Token(Token = "0x1700023B")]
			private Vec3b System.Collections.Generic.IEnumerator<OpenCvSharp.Vec3b>.Current
			{
				[Token(Token = "0x60017AE")]
				[Address(RVA = "0x3ABC6D0", Offset = "0x3ABC6D0", VA = "0x3ABC6D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Vec3b);
				}
			}

			[Token(Token = "0x1700023C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017B0")]
				[Address(RVA = "0x3ABC740", Offset = "0x3ABC740", VA = "0x3ABC740", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017AB")]
			[Address(RVA = "0x3ABC3FC", Offset = "0x3ABC3FC", VA = "0x3ABC3FC")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x60017AC")]
			[Address(RVA = "0x3ABC52C", Offset = "0x3ABC52C", VA = "0x3ABC52C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017AD")]
			[Address(RVA = "0x3ABC530", Offset = "0x3ABC530", VA = "0x3ABC530", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017AF")]
			[Address(RVA = "0x3ABC6E0", Offset = "0x3ABC6E0", VA = "0x3ABC6E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000170")]
		private const int ThisDepth = 0;

		[Token(Token = "0x4000171")]
		private const int ThisChannels = 3;

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x3ABB370", Offset = "0x3ABB370", VA = "0x3ABB370")]
		public MatOfByte3()
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x3ABB3C0", Offset = "0x3ABB3C0", VA = "0x3ABB3C0")]
		public MatOfByte3(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x3ABB420", Offset = "0x3ABB420", VA = "0x3ABB420")]
		public MatOfByte3(Mat mat)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x3ABB480", Offset = "0x3ABB480", VA = "0x3ABB480")]
		public MatOfByte3(int rows, int cols)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x3ABB514", Offset = "0x3ABB514", VA = "0x3ABB514")]
		public MatOfByte3(Size size)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x3ABB5A0", Offset = "0x3ABB5A0", VA = "0x3ABB5A0")]
		public MatOfByte3(int rows, int cols, Vec3b s)
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x3ABB674", Offset = "0x3ABB674", VA = "0x3ABB674")]
		public MatOfByte3(Size size, Vec3b s)
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x3ABB738", Offset = "0x3ABB738", VA = "0x3ABB738")]
		public MatOfByte3(MatOfByte3 m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x3ABB7B8", Offset = "0x3ABB7B8", VA = "0x3ABB7B8")]
		public MatOfByte3(MatOfByte3 m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x3ABB820", Offset = "0x3ABB820", VA = "0x3ABB820")]
		public MatOfByte3(MatOfByte3 m, Rect roi)
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x3ABB898", Offset = "0x3ABB898", VA = "0x3ABB898")]
		public MatOfByte3(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x3ABB944", Offset = "0x3ABB944", VA = "0x3ABB944")]
		public MatOfByte3(int rows, int cols, Vec3b[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x3ABB9F0", Offset = "0x3ABB9F0", VA = "0x3ABB9F0")]
		public MatOfByte3(int rows, int cols, Vec3b[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x3ABBA9C", Offset = "0x3ABBA9C", VA = "0x3ABBA9C")]
		public MatOfByte3(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x3ABBB40", Offset = "0x3ABBB40", VA = "0x3ABBB40")]
		public MatOfByte3(IEnumerable<int> sizes, Vec3b[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x3ABBBE4", Offset = "0x3ABBBE4", VA = "0x3ABBBE4")]
		public MatOfByte3(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x3ABBC88", Offset = "0x3ABBC88", VA = "0x3ABBC88")]
		public MatOfByte3(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x3ABBD14", Offset = "0x3ABBD14", VA = "0x3ABBD14")]
		public MatOfByte3(IEnumerable<int> sizes, Vec3b s)
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x3ABBDD8", Offset = "0x3ABBDD8", VA = "0x3ABBDD8", Slot = "18")]
		public override MatIndexer<Vec3b> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x3ABBEB4", Offset = "0x3ABBEB4", VA = "0x3ABBEB4")]
		public static MatOfByte3 FromArray(params Vec3b[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x3ABBFAC", Offset = "0x3ABBFAC", VA = "0x3ABBFAC")]
		public static MatOfByte3 FromArray(Vec3b[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x3ABC0E0", Offset = "0x3ABC0E0", VA = "0x3ABC0E0")]
		public static MatOfByte3 FromArray(IEnumerable<Vec3b> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x3ABC160", Offset = "0x3ABC160", VA = "0x3ABC160", Slot = "20")]
		public override Vec3b[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x3ABC1F8", Offset = "0x3ABC1F8", VA = "0x3ABC1F8")]
		public byte[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x3ABC294", Offset = "0x3ABC294", VA = "0x3ABC294", Slot = "21")]
		public override Vec3b[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x3ABC380", Offset = "0x3ABC380", VA = "0x3ABC380", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC13C", Offset = "0x1DDC13C")]
		public override IEnumerator<Vec3b> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x3ABC428", Offset = "0x3ABC428", VA = "0x3ABC428", Slot = "22")]
		public override void Add(Vec3b value)
		{
		}
	}
	[Token(Token = "0x2000076")]
	public class MatOfDMatch : Mat<DMatch, MatOfDMatch>
	{
		[Token(Token = "0x2000194")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB498", Offset = "0x1DDB498")]
		public new sealed class Indexer : MatIndexer<DMatch>
		{
			[Token(Token = "0x4000689")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x1700023D")]
			public override DMatch Item
			{
				[Token(Token = "0x60017B2")]
				[Address(RVA = "0x3ABDB1C", Offset = "0x3ABDB1C", VA = "0x3ABDB1C", Slot = "4")]
				get
				{
					return default(DMatch);
				}
				[Token(Token = "0x60017B3")]
				[Address(RVA = "0x3ABDB68", Offset = "0x3ABDB68", VA = "0x3ABDB68", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700023E")]
			public override DMatch Item
			{
				[Token(Token = "0x60017B4")]
				[Address(RVA = "0x3ABDBD4", Offset = "0x3ABDBD4", VA = "0x3ABDBD4", Slot = "6")]
				get
				{
					return default(DMatch);
				}
				[Token(Token = "0x60017B5")]
				[Address(RVA = "0x3ABDC30", Offset = "0x3ABDC30", VA = "0x3ABDC30", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x1700023F")]
			public override DMatch Item
			{
				[Token(Token = "0x60017B6")]
				[Address(RVA = "0x3ABDCB8", Offset = "0x3ABDCB8", VA = "0x3ABDCB8", Slot = "8")]
				get
				{
					return default(DMatch);
				}
				[Token(Token = "0x60017B7")]
				[Address(RVA = "0x3ABDD28", Offset = "0x3ABDD28", VA = "0x3ABDD28", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000240")]
			public override DMatch Item
			{
				[Token(Token = "0x60017B8")]
				[Address(RVA = "0x3ABDDD0", Offset = "0x3ABDDD0", VA = "0x3ABDDD0", Slot = "10")]
				get
				{
					return default(DMatch);
				}
				[Token(Token = "0x60017B9")]
				[Address(RVA = "0x3ABDE68", Offset = "0x3ABDE68", VA = "0x3ABDE68", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x60017B1")]
			[Address(RVA = "0x3ABD20C", Offset = "0x3ABD20C", VA = "0x3ABD20C")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x2000195")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB4D0", Offset = "0x1DDB4D0")]
		private sealed class <GetEnumerator>d__22 : IEnumerator<DMatch>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400068A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400068B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private DMatch <>2__current;

			[Token(Token = "0x400068C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MatOfDMatch <>4__this;

			[Token(Token = "0x400068D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x400068E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <rows>5__3;

			[Token(Token = "0x400068F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <cols>5__4;

			[Token(Token = "0x4000690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <r>5__5;

			[Token(Token = "0x4000691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <c>5__6;

			[Token(Token = "0x17000241")]
			private DMatch System.Collections.Generic.IEnumerator<OpenCvSharp.DMatch>.Current
			{
				[Token(Token = "0x60017BD")]
				[Address(RVA = "0x3ABDA44", Offset = "0x3ABDA44", VA = "0x3ABDA44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(DMatch);
				}
			}

			[Token(Token = "0x17000242")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017BF")]
				[Address(RVA = "0x3ABDAB4", Offset = "0x3ABDAB4", VA = "0x3ABDAB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017BA")]
			[Address(RVA = "0x3ABD734", Offset = "0x3ABD734", VA = "0x3ABD734")]
			[DebuggerHidden]
			public <GetEnumerator>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60017BB")]
			[Address(RVA = "0x3ABD8A4", Offset = "0x3ABD8A4", VA = "0x3ABD8A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017BC")]
			[Address(RVA = "0x3ABD8A8", Offset = "0x3ABD8A8", VA = "0x3ABD8A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017BE")]
			[Address(RVA = "0x3ABDA54", Offset = "0x3ABDA54", VA = "0x3ABDA54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000173")]
		private const int ThisDepth = 5;

		[Token(Token = "0x4000174")]
		private const int ThisChannels = 4;

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x3ABCB0C", Offset = "0x3ABCB0C", VA = "0x3ABCB0C")]
		public MatOfDMatch()
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x3ABCB5C", Offset = "0x3ABCB5C", VA = "0x3ABCB5C")]
		public MatOfDMatch(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x3ABCBBC", Offset = "0x3ABCBBC", VA = "0x3ABCBBC")]
		public MatOfDMatch(Mat mat)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x3ABCC1C", Offset = "0x3ABCC1C", VA = "0x3ABCC1C")]
		public MatOfDMatch(int rows, int cols)
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x3ABCCB0", Offset = "0x3ABCCB0", VA = "0x3ABCCB0")]
		public MatOfDMatch(Size size)
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x3ABCD3C", Offset = "0x3ABCD3C", VA = "0x3ABCD3C")]
		public MatOfDMatch(int rows, int cols, DMatch s)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x3ABCE18", Offset = "0x3ABCE18", VA = "0x3ABCE18")]
		public MatOfDMatch(Size size, DMatch s)
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x3ABCEEC", Offset = "0x3ABCEEC", VA = "0x3ABCEEC")]
		public MatOfDMatch(MatOfDMatch m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x3ABCF6C", Offset = "0x3ABCF6C", VA = "0x3ABCF6C")]
		public MatOfDMatch(MatOfDMatch m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x3ABCFD4", Offset = "0x3ABCFD4", VA = "0x3ABCFD4")]
		public MatOfDMatch(MatOfDMatch m, Rect roi)
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x3ABD04C", Offset = "0x3ABD04C", VA = "0x3ABD04C")]
		public MatOfDMatch(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x3ABD0D8", Offset = "0x3ABD0D8", VA = "0x3ABD0D8")]
		public MatOfDMatch(IEnumerable<int> sizes, DMatch s)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x3ABD1AC", Offset = "0x3ABD1AC", VA = "0x3ABD1AC", Slot = "18")]
		public override MatIndexer<DMatch> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x3ABD288", Offset = "0x3ABD288", VA = "0x3ABD288")]
		public static MatOfDMatch FromArray(params DMatch[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x3ABD380", Offset = "0x3ABD380", VA = "0x3ABD380")]
		public static MatOfDMatch FromArray(DMatch[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x3ABD4B4", Offset = "0x3ABD4B4", VA = "0x3ABD4B4")]
		public static MatOfDMatch FromArray(IEnumerable<DMatch> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x3ABD534", Offset = "0x3ABD534", VA = "0x3ABD534", Slot = "20")]
		public override DMatch[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x3ABD5CC", Offset = "0x3ABD5CC", VA = "0x3ABD5CC", Slot = "21")]
		public override DMatch[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x3ABD6B8", Offset = "0x3ABD6B8", VA = "0x3ABD6B8", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC1A0", Offset = "0x1DDC1A0")]
		public override IEnumerator<DMatch> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x3ABD760", Offset = "0x3ABD760", VA = "0x3ABD760", Slot = "22")]
		public override void Add(DMatch value)
		{
		}
	}
	[Token(Token = "0x2000077")]
	public class MatOfDouble : Mat<double, MatOfDouble>
	{
		[Token(Token = "0x2000196")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB4E0", Offset = "0x1DDB4E0")]
		public new sealed class Indexer : MatIndexer<double>
		{
			[Token(Token = "0x4000692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000243")]
			public override double Item
			{
				[Token(Token = "0x60017C1")]
				[Address(RVA = "0x3ABF2AC", Offset = "0x3ABF2AC", VA = "0x3ABF2AC", Slot = "4")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60017C2")]
				[Address(RVA = "0x3ABF2F0", Offset = "0x3ABF2F0", VA = "0x3ABF2F0", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000244")]
			public override double Item
			{
				[Token(Token = "0x60017C3")]
				[Address(RVA = "0x3ABF334", Offset = "0x3ABF334", VA = "0x3ABF334", Slot = "6")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60017C4")]
				[Address(RVA = "0x3ABF388", Offset = "0x3ABF388", VA = "0x3ABF388", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000245")]
			public override double Item
			{
				[Token(Token = "0x60017C5")]
				[Address(RVA = "0x3ABF3DC", Offset = "0x3ABF3DC", VA = "0x3ABF3DC", Slot = "8")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60017C6")]
				[Address(RVA = "0x3ABF444", Offset = "0x3ABF444", VA = "0x3ABF444", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000246")]
			public override double Item
			{
				[Token(Token = "0x60017C7")]
				[Address(RVA = "0x3ABF4AC", Offset = "0x3ABF4AC", VA = "0x3ABF4AC", Slot = "10")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x60017C8")]
				[Address(RVA = "0x3ABF538", Offset = "0x3ABF538", VA = "0x3ABF538", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x60017C0")]
			[Address(RVA = "0x3ABE9EC", Offset = "0x3ABE9EC", VA = "0x3ABE9EC")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x2000197")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB518", Offset = "0x1DDB518")]
		private sealed class <GetEnumerator>d__28 : IEnumerator<double>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000694")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private double <>2__current;

			[Token(Token = "0x4000695")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MatOfDouble <>4__this;

			[Token(Token = "0x4000696")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x4000697")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <rows>5__3;

			[Token(Token = "0x4000698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <cols>5__4;

			[Token(Token = "0x4000699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <r>5__5;

			[Token(Token = "0x400069A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <c>5__6;

			[Token(Token = "0x17000247")]
			private double System.Collections.Generic.IEnumerator<System.Double>.Current
			{
				[Token(Token = "0x60017CC")]
				[Address(RVA = "0x3ABF1E0", Offset = "0x3ABF1E0", VA = "0x3ABF1E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x17000248")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017CE")]
				[Address(RVA = "0x3ABF248", Offset = "0x3ABF248", VA = "0x3ABF248", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017C9")]
			[Address(RVA = "0x3ABEF14", Offset = "0x3ABEF14", VA = "0x3ABEF14")]
			[DebuggerHidden]
			public <GetEnumerator>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x60017CA")]
			[Address(RVA = "0x3ABF044", Offset = "0x3ABF044", VA = "0x3ABF044", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017CB")]
			[Address(RVA = "0x3ABF048", Offset = "0x3ABF048", VA = "0x3ABF048", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017CD")]
			[Address(RVA = "0x3ABF1E8", Offset = "0x3ABF1E8", VA = "0x3ABF1E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000176")]
		private const int ThisDepth = 6;

		[Token(Token = "0x4000177")]
		private const int ThisChannels = 1;

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x3ABDF14", Offset = "0x3ABDF14", VA = "0x3ABDF14")]
		public MatOfDouble()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x3ABDF64", Offset = "0x3ABDF64", VA = "0x3ABDF64")]
		public MatOfDouble(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x3ABDFC4", Offset = "0x3ABDFC4", VA = "0x3ABDFC4")]
		public MatOfDouble(Mat mat)
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x3ABE024", Offset = "0x3ABE024", VA = "0x3ABE024")]
		public MatOfDouble(int rows, int cols)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x3ABE0B8", Offset = "0x3ABE0B8", VA = "0x3ABE0B8")]
		public MatOfDouble(Size size)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x3ABE144", Offset = "0x3ABE144", VA = "0x3ABE144")]
		public MatOfDouble(int rows, int cols, double s)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x3ABE218", Offset = "0x3ABE218", VA = "0x3ABE218")]
		public MatOfDouble(Size size, double s)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x3ABE2E4", Offset = "0x3ABE2E4", VA = "0x3ABE2E4")]
		public MatOfDouble(MatOfDouble m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x3ABE364", Offset = "0x3ABE364", VA = "0x3ABE364")]
		public MatOfDouble(MatOfDouble m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x3ABE3CC", Offset = "0x3ABE3CC", VA = "0x3ABE3CC")]
		public MatOfDouble(MatOfDouble m, Rect roi)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x3ABE444", Offset = "0x3ABE444", VA = "0x3ABE444")]
		public MatOfDouble(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x3ABE4F0", Offset = "0x3ABE4F0", VA = "0x3ABE4F0")]
		public MatOfDouble(int rows, int cols, double[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x3ABE59C", Offset = "0x3ABE59C", VA = "0x3ABE59C")]
		public MatOfDouble(int rows, int cols, double[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x3ABE648", Offset = "0x3ABE648", VA = "0x3ABE648")]
		public MatOfDouble(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x3ABE6EC", Offset = "0x3ABE6EC", VA = "0x3ABE6EC")]
		public MatOfDouble(IEnumerable<int> sizes, double[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x3ABE790", Offset = "0x3ABE790", VA = "0x3ABE790")]
		public MatOfDouble(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x3ABE834", Offset = "0x3ABE834", VA = "0x3ABE834")]
		public MatOfDouble(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x3ABE8C0", Offset = "0x3ABE8C0", VA = "0x3ABE8C0")]
		public MatOfDouble(IEnumerable<int> sizes, double s)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x3ABE98C", Offset = "0x3ABE98C", VA = "0x3ABE98C", Slot = "18")]
		public override MatIndexer<double> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x3ABEA68", Offset = "0x3ABEA68", VA = "0x3ABEA68")]
		public static MatOfDouble FromArray(params double[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x3ABEB60", Offset = "0x3ABEB60", VA = "0x3ABEB60")]
		public static MatOfDouble FromArray(double[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x3ABEC94", Offset = "0x3ABEC94", VA = "0x3ABEC94")]
		public static MatOfDouble FromArray(IEnumerable<double> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x3ABED14", Offset = "0x3ABED14", VA = "0x3ABED14", Slot = "20")]
		public override double[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x3ABEDAC", Offset = "0x3ABEDAC", VA = "0x3ABEDAC", Slot = "21")]
		public override double[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x3ABEE98", Offset = "0x3ABEE98", VA = "0x3ABEE98", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC204", Offset = "0x1DDC204")]
		public override IEnumerator<double> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x3ABEF40", Offset = "0x3ABEF40", VA = "0x3ABEF40", Slot = "22")]
		public override void Add(double value)
		{
		}
	}
	[Token(Token = "0x2000078")]
	public class MatOfDouble3 : Mat<Vec3d, MatOfDouble3>
	{
		[Token(Token = "0x2000198")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB528", Offset = "0x1DDB528")]
		public new sealed class Indexer : MatIndexer<Vec3d>
		{
			[Token(Token = "0x400069B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000249")]
			public override Vec3d Item
			{
				[Token(Token = "0x60017D0")]
				[Address(RVA = "0x3AC0A68", Offset = "0x3AC0A68", VA = "0x3AC0A68", Slot = "4")]
				get
				{
					return default(Vec3d);
				}
				[Token(Token = "0x60017D1")]
				[Address(RVA = "0x3AC0AB0", Offset = "0x3AC0AB0", VA = "0x3AC0AB0", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700024A")]
			public override Vec3d Item
			{
				[Token(Token = "0x60017D2")]
				[Address(RVA = "0x3AC0AF8", Offset = "0x3AC0AF8", VA = "0x3AC0AF8", Slot = "6")]
				get
				{
					return default(Vec3d);
				}
				[Token(Token = "0x60017D3")]
				[Address(RVA = "0x3AC0B50", Offset = "0x3AC0B50", VA = "0x3AC0B50", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x1700024B")]
			public override Vec3d Item
			{
				[Token(Token = "0x60017D4")]
				[Address(RVA = "0x3AC0BA8", Offset = "0x3AC0BA8", VA = "0x3AC0BA8", Slot = "8")]
				get
				{
					return default(Vec3d);
				}
				[Token(Token = "0x60017D5")]
				[Address(RVA = "0x3AC0C14", Offset = "0x3AC0C14", VA = "0x3AC0C14", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x1700024C")]
			public override Vec3d Item
			{
				[Token(Token = "0x60017D6")]
				[Address(RVA = "0x3AC0C80", Offset = "0x3AC0C80", VA = "0x3AC0C80", Slot = "10")]
				get
				{
					return default(Vec3d);
				}
				[Token(Token = "0x60017D7")]
				[Address(RVA = "0x3AC0D14", Offset = "0x3AC0D14", VA = "0x3AC0D14", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x60017CF")]
			[Address(RVA = "0x3AC00E4", Offset = "0x3AC00E4", VA = "0x3AC00E4")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x2000199")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB560", Offset = "0x1DDB560")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Vec3d>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400069C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400069D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vec3d <>2__current;

			[Token(Token = "0x400069E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MatOfDouble3 <>4__this;

			[Token(Token = "0x400069F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <rows>5__3;

			[Token(Token = "0x40006A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <cols>5__4;

			[Token(Token = "0x40006A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <r>5__5;

			[Token(Token = "0x40006A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private int <c>5__6;

			[Token(Token = "0x1700024D")]
			private Vec3d System.Collections.Generic.IEnumerator<OpenCvSharp.Vec3d>.Current
			{
				[Token(Token = "0x60017DB")]
				[Address(RVA = "0x3AC0990", Offset = "0x3AC0990", VA = "0x3AC0990", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Vec3d);
				}
			}

			[Token(Token = "0x1700024E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017DD")]
				[Address(RVA = "0x3AC09FC", Offset = "0x3AC09FC", VA = "0x3AC09FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017D8")]
			[Address(RVA = "0x3AC06A8", Offset = "0x3AC06A8", VA = "0x3AC06A8")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x60017D9")]
			[Address(RVA = "0x3AC07F0", Offset = "0x3AC07F0", VA = "0x3AC07F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017DA")]
			[Address(RVA = "0x3AC07F4", Offset = "0x3AC07F4", VA = "0x3AC07F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017DC")]
			[Address(RVA = "0x3AC099C", Offset = "0x3AC099C", VA = "0x3AC099C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000179")]
		private const int ThisDepth = 6;

		[Token(Token = "0x400017A")]
		private const int ThisChannels = 3;

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x3ABF5C4", Offset = "0x3ABF5C4", VA = "0x3ABF5C4")]
		public MatOfDouble3()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x3ABF614", Offset = "0x3ABF614", VA = "0x3ABF614")]
		public MatOfDouble3(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x3ABF674", Offset = "0x3ABF674", VA = "0x3ABF674")]
		public MatOfDouble3(Mat mat)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x3ABF6D4", Offset = "0x3ABF6D4", VA = "0x3ABF6D4")]
		public MatOfDouble3(int rows, int cols)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x3ABF768", Offset = "0x3ABF768", VA = "0x3ABF768")]
		public MatOfDouble3(Size size)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x3ABF7F4", Offset = "0x3ABF7F4", VA = "0x3ABF7F4")]
		public MatOfDouble3(int rows, int cols, Vec3d s)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x3ABF8E0", Offset = "0x3ABF8E0", VA = "0x3ABF8E0")]
		public MatOfDouble3(Size size, Vec3d s)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x3ABF9C4", Offset = "0x3ABF9C4", VA = "0x3ABF9C4")]
		public MatOfDouble3(MatOfDouble3 m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x3ABFA44", Offset = "0x3ABFA44", VA = "0x3ABFA44")]
		public MatOfDouble3(MatOfDouble3 m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x3ABFAAC", Offset = "0x3ABFAAC", VA = "0x3ABFAAC")]
		public MatOfDouble3(MatOfDouble3 m, Rect roi)
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x3ABFB24", Offset = "0x3ABFB24", VA = "0x3ABFB24")]
		public MatOfDouble3(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x3ABFBD0", Offset = "0x3ABFBD0", VA = "0x3ABFBD0")]
		public MatOfDouble3(int rows, int cols, Vec3d[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x3ABFC7C", Offset = "0x3ABFC7C", VA = "0x3ABFC7C")]
		public MatOfDouble3(int rows, int cols, Vec3d[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x3ABFD28", Offset = "0x3ABFD28", VA = "0x3ABFD28")]
		public MatOfDouble3(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x3ABFDCC", Offset = "0x3ABFDCC", VA = "0x3ABFDCC")]
		public MatOfDouble3(IEnumerable<int> sizes, Vec3d[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x3ABFE70", Offset = "0x3ABFE70", VA = "0x3ABFE70")]
		public MatOfDouble3(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x3ABFF14", Offset = "0x3ABFF14", VA = "0x3ABFF14")]
		public MatOfDouble3(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x3ABFFA0", Offset = "0x3ABFFA0", VA = "0x3ABFFA0")]
		public MatOfDouble3(IEnumerable<int> sizes, Vec3d s)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x3AC0084", Offset = "0x3AC0084", VA = "0x3AC0084", Slot = "18")]
		public override MatIndexer<Vec3d> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x3AC0160", Offset = "0x3AC0160", VA = "0x3AC0160")]
		public static MatOfDouble3 FromArray(params Vec3d[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x3AC0258", Offset = "0x3AC0258", VA = "0x3AC0258")]
		public static MatOfDouble3 FromArray(Vec3d[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x3AC038C", Offset = "0x3AC038C", VA = "0x3AC038C")]
		public static MatOfDouble3 FromArray(IEnumerable<Vec3d> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x3AC040C", Offset = "0x3AC040C", VA = "0x3AC040C", Slot = "20")]
		public override Vec3d[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x3AC04A4", Offset = "0x3AC04A4", VA = "0x3AC04A4")]
		public double[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x3AC0540", Offset = "0x3AC0540", VA = "0x3AC0540", Slot = "21")]
		public override Vec3d[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x3AC062C", Offset = "0x3AC062C", VA = "0x3AC062C", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC268", Offset = "0x1DDC268")]
		public override IEnumerator<Vec3d> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x3AC06D4", Offset = "0x3AC06D4", VA = "0x3AC06D4", Slot = "22")]
		public override void Add(Vec3d value)
		{
		}
	}
	[Token(Token = "0x2000079")]
	public class MatOfFloat : Mat<float, MatOfFloat>
	{
		[Token(Token = "0x200019A")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB570", Offset = "0x1DDB570")]
		public new sealed class Indexer : MatIndexer<float>
		{
			[Token(Token = "0x40006A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x1700024F")]
			public override float Item
			{
				[Token(Token = "0x60017DF")]
				[Address(RVA = "0x3AC2140", Offset = "0x3AC2140", VA = "0x3AC2140", Slot = "4")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017E0")]
				[Address(RVA = "0x3AC2184", Offset = "0x3AC2184", VA = "0x3AC2184", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000250")]
			public override float Item
			{
				[Token(Token = "0x60017E1")]
				[Address(RVA = "0x3AC21C8", Offset = "0x3AC21C8", VA = "0x3AC21C8", Slot = "6")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017E2")]
				[Address(RVA = "0x3AC221C", Offset = "0x3AC221C", VA = "0x3AC221C", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000251")]
			public override float Item
			{
				[Token(Token = "0x60017E3")]
				[Address(RVA = "0x3AC2270", Offset = "0x3AC2270", VA = "0x3AC2270", Slot = "8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017E4")]
				[Address(RVA = "0x3AC22D8", Offset = "0x3AC22D8", VA = "0x3AC22D8", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000252")]
			public override float Item
			{
				[Token(Token = "0x60017E5")]
				[Address(RVA = "0x3AC2340", Offset = "0x3AC2340", VA = "0x3AC2340", Slot = "10")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017E6")]
				[Address(RVA = "0x3AC23CC", Offset = "0x3AC23CC", VA = "0x3AC23CC", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x60017DE")]
			[Address(RVA = "0x3AC1880", Offset = "0x3AC1880", VA = "0x3AC1880")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x200019B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB5A8", Offset = "0x1DDB5A8")]
		private sealed class <GetEnumerator>d__28 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40006A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatOfFloat <>4__this;

			[Token(Token = "0x40006A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <rows>5__3;

			[Token(Token = "0x40006AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <cols>5__4;

			[Token(Token = "0x40006AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <r>5__5;

			[Token(Token = "0x40006AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <c>5__6;

			[Token(Token = "0x17000253")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60017EA")]
				[Address(RVA = "0x3AC2074", Offset = "0x3AC2074", VA = "0x3AC2074", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000254")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017EC")]
				[Address(RVA = "0x3AC20DC", Offset = "0x3AC20DC", VA = "0x3AC20DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017E7")]
			[Address(RVA = "0x3AC1DA8", Offset = "0x3AC1DA8", VA = "0x3AC1DA8")]
			[DebuggerHidden]
			public <GetEnumerator>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x60017E8")]
			[Address(RVA = "0x3AC1ED8", Offset = "0x3AC1ED8", VA = "0x3AC1ED8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017E9")]
			[Address(RVA = "0x3AC1EDC", Offset = "0x3AC1EDC", VA = "0x3AC1EDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017EB")]
			[Address(RVA = "0x3AC207C", Offset = "0x3AC207C", VA = "0x3AC207C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x400017C")]
		private const int ThisDepth = 5;

		[Token(Token = "0x400017D")]
		private const int ThisChannels = 1;

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x3AC0DA8", Offset = "0x3AC0DA8", VA = "0x3AC0DA8")]
		public MatOfFloat()
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x3AC0DF8", Offset = "0x3AC0DF8", VA = "0x3AC0DF8")]
		public MatOfFloat(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x3AC0E58", Offset = "0x3AC0E58", VA = "0x3AC0E58")]
		public MatOfFloat(Mat mat)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x3AC0EB8", Offset = "0x3AC0EB8", VA = "0x3AC0EB8")]
		public MatOfFloat(int rows, int cols)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x3AC0F4C", Offset = "0x3AC0F4C", VA = "0x3AC0F4C")]
		public MatOfFloat(Size size)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x3AC0FD8", Offset = "0x3AC0FD8", VA = "0x3AC0FD8")]
		public MatOfFloat(int rows, int cols, float s)
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x3AC10AC", Offset = "0x3AC10AC", VA = "0x3AC10AC")]
		public MatOfFloat(Size size, float s)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x3AC1178", Offset = "0x3AC1178", VA = "0x3AC1178")]
		public MatOfFloat(MatOfFloat m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x3AC11F8", Offset = "0x3AC11F8", VA = "0x3AC11F8")]
		public MatOfFloat(MatOfFloat m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x3AC1260", Offset = "0x3AC1260", VA = "0x3AC1260")]
		public MatOfFloat(MatOfFloat m, Rect roi)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x3AC12D8", Offset = "0x3AC12D8", VA = "0x3AC12D8")]
		public MatOfFloat(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x3AC1384", Offset = "0x3AC1384", VA = "0x3AC1384")]
		public MatOfFloat(int rows, int cols, float[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x3AC1430", Offset = "0x3AC1430", VA = "0x3AC1430")]
		public MatOfFloat(int rows, int cols, float[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x3AC14DC", Offset = "0x3AC14DC", VA = "0x3AC14DC")]
		public MatOfFloat(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x3AC1580", Offset = "0x3AC1580", VA = "0x3AC1580")]
		public MatOfFloat(IEnumerable<int> sizes, float[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x3AC1624", Offset = "0x3AC1624", VA = "0x3AC1624")]
		public MatOfFloat(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x3AC16C8", Offset = "0x3AC16C8", VA = "0x3AC16C8")]
		public MatOfFloat(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x3AC1754", Offset = "0x3AC1754", VA = "0x3AC1754")]
		public MatOfFloat(IEnumerable<int> sizes, float s)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x3AC1820", Offset = "0x3AC1820", VA = "0x3AC1820", Slot = "18")]
		public override MatIndexer<float> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x3AC18FC", Offset = "0x3AC18FC", VA = "0x3AC18FC")]
		public static MatOfFloat FromArray(params float[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x3AC19F4", Offset = "0x3AC19F4", VA = "0x3AC19F4")]
		public static MatOfFloat FromArray(float[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x3AC1B28", Offset = "0x3AC1B28", VA = "0x3AC1B28")]
		public static MatOfFloat FromArray(IEnumerable<float> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x3AC1BA8", Offset = "0x3AC1BA8", VA = "0x3AC1BA8", Slot = "20")]
		public override float[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x3AC1C40", Offset = "0x3AC1C40", VA = "0x3AC1C40", Slot = "21")]
		public override float[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x3AC1D2C", Offset = "0x3AC1D2C", VA = "0x3AC1D2C", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC2CC", Offset = "0x1DDC2CC")]
		public override IEnumerator<float> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x3AC1DD4", Offset = "0x3AC1DD4", VA = "0x3AC1DD4", Slot = "22")]
		public override void Add(float value)
		{
		}
	}
	[Token(Token = "0x200007A")]
	public class MatOfFloat4 : Mat<Vec4f, MatOfFloat4>
	{
		[Token(Token = "0x200019C")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB5B8", Offset = "0x1DDB5B8")]
		public new sealed class Indexer : MatIndexer<Vec4f>
		{
			[Token(Token = "0x40006AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000255")]
			public override Vec4f Item
			{
				[Token(Token = "0x60017EE")]
				[Address(RVA = "0x3AC3914", Offset = "0x3AC3914", VA = "0x3AC3914", Slot = "4")]
				get
				{
					return default(Vec4f);
				}
				[Token(Token = "0x60017EF")]
				[Address(RVA = "0x3AC395C", Offset = "0x3AC395C", VA = "0x3AC395C", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000256")]
			public override Vec4f Item
			{
				[Token(Token = "0x60017F0")]
				[Address(RVA = "0x3AC39A4", Offset = "0x3AC39A4", VA = "0x3AC39A4", Slot = "6")]
				get
				{
					return default(Vec4f);
				}
				[Token(Token = "0x60017F1")]
				[Address(RVA = "0x3AC39FC", Offset = "0x3AC39FC", VA = "0x3AC39FC", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000257")]
			public override Vec4f Item
			{
				[Token(Token = "0x60017F2")]
				[Address(RVA = "0x3AC3A54", Offset = "0x3AC3A54", VA = "0x3AC3A54", Slot = "8")]
				get
				{
					return default(Vec4f);
				}
				[Token(Token = "0x60017F3")]
				[Address(RVA = "0x3AC3AC0", Offset = "0x3AC3AC0", VA = "0x3AC3AC0", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000258")]
			public override Vec4f Item
			{
				[Token(Token = "0x60017F4")]
				[Address(RVA = "0x3AC3B2C", Offset = "0x3AC3B2C", VA = "0x3AC3B2C", Slot = "10")]
				get
				{
					return default(Vec4f);
				}
				[Token(Token = "0x60017F5")]
				[Address(RVA = "0x3AC3BC0", Offset = "0x3AC3BC0", VA = "0x3AC3BC0", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x60017ED")]
			[Address(RVA = "0x3AC2F90", Offset = "0x3AC2F90", VA = "0x3AC2F90")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x200019D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB5F0", Offset = "0x1DDB5F0")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Vec4f>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Vec4f <>2__current;

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MatOfFloat4 <>4__this;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <rows>5__3;

			[Token(Token = "0x40006B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <cols>5__4;

			[Token(Token = "0x40006B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <r>5__5;

			[Token(Token = "0x40006B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <c>5__6;

			[Token(Token = "0x17000259")]
			private Vec4f System.Collections.Generic.IEnumerator<OpenCvSharp.Vec4f>.Current
			{
				[Token(Token = "0x60017F9")]
				[Address(RVA = "0x3AC3844", Offset = "0x3AC3844", VA = "0x3AC3844", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Vec4f);
				}
			}

			[Token(Token = "0x1700025A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017FB")]
				[Address(RVA = "0x3AC38B0", Offset = "0x3AC38B0", VA = "0x3AC38B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017F6")]
			[Address(RVA = "0x3AC3554", Offset = "0x3AC3554", VA = "0x3AC3554")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x60017F7")]
			[Address(RVA = "0x3AC36A4", Offset = "0x3AC36A4", VA = "0x3AC36A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017F8")]
			[Address(RVA = "0x3AC36A8", Offset = "0x3AC36A8", VA = "0x3AC36A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017FA")]
			[Address(RVA = "0x3AC3850", Offset = "0x3AC3850", VA = "0x3AC3850", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x400017F")]
		private const int ThisDepth = 5;

		[Token(Token = "0x4000180")]
		private const int ThisChannels = 4;

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x3AC2458", Offset = "0x3AC2458", VA = "0x3AC2458")]
		public MatOfFloat4()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x3AC24A8", Offset = "0x3AC24A8", VA = "0x3AC24A8")]
		public MatOfFloat4(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x3AC2508", Offset = "0x3AC2508", VA = "0x3AC2508")]
		public MatOfFloat4(Mat mat)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x3AC2568", Offset = "0x3AC2568", VA = "0x3AC2568")]
		public MatOfFloat4(int rows, int cols)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x3AC25FC", Offset = "0x3AC25FC", VA = "0x3AC25FC")]
		public MatOfFloat4(Size size)
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x3AC2688", Offset = "0x3AC2688", VA = "0x3AC2688")]
		public MatOfFloat4(int rows, int cols, Vec4f s)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x3AC277C", Offset = "0x3AC277C", VA = "0x3AC277C")]
		public MatOfFloat4(Size size, Vec4f s)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x3AC2868", Offset = "0x3AC2868", VA = "0x3AC2868")]
		public MatOfFloat4(MatOfFloat4 m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x3AC28E8", Offset = "0x3AC28E8", VA = "0x3AC28E8")]
		public MatOfFloat4(MatOfFloat4 m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x3AC2950", Offset = "0x3AC2950", VA = "0x3AC2950")]
		public MatOfFloat4(MatOfFloat4 m, Rect roi)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x3AC29C8", Offset = "0x3AC29C8", VA = "0x3AC29C8")]
		public MatOfFloat4(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x3AC2A74", Offset = "0x3AC2A74", VA = "0x3AC2A74")]
		public MatOfFloat4(int rows, int cols, Vec4f[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x3AC2B20", Offset = "0x3AC2B20", VA = "0x3AC2B20")]
		public MatOfFloat4(int rows, int cols, Vec4f[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x3AC2BCC", Offset = "0x3AC2BCC", VA = "0x3AC2BCC")]
		public MatOfFloat4(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x3AC2C70", Offset = "0x3AC2C70", VA = "0x3AC2C70")]
		public MatOfFloat4(IEnumerable<int> sizes, Vec4f[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x3AC2D14", Offset = "0x3AC2D14", VA = "0x3AC2D14")]
		public MatOfFloat4(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x3AC2DB8", Offset = "0x3AC2DB8", VA = "0x3AC2DB8")]
		public MatOfFloat4(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x3AC2E44", Offset = "0x3AC2E44", VA = "0x3AC2E44")]
		public MatOfFloat4(IEnumerable<int> sizes, Vec4f s)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x3AC2F30", Offset = "0x3AC2F30", VA = "0x3AC2F30", Slot = "18")]
		public override MatIndexer<Vec4f> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x3AC300C", Offset = "0x3AC300C", VA = "0x3AC300C")]
		public static MatOfFloat4 FromArray(params Vec4f[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x3AC3104", Offset = "0x3AC3104", VA = "0x3AC3104")]
		public static MatOfFloat4 FromArray(Vec4f[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x3AC3238", Offset = "0x3AC3238", VA = "0x3AC3238")]
		public static MatOfFloat4 FromArray(IEnumerable<Vec4f> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x3AC32B8", Offset = "0x3AC32B8", VA = "0x3AC32B8", Slot = "20")]
		public override Vec4f[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x3AC3350", Offset = "0x3AC3350", VA = "0x3AC3350")]
		public float[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x3AC33EC", Offset = "0x3AC33EC", VA = "0x3AC33EC", Slot = "21")]
		public override Vec4f[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x3AC34D8", Offset = "0x3AC34D8", VA = "0x3AC34D8", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC330", Offset = "0x1DDC330")]
		public override IEnumerator<Vec4f> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x3AC3580", Offset = "0x3AC3580", VA = "0x3AC3580", Slot = "22")]
		public override void Add(Vec4f value)
		{
		}
	}
	[Token(Token = "0x200007B")]
	public class MatOfFloat6 : Mat<Vec6f, MatOfFloat6>
	{
		[Token(Token = "0x200019E")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB600", Offset = "0x1DDB600")]
		public new sealed class Indexer : MatIndexer<Vec6f>
		{
			[Token(Token = "0x40006B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x1700025B")]
			public override Vec6f Item
			{
				[Token(Token = "0x60017FD")]
				[Address(RVA = "0x3AC514C", Offset = "0x3AC514C", VA = "0x3AC514C", Slot = "4")]
				get
				{
					return default(Vec6f);
				}
				[Token(Token = "0x60017FE")]
				[Address(RVA = "0x3AC519C", Offset = "0x3AC519C", VA = "0x3AC519C", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700025C")]
			public override Vec6f Item
			{
				[Token(Token = "0x60017FF")]
				[Address(RVA = "0x3AC51EC", Offset = "0x3AC51EC", VA = "0x3AC51EC", Slot = "6")]
				get
				{
					return default(Vec6f);
				}
				[Token(Token = "0x6001800")]
				[Address(RVA = "0x3AC524C", Offset = "0x3AC524C", VA = "0x3AC524C", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x1700025D")]
			public override Vec6f Item
			{
				[Token(Token = "0x6001801")]
				[Address(RVA = "0x3AC52AC", Offset = "0x3AC52AC", VA = "0x3AC52AC", Slot = "8")]
				get
				{
					return default(Vec6f);
				}
				[Token(Token = "0x6001802")]
				[Address(RVA = "0x3AC5320", Offset = "0x3AC5320", VA = "0x3AC5320", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x1700025E")]
			public override Vec6f Item
			{
				[Token(Token = "0x6001803")]
				[Address(RVA = "0x3AC5394", Offset = "0x3AC5394", VA = "0x3AC5394", Slot = "10")]
				get
				{
					return default(Vec6f);
				}
				[Token(Token = "0x6001804")]
				[Address(RVA = "0x3AC5430", Offset = "0x3AC5430", VA = "0x3AC5430", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x60017FC")]
			[Address(RVA = "0x3AC4794", Offset = "0x3AC4794", VA = "0x3AC4794")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x200019F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB638", Offset = "0x1DDB638")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Vec6f>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Vec6f <>2__current;

			[Token(Token = "0x40006B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MatOfFloat6 <>4__this;

			[Token(Token = "0x40006BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <rows>5__3;

			[Token(Token = "0x40006BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <cols>5__4;

			[Token(Token = "0x40006BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <r>5__5;

			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private int <c>5__6;

			[Token(Token = "0x1700025F")]
			private Vec6f System.Collections.Generic.IEnumerator<OpenCvSharp.Vec6f>.Current
			{
				[Token(Token = "0x6001808")]
				[Address(RVA = "0x3AC506C", Offset = "0x3AC506C", VA = "0x3AC506C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Vec6f);
				}
			}

			[Token(Token = "0x17000260")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600180A")]
				[Address(RVA = "0x3AC50E0", Offset = "0x3AC50E0", VA = "0x3AC50E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001805")]
			[Address(RVA = "0x3AC4D5C", Offset = "0x3AC4D5C", VA = "0x3AC4D5C")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6001806")]
			[Address(RVA = "0x3AC4EB8", Offset = "0x3AC4EB8", VA = "0x3AC4EB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001807")]
			[Address(RVA = "0x3AC4EBC", Offset = "0x3AC4EBC", VA = "0x3AC4EBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001809")]
			[Address(RVA = "0x3AC5080", Offset = "0x3AC5080", VA = "0x3AC5080", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000182")]
		private const int ThisDepth = 5;

		[Token(Token = "0x4000183")]
		private const int ThisChannels = 6;

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x3AC3C54", Offset = "0x3AC3C54", VA = "0x3AC3C54")]
		public MatOfFloat6()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x3AC3CA4", Offset = "0x3AC3CA4", VA = "0x3AC3CA4")]
		public MatOfFloat6(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x3AC3D04", Offset = "0x3AC3D04", VA = "0x3AC3D04")]
		public MatOfFloat6(Mat mat)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x3AC3D64", Offset = "0x3AC3D64", VA = "0x3AC3D64")]
		public MatOfFloat6(int rows, int cols)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x3AC3DF8", Offset = "0x3AC3DF8", VA = "0x3AC3DF8")]
		public MatOfFloat6(Size size)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x3AC3E84", Offset = "0x3AC3E84", VA = "0x3AC3E84")]
		public MatOfFloat6(int rows, int cols, Vec6f s)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x3AC3F80", Offset = "0x3AC3F80", VA = "0x3AC3F80")]
		public MatOfFloat6(Size size, Vec6f s)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x3AC406C", Offset = "0x3AC406C", VA = "0x3AC406C")]
		public MatOfFloat6(MatOfFloat6 m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x3AC40EC", Offset = "0x3AC40EC", VA = "0x3AC40EC")]
		public MatOfFloat6(MatOfFloat6 m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x3AC4154", Offset = "0x3AC4154", VA = "0x3AC4154")]
		public MatOfFloat6(MatOfFloat6 m, Rect roi)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x3AC41CC", Offset = "0x3AC41CC", VA = "0x3AC41CC")]
		public MatOfFloat6(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x3AC4278", Offset = "0x3AC4278", VA = "0x3AC4278")]
		public MatOfFloat6(int rows, int cols, Vec6f[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x3AC4324", Offset = "0x3AC4324", VA = "0x3AC4324")]
		public MatOfFloat6(int rows, int cols, Vec6f[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x3AC43D0", Offset = "0x3AC43D0", VA = "0x3AC43D0")]
		public MatOfFloat6(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x3AC4474", Offset = "0x3AC4474", VA = "0x3AC4474")]
		public MatOfFloat6(IEnumerable<int> sizes, Vec6f[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x3AC4518", Offset = "0x3AC4518", VA = "0x3AC4518")]
		public MatOfFloat6(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x3AC45BC", Offset = "0x3AC45BC", VA = "0x3AC45BC")]
		public MatOfFloat6(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x3AC4648", Offset = "0x3AC4648", VA = "0x3AC4648")]
		public MatOfFloat6(IEnumerable<int> sizes, Vec6f s)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x3AC4734", Offset = "0x3AC4734", VA = "0x3AC4734", Slot = "18")]
		public override MatIndexer<Vec6f> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x3AC4810", Offset = "0x3AC4810", VA = "0x3AC4810")]
		public static MatOfFloat6 FromArray(params Vec6f[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x3AC4908", Offset = "0x3AC4908", VA = "0x3AC4908")]
		public static MatOfFloat6 FromArray(Vec6f[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x3AC4A3C", Offset = "0x3AC4A3C", VA = "0x3AC4A3C")]
		public static MatOfFloat6 FromArray(IEnumerable<Vec6f> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x3AC4ABC", Offset = "0x3AC4ABC", VA = "0x3AC4ABC", Slot = "20")]
		public override Vec6f[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x3AC4B54", Offset = "0x3AC4B54", VA = "0x3AC4B54")]
		public float[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x3AC4BF4", Offset = "0x3AC4BF4", VA = "0x3AC4BF4", Slot = "21")]
		public override Vec6f[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x3AC4CE0", Offset = "0x3AC4CE0", VA = "0x3AC4CE0", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC394", Offset = "0x1DDC394")]
		public override IEnumerator<Vec6f> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x3AC4D88", Offset = "0x3AC4D88", VA = "0x3AC4D88", Slot = "22")]
		public override void Add(Vec6f value)
		{
		}
	}
	[Token(Token = "0x200007C")]
	public class MatOfInt : Mat<int, MatOfInt>
	{
		[Token(Token = "0x20001A0")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB648", Offset = "0x1DDB648")]
		public new sealed class Indexer : MatIndexer<int>
		{
			[Token(Token = "0x40006BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000261")]
			public override int Item
			{
				[Token(Token = "0x600180C")]
				[Address(RVA = "0x3AC6854", Offset = "0x3AC6854", VA = "0x3AC6854", Slot = "4")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600180D")]
				[Address(RVA = "0x3AC6898", Offset = "0x3AC6898", VA = "0x3AC6898", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000262")]
			public override int Item
			{
				[Token(Token = "0x600180E")]
				[Address(RVA = "0x3AC68DC", Offset = "0x3AC68DC", VA = "0x3AC68DC", Slot = "6")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600180F")]
				[Address(RVA = "0x3AC6930", Offset = "0x3AC6930", VA = "0x3AC6930", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000263")]
			public override int Item
			{
				[Token(Token = "0x6001810")]
				[Address(RVA = "0x3AC6984", Offset = "0x3AC6984", VA = "0x3AC6984", Slot = "8")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001811")]
				[Address(RVA = "0x3AC69EC", Offset = "0x3AC69EC", VA = "0x3AC69EC", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000264")]
			public override int Item
			{
				[Token(Token = "0x6001812")]
				[Address(RVA = "0x3AC6A54", Offset = "0x3AC6A54", VA = "0x3AC6A54", Slot = "10")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001813")]
				[Address(RVA = "0x3AC6AE0", Offset = "0x3AC6AE0", VA = "0x3AC6AE0", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x600180B")]
			[Address(RVA = "0x3AC5F94", Offset = "0x3AC5F94", VA = "0x3AC5F94")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001A1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB680", Offset = "0x1DDB680")]
		private sealed class <GetEnumerator>d__28 : IEnumerator<int>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int <>2__current;

			[Token(Token = "0x40006C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatOfInt <>4__this;

			[Token(Token = "0x40006C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <rows>5__3;

			[Token(Token = "0x40006C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <cols>5__4;

			[Token(Token = "0x40006C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <r>5__5;

			[Token(Token = "0x40006C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <c>5__6;

			[Token(Token = "0x17000265")]
			private int System.Collections.Generic.IEnumerator<System.Int32>.Current
			{
				[Token(Token = "0x6001817")]
				[Address(RVA = "0x3AC6788", Offset = "0x3AC6788", VA = "0x3AC6788", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x17000266")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001819")]
				[Address(RVA = "0x3AC67F0", Offset = "0x3AC67F0", VA = "0x3AC67F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001814")]
			[Address(RVA = "0x3AC64BC", Offset = "0x3AC64BC", VA = "0x3AC64BC")]
			[DebuggerHidden]
			public <GetEnumerator>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6001815")]
			[Address(RVA = "0x3AC65EC", Offset = "0x3AC65EC", VA = "0x3AC65EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001816")]
			[Address(RVA = "0x3AC65F0", Offset = "0x3AC65F0", VA = "0x3AC65F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001818")]
			[Address(RVA = "0x3AC6790", Offset = "0x3AC6790", VA = "0x3AC6790", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000185")]
		private const int ThisDepth = 4;

		[Token(Token = "0x4000186")]
		private const int ThisChannels = 1;

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x3AC54CC", Offset = "0x3AC54CC", VA = "0x3AC54CC")]
		public MatOfInt()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x3AC551C", Offset = "0x3AC551C", VA = "0x3AC551C")]
		public MatOfInt(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x3AC557C", Offset = "0x3AC557C", VA = "0x3AC557C")]
		public MatOfInt(Mat mat)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x3AC55DC", Offset = "0x3AC55DC", VA = "0x3AC55DC")]
		public MatOfInt(int rows, int cols)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x3AC5670", Offset = "0x3AC5670", VA = "0x3AC5670")]
		public MatOfInt(Size size)
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x3AC56FC", Offset = "0x3AC56FC", VA = "0x3AC56FC")]
		public MatOfInt(int rows, int cols, int s)
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x3AC57D0", Offset = "0x3AC57D0", VA = "0x3AC57D0")]
		public MatOfInt(Size size, int s)
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x3AC5894", Offset = "0x3AC5894", VA = "0x3AC5894")]
		public MatOfInt(MatOfInt m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x3AC5914", Offset = "0x3AC5914", VA = "0x3AC5914")]
		public MatOfInt(MatOfInt m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x3AC597C", Offset = "0x3AC597C", VA = "0x3AC597C")]
		public MatOfInt(MatOfInt m, Rect roi)
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x3AC59F4", Offset = "0x3AC59F4", VA = "0x3AC59F4")]
		public MatOfInt(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x3AC5AA0", Offset = "0x3AC5AA0", VA = "0x3AC5AA0")]
		public MatOfInt(int rows, int cols, int[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x3AC5B4C", Offset = "0x3AC5B4C", VA = "0x3AC5B4C")]
		public MatOfInt(int rows, int cols, int[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x3AC5BF8", Offset = "0x3AC5BF8", VA = "0x3AC5BF8")]
		public MatOfInt(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x3AC5C9C", Offset = "0x3AC5C9C", VA = "0x3AC5C9C")]
		public MatOfInt(IEnumerable<int> sizes, int[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x3AC5D40", Offset = "0x3AC5D40", VA = "0x3AC5D40")]
		public MatOfInt(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x3AC5DE4", Offset = "0x3AC5DE4", VA = "0x3AC5DE4")]
		public MatOfInt(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x3AC5E70", Offset = "0x3AC5E70", VA = "0x3AC5E70")]
		public MatOfInt(IEnumerable<int> sizes, int s)
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x3AC5F34", Offset = "0x3AC5F34", VA = "0x3AC5F34", Slot = "18")]
		public override MatIndexer<int> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x3AC6010", Offset = "0x3AC6010", VA = "0x3AC6010")]
		public static MatOfInt FromArray(params int[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x3AC6108", Offset = "0x3AC6108", VA = "0x3AC6108")]
		public static MatOfInt FromArray(int[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x3AC623C", Offset = "0x3AC623C", VA = "0x3AC623C")]
		public static MatOfInt FromArray(IEnumerable<int> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x3AC62BC", Offset = "0x3AC62BC", VA = "0x3AC62BC", Slot = "20")]
		public override int[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x3AC6354", Offset = "0x3AC6354", VA = "0x3AC6354", Slot = "21")]
		public override int[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x3AC6440", Offset = "0x3AC6440", VA = "0x3AC6440", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC3F8", Offset = "0x1DDC3F8")]
		public override IEnumerator<int> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x3AC64E8", Offset = "0x3AC64E8", VA = "0x3AC64E8", Slot = "22")]
		public override void Add(int value)
		{
		}
	}
	[Token(Token = "0x200007D")]
	public class MatOfInt4 : Mat<Vec4i, MatOfInt4>
	{
		[Token(Token = "0x20001A2")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB690", Offset = "0x1DDB690")]
		public new sealed class Indexer : MatIndexer<Vec4i>
		{
			[Token(Token = "0x40006C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000267")]
			public override Vec4i Item
			{
				[Token(Token = "0x600181B")]
				[Address(RVA = "0x3AC7F28", Offset = "0x3AC7F28", VA = "0x3AC7F28", Slot = "4")]
				get
				{
					return default(Vec4i);
				}
				[Token(Token = "0x600181C")]
				[Address(RVA = "0x3AC7F6C", Offset = "0x3AC7F6C", VA = "0x3AC7F6C", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000268")]
			public override Vec4i Item
			{
				[Token(Token = "0x600181D")]
				[Address(RVA = "0x3AC7FB0", Offset = "0x3AC7FB0", VA = "0x3AC7FB0", Slot = "6")]
				get
				{
					return default(Vec4i);
				}
				[Token(Token = "0x600181E")]
				[Address(RVA = "0x3AC8004", Offset = "0x3AC8004", VA = "0x3AC8004", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000269")]
			public override Vec4i Item
			{
				[Token(Token = "0x600181F")]
				[Address(RVA = "0x3AC8058", Offset = "0x3AC8058", VA = "0x3AC8058", Slot = "8")]
				get
				{
					return default(Vec4i);
				}
				[Token(Token = "0x6001820")]
				[Address(RVA = "0x3AC80C0", Offset = "0x3AC80C0", VA = "0x3AC80C0", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x1700026A")]
			public override Vec4i Item
			{
				[Token(Token = "0x6001821")]
				[Address(RVA = "0x3AC8128", Offset = "0x3AC8128", VA = "0x3AC8128", Slot = "10")]
				get
				{
					return default(Vec4i);
				}
				[Token(Token = "0x6001822")]
				[Address(RVA = "0x3AC81B8", Offset = "0x3AC81B8", VA = "0x3AC81B8", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x600181A")]
			[Address(RVA = "0x3AC7650", Offset = "0x3AC7650", VA = "0x3AC7650")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001A3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB6C8", Offset = "0x1DDB6C8")]
		private sealed class <GetEnumerator>d__28 : IEnumerator<Vec4i>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Vec4i <>2__current;

			[Token(Token = "0x40006CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MatOfInt4 <>4__this;

			[Token(Token = "0x40006CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <rows>5__3;

			[Token(Token = "0x40006CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <cols>5__4;

			[Token(Token = "0x40006CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <r>5__5;

			[Token(Token = "0x40006D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <c>5__6;

			[Token(Token = "0x1700026B")]
			private Vec4i System.Collections.Generic.IEnumerator<OpenCvSharp.Vec4i>.Current
			{
				[Token(Token = "0x6001826")]
				[Address(RVA = "0x3AC7E50", Offset = "0x3AC7E50", VA = "0x3AC7E50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Vec4i);
				}
			}

			[Token(Token = "0x1700026C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001828")]
				[Address(RVA = "0x3AC7EC0", Offset = "0x3AC7EC0", VA = "0x3AC7EC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001823")]
			[Address(RVA = "0x3AC7B78", Offset = "0x3AC7B78", VA = "0x3AC7B78")]
			[DebuggerHidden]
			public <GetEnumerator>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6001824")]
			[Address(RVA = "0x3AC7CB0", Offset = "0x3AC7CB0", VA = "0x3AC7CB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001825")]
			[Address(RVA = "0x3AC7CB4", Offset = "0x3AC7CB4", VA = "0x3AC7CB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001827")]
			[Address(RVA = "0x3AC7E60", Offset = "0x3AC7E60", VA = "0x3AC7E60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000188")]
		private const int ThisDepth = 4;

		[Token(Token = "0x4000189")]
		private const int ThisChannels = 4;

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x3AC6B6C", Offset = "0x3AC6B6C", VA = "0x3AC6B6C")]
		public MatOfInt4()
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x3AC6BBC", Offset = "0x3AC6BBC", VA = "0x3AC6BBC")]
		public MatOfInt4(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x3AC6C1C", Offset = "0x3AC6C1C", VA = "0x3AC6C1C")]
		public MatOfInt4(Mat mat)
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x3AC6C7C", Offset = "0x3AC6C7C", VA = "0x3AC6C7C")]
		public MatOfInt4(int rows, int cols)
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x3AC6D10", Offset = "0x3AC6D10", VA = "0x3AC6D10")]
		public MatOfInt4(Size size)
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x3AC6D9C", Offset = "0x3AC6D9C", VA = "0x3AC6D9C")]
		public MatOfInt4(int rows, int cols, int s)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x3AC6E70", Offset = "0x3AC6E70", VA = "0x3AC6E70")]
		public MatOfInt4(Size size, int s)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x3AC6F34", Offset = "0x3AC6F34", VA = "0x3AC6F34")]
		public MatOfInt4(MatOfInt4 m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x3AC6FB4", Offset = "0x3AC6FB4", VA = "0x3AC6FB4")]
		public MatOfInt4(MatOfInt4 m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x3AC701C", Offset = "0x3AC701C", VA = "0x3AC701C")]
		public MatOfInt4(MatOfInt4 m, Rect roi)
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x3AC7094", Offset = "0x3AC7094", VA = "0x3AC7094")]
		public MatOfInt4(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x3AC7140", Offset = "0x3AC7140", VA = "0x3AC7140")]
		public MatOfInt4(int rows, int cols, Vec4i[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x3AC71EC", Offset = "0x3AC71EC", VA = "0x3AC71EC")]
		public MatOfInt4(int rows, int cols, Vec4i[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x3AC7298", Offset = "0x3AC7298", VA = "0x3AC7298")]
		public MatOfInt4(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x3AC733C", Offset = "0x3AC733C", VA = "0x3AC733C")]
		public MatOfInt4(IEnumerable<int> sizes, Vec4i[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x3AC73E0", Offset = "0x3AC73E0", VA = "0x3AC73E0")]
		public MatOfInt4(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x3AC7484", Offset = "0x3AC7484", VA = "0x3AC7484")]
		public MatOfInt4(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x3AC7510", Offset = "0x3AC7510", VA = "0x3AC7510")]
		public MatOfInt4(IEnumerable<int> sizes, Vec4i s)
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x3AC75F0", Offset = "0x3AC75F0", VA = "0x3AC75F0", Slot = "18")]
		public override MatIndexer<Vec4i> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x3AC76CC", Offset = "0x3AC76CC", VA = "0x3AC76CC")]
		public static MatOfInt4 FromArray(params Vec4i[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x3AC77C4", Offset = "0x3AC77C4", VA = "0x3AC77C4")]
		public static MatOfInt4 FromArray(Vec4i[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x3AC78F8", Offset = "0x3AC78F8", VA = "0x3AC78F8")]
		public static MatOfInt4 FromArray(IEnumerable<Vec4i> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x3AC7978", Offset = "0x3AC7978", VA = "0x3AC7978", Slot = "20")]
		public override Vec4i[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x3AC7A10", Offset = "0x3AC7A10", VA = "0x3AC7A10", Slot = "21")]
		public override Vec4i[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x3AC7AFC", Offset = "0x3AC7AFC", VA = "0x3AC7AFC", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC45C", Offset = "0x1DDC45C")]
		public override IEnumerator<Vec4i> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x3AC7BA4", Offset = "0x3AC7BA4", VA = "0x3AC7BA4", Slot = "22")]
		public override void Add(Vec4i value)
		{
		}
	}
	[Token(Token = "0x200007E")]
	public class MatOfPoint : Mat<Point, MatOfPoint>
	{
		[Token(Token = "0x20001A4")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB6D8", Offset = "0x1DDB6D8")]
		public new sealed class Indexer : MatIndexer<Point>
		{
			[Token(Token = "0x40006D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x1700026D")]
			public override Point Item
			{
				[Token(Token = "0x600182A")]
				[Address(RVA = "0x3AC966C", Offset = "0x3AC966C", VA = "0x3AC966C", Slot = "4")]
				get
				{
					return default(Point);
				}
				[Token(Token = "0x600182B")]
				[Address(RVA = "0x3AC96B0", Offset = "0x3AC96B0", VA = "0x3AC96B0", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700026E")]
			public override Point Item
			{
				[Token(Token = "0x600182C")]
				[Address(RVA = "0x3AC96F4", Offset = "0x3AC96F4", VA = "0x3AC96F4", Slot = "6")]
				get
				{
					return default(Point);
				}
				[Token(Token = "0x600182D")]
				[Address(RVA = "0x3AC9748", Offset = "0x3AC9748", VA = "0x3AC9748", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x1700026F")]
			public override Point Item
			{
				[Token(Token = "0x600182E")]
				[Address(RVA = "0x3AC979C", Offset = "0x3AC979C", VA = "0x3AC979C", Slot = "8")]
				get
				{
					return default(Point);
				}
				[Token(Token = "0x600182F")]
				[Address(RVA = "0x3AC9804", Offset = "0x3AC9804", VA = "0x3AC9804", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000270")]
			public override Point Item
			{
				[Token(Token = "0x6001830")]
				[Address(RVA = "0x3AC986C", Offset = "0x3AC986C", VA = "0x3AC986C", Slot = "10")]
				get
				{
					return default(Point);
				}
				[Token(Token = "0x6001831")]
				[Address(RVA = "0x3AC98F8", Offset = "0x3AC98F8", VA = "0x3AC98F8", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001829")]
			[Address(RVA = "0x3AC8D10", Offset = "0x3AC8D10", VA = "0x3AC8D10")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001A5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB710", Offset = "0x1DDB710")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Point>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Point <>2__current;

			[Token(Token = "0x40006D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MatOfPoint <>4__this;

			[Token(Token = "0x40006D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <rows>5__3;

			[Token(Token = "0x40006D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <cols>5__4;

			[Token(Token = "0x40006D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <r>5__5;

			[Token(Token = "0x40006D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <c>5__6;

			[Token(Token = "0x17000271")]
			private Point System.Collections.Generic.IEnumerator<OpenCvSharp.Point>.Current
			{
				[Token(Token = "0x6001835")]
				[Address(RVA = "0x3AC95A0", Offset = "0x3AC95A0", VA = "0x3AC95A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Point);
				}
			}

			[Token(Token = "0x17000272")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001837")]
				[Address(RVA = "0x3AC9608", Offset = "0x3AC9608", VA = "0x3AC9608", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001832")]
			[Address(RVA = "0x3AC92D4", Offset = "0x3AC92D4", VA = "0x3AC92D4")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6001833")]
			[Address(RVA = "0x3AC9404", Offset = "0x3AC9404", VA = "0x3AC9404", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001834")]
			[Address(RVA = "0x3AC9408", Offset = "0x3AC9408", VA = "0x3AC9408", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001836")]
			[Address(RVA = "0x3AC95A8", Offset = "0x3AC95A8", VA = "0x3AC95A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x400018B")]
		private const int ThisDepth = 4;

		[Token(Token = "0x400018C")]
		private const int ThisChannels = 2;

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x3AC8248", Offset = "0x3AC8248", VA = "0x3AC8248")]
		public MatOfPoint()
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x3AC8298", Offset = "0x3AC8298", VA = "0x3AC8298")]
		public MatOfPoint(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x3AC82F8", Offset = "0x3AC82F8", VA = "0x3AC82F8")]
		public MatOfPoint(Mat mat)
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x3AC8358", Offset = "0x3AC8358", VA = "0x3AC8358")]
		public MatOfPoint(int rows, int cols)
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x3AC83EC", Offset = "0x3AC83EC", VA = "0x3AC83EC")]
		public MatOfPoint(Size size)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x3AC8478", Offset = "0x3AC8478", VA = "0x3AC8478")]
		public MatOfPoint(int rows, int cols, Point s)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x3AC854C", Offset = "0x3AC854C", VA = "0x3AC854C")]
		public MatOfPoint(Size size, Point s)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x3AC8610", Offset = "0x3AC8610", VA = "0x3AC8610")]
		public MatOfPoint(MatOfPoint m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x3AC8690", Offset = "0x3AC8690", VA = "0x3AC8690")]
		public MatOfPoint(MatOfPoint m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x3AC86F8", Offset = "0x3AC86F8", VA = "0x3AC86F8")]
		public MatOfPoint(MatOfPoint m, Rect roi)
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x3AC8770", Offset = "0x3AC8770", VA = "0x3AC8770")]
		public MatOfPoint(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x3AC881C", Offset = "0x3AC881C", VA = "0x3AC881C")]
		public MatOfPoint(int rows, int cols, Point[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x3AC88C8", Offset = "0x3AC88C8", VA = "0x3AC88C8")]
		public MatOfPoint(int rows, int cols, Point[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x3AC8974", Offset = "0x3AC8974", VA = "0x3AC8974")]
		public MatOfPoint(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x3AC8A18", Offset = "0x3AC8A18", VA = "0x3AC8A18")]
		public MatOfPoint(IEnumerable<int> sizes, Point[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x3AC8ABC", Offset = "0x3AC8ABC", VA = "0x3AC8ABC")]
		public MatOfPoint(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x3AC8B60", Offset = "0x3AC8B60", VA = "0x3AC8B60")]
		public MatOfPoint(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x3AC8BEC", Offset = "0x3AC8BEC", VA = "0x3AC8BEC")]
		public MatOfPoint(IEnumerable<int> sizes, Point s)
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x3AC8CB0", Offset = "0x3AC8CB0", VA = "0x3AC8CB0", Slot = "18")]
		public override MatIndexer<Point> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x3AC8D8C", Offset = "0x3AC8D8C", VA = "0x3AC8D8C")]
		public static MatOfPoint FromArray(params Point[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x3AC8E84", Offset = "0x3AC8E84", VA = "0x3AC8E84")]
		public static MatOfPoint FromArray(Point[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x3AC8FB8", Offset = "0x3AC8FB8", VA = "0x3AC8FB8")]
		public static MatOfPoint FromArray(IEnumerable<Point> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x3AC9038", Offset = "0x3AC9038", VA = "0x3AC9038", Slot = "20")]
		public override Point[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x3AC90D0", Offset = "0x3AC90D0", VA = "0x3AC90D0")]
		public int[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x3AC916C", Offset = "0x3AC916C", VA = "0x3AC916C", Slot = "21")]
		public override Point[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x3AC9258", Offset = "0x3AC9258", VA = "0x3AC9258", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC4C0", Offset = "0x1DDC4C0")]
		public override IEnumerator<Point> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x3AC9300", Offset = "0x3AC9300", VA = "0x3AC9300", Slot = "22")]
		public override void Add(Point value)
		{
		}
	}
	[Token(Token = "0x200007F")]
	public class MatOfPoint2d : Mat<Point2d, MatOfPoint2d>
	{
		[Token(Token = "0x20001A6")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB720", Offset = "0x1DDB720")]
		public new sealed class Indexer : MatIndexer<Point2d>
		{
			[Token(Token = "0x40006DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000273")]
			public override Point2d Item
			{
				[Token(Token = "0x6001839")]
				[Address(RVA = "0x216BB38", Offset = "0x216BB38", VA = "0x216BB38", Slot = "4")]
				get
				{
					return default(Point2d);
				}
				[Token(Token = "0x600183A")]
				[Address(RVA = "0x216BB7C", Offset = "0x216BB7C", VA = "0x216BB7C", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000274")]
			public override Point2d Item
			{
				[Token(Token = "0x600183B")]
				[Address(RVA = "0x216BBC0", Offset = "0x216BBC0", VA = "0x216BBC0", Slot = "6")]
				get
				{
					return default(Point2d);
				}
				[Token(Token = "0x600183C")]
				[Address(RVA = "0x216BC14", Offset = "0x216BC14", VA = "0x216BC14", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000275")]
			public override Point2d Item
			{
				[Token(Token = "0x600183D")]
				[Address(RVA = "0x216BC68", Offset = "0x216BC68", VA = "0x216BC68", Slot = "8")]
				get
				{
					return default(Point2d);
				}
				[Token(Token = "0x600183E")]
				[Address(RVA = "0x216BCD0", Offset = "0x216BCD0", VA = "0x216BCD0", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000276")]
			public override Point2d Item
			{
				[Token(Token = "0x600183F")]
				[Address(RVA = "0x216BD38", Offset = "0x216BD38", VA = "0x216BD38", Slot = "10")]
				get
				{
					return default(Point2d);
				}
				[Token(Token = "0x6001840")]
				[Address(RVA = "0x216BDC8", Offset = "0x216BDC8", VA = "0x216BDC8", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001838")]
			[Address(RVA = "0x216B9F0", Offset = "0x216B9F0", VA = "0x216B9F0")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB758", Offset = "0x1DDB758")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Point2d>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Point2d <>2__current;

			[Token(Token = "0x40006DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MatOfPoint2d <>4__this;

			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <rows>5__3;

			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <cols>5__4;

			[Token(Token = "0x40006E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <r>5__5;

			[Token(Token = "0x40006E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <c>5__6;

			[Token(Token = "0x17000277")]
			private Point2d System.Collections.Generic.IEnumerator<OpenCvSharp.Point2d>.Current
			{
				[Token(Token = "0x6001844")]
				[Address(RVA = "0x216BA6C", Offset = "0x216BA6C", VA = "0x216BA6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Point2d);
				}
			}

			[Token(Token = "0x17000278")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001846")]
				[Address(RVA = "0x216BAD4", Offset = "0x216BAD4", VA = "0x216BAD4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001841")]
			[Address(RVA = "0x216B828", Offset = "0x216B828", VA = "0x216B828")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6001842")]
			[Address(RVA = "0x216B854", Offset = "0x216B854", VA = "0x216B854", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001843")]
			[Address(RVA = "0x216B858", Offset = "0x216B858", VA = "0x216B858", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001845")]
			[Address(RVA = "0x216BA74", Offset = "0x216BA74", VA = "0x216BA74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x400018E")]
		private const int ThisDepth = 6;

		[Token(Token = "0x400018F")]
		private const int ThisChannels = 2;

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x3AC9984", Offset = "0x3AC9984", VA = "0x3AC9984")]
		public MatOfPoint2d()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x3AC99D4", Offset = "0x3AC99D4", VA = "0x3AC99D4")]
		public MatOfPoint2d(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x3AC9A34", Offset = "0x3AC9A34", VA = "0x3AC9A34")]
		public MatOfPoint2d(Mat mat)
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x3AC9A94", Offset = "0x3AC9A94", VA = "0x3AC9A94")]
		public MatOfPoint2d(int rows, int cols)
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x3AC9B28", Offset = "0x3AC9B28", VA = "0x3AC9B28")]
		public MatOfPoint2d(Size size)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x3AC9BB4", Offset = "0x3AC9BB4", VA = "0x3AC9BB4")]
		public MatOfPoint2d(int rows, int cols, Point2d s)
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x3AC9C90", Offset = "0x3AC9C90", VA = "0x3AC9C90")]
		public MatOfPoint2d(Size size, Point2d s)
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x3AC9D64", Offset = "0x3AC9D64", VA = "0x3AC9D64")]
		public MatOfPoint2d(MatOfPoint2d m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x3AC9DE4", Offset = "0x3AC9DE4", VA = "0x3AC9DE4")]
		public MatOfPoint2d(MatOfPoint2d m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x3AC9E4C", Offset = "0x3AC9E4C", VA = "0x3AC9E4C")]
		public MatOfPoint2d(MatOfPoint2d m, Rect roi)
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x3AC9EC4", Offset = "0x3AC9EC4", VA = "0x3AC9EC4")]
		public MatOfPoint2d(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x3AC9F70", Offset = "0x3AC9F70", VA = "0x3AC9F70")]
		public MatOfPoint2d(int rows, int cols, Point2d[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x3ACA01C", Offset = "0x3ACA01C", VA = "0x3ACA01C")]
		public MatOfPoint2d(int rows, int cols, Point2d[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x3ACA0C8", Offset = "0x3ACA0C8", VA = "0x3ACA0C8")]
		public MatOfPoint2d(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x3ACA16C", Offset = "0x3ACA16C", VA = "0x3ACA16C")]
		public MatOfPoint2d(IEnumerable<int> sizes, Point2d[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x3ACA210", Offset = "0x3ACA210", VA = "0x3ACA210")]
		public MatOfPoint2d(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x3ACA2B4", Offset = "0x3ACA2B4", VA = "0x3ACA2B4")]
		public MatOfPoint2d(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x3ACA340", Offset = "0x3ACA340", VA = "0x3ACA340")]
		public MatOfPoint2d(IEnumerable<int> sizes, Point2d s)
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x3ACA414", Offset = "0x3ACA414", VA = "0x3ACA414", Slot = "18")]
		public override MatIndexer<Point2d> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x3ACA478", Offset = "0x3ACA478", VA = "0x3ACA478")]
		public static MatOfPoint2d FromArray(params Point2d[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x3ACA570", Offset = "0x3ACA570", VA = "0x3ACA570")]
		public static MatOfPoint2d FromArray(Point2d[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x3ACA6A4", Offset = "0x3ACA6A4", VA = "0x3ACA6A4")]
		public static MatOfPoint2d FromArray(IEnumerable<Point2d> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x3ACA724", Offset = "0x3ACA724", VA = "0x3ACA724", Slot = "20")]
		public override Point2d[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x3ACA7BC", Offset = "0x3ACA7BC", VA = "0x3ACA7BC")]
		public double[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x3ACA858", Offset = "0x3ACA858", VA = "0x3ACA858", Slot = "21")]
		public override Point2d[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x3ACA944", Offset = "0x3ACA944", VA = "0x3ACA944", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC524", Offset = "0x1DDC524")]
		public override IEnumerator<Point2d> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x3ACA9C0", Offset = "0x3ACA9C0", VA = "0x3ACA9C0", Slot = "22")]
		public override void Add(Point2d value)
		{
		}
	}
	[Token(Token = "0x2000080")]
	public class MatOfPoint2f : Mat<Point2f, MatOfPoint2f>
	{
		[Token(Token = "0x20001A8")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB768", Offset = "0x1DDB768")]
		public new sealed class Indexer : MatIndexer<Point2f>
		{
			[Token(Token = "0x40006E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000279")]
			public override Point2f Item
			{
				[Token(Token = "0x6001848")]
				[Address(RVA = "0x216D340", Offset = "0x216D340", VA = "0x216D340", Slot = "4")]
				get
				{
					return default(Point2f);
				}
				[Token(Token = "0x6001849")]
				[Address(RVA = "0x216D384", Offset = "0x216D384", VA = "0x216D384", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700027A")]
			public override Point2f Item
			{
				[Token(Token = "0x600184A")]
				[Address(RVA = "0x216D3C8", Offset = "0x216D3C8", VA = "0x216D3C8", Slot = "6")]
				get
				{
					return default(Point2f);
				}
				[Token(Token = "0x600184B")]
				[Address(RVA = "0x216D41C", Offset = "0x216D41C", VA = "0x216D41C", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x1700027B")]
			public override Point2f Item
			{
				[Token(Token = "0x600184C")]
				[Address(RVA = "0x216D470", Offset = "0x216D470", VA = "0x216D470", Slot = "8")]
				get
				{
					return default(Point2f);
				}
				[Token(Token = "0x600184D")]
				[Address(RVA = "0x216D4D8", Offset = "0x216D4D8", VA = "0x216D4D8", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x1700027C")]
			public override Point2f Item
			{
				[Token(Token = "0x600184E")]
				[Address(RVA = "0x216D540", Offset = "0x216D540", VA = "0x216D540", Slot = "10")]
				get
				{
					return default(Point2f);
				}
				[Token(Token = "0x600184F")]
				[Address(RVA = "0x216D5D0", Offset = "0x216D5D0", VA = "0x216D5D0", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001847")]
			[Address(RVA = "0x216C948", Offset = "0x216C948", VA = "0x216C948")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001A9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB7A0", Offset = "0x1DDB7A0")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Point2f>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Point2f <>2__current;

			[Token(Token = "0x40006E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MatOfPoint2f <>4__this;

			[Token(Token = "0x40006E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <rows>5__3;

			[Token(Token = "0x40006E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <cols>5__4;

			[Token(Token = "0x40006EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <r>5__5;

			[Token(Token = "0x40006EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <c>5__6;

			[Token(Token = "0x1700027D")]
			private Point2f System.Collections.Generic.IEnumerator<OpenCvSharp.Point2f>.Current
			{
				[Token(Token = "0x6001853")]
				[Address(RVA = "0x216D274", Offset = "0x216D274", VA = "0x216D274", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Point2f);
				}
			}

			[Token(Token = "0x1700027E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001855")]
				[Address(RVA = "0x216D2DC", Offset = "0x216D2DC", VA = "0x216D2DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001850")]
			[Address(RVA = "0x216CF0C", Offset = "0x216CF0C", VA = "0x216CF0C")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6001851")]
			[Address(RVA = "0x216D0D8", Offset = "0x216D0D8", VA = "0x216D0D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001852")]
			[Address(RVA = "0x216D0DC", Offset = "0x216D0DC", VA = "0x216D0DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001854")]
			[Address(RVA = "0x216D27C", Offset = "0x216D27C", VA = "0x216D27C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000191")]
		private const int ThisDepth = 5;

		[Token(Token = "0x4000192")]
		private const int ThisChannels = 2;

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x216BE58", Offset = "0x216BE58", VA = "0x216BE58")]
		public MatOfPoint2f()
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x216BEA8", Offset = "0x216BEA8", VA = "0x216BEA8")]
		public MatOfPoint2f(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x216BF08", Offset = "0x216BF08", VA = "0x216BF08")]
		public MatOfPoint2f(Mat mat)
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x216BF68", Offset = "0x216BF68", VA = "0x216BF68")]
		public MatOfPoint2f(int rows, int cols)
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x216BFFC", Offset = "0x216BFFC", VA = "0x216BFFC")]
		public MatOfPoint2f(Size size)
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x216C088", Offset = "0x216C088", VA = "0x216C088")]
		public MatOfPoint2f(int rows, int cols, Point2f s)
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x216C164", Offset = "0x216C164", VA = "0x216C164")]
		public MatOfPoint2f(Size size, Point2f s)
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x216C238", Offset = "0x216C238", VA = "0x216C238")]
		public MatOfPoint2f(MatOfPoint2f m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x216C2B8", Offset = "0x216C2B8", VA = "0x216C2B8")]
		public MatOfPoint2f(MatOfPoint2f m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x216C320", Offset = "0x216C320", VA = "0x216C320")]
		public MatOfPoint2f(MatOfPoint2f m, Rect roi)
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x216C398", Offset = "0x216C398", VA = "0x216C398")]
		public MatOfPoint2f(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x216C444", Offset = "0x216C444", VA = "0x216C444")]
		public MatOfPoint2f(int rows, int cols, Point2f[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x216C4F0", Offset = "0x216C4F0", VA = "0x216C4F0")]
		public MatOfPoint2f(int rows, int cols, Point2f[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x216C59C", Offset = "0x216C59C", VA = "0x216C59C")]
		public MatOfPoint2f(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x216C640", Offset = "0x216C640", VA = "0x216C640")]
		public MatOfPoint2f(IEnumerable<int> sizes, Point2f[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x216C6E4", Offset = "0x216C6E4", VA = "0x216C6E4")]
		public MatOfPoint2f(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x216C788", Offset = "0x216C788", VA = "0x216C788")]
		public MatOfPoint2f(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x216C814", Offset = "0x216C814", VA = "0x216C814")]
		public MatOfPoint2f(IEnumerable<int> sizes, Point2f s)
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x216C8E8", Offset = "0x216C8E8", VA = "0x216C8E8", Slot = "18")]
		public override MatIndexer<Point2f> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x216C9C4", Offset = "0x216C9C4", VA = "0x216C9C4")]
		public static MatOfPoint2f FromArray(params Point2f[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x216CABC", Offset = "0x216CABC", VA = "0x216CABC")]
		public static MatOfPoint2f FromArray(Point2f[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x216CBF0", Offset = "0x216CBF0", VA = "0x216CBF0")]
		public static MatOfPoint2f FromArray(IEnumerable<Point2f> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x216CC70", Offset = "0x216CC70", VA = "0x216CC70", Slot = "20")]
		public override Point2f[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x216CD08", Offset = "0x216CD08", VA = "0x216CD08")]
		public float[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x216CDA4", Offset = "0x216CDA4", VA = "0x216CDA4", Slot = "21")]
		public override Point2f[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x216CE90", Offset = "0x216CE90", VA = "0x216CE90", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC588", Offset = "0x1DDC588")]
		public override IEnumerator<Point2f> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x216CF38", Offset = "0x216CF38", VA = "0x216CF38", Slot = "22")]
		public override void Add(Point2f value)
		{
		}
	}
	[Token(Token = "0x2000081")]
	public class MatOfPoint3d : Mat<Point3d, MatOfPoint3d>
	{
		[Token(Token = "0x20001AA")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB7B0", Offset = "0x1DDB7B0")]
		public new sealed class Indexer : MatIndexer<Point3d>
		{
			[Token(Token = "0x40006EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x1700027F")]
			public override Point3d Item
			{
				[Token(Token = "0x6001857")]
				[Address(RVA = "0x216EBA8", Offset = "0x216EBA8", VA = "0x216EBA8", Slot = "4")]
				get
				{
					return default(Point3d);
				}
				[Token(Token = "0x6001858")]
				[Address(RVA = "0x216EBF0", Offset = "0x216EBF0", VA = "0x216EBF0", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000280")]
			public override Point3d Item
			{
				[Token(Token = "0x6001859")]
				[Address(RVA = "0x216EC38", Offset = "0x216EC38", VA = "0x216EC38", Slot = "6")]
				get
				{
					return default(Point3d);
				}
				[Token(Token = "0x600185A")]
				[Address(RVA = "0x216EC90", Offset = "0x216EC90", VA = "0x216EC90", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000281")]
			public override Point3d Item
			{
				[Token(Token = "0x600185B")]
				[Address(RVA = "0x216ECE8", Offset = "0x216ECE8", VA = "0x216ECE8", Slot = "8")]
				get
				{
					return default(Point3d);
				}
				[Token(Token = "0x600185C")]
				[Address(RVA = "0x216ED54", Offset = "0x216ED54", VA = "0x216ED54", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000282")]
			public override Point3d Item
			{
				[Token(Token = "0x600185D")]
				[Address(RVA = "0x216EDC0", Offset = "0x216EDC0", VA = "0x216EDC0", Slot = "10")]
				get
				{
					return default(Point3d);
				}
				[Token(Token = "0x600185E")]
				[Address(RVA = "0x216EE54", Offset = "0x216EE54", VA = "0x216EE54", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001856")]
			[Address(RVA = "0x216E180", Offset = "0x216E180", VA = "0x216E180")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001AB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB7E8", Offset = "0x1DDB7E8")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Point3d>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Point3d <>2__current;

			[Token(Token = "0x40006EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MatOfPoint3d <>4__this;

			[Token(Token = "0x40006F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <rows>5__3;

			[Token(Token = "0x40006F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <cols>5__4;

			[Token(Token = "0x40006F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <r>5__5;

			[Token(Token = "0x40006F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private int <c>5__6;

			[Token(Token = "0x17000283")]
			private Point3d System.Collections.Generic.IEnumerator<OpenCvSharp.Point3d>.Current
			{
				[Token(Token = "0x6001862")]
				[Address(RVA = "0x216EAD0", Offset = "0x216EAD0", VA = "0x216EAD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Point3d);
				}
			}

			[Token(Token = "0x17000284")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001864")]
				[Address(RVA = "0x216EB3C", Offset = "0x216EB3C", VA = "0x216EB3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600185F")]
			[Address(RVA = "0x216E744", Offset = "0x216E744", VA = "0x216E744")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6001860")]
			[Address(RVA = "0x216E930", Offset = "0x216E930", VA = "0x216E930", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001861")]
			[Address(RVA = "0x216E934", Offset = "0x216E934", VA = "0x216E934", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001863")]
			[Address(RVA = "0x216EADC", Offset = "0x216EADC", VA = "0x216EADC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000194")]
		private const int ThisDepth = 6;

		[Token(Token = "0x4000195")]
		private const int ThisChannels = 3;

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x216D660", Offset = "0x216D660", VA = "0x216D660")]
		public MatOfPoint3d()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x216D6B0", Offset = "0x216D6B0", VA = "0x216D6B0")]
		public MatOfPoint3d(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x216D710", Offset = "0x216D710", VA = "0x216D710")]
		public MatOfPoint3d(Mat mat)
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x216D770", Offset = "0x216D770", VA = "0x216D770")]
		public MatOfPoint3d(int rows, int cols)
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x216D804", Offset = "0x216D804", VA = "0x216D804")]
		public MatOfPoint3d(Size size)
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x216D890", Offset = "0x216D890", VA = "0x216D890")]
		public MatOfPoint3d(int rows, int cols, Point3d s)
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x216D97C", Offset = "0x216D97C", VA = "0x216D97C")]
		public MatOfPoint3d(Size size, Point3d s)
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x216DA60", Offset = "0x216DA60", VA = "0x216DA60")]
		public MatOfPoint3d(MatOfPoint3d m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x216DAE0", Offset = "0x216DAE0", VA = "0x216DAE0")]
		public MatOfPoint3d(MatOfPoint3d m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x216DB48", Offset = "0x216DB48", VA = "0x216DB48")]
		public MatOfPoint3d(MatOfPoint3d m, Rect roi)
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x216DBC0", Offset = "0x216DBC0", VA = "0x216DBC0")]
		public MatOfPoint3d(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x216DC6C", Offset = "0x216DC6C", VA = "0x216DC6C")]
		public MatOfPoint3d(int rows, int cols, Point3d[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x216DD18", Offset = "0x216DD18", VA = "0x216DD18")]
		public MatOfPoint3d(int rows, int cols, Point3d[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x216DDC4", Offset = "0x216DDC4", VA = "0x216DDC4")]
		public MatOfPoint3d(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x216DE68", Offset = "0x216DE68", VA = "0x216DE68")]
		public MatOfPoint3d(IEnumerable<int> sizes, Point3d[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x216DF0C", Offset = "0x216DF0C", VA = "0x216DF0C")]
		public MatOfPoint3d(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x216DFB0", Offset = "0x216DFB0", VA = "0x216DFB0")]
		public MatOfPoint3d(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x216E03C", Offset = "0x216E03C", VA = "0x216E03C")]
		public MatOfPoint3d(IEnumerable<int> sizes, Point3d s)
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x216E120", Offset = "0x216E120", VA = "0x216E120", Slot = "18")]
		public override MatIndexer<Point3d> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x216E1FC", Offset = "0x216E1FC", VA = "0x216E1FC")]
		public static MatOfPoint3d FromArray(params Point3d[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x216E2F4", Offset = "0x216E2F4", VA = "0x216E2F4")]
		public static MatOfPoint3d FromArray(Point3d[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x216E428", Offset = "0x216E428", VA = "0x216E428")]
		public static MatOfPoint3d FromArray(IEnumerable<Point3d> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x216E4A8", Offset = "0x216E4A8", VA = "0x216E4A8", Slot = "20")]
		public override Point3d[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x216E540", Offset = "0x216E540", VA = "0x216E540")]
		public double[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x216E5DC", Offset = "0x216E5DC", VA = "0x216E5DC", Slot = "21")]
		public override Point3d[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x216E6C8", Offset = "0x216E6C8", VA = "0x216E6C8", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC5EC", Offset = "0x1DDC5EC")]
		public override IEnumerator<Point3d> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x216E770", Offset = "0x216E770", VA = "0x216E770", Slot = "22")]
		public override void Add(Point3d value)
		{
		}
	}
	[Token(Token = "0x2000082")]
	public class MatOfPoint3f : Mat<Point3f, MatOfPoint3f>
	{
		[Token(Token = "0x20001AC")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB7F8", Offset = "0x1DDB7F8")]
		public new sealed class Indexer : MatIndexer<Point3f>
		{
			[Token(Token = "0x40006F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000285")]
			public override Point3f Item
			{
				[Token(Token = "0x6001866")]
				[Address(RVA = "0x2170430", Offset = "0x2170430", VA = "0x2170430", Slot = "4")]
				get
				{
					return default(Point3f);
				}
				[Token(Token = "0x6001867")]
				[Address(RVA = "0x2170478", Offset = "0x2170478", VA = "0x2170478", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000286")]
			public override Point3f Item
			{
				[Token(Token = "0x6001868")]
				[Address(RVA = "0x21704C0", Offset = "0x21704C0", VA = "0x21704C0", Slot = "6")]
				get
				{
					return default(Point3f);
				}
				[Token(Token = "0x6001869")]
				[Address(RVA = "0x2170518", Offset = "0x2170518", VA = "0x2170518", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000287")]
			public override Point3f Item
			{
				[Token(Token = "0x600186A")]
				[Address(RVA = "0x2170570", Offset = "0x2170570", VA = "0x2170570", Slot = "8")]
				get
				{
					return default(Point3f);
				}
				[Token(Token = "0x600186B")]
				[Address(RVA = "0x21705DC", Offset = "0x21705DC", VA = "0x21705DC", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000288")]
			public override Point3f Item
			{
				[Token(Token = "0x600186C")]
				[Address(RVA = "0x2170648", Offset = "0x2170648", VA = "0x2170648", Slot = "10")]
				get
				{
					return default(Point3f);
				}
				[Token(Token = "0x600186D")]
				[Address(RVA = "0x21706DC", Offset = "0x21706DC", VA = "0x21706DC", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001865")]
			[Address(RVA = "0x216FA08", Offset = "0x216FA08", VA = "0x216FA08")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001AD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB830", Offset = "0x1DDB830")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Point3f>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Point3f <>2__current;

			[Token(Token = "0x40006F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MatOfPoint3f <>4__this;

			[Token(Token = "0x40006F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x40006FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <rows>5__3;

			[Token(Token = "0x40006FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <cols>5__4;

			[Token(Token = "0x40006FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <r>5__5;

			[Token(Token = "0x40006FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <c>5__6;

			[Token(Token = "0x17000289")]
			private Point3f System.Collections.Generic.IEnumerator<OpenCvSharp.Point3f>.Current
			{
				[Token(Token = "0x6001871")]
				[Address(RVA = "0x2170358", Offset = "0x2170358", VA = "0x2170358", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Point3f);
				}
			}

			[Token(Token = "0x1700028A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001873")]
				[Address(RVA = "0x21703C4", Offset = "0x21703C4", VA = "0x21703C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600186E")]
			[Address(RVA = "0x216FFCC", Offset = "0x216FFCC", VA = "0x216FFCC")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600186F")]
			[Address(RVA = "0x21701B8", Offset = "0x21701B8", VA = "0x21701B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001870")]
			[Address(RVA = "0x21701BC", Offset = "0x21701BC", VA = "0x21701BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001872")]
			[Address(RVA = "0x2170364", Offset = "0x2170364", VA = "0x2170364", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x4000197")]
		private const int ThisDepth = 5;

		[Token(Token = "0x4000198")]
		private const int ThisChannels = 3;

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x216EEE8", Offset = "0x216EEE8", VA = "0x216EEE8")]
		public MatOfPoint3f()
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x216EF38", Offset = "0x216EF38", VA = "0x216EF38")]
		public MatOfPoint3f(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x216EF98", Offset = "0x216EF98", VA = "0x216EF98")]
		public MatOfPoint3f(Mat mat)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x216EFF8", Offset = "0x216EFF8", VA = "0x216EFF8")]
		public MatOfPoint3f(int rows, int cols)
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x216F08C", Offset = "0x216F08C", VA = "0x216F08C")]
		public MatOfPoint3f(Size size)
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x216F118", Offset = "0x216F118", VA = "0x216F118")]
		public MatOfPoint3f(int rows, int cols, Point3f s)
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x216F204", Offset = "0x216F204", VA = "0x216F204")]
		public MatOfPoint3f(Size size, Point3f s)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x216F2E8", Offset = "0x216F2E8", VA = "0x216F2E8")]
		public MatOfPoint3f(MatOfPoint3f m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x216F368", Offset = "0x216F368", VA = "0x216F368")]
		public MatOfPoint3f(MatOfPoint3f m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x216F3D0", Offset = "0x216F3D0", VA = "0x216F3D0")]
		public MatOfPoint3f(MatOfPoint3f m, Rect roi)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x216F448", Offset = "0x216F448", VA = "0x216F448")]
		public MatOfPoint3f(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x216F4F4", Offset = "0x216F4F4", VA = "0x216F4F4")]
		public MatOfPoint3f(int rows, int cols, Point3f[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x216F5A0", Offset = "0x216F5A0", VA = "0x216F5A0")]
		public MatOfPoint3f(int rows, int cols, Point3f[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x216F64C", Offset = "0x216F64C", VA = "0x216F64C")]
		public MatOfPoint3f(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x216F6F0", Offset = "0x216F6F0", VA = "0x216F6F0")]
		public MatOfPoint3f(IEnumerable<int> sizes, Point3f[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x216F794", Offset = "0x216F794", VA = "0x216F794")]
		public MatOfPoint3f(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x216F838", Offset = "0x216F838", VA = "0x216F838")]
		public MatOfPoint3f(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x216F8C4", Offset = "0x216F8C4", VA = "0x216F8C4")]
		public MatOfPoint3f(IEnumerable<int> sizes, Point3f s)
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x216F9A8", Offset = "0x216F9A8", VA = "0x216F9A8", Slot = "18")]
		public override MatIndexer<Point3f> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x216FA84", Offset = "0x216FA84", VA = "0x216FA84")]
		public static MatOfPoint3f FromArray(params Point3f[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x216FB7C", Offset = "0x216FB7C", VA = "0x216FB7C")]
		public static MatOfPoint3f FromArray(Point3f[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x216FCB0", Offset = "0x216FCB0", VA = "0x216FCB0")]
		public static MatOfPoint3f FromArray(IEnumerable<Point3f> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x216FD30", Offset = "0x216FD30", VA = "0x216FD30", Slot = "20")]
		public override Point3f[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x216FDC8", Offset = "0x216FDC8", VA = "0x216FDC8")]
		public float[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x216FE64", Offset = "0x216FE64", VA = "0x216FE64", Slot = "21")]
		public override Point3f[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x216FF50", Offset = "0x216FF50", VA = "0x216FF50", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC650", Offset = "0x1DDC650")]
		public override IEnumerator<Point3f> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x216FFF8", Offset = "0x216FFF8", VA = "0x216FFF8", Slot = "22")]
		public override void Add(Point3f value)
		{
		}
	}
	[Token(Token = "0x2000083")]
	public class MatOfPoint3i : Mat<Point3i, MatOfPoint3i>
	{
		[Token(Token = "0x20001AE")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB840", Offset = "0x1DDB840")]
		public new sealed class Indexer : MatIndexer<Point3i>
		{
			[Token(Token = "0x40006FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x1700028B")]
			public override Point3i Item
			{
				[Token(Token = "0x6001875")]
				[Address(RVA = "0x2171C6C", Offset = "0x2171C6C", VA = "0x2171C6C", Slot = "4")]
				get
				{
					return default(Point3i);
				}
				[Token(Token = "0x6001876")]
				[Address(RVA = "0x2171CB4", Offset = "0x2171CB4", VA = "0x2171CB4", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700028C")]
			public override Point3i Item
			{
				[Token(Token = "0x6001877")]
				[Address(RVA = "0x2171CFC", Offset = "0x2171CFC", VA = "0x2171CFC", Slot = "6")]
				get
				{
					return default(Point3i);
				}
				[Token(Token = "0x6001878")]
				[Address(RVA = "0x2171D54", Offset = "0x2171D54", VA = "0x2171D54", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x1700028D")]
			public override Point3i Item
			{
				[Token(Token = "0x6001879")]
				[Address(RVA = "0x2171DAC", Offset = "0x2171DAC", VA = "0x2171DAC", Slot = "8")]
				get
				{
					return default(Point3i);
				}
				[Token(Token = "0x600187A")]
				[Address(RVA = "0x2171E18", Offset = "0x2171E18", VA = "0x2171E18", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x1700028E")]
			public override Point3i Item
			{
				[Token(Token = "0x600187B")]
				[Address(RVA = "0x2171E84", Offset = "0x2171E84", VA = "0x2171E84", Slot = "10")]
				get
				{
					return default(Point3i);
				}
				[Token(Token = "0x600187C")]
				[Address(RVA = "0x2171F18", Offset = "0x2171F18", VA = "0x2171F18", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001874")]
			[Address(RVA = "0x2171260", Offset = "0x2171260", VA = "0x2171260")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001AF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB878", Offset = "0x1DDB878")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Point3i>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Point3i <>2__current;

			[Token(Token = "0x4000701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MatOfPoint3i <>4__this;

			[Token(Token = "0x4000702")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x4000703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <rows>5__3;

			[Token(Token = "0x4000704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <cols>5__4;

			[Token(Token = "0x4000705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <r>5__5;

			[Token(Token = "0x4000706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <c>5__6;

			[Token(Token = "0x1700028F")]
			private Point3i System.Collections.Generic.IEnumerator<OpenCvSharp.Point3i>.Current
			{
				[Token(Token = "0x6001880")]
				[Address(RVA = "0x2171B90", Offset = "0x2171B90", VA = "0x2171B90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Point3i);
				}
			}

			[Token(Token = "0x17000290")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001882")]
				[Address(RVA = "0x2171C00", Offset = "0x2171C00", VA = "0x2171C00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600187D")]
			[Address(RVA = "0x2171824", Offset = "0x2171824", VA = "0x2171824")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600187E")]
			[Address(RVA = "0x21719F0", Offset = "0x21719F0", VA = "0x21719F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600187F")]
			[Address(RVA = "0x21719F4", Offset = "0x21719F4", VA = "0x21719F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001881")]
			[Address(RVA = "0x2171BA0", Offset = "0x2171BA0", VA = "0x2171BA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x400019A")]
		private const int ThisDepth = 4;

		[Token(Token = "0x400019B")]
		private const int ThisChannels = 3;

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x2170770", Offset = "0x2170770", VA = "0x2170770")]
		public MatOfPoint3i()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x21707C0", Offset = "0x21707C0", VA = "0x21707C0")]
		public MatOfPoint3i(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x2170820", Offset = "0x2170820", VA = "0x2170820")]
		public MatOfPoint3i(Mat mat)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x2170880", Offset = "0x2170880", VA = "0x2170880")]
		public MatOfPoint3i(int rows, int cols)
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x2170914", Offset = "0x2170914", VA = "0x2170914")]
		public MatOfPoint3i(Size size)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x21709A0", Offset = "0x21709A0", VA = "0x21709A0")]
		public MatOfPoint3i(int rows, int cols, Point3i s)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x2170A7C", Offset = "0x2170A7C", VA = "0x2170A7C")]
		public MatOfPoint3i(Size size, Point3i s)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x2170B50", Offset = "0x2170B50", VA = "0x2170B50")]
		public MatOfPoint3i(MatOfPoint3i m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x2170BD0", Offset = "0x2170BD0", VA = "0x2170BD0")]
		public MatOfPoint3i(MatOfPoint3i m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x2170C38", Offset = "0x2170C38", VA = "0x2170C38")]
		public MatOfPoint3i(MatOfPoint3i m, Rect roi)
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x2170CB0", Offset = "0x2170CB0", VA = "0x2170CB0")]
		public MatOfPoint3i(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x2170D5C", Offset = "0x2170D5C", VA = "0x2170D5C")]
		public MatOfPoint3i(int rows, int cols, Point3i[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x2170E08", Offset = "0x2170E08", VA = "0x2170E08")]
		public MatOfPoint3i(int rows, int cols, Point3i[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x2170EB4", Offset = "0x2170EB4", VA = "0x2170EB4")]
		public MatOfPoint3i(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x2170F58", Offset = "0x2170F58", VA = "0x2170F58")]
		public MatOfPoint3i(IEnumerable<int> sizes, Point3i[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x2170FFC", Offset = "0x2170FFC", VA = "0x2170FFC")]
		public MatOfPoint3i(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x21710A0", Offset = "0x21710A0", VA = "0x21710A0")]
		public MatOfPoint3i(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x217112C", Offset = "0x217112C", VA = "0x217112C")]
		public MatOfPoint3i(IEnumerable<int> sizes, Point3i s)
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x2171200", Offset = "0x2171200", VA = "0x2171200", Slot = "18")]
		public override MatIndexer<Point3i> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x21712DC", Offset = "0x21712DC", VA = "0x21712DC")]
		public static MatOfPoint3i FromArray(params Point3i[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x21713D4", Offset = "0x21713D4", VA = "0x21713D4")]
		public static MatOfPoint3i FromArray(Point3i[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x2171508", Offset = "0x2171508", VA = "0x2171508")]
		public static MatOfPoint3i FromArray(IEnumerable<Point3i> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x2171588", Offset = "0x2171588", VA = "0x2171588", Slot = "20")]
		public override Point3i[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x2171620", Offset = "0x2171620", VA = "0x2171620")]
		public int[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x21716BC", Offset = "0x21716BC", VA = "0x21716BC", Slot = "21")]
		public override Point3i[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x21717A8", Offset = "0x21717A8", VA = "0x21717A8", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC6B4", Offset = "0x1DDC6B4")]
		public override IEnumerator<Point3i> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x2171850", Offset = "0x2171850", VA = "0x2171850", Slot = "22")]
		public override void Add(Point3i value)
		{
		}
	}
	[Token(Token = "0x2000084")]
	public class MatOfRect : Mat<Rect, MatOfRect>
	{
		[Token(Token = "0x20001B0")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB888", Offset = "0x1DDB888")]
		public new sealed class Indexer : MatIndexer<Rect>
		{
			[Token(Token = "0x4000707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000291")]
			public override Rect Item
			{
				[Token(Token = "0x6001884")]
				[Address(RVA = "0x21734A4", Offset = "0x21734A4", VA = "0x21734A4", Slot = "4")]
				get
				{
					return default(Rect);
				}
				[Token(Token = "0x6001885")]
				[Address(RVA = "0x21734E8", Offset = "0x21734E8", VA = "0x21734E8", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000292")]
			public override Rect Item
			{
				[Token(Token = "0x6001886")]
				[Address(RVA = "0x217352C", Offset = "0x217352C", VA = "0x217352C", Slot = "6")]
				get
				{
					return default(Rect);
				}
				[Token(Token = "0x6001887")]
				[Address(RVA = "0x2173580", Offset = "0x2173580", VA = "0x2173580", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000293")]
			public override Rect Item
			{
				[Token(Token = "0x6001888")]
				[Address(RVA = "0x21735D4", Offset = "0x21735D4", VA = "0x21735D4", Slot = "8")]
				get
				{
					return default(Rect);
				}
				[Token(Token = "0x6001889")]
				[Address(RVA = "0x217363C", Offset = "0x217363C", VA = "0x217363C", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x17000294")]
			public override Rect Item
			{
				[Token(Token = "0x600188A")]
				[Address(RVA = "0x21736A4", Offset = "0x21736A4", VA = "0x21736A4", Slot = "10")]
				get
				{
					return default(Rect);
				}
				[Token(Token = "0x600188B")]
				[Address(RVA = "0x2173734", Offset = "0x2173734", VA = "0x2173734", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001883")]
			[Address(RVA = "0x2172A9C", Offset = "0x2172A9C", VA = "0x2172A9C")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001B1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB8C0", Offset = "0x1DDB8C0")]
		private sealed class <GetEnumerator>d__29 : IEnumerator<Rect>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Rect <>2__current;

			[Token(Token = "0x400070A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MatOfRect <>4__this;

			[Token(Token = "0x400070B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x400070C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <rows>5__3;

			[Token(Token = "0x400070D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <cols>5__4;

			[Token(Token = "0x400070E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <r>5__5;

			[Token(Token = "0x400070F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <c>5__6;

			[Token(Token = "0x17000295")]
			private Rect System.Collections.Generic.IEnumerator<OpenCvSharp.Rect>.Current
			{
				[Token(Token = "0x600188F")]
				[Address(RVA = "0x21733CC", Offset = "0x21733CC", VA = "0x21733CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(Rect);
				}
			}

			[Token(Token = "0x17000296")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001891")]
				[Address(RVA = "0x217343C", Offset = "0x217343C", VA = "0x217343C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600188C")]
			[Address(RVA = "0x2173060", Offset = "0x2173060", VA = "0x2173060")]
			[DebuggerHidden]
			public <GetEnumerator>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600188D")]
			[Address(RVA = "0x217322C", Offset = "0x217322C", VA = "0x217322C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600188E")]
			[Address(RVA = "0x2173230", Offset = "0x2173230", VA = "0x2173230", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001890")]
			[Address(RVA = "0x21733DC", Offset = "0x21733DC", VA = "0x21733DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x400019D")]
		private const int ThisDepth = 4;

		[Token(Token = "0x400019E")]
		private const int ThisChannels = 4;

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x2171FAC", Offset = "0x2171FAC", VA = "0x2171FAC")]
		public MatOfRect()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x2171FFC", Offset = "0x2171FFC", VA = "0x2171FFC")]
		public MatOfRect(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x217205C", Offset = "0x217205C", VA = "0x217205C")]
		public MatOfRect(Mat mat)
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x21720BC", Offset = "0x21720BC", VA = "0x21720BC")]
		public MatOfRect(int rows, int cols)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x2172150", Offset = "0x2172150", VA = "0x2172150")]
		public MatOfRect(Size size)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x21721DC", Offset = "0x21721DC", VA = "0x21721DC")]
		public MatOfRect(int rows, int cols, Rect s)
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x21722B8", Offset = "0x21722B8", VA = "0x21722B8")]
		public MatOfRect(Size size, Rect s)
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x217238C", Offset = "0x217238C", VA = "0x217238C")]
		public MatOfRect(MatOfRect m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x217240C", Offset = "0x217240C", VA = "0x217240C")]
		public MatOfRect(MatOfRect m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x2172474", Offset = "0x2172474", VA = "0x2172474")]
		public MatOfRect(MatOfRect m, Rect roi)
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x21724EC", Offset = "0x21724EC", VA = "0x21724EC")]
		public MatOfRect(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x2172598", Offset = "0x2172598", VA = "0x2172598")]
		public MatOfRect(int rows, int cols, Rect[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x2172644", Offset = "0x2172644", VA = "0x2172644")]
		public MatOfRect(int rows, int cols, Rect[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x21726F0", Offset = "0x21726F0", VA = "0x21726F0")]
		public MatOfRect(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x2172794", Offset = "0x2172794", VA = "0x2172794")]
		public MatOfRect(IEnumerable<int> sizes, Rect[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x2172838", Offset = "0x2172838", VA = "0x2172838")]
		public MatOfRect(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x21728DC", Offset = "0x21728DC", VA = "0x21728DC")]
		public MatOfRect(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x2172968", Offset = "0x2172968", VA = "0x2172968")]
		public MatOfRect(IEnumerable<int> sizes, Rect s)
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x2172A3C", Offset = "0x2172A3C", VA = "0x2172A3C", Slot = "18")]
		public override MatIndexer<Rect> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x2172B18", Offset = "0x2172B18", VA = "0x2172B18")]
		public static MatOfRect FromArray(params Rect[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x2172C10", Offset = "0x2172C10", VA = "0x2172C10")]
		public static MatOfRect FromArray(Rect[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x2172D44", Offset = "0x2172D44", VA = "0x2172D44")]
		public static MatOfRect FromArray(IEnumerable<Rect> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x2172DC4", Offset = "0x2172DC4", VA = "0x2172DC4", Slot = "20")]
		public override Rect[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x2172E5C", Offset = "0x2172E5C", VA = "0x2172E5C")]
		public int[] ToPrimitiveArray()
		{
			return null;
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x2172EF8", Offset = "0x2172EF8", VA = "0x2172EF8", Slot = "21")]
		public override Rect[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x2172FE4", Offset = "0x2172FE4", VA = "0x2172FE4", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC718", Offset = "0x1DDC718")]
		public override IEnumerator<Rect> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x217308C", Offset = "0x217308C", VA = "0x217308C", Slot = "22")]
		public override void Add(Rect value)
		{
		}
	}
	[Token(Token = "0x2000085")]
	public class MatOfShort : Mat<short, MatOfShort>
	{
		[Token(Token = "0x20001B2")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB8D0", Offset = "0x1DDB8D0")]
		public new sealed class Indexer : MatIndexer<short>
		{
			[Token(Token = "0x4000710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x17000297")]
			public override short Item
			{
				[Token(Token = "0x6001893")]
				[Address(RVA = "0x2174BE4", Offset = "0x2174BE4", VA = "0x2174BE4", Slot = "4")]
				get
				{
					return default(short);
				}
				[Token(Token = "0x6001894")]
				[Address(RVA = "0x2174C28", Offset = "0x2174C28", VA = "0x2174C28", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000298")]
			public override short Item
			{
				[Token(Token = "0x6001895")]
				[Address(RVA = "0x2174C6C", Offset = "0x2174C6C", VA = "0x2174C6C", Slot = "6")]
				get
				{
					return default(short);
				}
				[Token(Token = "0x6001896")]
				[Address(RVA = "0x2174CC0", Offset = "0x2174CC0", VA = "0x2174CC0", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x17000299")]
			public override short Item
			{
				[Token(Token = "0x6001897")]
				[Address(RVA = "0x2174D14", Offset = "0x2174D14", VA = "0x2174D14", Slot = "8")]
				get
				{
					return default(short);
				}
				[Token(Token = "0x6001898")]
				[Address(RVA = "0x2174D7C", Offset = "0x2174D7C", VA = "0x2174D7C", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x1700029A")]
			public override short Item
			{
				[Token(Token = "0x6001899")]
				[Address(RVA = "0x2174DE4", Offset = "0x2174DE4", VA = "0x2174DE4", Slot = "10")]
				get
				{
					return default(short);
				}
				[Token(Token = "0x600189A")]
				[Address(RVA = "0x2174E70", Offset = "0x2174E70", VA = "0x2174E70", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x6001892")]
			[Address(RVA = "0x2174298", Offset = "0x2174298", VA = "0x2174298")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001B3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB908", Offset = "0x1DDB908")]
		private sealed class <GetEnumerator>d__28 : IEnumerator<short>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private short <>2__current;

			[Token(Token = "0x4000713")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatOfShort <>4__this;

			[Token(Token = "0x4000714")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x4000715")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <rows>5__3;

			[Token(Token = "0x4000716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <cols>5__4;

			[Token(Token = "0x4000717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <r>5__5;

			[Token(Token = "0x4000718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <c>5__6;

			[Token(Token = "0x1700029B")]
			private short System.Collections.Generic.IEnumerator<System.Int16>.Current
			{
				[Token(Token = "0x600189E")]
				[Address(RVA = "0x2174B18", Offset = "0x2174B18", VA = "0x2174B18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x1700029C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018A0")]
				[Address(RVA = "0x2174B80", Offset = "0x2174B80", VA = "0x2174B80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600189B")]
			[Address(RVA = "0x21747C0", Offset = "0x21747C0", VA = "0x21747C0")]
			[DebuggerHidden]
			public <GetEnumerator>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x600189C")]
			[Address(RVA = "0x217497C", Offset = "0x217497C", VA = "0x217497C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600189D")]
			[Address(RVA = "0x2174980", Offset = "0x2174980", VA = "0x2174980", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600189F")]
			[Address(RVA = "0x2174B20", Offset = "0x2174B20", VA = "0x2174B20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x40001A0")]
		private const int ThisDepth = 3;

		[Token(Token = "0x40001A1")]
		private const int ThisChannels = 1;

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x21737C4", Offset = "0x21737C4", VA = "0x21737C4")]
		public MatOfShort()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x2173814", Offset = "0x2173814", VA = "0x2173814")]
		public MatOfShort(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x2173874", Offset = "0x2173874", VA = "0x2173874")]
		public MatOfShort(Mat mat)
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x21738D4", Offset = "0x21738D4", VA = "0x21738D4")]
		public MatOfShort(int rows, int cols)
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x2173968", Offset = "0x2173968", VA = "0x2173968")]
		public MatOfShort(Size size)
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x21739F4", Offset = "0x21739F4", VA = "0x21739F4")]
		public MatOfShort(int rows, int cols, short s)
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x2173ACC", Offset = "0x2173ACC", VA = "0x2173ACC")]
		public MatOfShort(Size size, short s)
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x2173B94", Offset = "0x2173B94", VA = "0x2173B94")]
		public MatOfShort(MatOfShort m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x2173C14", Offset = "0x2173C14", VA = "0x2173C14")]
		public MatOfShort(MatOfShort m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x2173C7C", Offset = "0x2173C7C", VA = "0x2173C7C")]
		public MatOfShort(MatOfShort m, Rect roi)
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x2173CF4", Offset = "0x2173CF4", VA = "0x2173CF4")]
		public MatOfShort(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x2173DA0", Offset = "0x2173DA0", VA = "0x2173DA0")]
		public MatOfShort(int rows, int cols, short[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x2173E4C", Offset = "0x2173E4C", VA = "0x2173E4C")]
		public MatOfShort(int rows, int cols, short[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x2173EF8", Offset = "0x2173EF8", VA = "0x2173EF8")]
		public MatOfShort(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x2173F9C", Offset = "0x2173F9C", VA = "0x2173F9C")]
		public MatOfShort(IEnumerable<int> sizes, short[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x2174040", Offset = "0x2174040", VA = "0x2174040")]
		public MatOfShort(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x21740E4", Offset = "0x21740E4", VA = "0x21740E4")]
		public MatOfShort(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x2174170", Offset = "0x2174170", VA = "0x2174170")]
		public MatOfShort(IEnumerable<int> sizes, short s)
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x2174238", Offset = "0x2174238", VA = "0x2174238", Slot = "18")]
		public override MatIndexer<short> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x2174314", Offset = "0x2174314", VA = "0x2174314")]
		public static MatOfShort FromArray(params short[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x217440C", Offset = "0x217440C", VA = "0x217440C")]
		public static MatOfShort FromArray(short[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x2174540", Offset = "0x2174540", VA = "0x2174540")]
		public static MatOfShort FromArray(IEnumerable<short> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x21745C0", Offset = "0x21745C0", VA = "0x21745C0", Slot = "20")]
		public override short[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x2174658", Offset = "0x2174658", VA = "0x2174658", Slot = "21")]
		public override short[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x2174744", Offset = "0x2174744", VA = "0x2174744", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC77C", Offset = "0x1DDC77C")]
		public override IEnumerator<short> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x21747EC", Offset = "0x21747EC", VA = "0x21747EC", Slot = "22")]
		public override void Add(short value)
		{
		}
	}
	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAA40", Offset = "0x1DDAA40")]
	public abstract class Mat<TElem, TInherit> : Mat, ICollection<TElem>, IEnumerable<TElem>, IEnumerable where TElem : struct where TInherit : Mat, new()
	{
		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool disposed;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Mat sourceMat;

		[Token(Token = "0x170000A1")]
		public new TInherit Item
		{
			[Token(Token = "0x6000F94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F95")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public new TInherit Item
		{
			[Token(Token = "0x6000F96")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F97")]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		public new TInherit Item
		{
			[Token(Token = "0x6000F98")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F99")]
			set
			{
			}
		}

		[Token(Token = "0x170000A4")]
		public new TInherit Item
		{
			[Token(Token = "0x6000F9A")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F9B")]
			set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public int Count
		{
			[Token(Token = "0x6000FA2")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A6")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000FA3")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F75")]
		protected Mat()
		{
		}

		[Token(Token = "0x6000F76")]
		protected Mat(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000F77")]
		protected Mat(Mat mat)
		{
		}

		[Token(Token = "0x6000F78")]
		protected Mat(int rows, int cols, MatType type)
		{
		}

		[Token(Token = "0x6000F79")]
		protected Mat(Size size, MatType type)
		{
		}

		[Token(Token = "0x6000F7A")]
		protected Mat(int rows, int cols, MatType type, Scalar s)
		{
		}

		[Token(Token = "0x6000F7B")]
		protected Mat(Size size, MatType type, Scalar s)
		{
		}

		[Token(Token = "0x6000F7C")]
		protected Mat(Mat<TElem, TInherit> m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000F7D")]
		protected Mat(Mat<TElem, TInherit> m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000F7E")]
		protected Mat(Mat<TElem, TInherit> m, Rect roi)
		{
		}

		[Token(Token = "0x6000F7F")]
		protected Mat(int rows, int cols, MatType type, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F80")]
		protected Mat(int rows, int cols, MatType type, Array data, long step = 0L)
		{
		}

		[Token(Token = "0x6000F81")]
		protected Mat(IEnumerable<int> sizes, MatType type, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F82")]
		protected Mat(IEnumerable<int> sizes, MatType type, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000F83")]
		protected Mat(IEnumerable<int> sizes, MatType type)
		{
		}

		[Token(Token = "0x6000F84")]
		protected Mat(IEnumerable<int> sizes, MatType type, Scalar s)
		{
		}

		[Token(Token = "0x6000F85")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000F86")]
		public abstract MatIndexer<TElem> GetIndexer();

		[Token(Token = "0x6000F87")]
		public abstract IEnumerator<TElem> GetEnumerator();

		[Token(Token = "0x6000F88")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000F89")]
		public abstract TElem[] ToArray();

		[Token(Token = "0x6000F8A")]
		public abstract TElem[,] ToRectangularArray();

		[Token(Token = "0x6000F8B")]
		protected TInherit Wrap(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6000F8C")]
		public new TInherit Clone()
		{
			return null;
		}

		[Token(Token = "0x6000F8D")]
		public TInherit Reshape(int rows)
		{
			return null;
		}

		[Token(Token = "0x6000F8E")]
		public TInherit Reshape(params int[] newDims)
		{
			return null;
		}

		[Token(Token = "0x6000F8F")]
		public new TInherit T()
		{
			return null;
		}

		[Token(Token = "0x6000F90")]
		public new TInherit SubMat(int rowStart, int rowEnd, int colStart, int colEnd)
		{
			return null;
		}

		[Token(Token = "0x6000F91")]
		public new TInherit SubMat(Range rowRange, Range colRange)
		{
			return null;
		}

		[Token(Token = "0x6000F92")]
		public new TInherit SubMat(Rect roi)
		{
			return null;
		}

		[Token(Token = "0x6000F93")]
		public new TInherit SubMat(params Range[] ranges)
		{
			return null;
		}

		[Token(Token = "0x6000F9C")]
		public abstract void Add(TElem value);

		[Token(Token = "0x6000F9D")]
		public bool Remove(TElem item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9E")]
		public bool Contains(TElem item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9F")]
		public int IndexOf(TElem item)
		{
			return default(int);
		}

		[Token(Token = "0x6000FA0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000FA1")]
		public void CopyTo(TElem[] array, int arrayIndex)
		{
		}
	}
	[Token(Token = "0x2000087")]
	public class MatOfUShort : Mat<ushort, MatOfUShort>
	{
		[Token(Token = "0x20001B4")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB918", Offset = "0x1DDB918")]
		public new sealed class Indexer : MatIndexer<ushort>
		{
			[Token(Token = "0x4000719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private unsafe readonly byte* ptr;

			[Token(Token = "0x1700029D")]
			public override ushort Item
			{
				[Token(Token = "0x60018A2")]
				[Address(RVA = "0x217631C", Offset = "0x217631C", VA = "0x217631C", Slot = "4")]
				get
				{
					return default(ushort);
				}
				[Token(Token = "0x60018A3")]
				[Address(RVA = "0x2176360", Offset = "0x2176360", VA = "0x2176360", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700029E")]
			public override ushort Item
			{
				[Token(Token = "0x60018A4")]
				[Address(RVA = "0x21763A4", Offset = "0x21763A4", VA = "0x21763A4", Slot = "6")]
				get
				{
					return default(ushort);
				}
				[Token(Token = "0x60018A5")]
				[Address(RVA = "0x21763F8", Offset = "0x21763F8", VA = "0x21763F8", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x1700029F")]
			public override ushort Item
			{
				[Token(Token = "0x60018A6")]
				[Address(RVA = "0x217644C", Offset = "0x217644C", VA = "0x217644C", Slot = "8")]
				get
				{
					return default(ushort);
				}
				[Token(Token = "0x60018A7")]
				[Address(RVA = "0x21764B4", Offset = "0x21764B4", VA = "0x21764B4", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x170002A0")]
			public override ushort Item
			{
				[Token(Token = "0x60018A8")]
				[Address(RVA = "0x217651C", Offset = "0x217651C", VA = "0x217651C", Slot = "10")]
				get
				{
					return default(ushort);
				}
				[Token(Token = "0x60018A9")]
				[Address(RVA = "0x21765A8", Offset = "0x21765A8", VA = "0x21765A8", Slot = "11")]
				set
				{
				}
			}

			[Token(Token = "0x60018A1")]
			[Address(RVA = "0x21759D0", Offset = "0x21759D0", VA = "0x21759D0")]
			internal Indexer(Mat parent)
			{
			}
		}

		[Token(Token = "0x20001B5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDB950", Offset = "0x1DDB950")]
		private sealed class <GetEnumerator>d__28 : IEnumerator<ushort>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400071A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400071B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private ushort <>2__current;

			[Token(Token = "0x400071C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatOfUShort <>4__this;

			[Token(Token = "0x400071D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Indexer <indexer>5__2;

			[Token(Token = "0x400071E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <rows>5__3;

			[Token(Token = "0x400071F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <cols>5__4;

			[Token(Token = "0x4000720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <r>5__5;

			[Token(Token = "0x4000721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <c>5__6;

			[Token(Token = "0x170002A1")]
			private ushort System.Collections.Generic.IEnumerator<System.UInt16>.Current
			{
				[Token(Token = "0x60018AD")]
				[Address(RVA = "0x2176250", Offset = "0x2176250", VA = "0x2176250", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(ushort);
				}
			}

			[Token(Token = "0x170002A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018AF")]
				[Address(RVA = "0x21762B8", Offset = "0x21762B8", VA = "0x21762B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018AA")]
			[Address(RVA = "0x2175EF8", Offset = "0x2175EF8", VA = "0x2175EF8")]
			[DebuggerHidden]
			public <GetEnumerator>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x60018AB")]
			[Address(RVA = "0x21760B4", Offset = "0x21760B4", VA = "0x21760B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018AC")]
			[Address(RVA = "0x21760B8", Offset = "0x21760B8", VA = "0x21760B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018AE")]
			[Address(RVA = "0x2176258", Offset = "0x2176258", VA = "0x2176258", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MatType ThisType;

		[Token(Token = "0x40001A5")]
		private const int ThisDepth = 2;

		[Token(Token = "0x40001A6")]
		private const int ThisChannels = 1;

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x2174EFC", Offset = "0x2174EFC", VA = "0x2174EFC")]
		public MatOfUShort()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x2174F4C", Offset = "0x2174F4C", VA = "0x2174F4C")]
		public MatOfUShort(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x2174FAC", Offset = "0x2174FAC", VA = "0x2174FAC")]
		public MatOfUShort(Mat mat)
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x217500C", Offset = "0x217500C", VA = "0x217500C")]
		public MatOfUShort(int rows, int cols)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x21750A0", Offset = "0x21750A0", VA = "0x21750A0")]
		public MatOfUShort(Size size)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x217512C", Offset = "0x217512C", VA = "0x217512C")]
		public MatOfUShort(int rows, int cols, ushort s)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x2175204", Offset = "0x2175204", VA = "0x2175204")]
		public MatOfUShort(Size size, ushort s)
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x21752CC", Offset = "0x21752CC", VA = "0x21752CC")]
		public MatOfUShort(MatOfUShort m, Range rowRange, [Optional] Range? colRange)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x217534C", Offset = "0x217534C", VA = "0x217534C")]
		public MatOfUShort(MatOfUShort m, params Range[] ranges)
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x21753B4", Offset = "0x21753B4", VA = "0x21753B4")]
		public MatOfUShort(MatOfUShort m, Rect roi)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x217542C", Offset = "0x217542C", VA = "0x217542C")]
		public MatOfUShort(int rows, int cols, IntPtr data, long step = 0L)
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x21754D8", Offset = "0x21754D8", VA = "0x21754D8")]
		public MatOfUShort(int rows, int cols, ushort[] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x2175584", Offset = "0x2175584", VA = "0x2175584")]
		public MatOfUShort(int rows, int cols, ushort[,] data, long step = 0L)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x2175630", Offset = "0x2175630", VA = "0x2175630")]
		public MatOfUShort(IEnumerable<int> sizes, IntPtr data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x21756D4", Offset = "0x21756D4", VA = "0x21756D4")]
		public MatOfUShort(IEnumerable<int> sizes, ushort[] data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x2175778", Offset = "0x2175778", VA = "0x2175778")]
		public MatOfUShort(IEnumerable<int> sizes, Array data, [Optional] IEnumerable<long> steps)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x217581C", Offset = "0x217581C", VA = "0x217581C")]
		public MatOfUShort(IEnumerable<int> sizes)
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x21758A8", Offset = "0x21758A8", VA = "0x21758A8")]
		public MatOfUShort(IEnumerable<int> sizes, ushort s)
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x2175970", Offset = "0x2175970", VA = "0x2175970", Slot = "18")]
		public override MatIndexer<ushort> GetIndexer()
		{
			return null;
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x2175A4C", Offset = "0x2175A4C", VA = "0x2175A4C")]
		public static MatOfUShort FromArray(params ushort[] arr)
		{
			return null;
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x2175B44", Offset = "0x2175B44", VA = "0x2175B44")]
		public static MatOfUShort FromArray(ushort[,] arr)
		{
			return null;
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x2175C78", Offset = "0x2175C78", VA = "0x2175C78")]
		public static MatOfUShort FromArray(IEnumerable<ushort> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x2175CF8", Offset = "0x2175CF8", VA = "0x2175CF8", Slot = "20")]
		public override ushort[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x2175D90", Offset = "0x2175D90", VA = "0x2175D90", Slot = "21")]
		public override ushort[,] ToRectangularArray()
		{
			return null;
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x2175E7C", Offset = "0x2175E7C", VA = "0x2175E7C", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC7E0", Offset = "0x1DDC7E0")]
		public override IEnumerator<ushort> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x2175F24", Offset = "0x2175F24", VA = "0x2175F24", Slot = "22")]
		public override void Add(ushort value)
		{
		}
	}
	[Token(Token = "0x2000088")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAA78", Offset = "0x1DDAA78")]
	public sealed class MatExpr : DisposableCvObject
	{
		[Token(Token = "0x20001B6")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB960", Offset = "0x1DDB960")]
		public class ColIndexer : MatExprRowColIndexer
		{
			[Token(Token = "0x170002A3")]
			public override MatExpr Item
			{
				[Token(Token = "0x60018B1")]
				[Address(RVA = "0x3AB5488", Offset = "0x3AB5488", VA = "0x3AB5488", Slot = "4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018B0")]
			[Address(RVA = "0x3AB47B0", Offset = "0x3AB47B0", VA = "0x3AB47B0")]
			protected internal ColIndexer(MatExpr parent)
			{
			}
		}

		[Token(Token = "0x20001B7")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB998", Offset = "0x1DDB998")]
		public class RowIndexer : MatExprRowColIndexer
		{
			[Token(Token = "0x170002A4")]
			public override MatExpr Item
			{
				[Token(Token = "0x60018B3")]
				[Address(RVA = "0x3AB555C", Offset = "0x3AB555C", VA = "0x3AB555C", Slot = "4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018B2")]
			[Address(RVA = "0x3AB509C", Offset = "0x3AB509C", VA = "0x3AB509C")]
			protected internal RowIndexer(MatExpr parent)
			{
			}
		}

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ColIndexer col;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RowIndexer row;

		[Token(Token = "0x170000A7")]
		public MatExpr Item
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0x3AB4348", Offset = "0x3AB4348", VA = "0x3AB4348")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		public MatExpr Item
		{
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0x3AB44B0", Offset = "0x3AB44B0", VA = "0x3AB44B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0x3AB44D0", Offset = "0x3AB44D0", VA = "0x3AB44D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000A9")]
		public MatExpr Item
		{
			[Token(Token = "0x6000FE0")]
			[Address(RVA = "0x3AB45D8", Offset = "0x3AB45D8", VA = "0x3AB45D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0x3AB4610", Offset = "0x3AB4610", VA = "0x3AB4610")]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public ColIndexer Col
		{
			[Token(Token = "0x6000FE2")]
			[Address(RVA = "0x3AB471C", Offset = "0x3AB471C", VA = "0x3AB471C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AB")]
		public RowIndexer Row
		{
			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0x3AB5008", Offset = "0x3AB5008", VA = "0x3AB5008")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AC")]
		public Size Size
		{
			[Token(Token = "0x6000FEA")]
			[Address(RVA = "0x3AB50D0", Offset = "0x3AB50D0", VA = "0x3AB50D0")]
			get
			{
				return default(Size);
			}
		}

		[Token(Token = "0x170000AD")]
		public MatType Type
		{
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0x3AB530C", Offset = "0x3AB530C", VA = "0x3AB530C")]
			get
			{
				return default(MatType);
			}
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x3AB0348", Offset = "0x3AB0348", VA = "0x3AB0348")]
		internal MatExpr(IntPtr ptr)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x3AB1A08", Offset = "0x3AB1A08", VA = "0x3AB1A08")]
		internal MatExpr(Mat mat)
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x3AB1AE4", Offset = "0x3AB1AE4", VA = "0x3AB1AE4", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x3AB1BDC", Offset = "0x3AB1BDC", VA = "0x3AB1BDC")]
		public static implicit operator Mat(MatExpr self)
		{
			return null;
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x3AB1D10", Offset = "0x3AB1D10", VA = "0x3AB1D10")]
		public Mat ToMat()
		{
			return null;
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x3AB0C28", Offset = "0x3AB0C28", VA = "0x3AB0C28")]
		public static implicit operator MatExpr(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x3AB1D14", Offset = "0x3AB1D14", VA = "0x3AB1D14")]
		public static MatExpr FromMat(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x3AB1D74", Offset = "0x3AB1D74", VA = "0x3AB1D74")]
		public static MatExpr operator +(MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x3AB1D78", Offset = "0x3AB1D78", VA = "0x3AB1D78")]
		public static MatExpr operator -(MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x3AB1EF8", Offset = "0x3AB1EF8", VA = "0x3AB1EF8")]
		public static MatExpr operator ~(MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x3AB2078", Offset = "0x3AB2078", VA = "0x3AB2078")]
		public static MatExpr operator +(MatExpr e, Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x3AB2248", Offset = "0x3AB2248", VA = "0x3AB2248")]
		public static MatExpr operator +(Mat m, MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x3AB2418", Offset = "0x3AB2418", VA = "0x3AB2418")]
		public static MatExpr operator +(MatExpr e, Scalar s)
		{
			return null;
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x3AB25CC", Offset = "0x3AB25CC", VA = "0x3AB25CC")]
		public static MatExpr operator +(Scalar s, MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x3AB277C", Offset = "0x3AB277C", VA = "0x3AB277C")]
		public static MatExpr operator +(MatExpr e1, MatExpr e2)
		{
			return null;
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x3AB294C", Offset = "0x3AB294C", VA = "0x3AB294C")]
		public static MatExpr operator -(MatExpr e, Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x3AB2B1C", Offset = "0x3AB2B1C", VA = "0x3AB2B1C")]
		public static MatExpr operator -(Mat m, MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x3AB2CEC", Offset = "0x3AB2CEC", VA = "0x3AB2CEC")]
		public static MatExpr operator -(MatExpr e, Scalar s)
		{
			return null;
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x3AB2EA0", Offset = "0x3AB2EA0", VA = "0x3AB2EA0")]
		public static MatExpr operator -(Scalar s, MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x3AB3050", Offset = "0x3AB3050", VA = "0x3AB3050")]
		public static MatExpr operator -(MatExpr e1, MatExpr e2)
		{
			return null;
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x3AB3220", Offset = "0x3AB3220", VA = "0x3AB3220")]
		public static MatExpr operator *(MatExpr e, Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x3AB33F0", Offset = "0x3AB33F0", VA = "0x3AB33F0")]
		public static MatExpr operator *(Mat m, MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x3AB35C0", Offset = "0x3AB35C0", VA = "0x3AB35C0")]
		public static MatExpr operator *(MatExpr e, double s)
		{
			return null;
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x3AB3754", Offset = "0x3AB3754", VA = "0x3AB3754")]
		public static MatExpr operator *(double s, MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x3AB38E4", Offset = "0x3AB38E4", VA = "0x3AB38E4")]
		public static MatExpr operator *(MatExpr e1, MatExpr e2)
		{
			return null;
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x3AB3AB4", Offset = "0x3AB3AB4", VA = "0x3AB3AB4")]
		public static MatExpr operator /(MatExpr e, Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x3AB3C84", Offset = "0x3AB3C84", VA = "0x3AB3C84")]
		public static MatExpr operator /(Mat m, MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x3AB3E54", Offset = "0x3AB3E54", VA = "0x3AB3E54")]
		public static MatExpr operator /(MatExpr e, double s)
		{
			return null;
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x3AB3FE8", Offset = "0x3AB3FE8", VA = "0x3AB3FE8")]
		public static MatExpr operator /(double s, MatExpr e)
		{
			return null;
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x3AB4178", Offset = "0x3AB4178", VA = "0x3AB4178")]
		public static MatExpr operator /(MatExpr e1, MatExpr e2)
		{
			return null;
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x3AB47E4", Offset = "0x3AB47E4", VA = "0x3AB47E4")]
		public Mat Cross(Mat m)
		{
			return null;
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x3AB494C", Offset = "0x3AB494C", VA = "0x3AB494C")]
		public MatExpr Diag(int d = 0)
		{
			return null;
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x3AB4A90", Offset = "0x3AB4A90", VA = "0x3AB4A90")]
		public double Dot(Mat m)
		{
			return default(double);
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x3AB4BCC", Offset = "0x3AB4BCC", VA = "0x3AB4BCC")]
		public MatExpr Inv(DecompTypes method = DecompTypes.LU)
		{
			return null;
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x3AB4D10", Offset = "0x3AB4D10", VA = "0x3AB4D10")]
		public MatExpr Mul(MatExpr e, double scale = 1.0)
		{
			return null;
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x3AB4E8C", Offset = "0x3AB4E8C", VA = "0x3AB4E8C")]
		public MatExpr Mul(Mat m, double scale = 1.0)
		{
			return null;
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x3AB434C", Offset = "0x3AB434C", VA = "0x3AB434C")]
		public MatExpr SubMat(int rowStart, int rowEnd, int colStart, int colEnd)
		{
			return null;
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x3AB44C0", Offset = "0x3AB44C0", VA = "0x3AB44C0")]
		public MatExpr SubMat(Range rowRange, Range colRange)
		{
			return null;
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x3AB45F4", Offset = "0x3AB45F4", VA = "0x3AB45F4")]
		public MatExpr SubMat(Rect roi)
		{
			return null;
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x3AB51D8", Offset = "0x3AB51D8", VA = "0x3AB51D8")]
		public MatExpr T()
		{
			return null;
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x3AB544C", Offset = "0x3AB544C", VA = "0x3AB544C")]
		public MatExpr Abs()
		{
			return null;
		}
	}
	[Token(Token = "0x2000089")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAAB0", Offset = "0x1DDAAB0")]
	public abstract class MatExprRangeIndexer
	{
		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly Mat parent;

		[Token(Token = "0x170000AE")]
		public abstract MatExpr Item
		{
			[Token(Token = "0x6000FF2")]
			get;
			[Token(Token = "0x6000FF3")]
			set;
		}

		[Token(Token = "0x170000AF")]
		public abstract MatExpr Item
		{
			[Token(Token = "0x6000FF4")]
			get;
			[Token(Token = "0x6000FF5")]
			set;
		}

		[Token(Token = "0x170000B0")]
		public virtual MatExpr Item
		{
			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0x3AB5630", Offset = "0x3AB5630", VA = "0x3AB5630", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0x3AB56A4", Offset = "0x3AB56A4", VA = "0x3AB56A4", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public abstract MatExpr Item
		{
			[Token(Token = "0x6000FF8")]
			get;
			[Token(Token = "0x6000FF9")]
			set;
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x3AB0BD0", Offset = "0x3AB0BD0", VA = "0x3AB0BD0")]
		protected internal MatExprRangeIndexer(Mat parent)
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x3AB5728", Offset = "0x3AB5728", VA = "0x3AB5728")]
		public MatExpr Get(int rowStart, int rowEnd, int colStart, int colEnd)
		{
			return null;
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x3AB5734", Offset = "0x3AB5734", VA = "0x3AB5734")]
		public MatExpr Get(Range rowRange, Range colRange)
		{
			return null;
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x3AB5740", Offset = "0x3AB5740", VA = "0x3AB5740")]
		public MatExpr Get(Rect roi)
		{
			return null;
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x3AB574C", Offset = "0x3AB574C", VA = "0x3AB574C")]
		public void Set(int rowStart, int rowEnd, int colStart, int colEnd, MatExpr value)
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x3AB5758", Offset = "0x3AB5758", VA = "0x3AB5758")]
		public void Set(Range rowRange, Range colRange, MatExpr value)
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x3AB5764", Offset = "0x3AB5764", VA = "0x3AB5764")]
		public void Set(Rect roi, MatExpr value)
		{
		}
	}
	[Token(Token = "0x200008A")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAAE8", Offset = "0x1DDAAE8")]
	public abstract class MatExprRowColIndexer
	{
		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly MatExpr parent;

		[Token(Token = "0x170000B2")]
		public abstract MatExpr Item
		{
			[Token(Token = "0x6001001")]
			get;
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x3AB5454", Offset = "0x3AB5454", VA = "0x3AB5454")]
		protected internal MatExprRowColIndexer(MatExpr parent)
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x3AB5770", Offset = "0x3AB5770", VA = "0x3AB5770", Slot = "5")]
		public virtual MatExpr Get(int pos)
		{
			return null;
		}
	}
	[Token(Token = "0x200008B")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAB20", Offset = "0x1DDAB20")]
	public abstract class MatRowColExprIndexer
	{
		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly Mat parent;

		[Token(Token = "0x170000B3")]
		public abstract MatExpr Item
		{
			[Token(Token = "0x6001004")]
			get;
			[Token(Token = "0x6001005")]
			set;
		}

		[Token(Token = "0x170000B4")]
		public abstract MatExpr Item
		{
			[Token(Token = "0x6001006")]
			get;
			[Token(Token = "0x6001007")]
			set;
		}

		[Token(Token = "0x170000B5")]
		public virtual MatExpr Item
		{
			[Token(Token = "0x6001008")]
			[Address(RVA = "0x217688C", Offset = "0x217688C", VA = "0x217688C", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001009")]
			[Address(RVA = "0x217689C", Offset = "0x217689C", VA = "0x217689C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x2176858", Offset = "0x2176858", VA = "0x2176858")]
		protected internal MatRowColExprIndexer(Mat parent)
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x21768B4", Offset = "0x21768B4", VA = "0x21768B4")]
		public MatExpr Get(int pos)
		{
			return null;
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x21768C0", Offset = "0x21768C0", VA = "0x21768C0")]
		public MatExpr Get(int start, int end)
		{
			return null;
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x21768CC", Offset = "0x21768CC", VA = "0x21768CC")]
		public MatExpr Get(Range range)
		{
			return null;
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x21768D8", Offset = "0x21768D8", VA = "0x21768D8")]
		public void Set(int pos, MatExpr value)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x21768E4", Offset = "0x21768E4", VA = "0x21768E4")]
		public void Set(int start, int end, MatExpr value)
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x21768F0", Offset = "0x21768F0", VA = "0x21768F0")]
		public void Set(Range range, MatExpr value)
		{
		}
	}
	[Token(Token = "0x200008C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAB58", Offset = "0x1DDAB58")]
	public abstract class MatRowColIndexer
	{
		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly Mat parent;

		[Token(Token = "0x170000B6")]
		public abstract Mat Item
		{
			[Token(Token = "0x6001011")]
			get;
			[Token(Token = "0x6001012")]
			set;
		}

		[Token(Token = "0x170000B7")]
		public abstract Mat Item
		{
			[Token(Token = "0x6001013")]
			get;
			[Token(Token = "0x6001014")]
			set;
		}

		[Token(Token = "0x170000B8")]
		public virtual Mat Item
		{
			[Token(Token = "0x6001015")]
			[Address(RVA = "0x2176930", Offset = "0x2176930", VA = "0x2176930", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x21768FC", Offset = "0x21768FC", VA = "0x21768FC")]
		protected internal MatRowColIndexer(Mat parent)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x2176940", Offset = "0x2176940", VA = "0x2176940", Slot = "9")]
		public virtual Mat Get(int pos)
		{
			return null;
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x217694C", Offset = "0x217694C", VA = "0x217694C", Slot = "10")]
		public virtual Mat Get(int start, int end)
		{
			return null;
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x2176958", Offset = "0x2176958", VA = "0x2176958", Slot = "11")]
		public virtual Mat Get(Range range)
		{
			return null;
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x2176964", Offset = "0x2176964", VA = "0x2176964", Slot = "12")]
		public virtual void Set(int pos, Mat value)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x2176970", Offset = "0x2176970", VA = "0x2176970", Slot = "13")]
		public virtual void Set(int start, int end, Mat value)
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x217697C", Offset = "0x217697C", VA = "0x217697C", Slot = "14")]
		public virtual void Set(Range range, Mat value)
		{
		}
	}
	[Token(Token = "0x200008D")]
	public class OutputArray : DisposableCvObject
	{
		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly object obj;

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x4269BA0", Offset = "0x4269BA0", VA = "0x4269BA0")]
		internal OutputArray(Mat mat)
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x4269C88", Offset = "0x4269C88", VA = "0x4269C88")]
		internal OutputArray(IEnumerable<Mat> mat)
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x4269E38", Offset = "0x4269E38", VA = "0x4269E38", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x4269F34", Offset = "0x4269F34", VA = "0x4269F34")]
		public static implicit operator OutputArray(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x4269F94", Offset = "0x4269F94", VA = "0x4269F94")]
		public bool IsMat()
		{
			return default(bool);
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x426A018", Offset = "0x426A018", VA = "0x426A018", Slot = "8")]
		public virtual Mat GetMat()
		{
			return null;
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x426A09C", Offset = "0x426A09C", VA = "0x426A09C")]
		public bool IsVectorOfMat()
		{
			return default(bool);
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x426A0F8", Offset = "0x426A0F8", VA = "0x426A0F8", Slot = "9")]
		public virtual IEnumerable<Mat> GetVectorOfMat()
		{
			return null;
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x426A148", Offset = "0x426A148", VA = "0x426A148", Slot = "10")]
		public virtual void AssignResult()
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x426A270", Offset = "0x426A270", VA = "0x426A270")]
		public void Fix()
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x426A1F8", Offset = "0x426A1F8", VA = "0x426A1F8")]
		public bool IsReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x426A2A0", Offset = "0x426A2A0", VA = "0x426A2A0")]
		public void ThrowIfNotReady()
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x426A324", Offset = "0x426A324", VA = "0x426A324")]
		public static OutputArray Create(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x6001029")]
		public static OutputArrayOfStructList<T> Create<T>(List<T> list) where T : struct
		{
			return null;
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x426A384", Offset = "0x426A384", VA = "0x426A384")]
		public static OutputArrayOfMatList Create(List<Mat> list)
		{
			return null;
		}
	}
	[Token(Token = "0x200008E")]
	public sealed class OutputArrayOfMatList : OutputArray
	{
		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool disposed;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Mat> list;

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x426A424", Offset = "0x426A424", VA = "0x426A424")]
		internal OutputArrayOfMatList(List<Mat> list)
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x426A4C8", Offset = "0x426A4C8", VA = "0x426A4C8", Slot = "9")]
		public override IEnumerable<Mat> GetVectorOfMat()
		{
			return null;
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x426A4D0", Offset = "0x426A4D0", VA = "0x426A4D0", Slot = "10")]
		public override void AssignResult()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x426A6B0", Offset = "0x426A6B0", VA = "0x426A6B0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200008F")]
	public sealed class OutputArrayOfStructList<T> : OutputArray where T : struct
	{
		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool disposed;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> list;

		[Token(Token = "0x600102F")]
		internal OutputArrayOfStructList(List<T> list)
		{
		}

		[Token(Token = "0x6001030")]
		public override void AssignResult()
		{
		}

		[Token(Token = "0x6001031")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000090")]
	public class PCA : DisposableCvObject
	{
		[Token(Token = "0x20001B8")]
		[Flags]
		public enum Flags
		{
			[Token(Token = "0x4000723")]
			DataAsRow = 0,
			[Token(Token = "0x4000724")]
			DataAsCol = 1,
			[Token(Token = "0x4000725")]
			UseAvg = 2
		}

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x170000B9")]
		public Mat Eigenvectors
		{
			[Token(Token = "0x6001036")]
			[Address(RVA = "0x426AAFC", Offset = "0x426AAFC", VA = "0x426AAFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		public Mat Eigenvalues
		{
			[Token(Token = "0x6001037")]
			[Address(RVA = "0x426ABDC", Offset = "0x426ABDC", VA = "0x426ABDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BB")]
		public Mat Mean
		{
			[Token(Token = "0x6001038")]
			[Address(RVA = "0x426ACBC", Offset = "0x426ACBC", VA = "0x426ACBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x426A6F8", Offset = "0x426A6F8", VA = "0x426A6F8")]
		public PCA()
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x426A770", Offset = "0x426A770", VA = "0x426A770")]
		public PCA(InputArray data, InputArray mean, Flags flags, int maxComponents = 0)
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x426A8B4", Offset = "0x426A8B4", VA = "0x426A8B4")]
		public PCA(InputArray data, InputArray mean, Flags flags, double retainedVariance)
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x426AA00", Offset = "0x426AA00", VA = "0x426AA00", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x426AD9C", Offset = "0x426AD9C", VA = "0x426AD9C")]
		public PCA Compute(InputArray data, InputArray mean, Flags flags, int maxComponents = 0)
		{
			return null;
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x426AF10", Offset = "0x426AF10", VA = "0x426AF10")]
		public PCA ComputeVar(InputArray data, InputArray mean, Flags flags, double retainedVariance)
		{
			return null;
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x426B08C", Offset = "0x426B08C", VA = "0x426B08C")]
		public Mat Project(InputArray vec)
		{
			return null;
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x426B1CC", Offset = "0x426B1CC", VA = "0x426B1CC")]
		public void Project(InputArray vec, OutputArray result)
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x426B338", Offset = "0x426B338", VA = "0x426B338")]
		public Mat BackProject(InputArray vec)
		{
			return null;
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x426B478", Offset = "0x426B478", VA = "0x426B478")]
		public void BackProject(InputArray vec, OutputArray result)
		{
		}
	}
	[Token(Token = "0x2000091")]
	internal sealed class PtrNativeFunctions
	{
		[Token(Token = "0x20001B9")]
		internal delegate void ReleaseFunc(IntPtr ptr);

		[Token(Token = "0x20001BA")]
		internal delegate IntPtr ObjFunc(IntPtr ptr);

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PtrNativeFunctions instance;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB48", Offset = "0x1DDBB48")]
		private Dictionary<Type, ReleaseFunc> <ReleaseFunctions>k__BackingField;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB58", Offset = "0x1DDBB58")]
		private Dictionary<Type, ObjFunc> <AccessFunctions>k__BackingField;

		[Token(Token = "0x170000BC")]
		internal Dictionary<Type, ReleaseFunc> ReleaseFunctions
		{
			[Token(Token = "0x6001040")]
			[Address(RVA = "0x426ED18", Offset = "0x426ED18", VA = "0x426ED18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC844", Offset = "0x1DDC844")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001041")]
			[Address(RVA = "0x426ED20", Offset = "0x426ED20", VA = "0x426ED20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC854", Offset = "0x1DDC854")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		internal Dictionary<Type, ObjFunc> AccessFunctions
		{
			[Token(Token = "0x6001042")]
			[Address(RVA = "0x426ED28", Offset = "0x426ED28", VA = "0x426ED28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC864", Offset = "0x1DDC864")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001043")]
			[Address(RVA = "0x426ED30", Offset = "0x426ED30", VA = "0x426ED30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC874", Offset = "0x1DDC874")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public static PtrNativeFunctions Instance
		{
			[Token(Token = "0x6001044")]
			[Address(RVA = "0x426ED38", Offset = "0x426ED38", VA = "0x426ED38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x426CAF0", Offset = "0x426CAF0", VA = "0x426CAF0")]
		private PtrNativeFunctions()
		{
		}
	}
	[Token(Token = "0x2000092")]
	internal class Ptr<T> : DisposableCvObject
	{
		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool disposed;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly PtrNativeFunctions.ReleaseFunc releaseFunc;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly PtrNativeFunctions.ObjFunc getFunc;

		[Token(Token = "0x6001045")]
		public Ptr(IntPtr ptr)
		{
		}

		[Token(Token = "0x6001046")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001047")]
		public virtual IntPtr Get()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001048")]
		protected override void DisposeUnmanaged()
		{
		}
	}
	[Token(Token = "0x2000093")]
	public class RNG
	{
		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong state;

		[Token(Token = "0x170000BF")]
		public ulong State
		{
			[Token(Token = "0x6001049")]
			[Address(RVA = "0x426F3CC", Offset = "0x426F3CC", VA = "0x426F3CC")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x600104A")]
			[Address(RVA = "0x426F3D4", Offset = "0x426F3D4", VA = "0x426F3D4")]
			set
			{
			}
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x426F3DC", Offset = "0x426F3DC", VA = "0x426F3DC")]
		public RNG()
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x426F408", Offset = "0x426F408", VA = "0x426F408")]
		public RNG(ulong state)
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x426F448", Offset = "0x426F448", VA = "0x426F448")]
		public static explicit operator byte(RNG self)
		{
			return default(byte);
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x426F508", Offset = "0x426F508", VA = "0x426F508")]
		public static explicit operator sbyte(RNG self)
		{
			return default(sbyte);
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x426F5A4", Offset = "0x426F5A4", VA = "0x426F5A4")]
		public static explicit operator ushort(RNG self)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x426F640", Offset = "0x426F640", VA = "0x426F640")]
		public static explicit operator short(RNG self)
		{
			return default(short);
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x426F6DC", Offset = "0x426F6DC", VA = "0x426F6DC")]
		public static explicit operator uint(RNG self)
		{
			return default(uint);
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x426F778", Offset = "0x426F778", VA = "0x426F778")]
		public static explicit operator int(RNG self)
		{
			return default(int);
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x426F814", Offset = "0x426F814", VA = "0x426F814")]
		public static explicit operator float(RNG self)
		{
			return default(float);
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x426F8C4", Offset = "0x426F8C4", VA = "0x426F8C4")]
		public static explicit operator double(RNG self)
		{
			return default(double);
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0x426F4E4", Offset = "0x426F4E4", VA = "0x426F4E4")]
		public uint Next()
		{
			return default(uint);
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x426F980", Offset = "0x426F980", VA = "0x426F980")]
		public uint Run(uint n)
		{
			return default(uint);
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x426F9F0", Offset = "0x426F9F0", VA = "0x426F9F0")]
		public uint Run()
		{
			return default(uint);
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x426FA14", Offset = "0x426FA14", VA = "0x426FA14")]
		public int Uniform(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x426F9C0", Offset = "0x426F9C0", VA = "0x426F9C0")]
		public float Uniform(float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x426FA54", Offset = "0x426FA54", VA = "0x426FA54")]
		public double Uniform(double a, double b)
		{
			return default(double);
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x426FA84", Offset = "0x426FA84", VA = "0x426FA84")]
		public void Fill(InputOutputArray mat, DistributionType distType, InputArray a, InputArray b, bool saturateRange = false)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x426FC20", Offset = "0x426FC20", VA = "0x426FC20")]
		public double Gaussian(double sigma)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000094")]
	public class RNG_MT19937
	{
		[Token(Token = "0x20001BB")]
		private static class PeriodParameters
		{
			[Token(Token = "0x4000726")]
			public const int N = 624;

			[Token(Token = "0x4000727")]
			public const int M = 397;
		}

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly uint[] state;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int mti;

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x426FC9C", Offset = "0x426FC9C", VA = "0x426FC9C")]
		public RNG_MT19937()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x426FCA4", Offset = "0x426FCA4", VA = "0x426FCA4")]
		public RNG_MT19937(uint s)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x426FDB8", Offset = "0x426FDB8", VA = "0x426FDB8")]
		public static explicit operator uint(RNG_MT19937 self)
		{
			return default(uint);
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x4270070", Offset = "0x4270070", VA = "0x4270070")]
		public static explicit operator int(RNG_MT19937 self)
		{
			return default(int);
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x42700F4", Offset = "0x42700F4", VA = "0x42700F4")]
		public static explicit operator float(RNG_MT19937 self)
		{
			return default(float);
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x4270190", Offset = "0x4270190", VA = "0x4270190")]
		public static explicit operator double(RNG_MT19937 self)
		{
			return default(double);
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0x426FD28", Offset = "0x426FD28", VA = "0x426FD28")]
		public void Seed(uint s)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x426FE3C", Offset = "0x426FE3C", VA = "0x426FE3C")]
		public uint Next()
		{
			return default(uint);
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x4270250", Offset = "0x4270250", VA = "0x4270250")]
		public uint Run(uint b)
		{
			return default(uint);
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x4270278", Offset = "0x4270278", VA = "0x4270278")]
		public uint Run()
		{
			return default(uint);
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x427027C", Offset = "0x427027C", VA = "0x427027C")]
		public int Uniform(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x42702B8", Offset = "0x42702B8", VA = "0x42702B8")]
		public float Uniform(float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x42702E8", Offset = "0x42702E8", VA = "0x42702E8")]
		public double Uniform(double a, double b)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000095")]
	public class SVD : DisposableCvObject
	{
		[Token(Token = "0x20001BC")]
		[Flags]
		public enum Flags
		{
			[Token(Token = "0x4000729")]
			None = 0,
			[Token(Token = "0x400072A")]
			ModifyA = 1,
			[Token(Token = "0x400072B")]
			NoUV = 2,
			[Token(Token = "0x400072C")]
			FullUV = 4
		}

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x170000C0")]
		public Mat U
		{
			[Token(Token = "0x600106D")]
			[Address(RVA = "0x42731A4", Offset = "0x42731A4", VA = "0x42731A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		public Mat W
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0x4273284", Offset = "0x4273284", VA = "0x4273284")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C2")]
		public Mat Vt
		{
			[Token(Token = "0x600106F")]
			[Address(RVA = "0x4273364", Offset = "0x4273364", VA = "0x4273364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x4272F40", Offset = "0x4272F40", VA = "0x4272F40")]
		public SVD()
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x4272FB8", Offset = "0x4272FB8", VA = "0x4272FB8")]
		public SVD(InputArray src, Flags flags = Flags.None)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x42730A8", Offset = "0x42730A8", VA = "0x42730A8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x4273444", Offset = "0x4273444", VA = "0x4273444")]
		public SVD Run(InputArray src, Flags flags = Flags.None)
		{
			return null;
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x4273564", Offset = "0x4273564", VA = "0x4273564")]
		public void BackSubst(InputArray rhs, OutputArray dst)
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x42736B4", Offset = "0x42736B4", VA = "0x42736B4")]
		public static void Compute(InputArray src, OutputArray w, OutputArray u, OutputArray vt, Flags flags = Flags.None)
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x42738B0", Offset = "0x42738B0", VA = "0x42738B0")]
		public static void Compute(InputArray src, OutputArray w, Flags flags = Flags.None)
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x42739E4", Offset = "0x42739E4", VA = "0x42739E4")]
		public static void BackSubst(InputArray w, InputArray u, InputArray vt, InputArray rhs, OutputArray dst)
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x4273BE4", Offset = "0x4273BE4", VA = "0x4273BE4")]
		public static void SolveZ(InputArray src, OutputArray dst)
		{
		}
	}
	[Token(Token = "0x2000096")]
	public class SparseMat : DisposableCvObject, ICloneable
	{
		[Token(Token = "0x20001BD")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB9F0", Offset = "0x1DDB9F0")]
		public sealed class Indexer<T> : SparseMatIndexer<T> where T : struct
		{
			[Token(Token = "0x170002A5")]
			public override T Item
			{
				[Token(Token = "0x60018BD")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x60018BE")]
				set
				{
				}
			}

			[Token(Token = "0x170002A6")]
			public override T Item
			{
				[Token(Token = "0x60018BF")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x60018C0")]
				set
				{
				}
			}

			[Token(Token = "0x170002A7")]
			public override T Item
			{
				[Token(Token = "0x60018C1")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x60018C2")]
				set
				{
				}
			}

			[Token(Token = "0x170002A8")]
			public override T Item
			{
				[Token(Token = "0x60018C3")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x60018C4")]
				set
				{
				}
			}

			[Token(Token = "0x60018BC")]
			internal Indexer(SparseMat parent)
			{
			}
		}

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int SizeOf;

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x4277EB0", Offset = "0x4277EB0", VA = "0x4277EB0")]
		public SparseMat(IntPtr ptr)
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0x4277F58", Offset = "0x4277F58", VA = "0x4277F58")]
		public SparseMat()
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0x4277FD0", Offset = "0x4277FD0", VA = "0x4277FD0")]
		public SparseMat(IEnumerable<int> sizes, MatType type)
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x42780E4", Offset = "0x42780E4", VA = "0x42780E4")]
		public SparseMat(Mat m)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x42781F8", Offset = "0x42781F8", VA = "0x42781F8")]
		public void Release()
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x4278200", Offset = "0x4278200", VA = "0x4278200", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x4278300", Offset = "0x4278300", VA = "0x4278300")]
		public static SparseMat FromMat(Mat mat)
		{
			return null;
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x4278360", Offset = "0x4278360", VA = "0x4278360")]
		public SparseMat AssignFrom(SparseMat m)
		{
			return null;
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x4278444", Offset = "0x4278444", VA = "0x4278444")]
		public SparseMat AssignFrom(Mat m)
		{
			return null;
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x4278528", Offset = "0x4278528", VA = "0x4278528")]
		public SparseMat Clone()
		{
			return null;
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x42785CC", Offset = "0x42785CC", VA = "0x42785CC", Slot = "8")]
		private object System.ICloneable.Clone()
		{
			return null;
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x42785D0", Offset = "0x42785D0", VA = "0x42785D0")]
		public void CopyTo(SparseMat m)
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x4278674", Offset = "0x4278674", VA = "0x4278674")]
		public void CopyTo(Mat m)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x4278718", Offset = "0x4278718", VA = "0x4278718")]
		public void ConvertTo(SparseMat m, int rtype, double alpha = 1.0)
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x42787D4", Offset = "0x42787D4", VA = "0x42787D4")]
		public void ConvertTo(Mat m, int rtype, double alpha = 1.0, double beta = 0.0)
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x4278890", Offset = "0x4278890", VA = "0x4278890")]
		public void AssignTo(SparseMat m, int type = -1)
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x427893C", Offset = "0x427893C", VA = "0x427893C")]
		public void Create(MatType type, params int[] sizes)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x4278A68", Offset = "0x4278A68", VA = "0x4278A68")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x4278AE0", Offset = "0x4278AE0", VA = "0x4278AE0")]
		public void Addref()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x4278B58", Offset = "0x4278B58", VA = "0x4278B58")]
		public int ElemSize()
		{
			return default(int);
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x4278BD0", Offset = "0x4278BD0", VA = "0x4278BD0")]
		public int ElemSize1()
		{
			return default(int);
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x4278C48", Offset = "0x4278C48", VA = "0x4278C48")]
		public MatType Type()
		{
			return default(MatType);
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x4278CFC", Offset = "0x4278CFC", VA = "0x4278CFC")]
		public int Depth()
		{
			return default(int);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x4278D74", Offset = "0x4278D74", VA = "0x4278D74")]
		public int Dims()
		{
			return default(int);
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x4278DEC", Offset = "0x4278DEC", VA = "0x4278DEC")]
		public int Channels()
		{
			return default(int);
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x4278E64", Offset = "0x4278E64", VA = "0x4278E64")]
		public int[] Size()
		{
			return null;
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x4278F68", Offset = "0x4278F68", VA = "0x4278F68")]
		public int Size(int dim)
		{
			return default(int);
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x4278FF0", Offset = "0x4278FF0", VA = "0x4278FF0")]
		public long Hash(int i0)
		{
			return default(long);
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x4279090", Offset = "0x4279090", VA = "0x4279090")]
		public long Hash(int i0, int i1)
		{
			return default(long);
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x4279140", Offset = "0x4279140", VA = "0x4279140")]
		public long Hash(int i0, int i1, int i2)
		{
			return default(long);
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x42791F8", Offset = "0x42791F8", VA = "0x42791F8")]
		public long Hash(params int[] idx)
		{
			return default(long);
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x4279298", Offset = "0x4279298", VA = "0x4279298")]
		public IntPtr Ptr(int i0, bool createMissing, [Optional] long? hashVal)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x42793AC", Offset = "0x42793AC", VA = "0x42793AC")]
		public IntPtr Ptr(int i0, int i1, bool createMissing, [Optional] long? hashVal)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x42794CC", Offset = "0x42794CC", VA = "0x42794CC")]
		public IntPtr Ptr(int i0, int i1, int i2, bool createMissing, [Optional] long? hashVal)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x4279600", Offset = "0x4279600", VA = "0x4279600")]
		public IntPtr Ptr(int[] idx, bool createMissing, [Optional] long? hashVal)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001099")]
		public T? Find<T>(int i0, [Optional] long? hashVal) where T : struct
		{
			return null;
		}

		[Token(Token = "0x600109A")]
		public T? Find<T>(int i0, int i1, [Optional] long? hashVal) where T : struct
		{
			return null;
		}

		[Token(Token = "0x600109B")]
		public T? Find<T>(int i0, int i1, int i2, [Optional] long? hashVal) where T : struct
		{
			return null;
		}

		[Token(Token = "0x600109C")]
		public T? Find<T>(int[] idx, [Optional] long? hashVal) where T : struct
		{
			return null;
		}

		[Token(Token = "0x600109D")]
		public T Value<T>(int i0, [Optional] long? hashVal) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x600109E")]
		public T Value<T>(int i0, int i1, [Optional] long? hashVal) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x600109F")]
		public T Value<T>(int i0, int i1, int i2, [Optional] long? hashVal) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x60010A0")]
		public T Value<T>(int[] idx, [Optional] long? hashVal) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x60010A1")]
		public Indexer<T> Ref<T>() where T : struct
		{
			return null;
		}

		[Token(Token = "0x60010A2")]
		public Indexer<T> GetIndexer<T>() where T : struct
		{
			return null;
		}

		[Token(Token = "0x60010A3")]
		public T Get<T>(int i0, [Optional] long? hashVal) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x60010A4")]
		public T Get<T>(int i0, int i1, [Optional] long? hashVal) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x60010A5")]
		public T Get<T>(int i0, int i1, int i2, [Optional] long? hashVal) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x60010A6")]
		public T Get<T>(int[] idx, [Optional] long? hashVal) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x60010A7")]
		public void Set<T>(int i0, T value, [Optional] long? hashVal) where T : struct
		{
		}

		[Token(Token = "0x60010A8")]
		public void Set<T>(int i0, int i1, T value, [Optional] long? hashVal) where T : struct
		{
		}

		[Token(Token = "0x60010A9")]
		public void Set<T>(int i0, int i1, int i2, T value, [Optional] long? hashVal) where T : struct
		{
		}

		[Token(Token = "0x60010AA")]
		public void Set<T>(int[] idx, T value, [Optional] long? hashVal) where T : struct
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x4279714", Offset = "0x4279714", VA = "0x4279714", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000097")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAB90", Offset = "0x1DDAB90")]
	public abstract class SparseMatIndexer<T> where T : struct
	{
		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly SparseMat parent;

		[Token(Token = "0x170000C3")]
		public abstract T Item
		{
			[Token(Token = "0x60010AD")]
			get;
			[Token(Token = "0x60010AE")]
			set;
		}

		[Token(Token = "0x170000C4")]
		public abstract T Item
		{
			[Token(Token = "0x60010AF")]
			get;
			[Token(Token = "0x60010B0")]
			set;
		}

		[Token(Token = "0x170000C5")]
		public abstract T Item
		{
			[Token(Token = "0x60010B1")]
			get;
			[Token(Token = "0x60010B2")]
			set;
		}

		[Token(Token = "0x170000C6")]
		public abstract T Item
		{
			[Token(Token = "0x60010B3")]
			get;
			[Token(Token = "0x60010B4")]
			set;
		}

		[Token(Token = "0x60010B5")]
		internal SparseMatIndexer(SparseMat parent)
		{
		}
	}
	[Token(Token = "0x2000098")]
	public struct DMatch
	{
		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int QueryIdx;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int TrainIdx;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int ImgIdx;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float Distance;

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x3EAB4B4", Offset = "0x3EAB4B4", VA = "0x3EAB4B4")]
		public static DMatch Empty()
		{
			return default(DMatch);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x3EAB4D0", Offset = "0x3EAB4D0", VA = "0x3EAB4D0")]
		public DMatch(int queryIdx, int trainIdx, float distance)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x3EAB4C0", Offset = "0x3EAB4C0", VA = "0x3EAB4C0")]
		public DMatch(int queryIdx, int trainIdx, int imgIdx, float distance)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x3EAB4E4", Offset = "0x3EAB4E4", VA = "0x3EAB4E4")]
		public static bool operator <(DMatch d1, DMatch d2)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x3EAB500", Offset = "0x3EAB500", VA = "0x3EAB500")]
		public static bool operator >(DMatch d1, DMatch d2)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x3EAB51C", Offset = "0x3EAB51C", VA = "0x3EAB51C")]
		public static explicit operator Vec4f(DMatch self)
		{
			return default(Vec4f);
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x3EAB564", Offset = "0x3EAB564", VA = "0x3EAB564")]
		public static explicit operator DMatch(Vec4f v)
		{
			return default(DMatch);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x3EAB5B8", Offset = "0x3EAB5B8", VA = "0x3EAB5B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000099")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDABC8", Offset = "0x1DDABC8")]
	public interface IVec<T> where T : struct
	{
		[Token(Token = "0x170000C7")]
		T Item
		{
			[Token(Token = "0x60010BE")]
			get;
			[Token(Token = "0x60010BF")]
			set;
		}
	}
	[Serializable]
	[Token(Token = "0x200009A")]
	public struct KeyPoint : IEquatable<KeyPoint>
	{
		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Point2f Pt;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Size;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float Angle;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Response;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Octave;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ClassId;

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x3052BE0", Offset = "0x3052BE0", VA = "0x3052BE0")]
		public KeyPoint(Point2f pt, float size, float angle = -1f, float response = 0f, int octave = 0, int classId = -1)
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x3052BF4", Offset = "0x3052BF4", VA = "0x3052BF4")]
		public KeyPoint(float x, float y, float size, float angle = -1f, float response = 0f, int octave = 0, int classId = -1)
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x3052C68", Offset = "0x3052C68", VA = "0x3052C68", Slot = "4")]
		public bool Equals(KeyPoint obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x3052CF4", Offset = "0x3052CF4", VA = "0x3052CF4")]
		public static bool operator ==(KeyPoint lhs, KeyPoint rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x3052D28", Offset = "0x3052D28", VA = "0x3052D28")]
		public static bool operator !=(KeyPoint lhs, KeyPoint rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x3052D60", Offset = "0x3052D60", VA = "0x3052D60", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x3052DF0", Offset = "0x3052DF0", VA = "0x3052DF0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x3052E88", Offset = "0x3052E88", VA = "0x3052E88", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200009B")]
	public struct MatType : IEquatable<MatType>, IEquatable<int>
	{
		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Value;

		[Token(Token = "0x40001CD")]
		private const int CV_CN_MAX = 512;

		[Token(Token = "0x40001CE")]
		private const int CV_CN_SHIFT = 3;

		[Token(Token = "0x40001CF")]
		private const int CV_DEPTH_MAX = 8;

		[Token(Token = "0x40001D0")]
		public const int CV_8U = 0;

		[Token(Token = "0x40001D1")]
		public const int CV_8S = 1;

		[Token(Token = "0x40001D2")]
		public const int CV_16U = 2;

		[Token(Token = "0x40001D3")]
		public const int CV_16S = 3;

		[Token(Token = "0x40001D4")]
		public const int CV_32S = 4;

		[Token(Token = "0x40001D5")]
		public const int CV_32F = 5;

		[Token(Token = "0x40001D6")]
		public const int CV_64F = 6;

		[Token(Token = "0x40001D7")]
		public const int CV_USRTYPE1 = 7;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly MatType CV_8UC1;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly MatType CV_8UC2;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly MatType CV_8UC3;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly MatType CV_8UC4;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly MatType CV_8SC1;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly MatType CV_8SC2;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly MatType CV_8SC3;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly MatType CV_8SC4;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly MatType CV_16UC1;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly MatType CV_16UC2;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly MatType CV_16UC3;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static readonly MatType CV_16UC4;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly MatType CV_16SC1;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static readonly MatType CV_16SC2;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly MatType CV_16SC3;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static readonly MatType CV_16SC4;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly MatType CV_32SC1;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static readonly MatType CV_32SC2;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly MatType CV_32SC3;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static readonly MatType CV_32SC4;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly MatType CV_32FC1;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static readonly MatType CV_32FC2;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly MatType CV_32FC3;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static readonly MatType CV_32FC4;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly MatType CV_64FC1;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static readonly MatType CV_64FC2;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly MatType CV_64FC3;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static readonly MatType CV_64FC4;

		[Token(Token = "0x170000C8")]
		public int Depth
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0x21769A8", Offset = "0x21769A8", VA = "0x21769A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C9")]
		public bool IsInteger
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0x21769B4", Offset = "0x21769B4", VA = "0x21769B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CA")]
		public int Channels
		{
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0x21769C8", Offset = "0x21769C8", VA = "0x21769C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x2176994", Offset = "0x2176994", VA = "0x2176994")]
		public MatType(int value)
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x217699C", Offset = "0x217699C", VA = "0x217699C")]
		public static implicit operator int(MatType self)
		{
			return default(int);
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x21769A0", Offset = "0x21769A0", VA = "0x21769A0")]
		public static implicit operator MatType(int value)
		{
			return default(MatType);
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x21769D8", Offset = "0x21769D8", VA = "0x21769D8", Slot = "4")]
		public bool Equals(MatType other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x21769E8", Offset = "0x21769E8", VA = "0x21769E8", Slot = "5")]
		public bool Equals(int other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x21769F8", Offset = "0x21769F8", VA = "0x21769F8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x2176AEC", Offset = "0x2176AEC", VA = "0x2176AEC")]
		public static bool operator ==(MatType self, MatType other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x2176AF8", Offset = "0x2176AF8", VA = "0x2176AF8")]
		public static bool operator !=(MatType self, MatType other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x2176B04", Offset = "0x2176B04", VA = "0x2176B04")]
		public static bool operator ==(MatType self, int other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x2176B10", Offset = "0x2176B10", VA = "0x2176B10")]
		public static bool operator !=(MatType self, int other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x2176B1C", Offset = "0x2176B1C", VA = "0x2176B1C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x2176B24", Offset = "0x2176B24", VA = "0x2176B24", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x2176D1C", Offset = "0x2176D1C", VA = "0x2176D1C")]
		public static MatType CV_8UC(int ch)
		{
			return default(MatType);
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x2176EB4", Offset = "0x2176EB4", VA = "0x2176EB4")]
		public static MatType CV_8SC(int ch)
		{
			return default(MatType);
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x2176F24", Offset = "0x2176F24", VA = "0x2176F24")]
		public static MatType CV_16UC(int ch)
		{
			return default(MatType);
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x2176F94", Offset = "0x2176F94", VA = "0x2176F94")]
		public static MatType CV_16SC(int ch)
		{
			return default(MatType);
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x2177004", Offset = "0x2177004", VA = "0x2177004")]
		public static MatType CV_32SC(int ch)
		{
			return default(MatType);
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x2177074", Offset = "0x2177074", VA = "0x2177074")]
		public static MatType CV_32FC(int ch)
		{
			return default(MatType);
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x21770E4", Offset = "0x21770E4", VA = "0x21770E4")]
		public static MatType CV_64FC(int ch)
		{
			return default(MatType);
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x2176D8C", Offset = "0x2176D8C", VA = "0x2176D8C")]
		public static MatType MakeType(int depth, int channels)
		{
			return default(MatType);
		}
	}
	[Serializable]
	[Token(Token = "0x200009C")]
	public struct Point : IEquatable<Point>
	{
		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x40001F6")]
		public const int SizeOf = 8;

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x426B62C", Offset = "0x426B62C", VA = "0x426B62C")]
		public Point(int x, int y)
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x426B634", Offset = "0x426B634", VA = "0x426B634")]
		public Point(double x, double y)
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x426B664", Offset = "0x426B664", VA = "0x426B664")]
		public static implicit operator Vec2i(Point point)
		{
			return default(Vec2i);
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x426B698", Offset = "0x426B698", VA = "0x426B698")]
		public static implicit operator Point(Vec2i vec)
		{
			return default(Point);
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x426B69C", Offset = "0x426B69C", VA = "0x426B69C", Slot = "4")]
		public bool Equals(Point obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x426B6C4", Offset = "0x426B6C4", VA = "0x426B6C4")]
		public static bool operator ==(Point lhs, Point rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x426B6E4", Offset = "0x426B6E4", VA = "0x426B6E4")]
		public static bool operator !=(Point lhs, Point rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x426B704", Offset = "0x426B704", VA = "0x426B704")]
		public static Point operator +(Point pt)
		{
			return default(Point);
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x426B708", Offset = "0x426B708", VA = "0x426B708")]
		public static Point operator -(Point pt)
		{
			return default(Point);
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x426B71C", Offset = "0x426B71C", VA = "0x426B71C")]
		public static Point operator +(Point p1, Point p2)
		{
			return default(Point);
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x426B734", Offset = "0x426B734", VA = "0x426B734")]
		public static Point operator -(Point p1, Point p2)
		{
			return default(Point);
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x426B74C", Offset = "0x426B74C", VA = "0x426B74C")]
		public static Point operator *(Point pt, double scale)
		{
			return default(Point);
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x426B79C", Offset = "0x426B79C", VA = "0x426B79C")]
		public static Point operator /(Point pt, double scale)
		{
			return default(Point);
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x426B7EC", Offset = "0x426B7EC", VA = "0x426B7EC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x426B86C", Offset = "0x426B86C", VA = "0x426B86C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x426B8A4", Offset = "0x426B8A4", VA = "0x426B8A4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x426B940", Offset = "0x426B940", VA = "0x426B940")]
		public int LengthPow2()
		{
			return default(int);
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x426B950", Offset = "0x426B950", VA = "0x426B950")]
		public double Length()
		{
			return default(double);
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x426B9DC", Offset = "0x426B9DC", VA = "0x426B9DC")]
		public static int DistancePow2(Point p1, Point p2)
		{
			return default(int);
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x426B9F8", Offset = "0x426B9F8", VA = "0x426B9F8")]
		public static double Distance(Point p1, Point p2)
		{
			return default(double);
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x426BAA0", Offset = "0x426BAA0", VA = "0x426BAA0")]
		public double DistanceTo(Point p)
		{
			return default(double);
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x426BAA8", Offset = "0x426BAA8", VA = "0x426BAA8")]
		public static double DotProduct(Point p1, Point p2)
		{
			return default(double);
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x426BAC0", Offset = "0x426BAC0", VA = "0x426BAC0")]
		public double DotProduct(Point p)
		{
			return default(double);
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x426BAD8", Offset = "0x426BAD8", VA = "0x426BAD8")]
		public static double CrossProduct(Point p1, Point p2)
		{
			return default(double);
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x426BAF4", Offset = "0x426BAF4", VA = "0x426BAF4")]
		public double CrossProduct(Point p)
		{
			return default(double);
		}
	}
	[Serializable]
	[Token(Token = "0x200009D")]
	public struct Point2d : IEquatable<Point2d>
	{
		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double X;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Y;

		[Token(Token = "0x40001F9")]
		public const int SizeOf = 16;

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x426BB10", Offset = "0x426BB10", VA = "0x426BB10")]
		public Point2d(double x, double y)
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x426BB18", Offset = "0x426BB18", VA = "0x426BB18")]
		public static implicit operator Point(Point2d self)
		{
			return default(Point);
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x426BB48", Offset = "0x426BB48", VA = "0x426BB48")]
		public static implicit operator Point2d(Point point)
		{
			return default(Point2d);
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x426BB58", Offset = "0x426BB58", VA = "0x426BB58")]
		public static implicit operator Vec2d(Point2d point)
		{
			return default(Vec2d);
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x426BB84", Offset = "0x426BB84", VA = "0x426BB84")]
		public static implicit operator Point2d(Vec2d vec)
		{
			return default(Point2d);
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x426BB88", Offset = "0x426BB88", VA = "0x426BB88", Slot = "4")]
		public bool Equals(Point2d obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x426BBAC", Offset = "0x426BBAC", VA = "0x426BBAC")]
		public static bool operator ==(Point2d lhs, Point2d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x426BBC4", Offset = "0x426BBC4", VA = "0x426BBC4")]
		public static bool operator !=(Point2d lhs, Point2d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x426BBDC", Offset = "0x426BBDC", VA = "0x426BBDC")]
		public static Point2d operator +(Point2d pt)
		{
			return default(Point2d);
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x426BBE0", Offset = "0x426BBE0", VA = "0x426BBE0")]
		public static Point2d operator -(Point2d pt)
		{
			return default(Point2d);
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x426BBEC", Offset = "0x426BBEC", VA = "0x426BBEC")]
		public static Point2d operator +(Point2d p1, Point2d p2)
		{
			return default(Point2d);
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x426BBF8", Offset = "0x426BBF8", VA = "0x426BBF8")]
		public static Point2d operator -(Point2d p1, Point2d p2)
		{
			return default(Point2d);
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x426BC04", Offset = "0x426BC04", VA = "0x426BC04")]
		public static Point2d operator *(Point2d pt, double scale)
		{
			return default(Point2d);
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x426BC20", Offset = "0x426BC20", VA = "0x426BC20", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x426BCA8", Offset = "0x426BCA8", VA = "0x426BCA8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x426BCE0", Offset = "0x426BCE0", VA = "0x426BCE0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x426BD84", Offset = "0x426BD84", VA = "0x426BD84")]
		public static double Distance(Point2d p1, Point2d p2)
		{
			return default(double);
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x426BE50", Offset = "0x426BE50", VA = "0x426BE50")]
		public double DistanceTo(Point2d p)
		{
			return default(double);
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x426BE68", Offset = "0x426BE68", VA = "0x426BE68")]
		public static double DotProduct(Point2d p1, Point2d p2)
		{
			return default(double);
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x426BE78", Offset = "0x426BE78", VA = "0x426BE78")]
		public double DotProduct(Point2d p)
		{
			return default(double);
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x426BE8C", Offset = "0x426BE8C", VA = "0x426BE8C")]
		public static double CrossProduct(Point2d p1, Point2d p2)
		{
			return default(double);
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x426BE9C", Offset = "0x426BE9C", VA = "0x426BE9C")]
		public double CrossProduct(Point2d p)
		{
			return default(double);
		}
	}
	[Serializable]
	[Token(Token = "0x200009E")]
	public struct Point2f : IEquatable<Point2f>
	{
		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x40001FC")]
		public const int SizeOf = 8;

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x426BEB0", Offset = "0x426BEB0", VA = "0x426BEB0")]
		public Point2f(float x, float y)
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x426BEB8", Offset = "0x426BEB8", VA = "0x426BEB8")]
		public static implicit operator Point(Point2f self)
		{
			return default(Point);
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x426BEF0", Offset = "0x426BEF0", VA = "0x426BEF0")]
		public static implicit operator Point2f(Point point)
		{
			return default(Point2f);
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x426BF00", Offset = "0x426BF00", VA = "0x426BF00")]
		public static implicit operator Vec2f(Point2f point)
		{
			return default(Vec2f);
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x426BF2C", Offset = "0x426BF2C", VA = "0x426BF2C")]
		public static implicit operator Point2f(Vec2f vec)
		{
			return default(Point2f);
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x426BF30", Offset = "0x426BF30", VA = "0x426BF30", Slot = "4")]
		public bool Equals(Point2f obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x426BF54", Offset = "0x426BF54", VA = "0x426BF54")]
		public static bool operator ==(Point2f lhs, Point2f rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x426BF6C", Offset = "0x426BF6C", VA = "0x426BF6C")]
		public static bool operator !=(Point2f lhs, Point2f rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x426BF84", Offset = "0x426BF84", VA = "0x426BF84")]
		public static Point2f operator +(Point2f pt)
		{
			return default(Point2f);
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x426BF88", Offset = "0x426BF88", VA = "0x426BF88")]
		public static Point2f operator -(Point2f pt)
		{
			return default(Point2f);
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x426BF94", Offset = "0x426BF94", VA = "0x426BF94")]
		public static Point2f operator +(Point2f p1, Point2f p2)
		{
			return default(Point2f);
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x426BFA0", Offset = "0x426BFA0", VA = "0x426BFA0")]
		public static Point2f operator -(Point2f p1, Point2f p2)
		{
			return default(Point2f);
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x426BFAC", Offset = "0x426BFAC", VA = "0x426BFAC")]
		public static Point2f operator *(Point2f pt, double scale)
		{
			return default(Point2f);
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x426BFC8", Offset = "0x426BFC8", VA = "0x426BFC8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x426C048", Offset = "0x426C048", VA = "0x426C048", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x426C080", Offset = "0x426C080", VA = "0x426C080", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x426C11C", Offset = "0x426C11C", VA = "0x426C11C")]
		public static double Distance(Point2f p1, Point2f p2)
		{
			return default(double);
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x426C1F0", Offset = "0x426C1F0", VA = "0x426C1F0")]
		public double DistanceTo(Point2f p)
		{
			return default(double);
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x426C208", Offset = "0x426C208", VA = "0x426C208")]
		public static double DotProduct(Point2f p1, Point2f p2)
		{
			return default(double);
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x426C21C", Offset = "0x426C21C", VA = "0x426C21C")]
		public double DotProduct(Point2f p)
		{
			return default(double);
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x426C234", Offset = "0x426C234", VA = "0x426C234")]
		public static double CrossProduct(Point2f p1, Point2f p2)
		{
			return default(double);
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x426C248", Offset = "0x426C248", VA = "0x426C248")]
		public double CrossProduct(Point2f p)
		{
			return default(double);
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public struct Point3d : IEquatable<Point3d>
	{
		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double X;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Y;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double Z;

		[Token(Token = "0x4000200")]
		public const int SizeOf = 24;

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x426C260", Offset = "0x426C260", VA = "0x426C260")]
		public Point3d(double x, double y, double z)
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x426C26C", Offset = "0x426C26C", VA = "0x426C26C")]
		public static implicit operator Vec3d(Point3d point)
		{
			return default(Vec3d);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x426C2A0", Offset = "0x426C2A0", VA = "0x426C2A0")]
		public static implicit operator Point3d(Vec3d vec)
		{
			return default(Point3d);
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x426C2A4", Offset = "0x426C2A4", VA = "0x426C2A4", Slot = "4")]
		public bool Equals(Point3d obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x426C2D4", Offset = "0x426C2D4", VA = "0x426C2D4")]
		public static bool operator ==(Point3d lhs, Point3d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x426C2F4", Offset = "0x426C2F4", VA = "0x426C2F4")]
		public static bool operator !=(Point3d lhs, Point3d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x426C314", Offset = "0x426C314", VA = "0x426C314")]
		public static Point3d operator +(Point3d pt)
		{
			return default(Point3d);
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x426C318", Offset = "0x426C318", VA = "0x426C318")]
		public static Point3d operator -(Point3d pt)
		{
			return default(Point3d);
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x426C328", Offset = "0x426C328", VA = "0x426C328")]
		public static Point3d operator +(Point3d p1, Point3d p2)
		{
			return default(Point3d);
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x426C338", Offset = "0x426C338", VA = "0x426C338")]
		public static Point3d operator -(Point3d p1, Point3d p2)
		{
			return default(Point3d);
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x426C348", Offset = "0x426C348", VA = "0x426C348")]
		public static Point3d operator *(Point3d pt, double scale)
		{
			return default(Point3d);
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x426C358", Offset = "0x426C358", VA = "0x426C358", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x426C3E8", Offset = "0x426C3E8", VA = "0x426C3E8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x426C43C", Offset = "0x426C43C", VA = "0x426C43C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000A0")]
	public struct Point3f : IEquatable<Point3f>
	{
		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Z;

		[Token(Token = "0x4000204")]
		public const int SizeOf = 12;

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x426C4FC", Offset = "0x426C4FC", VA = "0x426C4FC")]
		public Point3f(float x, float y, float z)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x426C508", Offset = "0x426C508", VA = "0x426C508")]
		public static implicit operator Vec3f(Point3f point)
		{
			return default(Vec3f);
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x426C53C", Offset = "0x426C53C", VA = "0x426C53C")]
		public static implicit operator Point3f(Vec3f vec)
		{
			return default(Point3f);
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x426C540", Offset = "0x426C540", VA = "0x426C540", Slot = "4")]
		public bool Equals(Point3f obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x426C570", Offset = "0x426C570", VA = "0x426C570")]
		public static bool operator ==(Point3f lhs, Point3f rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x426C590", Offset = "0x426C590", VA = "0x426C590")]
		public static bool operator !=(Point3f lhs, Point3f rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x426C5B0", Offset = "0x426C5B0", VA = "0x426C5B0")]
		public static Point3f operator +(Point3f pt)
		{
			return default(Point3f);
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x426C5B4", Offset = "0x426C5B4", VA = "0x426C5B4")]
		public static Point3f operator -(Point3f pt)
		{
			return default(Point3f);
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x426C5C4", Offset = "0x426C5C4", VA = "0x426C5C4")]
		public static Point3f operator +(Point3f p1, Point3f p2)
		{
			return default(Point3f);
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x426C5D4", Offset = "0x426C5D4", VA = "0x426C5D4")]
		public static Point3f operator -(Point3f p1, Point3f p2)
		{
			return default(Point3f);
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x426C5E4", Offset = "0x426C5E4", VA = "0x426C5E4")]
		public static Point3f operator *(Point3f pt, double scale)
		{
			return default(Point3f);
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x426C60C", Offset = "0x426C60C", VA = "0x426C60C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x426C69C", Offset = "0x426C69C", VA = "0x426C69C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0x426C6F0", Offset = "0x426C6F0", VA = "0x426C6F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000A1")]
	public struct Point3i : IEquatable<Point3i>
	{
		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Z;

		[Token(Token = "0x4000208")]
		public const int SizeOf = 12;

		[Token(Token = "0x6001141")]
		[Address(RVA = "0x426C7B0", Offset = "0x426C7B0", VA = "0x426C7B0")]
		public Point3i(int x, int y, int z)
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0x426C7BC", Offset = "0x426C7BC", VA = "0x426C7BC")]
		public static implicit operator Vec3i(Point3i point)
		{
			return default(Vec3i);
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0x426C7FC", Offset = "0x426C7FC", VA = "0x426C7FC")]
		public static implicit operator Point3i(Vec3i vec)
		{
			return default(Point3i);
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0x426C804", Offset = "0x426C804", VA = "0x426C804", Slot = "4")]
		public bool Equals(Point3i obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x426C838", Offset = "0x426C838", VA = "0x426C838")]
		public static bool operator ==(Point3i lhs, Point3i rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x426C868", Offset = "0x426C868", VA = "0x426C868")]
		public static bool operator !=(Point3i lhs, Point3i rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x426C898", Offset = "0x426C898", VA = "0x426C898")]
		public static Point3i operator +(Point3i pt)
		{
			return default(Point3i);
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0x426C8A0", Offset = "0x426C8A0", VA = "0x426C8A0")]
		public static Point3i operator -(Point3i pt)
		{
			return default(Point3i);
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0x426C8B8", Offset = "0x426C8B8", VA = "0x426C8B8")]
		public static Point3i operator +(Point3i p1, Point3i p2)
		{
			return default(Point3i);
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0x426C8D4", Offset = "0x426C8D4", VA = "0x426C8D4")]
		public static Point3i operator -(Point3i p1, Point3i p2)
		{
			return default(Point3i);
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0x426C8F0", Offset = "0x426C8F0", VA = "0x426C8F0")]
		public static Point3i operator *(Point3i pt, double scale)
		{
			return default(Point3i);
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0x426C94C", Offset = "0x426C94C", VA = "0x426C94C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0x426C9DC", Offset = "0x426C9DC", VA = "0x426C9DC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0x426CA30", Offset = "0x426CA30", VA = "0x426CA30", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000A2")]
	public struct Range
	{
		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Start;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int End;

		[Token(Token = "0x170000CB")]
		public static Range All
		{
			[Token(Token = "0x6001150")]
			[Address(RVA = "0x4270320", Offset = "0x4270320", VA = "0x4270320")]
			get
			{
				return default(Range);
			}
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0x4270318", Offset = "0x4270318", VA = "0x4270318")]
		public Range(int start, int end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A3")]
	public struct Rangef
	{
		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Start;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float End;

		[Token(Token = "0x170000CC")]
		public static Range All
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0x4270368", Offset = "0x4270368", VA = "0x4270368")]
			get
			{
				return default(Range);
			}
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x4270328", Offset = "0x4270328", VA = "0x4270328")]
		public Rangef(float start, float end)
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0x4270330", Offset = "0x4270330", VA = "0x4270330")]
		public static implicit operator Range(Rangef range)
		{
			return default(Range);
		}
	}
	[Serializable]
	[Token(Token = "0x20000A4")]
	public struct Rect : IEquatable<Rect>
	{
		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Width;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int Height;

		[Token(Token = "0x4000211")]
		public const int SizeOf = 16;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Rect Empty;

		[Token(Token = "0x170000CD")]
		public int Top
		{
			[Token(Token = "0x6001163")]
			[Address(RVA = "0x4270B00", Offset = "0x4270B00", VA = "0x4270B00")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001164")]
			[Address(RVA = "0x4270B08", Offset = "0x4270B08", VA = "0x4270B08")]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public int Bottom
		{
			[Token(Token = "0x6001165")]
			[Address(RVA = "0x4270B10", Offset = "0x4270B10", VA = "0x4270B10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000CF")]
		public int Left
		{
			[Token(Token = "0x6001166")]
			[Address(RVA = "0x4270B24", Offset = "0x4270B24", VA = "0x4270B24")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001167")]
			[Address(RVA = "0x4270B2C", Offset = "0x4270B2C", VA = "0x4270B2C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public int Right
		{
			[Token(Token = "0x6001168")]
			[Address(RVA = "0x4270B34", Offset = "0x4270B34", VA = "0x4270B34")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D1")]
		public Point Location
		{
			[Token(Token = "0x6001169")]
			[Address(RVA = "0x4270B48", Offset = "0x4270B48", VA = "0x4270B48")]
			get
			{
				return default(Point);
			}
			[Token(Token = "0x600116A")]
			[Address(RVA = "0x4270B50", Offset = "0x4270B50", VA = "0x4270B50")]
			set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public Size Size
		{
			[Token(Token = "0x600116B")]
			[Address(RVA = "0x4270B5C", Offset = "0x4270B5C", VA = "0x4270B5C")]
			get
			{
				return default(Size);
			}
			[Token(Token = "0x600116C")]
			[Address(RVA = "0x4270B6C", Offset = "0x4270B6C", VA = "0x4270B6C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public Point Center
		{
			[Token(Token = "0x600116D")]
			[Address(RVA = "0x4270B78", Offset = "0x4270B78", VA = "0x4270B78")]
			get
			{
				return default(Point);
			}
		}

		[Token(Token = "0x170000D4")]
		public Point TopLeft
		{
			[Token(Token = "0x600116E")]
			[Address(RVA = "0x4270BA0", Offset = "0x4270BA0", VA = "0x4270BA0")]
			get
			{
				return default(Point);
			}
		}

		[Token(Token = "0x170000D5")]
		public Point TopRight
		{
			[Token(Token = "0x600116F")]
			[Address(RVA = "0x4270BA8", Offset = "0x4270BA8", VA = "0x4270BA8")]
			get
			{
				return default(Point);
			}
		}

		[Token(Token = "0x170000D6")]
		public Point BottomRight
		{
			[Token(Token = "0x6001170")]
			[Address(RVA = "0x4270BC0", Offset = "0x4270BC0", VA = "0x4270BC0")]
			get
			{
				return default(Point);
			}
		}

		[Token(Token = "0x170000D7")]
		public Point BottomLeft
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0x4270BE0", Offset = "0x4270BE0", VA = "0x4270BE0")]
			get
			{
				return default(Point);
			}
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x4270370", Offset = "0x4270370", VA = "0x4270370")]
		public Rect(int x, int y, int width, int height)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x427037C", Offset = "0x427037C", VA = "0x427037C")]
		public Rect(Point location, Size size)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x4270390", Offset = "0x4270390", VA = "0x4270390")]
		public static Rect FromLTRB(int left, int top, int right, int bottom)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x427046C", Offset = "0x427046C", VA = "0x427046C")]
		public static Rect BoundingBoxForPoints(Point[] points)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x42705DC", Offset = "0x42705DC", VA = "0x42705DC", Slot = "4")]
		public bool Equals(Rect obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x4270620", Offset = "0x4270620", VA = "0x4270620")]
		public static bool operator ==(Rect lhs, Rect rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x4270664", Offset = "0x4270664", VA = "0x4270664")]
		public static bool operator !=(Rect lhs, Rect rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x42706A8", Offset = "0x42706A8", VA = "0x42706A8")]
		public static Rect operator +(Rect rect, Point pt)
		{
			return default(Rect);
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x42706C0", Offset = "0x42706C0", VA = "0x42706C0")]
		public static Rect operator +(Rect rect1, Rect rect2)
		{
			return default(Rect);
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x42706EC", Offset = "0x42706EC", VA = "0x42706EC")]
		public static Rect operator -(Rect rect, Point pt)
		{
			return default(Rect);
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x4270704", Offset = "0x4270704", VA = "0x4270704")]
		public static Rect operator +(Rect rect, Size size)
		{
			return default(Rect);
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x427071C", Offset = "0x427071C", VA = "0x427071C")]
		public static Rect operator -(Rect rect, Size size)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x4270734", Offset = "0x4270734", VA = "0x4270734")]
		public static Rect operator &(Rect a, Rect b)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x42708F0", Offset = "0x42708F0", VA = "0x42708F0")]
		public static Rect operator |(Rect a, Rect b)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x4270A70", Offset = "0x4270A70", VA = "0x4270A70")]
		public static Rect operator *(Rect a, double f)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x4270BFC", Offset = "0x4270BFC", VA = "0x4270BFC")]
		public bool IsEmpty()
		{
			return default(bool);
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x4270C20", Offset = "0x4270C20", VA = "0x4270C20")]
		public bool Contains(int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x4270C6C", Offset = "0x4270C6C", VA = "0x4270C6C")]
		public bool Contains(Point pt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0x4270CBC", Offset = "0x4270CBC", VA = "0x4270CBC")]
		public bool Contains(Point[] pts)
		{
			return default(bool);
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x4270D5C", Offset = "0x4270D5C", VA = "0x4270D5C")]
		public bool Contains(Rect rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x4270DB0", Offset = "0x4270DB0", VA = "0x4270DB0")]
		public void Inflate(int width, int height)
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x4270DD4", Offset = "0x4270DD4", VA = "0x4270DD4")]
		public void Inflate(Size size)
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x4270DFC", Offset = "0x4270DFC", VA = "0x4270DFC")]
		public static Rect Inflate(Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x42707C0", Offset = "0x42707C0", VA = "0x42707C0")]
		public static Rect Intersect(Rect a, Rect b)
		{
			return default(Rect);
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x4270E20", Offset = "0x4270E20", VA = "0x4270E20")]
		public Rect Intersect(Rect rect)
		{
			return default(Rect);
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x4270EA4", Offset = "0x4270EA4", VA = "0x4270EA4")]
		public bool IntersectsWith(Rect rect)
		{
			return default(bool);
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x4270EF8", Offset = "0x4270EF8", VA = "0x4270EF8")]
		public Rect Union(Rect rect)
		{
			return default(Rect);
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x427097C", Offset = "0x427097C", VA = "0x427097C")]
		public static Rect Union(Rect a, Rect b)
		{
			return default(Rect);
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x4270F7C", Offset = "0x4270F7C", VA = "0x4270F7C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x4271004", Offset = "0x4271004", VA = "0x4271004", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x427106C", Offset = "0x427106C", VA = "0x427106C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x4271240", Offset = "0x4271240", VA = "0x4271240")]
		public Point[] ToArray()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000A5")]
	public struct Rect2d : IEquatable<Rect2d>
	{
		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double X;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Y;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double Width;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double Height;

		[Token(Token = "0x4000217")]
		public const int SizeOf = 32;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Rect2d Empty;

		[Token(Token = "0x170000D8")]
		public double Top
		{
			[Token(Token = "0x6001190")]
			[Address(RVA = "0x427188C", Offset = "0x427188C", VA = "0x427188C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001191")]
			[Address(RVA = "0x4271894", Offset = "0x4271894", VA = "0x4271894")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public double Bottom
		{
			[Token(Token = "0x6001192")]
			[Address(RVA = "0x427189C", Offset = "0x427189C", VA = "0x427189C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000DA")]
		public double Left
		{
			[Token(Token = "0x6001193")]
			[Address(RVA = "0x42718B4", Offset = "0x42718B4", VA = "0x42718B4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001194")]
			[Address(RVA = "0x42718BC", Offset = "0x42718BC", VA = "0x42718BC")]
			set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public double Right
		{
			[Token(Token = "0x6001195")]
			[Address(RVA = "0x42718C4", Offset = "0x42718C4", VA = "0x42718C4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000DC")]
		public Point2d Location
		{
			[Token(Token = "0x6001196")]
			[Address(RVA = "0x42718DC", Offset = "0x42718DC", VA = "0x42718DC")]
			get
			{
				return default(Point2d);
			}
			[Token(Token = "0x6001197")]
			[Address(RVA = "0x42718E4", Offset = "0x42718E4", VA = "0x42718E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public Size2d Size
		{
			[Token(Token = "0x6001198")]
			[Address(RVA = "0x42718EC", Offset = "0x42718EC", VA = "0x42718EC")]
			get
			{
				return default(Size2d);
			}
			[Token(Token = "0x6001199")]
			[Address(RVA = "0x427195C", Offset = "0x427195C", VA = "0x427195C")]
			set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		public Point2d TopLeft
		{
			[Token(Token = "0x600119A")]
			[Address(RVA = "0x4271964", Offset = "0x4271964", VA = "0x4271964")]
			get
			{
				return default(Point2d);
			}
		}

		[Token(Token = "0x170000DF")]
		public Point2d BottomRight
		{
			[Token(Token = "0x600119B")]
			[Address(RVA = "0x427196C", Offset = "0x427196C", VA = "0x427196C")]
			get
			{
				return default(Point2d);
			}
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x4271324", Offset = "0x4271324", VA = "0x4271324")]
		public Rect2d(double x, double y, double width, double height)
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x4271330", Offset = "0x4271330", VA = "0x4271330")]
		public Rect2d(Point2d location, Size2d size)
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x427133C", Offset = "0x427133C", VA = "0x427133C")]
		public static Rect2d FromLTRB(double left, double top, double right, double bottom)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x427141C", Offset = "0x427141C", VA = "0x427141C", Slot = "4")]
		public bool Equals(Rect2d obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x4271458", Offset = "0x4271458", VA = "0x4271458")]
		public static bool operator ==(Rect2d lhs, Rect2d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x4271480", Offset = "0x4271480", VA = "0x4271480")]
		public static bool operator !=(Rect2d lhs, Rect2d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x42714A8", Offset = "0x42714A8", VA = "0x42714A8")]
		public static Rect2d operator +(Rect2d rect, Point2d pt)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x42714B4", Offset = "0x42714B4", VA = "0x42714B4")]
		public static Rect2d operator -(Rect2d rect, Point2d pt)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x42714C0", Offset = "0x42714C0", VA = "0x42714C0")]
		public static Rect2d operator +(Rect2d rect, Size2d size)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x42714CC", Offset = "0x42714CC", VA = "0x42714CC")]
		public static Rect2d operator -(Rect2d rect, Size2d size)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x42714D8", Offset = "0x42714D8", VA = "0x42714D8")]
		public static Rect2d operator &(Rect2d a, Rect2d b)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x42716D4", Offset = "0x42716D4", VA = "0x42716D4")]
		public static Rect2d operator |(Rect2d a, Rect2d b)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x4271984", Offset = "0x4271984", VA = "0x4271984")]
		public bool Contains(double x, double y)
		{
			return default(bool);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x42719D4", Offset = "0x42719D4", VA = "0x42719D4")]
		public bool Contains(Point2d pt)
		{
			return default(bool);
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x4271A24", Offset = "0x4271A24", VA = "0x4271A24")]
		public bool Contains(Rect2d rect)
		{
			return default(bool);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x4271A70", Offset = "0x4271A70", VA = "0x4271A70")]
		public void Inflate(double width, double height)
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x4271A8C", Offset = "0x4271A8C", VA = "0x4271A8C")]
		public void Inflate(Size2d size)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x4271AA8", Offset = "0x4271AA8", VA = "0x4271AA8")]
		public static Rect Inflate(Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x4271594", Offset = "0x4271594", VA = "0x4271594")]
		public static Rect2d Intersect(Rect2d a, Rect2d b)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x4271ACC", Offset = "0x4271ACC", VA = "0x4271ACC")]
		public Rect2d Intersect(Rect2d rect)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x4271B84", Offset = "0x4271B84", VA = "0x4271B84")]
		public bool IntersectsWith(Rect2d rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x4271BD0", Offset = "0x4271BD0", VA = "0x4271BD0")]
		public Rect2d Union(Rect2d rect)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x4271790", Offset = "0x4271790", VA = "0x4271790")]
		public static Rect2d Union(Rect2d a, Rect2d b)
		{
			return default(Rect2d);
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x4271C88", Offset = "0x4271C88", VA = "0x4271C88", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x4271D10", Offset = "0x4271D10", VA = "0x4271D10", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x4271D78", Offset = "0x4271D78", VA = "0x4271D78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000A6")]
	public struct Rectf : IEquatable<Rectf>
	{
		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Width;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float Height;

		[Token(Token = "0x400021D")]
		public const int SizeOf = 16;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Rectf Empty;

		[Token(Token = "0x170000E0")]
		public float Top
		{
			[Token(Token = "0x60011B7")]
			[Address(RVA = "0x42724B8", Offset = "0x42724B8", VA = "0x42724B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011B8")]
			[Address(RVA = "0x42724C0", Offset = "0x42724C0", VA = "0x42724C0")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public float Bottom
		{
			[Token(Token = "0x60011B9")]
			[Address(RVA = "0x42724C8", Offset = "0x42724C8", VA = "0x42724C8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E2")]
		public float Left
		{
			[Token(Token = "0x60011BA")]
			[Address(RVA = "0x42724E0", Offset = "0x42724E0", VA = "0x42724E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011BB")]
			[Address(RVA = "0x42724E8", Offset = "0x42724E8", VA = "0x42724E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public float Right
		{
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x42724F0", Offset = "0x42724F0", VA = "0x42724F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E4")]
		public Point2f Location
		{
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0x4272508", Offset = "0x4272508", VA = "0x4272508")]
			get
			{
				return default(Point2f);
			}
			[Token(Token = "0x60011BE")]
			[Address(RVA = "0x4272510", Offset = "0x4272510", VA = "0x4272510")]
			set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public Size2f Size
		{
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0x4272518", Offset = "0x4272518", VA = "0x4272518")]
			get
			{
				return default(Size2f);
			}
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0x4272528", Offset = "0x4272528", VA = "0x4272528")]
			set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public Point2f TopLeft
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x4272530", Offset = "0x4272530", VA = "0x4272530")]
			get
			{
				return default(Point2f);
			}
		}

		[Token(Token = "0x170000E7")]
		public Point2f BottomRight
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x4272538", Offset = "0x4272538", VA = "0x4272538")]
			get
			{
				return default(Point2f);
			}
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x4271F50", Offset = "0x4271F50", VA = "0x4271F50")]
		public Rectf(float x, float y, float width, float height)
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x4271F5C", Offset = "0x4271F5C", VA = "0x4271F5C")]
		public Rectf(Point2f location, Size2f size)
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x4271F68", Offset = "0x4271F68", VA = "0x4271F68")]
		public static Rectf FromLTRB(float left, float top, float right, float bottom)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x4272048", Offset = "0x4272048", VA = "0x4272048", Slot = "4")]
		public bool Equals(Rectf obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x4272084", Offset = "0x4272084", VA = "0x4272084")]
		public static bool operator ==(Rectf lhs, Rectf rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x42720AC", Offset = "0x42720AC", VA = "0x42720AC")]
		public static bool operator !=(Rectf lhs, Rectf rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x42720D4", Offset = "0x42720D4", VA = "0x42720D4")]
		public static Rectf operator +(Rectf rect, Point2f pt)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x42720E0", Offset = "0x42720E0", VA = "0x42720E0")]
		public static Rectf operator -(Rectf rect, Point2f pt)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x42720EC", Offset = "0x42720EC", VA = "0x42720EC")]
		public static Rectf operator +(Rectf rect, Size2f size)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x42720F8", Offset = "0x42720F8", VA = "0x42720F8")]
		public static Rectf operator -(Rectf rect, Size2f size)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x4272104", Offset = "0x4272104", VA = "0x4272104")]
		public static Rectf operator &(Rectf a, Rectf b)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x4272300", Offset = "0x4272300", VA = "0x4272300")]
		public static Rectf operator |(Rectf a, Rectf b)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x4272550", Offset = "0x4272550", VA = "0x4272550")]
		public bool Contains(float x, float y)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x42725A0", Offset = "0x42725A0", VA = "0x42725A0")]
		public bool Contains(Point2f pt)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x42725F0", Offset = "0x42725F0", VA = "0x42725F0")]
		public bool Contains(Rectf rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x427263C", Offset = "0x427263C", VA = "0x427263C")]
		public void Inflate(float width, float height)
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x4272658", Offset = "0x4272658", VA = "0x4272658")]
		public void Inflate(Size2f size)
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x4272674", Offset = "0x4272674", VA = "0x4272674")]
		public static Rect Inflate(Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x42721C0", Offset = "0x42721C0", VA = "0x42721C0")]
		public static Rectf Intersect(Rectf a, Rectf b)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x4272698", Offset = "0x4272698", VA = "0x4272698")]
		public Rectf Intersect(Rectf rect)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x4272750", Offset = "0x4272750", VA = "0x4272750")]
		public bool IntersectsWith(Rectf rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x427279C", Offset = "0x427279C", VA = "0x427279C")]
		public Rectf Union(Rectf rect)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x42723BC", Offset = "0x42723BC", VA = "0x42723BC")]
		public static Rectf Union(Rectf a, Rectf b)
		{
			return default(Rectf);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x4272854", Offset = "0x4272854", VA = "0x4272854", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x42728DC", Offset = "0x42728DC", VA = "0x42728DC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x4272944", Offset = "0x4272944", VA = "0x4272944", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20000A7")]
	public struct RotatedRect
	{
		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Point2f Center;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Size2f Size;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Angle;

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x4272B1C", Offset = "0x4272B1C", VA = "0x4272B1C")]
		public RotatedRect(Point2f center, Size2f size, float angle)
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x4272B2C", Offset = "0x4272B2C", VA = "0x4272B2C")]
		public Point2f[] Points()
		{
			return null;
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x4272CD8", Offset = "0x4272CD8", VA = "0x4272CD8")]
		public Rect BoundingRect()
		{
			return default(Rect);
		}
	}
	[Serializable]
	[Token(Token = "0x20000A8")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAC00", Offset = "0x1DDAC00")]
	public struct Scalar : IEquatable<Scalar>
	{
		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double Val0;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Val1;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double Val2;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double Val3;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly System.Random random;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Scalar AliceBlue;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly Scalar AntiqueWhite;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly Scalar Aqua;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly Scalar Aquamarine;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly Scalar Azure;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly Scalar Beige;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly Scalar Bisque;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly Scalar Black;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly Scalar BlanchedAlmond;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly Scalar Blue;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static readonly Scalar BlueViolet;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static readonly Scalar Brown;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public static readonly Scalar BurlyWood;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public static readonly Scalar CadetBlue;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public static readonly Scalar Chartreuse;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public static readonly Scalar Chocolate;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public static readonly Scalar Coral;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public static readonly Scalar CornflowerBlue;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public static readonly Scalar Cornsilk;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public static readonly Scalar Crimson;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public static readonly Scalar Cyan;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public static readonly Scalar DarkBlue;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public static readonly Scalar DarkCyan;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public static readonly Scalar DarkGoldenrod;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public static readonly Scalar DarkGray;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public static readonly Scalar DarkGreen;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public static readonly Scalar DarkKhaki;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public static readonly Scalar DarkMagenta;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public static readonly Scalar DarkOliveGreen;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public static readonly Scalar DarkOrange;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		public static readonly Scalar DarkOrchid;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public static readonly Scalar DarkRed;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		public static readonly Scalar DarkSalmon;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		public static readonly Scalar DarkSeaGreen;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		public static readonly Scalar DarkSlateBlue;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		public static readonly Scalar DarkSlateGray;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		public static readonly Scalar DarkTurquoise;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		public static readonly Scalar DarkViolet;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		public static readonly Scalar DeepPink;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		public static readonly Scalar DeepSkyBlue;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		public static readonly Scalar DimGray;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		public static readonly Scalar DodgerBlue;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		public static readonly Scalar Firebrick;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
		public static readonly Scalar FloralWhite;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
		public static readonly Scalar ForestGreen;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A8")]
		public static readonly Scalar Fuchsia;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C8")]
		public static readonly Scalar Gainsboro;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E8")]
		public static readonly Scalar GhostWhite;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x608")]
		public static readonly Scalar Gold;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x628")]
		public static readonly Scalar Goldenrod;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x648")]
		public static readonly Scalar Gray;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x668")]
		public static readonly Scalar Green;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x688")]
		public static readonly Scalar GreenYellow;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A8")]
		public static readonly Scalar Honeydew;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C8")]
		public static readonly Scalar HotPink;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E8")]
		public static readonly Scalar IndianRed;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x708")]
		public static readonly Scalar Indigo;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x728")]
		public static readonly Scalar Ivory;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x748")]
		public static readonly Scalar Khaki;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x768")]
		public static readonly Scalar Lavender;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x788")]
		public static readonly Scalar LavenderBlush;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A8")]
		public static readonly Scalar LawnGreen;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C8")]
		public static readonly Scalar LemonChiffon;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E8")]
		public static readonly Scalar LightBlue;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x808")]
		public static readonly Scalar LightCoral;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x828")]
		public static readonly Scalar LightCyan;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x848")]
		public static readonly Scalar LightGoldenrodYellow;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x868")]
		public static readonly Scalar LightGray;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x888")]
		public static readonly Scalar LightGreen;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A8")]
		public static readonly Scalar LightPink;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C8")]
		public static readonly Scalar LightSalmon;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E8")]
		public static readonly Scalar LightSeaGreen;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x908")]
		public static readonly Scalar LightSkyBlue;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x928")]
		public static readonly Scalar LightSlateGray;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x948")]
		public static readonly Scalar LightSteelBlue;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x968")]
		public static readonly Scalar LightYellow;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x988")]
		public static readonly Scalar Lime;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A8")]
		public static readonly Scalar LimeGreen;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C8")]
		public static readonly Scalar Linen;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E8")]
		public static readonly Scalar Magenta;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA08")]
		public static readonly Scalar Maroon;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA28")]
		public static readonly Scalar MediumAquamarine;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA48")]
		public static readonly Scalar MediumBlue;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA68")]
		public static readonly Scalar MediumOrchid;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA88")]
		public static readonly Scalar MediumPurple;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA8")]
		public static readonly Scalar MediumSeaGreen;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC8")]
		public static readonly Scalar MediumSlateBlue;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE8")]
		public static readonly Scalar MediumSpringGreen;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB08")]
		public static readonly Scalar MediumTurquoise;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB28")]
		public static readonly Scalar MediumVioletRed;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB48")]
		public static readonly Scalar MidnightBlue;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB68")]
		public static readonly Scalar MintCream;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB88")]
		public static readonly Scalar MistyRose;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA8")]
		public static readonly Scalar Moccasin;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC8")]
		public static readonly Scalar NavajoWhite;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE8")]
		public static readonly Scalar Navy;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC08")]
		public static readonly Scalar OldLace;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC28")]
		public static readonly Scalar Olive;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC48")]
		public static readonly Scalar OliveDrab;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC68")]
		public static readonly Scalar Orange;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC88")]
		public static readonly Scalar OrangeRed;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA8")]
		public static readonly Scalar Orchid;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC8")]
		public static readonly Scalar PaleGoldenrod;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE8")]
		public static readonly Scalar PaleGreen;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD08")]
		public static readonly Scalar PaleTurquoise;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD28")]
		public static readonly Scalar PaleVioletRed;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD48")]
		public static readonly Scalar PapayaWhip;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD68")]
		public static readonly Scalar PeachPuff;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD88")]
		public static readonly Scalar Peru;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA8")]
		public static readonly Scalar Pink;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC8")]
		public static readonly Scalar Plum;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDE8")]
		public static readonly Scalar PowderBlue;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE08")]
		public static readonly Scalar Purple;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE28")]
		public static readonly Scalar Red;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE48")]
		public static readonly Scalar RosyBrown;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE68")]
		public static readonly Scalar RoyalBlue;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE88")]
		public static readonly Scalar SaddleBrown;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEA8")]
		public static readonly Scalar Salmon;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC8")]
		public static readonly Scalar SandyBrown;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEE8")]
		public static readonly Scalar SeaGreen;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF08")]
		public static readonly Scalar SeaShell;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF28")]
		public static readonly Scalar Sienna;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF48")]
		public static readonly Scalar Silver;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF68")]
		public static readonly Scalar SkyBlue;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF88")]
		public static readonly Scalar SlateBlue;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA8")]
		public static readonly Scalar SlateGray;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC8")]
		public static readonly Scalar Snow;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFE8")]
		public static readonly Scalar SpringGreen;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1008")]
		public static readonly Scalar SteelBlue;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1028")]
		public static readonly Scalar Tan;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1048")]
		public static readonly Scalar Teal;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1068")]
		public static readonly Scalar Thistle;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1088")]
		public static readonly Scalar Tomato;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10A8")]
		public static readonly Scalar Turquoise;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C8")]
		public static readonly Scalar Violet;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10E8")]
		public static readonly Scalar Wheat;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1108")]
		public static readonly Scalar White;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1128")]
		public static readonly Scalar WhiteSmoke;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1148")]
		public static readonly Scalar Yellow;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1168")]
		public static readonly Scalar YellowGreen;

		[Token(Token = "0x170000E8")]
		public double Item
		{
			[Token(Token = "0x60011D5")]
			[Address(RVA = "0x4273D10", Offset = "0x4273D10", VA = "0x4273D10")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60011D6")]
			[Address(RVA = "0x4273DC4", Offset = "0x4273DC4", VA = "0x4273DC4")]
			set
			{
			}
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x4273E84", Offset = "0x4273E84", VA = "0x4273E84")]
		public Scalar(double v0)
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x4273EA0", Offset = "0x4273EA0", VA = "0x4273EA0")]
		public Scalar(double v0, double v1)
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x4273EAC", Offset = "0x4273EAC", VA = "0x4273EAC")]
		public Scalar(double v0, double v1, double v2)
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x4273E94", Offset = "0x4273E94", VA = "0x4273E94")]
		public Scalar(double v0, double v1, double v2, double v3)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x4273EBC", Offset = "0x4273EBC", VA = "0x4273EBC")]
		public static Scalar FromRgb(int r, int g, int b)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x4273ED0", Offset = "0x4273ED0", VA = "0x4273ED0")]
		public static Scalar RandomColor()
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x4273FB0", Offset = "0x4273FB0", VA = "0x4273FB0")]
		public static explicit operator double(Scalar self)
		{
			return default(double);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x4273FB4", Offset = "0x4273FB4", VA = "0x4273FB4")]
		public static implicit operator Scalar(double val)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x4273FC4", Offset = "0x4273FC4", VA = "0x4273FC4")]
		public static explicit operator Scalar(DMatch d)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x4273FE4", Offset = "0x4273FE4", VA = "0x4273FE4")]
		public static explicit operator DMatch(Scalar self)
		{
			return default(DMatch);
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x427404C", Offset = "0x427404C", VA = "0x427404C")]
		public static explicit operator Scalar(Vec3b v)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x4274070", Offset = "0x4274070", VA = "0x4274070")]
		public static explicit operator Scalar(Vec3f v)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x4274084", Offset = "0x4274084", VA = "0x4274084")]
		public static explicit operator Scalar(Vec4f v)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x4274098", Offset = "0x4274098", VA = "0x4274098")]
		public static explicit operator Scalar(Vec6f v)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x42740B4", Offset = "0x42740B4", VA = "0x42740B4")]
		public static explicit operator Scalar(Vec3d v)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x42740BC", Offset = "0x42740BC", VA = "0x42740BC")]
		public static explicit operator Scalar(Vec4d v)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x42740C0", Offset = "0x42740C0", VA = "0x42740C0")]
		public static explicit operator Scalar(Vec6d v)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x42740CC", Offset = "0x42740CC", VA = "0x42740CC")]
		public static explicit operator Scalar(Point p)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x42740E4", Offset = "0x42740E4", VA = "0x42740E4")]
		public static explicit operator Scalar(Point2f p)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x42740F8", Offset = "0x42740F8", VA = "0x42740F8")]
		public static explicit operator Scalar(Point2d p)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x4274104", Offset = "0x4274104", VA = "0x4274104")]
		public static explicit operator Scalar(Point3i p)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x427411C", Offset = "0x427411C", VA = "0x427411C")]
		public static explicit operator Scalar(Point3f p)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x4274130", Offset = "0x4274130", VA = "0x4274130")]
		public static explicit operator Scalar(Point3d p)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x4274138", Offset = "0x4274138", VA = "0x4274138")]
		public static explicit operator Scalar(Rect p)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x4274154", Offset = "0x4274154", VA = "0x4274154", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x42741DC", Offset = "0x42741DC", VA = "0x42741DC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x4274244", Offset = "0x4274244", VA = "0x4274244", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x4274418", Offset = "0x4274418", VA = "0x4274418")]
		public static bool operator ==(Scalar s1, Scalar s2)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x427447C", Offset = "0x427447C", VA = "0x427447C")]
		public static bool operator !=(Scalar s1, Scalar s2)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x42744A4", Offset = "0x42744A4", VA = "0x42744A4")]
		public static Scalar All(double v)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x42744B4", Offset = "0x42744B4", VA = "0x42744B4")]
		public Scalar Mul(Scalar it, double scale)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x42744E0", Offset = "0x42744E0", VA = "0x42744E0")]
		public Scalar Mul(Scalar it)
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x42744FC", Offset = "0x42744FC", VA = "0x42744FC")]
		public Scalar Conj()
		{
			return default(Scalar);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x4274518", Offset = "0x4274518", VA = "0x4274518")]
		public bool IsReal()
		{
			return default(bool);
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x4274548", Offset = "0x4274548", VA = "0x4274548")]
		public Vec3b ToVec3b()
		{
			return default(Vec3b);
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x4274440", Offset = "0x4274440", VA = "0x4274440", Slot = "4")]
		public bool Equals(Scalar other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20000A9")]
	public struct Size : IEquatable<Size>
	{
		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Width;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Height;

		[Token(Token = "0x170000E9")]
		public static Size Zero
		{
			[Token(Token = "0x60011FE")]
			[Address(RVA = "0x4277944", Offset = "0x4277944", VA = "0x4277944")]
			get
			{
				return default(Size);
			}
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x4270B64", Offset = "0x4270B64", VA = "0x4270B64")]
		public Size(int width, int height)
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x4277914", Offset = "0x4277914", VA = "0x4277914")]
		public Size(double width, double height)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x427794C", Offset = "0x427794C", VA = "0x427794C", Slot = "4")]
		public bool Equals(Size obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x4277974", Offset = "0x4277974", VA = "0x4277974")]
		public static bool operator ==(Size lhs, Size rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x4277994", Offset = "0x4277994", VA = "0x4277994")]
		public static bool operator !=(Size lhs, Size rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x42779B4", Offset = "0x42779B4", VA = "0x42779B4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x4277A34", Offset = "0x4277A34", VA = "0x4277A34", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x4277A6C", Offset = "0x4277A6C", VA = "0x4277A6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000AA")]
	public struct Size2d : IEquatable<Size2d>
	{
		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double Width;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Height;

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x4277B08", Offset = "0x4277B08", VA = "0x4277B08")]
		public Size2d(float width, float height)
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x4271924", Offset = "0x4271924", VA = "0x4271924")]
		public Size2d(double width, double height)
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x4277B18", Offset = "0x4277B18", VA = "0x4277B18", Slot = "4")]
		public bool Equals(Size2d obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x4277B3C", Offset = "0x4277B3C", VA = "0x4277B3C")]
		public static bool operator ==(Size2d lhs, Size2d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x4277B54", Offset = "0x4277B54", VA = "0x4277B54")]
		public static bool operator !=(Size2d lhs, Size2d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x4277B6C", Offset = "0x4277B6C", VA = "0x4277B6C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x4277BF4", Offset = "0x4277BF4", VA = "0x4277BF4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x4277C2C", Offset = "0x4277C2C", VA = "0x4277C2C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000AB")]
	public struct Size2f : IEquatable<Size2f>
	{
		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Width;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Height;

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x4272520", Offset = "0x4272520", VA = "0x4272520")]
		public Size2f(float width, float height)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x4277CD0", Offset = "0x4277CD0", VA = "0x4277CD0")]
		public Size2f(double width, double height)
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x4277D08", Offset = "0x4277D08", VA = "0x4277D08", Slot = "4")]
		public bool Equals(Size2f obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x4277D2C", Offset = "0x4277D2C", VA = "0x4277D2C")]
		public static bool operator ==(Size2f lhs, Size2f rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x4277D44", Offset = "0x4277D44", VA = "0x4277D44")]
		public static bool operator !=(Size2f lhs, Size2f rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x4277D5C", Offset = "0x4277D5C", VA = "0x4277D5C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x4277DDC", Offset = "0x4277DDC", VA = "0x4277DDC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x4277E14", Offset = "0x4277E14", VA = "0x4277E14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20000AC")]
	public struct TermCriteria
	{
		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CriteriaType Type;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int MaxCount;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Epsilon;

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x4055DA8", Offset = "0x4055DA8", VA = "0x4055DA8")]
		public TermCriteria(CriteriaType type, int maxCount, double epsilon)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x4055DB4", Offset = "0x4055DB4", VA = "0x4055DB4")]
		public static TermCriteria Both(int maxCount, double epsilon)
		{
			return default(TermCriteria);
		}
	}
	[Serializable]
	[Token(Token = "0x20000AD")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAC38", Offset = "0x1DDAC38")]
	public struct Vec2b : IVec<byte>
	{
		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte Item0;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte Item1;

		[Token(Token = "0x170000EA")]
		public byte Item
		{
			[Token(Token = "0x6001218")]
			[Address(RVA = "0x4059A74", Offset = "0x4059A74", VA = "0x4059A74", Slot = "4")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6001219")]
			[Address(RVA = "0x4059B10", Offset = "0x4059B10", VA = "0x4059B10", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x4059A68", Offset = "0x4059A68", VA = "0x4059A68")]
		public Vec2b(byte item0, byte item1)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AE")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAC70", Offset = "0x1DDAC70")]
	public struct Vec3b : IVec<byte>
	{
		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte Item0;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte Item1;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte Item2;

		[Token(Token = "0x170000EB")]
		public byte Item
		{
			[Token(Token = "0x600121B")]
			[Address(RVA = "0x405A22C", Offset = "0x405A22C", VA = "0x405A22C", Slot = "4")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600121C")]
			[Address(RVA = "0x405A2D8", Offset = "0x405A2D8", VA = "0x405A2D8", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x405A21C", Offset = "0x405A21C", VA = "0x405A21C")]
		public Vec3b(byte item0, byte item1, byte item2)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AF")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDACA8", Offset = "0x1DDACA8")]
	public struct Vec4b : IVec<byte>
	{
		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte Item0;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte Item1;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte Item2;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte Item3;

		[Token(Token = "0x170000EC")]
		public byte Item
		{
			[Token(Token = "0x600121E")]
			[Address(RVA = "0x405AABC", Offset = "0x405AABC", VA = "0x405AABC", Slot = "4")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600121F")]
			[Address(RVA = "0x405AB7C", Offset = "0x405AB7C", VA = "0x405AB7C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0x405AAA8", Offset = "0x405AAA8", VA = "0x405AAA8")]
		public Vec4b(byte item0, byte item1, byte item2, byte item3)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDACE0", Offset = "0x1DDACE0")]
	public struct Vec6b : IVec<byte>
	{
		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte Item0;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte Item1;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte Item2;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte Item3;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte Item4;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public byte Item5;

		[Token(Token = "0x170000ED")]
		public byte Item
		{
			[Token(Token = "0x6001221")]
			[Address(RVA = "0x405B44C", Offset = "0x405B44C", VA = "0x405B44C", Slot = "4")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6001222")]
			[Address(RVA = "0x405B51C", Offset = "0x405B51C", VA = "0x405B51C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x405B430", Offset = "0x405B430", VA = "0x405B430")]
		public Vec6b(byte item0, byte item1, byte item2, byte item3, byte item4, byte item5)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B1")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAD18", Offset = "0x1DDAD18")]
	public struct Vec2d : IVec<double>
	{
		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double Item0;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Item1;

		[Token(Token = "0x170000EE")]
		public double Item
		{
			[Token(Token = "0x6001224")]
			[Address(RVA = "0x4059BB8", Offset = "0x4059BB8", VA = "0x4059BB8", Slot = "4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001225")]
			[Address(RVA = "0x4059C54", Offset = "0x4059C54", VA = "0x4059C54", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x4059BB0", Offset = "0x4059BB0", VA = "0x4059BB0")]
		public Vec2d(double item0, double item1)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B2")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAD50", Offset = "0x1DDAD50")]
	public struct Vec3d : IVec<double>
	{
		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double Item0;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Item1;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double Item2;

		[Token(Token = "0x170000EF")]
		public double Item
		{
			[Token(Token = "0x6001227")]
			[Address(RVA = "0x405A394", Offset = "0x405A394", VA = "0x405A394", Slot = "4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001228")]
			[Address(RVA = "0x405A440", Offset = "0x405A440", VA = "0x405A440", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x405A388", Offset = "0x405A388", VA = "0x405A388")]
		public Vec3d(double item0, double item1, double item2)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B3")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAD88", Offset = "0x1DDAD88")]
	public struct Vec4d : IVec<double>
	{
		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double Item0;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Item1;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double Item2;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double Item3;

		[Token(Token = "0x170000F0")]
		public double Item
		{
			[Token(Token = "0x600122A")]
			[Address(RVA = "0x405AC4C", Offset = "0x405AC4C", VA = "0x405AC4C", Slot = "4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600122B")]
			[Address(RVA = "0x405AD0C", Offset = "0x405AD0C", VA = "0x405AD0C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x405AC40", Offset = "0x405AC40", VA = "0x405AC40")]
		public Vec4d(double item0, double item1, double item2, double item3)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B4")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDADC0", Offset = "0x1DDADC0")]
	public struct Vec6d : IVec<double>
	{
		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double Item0;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Item1;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double Item2;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double Item3;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double Item4;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double Item5;

		[Token(Token = "0x170000F1")]
		public double Item
		{
			[Token(Token = "0x600122D")]
			[Address(RVA = "0x405B600", Offset = "0x405B600", VA = "0x405B600", Slot = "4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600122E")]
			[Address(RVA = "0x405B6D0", Offset = "0x405B6D0", VA = "0x405B6D0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x405B5F0", Offset = "0x405B5F0", VA = "0x405B5F0")]
		public Vec6d(double item0, double item1, double item2, double item3, double item4, double item5)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B5")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDADF8", Offset = "0x1DDADF8")]
	public struct Vec2f : IVec<float>
	{
		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Item0;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Item1;

		[Token(Token = "0x170000F2")]
		public float Item
		{
			[Token(Token = "0x6001230")]
			[Address(RVA = "0x4059D04", Offset = "0x4059D04", VA = "0x4059D04", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001231")]
			[Address(RVA = "0x4059DA0", Offset = "0x4059DA0", VA = "0x4059DA0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x4059CFC", Offset = "0x4059CFC", VA = "0x4059CFC")]
		public Vec2f(float item0, float item1)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B6")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAE30", Offset = "0x1DDAE30")]
	public struct Vec3f : IVec<float>
	{
		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Item0;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Item1;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Item2;

		[Token(Token = "0x170000F3")]
		public float Item
		{
			[Token(Token = "0x6001233")]
			[Address(RVA = "0x405A504", Offset = "0x405A504", VA = "0x405A504", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001234")]
			[Address(RVA = "0x405A5B0", Offset = "0x405A5B0", VA = "0x405A5B0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x405A4F8", Offset = "0x405A4F8", VA = "0x405A4F8")]
		public Vec3f(float item0, float item1, float item2)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B7")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAE68", Offset = "0x1DDAE68")]
	public struct Vec4f : IVec<float>
	{
		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Item0;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Item1;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Item2;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float Item3;

		[Token(Token = "0x170000F4")]
		public float Item
		{
			[Token(Token = "0x6001236")]
			[Address(RVA = "0x405ADE4", Offset = "0x405ADE4", VA = "0x405ADE4", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001237")]
			[Address(RVA = "0x405AEA4", Offset = "0x405AEA4", VA = "0x405AEA4", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x405ADD8", Offset = "0x405ADD8", VA = "0x405ADD8")]
		public Vec4f(float item0, float item1, float item2, float item3)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B8")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAEA0", Offset = "0x1DDAEA0")]
	public struct Vec6f : IVec<float>
	{
		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Item0;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Item1;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Item2;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float Item3;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Item4;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Item5;

		[Token(Token = "0x170000F5")]
		public float Item
		{
			[Token(Token = "0x6001239")]
			[Address(RVA = "0x405B7BC", Offset = "0x405B7BC", VA = "0x405B7BC", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600123A")]
			[Address(RVA = "0x405B88C", Offset = "0x405B88C", VA = "0x405B88C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x405B7AC", Offset = "0x405B7AC", VA = "0x405B7AC")]
		public Vec6f(float item0, float item1, float item2, float item3, float item4, float item5)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B9")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAED8", Offset = "0x1DDAED8")]
	public struct Vec2i : IVec<int>
	{
		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Item0;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Item1;

		[Token(Token = "0x170000F6")]
		public int Item
		{
			[Token(Token = "0x600123C")]
			[Address(RVA = "0x4059E50", Offset = "0x4059E50", VA = "0x4059E50", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600123D")]
			[Address(RVA = "0x4059EEC", Offset = "0x4059EEC", VA = "0x4059EEC", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x4059E48", Offset = "0x4059E48", VA = "0x4059E48")]
		public Vec2i(int item0, int item1)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BA")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAF10", Offset = "0x1DDAF10")]
	public struct Vec3i : IVec<int>
	{
		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Item0;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Item1;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Item2;

		[Token(Token = "0x170000F7")]
		public int Item
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0x405A674", Offset = "0x405A674", VA = "0x405A674", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001240")]
			[Address(RVA = "0x405A720", Offset = "0x405A720", VA = "0x405A720", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x405A668", Offset = "0x405A668", VA = "0x405A668")]
		public Vec3i(int item0, int item1, int item2)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BB")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAF48", Offset = "0x1DDAF48")]
	public struct Vec4i : IVec<int>
	{
		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Item0;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Item1;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Item2;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int Item3;

		[Token(Token = "0x170000F8")]
		public int Item
		{
			[Token(Token = "0x6001242")]
			[Address(RVA = "0x405AF7C", Offset = "0x405AF7C", VA = "0x405AF7C", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001243")]
			[Address(RVA = "0x405B03C", Offset = "0x405B03C", VA = "0x405B03C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x405AF70", Offset = "0x405AF70", VA = "0x405AF70")]
		public Vec4i(int item0, int item1, int item2, int item3)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BC")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAF80", Offset = "0x1DDAF80")]
	public struct Vec6i : IVec<int>
	{
		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Item0;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Item1;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Item2;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int Item3;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Item4;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Item5;

		[Token(Token = "0x170000F9")]
		public int Item
		{
			[Token(Token = "0x6001245")]
			[Address(RVA = "0x405B978", Offset = "0x405B978", VA = "0x405B978", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001246")]
			[Address(RVA = "0x405BA48", Offset = "0x405BA48", VA = "0x405BA48", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x405B968", Offset = "0x405B968", VA = "0x405B968")]
		public Vec6i(int item0, int item1, int item2, int item3, int item4, int item5)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BD")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAFB8", Offset = "0x1DDAFB8")]
	public struct Vec2s : IVec<short>
	{
		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short Item0;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public short Item1;

		[Token(Token = "0x170000FA")]
		public short Item
		{
			[Token(Token = "0x6001248")]
			[Address(RVA = "0x4059F98", Offset = "0x4059F98", VA = "0x4059F98", Slot = "4")]
			get
			{
				return default(short);
			}
			[Token(Token = "0x6001249")]
			[Address(RVA = "0x405A034", Offset = "0x405A034", VA = "0x405A034", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x4059F8C", Offset = "0x4059F8C", VA = "0x4059F8C")]
		public Vec2s(short item0, short item1)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDAFF0", Offset = "0x1DDAFF0")]
	public struct Vec3s : IVec<short>
	{
		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short Item0;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public short Item1;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public short Item2;

		[Token(Token = "0x170000FB")]
		public short Item
		{
			[Token(Token = "0x600124B")]
			[Address(RVA = "0x405A7E0", Offset = "0x405A7E0", VA = "0x405A7E0", Slot = "4")]
			get
			{
				return default(short);
			}
			[Token(Token = "0x600124C")]
			[Address(RVA = "0x405A88C", Offset = "0x405A88C", VA = "0x405A88C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0x405A7D0", Offset = "0x405A7D0", VA = "0x405A7D0")]
		public Vec3s(short item0, short item1, short item2)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB028", Offset = "0x1DDB028")]
	public struct Vec4s : IVec<short>
	{
		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short Item0;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public short Item1;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public short Item2;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public short Item3;

		[Token(Token = "0x170000FC")]
		public short Item
		{
			[Token(Token = "0x600124E")]
			[Address(RVA = "0x405B114", Offset = "0x405B114", VA = "0x405B114", Slot = "4")]
			get
			{
				return default(short);
			}
			[Token(Token = "0x600124F")]
			[Address(RVA = "0x405B1D4", Offset = "0x405B1D4", VA = "0x405B1D4", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0x405B100", Offset = "0x405B100", VA = "0x405B100")]
		public Vec4s(short item0, short item1, short item2, short item3)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C0")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB060", Offset = "0x1DDB060")]
	public struct Vec6s : IVec<short>
	{
		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short Item0;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public short Item1;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public short Item2;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public short Item3;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public short Item4;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public short Item5;

		[Token(Token = "0x170000FD")]
		public short Item
		{
			[Token(Token = "0x6001251")]
			[Address(RVA = "0x405BB38", Offset = "0x405BB38", VA = "0x405BB38", Slot = "4")]
			get
			{
				return default(short);
			}
			[Token(Token = "0x6001252")]
			[Address(RVA = "0x405BC08", Offset = "0x405BC08", VA = "0x405BC08", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x405BB1C", Offset = "0x405BB1C", VA = "0x405BB1C")]
		public Vec6s(short item0, short item1, short item2, short item3, short item4, short item5)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C1")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB098", Offset = "0x1DDB098")]
	public struct Vec2w : IVec<ushort>
	{
		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort Item0;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort Item1;

		[Token(Token = "0x170000FE")]
		public ushort Item
		{
			[Token(Token = "0x6001254")]
			[Address(RVA = "0x405A0E0", Offset = "0x405A0E0", VA = "0x405A0E0", Slot = "4")]
			get
			{
				return default(ushort);
			}
			[Token(Token = "0x6001255")]
			[Address(RVA = "0x405A17C", Offset = "0x405A17C", VA = "0x405A17C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x405A0D4", Offset = "0x405A0D4", VA = "0x405A0D4")]
		public Vec2w(ushort item0, ushort item1)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C2")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB0D0", Offset = "0x1DDB0D0")]
	public struct Vec3w : IVec<ushort>
	{
		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort Item0;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort Item1;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ushort Item2;

		[Token(Token = "0x170000FF")]
		public ushort Item
		{
			[Token(Token = "0x6001257")]
			[Address(RVA = "0x405A94C", Offset = "0x405A94C", VA = "0x405A94C", Slot = "4")]
			get
			{
				return default(ushort);
			}
			[Token(Token = "0x6001258")]
			[Address(RVA = "0x405A9F8", Offset = "0x405A9F8", VA = "0x405A9F8", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x405A93C", Offset = "0x405A93C", VA = "0x405A93C")]
		public Vec3w(ushort item0, ushort item1, ushort item2)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C3")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB108", Offset = "0x1DDB108")]
	public struct Vec4w : IVec<ushort>
	{
		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort Item0;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort Item1;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ushort Item2;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public ushort Item3;

		[Token(Token = "0x17000100")]
		public ushort Item
		{
			[Token(Token = "0x600125A")]
			[Address(RVA = "0x405B2AC", Offset = "0x405B2AC", VA = "0x405B2AC", Slot = "4")]
			get
			{
				return default(ushort);
			}
			[Token(Token = "0x600125B")]
			[Address(RVA = "0x405B36C", Offset = "0x405B36C", VA = "0x405B36C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x405B298", Offset = "0x405B298", VA = "0x405B298")]
		public Vec4w(ushort item0, ushort item1, ushort item2, ushort item3)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C4")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x1DDB140", Offset = "0x1DDB140")]
	public struct Vec6w : IVec<ushort>
	{
		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort Item0;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort Item1;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ushort Item2;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public ushort Item3;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort Item4;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort Item5;

		[Token(Token = "0x17000101")]
		public ushort Item
		{
			[Token(Token = "0x600125D")]
			[Address(RVA = "0x405BCF8", Offset = "0x405BCF8", VA = "0x405BCF8", Slot = "4")]
			get
			{
				return default(ushort);
			}
			[Token(Token = "0x600125E")]
			[Address(RVA = "0x405BDC8", Offset = "0x405BDC8", VA = "0x405BDC8", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x405BCDC", Offset = "0x405BCDC", VA = "0x405BCDC")]
		public Vec6w(ushort item0, ushort item1, ushort item2, ushort item3, ushort item4, ushort item5)
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public class AKAZE : Feature2D
	{
		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<AKAZE> ptrObj;

		[Token(Token = "0x17000102")]
		public AKAZEDescriptorType AKAZEDescriptorType
		{
			[Token(Token = "0x6001262")]
			[Address(RVA = "0x2216EEC", Offset = "0x2216EEC", VA = "0x2216EEC")]
			get
			{
				return default(AKAZEDescriptorType);
			}
			[Token(Token = "0x6001263")]
			[Address(RVA = "0x2216FC0", Offset = "0x2216FC0", VA = "0x2216FC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public int AKAZEDescriptorSize
		{
			[Token(Token = "0x6001264")]
			[Address(RVA = "0x22170A4", Offset = "0x22170A4", VA = "0x22170A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001265")]
			[Address(RVA = "0x2217178", Offset = "0x2217178", VA = "0x2217178")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public int AKAZEDescriptorChannels
		{
			[Token(Token = "0x6001266")]
			[Address(RVA = "0x221725C", Offset = "0x221725C", VA = "0x221725C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001267")]
			[Address(RVA = "0x2217330", Offset = "0x2217330", VA = "0x2217330")]
			set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public double Threshold
		{
			[Token(Token = "0x6001268")]
			[Address(RVA = "0x2217414", Offset = "0x2217414", VA = "0x2217414")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001269")]
			[Address(RVA = "0x22174E8", Offset = "0x22174E8", VA = "0x22174E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public int NOctaves
		{
			[Token(Token = "0x600126A")]
			[Address(RVA = "0x22175CC", Offset = "0x22175CC", VA = "0x22175CC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600126B")]
			[Address(RVA = "0x22176A0", Offset = "0x22176A0", VA = "0x22176A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public int NOctaveLayers
		{
			[Token(Token = "0x600126C")]
			[Address(RVA = "0x2217784", Offset = "0x2217784", VA = "0x2217784")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600126D")]
			[Address(RVA = "0x2217858", Offset = "0x2217858", VA = "0x2217858")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public int Diffusivity
		{
			[Token(Token = "0x600126E")]
			[Address(RVA = "0x221793C", Offset = "0x221793C", VA = "0x221793C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600126F")]
			[Address(RVA = "0x2217A10", Offset = "0x2217A10", VA = "0x2217A10")]
			set
			{
			}
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x2216CB0", Offset = "0x2216CB0", VA = "0x2216CB0")]
		internal AKAZE(Ptr<AKAZE> p)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x2216D04", Offset = "0x2216D04", VA = "0x2216D04")]
		public static AKAZE Create(AKAZEDescriptorType descriptorType = AKAZEDescriptorType.MLDB, int descriptorSize = 0, int descriptorChannels = 3, float threshold = 0.001f, int nOctaves = 4, int nOctaveLayers = 4, KAZEDiffusivity diffusivity = KAZEDiffusivity.DiffPmG2)
		{
			return null;
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x2216E10", Offset = "0x2216E10", VA = "0x2216E10", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000C6")]
	public class AgastFeatureDetector : Feature2D
	{
		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Ptr<AgastFeatureDetector> ptrObj;

		[Token(Token = "0x400031A")]
		public const int AGAST_5_8 = 0;

		[Token(Token = "0x400031B")]
		public const int AGAST_7_12d = 1;

		[Token(Token = "0x400031C")]
		public const int AGAST_7_12s = 2;

		[Token(Token = "0x400031D")]
		public const int OAST_9_16 = 3;

		[Token(Token = "0x400031E")]
		public const int THRESHOLD = 10000;

		[Token(Token = "0x400031F")]
		public const int NONMAX_SUPPRESSION = 10001;

		[Token(Token = "0x17000109")]
		public int Threshold
		{
			[Token(Token = "0x6001273")]
			[Address(RVA = "0x2217CFC", Offset = "0x2217CFC", VA = "0x2217CFC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001274")]
			[Address(RVA = "0x2217DD0", Offset = "0x2217DD0", VA = "0x2217DD0")]
			set
			{
			}
		}

		[Token(Token = "0x1700010A")]
		public int NonmaxSuppression
		{
			[Token(Token = "0x6001275")]
			[Address(RVA = "0x2217EB4", Offset = "0x2217EB4", VA = "0x2217EB4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001276")]
			[Address(RVA = "0x2217F88", Offset = "0x2217F88", VA = "0x2217F88")]
			set
			{
			}
		}

		[Token(Token = "0x1700010B")]
		public AGASTType Type
		{
			[Token(Token = "0x6001277")]
			[Address(RVA = "0x221806C", Offset = "0x221806C", VA = "0x221806C")]
			get
			{
				return default(AGASTType);
			}
			[Token(Token = "0x6001278")]
			[Address(RVA = "0x2218140", Offset = "0x2218140", VA = "0x2218140")]
			set
			{
			}
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x2217AF4", Offset = "0x2217AF4", VA = "0x2217AF4")]
		internal AgastFeatureDetector(Ptr<AgastFeatureDetector> p)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x2217B48", Offset = "0x2217B48", VA = "0x2217B48")]
		public static AgastFeatureDetector Create(int threshold = 10, bool nonmaxSuppression = true, AGASTType type = AGASTType.OAST_9_16)
		{
			return null;
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x2217C20", Offset = "0x2217C20", VA = "0x2217C20", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public class BFMatcher : DescriptorMatcher
	{
		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool disposed;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Ptr<BFMatcher> detectorPtr;

		[Token(Token = "0x1700010C")]
		internal override IntPtr PtrObj
		{
			[Token(Token = "0x6001279")]
			[Address(RVA = "0x221AD78", Offset = "0x221AD78", VA = "0x221AD78", Slot = "13")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x221AD94", Offset = "0x221AD94", VA = "0x221AD94")]
		public BFMatcher(NormTypes normType = NormTypes.L2, bool crossCheck = false)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x221AE30", Offset = "0x221AE30", VA = "0x221AE30")]
		internal BFMatcher(Ptr<BFMatcher> detectorPtr)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x221AE84", Offset = "0x221AE84", VA = "0x221AE84")]
		internal BFMatcher(IntPtr rawPtr)
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x221AEC0", Offset = "0x221AEC0", VA = "0x221AEC0")]
		internal new static BFMatcher FromPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x221AF98", Offset = "0x221AF98", VA = "0x221AF98", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x221B0C0", Offset = "0x221B0C0", VA = "0x221B0C0", Slot = "17")]
		public override bool IsMaskSupported()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000C8")]
	public class BRISK : Feature2D
	{
		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<BRISK> ptrObj;

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x221B144", Offset = "0x221B144", VA = "0x221B144")]
		internal BRISK(Ptr<BRISK> p)
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x221B198", Offset = "0x221B198", VA = "0x221B198")]
		public static BRISK Create(int thresh = 30, int octaves = 3, float patternScale = 1f)
		{
			return null;
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x221B274", Offset = "0x221B274", VA = "0x221B274")]
		public static BRISK Create(IEnumerable<float> radiusList, IEnumerable<int> numberList, float dMax = 5.85f, float dMin = 8.2f, [Optional] IEnumerable<int> indexChange)
		{
			return null;
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x221B41C", Offset = "0x221B41C", VA = "0x221B41C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000C9")]
	public class DescriptorMatcher : Algorithm
	{
		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<DescriptorMatcher> detectorPtr;

		[Token(Token = "0x1700010D")]
		internal virtual IntPtr PtrObj
		{
			[Token(Token = "0x6001284")]
			[Address(RVA = "0x3EAE9D0", Offset = "0x3EAE9D0", VA = "0x3EAE9D0", Slot = "13")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x3EAEA00", Offset = "0x3EAEA00", VA = "0x3EAEA00")]
		protected DescriptorMatcher()
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x3EAEA60", Offset = "0x3EAEA60", VA = "0x3EAEA60")]
		public static DescriptorMatcher Create(string descriptorMatcherType)
		{
			return null;
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x3EAEE04", Offset = "0x3EAEE04", VA = "0x3EAEE04")]
		internal static DescriptorMatcher FromPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x3EAEF08", Offset = "0x3EAEF08", VA = "0x3EAEF08")]
		internal static DescriptorMatcher FromRawPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x3EAEFD0", Offset = "0x3EAEFD0", VA = "0x3EAEFD0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x3EAF0A8", Offset = "0x3EAF0A8", VA = "0x3EAF0A8", Slot = "14")]
		public virtual void Add(IEnumerable<Mat> descriptors)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x3EAF1B4", Offset = "0x3EAF1B4", VA = "0x3EAF1B4")]
		public Mat[] GetTrainDescriptors()
		{
			return null;
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x3EAF324", Offset = "0x3EAF324", VA = "0x3EAF324", Slot = "15")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x3EAF398", Offset = "0x3EAF398", VA = "0x3EAF398", Slot = "16")]
		public new virtual bool Empty()
		{
			return default(bool);
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x3EAF418", Offset = "0x3EAF418", VA = "0x3EAF418", Slot = "17")]
		public virtual bool IsMaskSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x3EAF498", Offset = "0x3EAF498", VA = "0x3EAF498", Slot = "18")]
		public virtual void Train()
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x3EAF50C", Offset = "0x3EAF50C", VA = "0x3EAF50C")]
		public DMatch[] Match(Mat queryDescriptors, Mat trainDescriptors, [Optional] Mat mask)
		{
			return null;
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x3EAF730", Offset = "0x3EAF730", VA = "0x3EAF730")]
		public DMatch[][] KnnMatch(Mat queryDescriptors, Mat trainDescriptors, int k, [Optional] Mat mask, bool compactResult = false)
		{
			return null;
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x3EAF970", Offset = "0x3EAF970", VA = "0x3EAF970")]
		public DMatch[][] RadiusMatch(Mat queryDescriptors, Mat trainDescriptors, float maxDistance, [Optional] Mat mask, bool compactResult = false)
		{
			return null;
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x3EAFBB8", Offset = "0x3EAFBB8", VA = "0x3EAFBB8")]
		public DMatch[] Match(Mat queryDescriptors, [Optional] Mat[] masks)
		{
			return null;
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x3EAFDC8", Offset = "0x3EAFDC8", VA = "0x3EAFDC8")]
		public DMatch[][] KnnMatch(Mat queryDescriptors, int k, [Optional] Mat[] masks, bool compactResult = false)
		{
			return null;
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x3EAFFF8", Offset = "0x3EAFFF8", VA = "0x3EAFFF8")]
		public DMatch[][] RadiusMatch(Mat queryDescriptors, float maxDistance, [Optional] Mat[] masks, bool compactResult = false)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CA")]
	public enum AGASTType
	{
		[Token(Token = "0x4000327")]
		AGAST_5_8,
		[Token(Token = "0x4000328")]
		AGAST_7_12d,
		[Token(Token = "0x4000329")]
		AGAST_7_12s,
		[Token(Token = "0x400032A")]
		OAST_9_16
	}
	[Token(Token = "0x20000CB")]
	public enum AKAZEDescriptorType
	{
		[Token(Token = "0x400032C")]
		KAZEUpright = 2,
		[Token(Token = "0x400032D")]
		KAZE,
		[Token(Token = "0x400032E")]
		MLDBUpright,
		[Token(Token = "0x400032F")]
		MLDB
	}
	[Token(Token = "0x20000CC")]
	[Flags]
	public enum DrawMatchesFlags
	{
		[Token(Token = "0x4000331")]
		Default = 0,
		[Token(Token = "0x4000332")]
		DrawOverOutImg = 1,
		[Token(Token = "0x4000333")]
		NotDrawSinglePoints = 2,
		[Token(Token = "0x4000334")]
		DrawRichKeypoints = 4
	}
	[Token(Token = "0x20000CD")]
	public enum FASTType
	{
		[Token(Token = "0x4000336")]
		TYPE_5_8,
		[Token(Token = "0x4000337")]
		TYPE_7_12,
		[Token(Token = "0x4000338")]
		TYPE_9_16
	}
	[Token(Token = "0x20000CE")]
	public enum KAZEDiffusivity
	{
		[Token(Token = "0x400033A")]
		DiffPmG1,
		[Token(Token = "0x400033B")]
		DiffPmG2,
		[Token(Token = "0x400033C")]
		DiffWeickert,
		[Token(Token = "0x400033D")]
		DiffCharbonnier
	}
	[Token(Token = "0x20000CF")]
	public enum ORBScore
	{
		[Token(Token = "0x400033F")]
		Fast = 1,
		[Token(Token = "0x4000340")]
		Harris = 0
	}
	[Token(Token = "0x20000D0")]
	public class FastFeatureDetector : Feature2D
	{
		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<FastFeatureDetector> ptrObj;

		[Token(Token = "0x1700010E")]
		public int Threshold
		{
			[Token(Token = "0x6001299")]
			[Address(RVA = "0x3EB4328", Offset = "0x3EB4328", VA = "0x3EB4328")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600129A")]
			[Address(RVA = "0x3EB43FC", Offset = "0x3EB43FC", VA = "0x3EB43FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public bool NonmaxSuppression
		{
			[Token(Token = "0x600129B")]
			[Address(RVA = "0x3EB44E0", Offset = "0x3EB44E0", VA = "0x3EB44E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600129C")]
			[Address(RVA = "0x3EB45C0", Offset = "0x3EB45C0", VA = "0x3EB45C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public int Type
		{
			[Token(Token = "0x600129D")]
			[Address(RVA = "0x3EB46A8", Offset = "0x3EB46A8", VA = "0x3EB46A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600129E")]
			[Address(RVA = "0x3EB477C", Offset = "0x3EB477C", VA = "0x3EB477C")]
			set
			{
			}
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x3EB4034", Offset = "0x3EB4034", VA = "0x3EB4034")]
		internal FastFeatureDetector(Ptr<FastFeatureDetector> ptrObj)
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x3EB4130", Offset = "0x3EB4130", VA = "0x3EB4130")]
		public static FastFeatureDetector Create(int threshold = 10, bool nonmaxSuppression = true)
		{
			return null;
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x3EB4200", Offset = "0x3EB4200", VA = "0x3EB4200", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class Feature2D : Algorithm
	{
		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x17000111")]
		public virtual int DescriptorSize
		{
			[Token(Token = "0x60012A3")]
			[Address(RVA = "0x3EB48C8", Offset = "0x3EB48C8", VA = "0x3EB48C8", Slot = "13")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000112")]
		public virtual int DescriptorType
		{
			[Token(Token = "0x60012A4")]
			[Address(RVA = "0x3EB499C", Offset = "0x3EB499C", VA = "0x3EB499C", Slot = "14")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000113")]
		public virtual int DefaultNorm
		{
			[Token(Token = "0x60012A5")]
			[Address(RVA = "0x3EB4A70", Offset = "0x3EB4A70", VA = "0x3EB4A70", Slot = "15")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0x3EB4860", Offset = "0x3EB4860", VA = "0x3EB4860")]
		private Feature2D()
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x3EB4084", Offset = "0x3EB4084", VA = "0x3EB4084")]
		internal Feature2D(IntPtr ptr)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x3EB4868", Offset = "0x3EB4868", VA = "0x3EB4868")]
		internal static Feature2D FromPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x3EB42A8", Offset = "0x3EB42A8", VA = "0x3EB42A8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x3EB4B44", Offset = "0x3EB4B44", VA = "0x3EB4B44", Slot = "16")]
		public new virtual bool Empty()
		{
			return default(bool);
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x3EB4C24", Offset = "0x3EB4C24", VA = "0x3EB4C24")]
		public KeyPoint[] Detect(Mat image, [Optional] Mat mask)
		{
			return null;
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x3EB4EF4", Offset = "0x3EB4EF4", VA = "0x3EB4EF4")]
		public KeyPoint[] Detect(InputArray image, [Optional] Mat mask)
		{
			return null;
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x3EB51C4", Offset = "0x3EB51C4", VA = "0x3EB51C4")]
		public KeyPoint[][] Detect(IEnumerable<Mat> images, [Optional] IEnumerable<Mat> masks)
		{
			return null;
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x3EB556C", Offset = "0x3EB556C", VA = "0x3EB556C", Slot = "17")]
		public virtual void Compute(InputArray image, ref KeyPoint[] keypoints, OutputArray descriptors)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x3EB57D0", Offset = "0x3EB57D0", VA = "0x3EB57D0", Slot = "18")]
		public virtual void Compute(InputArray image, KeyPoint[] inKeypoints, out KeyPoint[] outKeypoints, OutputArray descriptors)
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x3EB5A34", Offset = "0x3EB5A34", VA = "0x3EB5A34", Slot = "19")]
		public virtual void Compute(IEnumerable<Mat> images, ref KeyPoint[][] keypoints, IEnumerable<Mat> descriptors)
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x3EB5CD0", Offset = "0x3EB5CD0", VA = "0x3EB5CD0", Slot = "20")]
		public virtual void DetectAndCompute(InputArray image, InputArray mask, out KeyPoint[] keypoints, OutputArray descriptors, bool useProvidedKeypoints = false)
		{
		}
	}
	[Token(Token = "0x20000D2")]
	public class FlannBasedMatcher : DescriptorMatcher
	{
		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool disposed;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Ptr<FlannBasedMatcher> detectorPtr;

		[Token(Token = "0x17000114")]
		internal override IntPtr PtrObj
		{
			[Token(Token = "0x60012AE")]
			[Address(RVA = "0x3EBB3A8", Offset = "0x3EBB3A8", VA = "0x3EBB3A8", Slot = "13")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x3EAED54", Offset = "0x3EAED54", VA = "0x3EAED54")]
		public FlannBasedMatcher([Optional] IndexParams indexParams, [Optional] SearchParams searchParams)
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x3EBB3D8", Offset = "0x3EBB3D8", VA = "0x3EBB3D8")]
		internal FlannBasedMatcher(Ptr<FlannBasedMatcher> detectorPtr)
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x3EBB428", Offset = "0x3EBB428", VA = "0x3EBB428")]
		internal FlannBasedMatcher(IntPtr rawPtr)
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x3EBB460", Offset = "0x3EBB460", VA = "0x3EBB460")]
		internal new static FlannBasedMatcher FromPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x3EBB538", Offset = "0x3EBB538", VA = "0x3EBB538", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x3EBB654", Offset = "0x3EBB654", VA = "0x3EBB654", Slot = "17")]
		public override bool IsMaskSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x3EBB6D4", Offset = "0x3EBB6D4", VA = "0x3EBB6D4", Slot = "14")]
		public override void Add(IEnumerable<Mat> descriptors)
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x3EBB7E0", Offset = "0x3EBB7E0", VA = "0x3EBB7E0", Slot = "15")]
		public override void Clear()
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x3EBB854", Offset = "0x3EBB854", VA = "0x3EBB854", Slot = "18")]
		public override void Train()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class GFTTDetector : Feature2D
	{
		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<GFTTDetector> ptrObj;

		[Token(Token = "0x17000115")]
		public int MaxFeatures
		{
			[Token(Token = "0x60012BB")]
			[Address(RVA = "0x3EBC454", Offset = "0x3EBC454", VA = "0x3EBC454")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012BC")]
			[Address(RVA = "0x3EBC528", Offset = "0x3EBC528", VA = "0x3EBC528")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public double QualityLevel
		{
			[Token(Token = "0x60012BD")]
			[Address(RVA = "0x3EBC60C", Offset = "0x3EBC60C", VA = "0x3EBC60C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60012BE")]
			[Address(RVA = "0x3EBC6E0", Offset = "0x3EBC6E0", VA = "0x3EBC6E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public double MinDistance
		{
			[Token(Token = "0x60012BF")]
			[Address(RVA = "0x3EBC7C4", Offset = "0x3EBC7C4", VA = "0x3EBC7C4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60012C0")]
			[Address(RVA = "0x3EBC898", Offset = "0x3EBC898", VA = "0x3EBC898")]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public int BlockSize
		{
			[Token(Token = "0x60012C1")]
			[Address(RVA = "0x3EBC97C", Offset = "0x3EBC97C", VA = "0x3EBC97C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012C2")]
			[Address(RVA = "0x3EBCA50", Offset = "0x3EBCA50", VA = "0x3EBCA50")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public bool HarrisDetector
		{
			[Token(Token = "0x60012C3")]
			[Address(RVA = "0x3EBCB34", Offset = "0x3EBCB34", VA = "0x3EBCB34")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012C4")]
			[Address(RVA = "0x3EBCC14", Offset = "0x3EBCC14", VA = "0x3EBCC14")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public double K
		{
			[Token(Token = "0x60012C5")]
			[Address(RVA = "0x3EBCCFC", Offset = "0x3EBCCFC", VA = "0x3EBCCFC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60012C6")]
			[Address(RVA = "0x3EBCDD0", Offset = "0x3EBCDD0", VA = "0x3EBCDD0")]
			set
			{
			}
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x3EBC25C", Offset = "0x3EBC25C", VA = "0x3EBC25C")]
		public static GFTTDetector Create(int maxCorners = 1000, double qualityLevel = 0.01, double minDistance = 1.0, int blockSize = 3, bool useHarrisDetector = false, double k = 0.04)
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x3EBC35C", Offset = "0x3EBC35C", VA = "0x3EBC35C")]
		internal GFTTDetector(Ptr<GFTTDetector> p)
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x3EBC3AC", Offset = "0x3EBC3AC", VA = "0x3EBC3AC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class KAZE : Feature2D
	{
		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<KAZE> ptrObj;

		[Token(Token = "0x1700011B")]
		public int Diffusivity
		{
			[Token(Token = "0x60012CA")]
			[Address(RVA = "0x3051314", Offset = "0x3051314", VA = "0x3051314")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012CB")]
			[Address(RVA = "0x30513E8", Offset = "0x30513E8", VA = "0x30513E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public bool Extended
		{
			[Token(Token = "0x60012CC")]
			[Address(RVA = "0x30514CC", Offset = "0x30514CC", VA = "0x30514CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012CD")]
			[Address(RVA = "0x30515A0", Offset = "0x30515A0", VA = "0x30515A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public int NOctaveLayers
		{
			[Token(Token = "0x60012CE")]
			[Address(RVA = "0x3051684", Offset = "0x3051684", VA = "0x3051684")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012CF")]
			[Address(RVA = "0x3051758", Offset = "0x3051758", VA = "0x3051758")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public int NOctaves
		{
			[Token(Token = "0x60012D0")]
			[Address(RVA = "0x305183C", Offset = "0x305183C", VA = "0x305183C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012D1")]
			[Address(RVA = "0x3051910", Offset = "0x3051910", VA = "0x3051910")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public double Threshold
		{
			[Token(Token = "0x60012D2")]
			[Address(RVA = "0x30519F4", Offset = "0x30519F4", VA = "0x30519F4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60012D3")]
			[Address(RVA = "0x3051AC8", Offset = "0x3051AC8", VA = "0x3051AC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public bool Upright
		{
			[Token(Token = "0x60012D4")]
			[Address(RVA = "0x3051BAC", Offset = "0x3051BAC", VA = "0x3051BAC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012D5")]
			[Address(RVA = "0x3051C80", Offset = "0x3051C80", VA = "0x3051C80")]
			set
			{
			}
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x30510E8", Offset = "0x30510E8", VA = "0x30510E8")]
		internal KAZE(Ptr<KAZE> p)
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x305113C", Offset = "0x305113C", VA = "0x305113C")]
		public static KAZE Create(bool extended = false, bool upright = false, float threshold = 0.001f, int nOctaves = 4, int nOctaveLayers = 4, KAZEDiffusivity diffusivity = KAZEDiffusivity.DiffPmG2)
		{
			return null;
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x3051238", Offset = "0x3051238", VA = "0x3051238", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public static class KeyPointsFilter
	{
		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x3053104", Offset = "0x3053104", VA = "0x3053104")]
		public static KeyPoint[] RunByImageBorder(IEnumerable<KeyPoint> keypoints, Size imageSize, int borderSize)
		{
			return null;
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x30532C0", Offset = "0x30532C0", VA = "0x30532C0")]
		public static KeyPoint[] RunByKeypointSize(IEnumerable<KeyPoint> keypoints, float minSize, float maxSize = float.MaxValue)
		{
			return null;
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x3053484", Offset = "0x3053484", VA = "0x3053484")]
		public static KeyPoint[] RunByPixelsMask(IEnumerable<KeyPoint> keypoints, Mat mask)
		{
			return null;
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x30536A4", Offset = "0x30536A4", VA = "0x30536A4")]
		public static KeyPoint[] RemoveDuplicated(IEnumerable<KeyPoint> keypoints)
		{
			return null;
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x305384C", Offset = "0x305384C", VA = "0x305384C")]
		public static KeyPoint[] RetainBest(IEnumerable<KeyPoint> keypoints, int npoints)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D6")]
	public class MSER : Feature2D
	{
		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<MSER> ptrObj;

		[Token(Token = "0x17000121")]
		public int Delta
		{
			[Token(Token = "0x60012DE")]
			[Address(RVA = "0x305B360", Offset = "0x305B360", VA = "0x305B360")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012DF")]
			[Address(RVA = "0x305B434", Offset = "0x305B434", VA = "0x305B434")]
			set
			{
			}
		}

		[Token(Token = "0x17000122")]
		public int MinArea
		{
			[Token(Token = "0x60012E0")]
			[Address(RVA = "0x305B518", Offset = "0x305B518", VA = "0x305B518")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012E1")]
			[Address(RVA = "0x305B5EC", Offset = "0x305B5EC", VA = "0x305B5EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public int MaxArea
		{
			[Token(Token = "0x60012E2")]
			[Address(RVA = "0x305B6D0", Offset = "0x305B6D0", VA = "0x305B6D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012E3")]
			[Address(RVA = "0x305B7A4", Offset = "0x305B7A4", VA = "0x305B7A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public bool Pass2Only
		{
			[Token(Token = "0x60012E4")]
			[Address(RVA = "0x305B888", Offset = "0x305B888", VA = "0x305B888")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012E5")]
			[Address(RVA = "0x305B968", Offset = "0x305B968", VA = "0x305B968")]
			set
			{
			}
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x305B13C", Offset = "0x305B13C", VA = "0x305B13C")]
		internal MSER(Ptr<MSER> p)
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x305B190", Offset = "0x305B190", VA = "0x305B190")]
		public static MSER Create(int delta = 5, int minArea = 60, int maxArea = 14400, double maxVariation = 0.25, double minDiversity = 0.2, int maxEvolution = 200, double areaThreshold = 1.01, double minMargin = 0.003, int edgeBlurSize = 5)
		{
			return null;
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x305B2AC", Offset = "0x305B2AC", VA = "0x305B2AC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x305BA50", Offset = "0x305BA50", VA = "0x305BA50", Slot = "21")]
		public virtual void DetectRegions(InputArray image, out Point[][] msers, out Rect[] bboxes)
		{
		}
	}
	[Token(Token = "0x20000D7")]
	public class ORB : Feature2D
	{
		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<ORB> ptrObj;

		[Token(Token = "0x17000125")]
		public int MaxFeatures
		{
			[Token(Token = "0x60012EA")]
			[Address(RVA = "0x4268B88", Offset = "0x4268B88", VA = "0x4268B88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012EB")]
			[Address(RVA = "0x4268C5C", Offset = "0x4268C5C", VA = "0x4268C5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000126")]
		public double ScaleFactor
		{
			[Token(Token = "0x60012EC")]
			[Address(RVA = "0x4268D40", Offset = "0x4268D40", VA = "0x4268D40")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60012ED")]
			[Address(RVA = "0x4268E14", Offset = "0x4268E14", VA = "0x4268E14")]
			set
			{
			}
		}

		[Token(Token = "0x17000127")]
		public int NLevels
		{
			[Token(Token = "0x60012EE")]
			[Address(RVA = "0x4268EF8", Offset = "0x4268EF8", VA = "0x4268EF8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012EF")]
			[Address(RVA = "0x4268FCC", Offset = "0x4268FCC", VA = "0x4268FCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000128")]
		public int EdgeThreshold
		{
			[Token(Token = "0x60012F0")]
			[Address(RVA = "0x42690B0", Offset = "0x42690B0", VA = "0x42690B0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012F1")]
			[Address(RVA = "0x4269184", Offset = "0x4269184", VA = "0x4269184")]
			set
			{
			}
		}

		[Token(Token = "0x17000129")]
		public int FirstLevel
		{
			[Token(Token = "0x60012F2")]
			[Address(RVA = "0x4269268", Offset = "0x4269268", VA = "0x4269268")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012F3")]
			[Address(RVA = "0x426933C", Offset = "0x426933C", VA = "0x426933C")]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public int WTA_K
		{
			[Token(Token = "0x60012F4")]
			[Address(RVA = "0x4269420", Offset = "0x4269420", VA = "0x4269420")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012F5")]
			[Address(RVA = "0x42694F4", Offset = "0x42694F4", VA = "0x42694F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public int ScoreType
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x42695D8", Offset = "0x42695D8", VA = "0x42695D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012F7")]
			[Address(RVA = "0x42696AC", Offset = "0x42696AC", VA = "0x42696AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public int PatchSize
		{
			[Token(Token = "0x60012F8")]
			[Address(RVA = "0x4269790", Offset = "0x4269790", VA = "0x4269790")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012F9")]
			[Address(RVA = "0x4269864", Offset = "0x4269864", VA = "0x4269864")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public int FastThreshold
		{
			[Token(Token = "0x60012FA")]
			[Address(RVA = "0x4269948", Offset = "0x4269948", VA = "0x4269948")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012FB")]
			[Address(RVA = "0x4269A1C", Offset = "0x4269A1C", VA = "0x4269A1C")]
			set
			{
			}
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x4268944", Offset = "0x4268944", VA = "0x4268944")]
		internal ORB(Ptr<ORB> p)
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x4268998", Offset = "0x4268998", VA = "0x4268998")]
		public static ORB Create(int nFeatures = 500, float scaleFactor = 1.2f, int nLevels = 8, int edgeThreshold = 31, int firstLevel = 0, int wtaK = 2, ORBScore scoreType = ORBScore.Harris, int patchSize = 31)
		{
			return null;
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x4268AAC", Offset = "0x4268AAC", VA = "0x4268AAC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000D8")]
	public class SimpleBlobDetector : Feature2D
	{
		[Token(Token = "0x20001BE")]
		public class Params
		{
			[Token(Token = "0x400072D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal WParams data;

			[Token(Token = "0x170002A9")]
			public float ThresholdStep
			{
				[Token(Token = "0x60018C6")]
				[Address(RVA = "0x42777A8", Offset = "0x42777A8", VA = "0x42777A8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018C7")]
				[Address(RVA = "0x42777B0", Offset = "0x42777B0", VA = "0x42777B0")]
				set
				{
				}
			}

			[Token(Token = "0x170002AA")]
			public float MinThreshold
			{
				[Token(Token = "0x60018C8")]
				[Address(RVA = "0x42777B8", Offset = "0x42777B8", VA = "0x42777B8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018C9")]
				[Address(RVA = "0x42777C0", Offset = "0x42777C0", VA = "0x42777C0")]
				set
				{
				}
			}

			[Token(Token = "0x170002AB")]
			public float MaxThreshold
			{
				[Token(Token = "0x60018CA")]
				[Address(RVA = "0x42777C8", Offset = "0x42777C8", VA = "0x42777C8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018CB")]
				[Address(RVA = "0x42777D0", Offset = "0x42777D0", VA = "0x42777D0")]
				set
				{
				}
			}

			[Token(Token = "0x170002AC")]
			public uint MinRepeatability
			{
				[Token(Token = "0x60018CC")]
				[Address(RVA = "0x42777D8", Offset = "0x42777D8", VA = "0x42777D8")]
				get
				{
					return default(uint);
				}
				[Token(Token = "0x60018CD")]
				[Address(RVA = "0x42777E0", Offset = "0x42777E0", VA = "0x42777E0")]
				set
				{
				}
			}

			[Token(Token = "0x170002AD")]
			public float MinDistBetweenBlobs
			{
				[Token(Token = "0x60018CE")]
				[Address(RVA = "0x42777E8", Offset = "0x42777E8", VA = "0x42777E8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018CF")]
				[Address(RVA = "0x42777F0", Offset = "0x42777F0", VA = "0x42777F0")]
				set
				{
				}
			}

			[Token(Token = "0x170002AE")]
			public bool FilterByColor
			{
				[Token(Token = "0x60018D0")]
				[Address(RVA = "0x42777F8", Offset = "0x42777F8", VA = "0x42777F8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60018D1")]
				[Address(RVA = "0x4277808", Offset = "0x4277808", VA = "0x4277808")]
				set
				{
				}
			}

			[Token(Token = "0x170002AF")]
			public byte BlobColor
			{
				[Token(Token = "0x60018D2")]
				[Address(RVA = "0x4277814", Offset = "0x4277814", VA = "0x4277814")]
				get
				{
					return default(byte);
				}
				[Token(Token = "0x60018D3")]
				[Address(RVA = "0x427781C", Offset = "0x427781C", VA = "0x427781C")]
				set
				{
				}
			}

			[Token(Token = "0x170002B0")]
			public bool FilterByArea
			{
				[Token(Token = "0x60018D4")]
				[Address(RVA = "0x4277824", Offset = "0x4277824", VA = "0x4277824")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60018D5")]
				[Address(RVA = "0x4277834", Offset = "0x4277834", VA = "0x4277834")]
				set
				{
				}
			}

			[Token(Token = "0x170002B1")]
			public float MinArea
			{
				[Token(Token = "0x60018D6")]
				[Address(RVA = "0x4277840", Offset = "0x4277840", VA = "0x4277840")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018D7")]
				[Address(RVA = "0x4277848", Offset = "0x4277848", VA = "0x4277848")]
				set
				{
				}
			}

			[Token(Token = "0x170002B2")]
			public float MaxArea
			{
				[Token(Token = "0x60018D8")]
				[Address(RVA = "0x4277850", Offset = "0x4277850", VA = "0x4277850")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018D9")]
				[Address(RVA = "0x4277858", Offset = "0x4277858", VA = "0x4277858")]
				set
				{
				}
			}

			[Token(Token = "0x170002B3")]
			public bool FilterByCircularity
			{
				[Token(Token = "0x60018DA")]
				[Address(RVA = "0x4277860", Offset = "0x4277860", VA = "0x4277860")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60018DB")]
				[Address(RVA = "0x4277870", Offset = "0x4277870", VA = "0x4277870")]
				set
				{
				}
			}

			[Token(Token = "0x170002B4")]
			public float MinCircularity
			{
				[Token(Token = "0x60018DC")]
				[Address(RVA = "0x427787C", Offset = "0x427787C", VA = "0x427787C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018DD")]
				[Address(RVA = "0x4277884", Offset = "0x4277884", VA = "0x4277884")]
				set
				{
				}
			}

			[Token(Token = "0x170002B5")]
			public float MaxCircularity
			{
				[Token(Token = "0x60018DE")]
				[Address(RVA = "0x427788C", Offset = "0x427788C", VA = "0x427788C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018DF")]
				[Address(RVA = "0x4277894", Offset = "0x4277894", VA = "0x4277894")]
				set
				{
				}
			}

			[Token(Token = "0x170002B6")]
			public bool FilterByInertia
			{
				[Token(Token = "0x60018E0")]
				[Address(RVA = "0x427789C", Offset = "0x427789C", VA = "0x427789C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60018E1")]
				[Address(RVA = "0x42778AC", Offset = "0x42778AC", VA = "0x42778AC")]
				set
				{
				}
			}

			[Token(Token = "0x170002B7")]
			public float MinInertiaRatio
			{
				[Token(Token = "0x60018E2")]
				[Address(RVA = "0x42778B8", Offset = "0x42778B8", VA = "0x42778B8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018E3")]
				[Address(RVA = "0x42778C0", Offset = "0x42778C0", VA = "0x42778C0")]
				set
				{
				}
			}

			[Token(Token = "0x170002B8")]
			public float MaxInertiaRatio
			{
				[Token(Token = "0x60018E4")]
				[Address(RVA = "0x42778C8", Offset = "0x42778C8", VA = "0x42778C8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018E5")]
				[Address(RVA = "0x42778D0", Offset = "0x42778D0", VA = "0x42778D0")]
				set
				{
				}
			}

			[Token(Token = "0x170002B9")]
			public bool FilterByConvexity
			{
				[Token(Token = "0x60018E6")]
				[Address(RVA = "0x42778D8", Offset = "0x42778D8", VA = "0x42778D8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60018E7")]
				[Address(RVA = "0x42778E8", Offset = "0x42778E8", VA = "0x42778E8")]
				set
				{
				}
			}

			[Token(Token = "0x170002BA")]
			public float MinConvexity
			{
				[Token(Token = "0x60018E8")]
				[Address(RVA = "0x42778F4", Offset = "0x42778F4", VA = "0x42778F4")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018E9")]
				[Address(RVA = "0x42778FC", Offset = "0x42778FC", VA = "0x42778FC")]
				set
				{
				}
			}

			[Token(Token = "0x170002BB")]
			public float MaxConvexity
			{
				[Token(Token = "0x60018EA")]
				[Address(RVA = "0x4277904", Offset = "0x4277904", VA = "0x4277904")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60018EB")]
				[Address(RVA = "0x427790C", Offset = "0x427790C", VA = "0x427790C")]
				set
				{
				}
			}

			[Token(Token = "0x60018C5")]
			[Address(RVA = "0x4277660", Offset = "0x4277660", VA = "0x4277660")]
			public Params()
			{
			}
		}

		[Token(Token = "0x20001BF")]
		public struct WParams
		{
			[Token(Token = "0x400072E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float thresholdStep;

			[Token(Token = "0x400072F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float minThreshold;

			[Token(Token = "0x4000730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float maxThreshold;

			[Token(Token = "0x4000731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public uint minRepeatability;

			[Token(Token = "0x4000732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float minDistBetweenBlobs;

			[Token(Token = "0x4000733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int filterByColor;

			[Token(Token = "0x4000734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public byte blobColor;

			[Token(Token = "0x4000735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int filterByArea;

			[Token(Token = "0x4000736")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float minArea;

			[Token(Token = "0x4000737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float maxArea;

			[Token(Token = "0x4000738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int filterByCircularity;

			[Token(Token = "0x4000739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minCircularity;

			[Token(Token = "0x400073A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float maxCircularity;

			[Token(Token = "0x400073B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int filterByInertia;

			[Token(Token = "0x400073C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float minInertiaRatio;

			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float maxInertiaRatio;

			[Token(Token = "0x400073E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int filterByConvexity;

			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float minConvexity;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float maxConvexity;
		}

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<SimpleBlobDetector> ptrObj;

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x4277528", Offset = "0x4277528", VA = "0x4277528")]
		internal SimpleBlobDetector(Ptr<SimpleBlobDetector> p)
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x427757C", Offset = "0x427757C", VA = "0x427757C")]
		public static SimpleBlobDetector Create([Optional] Params parameters)
		{
			return null;
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x42776F4", Offset = "0x42776F4", VA = "0x42776F4", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class CvTrackbar : DisposableObject
	{
		[Token(Token = "0x20001C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBA28", Offset = "0x1DDBA28")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x4000741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CvTrackbarCallback2 callback;

			[Token(Token = "0x60018EC")]
			[Address(RVA = "0x3EAA758", Offset = "0x3EAA758", VA = "0x3EAA758")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60018ED")]
			[Address(RVA = "0x3EAAA84", Offset = "0x3EAAA84", VA = "0x3EAAA84")]
			internal void <.ctor>b__0(int pos, IntPtr ud)
			{
			}
		}

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool disposed;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly string name;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly string window;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int value;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private readonly int max;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly int result;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly object userdata;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly Delegate callback;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CvTrackbarCallback2Native callbackNative;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GCHandle gchValue;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private GCHandle gchCallback;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GCHandle gchCallbackNative;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private GCHandle gchUserdata;

		[Token(Token = "0x1700012E")]
		public string TrackbarName
		{
			[Token(Token = "0x6001303")]
			[Address(RVA = "0x3EAA964", Offset = "0x3EAA964", VA = "0x3EAA964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		public string WindowName
		{
			[Token(Token = "0x6001304")]
			[Address(RVA = "0x3EAA96C", Offset = "0x3EAA96C", VA = "0x3EAA96C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		public int Pos
		{
			[Token(Token = "0x6001305")]
			[Address(RVA = "0x3EAA974", Offset = "0x3EAA974", VA = "0x3EAA974")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001306")]
			[Address(RVA = "0x3EAA9E4", Offset = "0x3EAA9E4", VA = "0x3EAA9E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000131")]
		public int Max
		{
			[Token(Token = "0x6001307")]
			[Address(RVA = "0x3EAAA64", Offset = "0x3EAAA64", VA = "0x3EAAA64")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000132")]
		public Delegate Callback
		{
			[Token(Token = "0x6001308")]
			[Address(RVA = "0x3EAAA6C", Offset = "0x3EAAA6C", VA = "0x3EAAA6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000133")]
		public object Userdata
		{
			[Token(Token = "0x6001309")]
			[Address(RVA = "0x3EAAA74", Offset = "0x3EAAA74", VA = "0x3EAAA74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		public int Result
		{
			[Token(Token = "0x600130A")]
			[Address(RVA = "0x3EAAA7C", Offset = "0x3EAAA7C", VA = "0x3EAAA7C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x3EAA1EC", Offset = "0x3EAA1EC", VA = "0x3EAA1EC")]
		public CvTrackbar(string name, string window, CvTrackbarCallback2 callback)
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x3EAA1FC", Offset = "0x3EAA1FC", VA = "0x3EAA1FC")]
		public CvTrackbar(string name, string window, int value, int max, CvTrackbarCallback2 callback)
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x3EAA438", Offset = "0x3EAA438", VA = "0x3EAA438")]
		public CvTrackbar(string name, string window, int value, int max, CvTrackbarCallback2 callback, object userdata)
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x3EAA774", Offset = "0x3EAA774", VA = "0x3EAA774", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public enum ButtonTypes
	{
		[Token(Token = "0x400035E")]
		PushButton,
		[Token(Token = "0x400035F")]
		Checkbox,
		[Token(Token = "0x4000360")]
		Radiobox
	}
	[Token(Token = "0x20000DB")]
	[Flags]
	public enum MouseEvent
	{
		[Token(Token = "0x4000362")]
		MouseMove = 0,
		[Token(Token = "0x4000363")]
		LButtonDown = 1,
		[Token(Token = "0x4000364")]
		RButtonDown = 2,
		[Token(Token = "0x4000365")]
		MButtonDown = 3,
		[Token(Token = "0x4000366")]
		LButtonUp = 4,
		[Token(Token = "0x4000367")]
		RButtonUp = 5,
		[Token(Token = "0x4000368")]
		MButtonUp = 6,
		[Token(Token = "0x4000369")]
		LButtonDoubleClick = 7,
		[Token(Token = "0x400036A")]
		RButtonDoubleClick = 8,
		[Token(Token = "0x400036B")]
		MButtonDoubleClick = 9,
		[Token(Token = "0x400036C")]
		MouseWheel = 8,
		[Token(Token = "0x400036D")]
		MouseHWheel = 9,
		[Token(Token = "0x400036E")]
		FlagLButton = 1,
		[Token(Token = "0x400036F")]
		FlagRButton = 2,
		[Token(Token = "0x4000370")]
		FlagMButton = 4,
		[Token(Token = "0x4000371")]
		FlagCtrlKey = 8,
		[Token(Token = "0x4000372")]
		FlagShiftKey = 0x10,
		[Token(Token = "0x4000373")]
		FlagAltKey = 0x20
	}
	[Token(Token = "0x20000DC")]
	[Flags]
	public enum WindowMode
	{
		[Token(Token = "0x4000375")]
		Normal = 0,
		[Token(Token = "0x4000376")]
		AutoSize = 1,
		[Token(Token = "0x4000377")]
		OpenGL = 0x1000,
		[Token(Token = "0x4000378")]
		FullScreen = 1,
		[Token(Token = "0x4000379")]
		FreeRatio = 0x100,
		[Token(Token = "0x400037A")]
		KeepRatio = 0
	}
	[Token(Token = "0x20000DD")]
	public enum WindowProperty
	{
		[Token(Token = "0x400037C")]
		Fullscreen,
		[Token(Token = "0x400037D")]
		AutoSize,
		[Token(Token = "0x400037E")]
		AspectRatio,
		[Token(Token = "0x400037F")]
		OpenGL
	}
	[Token(Token = "0x20000DE")]
	public static class FourCCCalcurator
	{
		[Token(Token = "0x600130B")]
		[Address(RVA = "0x3EBB8C8", Offset = "0x3EBB8C8", VA = "0x3EBB8C8")]
		public static int Run(byte c1, byte c2, byte c3, byte c4)
		{
			return default(int);
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x3EBB8E0", Offset = "0x3EBB8E0", VA = "0x3EBB8E0")]
		public static int Run(char c1, char c2, char c3, char c4)
		{
			return default(int);
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x3EBB9B0", Offset = "0x3EBB9B0", VA = "0x3EBB9B0")]
		public static int Run(string fourcc)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20000DF")]
	public class Window : DisposableObject
	{
		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static Dictionary<string, Window> Windows;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static uint windowCount;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string name;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Mat image;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CvMouseCallback mouseCallback;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Dictionary<string, CvTrackbar> trackbars;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ScopedGCHandle callbackHandle;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool disposed;

		[Token(Token = "0x17000135")]
		public Mat Image
		{
			[Token(Token = "0x6001319")]
			[Address(RVA = "0x4067BE8", Offset = "0x4067BE8", VA = "0x4067BE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600131A")]
			[Address(RVA = "0x4067BF0", Offset = "0x4067BF0", VA = "0x4067BF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public string Name
		{
			[Token(Token = "0x600131B")]
			[Address(RVA = "0x4067BF4", Offset = "0x4067BF4", VA = "0x4067BF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600131C")]
			[Address(RVA = "0x4067BFC", Offset = "0x4067BFC", VA = "0x4067BFC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public IntPtr Handle
		{
			[Token(Token = "0x600131D")]
			[Address(RVA = "0x4067C04", Offset = "0x4067C04", VA = "0x4067C04")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000138")]
		internal CvMouseCallback MouseCallback
		{
			[Token(Token = "0x600131E")]
			[Address(RVA = "0x4067C64", Offset = "0x4067C64", VA = "0x4067C64")]
			get
			{
				return null;
			}
			[Token(Token = "0x600131F")]
			[Address(RVA = "0x4067C6C", Offset = "0x4067C6C", VA = "0x4067C6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public static bool HasQt
		{
			[Token(Token = "0x6001322")]
			[Address(RVA = "0x4067FEC", Offset = "0x4067FEC", VA = "0x4067FEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000001")]
		public event CvMouseCallback OnMouseCallback
		{
			[Token(Token = "0x6001320")]
			[Address(RVA = "0x4067D24", Offset = "0x4067D24", VA = "0x4067D24")]
			add
			{
			}
			[Token(Token = "0x6001321")]
			[Address(RVA = "0x4067E88", Offset = "0x4067E88", VA = "0x4067E88")]
			remove
			{
			}
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x4067170", Offset = "0x4067170", VA = "0x4067170")]
		public Window()
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x4067458", Offset = "0x4067458", VA = "0x4067458")]
		public Window(Mat image)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x40674D8", Offset = "0x40674D8", VA = "0x40674D8")]
		public Window(WindowMode flags, Mat image)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x406755C", Offset = "0x406755C", VA = "0x406755C")]
		public Window(string name)
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x4067568", Offset = "0x4067568", VA = "0x4067568")]
		public Window(string name, WindowMode flags)
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x4067570", Offset = "0x4067570", VA = "0x4067570")]
		public Window(string name, Mat image)
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x4067288", Offset = "0x4067288", VA = "0x4067288")]
		public Window(string name, WindowMode flags, Mat image)
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x40671E4", Offset = "0x40671E4", VA = "0x40671E4")]
		private static string DefaultName()
		{
			return null;
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x4067630", Offset = "0x4067630", VA = "0x4067630", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x40678EC", Offset = "0x40678EC", VA = "0x40678EC")]
		public void Close()
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x40678FC", Offset = "0x40678FC", VA = "0x40678FC")]
		public static void DestroyAllWindows()
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x406804C", Offset = "0x406804C", VA = "0x406804C")]
		public CvTrackbar CreateTrackbar(string name, CvTrackbarCallback2 callback)
		{
			return null;
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x40680F8", Offset = "0x40680F8", VA = "0x40680F8")]
		public CvTrackbar CreateTrackbar(string name, int value, int max, CvTrackbarCallback2 callback)
		{
			return null;
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x40681BC", Offset = "0x40681BC", VA = "0x40681BC")]
		public CvTrackbar CreateTrackbar2(string name, int value, int max, CvTrackbarCallback2 callback, object userdata)
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x4068288", Offset = "0x4068288", VA = "0x4068288")]
		public void DisplayOverlay(string text, int delayms)
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x40682E8", Offset = "0x40682E8", VA = "0x40682E8")]
		public void DisplayStatusBar(string text, int delayms)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x4068348", Offset = "0x4068348", VA = "0x4068348")]
		public double GetProperty(WindowProperty propId)
		{
			return default(double);
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x4068354", Offset = "0x4068354", VA = "0x4068354")]
		public void LoadWindowParameters()
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x40683B4", Offset = "0x40683B4", VA = "0x40683B4")]
		public void Move(int x, int y)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x4068438", Offset = "0x4068438", VA = "0x4068438")]
		public void Resize(int width, int height)
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x40684BC", Offset = "0x40684BC", VA = "0x40684BC")]
		public void SaveWindowParameters()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x406851C", Offset = "0x406851C", VA = "0x406851C")]
		public void SetProperty(WindowProperty propId, double propValue)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x406757C", Offset = "0x406757C", VA = "0x406757C")]
		public void ShowImage(Mat img)
		{
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x4068528", Offset = "0x4068528", VA = "0x4068528")]
		public static int WaitKey()
		{
			return default(int);
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x406858C", Offset = "0x406858C", VA = "0x406858C")]
		public static int WaitKey(int delay)
		{
			return default(int);
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x40685F4", Offset = "0x40685F4", VA = "0x40685F4")]
		public static void ShowImages(params Mat[] images)
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x4068814", Offset = "0x4068814", VA = "0x4068814")]
		public static void ShowImages(IEnumerable<Mat> images, IEnumerable<string> names)
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x4068AE4", Offset = "0x4068AE4", VA = "0x4068AE4")]
		public static Window GetWindowByName(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E0")]
	public enum ConvertImageModes
	{
		[Token(Token = "0x4000389")]
		None,
		[Token(Token = "0x400038A")]
		Flip,
		[Token(Token = "0x400038B")]
		SwapRB
	}
	[Token(Token = "0x20000E1")]
	[Flags]
	public enum ImreadModes
	{
		[Token(Token = "0x400038D")]
		Unchanged = -1,
		[Token(Token = "0x400038E")]
		GrayScale = 0,
		[Token(Token = "0x400038F")]
		Color = 1,
		[Token(Token = "0x4000390")]
		AnyDepth = 2,
		[Token(Token = "0x4000391")]
		AnyColor = 4,
		[Token(Token = "0x4000392")]
		LoadGdal = 8
	}
	[Token(Token = "0x20000E2")]
	public enum ImwriteFlags
	{
		[Token(Token = "0x4000394")]
		JpegQuality = 1,
		[Token(Token = "0x4000395")]
		JpegProgressive = 2,
		[Token(Token = "0x4000396")]
		JpegOptimize = 3,
		[Token(Token = "0x4000397")]
		JpegRstInterval = 4,
		[Token(Token = "0x4000398")]
		JpegLumaQuality = 5,
		[Token(Token = "0x4000399")]
		JpegChromaQuality = 6,
		[Token(Token = "0x400039A")]
		PngCompression = 16,
		[Token(Token = "0x400039B")]
		PngStrategy = 17,
		[Token(Token = "0x400039C")]
		PngBilevel = 18,
		[Token(Token = "0x400039D")]
		PxmBinary = 32,
		[Token(Token = "0x400039E")]
		WebPQuality = 64
	}
	[Serializable]
	[Token(Token = "0x20000E3")]
	public class ImageEncodingParam
	{
		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB68", Offset = "0x1DDBB68")]
		private ImwriteFlags <EncodingId>k__BackingField;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB78", Offset = "0x1DDBB78")]
		private int <Value>k__BackingField;

		[Token(Token = "0x1700013A")]
		public ImwriteFlags EncodingId
		{
			[Token(Token = "0x6001335")]
			[Address(RVA = "0x304F7F0", Offset = "0x304F7F0", VA = "0x304F7F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC884", Offset = "0x1DDC884")]
			get
			{
				return default(ImwriteFlags);
			}
			[Token(Token = "0x6001336")]
			[Address(RVA = "0x304F7F8", Offset = "0x304F7F8", VA = "0x304F7F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC894", Offset = "0x1DDC894")]
			set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public int Value
		{
			[Token(Token = "0x6001337")]
			[Address(RVA = "0x304F800", Offset = "0x304F800", VA = "0x304F800")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC8A4", Offset = "0x1DDC8A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001338")]
			[Address(RVA = "0x304F808", Offset = "0x304F808", VA = "0x304F808")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC8B4", Offset = "0x1DDC8B4")]
			set
			{
			}
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x304F810", Offset = "0x304F810", VA = "0x304F810")]
		public ImageEncodingParam(ImwriteFlags id, int value)
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public sealed class CLAHE : Algorithm
	{
		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<CLAHE> ptrObj;

		[Token(Token = "0x1700013C")]
		public double ClipLimit
		{
			[Token(Token = "0x6001340")]
			[Address(RVA = "0x221FF38", Offset = "0x221FF38", VA = "0x221FF38")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001341")]
			[Address(RVA = "0x221FF3C", Offset = "0x221FF3C", VA = "0x221FF3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public Size TilesGridSize
		{
			[Token(Token = "0x6001344")]
			[Address(RVA = "0x22200F8", Offset = "0x22200F8", VA = "0x22200F8")]
			get
			{
				return default(Size);
			}
			[Token(Token = "0x6001345")]
			[Address(RVA = "0x22200FC", Offset = "0x22200FC", VA = "0x22200FC")]
			set
			{
			}
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x221F940", Offset = "0x221F940", VA = "0x221F940")]
		private CLAHE(IntPtr p)
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x221F9EC", Offset = "0x221F9EC", VA = "0x221F9EC")]
		public static CLAHE Create(double clipLimit = 40.0, [Optional] Size? tileGridSize)
		{
			return null;
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x221FAD4", Offset = "0x221FAD4", VA = "0x221FAD4", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x221FBB8", Offset = "0x221FBB8", VA = "0x221FBB8")]
		public void Apply(InputArray src, OutputArray dst)
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x221FD80", Offset = "0x221FD80", VA = "0x221FD80")]
		public void SetClipLimit(double clipLimit)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x221FE64", Offset = "0x221FE64", VA = "0x221FE64")]
		public double GetClipLimit()
		{
			return default(double);
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x221FF40", Offset = "0x221FF40", VA = "0x221FF40")]
		public void SetTilesGridSize(Size tileGridSize)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x2220024", Offset = "0x2220024", VA = "0x2220024")]
		public Size GetTilesGridSize()
		{
			return default(Size);
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x2220100", Offset = "0x2220100", VA = "0x2220100")]
		public void CollectGarbage()
		{
		}
	}
	[Token(Token = "0x20000E5")]
	public class ConnectedComponents
	{
		[Token(Token = "0x20001C1")]
		public class Blob
		{
			[Token(Token = "0x4000742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBEC8", Offset = "0x1DDBEC8")]
			private int <Label>k__BackingField;

			[Token(Token = "0x4000743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBED8", Offset = "0x1DDBED8")]
			private Point2d <Centroid>k__BackingField;

			[Token(Token = "0x4000744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBEE8", Offset = "0x1DDBEE8")]
			private int <Left>k__BackingField;

			[Token(Token = "0x4000745")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBEF8", Offset = "0x1DDBEF8")]
			private int <Top>k__BackingField;

			[Token(Token = "0x4000746")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF08", Offset = "0x1DDBF08")]
			private int <Width>k__BackingField;

			[Token(Token = "0x4000747")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF18", Offset = "0x1DDBF18")]
			private int <Height>k__BackingField;

			[Token(Token = "0x4000748")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF28", Offset = "0x1DDBF28")]
			private int <Area>k__BackingField;

			[Token(Token = "0x170002BC")]
			public int Label
			{
				[Token(Token = "0x60018EE")]
				[Address(RVA = "0x2222BD8", Offset = "0x2222BD8", VA = "0x2222BD8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD690", Offset = "0x1DDD690")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60018EF")]
				[Address(RVA = "0x2222BE0", Offset = "0x2222BE0", VA = "0x2222BE0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD6A0", Offset = "0x1DDD6A0")]
				internal set
				{
				}
			}

			[Token(Token = "0x170002BD")]
			public Point2d Centroid
			{
				[Token(Token = "0x60018F0")]
				[Address(RVA = "0x2222BE8", Offset = "0x2222BE8", VA = "0x2222BE8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD6B0", Offset = "0x1DDD6B0")]
				get
				{
					return default(Point2d);
				}
				[Token(Token = "0x60018F1")]
				[Address(RVA = "0x2222BF0", Offset = "0x2222BF0", VA = "0x2222BF0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD6C0", Offset = "0x1DDD6C0")]
				internal set
				{
				}
			}

			[Token(Token = "0x170002BE")]
			public int Left
			{
				[Token(Token = "0x60018F2")]
				[Address(RVA = "0x2222BF8", Offset = "0x2222BF8", VA = "0x2222BF8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD6D0", Offset = "0x1DDD6D0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60018F3")]
				[Address(RVA = "0x2222C00", Offset = "0x2222C00", VA = "0x2222C00")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD6E0", Offset = "0x1DDD6E0")]
				internal set
				{
				}
			}

			[Token(Token = "0x170002BF")]
			public int Top
			{
				[Token(Token = "0x60018F4")]
				[Address(RVA = "0x2222C08", Offset = "0x2222C08", VA = "0x2222C08")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD6F0", Offset = "0x1DDD6F0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60018F5")]
				[Address(RVA = "0x2222C10", Offset = "0x2222C10", VA = "0x2222C10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD700", Offset = "0x1DDD700")]
				internal set
				{
				}
			}

			[Token(Token = "0x170002C0")]
			public int Width
			{
				[Token(Token = "0x60018F6")]
				[Address(RVA = "0x2222C18", Offset = "0x2222C18", VA = "0x2222C18")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD710", Offset = "0x1DDD710")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60018F7")]
				[Address(RVA = "0x2222C20", Offset = "0x2222C20", VA = "0x2222C20")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD720", Offset = "0x1DDD720")]
				internal set
				{
				}
			}

			[Token(Token = "0x170002C1")]
			public int Height
			{
				[Token(Token = "0x60018F8")]
				[Address(RVA = "0x2222C28", Offset = "0x2222C28", VA = "0x2222C28")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD730", Offset = "0x1DDD730")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60018F9")]
				[Address(RVA = "0x2222C30", Offset = "0x2222C30", VA = "0x2222C30")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD740", Offset = "0x1DDD740")]
				internal set
				{
				}
			}

			[Token(Token = "0x170002C2")]
			public Rect Rect
			{
				[Token(Token = "0x60018FA")]
				[Address(RVA = "0x2222C38", Offset = "0x2222C38", VA = "0x2222C38")]
				get
				{
					return default(Rect);
				}
			}

			[Token(Token = "0x170002C3")]
			public int Area
			{
				[Token(Token = "0x60018FB")]
				[Address(RVA = "0x2222C6C", Offset = "0x2222C6C", VA = "0x2222C6C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD750", Offset = "0x1DDD750")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60018FC")]
				[Address(RVA = "0x2222C74", Offset = "0x2222C74", VA = "0x2222C74")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD760", Offset = "0x1DDD760")]
				internal set
				{
				}
			}

			[Token(Token = "0x60018FD")]
			[Address(RVA = "0x2222C7C", Offset = "0x2222C7C", VA = "0x2222C7C")]
			public Blob()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBA38", Offset = "0x1DDBA38")]
		private sealed class <>c
		{
			[Token(Token = "0x4000749")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400074A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static OpenCvSharp.Util.Func<Blob, int> <>9__16_0;

			[Token(Token = "0x60018FF")]
			[Address(RVA = "0x2222BB8", Offset = "0x2222BB8", VA = "0x2222BB8")]
			public <>c()
			{
			}

			[Token(Token = "0x6001900")]
			[Address(RVA = "0x2222BC0", Offset = "0x2222BC0", VA = "0x2222BC0")]
			internal int <FilterBlobs>b__16_0(Blob b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB88", Offset = "0x1DDBB88")]
		private ReadOnlyCollection<Blob> <Blobs>k__BackingField;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBB98", Offset = "0x1DDBB98")]
		private int[,] <Labels>k__BackingField;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBBA8", Offset = "0x1DDBBA8")]
		private int <LabelCount>k__BackingField;

		[Token(Token = "0x1700013E")]
		public ReadOnlyCollection<Blob> Blobs
		{
			[Token(Token = "0x6001347")]
			[Address(RVA = "0x22217E0", Offset = "0x22217E0", VA = "0x22217E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC8C4", Offset = "0x1DDC8C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001348")]
			[Address(RVA = "0x22217E8", Offset = "0x22217E8", VA = "0x22217E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC8D4", Offset = "0x1DDC8D4")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public int[,] Labels
		{
			[Token(Token = "0x6001349")]
			[Address(RVA = "0x22217F0", Offset = "0x22217F0", VA = "0x22217F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC8E4", Offset = "0x1DDC8E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600134A")]
			[Address(RVA = "0x22217F8", Offset = "0x22217F8", VA = "0x22217F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC8F4", Offset = "0x1DDC8F4")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public int LabelCount
		{
			[Token(Token = "0x600134B")]
			[Address(RVA = "0x2221800", Offset = "0x2221800", VA = "0x2221800")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC904", Offset = "0x1DDC904")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600134C")]
			[Address(RVA = "0x2221808", Offset = "0x2221808", VA = "0x2221808")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC914", Offset = "0x1DDC914")]
			internal set
			{
			}
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x2221810", Offset = "0x2221810", VA = "0x2221810")]
		internal ConnectedComponents(IList<Blob> blobs, int[,] labels, int labelCount)
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x22218C4", Offset = "0x22218C4", VA = "0x22218C4")]
		public Mat FilterByLabel(Mat src, Mat dst, int labelValue)
		{
			return null;
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x2221964", Offset = "0x2221964", VA = "0x2221964")]
		public Mat FilterByLabels(Mat src, Mat dst, IEnumerable<int> labelValues)
		{
			return null;
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x2222248", Offset = "0x2222248", VA = "0x2222248")]
		public Mat FilterByBlob(Mat src, Mat dst, Blob blob)
		{
			return null;
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x22222F0", Offset = "0x22222F0", VA = "0x22222F0")]
		public Mat FilterBlobs(Mat src, Mat dst, IEnumerable<Blob> blobs)
		{
			return null;
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x222241C", Offset = "0x222241C", VA = "0x222241C")]
		public void RenderBlobs(Mat img)
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x2222858", Offset = "0x2222858", VA = "0x2222858")]
		public Blob GetLargestBlob()
		{
			return null;
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x2221D6C", Offset = "0x2221D6C", VA = "0x2221D6C")]
		private Mat GetLabelMask(int label)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E6")]
	public enum AdaptiveThresholdTypes
	{
		[Token(Token = "0x40003A7")]
		MeanC,
		[Token(Token = "0x40003A8")]
		GaussianC
	}
	[Token(Token = "0x20000E7")]
	public enum BorderTypes
	{
		[Token(Token = "0x40003AA")]
		Constant = 0,
		[Token(Token = "0x40003AB")]
		Replicate = 1,
		[Token(Token = "0x40003AC")]
		Reflect = 2,
		[Token(Token = "0x40003AD")]
		Wrap = 3,
		[Token(Token = "0x40003AE")]
		Reflect101 = 4,
		[Token(Token = "0x40003AF")]
		Transparent = 5,
		[Token(Token = "0x40003B0")]
		Default = 4,
		[Token(Token = "0x40003B1")]
		Isolated = 16
	}
	[Token(Token = "0x20000E8")]
	public enum ColorConversionCodes
	{
		[Token(Token = "0x40003B3")]
		BGR2BGRA = 0,
		[Token(Token = "0x40003B4")]
		RGB2RGBA = 0,
		[Token(Token = "0x40003B5")]
		BGRA2BGR = 1,
		[Token(Token = "0x40003B6")]
		RGBA2RGB = 1,
		[Token(Token = "0x40003B7")]
		BGR2RGBA = 2,
		[Token(Token = "0x40003B8")]
		RGB2BGRA = 2,
		[Token(Token = "0x40003B9")]
		RGBA2BGR = 3,
		[Token(Token = "0x40003BA")]
		BGRA2RGB = 3,
		[Token(Token = "0x40003BB")]
		BGR2RGB = 4,
		[Token(Token = "0x40003BC")]
		RGB2BGR = 4,
		[Token(Token = "0x40003BD")]
		BGRA2RGBA = 5,
		[Token(Token = "0x40003BE")]
		RGBA2BGRA = 5,
		[Token(Token = "0x40003BF")]
		BGR2GRAY = 6,
		[Token(Token = "0x40003C0")]
		RGB2GRAY = 7,
		[Token(Token = "0x40003C1")]
		GRAY2BGR = 8,
		[Token(Token = "0x40003C2")]
		GRAY2RGB = 8,
		[Token(Token = "0x40003C3")]
		GRAY2BGRA = 9,
		[Token(Token = "0x40003C4")]
		GRAY2RGBA = 9,
		[Token(Token = "0x40003C5")]
		BGRA2GRAY = 10,
		[Token(Token = "0x40003C6")]
		RGBA2GRAY = 11,
		[Token(Token = "0x40003C7")]
		BGR2BGR565 = 12,
		[Token(Token = "0x40003C8")]
		RGB2BGR565 = 13,
		[Token(Token = "0x40003C9")]
		BGR5652BGR = 14,
		[Token(Token = "0x40003CA")]
		BGR5652RGB = 15,
		[Token(Token = "0x40003CB")]
		BGRA2BGR565 = 16,
		[Token(Token = "0x40003CC")]
		RGBA2BGR565 = 17,
		[Token(Token = "0x40003CD")]
		BGR5652BGRA = 18,
		[Token(Token = "0x40003CE")]
		BGR5652RGBA = 19,
		[Token(Token = "0x40003CF")]
		GRAY2BGR565 = 20,
		[Token(Token = "0x40003D0")]
		BGR5652GRAY = 21,
		[Token(Token = "0x40003D1")]
		BGR2BGR555 = 22,
		[Token(Token = "0x40003D2")]
		RGB2BGR555 = 23,
		[Token(Token = "0x40003D3")]
		BGR5552BGR = 24,
		[Token(Token = "0x40003D4")]
		BGR5552RGB = 25,
		[Token(Token = "0x40003D5")]
		BGRA2BGR555 = 26,
		[Token(Token = "0x40003D6")]
		RGBA2BGR555 = 27,
		[Token(Token = "0x40003D7")]
		BGR5552BGRA = 28,
		[Token(Token = "0x40003D8")]
		BGR5552RGBA = 29,
		[Token(Token = "0x40003D9")]
		GRAY2BGR555 = 30,
		[Token(Token = "0x40003DA")]
		BGR5552GRAY = 31,
		[Token(Token = "0x40003DB")]
		BGR2XYZ = 32,
		[Token(Token = "0x40003DC")]
		RGB2XYZ = 33,
		[Token(Token = "0x40003DD")]
		XYZ2BGR = 34,
		[Token(Token = "0x40003DE")]
		XYZ2RGB = 35,
		[Token(Token = "0x40003DF")]
		BGR2YCrCb = 36,
		[Token(Token = "0x40003E0")]
		RGB2YCrCb = 37,
		[Token(Token = "0x40003E1")]
		YCrCb2BGR = 38,
		[Token(Token = "0x40003E2")]
		YCrCb2RGB = 39,
		[Token(Token = "0x40003E3")]
		BGR2HSV = 40,
		[Token(Token = "0x40003E4")]
		RGB2HSV = 41,
		[Token(Token = "0x40003E5")]
		BGR2Lab = 44,
		[Token(Token = "0x40003E6")]
		RGB2Lab = 45,
		[Token(Token = "0x40003E7")]
		BGR2Luv = 50,
		[Token(Token = "0x40003E8")]
		RGB2Luv = 51,
		[Token(Token = "0x40003E9")]
		BGR2HLS = 52,
		[Token(Token = "0x40003EA")]
		RGB2HLS = 53,
		[Token(Token = "0x40003EB")]
		HSV2BGR = 54,
		[Token(Token = "0x40003EC")]
		HSV2RGB = 55,
		[Token(Token = "0x40003ED")]
		Lab2BGR = 56,
		[Token(Token = "0x40003EE")]
		Lab2RGB = 57,
		[Token(Token = "0x40003EF")]
		Luv2BGR = 58,
		[Token(Token = "0x40003F0")]
		Luv2RGB = 59,
		[Token(Token = "0x40003F1")]
		HLS2BGR = 60,
		[Token(Token = "0x40003F2")]
		HLS2RGB = 61,
		[Token(Token = "0x40003F3")]
		BGR2HSV_FULL = 66,
		[Token(Token = "0x40003F4")]
		RGB2HSV_FULL = 67,
		[Token(Token = "0x40003F5")]
		BGR2HLS_FULL = 68,
		[Token(Token = "0x40003F6")]
		RGB2HLS_FULL = 69,
		[Token(Token = "0x40003F7")]
		HSV2BGR_FULL = 70,
		[Token(Token = "0x40003F8")]
		HSV2RGB_FULL = 71,
		[Token(Token = "0x40003F9")]
		HLS2BGR_FULL = 72,
		[Token(Token = "0x40003FA")]
		HLS2RGB_FULL = 73,
		[Token(Token = "0x40003FB")]
		LBGR2Lab = 74,
		[Token(Token = "0x40003FC")]
		LRGB2Lab = 75,
		[Token(Token = "0x40003FD")]
		LBGR2Luv = 76,
		[Token(Token = "0x40003FE")]
		LRGB2Luv = 77,
		[Token(Token = "0x40003FF")]
		Lab2LBGR = 78,
		[Token(Token = "0x4000400")]
		Lab2LRGB = 79,
		[Token(Token = "0x4000401")]
		Luv2LBGR = 80,
		[Token(Token = "0x4000402")]
		Luv2LRGB = 81,
		[Token(Token = "0x4000403")]
		BGR2YUV = 82,
		[Token(Token = "0x4000404")]
		RGB2YUV = 83,
		[Token(Token = "0x4000405")]
		YUV2BGR = 84,
		[Token(Token = "0x4000406")]
		YUV2RGB = 85,
		[Token(Token = "0x4000407")]
		YUV2RGB_NV12 = 90,
		[Token(Token = "0x4000408")]
		YUV2BGR_NV12 = 91,
		[Token(Token = "0x4000409")]
		YUV2RGB_NV21 = 92,
		[Token(Token = "0x400040A")]
		YUV2BGR_NV21 = 93,
		[Token(Token = "0x400040B")]
		YUV420sp2RGB = 92,
		[Token(Token = "0x400040C")]
		YUV420sp2BGR = 93,
		[Token(Token = "0x400040D")]
		YUV2RGBA_NV12 = 94,
		[Token(Token = "0x400040E")]
		YUV2BGRA_NV12 = 95,
		[Token(Token = "0x400040F")]
		YUV2RGBA_NV21 = 96,
		[Token(Token = "0x4000410")]
		YUV2BGRA_NV21 = 97,
		[Token(Token = "0x4000411")]
		YUV420sp2RGBA = 96,
		[Token(Token = "0x4000412")]
		YUV420sp2BGRA = 97,
		[Token(Token = "0x4000413")]
		YUV2RGB_YV12 = 98,
		[Token(Token = "0x4000414")]
		YUV2BGR_YV12 = 99,
		[Token(Token = "0x4000415")]
		YUV2RGB_IYUV = 100,
		[Token(Token = "0x4000416")]
		YUV2BGR_IYUV = 101,
		[Token(Token = "0x4000417")]
		YUV2RGB_I420 = 100,
		[Token(Token = "0x4000418")]
		YUV2BGR_I420 = 101,
		[Token(Token = "0x4000419")]
		YUV420p2RGB = 98,
		[Token(Token = "0x400041A")]
		YUV420p2BGR = 99,
		[Token(Token = "0x400041B")]
		YUV2RGBA_YV12 = 102,
		[Token(Token = "0x400041C")]
		YUV2BGRA_YV12 = 103,
		[Token(Token = "0x400041D")]
		YUV2RGBA_IYUV = 104,
		[Token(Token = "0x400041E")]
		YUV2BGRA_IYUV = 105,
		[Token(Token = "0x400041F")]
		YUV2RGBA_I420 = 104,
		[Token(Token = "0x4000420")]
		YUV2BGRA_I420 = 105,
		[Token(Token = "0x4000421")]
		YUV420p2RGBA = 102,
		[Token(Token = "0x4000422")]
		YUV420p2BGRA = 103,
		[Token(Token = "0x4000423")]
		YUV2GRAY_420 = 106,
		[Token(Token = "0x4000424")]
		YUV2GRAY_NV21 = 106,
		[Token(Token = "0x4000425")]
		YUV2GRAY_NV12 = 106,
		[Token(Token = "0x4000426")]
		YUV2GRAY_YV12 = 106,
		[Token(Token = "0x4000427")]
		YUV2GRAY_IYUV = 106,
		[Token(Token = "0x4000428")]
		YUV2GRAY_I420 = 106,
		[Token(Token = "0x4000429")]
		YUV420sp2GRAY = 106,
		[Token(Token = "0x400042A")]
		YUV420p2GRAY = 106,
		[Token(Token = "0x400042B")]
		YUV2RGB_UYVY = 107,
		[Token(Token = "0x400042C")]
		YUV2BGR_UYVY = 108,
		[Token(Token = "0x400042D")]
		YUV2RGB_Y422 = 107,
		[Token(Token = "0x400042E")]
		YUV2BGR_Y422 = 108,
		[Token(Token = "0x400042F")]
		YUV2RGB_UYNV = 107,
		[Token(Token = "0x4000430")]
		YUV2BGR_UYNV = 108,
		[Token(Token = "0x4000431")]
		YUV2RGBA_UYVY = 111,
		[Token(Token = "0x4000432")]
		YUV2BGRA_UYVY = 112,
		[Token(Token = "0x4000433")]
		YUV2RGBA_Y422 = 111,
		[Token(Token = "0x4000434")]
		YUV2BGRA_Y422 = 112,
		[Token(Token = "0x4000435")]
		YUV2RGBA_UYNV = 111,
		[Token(Token = "0x4000436")]
		YUV2BGRA_UYNV = 112,
		[Token(Token = "0x4000437")]
		YUV2RGB_YUY2 = 115,
		[Token(Token = "0x4000438")]
		YUV2BGR_YUY2 = 116,
		[Token(Token = "0x4000439")]
		YUV2RGB_YVYU = 117,
		[Token(Token = "0x400043A")]
		YUV2BGR_YVYU = 118,
		[Token(Token = "0x400043B")]
		YUV2RGB_YUYV = 115,
		[Token(Token = "0x400043C")]
		YUV2BGR_YUYV = 116,
		[Token(Token = "0x400043D")]
		YUV2RGB_YUNV = 115,
		[Token(Token = "0x400043E")]
		YUV2BGR_YUNV = 116,
		[Token(Token = "0x400043F")]
		YUV2RGBA_YUY2 = 119,
		[Token(Token = "0x4000440")]
		YUV2BGRA_YUY2 = 120,
		[Token(Token = "0x4000441")]
		YUV2RGBA_YVYU = 121,
		[Token(Token = "0x4000442")]
		YUV2BGRA_YVYU = 122,
		[Token(Token = "0x4000443")]
		YUV2RGBA_YUYV = 119,
		[Token(Token = "0x4000444")]
		YUV2BGRA_YUYV = 120,
		[Token(Token = "0x4000445")]
		YUV2RGBA_YUNV = 119,
		[Token(Token = "0x4000446")]
		YUV2BGRA_YUNV = 120,
		[Token(Token = "0x4000447")]
		YUV2GRAY_UYVY = 123,
		[Token(Token = "0x4000448")]
		YUV2GRAY_YUY2 = 124,
		[Token(Token = "0x4000449")]
		YUV2GRAY_Y422 = 123,
		[Token(Token = "0x400044A")]
		YUV2GRAY_UYNV = 123,
		[Token(Token = "0x400044B")]
		YUV2GRAY_YVYU = 124,
		[Token(Token = "0x400044C")]
		YUV2GRAY_YUYV = 124,
		[Token(Token = "0x400044D")]
		YUV2GRAY_YUNV = 124,
		[Token(Token = "0x400044E")]
		RGBA2mRGBA = 125,
		[Token(Token = "0x400044F")]
		mRGBA2RGBA = 126,
		[Token(Token = "0x4000450")]
		RGB2YUV_I420 = 127,
		[Token(Token = "0x4000451")]
		BGR2YUV_I420 = 128,
		[Token(Token = "0x4000452")]
		RGB2YUV_IYUV = 127,
		[Token(Token = "0x4000453")]
		BGR2YUV_IYUV = 128,
		[Token(Token = "0x4000454")]
		RGBA2YUV_I420 = 129,
		[Token(Token = "0x4000455")]
		BGRA2YUV_I420 = 130,
		[Token(Token = "0x4000456")]
		RGBA2YUV_IYUV = 129,
		[Token(Token = "0x4000457")]
		BGRA2YUV_IYUV = 130,
		[Token(Token = "0x4000458")]
		RGB2YUV_YV12 = 131,
		[Token(Token = "0x4000459")]
		BGR2YUV_YV12 = 132,
		[Token(Token = "0x400045A")]
		RGBA2YUV_YV12 = 133,
		[Token(Token = "0x400045B")]
		BGRA2YUV_YV12 = 134,
		[Token(Token = "0x400045C")]
		BayerBG2BGR = 46,
		[Token(Token = "0x400045D")]
		BayerGB2BGR = 47,
		[Token(Token = "0x400045E")]
		BayerRG2BGR = 48,
		[Token(Token = "0x400045F")]
		BayerGR2BGR = 49,
		[Token(Token = "0x4000460")]
		BayerBG2RGB = 48,
		[Token(Token = "0x4000461")]
		BayerGB2RGB = 49,
		[Token(Token = "0x4000462")]
		BayerRG2RGB = 46,
		[Token(Token = "0x4000463")]
		BayerGR2RGB = 47,
		[Token(Token = "0x4000464")]
		BayerBG2GRAY = 86,
		[Token(Token = "0x4000465")]
		BayerGB2GRAY = 87,
		[Token(Token = "0x4000466")]
		BayerRG2GRAY = 88,
		[Token(Token = "0x4000467")]
		BayerGR2GRAY = 89,
		[Token(Token = "0x4000468")]
		BayerBG2BGR_VNG = 62,
		[Token(Token = "0x4000469")]
		BayerGB2BGR_VNG = 63,
		[Token(Token = "0x400046A")]
		BayerRG2BGR_VNG = 64,
		[Token(Token = "0x400046B")]
		BayerGR2BGR_VNG = 65,
		[Token(Token = "0x400046C")]
		BayerBG2RGB_VNG = 64,
		[Token(Token = "0x400046D")]
		BayerGB2RGB_VNG = 65,
		[Token(Token = "0x400046E")]
		BayerRG2RGB_VNG = 62,
		[Token(Token = "0x400046F")]
		BayerGR2RGB_VNG = 63,
		[Token(Token = "0x4000470")]
		BayerBG2BGR_EA = 135,
		[Token(Token = "0x4000471")]
		BayerGB2BGR_EA = 136,
		[Token(Token = "0x4000472")]
		BayerRG2BGR_EA = 137,
		[Token(Token = "0x4000473")]
		BayerGR2BGR_EA = 138,
		[Token(Token = "0x4000474")]
		BayerBG2RGB_EA = 137,
		[Token(Token = "0x4000475")]
		BayerGB2RGB_EA = 138,
		[Token(Token = "0x4000476")]
		BayerRG2RGB_EA = 135,
		[Token(Token = "0x4000477")]
		BayerGR2RGB_EA = 136,
		[Token(Token = "0x4000478")]
		COLORCVT_MAX = 139
	}
	[Token(Token = "0x20000E9")]
	public enum ColormapTypes
	{
		[Token(Token = "0x400047A")]
		Autumn,
		[Token(Token = "0x400047B")]
		Bone,
		[Token(Token = "0x400047C")]
		Jet,
		[Token(Token = "0x400047D")]
		Winter,
		[Token(Token = "0x400047E")]
		Rainbow,
		[Token(Token = "0x400047F")]
		Ocean,
		[Token(Token = "0x4000480")]
		Summer,
		[Token(Token = "0x4000481")]
		Spring,
		[Token(Token = "0x4000482")]
		Cool,
		[Token(Token = "0x4000483")]
		Hsv,
		[Token(Token = "0x4000484")]
		Pink,
		[Token(Token = "0x4000485")]
		Hot
	}
	[Token(Token = "0x20000EA")]
	public enum ConnectedComponentsTypes
	{
		[Token(Token = "0x4000487")]
		Left,
		[Token(Token = "0x4000488")]
		Top,
		[Token(Token = "0x4000489")]
		Width,
		[Token(Token = "0x400048A")]
		Height,
		[Token(Token = "0x400048B")]
		Area
	}
	[Token(Token = "0x20000EB")]
	public enum ContourApproximationModes
	{
		[Token(Token = "0x400048D")]
		ApproxNone = 1,
		[Token(Token = "0x400048E")]
		ApproxSimple,
		[Token(Token = "0x400048F")]
		ApproxTC89L1,
		[Token(Token = "0x4000490")]
		ApproxTC89KCOS
	}
	[Token(Token = "0x20000EC")]
	[Flags]
	public enum DistanceMaskSize
	{
		[Token(Token = "0x4000492")]
		Mask3 = 3,
		[Token(Token = "0x4000493")]
		Mask5 = 5,
		[Token(Token = "0x4000494")]
		Precise = 0
	}
	[Token(Token = "0x20000ED")]
	public enum DistanceTransformLabelTypes
	{
		[Token(Token = "0x4000496")]
		CComp,
		[Token(Token = "0x4000497")]
		Pixel
	}
	[Token(Token = "0x20000EE")]
	public enum DistanceTypes
	{
		[Token(Token = "0x4000499")]
		User = -1,
		[Token(Token = "0x400049A")]
		L1 = 1,
		[Token(Token = "0x400049B")]
		L2 = 2,
		[Token(Token = "0x400049C")]
		C = 3,
		[Token(Token = "0x400049D")]
		L12 = 4,
		[Token(Token = "0x400049E")]
		Fair = 5,
		[Token(Token = "0x400049F")]
		Welsch = 6,
		[Token(Token = "0x40004A0")]
		Huber = 7
	}
	[Token(Token = "0x20000EF")]
	public enum FlipMode
	{
		[Token(Token = "0x40004A2")]
		X = 0,
		[Token(Token = "0x40004A3")]
		Y = 1,
		[Token(Token = "0x40004A4")]
		XY = -1
	}
	[Token(Token = "0x20000F0")]
	[Flags]
	public enum FloodFillFlags
	{
		[Token(Token = "0x40004A6")]
		Link4 = 4,
		[Token(Token = "0x40004A7")]
		Link8 = 8,
		[Token(Token = "0x40004A8")]
		FixedRange = 0x10000,
		[Token(Token = "0x40004A9")]
		MaskOnly = 0x20000
	}
	[Token(Token = "0x20000F1")]
	public enum GrabCutClasses
	{
		[Token(Token = "0x40004AB")]
		BGD,
		[Token(Token = "0x40004AC")]
		FGD,
		[Token(Token = "0x40004AD")]
		PR_BGD,
		[Token(Token = "0x40004AE")]
		PR_FGD
	}
	[Token(Token = "0x20000F2")]
	[Flags]
	public enum GrabCutModes
	{
		[Token(Token = "0x40004B0")]
		InitWithRect = 0,
		[Token(Token = "0x40004B1")]
		InitWithMask = 1,
		[Token(Token = "0x40004B2")]
		Eval = 2
	}
	[Token(Token = "0x20000F3")]
	public enum HistCompMethods
	{
		[Token(Token = "0x40004B4")]
		Correl = 0,
		[Token(Token = "0x40004B5")]
		Chisqr = 1,
		[Token(Token = "0x40004B6")]
		Intersect = 2,
		[Token(Token = "0x40004B7")]
		Bhattacharyya = 3,
		[Token(Token = "0x40004B8")]
		Hellinger = 3,
		[Token(Token = "0x40004B9")]
		ChisqrAlt = 4,
		[Token(Token = "0x40004BA")]
		KLDiv = 5
	}
	[Token(Token = "0x20000F4")]
	public enum HoughMethods
	{
		[Token(Token = "0x40004BC")]
		Standard,
		[Token(Token = "0x40004BD")]
		Probabilistic,
		[Token(Token = "0x40004BE")]
		MultiScale,
		[Token(Token = "0x40004BF")]
		Gradient
	}
	[Token(Token = "0x20000F5")]
	[Flags]
	public enum InterpolationFlags
	{
		[Token(Token = "0x40004C1")]
		Nearest = 0,
		[Token(Token = "0x40004C2")]
		Linear = 1,
		[Token(Token = "0x40004C3")]
		Cubic = 2,
		[Token(Token = "0x40004C4")]
		Area = 3,
		[Token(Token = "0x40004C5")]
		Lanczos4 = 4,
		[Token(Token = "0x40004C6")]
		Max = 7,
		[Token(Token = "0x40004C7")]
		WarpFillOutliers = 8,
		[Token(Token = "0x40004C8")]
		WarpInverseMap = 0x10
	}
	[Token(Token = "0x20000F6")]
	public enum LineSegmentDetectorModes
	{
		[Token(Token = "0x40004CA")]
		RefineNone,
		[Token(Token = "0x40004CB")]
		RefineStd,
		[Token(Token = "0x40004CC")]
		RefineAdv
	}
	[Token(Token = "0x20000F7")]
	public enum LineTypes
	{
		[Token(Token = "0x40004CE")]
		Filled = -1,
		[Token(Token = "0x40004CF")]
		Link8 = 8,
		[Token(Token = "0x40004D0")]
		Link4 = 4,
		[Token(Token = "0x40004D1")]
		AntiAlias = 16
	}
	[Token(Token = "0x20000F8")]
	public enum MarkerStyle
	{
		[Token(Token = "0x40004D3")]
		CircleLine,
		[Token(Token = "0x40004D4")]
		CircleFilled,
		[Token(Token = "0x40004D5")]
		Cross,
		[Token(Token = "0x40004D6")]
		TiltedCross,
		[Token(Token = "0x40004D7")]
		CircleAndCross,
		[Token(Token = "0x40004D8")]
		CircleAndTiltedCross,
		[Token(Token = "0x40004D9")]
		DiamondLine,
		[Token(Token = "0x40004DA")]
		DiamondFilled,
		[Token(Token = "0x40004DB")]
		SquareLine,
		[Token(Token = "0x40004DC")]
		SquareFilled
	}
	[Token(Token = "0x20000F9")]
	public enum MorphShapes
	{
		[Token(Token = "0x40004DE")]
		Rect,
		[Token(Token = "0x40004DF")]
		Cross,
		[Token(Token = "0x40004E0")]
		Ellipse
	}
	[Token(Token = "0x20000FA")]
	[Flags]
	public enum MorphTypes
	{
		[Token(Token = "0x40004E2")]
		ERODE = 0,
		[Token(Token = "0x40004E3")]
		DILATE = 1,
		[Token(Token = "0x40004E4")]
		Open = 2,
		[Token(Token = "0x40004E5")]
		Close = 3,
		[Token(Token = "0x40004E6")]
		Gradient = 4,
		[Token(Token = "0x40004E7")]
		TopHat = 5,
		[Token(Token = "0x40004E8")]
		BlackHat = 6
	}
	[Token(Token = "0x20000FB")]
	public enum PixelConnectivity
	{
		[Token(Token = "0x40004EA")]
		Connectivity4 = 4,
		[Token(Token = "0x40004EB")]
		Connectivity8 = 8
	}
	[Token(Token = "0x20000FC")]
	public enum ProjectionType
	{
		[Token(Token = "0x40004ED")]
		None = 0,
		[Token(Token = "0x40004EE")]
		SphericalOrtho = 0,
		[Token(Token = "0x40004EF")]
		SphericalEqRect = 1
	}
	[Token(Token = "0x20000FD")]
	public enum RectanglesIntersectTypes
	{
		[Token(Token = "0x40004F1")]
		None,
		[Token(Token = "0x40004F2")]
		Partial,
		[Token(Token = "0x40004F3")]
		Full
	}
	[Token(Token = "0x20000FE")]
	public enum RetrievalModes
	{
		[Token(Token = "0x40004F5")]
		External,
		[Token(Token = "0x40004F6")]
		List,
		[Token(Token = "0x40004F7")]
		CComp,
		[Token(Token = "0x40004F8")]
		Tree,
		[Token(Token = "0x40004F9")]
		FloodFill
	}
	[Token(Token = "0x20000FF")]
	public enum ShapeMatchModes
	{
		[Token(Token = "0x40004FB")]
		I1 = 1,
		[Token(Token = "0x40004FC")]
		I2,
		[Token(Token = "0x40004FD")]
		I3
	}
	[Token(Token = "0x2000100")]
	public enum TemplateMatchModes
	{
		[Token(Token = "0x40004FF")]
		SqDiff,
		[Token(Token = "0x4000500")]
		SqDiffNormed,
		[Token(Token = "0x4000501")]
		CCorr,
		[Token(Token = "0x4000502")]
		CCorrNormed,
		[Token(Token = "0x4000503")]
		CCoeff,
		[Token(Token = "0x4000504")]
		CCoeffNormed
	}
	[Token(Token = "0x2000101")]
	[Flags]
	public enum ThresholdTypes
	{
		[Token(Token = "0x4000506")]
		Binary = 0,
		[Token(Token = "0x4000507")]
		BinaryInv = 1,
		[Token(Token = "0x4000508")]
		Trunc = 2,
		[Token(Token = "0x4000509")]
		Tozero = 3,
		[Token(Token = "0x400050A")]
		TozeroInv = 4,
		[Token(Token = "0x400050B")]
		Mask = 7,
		[Token(Token = "0x400050C")]
		Otsu = 8,
		[Token(Token = "0x400050D")]
		Triangle = 0x10
	}
	[Token(Token = "0x2000102")]
	public abstract class GeneralizedHough : Algorithm
	{
		[Token(Token = "0x17000141")]
		public int CannyLowThresh
		{
			[Token(Token = "0x6001355")]
			[Address(RVA = "0x3EBCEB4", Offset = "0x3EBCEB4", VA = "0x3EBCEB4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001356")]
			[Address(RVA = "0x3EBCF94", Offset = "0x3EBCF94", VA = "0x3EBCF94")]
			set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public int CannyHighThresh
		{
			[Token(Token = "0x6001357")]
			[Address(RVA = "0x3EBD084", Offset = "0x3EBD084", VA = "0x3EBD084")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001358")]
			[Address(RVA = "0x3EBD164", Offset = "0x3EBD164", VA = "0x3EBD164")]
			set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public double MinDist
		{
			[Token(Token = "0x6001359")]
			[Address(RVA = "0x3EBD254", Offset = "0x3EBD254", VA = "0x3EBD254")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600135A")]
			[Address(RVA = "0x3EBD334", Offset = "0x3EBD334", VA = "0x3EBD334")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public double Dp
		{
			[Token(Token = "0x600135B")]
			[Address(RVA = "0x3EBD424", Offset = "0x3EBD424", VA = "0x3EBD424")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600135C")]
			[Address(RVA = "0x3EBD504", Offset = "0x3EBD504", VA = "0x3EBD504")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public int MaxBufferSize
		{
			[Token(Token = "0x600135D")]
			[Address(RVA = "0x3EBD5F4", Offset = "0x3EBD5F4", VA = "0x3EBD5F4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600135E")]
			[Address(RVA = "0x3EBD6D4", Offset = "0x3EBD6D4", VA = "0x3EBD6D4")]
			set
			{
			}
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x3EBD7C4", Offset = "0x3EBD7C4", VA = "0x3EBD7C4")]
		public void SetTemplate(InputArray templ, [Optional] Point? templCenter)
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x3EBD980", Offset = "0x3EBD980", VA = "0x3EBD980", Slot = "13")]
		public virtual void SetTemplate(InputArray edges, InputArray dx, InputArray dy, [Optional] Point? templCenter)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x3EBDBDC", Offset = "0x3EBDBDC", VA = "0x3EBDBDC", Slot = "14")]
		public virtual void Detect(InputArray image, OutputArray positions, [Optional] OutputArray votes)
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x3EBDD88", Offset = "0x3EBDD88", VA = "0x3EBDD88", Slot = "15")]
		public virtual void Detect(InputArray edges, InputArray dx, InputArray dy, OutputArray positions, [Optional] OutputArray votes)
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x3EBDFE0", Offset = "0x3EBDFE0", VA = "0x3EBDFE0")]
		protected GeneralizedHough()
		{
		}
	}
	[Token(Token = "0x2000103")]
	public class GeneralizedHoughBallard : GeneralizedHough
	{
		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<GeneralizedHoughBallard> ptrObj;

		[Token(Token = "0x17000146")]
		public int Levels
		{
			[Token(Token = "0x6001367")]
			[Address(RVA = "0x3EBE1F8", Offset = "0x3EBE1F8", VA = "0x3EBE1F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001368")]
			[Address(RVA = "0x3EBE2D8", Offset = "0x3EBE2D8", VA = "0x3EBE2D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public int VotesThreshold
		{
			[Token(Token = "0x6001369")]
			[Address(RVA = "0x3EBE3C8", Offset = "0x3EBE3C8", VA = "0x3EBE3C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600136A")]
			[Address(RVA = "0x3EBE4A8", Offset = "0x3EBE4A8", VA = "0x3EBE4A8")]
			set
			{
			}
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x3EBDFE8", Offset = "0x3EBDFE8", VA = "0x3EBDFE8")]
		private GeneralizedHoughBallard(IntPtr p)
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x3EBE094", Offset = "0x3EBE094", VA = "0x3EBE094")]
		public static GeneralizedHoughBallard Create()
		{
			return null;
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x3EBE120", Offset = "0x3EBE120", VA = "0x3EBE120", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000104")]
	public class GeneralizedHoughGuil : GeneralizedHough
	{
		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<GeneralizedHoughGuil> ptrObj;

		[Token(Token = "0x17000148")]
		public double Xi
		{
			[Token(Token = "0x600136E")]
			[Address(RVA = "0x3EBE7A8", Offset = "0x3EBE7A8", VA = "0x3EBE7A8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600136F")]
			[Address(RVA = "0x3EBE888", Offset = "0x3EBE888", VA = "0x3EBE888")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public int Levels
		{
			[Token(Token = "0x6001370")]
			[Address(RVA = "0x3EBE978", Offset = "0x3EBE978", VA = "0x3EBE978")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001371")]
			[Address(RVA = "0x3EBEA58", Offset = "0x3EBEA58", VA = "0x3EBEA58")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public double AngleEpsilon
		{
			[Token(Token = "0x6001372")]
			[Address(RVA = "0x3EBEB48", Offset = "0x3EBEB48", VA = "0x3EBEB48")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001373")]
			[Address(RVA = "0x3EBEC28", Offset = "0x3EBEC28", VA = "0x3EBEC28")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public double MinAngle
		{
			[Token(Token = "0x6001374")]
			[Address(RVA = "0x3EBED18", Offset = "0x3EBED18", VA = "0x3EBED18")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001375")]
			[Address(RVA = "0x3EBEDF8", Offset = "0x3EBEDF8", VA = "0x3EBEDF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public double MaxAngle
		{
			[Token(Token = "0x6001376")]
			[Address(RVA = "0x3EBEEE8", Offset = "0x3EBEEE8", VA = "0x3EBEEE8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001377")]
			[Address(RVA = "0x3EBEFC8", Offset = "0x3EBEFC8", VA = "0x3EBEFC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public double AngleStep
		{
			[Token(Token = "0x6001378")]
			[Address(RVA = "0x3EBF0B8", Offset = "0x3EBF0B8", VA = "0x3EBF0B8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001379")]
			[Address(RVA = "0x3EBF198", Offset = "0x3EBF198", VA = "0x3EBF198")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public int AngleThresh
		{
			[Token(Token = "0x600137A")]
			[Address(RVA = "0x3EBF288", Offset = "0x3EBF288", VA = "0x3EBF288")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600137B")]
			[Address(RVA = "0x3EBF368", Offset = "0x3EBF368", VA = "0x3EBF368")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public double MinScale
		{
			[Token(Token = "0x600137C")]
			[Address(RVA = "0x3EBF458", Offset = "0x3EBF458", VA = "0x3EBF458")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600137D")]
			[Address(RVA = "0x3EBF538", Offset = "0x3EBF538", VA = "0x3EBF538")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public double MaxScale
		{
			[Token(Token = "0x600137E")]
			[Address(RVA = "0x3EBF628", Offset = "0x3EBF628", VA = "0x3EBF628")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600137F")]
			[Address(RVA = "0x3EBF708", Offset = "0x3EBF708", VA = "0x3EBF708")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public double ScaleStep
		{
			[Token(Token = "0x6001380")]
			[Address(RVA = "0x3EBF7F8", Offset = "0x3EBF7F8", VA = "0x3EBF7F8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001381")]
			[Address(RVA = "0x3EBF8D8", Offset = "0x3EBF8D8", VA = "0x3EBF8D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public int ScaleThresh
		{
			[Token(Token = "0x6001382")]
			[Address(RVA = "0x3EBF9C8", Offset = "0x3EBF9C8", VA = "0x3EBF9C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001383")]
			[Address(RVA = "0x3EBFAA8", Offset = "0x3EBFAA8", VA = "0x3EBFAA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public int PosThresh
		{
			[Token(Token = "0x6001384")]
			[Address(RVA = "0x3EBFB98", Offset = "0x3EBFB98", VA = "0x3EBFB98")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001385")]
			[Address(RVA = "0x3EBFC78", Offset = "0x3EBFC78", VA = "0x3EBFC78")]
			set
			{
			}
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x3EBE598", Offset = "0x3EBE598", VA = "0x3EBE598")]
		private GeneralizedHoughGuil(IntPtr p)
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x3EBE644", Offset = "0x3EBE644", VA = "0x3EBE644")]
		public static GeneralizedHoughGuil Create()
		{
			return null;
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0x3EBE6D0", Offset = "0x3EBE6D0", VA = "0x3EBE6D0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000105")]
	public sealed class LineIterator : DisposableCvObject, IEnumerable<LineIterator.Pixel>, IEnumerable
	{
		[Token(Token = "0x20001C3")]
		public class Pixel
		{
			[Token(Token = "0x400074B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF38", Offset = "0x1DDBF38")]
			private unsafe byte* <ValuePointer>k__BackingField;

			[Token(Token = "0x400074C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF48", Offset = "0x1DDBF48")]
			private Point <Pos>k__BackingField;

			[Token(Token = "0x170002C4")]
			public unsafe byte* ValuePointer
			{
				[Token(Token = "0x6001901")]
				[Address(RVA = "0x3055368", Offset = "0x3055368", VA = "0x3055368")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD770", Offset = "0x1DDD770")]
				get
				{
					//IL_0002: Expected I, but got O
					return (byte*)unchecked((nint)null);
				}
				[Token(Token = "0x6001902")]
				[Address(RVA = "0x3055370", Offset = "0x3055370", VA = "0x3055370")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD780", Offset = "0x1DDD780")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C5")]
			public Point Pos
			{
				[Token(Token = "0x6001903")]
				[Address(RVA = "0x3055378", Offset = "0x3055378", VA = "0x3055378")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD790", Offset = "0x1DDD790")]
				get
				{
					return default(Point);
				}
				[Token(Token = "0x6001904")]
				[Address(RVA = "0x3055380", Offset = "0x3055380", VA = "0x3055380")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD7A0", Offset = "0x1DDD7A0")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C6")]
			public IntPtr Value
			{
				[Token(Token = "0x6001905")]
				[Address(RVA = "0x3055388", Offset = "0x3055388", VA = "0x3055388")]
				get
				{
					return default(IntPtr);
				}
			}

			[Token(Token = "0x6001906")]
			public T GetValue<T>() where T : struct
			{
				return (T)null;
			}

			[Token(Token = "0x6001907")]
			public void SetValue<T>(T value) where T : struct
			{
			}

			[Token(Token = "0x6001908")]
			[Address(RVA = "0x30552C0", Offset = "0x30552C0", VA = "0x30552C0")]
			internal Pixel(Point pos, IntPtr value)
			{
			}
		}

		[Token(Token = "0x20001C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBA48", Offset = "0x1DDBA48")]
		private sealed class <GetEnumerator>d__9 : IEnumerator<Pixel>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400074D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400074E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Pixel <>2__current;

			[Token(Token = "0x400074F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LineIterator <>4__this;

			[Token(Token = "0x4000750")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <count>5__2;

			[Token(Token = "0x4000751")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <i>5__3;

			[Token(Token = "0x170002C7")]
			private Pixel System.Collections.Generic.IEnumerator<OpenCvSharp.LineIterator.Pixel>.Current
			{
				[Token(Token = "0x600190C")]
				[Address(RVA = "0x30552F8", Offset = "0x30552F8", VA = "0x30552F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600190E")]
				[Address(RVA = "0x3055360", Offset = "0x3055360", VA = "0x3055360", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001909")]
			[Address(RVA = "0x30548AC", Offset = "0x30548AC", VA = "0x30548AC")]
			[DebuggerHidden]
			public <GetEnumerator>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600190A")]
			[Address(RVA = "0x3055124", Offset = "0x3055124", VA = "0x3055124", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600190B")]
			[Address(RVA = "0x3055128", Offset = "0x3055128", VA = "0x3055128", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600190D")]
			[Address(RVA = "0x3055300", Offset = "0x3055300", VA = "0x3055300", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Mat img;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Point pt1;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Point pt2;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PixelConnectivity connectivity;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool leftToRight;

		[Token(Token = "0x17000154")]
		public IntPtr Ptr
		{
			[Token(Token = "0x600138B")]
			[Address(RVA = "0x30548DC", Offset = "0x30548DC", VA = "0x30548DC")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000155")]
		public IntPtr Ptr0
		{
			[Token(Token = "0x600138C")]
			[Address(RVA = "0x30549B0", Offset = "0x30549B0", VA = "0x30549B0")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000156")]
		public int Step
		{
			[Token(Token = "0x600138D")]
			[Address(RVA = "0x3054A84", Offset = "0x3054A84", VA = "0x3054A84")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000157")]
		public int ElemSize
		{
			[Token(Token = "0x600138E")]
			[Address(RVA = "0x3054B58", Offset = "0x3054B58", VA = "0x3054B58")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000158")]
		public int Err
		{
			[Token(Token = "0x600138F")]
			[Address(RVA = "0x3054C2C", Offset = "0x3054C2C", VA = "0x3054C2C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000159")]
		public int Count
		{
			[Token(Token = "0x6001390")]
			[Address(RVA = "0x3054D00", Offset = "0x3054D00", VA = "0x3054D00")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015A")]
		public int MinusDelta
		{
			[Token(Token = "0x6001391")]
			[Address(RVA = "0x3054DD4", Offset = "0x3054DD4", VA = "0x3054DD4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015B")]
		public int PlusDelta
		{
			[Token(Token = "0x6001392")]
			[Address(RVA = "0x3054EA8", Offset = "0x3054EA8", VA = "0x3054EA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015C")]
		public int MinusStep
		{
			[Token(Token = "0x6001393")]
			[Address(RVA = "0x3054F7C", Offset = "0x3054F7C", VA = "0x3054F7C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015D")]
		public int PlusStep
		{
			[Token(Token = "0x6001394")]
			[Address(RVA = "0x3055050", Offset = "0x3055050", VA = "0x3055050")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x3054538", Offset = "0x3054538", VA = "0x3054538")]
		public LineIterator(Mat img, Point pt1, Point pt2, PixelConnectivity connectivity = PixelConnectivity.Connectivity8, bool leftToRight = false)
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x3054610", Offset = "0x3054610", VA = "0x3054610")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x305472C", Offset = "0x305472C", VA = "0x305472C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x3054830", Offset = "0x3054830", VA = "0x3054830", Slot = "8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDC924", Offset = "0x1DDC924")]
		public IEnumerator<Pixel> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x30548D8", Offset = "0x30548D8", VA = "0x30548D8", Slot = "9")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000106")]
	public class LineSegmentDetector : Algorithm
	{
		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<LineSegmentDetector> ptrObj;

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x3055390", Offset = "0x3055390", VA = "0x3055390")]
		protected LineSegmentDetector(IntPtr p)
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x305543C", Offset = "0x305543C", VA = "0x305543C")]
		public static LineSegmentDetector Create(LineSegmentDetectorModes refine = LineSegmentDetectorModes.RefineNone, double scale = 0.8, double sigmaScale = 0.6, double quant = 2.0, double angTh = 22.5, double logEps = 0.0, double densityTh = 0.7, int nBins = 1024)
		{
			return null;
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x3055528", Offset = "0x3055528", VA = "0x3055528", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x305560C", Offset = "0x305560C", VA = "0x305560C", Slot = "13")]
		public virtual void Detect(InputArray image, OutputArray lines, [Optional] OutputArray width, [Optional] OutputArray prec, [Optional] OutputArray nfa)
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x3055850", Offset = "0x3055850", VA = "0x3055850", Slot = "14")]
		public virtual void Detect(InputArray image, out Vec4f[] lines, out double[] width, out double[] prec, out double[] nfa)
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x3055DC4", Offset = "0x3055DC4", VA = "0x3055DC4", Slot = "15")]
		public virtual void DrawSegments(InputOutputArray image, InputArray lines)
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x3055F24", Offset = "0x3055F24", VA = "0x3055F24", Slot = "16")]
		public virtual int CompareSegments(Size size, InputArray lines1, InputArray lines2, [Optional] InputOutputArray image)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000107")]
	public struct CircleSegment : IEquatable<CircleSegment>
	{
		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Point2f Center;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Radius;

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x2221590", Offset = "0x2221590", VA = "0x2221590")]
		public CircleSegment(Point2f center, float radius)
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x222159C", Offset = "0x222159C", VA = "0x222159C", Slot = "4")]
		public bool Equals(CircleSegment obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x22215F8", Offset = "0x22215F8", VA = "0x22215F8")]
		public static bool operator ==(CircleSegment lhs, CircleSegment rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x2221634", Offset = "0x2221634", VA = "0x2221634")]
		public static bool operator !=(CircleSegment lhs, CircleSegment rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x2221674", Offset = "0x2221674", VA = "0x2221674", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x2221704", Offset = "0x2221704", VA = "0x2221704", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x222173C", Offset = "0x222173C", VA = "0x222173C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000108")]
	public class HierarchyIndex
	{
		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBBB8", Offset = "0x1DDBBB8")]
		private int <Next>k__BackingField;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBBC8", Offset = "0x1DDBBC8")]
		private int <Previous>k__BackingField;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBBD8", Offset = "0x1DDBBD8")]
		private int <Child>k__BackingField;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBBE8", Offset = "0x1DDBBE8")]
		private int <Parent>k__BackingField;

		[Token(Token = "0x1700015E")]
		public int Next
		{
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0x304F680", Offset = "0x304F680", VA = "0x304F680")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC988", Offset = "0x1DDC988")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013A4")]
			[Address(RVA = "0x304F688", Offset = "0x304F688", VA = "0x304F688")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC998", Offset = "0x1DDC998")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public int Previous
		{
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0x304F690", Offset = "0x304F690", VA = "0x304F690")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC9A8", Offset = "0x1DDC9A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0x304F698", Offset = "0x304F698", VA = "0x304F698")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC9B8", Offset = "0x1DDC9B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public int Child
		{
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0x304F6A0", Offset = "0x304F6A0", VA = "0x304F6A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC9C8", Offset = "0x1DDC9C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0x304F6A8", Offset = "0x304F6A8", VA = "0x304F6A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC9D8", Offset = "0x1DDC9D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public int Parent
		{
			[Token(Token = "0x60013A9")]
			[Address(RVA = "0x304F6B0", Offset = "0x304F6B0", VA = "0x304F6B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC9E8", Offset = "0x1DDC9E8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013AA")]
			[Address(RVA = "0x304F6B8", Offset = "0x304F6B8", VA = "0x304F6B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDC9F8", Offset = "0x1DDC9F8")]
			set
			{
			}
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x304F6C0", Offset = "0x304F6C0", VA = "0x304F6C0")]
		public HierarchyIndex()
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x304F6E8", Offset = "0x304F6E8", VA = "0x304F6E8")]
		public HierarchyIndex(int next, int previous, int child, int parent)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x304F734", Offset = "0x304F734", VA = "0x304F734")]
		public static HierarchyIndex FromVec4i(Vec4i vec)
		{
			return null;
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x304F7BC", Offset = "0x304F7BC", VA = "0x304F7BC")]
		public Vec4i ToVec4i()
		{
			return default(Vec4i);
		}
	}
	[Token(Token = "0x2000109")]
	public class Line2D
	{
		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBBF8", Offset = "0x1DDBBF8")]
		private double <Vx>k__BackingField;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC08", Offset = "0x1DDBC08")]
		private double <Vy>k__BackingField;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC18", Offset = "0x1DDBC18")]
		private double <X1>k__BackingField;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC28", Offset = "0x1DDBC28")]
		private double <Y1>k__BackingField;

		[Token(Token = "0x17000162")]
		public double Vx
		{
			[Token(Token = "0x60013AF")]
			[Address(RVA = "0x3053A00", Offset = "0x3053A00", VA = "0x3053A00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA08", Offset = "0x1DDCA08")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013B0")]
			[Address(RVA = "0x3053A08", Offset = "0x3053A08", VA = "0x3053A08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA18", Offset = "0x1DDCA18")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public double Vy
		{
			[Token(Token = "0x60013B1")]
			[Address(RVA = "0x3053A10", Offset = "0x3053A10", VA = "0x3053A10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA28", Offset = "0x1DDCA28")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013B2")]
			[Address(RVA = "0x3053A18", Offset = "0x3053A18", VA = "0x3053A18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA38", Offset = "0x1DDCA38")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public double X1
		{
			[Token(Token = "0x60013B3")]
			[Address(RVA = "0x3053A20", Offset = "0x3053A20", VA = "0x3053A20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA48", Offset = "0x1DDCA48")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013B4")]
			[Address(RVA = "0x3053A28", Offset = "0x3053A28", VA = "0x3053A28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA58", Offset = "0x1DDCA58")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public double Y1
		{
			[Token(Token = "0x60013B5")]
			[Address(RVA = "0x3053A30", Offset = "0x3053A30", VA = "0x3053A30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA68", Offset = "0x1DDCA68")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013B6")]
			[Address(RVA = "0x3053A38", Offset = "0x3053A38", VA = "0x3053A38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA78", Offset = "0x1DDCA78")]
			set
			{
			}
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x3053A40", Offset = "0x3053A40", VA = "0x3053A40")]
		public Line2D(double vx, double vy, double x1, double y1)
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x3053A8C", Offset = "0x3053A8C", VA = "0x3053A8C")]
		public Line2D(float[] line)
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x3053B18", Offset = "0x3053B18", VA = "0x3053B18")]
		public double GetVectorRadian()
		{
			return default(double);
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x3053B8C", Offset = "0x3053B8C", VA = "0x3053B8C")]
		public double GetVectorAngle()
		{
			return default(double);
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x3053BB8", Offset = "0x3053BB8", VA = "0x3053BB8")]
		public double Distance(Point point)
		{
			return default(double);
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x3053C84", Offset = "0x3053C84", VA = "0x3053C84")]
		public double Distance(Point2f point)
		{
			return default(double);
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x3053C90", Offset = "0x3053C90", VA = "0x3053C90")]
		public double Distance(Point2d point)
		{
			return default(double);
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x3053BC8", Offset = "0x3053BC8", VA = "0x3053BC8")]
		public double Distance(double x, double y)
		{
			return default(double);
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x3053C94", Offset = "0x3053C94", VA = "0x3053C94")]
		public void FitSize(int width, int height, out Point pt1, out Point pt2)
		{
		}
	}
	[Token(Token = "0x200010A")]
	public class Line3D
	{
		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC38", Offset = "0x1DDBC38")]
		private double <Vx>k__BackingField;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC48", Offset = "0x1DDBC48")]
		private double <Vy>k__BackingField;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC58", Offset = "0x1DDBC58")]
		private double <Vz>k__BackingField;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC68", Offset = "0x1DDBC68")]
		private double <X1>k__BackingField;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC78", Offset = "0x1DDBC78")]
		private double <Y1>k__BackingField;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC88", Offset = "0x1DDBC88")]
		private double <Z1>k__BackingField;

		[Token(Token = "0x17000166")]
		public double Vx
		{
			[Token(Token = "0x60013C0")]
			[Address(RVA = "0x3053F6C", Offset = "0x3053F6C", VA = "0x3053F6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA88", Offset = "0x1DDCA88")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013C1")]
			[Address(RVA = "0x3053F74", Offset = "0x3053F74", VA = "0x3053F74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCA98", Offset = "0x1DDCA98")]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public double Vy
		{
			[Token(Token = "0x60013C2")]
			[Address(RVA = "0x3053F7C", Offset = "0x3053F7C", VA = "0x3053F7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCAA8", Offset = "0x1DDCAA8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013C3")]
			[Address(RVA = "0x3053F84", Offset = "0x3053F84", VA = "0x3053F84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCAB8", Offset = "0x1DDCAB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public double Vz
		{
			[Token(Token = "0x60013C4")]
			[Address(RVA = "0x3053F8C", Offset = "0x3053F8C", VA = "0x3053F8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCAC8", Offset = "0x1DDCAC8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013C5")]
			[Address(RVA = "0x3053F94", Offset = "0x3053F94", VA = "0x3053F94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCAD8", Offset = "0x1DDCAD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public double X1
		{
			[Token(Token = "0x60013C6")]
			[Address(RVA = "0x3053F9C", Offset = "0x3053F9C", VA = "0x3053F9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCAE8", Offset = "0x1DDCAE8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013C7")]
			[Address(RVA = "0x3053FA4", Offset = "0x3053FA4", VA = "0x3053FA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCAF8", Offset = "0x1DDCAF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public double Y1
		{
			[Token(Token = "0x60013C8")]
			[Address(RVA = "0x3053FAC", Offset = "0x3053FAC", VA = "0x3053FAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB08", Offset = "0x1DDCB08")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013C9")]
			[Address(RVA = "0x3053FB4", Offset = "0x3053FB4", VA = "0x3053FB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB18", Offset = "0x1DDCB18")]
			set
			{
			}
		}

		[Token(Token = "0x1700016B")]
		public double Z1
		{
			[Token(Token = "0x60013CA")]
			[Address(RVA = "0x3053FBC", Offset = "0x3053FBC", VA = "0x3053FBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB28", Offset = "0x1DDCB28")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013CB")]
			[Address(RVA = "0x3053FC4", Offset = "0x3053FC4", VA = "0x3053FC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB38", Offset = "0x1DDCB38")]
			set
			{
			}
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0x3053FCC", Offset = "0x3053FCC", VA = "0x3053FCC")]
		public Line3D(double vx, double vy, double vz, double x1, double y1, double z1)
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x305402C", Offset = "0x305402C", VA = "0x305402C")]
		public Line3D(float[] line)
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x30540E0", Offset = "0x30540E0", VA = "0x30540E0")]
		public Point3d PerpendicularFoot(Point3f point)
		{
			return default(Point3d);
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x3054274", Offset = "0x3054274", VA = "0x3054274")]
		public Point3d PerpendicularFoot(Point3d point)
		{
			return default(Point3d);
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x30540F0", Offset = "0x30540F0", VA = "0x30540F0")]
		public Point3d PerpendicularFoot(double x, double y, double z)
		{
			return default(Point3d);
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x3054278", Offset = "0x3054278", VA = "0x3054278")]
		public double Distance(Point3f point)
		{
			return default(double);
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x3054388", Offset = "0x3054388", VA = "0x3054388")]
		public double Distance(Point3d point)
		{
			return default(double);
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x3054288", Offset = "0x3054288", VA = "0x3054288")]
		public double Distance(double x, double y, double z)
		{
			return default(double);
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x305438C", Offset = "0x305438C", VA = "0x305438C")]
		private Point3d CrossProduct(Point3d vl, Point3d vr)
		{
			return default(Point3d);
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x30543B4", Offset = "0x30543B4", VA = "0x30543B4")]
		private double VectorLength(Point3d v)
		{
			return default(double);
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x3054464", Offset = "0x3054464", VA = "0x3054464")]
		private double VertexDistance(Point3d p1, Point3d p2)
		{
			return default(double);
		}
	}
	[Serializable]
	[Token(Token = "0x200010B")]
	public struct LineSegmentPoint : IEquatable<LineSegmentPoint>
	{
		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Point P1;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Point P2;

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x30560DC", Offset = "0x30560DC", VA = "0x30560DC")]
		public LineSegmentPoint(Point p1, Point p2)
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x30560E4", Offset = "0x30560E4", VA = "0x30560E4", Slot = "4")]
		public bool Equals(LineSegmentPoint obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x3056130", Offset = "0x3056130", VA = "0x3056130")]
		public static bool operator ==(LineSegmentPoint lhs, LineSegmentPoint rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x3056160", Offset = "0x3056160", VA = "0x3056160")]
		public static bool operator !=(LineSegmentPoint lhs, LineSegmentPoint rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x3056194", Offset = "0x3056194", VA = "0x3056194", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x305621C", Offset = "0x305621C", VA = "0x305621C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x3056254", Offset = "0x3056254", VA = "0x3056254", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0x30562F8", Offset = "0x30562F8", VA = "0x30562F8")]
		public static Point? LineIntersection(LineSegmentPoint line1, LineSegmentPoint line2)
		{
			return null;
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x305652C", Offset = "0x305652C", VA = "0x305652C")]
		public Point? LineIntersection(LineSegmentPoint line)
		{
			return null;
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x3056558", Offset = "0x3056558", VA = "0x3056558")]
		public static Point? SegmentIntersection(LineSegmentPoint seg1, LineSegmentPoint seg2)
		{
			return null;
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x3056C38", Offset = "0x3056C38", VA = "0x3056C38")]
		public Point? SegmentIntersection(LineSegmentPoint seg)
		{
			return null;
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x30565B4", Offset = "0x30565B4", VA = "0x30565B4")]
		public static bool IntersectedSegments(LineSegmentPoint seg1, LineSegmentPoint seg2)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x3056C64", Offset = "0x3056C64", VA = "0x3056C64")]
		public bool IntersectedSegments(LineSegmentPoint seg)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x3056C7C", Offset = "0x3056C7C", VA = "0x3056C7C")]
		public static bool IntersectedLineAndSegment(LineSegmentPoint line, LineSegmentPoint seg)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x3056CD4", Offset = "0x3056CD4", VA = "0x3056CD4")]
		public static Point? LineAndSegmentIntersection(LineSegmentPoint line, LineSegmentPoint seg)
		{
			return null;
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x3056D30", Offset = "0x3056D30", VA = "0x3056D30")]
		public double Length(LineSegmentPoint s)
		{
			return default(double);
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x3056D3C", Offset = "0x3056D3C", VA = "0x3056D3C")]
		public void Offset(int x, int y)
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x3056D60", Offset = "0x3056D60", VA = "0x3056D60")]
		public void Offset(Point p)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200010C")]
	public struct LineSegmentPolar : IEquatable<LineSegmentPolar>
	{
		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Rho;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Theta;

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x3056D84", Offset = "0x3056D84", VA = "0x3056D84")]
		public LineSegmentPolar(float rho, float theta)
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x3056D8C", Offset = "0x3056D8C", VA = "0x3056D8C", Slot = "4")]
		public bool Equals(LineSegmentPolar obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x3056DB0", Offset = "0x3056DB0", VA = "0x3056DB0")]
		public static bool operator ==(LineSegmentPolar lhs, LineSegmentPolar rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x3056DC8", Offset = "0x3056DC8", VA = "0x3056DC8")]
		public static bool operator !=(LineSegmentPolar lhs, LineSegmentPolar rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x3056DE0", Offset = "0x3056DE0", VA = "0x3056DE0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x3056E60", Offset = "0x3056E60", VA = "0x3056E60", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x3056E98", Offset = "0x3056E98", VA = "0x3056E98", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x3056F34", Offset = "0x3056F34", VA = "0x3056F34")]
		public static Point? LineIntersection(LineSegmentPolar line1, LineSegmentPolar line2)
		{
			return null;
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x3057268", Offset = "0x3057268", VA = "0x3057268")]
		public Point? LineIntersection(LineSegmentPolar line)
		{
			return null;
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x3056FA4", Offset = "0x3056FA4", VA = "0x3056FA4")]
		public LineSegmentPoint ToSegmentPoint(double scale)
		{
			return default(LineSegmentPoint);
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x3057294", Offset = "0x3057294", VA = "0x3057294")]
		public LineSegmentPoint ToSegmentPointX(int x1, int x2)
		{
			return default(LineSegmentPoint);
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x3057484", Offset = "0x3057484", VA = "0x3057484")]
		public LineSegmentPoint ToSegmentPointY(int y1, int y2)
		{
			return default(LineSegmentPoint);
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x30575C0", Offset = "0x30575C0", VA = "0x30575C0")]
		public int? XPosOfLine(int y)
		{
			return null;
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x30573D0", Offset = "0x30573D0", VA = "0x30573D0")]
		public int? YPosOfLine(int x)
		{
			return null;
		}
	}
	[Token(Token = "0x200010D")]
	public class Moments
	{
		[Token(Token = "0x20001C5")]
		public struct NativeStruct
		{
			[Token(Token = "0x4000752")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public double m00;

			[Token(Token = "0x4000753")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public double m10;

			[Token(Token = "0x4000754")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double m01;

			[Token(Token = "0x4000755")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double m20;

			[Token(Token = "0x4000756")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double m11;

			[Token(Token = "0x4000757")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double m02;

			[Token(Token = "0x4000758")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public double m30;

			[Token(Token = "0x4000759")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public double m21;

			[Token(Token = "0x400075A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public double m12;

			[Token(Token = "0x400075B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double m03;

			[Token(Token = "0x400075C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public double mu20;

			[Token(Token = "0x400075D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public double mu11;

			[Token(Token = "0x400075E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public double mu02;

			[Token(Token = "0x400075F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public double mu30;

			[Token(Token = "0x4000760")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public double mu21;

			[Token(Token = "0x4000761")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public double mu12;

			[Token(Token = "0x4000762")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public double mu03;

			[Token(Token = "0x4000763")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public double inv_sqrt_m00;
		}

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double M00;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double M10;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double M01;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double M20;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double M11;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public double M02;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public double M30;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public double M21;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public double M12;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public double M03;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public double Mu20;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public double Mu11;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public double Mu02;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public double Mu30;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public double Mu21;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public double Mu12;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public double Mu03;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public double Nu20;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public double Nu11;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public double Nu02;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public double Nu30;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public double Nu21;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public double Nu12;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public double Nu03;

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x21773C8", Offset = "0x21773C8", VA = "0x21773C8")]
		public Moments()
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x21773FC", Offset = "0x21773FC", VA = "0x21773FC")]
		public Moments(double m00, double m10, double m01, double m20, double m11, double m02, double m30, double m21, double m12, double m03)
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x2177694", Offset = "0x2177694", VA = "0x2177694")]
		public Moments(InputArray array, bool binaryImage = false)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x217780C", Offset = "0x217780C", VA = "0x217780C")]
		public Moments(byte[,] array, bool binaryImage = false)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x2177A00", Offset = "0x2177A00", VA = "0x2177A00")]
		public Moments(float[,] array, bool binaryImage = false)
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x2177BF4", Offset = "0x2177BF4", VA = "0x2177BF4")]
		public Moments(IEnumerable<Point> array, bool binaryImage = false)
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x2177DD4", Offset = "0x2177DD4", VA = "0x2177DD4")]
		public Moments(IEnumerable<Point2f> array, bool binaryImage = false)
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x2177748", Offset = "0x2177748", VA = "0x2177748")]
		private void InitializeFromInputArray(InputArray array, bool binaryImage)
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x2177494", Offset = "0x2177494", VA = "0x2177494")]
		private void Initialize(double m00, double m10, double m01, double m20, double m11, double m02, double m30, double m21, double m12, double m03)
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x217804C", Offset = "0x217804C", VA = "0x217804C")]
		public double[] HuMoments()
		{
			return null;
		}
	}
	[Token(Token = "0x200010E")]
	public class Subdiv2D : DisposableCvObject
	{
		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000547")]
		public const int PTLOC_ERROR = -2;

		[Token(Token = "0x4000548")]
		public const int PTLOC_OUTSIDE_RECT = -1;

		[Token(Token = "0x4000549")]
		public const int PTLOC_INSIDE = 0;

		[Token(Token = "0x400054A")]
		public const int PTLOC_VERTEX = 1;

		[Token(Token = "0x400054B")]
		public const int PTLOC_ON_EDGE = 2;

		[Token(Token = "0x400054C")]
		public const int NEXT_AROUND_ORG = 0;

		[Token(Token = "0x400054D")]
		public const int NEXT_AROUND_DST = 34;

		[Token(Token = "0x400054E")]
		public const int PREV_AROUND_ORG = 17;

		[Token(Token = "0x400054F")]
		public const int PREV_AROUND_DST = 51;

		[Token(Token = "0x4000550")]
		public const int NEXT_AROUND_LEFT = 19;

		[Token(Token = "0x4000551")]
		public const int NEXT_AROUND_RIGHT = 49;

		[Token(Token = "0x4000552")]
		public const int PREV_AROUND_LEFT = 32;

		[Token(Token = "0x4000553")]
		public const int PREV_AROUND_RIGHT = 2;

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x4053B34", Offset = "0x4053B34", VA = "0x4053B34")]
		public Subdiv2D()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x4053BEC", Offset = "0x4053BEC", VA = "0x4053BEC")]
		public Subdiv2D(Rect rect)
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0x4053CBC", Offset = "0x4053CBC", VA = "0x4053CBC")]
		public void Release()
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x4053CCC", Offset = "0x4053CCC", VA = "0x4053CCC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x4053DC8", Offset = "0x4053DC8", VA = "0x4053DC8")]
		public void InitDelaunay(Rect rect)
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x4053E9C", Offset = "0x4053E9C", VA = "0x4053E9C")]
		public int Insert(Point2f pt)
		{
			return default(int);
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x4053F70", Offset = "0x4053F70", VA = "0x4053F70")]
		public void Insert(Point2f[] ptvec)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x4054070", Offset = "0x4054070", VA = "0x4054070")]
		public void Insert(IEnumerable<Point2f> ptvec)
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x4054148", Offset = "0x4054148", VA = "0x4054148")]
		public int Locate(Point2f pt, out int edge, out int vertex)
		{
			return default(int);
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x4054234", Offset = "0x4054234", VA = "0x4054234")]
		public int FindNearest(Point2f pt)
		{
			return default(int);
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x4054258", Offset = "0x4054258", VA = "0x4054258")]
		public int FindNearest(Point2f pt, out Point2f nearestPt)
		{
			return default(int);
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x405433C", Offset = "0x405433C", VA = "0x405433C")]
		public Vec4f[] GetEdgeList()
		{
			return null;
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x4054568", Offset = "0x4054568", VA = "0x4054568")]
		public Vec6f[] GetTriangleList()
		{
			return null;
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x4054794", Offset = "0x4054794", VA = "0x4054794")]
		public void GetVoronoiFacetList(IEnumerable<int> idx, out Point2f[][] facetList, out Point2f[] facetCenters)
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x4054F88", Offset = "0x4054F88", VA = "0x4054F88")]
		public Point2f GetVertex(int vertex)
		{
			return default(Point2f);
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x4054FAC", Offset = "0x4054FAC", VA = "0x4054FAC")]
		public Point2f GetVertex(int vertex, out int firstEdge)
		{
			return default(Point2f);
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x4055080", Offset = "0x4055080", VA = "0x4055080")]
		public int GetEdge(int edge, int nextEdgeType)
		{
			return default(int);
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x4055154", Offset = "0x4055154", VA = "0x4055154")]
		public int NextEdge(int edge)
		{
			return default(int);
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x4055220", Offset = "0x4055220", VA = "0x4055220")]
		public int RotateEdge(int edge, int rotate)
		{
			return default(int);
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0x40552F4", Offset = "0x40552F4", VA = "0x40552F4")]
		public int SymEdge(int edge)
		{
			return default(int);
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0x40553C0", Offset = "0x40553C0", VA = "0x40553C0")]
		public int EdgeOrg(int edge)
		{
			return default(int);
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x40553E4", Offset = "0x40553E4", VA = "0x40553E4")]
		public int EdgeOrg(int edge, out Point2f orgpt)
		{
			return default(int);
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0x40554B8", Offset = "0x40554B8", VA = "0x40554B8")]
		public int EdgeDst(int edge)
		{
			return default(int);
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0x40554DC", Offset = "0x40554DC", VA = "0x40554DC")]
		public int EdgeDst(int edge, out Point2f dstpt)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200010F")]
	public class EM : Algorithm
	{
		[Token(Token = "0x20001C6")]
		public enum Types
		{
			[Token(Token = "0x4000765")]
			CovMatSpherical = 0,
			[Token(Token = "0x4000766")]
			CovMatDiagonal = 1,
			[Token(Token = "0x4000767")]
			CovMatGeneric = 2,
			[Token(Token = "0x4000768")]
			CovMatDefault = 0
		}

		[Token(Token = "0x20001C7")]
		public enum StartStep
		{
			[Token(Token = "0x400076A")]
			E = 1,
			[Token(Token = "0x400076B")]
			M = 2,
			[Token(Token = "0x400076C")]
			Auto = 0
		}

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<EM> ptrObj;

		[Token(Token = "0x4000556")]
		public const int DEFAULT_NCLUSTERS = 5;

		[Token(Token = "0x4000557")]
		public const int DEFAULT_MAX_ITERS = 100;

		[Token(Token = "0x1700016C")]
		public int ClustersNumber
		{
			[Token(Token = "0x600141C")]
			[Address(RVA = "0x3EB0980", Offset = "0x3EB0980", VA = "0x3EB0980")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600141D")]
			[Address(RVA = "0x3EB09EC", Offset = "0x3EB09EC", VA = "0x3EB09EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700016D")]
		public int CovarianceMatrixType
		{
			[Token(Token = "0x600141E")]
			[Address(RVA = "0x3EB0A68", Offset = "0x3EB0A68", VA = "0x3EB0A68")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600141F")]
			[Address(RVA = "0x3EB0AD4", Offset = "0x3EB0AD4", VA = "0x3EB0AD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700016E")]
		public TermCriteria TermCriteria
		{
			[Token(Token = "0x6001420")]
			[Address(RVA = "0x3EB0B50", Offset = "0x3EB0B50", VA = "0x3EB0B50")]
			get
			{
				return default(TermCriteria);
			}
			[Token(Token = "0x6001421")]
			[Address(RVA = "0x3EB0BBC", Offset = "0x3EB0BBC", VA = "0x3EB0BBC")]
			set
			{
			}
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0x3EB0778", Offset = "0x3EB0778", VA = "0x3EB0778")]
		protected EM(IntPtr p)
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x3EB0824", Offset = "0x3EB0824", VA = "0x3EB0824")]
		public static EM Create()
		{
			return null;
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x3EB08B0", Offset = "0x3EB08B0", VA = "0x3EB08B0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x3EB0C40", Offset = "0x3EB0C40", VA = "0x3EB0C40")]
		public Mat GetWeights()
		{
			return null;
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x3EB0D44", Offset = "0x3EB0D44", VA = "0x3EB0D44")]
		public Mat GetMeans()
		{
			return null;
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x3EB0E48", Offset = "0x3EB0E48", VA = "0x3EB0E48")]
		public Mat[] GetCovs()
		{
			return null;
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0x3EB1018", Offset = "0x3EB1018", VA = "0x3EB1018", Slot = "13")]
		public virtual bool TrainE(InputArray samples, InputArray means0, [Optional] InputArray covs0, [Optional] InputArray weights0, [Optional] OutputArray logLikelihoods, [Optional] OutputArray labels, [Optional] OutputArray probs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0x3EB1314", Offset = "0x3EB1314", VA = "0x3EB1314", Slot = "14")]
		public virtual bool TrainM(InputArray samples, InputArray probs0, [Optional] OutputArray logLikelihoods, [Optional] OutputArray labels, [Optional] OutputArray probs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0x3EB15A0", Offset = "0x3EB15A0", VA = "0x3EB15A0", Slot = "15")]
		public virtual Vec2d Predict2(InputArray sample, [Optional] OutputArray probs)
		{
			return default(Vec2d);
		}
	}
	[Token(Token = "0x2000110")]
	public class CascadeClassifier : DisposableCvObject
	{
		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x22205FC", Offset = "0x22205FC", VA = "0x22205FC")]
		public CascadeClassifier()
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x2220674", Offset = "0x2220674", VA = "0x2220674")]
		public CascadeClassifier(string fileName)
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x22207BC", Offset = "0x22207BC", VA = "0x22207BC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x22208A4", Offset = "0x22208A4", VA = "0x22208A4", Slot = "8")]
		public virtual bool Empty()
		{
			return default(bool);
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x2220960", Offset = "0x2220960", VA = "0x2220960")]
		public bool Load(string fileName)
		{
			return default(bool);
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x2220ADC", Offset = "0x2220ADC", VA = "0x2220ADC")]
		public bool Read(FileNode node)
		{
			return default(bool);
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x2220BEC", Offset = "0x2220BEC", VA = "0x2220BEC", Slot = "9")]
		public virtual Rect[] DetectMultiScale(Mat image, double scaleFactor = 1.1, int minNeighbors = 3, HaarDetectionType flags = (HaarDetectionType)0, [Optional] Size? minSize, [Optional] Size? maxSize)
		{
			return null;
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x2220E7C", Offset = "0x2220E7C", VA = "0x2220E7C", Slot = "10")]
		public virtual Rect[] DetectMultiScale(Mat image, out int[] rejectLevels, out double[] levelWeights, double scaleFactor = 1.1, int minNeighbors = 3, HaarDetectionType flags = (HaarDetectionType)0, [Optional] Size? minSize, [Optional] Size? maxSize, bool outputRejectLevels = false)
		{
			return null;
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x2221374", Offset = "0x2221374", VA = "0x2221374")]
		public bool IsOldFormatCascade()
		{
			return default(bool);
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x2221430", Offset = "0x2221430", VA = "0x2221430", Slot = "11")]
		public virtual Size GetOriginalWindowSize()
		{
			return default(Size);
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x22214E0", Offset = "0x22214E0", VA = "0x22214E0")]
		public int GetFeatureType()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000111")]
	[Flags]
	public enum HaarDetectionType
	{
		[Token(Token = "0x400055A")]
		DoCannyPruning = 1,
		[Token(Token = "0x400055B")]
		ScaleImage = 2,
		[Token(Token = "0x400055C")]
		FindBiggestObject = 4,
		[Token(Token = "0x400055D")]
		DoRoughSearch = 8
	}
	[Token(Token = "0x2000112")]
	public class HOGDescriptor : DisposableCvObject
	{
		[Token(Token = "0x400055E")]
		public const int L2Hys = 0;

		[Token(Token = "0x400055F")]
		public const int DefaultNlevels = 64;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int SizeOf;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly float[] DefaultPeopleDetector;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly float[] DaimlerPeopleDetector;

		[Token(Token = "0x1700016F")]
		public Size WinSize
		{
			[Token(Token = "0x6001438")]
			[Address(RVA = "0x3EC0168", Offset = "0x3EC0168", VA = "0x3EC0168")]
			get
			{
				return default(Size);
			}
			[Token(Token = "0x6001439")]
			[Address(RVA = "0x3EC01D4", Offset = "0x3EC01D4", VA = "0x3EC01D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public Size BlockSize
		{
			[Token(Token = "0x600143A")]
			[Address(RVA = "0x3EC0250", Offset = "0x3EC0250", VA = "0x3EC0250")]
			get
			{
				return default(Size);
			}
			[Token(Token = "0x600143B")]
			[Address(RVA = "0x3EC02BC", Offset = "0x3EC02BC", VA = "0x3EC02BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public Size BlockStride
		{
			[Token(Token = "0x600143C")]
			[Address(RVA = "0x3EC0338", Offset = "0x3EC0338", VA = "0x3EC0338")]
			get
			{
				return default(Size);
			}
			[Token(Token = "0x600143D")]
			[Address(RVA = "0x3EC03A4", Offset = "0x3EC03A4", VA = "0x3EC03A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public Size CellSize
		{
			[Token(Token = "0x600143E")]
			[Address(RVA = "0x3EC0420", Offset = "0x3EC0420", VA = "0x3EC0420")]
			get
			{
				return default(Size);
			}
			[Token(Token = "0x600143F")]
			[Address(RVA = "0x3EC048C", Offset = "0x3EC048C", VA = "0x3EC048C")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public int Nbins
		{
			[Token(Token = "0x6001440")]
			[Address(RVA = "0x3EC0508", Offset = "0x3EC0508", VA = "0x3EC0508")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001441")]
			[Address(RVA = "0x3EC0574", Offset = "0x3EC0574", VA = "0x3EC0574")]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public int DerivAperture
		{
			[Token(Token = "0x6001442")]
			[Address(RVA = "0x3EC05F0", Offset = "0x3EC05F0", VA = "0x3EC05F0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001443")]
			[Address(RVA = "0x3EC065C", Offset = "0x3EC065C", VA = "0x3EC065C")]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public double WinSigma
		{
			[Token(Token = "0x6001444")]
			[Address(RVA = "0x3EC06D8", Offset = "0x3EC06D8", VA = "0x3EC06D8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001445")]
			[Address(RVA = "0x3EC0744", Offset = "0x3EC0744", VA = "0x3EC0744")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public HistogramNormType HistogramNormType
		{
			[Token(Token = "0x6001446")]
			[Address(RVA = "0x3EC07C0", Offset = "0x3EC07C0", VA = "0x3EC07C0")]
			get
			{
				return default(HistogramNormType);
			}
			[Token(Token = "0x6001447")]
			[Address(RVA = "0x3EC082C", Offset = "0x3EC082C", VA = "0x3EC082C")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public double L2HysThreshold
		{
			[Token(Token = "0x6001448")]
			[Address(RVA = "0x3EC08A8", Offset = "0x3EC08A8", VA = "0x3EC08A8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001449")]
			[Address(RVA = "0x3EC0914", Offset = "0x3EC0914", VA = "0x3EC0914")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public bool GammaCorrection
		{
			[Token(Token = "0x600144A")]
			[Address(RVA = "0x3EC0990", Offset = "0x3EC0990", VA = "0x3EC0990")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600144B")]
			[Address(RVA = "0x3EC0A08", Offset = "0x3EC0A08", VA = "0x3EC0A08")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public int NLevels
		{
			[Token(Token = "0x600144C")]
			[Address(RVA = "0x3EC0A88", Offset = "0x3EC0A88", VA = "0x3EC0A88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600144D")]
			[Address(RVA = "0x3EC0AF4", Offset = "0x3EC0AF4", VA = "0x3EC0AF4")]
			set
			{
			}
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x3EBFD68", Offset = "0x3EBFD68", VA = "0x3EBFD68")]
		public HOGDescriptor()
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x3EBFDE0", Offset = "0x3EBFDE0", VA = "0x3EBFDE0")]
		public HOGDescriptor([Optional] Size? winSize, [Optional] Size? blockSize, [Optional] Size? blockStride, [Optional] Size? cellSize, int nbins = 9, int derivAperture = 1, double winSigma = -1.0, HistogramNormType histogramNormType = HistogramNormType.L2Hys, double l2HysThreshold = 0.2, bool gammaCorrection = true, int nlevels = 64)
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x3EBFFB8", Offset = "0x3EBFFB8", VA = "0x3EBFFB8")]
		public HOGDescriptor(string fileName)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x3EC0040", Offset = "0x3EC0040", VA = "0x3EC0040")]
		public HOGDescriptor(IntPtr ptr)
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x3EC006C", Offset = "0x3EC006C", VA = "0x3EC006C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x3EC0B70", Offset = "0x3EC0B70", VA = "0x3EC0B70")]
		public static float[] GetDefaultPeopleDetector()
		{
			return null;
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x3EC0BD8", Offset = "0x3EC0BD8", VA = "0x3EC0BD8")]
		public static float[] GetDaimlerPeopleDetector()
		{
			return null;
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x3EC0C40", Offset = "0x3EC0C40", VA = "0x3EC0C40", Slot = "8")]
		public virtual void SetSVMDetector(float[] svmDetector)
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x3EC0DD8", Offset = "0x3EC0DD8", VA = "0x3EC0DD8", Slot = "9")]
		public virtual bool Load(string fileName, [Optional] string objName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x3EC0EA0", Offset = "0x3EC0EA0", VA = "0x3EC0EA0", Slot = "10")]
		public virtual void Save(string fileName, [Optional] string objName)
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x3EC0F68", Offset = "0x3EC0F68", VA = "0x3EC0F68")]
		public int GetDescriptorSize()
		{
			return default(int);
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x3EC1038", Offset = "0x3EC1038", VA = "0x3EC1038")]
		public bool CheckDetectorSize()
		{
			return default(bool);
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x3EC10F4", Offset = "0x3EC10F4", VA = "0x3EC10F4")]
		public double GetWinSigma()
		{
			return default(double);
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x3EC11A4", Offset = "0x3EC11A4", VA = "0x3EC11A4", Slot = "11")]
		public virtual float[] Compute(Mat img, [Optional] Size? winStride, [Optional] Size? padding, [Optional] Point[] locations)
		{
			return null;
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x3EC141C", Offset = "0x3EC141C", VA = "0x3EC141C", Slot = "12")]
		public virtual Point[] Detect(Mat img, double hitThreshold = 0.0, [Optional] Size? winStride, [Optional] Size? padding, [Optional] Point[] searchLocations)
		{
			return null;
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x3EC16AC", Offset = "0x3EC16AC", VA = "0x3EC16AC", Slot = "13")]
		public virtual Point[] Detect(Mat img, out double[] weights, double hitThreshold = 0.0, [Optional] Size? winStride, [Optional] Size? padding, [Optional] Point[] searchLocations)
		{
			return null;
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0x3EC1A68", Offset = "0x3EC1A68", VA = "0x3EC1A68", Slot = "14")]
		public virtual Rect[] DetectMultiScale(Mat img, double hitThreshold = 0.0, [Optional] Size? winStride, [Optional] Size? padding, double scale = 1.05, int groupThreshold = 2)
		{
			return null;
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x3EC1CEC", Offset = "0x3EC1CEC", VA = "0x3EC1CEC", Slot = "15")]
		public virtual Rect[] DetectMultiScale(Mat img, out double[] foundWeights, double hitThreshold = 0.0, [Optional] Size? winStride, [Optional] Size? padding, double scale = 1.05, int groupThreshold = 2)
		{
			return null;
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x3EC2084", Offset = "0x3EC2084", VA = "0x3EC2084", Slot = "16")]
		public virtual void ComputeGradient(Mat img, Mat grad, Mat angleOfs, [Optional] Size? paddingTL, [Optional] Size? paddingBR)
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0x3EC225C", Offset = "0x3EC225C", VA = "0x3EC225C")]
		public void DetectROI(Mat img, Point[] locations, out Point[] foundLocations, out double[] confidences, double hitThreshold = 0.0, [Optional] Size? winStride, [Optional] Size? padding)
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x3EC262C", Offset = "0x3EC262C", VA = "0x3EC262C")]
		public void DetectMultiScaleROI(Mat img, out Rect[] foundLocations, out DetectionROI[] locations, double hitThreshold = 0.0, int groupThreshold = 0)
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0x3EC2D64", Offset = "0x3EC2D64", VA = "0x3EC2D64")]
		public void ReadALTModel(string modelFile)
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x3EC2E24", Offset = "0x3EC2E24", VA = "0x3EC2E24")]
		public void GroupRectangles(out Rect[] rectList, out double[] weights, int groupThreshold, double eps)
		{
		}
	}
	[Token(Token = "0x2000113")]
	public class DetectionROI
	{
		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBC98", Offset = "0x1DDBC98")]
		private double <Scale>k__BackingField;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBCA8", Offset = "0x1DDBCA8")]
		private Point[] <Locations>k__BackingField;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBCB8", Offset = "0x1DDBCB8")]
		private double[] <Confidences>k__BackingField;

		[Token(Token = "0x1700017A")]
		public double Scale
		{
			[Token(Token = "0x6001461")]
			[Address(RVA = "0x3EB0270", Offset = "0x3EB0270", VA = "0x3EB0270")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB48", Offset = "0x1DDCB48")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001462")]
			[Address(RVA = "0x3EB0278", Offset = "0x3EB0278", VA = "0x3EB0278")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB58", Offset = "0x1DDCB58")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public Point[] Locations
		{
			[Token(Token = "0x6001463")]
			[Address(RVA = "0x3EB0280", Offset = "0x3EB0280", VA = "0x3EB0280")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB68", Offset = "0x1DDCB68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001464")]
			[Address(RVA = "0x3EB0288", Offset = "0x3EB0288", VA = "0x3EB0288")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB78", Offset = "0x1DDCB78")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public double[] Confidences
		{
			[Token(Token = "0x6001465")]
			[Address(RVA = "0x3EB0290", Offset = "0x3EB0290", VA = "0x3EB0290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB88", Offset = "0x1DDCB88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001466")]
			[Address(RVA = "0x3EB0298", Offset = "0x3EB0298", VA = "0x3EB0298")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCB98", Offset = "0x1DDCB98")]
			set
			{
			}
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x3EB02A0", Offset = "0x3EB02A0", VA = "0x3EB02A0")]
		public DetectionROI()
		{
		}
	}
	[Token(Token = "0x2000114")]
	public enum HistogramNormType
	{
		[Token(Token = "0x4000568")]
		L2Hys
	}
	[Token(Token = "0x2000115")]
	public static class SimilarRects
	{
		[Token(Token = "0x6001468")]
		[Address(RVA = "0x4277398", Offset = "0x4277398", VA = "0x4277398")]
		public static bool Compare(double eps, Rect r1, Rect r2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000116")]
	public abstract class CalibrateCRF : Algorithm
	{
		[Token(Token = "0x6001469")]
		[Address(RVA = "0x22201D4", Offset = "0x22201D4", VA = "0x22201D4", Slot = "13")]
		public virtual void Process(IEnumerable<Mat> src, OutputArray dst, IEnumerable<float> times)
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x22203B4", Offset = "0x22203B4", VA = "0x22203B4")]
		protected CalibrateCRF()
		{
		}
	}
	[Token(Token = "0x2000117")]
	public class CalibrateDebevec : CalibrateCRF
	{
		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<CalibrateDebevec> ptrObj;

		[Token(Token = "0x600146B")]
		[Address(RVA = "0x22203BC", Offset = "0x22203BC", VA = "0x22203BC")]
		protected CalibrateDebevec(IntPtr p)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x2220468", Offset = "0x2220468", VA = "0x2220468")]
		public static CalibrateDebevec Create(int samples = 70, float lambda = 10f, bool random = false)
		{
			return null;
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x2220520", Offset = "0x2220520", VA = "0x2220520", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000118")]
	public enum EdgePreservingMethods
	{
		[Token(Token = "0x400056C")]
		RecursFilter = 1,
		[Token(Token = "0x400056D")]
		NormconvFilter
	}
	[Token(Token = "0x2000119")]
	public enum InpaintMethod
	{
		[Token(Token = "0x400056F")]
		NS,
		[Token(Token = "0x4000570")]
		Telea
	}
	[Token(Token = "0x200011A")]
	public enum SeamlessCloneMethods
	{
		[Token(Token = "0x4000572")]
		NormalClone = 1,
		[Token(Token = "0x4000573")]
		MixedClone,
		[Token(Token = "0x4000574")]
		MonochromeTransfer
	}
	[Token(Token = "0x200011B")]
	public class HausdorffDistanceExtractor : ShapeDistanceExtractor
	{
		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<HausdorffDistanceExtractor> ptrObj;

		[Token(Token = "0x1700017D")]
		public DistanceTypes DistanceFlag
		{
			[Token(Token = "0x6001471")]
			[Address(RVA = "0x304F310", Offset = "0x304F310", VA = "0x304F310")]
			get
			{
				return default(DistanceTypes);
			}
			[Token(Token = "0x6001472")]
			[Address(RVA = "0x304F3E4", Offset = "0x304F3E4", VA = "0x304F3E4")]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public float RankProportion
		{
			[Token(Token = "0x6001473")]
			[Address(RVA = "0x304F4C8", Offset = "0x304F4C8", VA = "0x304F4C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001474")]
			[Address(RVA = "0x304F59C", Offset = "0x304F59C", VA = "0x304F59C")]
			set
			{
			}
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x304F0E4", Offset = "0x304F0E4", VA = "0x304F0E4")]
		protected HausdorffDistanceExtractor(IntPtr p)
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x304F190", Offset = "0x304F190", VA = "0x304F190")]
		public static HausdorffDistanceExtractor Create(DistanceTypes distanceFlag = DistanceTypes.L2, float rankProp = 0.6f)
		{
			return null;
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x304F234", Offset = "0x304F234", VA = "0x304F234", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200011C")]
	public class ShapeContextDistanceExtractor : ShapeDistanceExtractor
	{
		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<ShapeContextDistanceExtractor> ptrObj;

		[Token(Token = "0x1700017F")]
		public int AngularBins
		{
			[Token(Token = "0x6001478")]
			[Address(RVA = "0x427591C", Offset = "0x427591C", VA = "0x427591C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001479")]
			[Address(RVA = "0x42759F0", Offset = "0x42759F0", VA = "0x42759F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public int RadialBins
		{
			[Token(Token = "0x600147A")]
			[Address(RVA = "0x4275AD4", Offset = "0x4275AD4", VA = "0x4275AD4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600147B")]
			[Address(RVA = "0x4275BA8", Offset = "0x4275BA8", VA = "0x4275BA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public float InnerRadius
		{
			[Token(Token = "0x600147C")]
			[Address(RVA = "0x4275C8C", Offset = "0x4275C8C", VA = "0x4275C8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600147D")]
			[Address(RVA = "0x4275D60", Offset = "0x4275D60", VA = "0x4275D60")]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public float OuterRadius
		{
			[Token(Token = "0x600147E")]
			[Address(RVA = "0x4275E44", Offset = "0x4275E44", VA = "0x4275E44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600147F")]
			[Address(RVA = "0x4275F18", Offset = "0x4275F18", VA = "0x4275F18")]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public bool RotationInvariant
		{
			[Token(Token = "0x6001480")]
			[Address(RVA = "0x4275FFC", Offset = "0x4275FFC", VA = "0x4275FFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001481")]
			[Address(RVA = "0x42760DC", Offset = "0x42760DC", VA = "0x42760DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public float ShapeContextWeight
		{
			[Token(Token = "0x6001482")]
			[Address(RVA = "0x42761C4", Offset = "0x42761C4", VA = "0x42761C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001483")]
			[Address(RVA = "0x4276298", Offset = "0x4276298", VA = "0x4276298")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public float ImageAppearanceWeight
		{
			[Token(Token = "0x6001484")]
			[Address(RVA = "0x427637C", Offset = "0x427637C", VA = "0x427637C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001485")]
			[Address(RVA = "0x4276450", Offset = "0x4276450", VA = "0x4276450")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public float BendingEnergyWeight
		{
			[Token(Token = "0x6001486")]
			[Address(RVA = "0x4276534", Offset = "0x4276534", VA = "0x4276534")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001487")]
			[Address(RVA = "0x4276608", Offset = "0x4276608", VA = "0x4276608")]
			set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public int Iterations
		{
			[Token(Token = "0x6001488")]
			[Address(RVA = "0x42766EC", Offset = "0x42766EC", VA = "0x42766EC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001489")]
			[Address(RVA = "0x42767C0", Offset = "0x42767C0", VA = "0x42767C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public float StdDev
		{
			[Token(Token = "0x600148A")]
			[Address(RVA = "0x42768A4", Offset = "0x42768A4", VA = "0x42768A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600148B")]
			[Address(RVA = "0x4276978", Offset = "0x4276978", VA = "0x4276978")]
			set
			{
			}
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x42756C8", Offset = "0x42756C8", VA = "0x42756C8")]
		protected ShapeContextDistanceExtractor(IntPtr p)
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x427577C", Offset = "0x427577C", VA = "0x427577C")]
		public static ShapeContextDistanceExtractor Create(int nAngularBins = 12, int nRadialBins = 4, float innerRadius = 0.2f, float outerRadius = 2f, int iterations = 3)
		{
			return null;
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x4275840", Offset = "0x4275840", VA = "0x4275840", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x4276A5C", Offset = "0x4276A5C", VA = "0x4276A5C")]
		public void SetImages(InputArray image1, InputArray image2)
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x4276C24", Offset = "0x4276C24", VA = "0x4276C24")]
		public void GetImages(OutputArray image1, OutputArray image2)
		{
		}
	}
	[Token(Token = "0x200011D")]
	public abstract class ShapeDistanceExtractor : Algorithm
	{
		[Token(Token = "0x600148E")]
		[Address(RVA = "0x4276DE4", Offset = "0x4276DE4", VA = "0x4276DE4", Slot = "13")]
		public virtual float ComputeDistance(InputArray contour1, InputArray contour2)
		{
			return default(float);
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0x4275774", Offset = "0x4275774", VA = "0x4275774")]
		protected ShapeDistanceExtractor()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public sealed class Stitcher : DisposableCvObject
	{
		[Token(Token = "0x20001C8")]
		public enum Status
		{
			[Token(Token = "0x400076E")]
			OK,
			[Token(Token = "0x400076F")]
			ErrorNeedMoreImgs
		}

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<Stitcher> ptrObj;

		[Token(Token = "0x400057B")]
		public const int ORIG_RESOL = -1;

		[Token(Token = "0x17000189")]
		public double RegistrationResol
		{
			[Token(Token = "0x6001493")]
			[Address(RVA = "0x427BBD8", Offset = "0x427BBD8", VA = "0x427BBD8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x427BC44", Offset = "0x427BC44", VA = "0x427BC44")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public double SeamEstimationResol
		{
			[Token(Token = "0x6001495")]
			[Address(RVA = "0x427BCC0", Offset = "0x427BCC0", VA = "0x427BCC0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001496")]
			[Address(RVA = "0x427BD2C", Offset = "0x427BD2C", VA = "0x427BD2C")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public double CompositingResol
		{
			[Token(Token = "0x6001497")]
			[Address(RVA = "0x427BDA8", Offset = "0x427BDA8", VA = "0x427BDA8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001498")]
			[Address(RVA = "0x427BE14", Offset = "0x427BE14", VA = "0x427BE14")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public double PanoConfidenceThresh
		{
			[Token(Token = "0x6001499")]
			[Address(RVA = "0x427BE90", Offset = "0x427BE90", VA = "0x427BE90")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600149A")]
			[Address(RVA = "0x427BEFC", Offset = "0x427BEFC", VA = "0x427BEFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public bool WaveCorrection
		{
			[Token(Token = "0x600149B")]
			[Address(RVA = "0x427BF78", Offset = "0x427BF78", VA = "0x427BF78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600149C")]
			[Address(RVA = "0x427BFF0", Offset = "0x427BFF0", VA = "0x427BFF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public WaveCorrectKind WaveCorrectKind
		{
			[Token(Token = "0x600149D")]
			[Address(RVA = "0x427C084", Offset = "0x427C084", VA = "0x427C084")]
			get
			{
				return default(WaveCorrectKind);
			}
			[Token(Token = "0x600149E")]
			[Address(RVA = "0x427C0F0", Offset = "0x427C0F0", VA = "0x427C0F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public FeaturesFinder FeaturesFinder
		{
			[Token(Token = "0x600149F")]
			[Address(RVA = "0x427C16C", Offset = "0x427C16C", VA = "0x427C16C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A0")]
			[Address(RVA = "0x427C1CC", Offset = "0x427C1CC", VA = "0x427C1CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public FeaturesMatcher FeaturesMatcher
		{
			[Token(Token = "0x60014A1")]
			[Address(RVA = "0x427C22C", Offset = "0x427C22C", VA = "0x427C22C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A2")]
			[Address(RVA = "0x427C28C", Offset = "0x427C28C", VA = "0x427C28C")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public Mat MatchingMask
		{
			[Token(Token = "0x60014A3")]
			[Address(RVA = "0x427C2EC", Offset = "0x427C2EC", VA = "0x427C2EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A4")]
			[Address(RVA = "0x427C34C", Offset = "0x427C34C", VA = "0x427C34C")]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public BundleAdjusterBase BundleAdjuster
		{
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0x427C3AC", Offset = "0x427C3AC", VA = "0x427C3AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A6")]
			[Address(RVA = "0x427C40C", Offset = "0x427C40C", VA = "0x427C40C")]
			set
			{
			}
		}

		[Token(Token = "0x17000193")]
		public WarperCreator Warper
		{
			[Token(Token = "0x60014A7")]
			[Address(RVA = "0x427C46C", Offset = "0x427C46C", VA = "0x427C46C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A8")]
			[Address(RVA = "0x427C4CC", Offset = "0x427C4CC", VA = "0x427C4CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000194")]
		public ExposureCompensator ExposureCompensator
		{
			[Token(Token = "0x60014A9")]
			[Address(RVA = "0x427C52C", Offset = "0x427C52C", VA = "0x427C52C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014AA")]
			[Address(RVA = "0x427C58C", Offset = "0x427C58C", VA = "0x427C58C")]
			set
			{
			}
		}

		[Token(Token = "0x17000195")]
		public SeamFinder SeamFinder
		{
			[Token(Token = "0x60014AB")]
			[Address(RVA = "0x427C5EC", Offset = "0x427C5EC", VA = "0x427C5EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014AC")]
			[Address(RVA = "0x427C64C", Offset = "0x427C64C", VA = "0x427C64C")]
			set
			{
			}
		}

		[Token(Token = "0x17000196")]
		public Blender Blender
		{
			[Token(Token = "0x60014AD")]
			[Address(RVA = "0x427C6AC", Offset = "0x427C6AC", VA = "0x427C6AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014AE")]
			[Address(RVA = "0x427C70C", Offset = "0x427C70C", VA = "0x427C70C")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public int[] Component
		{
			[Token(Token = "0x60014AF")]
			[Address(RVA = "0x427C76C", Offset = "0x427C76C", VA = "0x427C76C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000198")]
		public CameraParams[] Cameras
		{
			[Token(Token = "0x60014B0")]
			[Address(RVA = "0x427C85C", Offset = "0x427C85C", VA = "0x427C85C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000199")]
		public double WorkScale
		{
			[Token(Token = "0x60014B1")]
			[Address(RVA = "0x427C8BC", Offset = "0x427C8BC", VA = "0x427C8BC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0x427BA34", Offset = "0x427BA34", VA = "0x427BA34")]
		private Stitcher(IntPtr ptr)
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0x427BA60", Offset = "0x427BA60", VA = "0x427BA60")]
		public static Stitcher Create(bool tryUseGpu = false)
		{
			return null;
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0x427BAFC", Offset = "0x427BAFC", VA = "0x427BAFC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x427C928", Offset = "0x427C928", VA = "0x427C928")]
		public Status EstimateTransform(InputArray images)
		{
			return default(Status);
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x427CA04", Offset = "0x427CA04", VA = "0x427CA04")]
		public Status EstimateTransform(InputArray images, Rect[][] rois)
		{
			return default(Status);
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x427CC34", Offset = "0x427CC34", VA = "0x427CC34")]
		public Status EstimateTransform(IEnumerable<Mat> images)
		{
			return default(Status);
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x427CD0C", Offset = "0x427CD0C", VA = "0x427CD0C")]
		public Status EstimateTransform(IEnumerable<Mat> images, Rect[][] rois)
		{
			return default(Status);
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x427CF40", Offset = "0x427CF40", VA = "0x427CF40")]
		public Status ComposePanorama(OutputArray pano)
		{
			return default(Status);
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x427D040", Offset = "0x427D040", VA = "0x427D040")]
		public Status ComposePanorama(InputArray images, OutputArray pano)
		{
			return default(Status);
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x427D184", Offset = "0x427D184", VA = "0x427D184")]
		public Status ComposePanorama(IEnumerable<Mat> images, OutputArray pano)
		{
			return default(Status);
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x427D2C8", Offset = "0x427D2C8", VA = "0x427D2C8")]
		public Status Stitch(InputArray images, OutputArray pano)
		{
			return default(Status);
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x427D40C", Offset = "0x427D40C", VA = "0x427D40C")]
		public Status Stitch(IEnumerable<Mat> images, OutputArray pano)
		{
			return default(Status);
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x427D550", Offset = "0x427D550", VA = "0x427D550")]
		public Status Stitch(InputArray images, Rect[][] rois, OutputArray pano)
		{
			return default(Status);
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x427D7EC", Offset = "0x427D7EC", VA = "0x427D7EC")]
		public Status Stitch(IEnumerable<Mat> images, Rect[][] rois, OutputArray pano)
		{
			return default(Status);
		}
	}
	[Token(Token = "0x200011F")]
	public abstract class DenseOpticalFlowExt : Algorithm
	{
		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x3EADB44", Offset = "0x3EADB44", VA = "0x3EADB44")]
		protected DenseOpticalFlowExt()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x3EADB4C", Offset = "0x3EADB4C", VA = "0x3EADB4C")]
		public static DenseOpticalFlowExt CreateFarneback()
		{
			return null;
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x3EADCB4", Offset = "0x3EADCB4", VA = "0x3EADCB4")]
		public static DenseOpticalFlowExt CreateFarneback_CUDA()
		{
			return null;
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x3EADD18", Offset = "0x3EADD18", VA = "0x3EADD18")]
		public static DenseOpticalFlowExt CreateFarneback_OCL()
		{
			return null;
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x3EADD78", Offset = "0x3EADD78", VA = "0x3EADD78")]
		public static DenseOpticalFlowExt CreateSimple()
		{
			return null;
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x3EADDD8", Offset = "0x3EADDD8", VA = "0x3EADDD8")]
		public static DenseOpticalFlowExt CreateDualTVL1()
		{
			return null;
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0x3EADE3C", Offset = "0x3EADE3C", VA = "0x3EADE3C")]
		public static DenseOpticalFlowExt CreateDualTVL1_CUDA()
		{
			return null;
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x3EADEA0", Offset = "0x3EADEA0", VA = "0x3EADEA0")]
		public static DenseOpticalFlowExt CreateDualTVL1_OCL()
		{
			return null;
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x3EADF00", Offset = "0x3EADF00", VA = "0x3EADF00")]
		public static DenseOpticalFlowExt CreateBrox_CUDA()
		{
			return null;
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x3EADF64", Offset = "0x3EADF64", VA = "0x3EADF64")]
		public static DenseOpticalFlowExt CreatePyrLK_CUDA()
		{
			return null;
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x3EADFC8", Offset = "0x3EADFC8", VA = "0x3EADFC8")]
		public static DenseOpticalFlowExt CreatePyrLK_OCL()
		{
			return null;
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x3EAE028", Offset = "0x3EAE028", VA = "0x3EAE028", Slot = "13")]
		public virtual void CollectGarbage()
		{
		}

		[Token(Token = "0x60014C9")]
		public abstract void Calc(InputArray frame0, InputArray frame1, OutputArray flow1, [Optional] OutputArray flow2);
	}
	[Token(Token = "0x2000120")]
	internal sealed class DenseOpticalFlowExtImpl : DenseOpticalFlowExt
	{
		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<DenseOpticalFlowExt> detectorPtr;

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0x3EAE02C", Offset = "0x3EAE02C", VA = "0x3EAE02C")]
		private DenseOpticalFlowExtImpl()
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x3EADBB0", Offset = "0x3EADBB0", VA = "0x3EADBB0")]
		internal static DenseOpticalFlowExtImpl FromPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x3EAE08C", Offset = "0x3EAE08C", VA = "0x3EAE08C")]
		internal static DenseOpticalFlowExtImpl FromRawPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x3EAE154", Offset = "0x3EAE154", VA = "0x3EAE154", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x3EAE364", Offset = "0x3EAE364", VA = "0x3EAE364", Slot = "14")]
		public override void Calc(InputArray frame0, InputArray frame1, OutputArray flow1, [Optional] OutputArray flow2)
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x3EAE520", Offset = "0x3EAE520", VA = "0x3EAE520", Slot = "13")]
		public override void CollectGarbage()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public abstract class FrameSource : DisposableCvObject
	{
		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x3EBBB10", Offset = "0x3EBBB10", VA = "0x3EBBB10")]
		protected FrameSource()
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x3EBBB18", Offset = "0x3EBBB18", VA = "0x3EBBB18")]
		public static FrameSource CreateEmptySource()
		{
			return null;
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x3EBBC74", Offset = "0x3EBBC74", VA = "0x3EBBC74")]
		public static FrameSource CreateVideoSource(string fileName)
		{
			return null;
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x3EBBD84", Offset = "0x3EBBD84", VA = "0x3EBBD84")]
		public static FrameSource CreateVideoSourceCuda(string fileName)
		{
			return null;
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x3EBBE94", Offset = "0x3EBBE94", VA = "0x3EBBE94")]
		public static FrameSource CreateCameraSource(int deviceId)
		{
			return null;
		}

		[Token(Token = "0x60014D5")]
		public abstract void NextFrame(OutputArray frame);

		[Token(Token = "0x60014D6")]
		public abstract void Reset();
	}
	[Token(Token = "0x2000122")]
	internal sealed class FrameSourceImpl : FrameSource
	{
		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<FrameSource> ptrObj;

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x3EBBF00", Offset = "0x3EBBF00", VA = "0x3EBBF00")]
		private FrameSourceImpl()
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x3EBBB7C", Offset = "0x3EBBB7C", VA = "0x3EBBB7C")]
		internal static FrameSource FromPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x3EBBF60", Offset = "0x3EBBF60", VA = "0x3EBBF60")]
		internal static FrameSource FromRawPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0x3EBC028", Offset = "0x3EBC028", VA = "0x3EBC028", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x3EBC100", Offset = "0x3EBC100", VA = "0x3EBC100", Slot = "8")]
		public override void NextFrame(OutputArray frame)
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0x3EBC1E8", Offset = "0x3EBC1E8", VA = "0x3EBC1E8", Slot = "9")]
		public override void Reset()
		{
		}
	}
	[Token(Token = "0x2000123")]
	public abstract class SuperResolution : Algorithm
	{
		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected FrameSource frameSource;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool firstCall;

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0x40555B0", Offset = "0x40555B0", VA = "0x40555B0")]
		protected SuperResolution()
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x40555EC", Offset = "0x40555EC", VA = "0x40555EC")]
		public static SuperResolution CreateBTVL1()
		{
			return null;
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x4055754", Offset = "0x4055754", VA = "0x4055754")]
		public static SuperResolution CreateBTVL1_CUDA()
		{
			return null;
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x40557B8", Offset = "0x40557B8", VA = "0x40557B8")]
		public static SuperResolution CreateBTVL1_OCL()
		{
			return null;
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0x4055818", Offset = "0x4055818", VA = "0x4055818", Slot = "13")]
		public virtual void SetInput(FrameSource fs)
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x4055820", Offset = "0x4055820", VA = "0x4055820", Slot = "14")]
		public virtual void NextFrame(OutputArray frame)
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x405587C", Offset = "0x405587C", VA = "0x405587C", Slot = "15")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x40558B8", Offset = "0x40558B8", VA = "0x40558B8", Slot = "16")]
		public virtual void CollectGarbage()
		{
		}

		[Token(Token = "0x60014E5")]
		protected abstract void InitImpl(FrameSource fs);

		[Token(Token = "0x60014E6")]
		protected abstract void ProcessImpl(FrameSource fs, OutputArray output);
	}
	[Token(Token = "0x2000124")]
	internal sealed class SuperResolutionImpl : SuperResolution
	{
		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool disposed;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Ptr<SuperResolution> detectorPtr;

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x40558BC", Offset = "0x40558BC", VA = "0x40558BC")]
		private SuperResolutionImpl()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x4055650", Offset = "0x4055650", VA = "0x4055650")]
		internal static SuperResolutionImpl FromPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x4055934", Offset = "0x4055934", VA = "0x4055934")]
		internal static SuperResolutionImpl FromRawPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x40559FC", Offset = "0x40559FC", VA = "0x40559FC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0x4055AE0", Offset = "0x4055AE0", VA = "0x4055AE0", Slot = "13")]
		public override void SetInput(FrameSource fs)
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x4055BBC", Offset = "0x4055BBC", VA = "0x4055BBC", Slot = "14")]
		public override void NextFrame(OutputArray frame)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0x4055CB0", Offset = "0x4055CB0", VA = "0x4055CB0", Slot = "15")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x4055D28", Offset = "0x4055D28", VA = "0x4055D28", Slot = "16")]
		public override void CollectGarbage()
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0x4055DA0", Offset = "0x4055DA0", VA = "0x4055DA0", Slot = "17")]
		protected override void InitImpl(FrameSource fs)
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x4055DA4", Offset = "0x4055DA4", VA = "0x4055DA4", Slot = "18")]
		protected override void ProcessImpl(FrameSource fs, OutputArray output)
		{
		}
	}
	[Token(Token = "0x2000125")]
	public class ERStat : DisposableCvObject
	{
		[Token(Token = "0x1700019A")]
		public Rect Rect
		{
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0x3EB1FB4", Offset = "0x3EB1FB4", VA = "0x3EB1FB4")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x1700019B")]
		public double Probability
		{
			[Token(Token = "0x60014F6")]
			[Address(RVA = "0x3EB2038", Offset = "0x3EB2038", VA = "0x3EB2038")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0x3EB1DF4", Offset = "0x3EB1DF4", VA = "0x3EB1DF4")]
		public ERStat()
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x3EB1E6C", Offset = "0x3EB1E6C", VA = "0x3EB1E6C")]
		public ERStat(IntPtr refPtr)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x3EB1EF4", Offset = "0x3EB1EF4", VA = "0x3EB1EF4")]
		public ERStat(ERStat refObj)
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x3EB1F2C", Offset = "0x3EB1F2C", VA = "0x3EB1F2C", Slot = "7")]
		protected override void DisposeUnmanaged()
		{
		}
	}
	[Token(Token = "0x2000126")]
	public class ERFilter : Algorithm
	{
		[Token(Token = "0x20001C9")]
		public enum Mode
		{
			[Token(Token = "0x4000771")]
			NM_RGBLGrad,
			[Token(Token = "0x4000772")]
			NM_IHSGrad
		}

		[Token(Token = "0x20001CA")]
		public class Callback : DisposableCvObject
		{
			[Token(Token = "0x600190F")]
			[Address(RVA = "0x3EA9E9C", Offset = "0x3EA9E9C", VA = "0x3EA9E9C")]
			internal Callback(IntPtr obj)
			{
			}

			[Token(Token = "0x6001910")]
			[Address(RVA = "0x3EB1CDC", Offset = "0x3EB1CDC", VA = "0x3EB1CDC")]
			public double Eval(ERStat stat)
			{
				return default(double);
			}

			[Token(Token = "0x6001911")]
			[Address(RVA = "0x3EB1D6C", Offset = "0x3EB1D6C", VA = "0x3EB1D6C", Slot = "7")]
			protected override void DisposeUnmanaged()
			{
			}
		}

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected object[] preserved;

		[Token(Token = "0x1700019C")]
		public int NumRejected
		{
			[Token(Token = "0x60014F9")]
			[Address(RVA = "0x3EB18F8", Offset = "0x3EB18F8", VA = "0x3EB18F8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0x3EAA054", Offset = "0x3EAA054", VA = "0x3EAA054")]
		internal ERFilter(IntPtr obj, object callback)
		{
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0x3EB1764", Offset = "0x3EB1764", VA = "0x3EB1764")]
		public ERStat[] Run(InputArray image, [Optional] ERStat[] regions)
		{
			return null;
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0x3EB1964", Offset = "0x3EB1964", VA = "0x3EB1964")]
		public void SetCallback(Callback cb)
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0x3EB19F4", Offset = "0x3EB19F4", VA = "0x3EB19F4")]
		public void SetThresholdDelta(int thresholdDelta)
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0x3EB1A70", Offset = "0x3EB1A70", VA = "0x3EB1A70")]
		public void SetMinArea(float minArea)
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0x3EB1AEC", Offset = "0x3EB1AEC", VA = "0x3EB1AEC")]
		public void SetMaxArea(float maxArea)
		{
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0x3EB1B68", Offset = "0x3EB1B68", VA = "0x3EB1B68")]
		public void SetMinProbability(float minProbability)
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0x3EB1BE4", Offset = "0x3EB1BE4", VA = "0x3EB1BE4")]
		public void SetMinProbabilityDiff(float minProbabilityDiff)
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0x3EB1C60", Offset = "0x3EB1C60", VA = "0x3EB1C60")]
		public void SetNonMaxSuppression(bool nonMaxSuppression)
		{
		}
	}
	[Token(Token = "0x2000127")]
	public static class CvText
	{
		[Token(Token = "0x20001CB")]
		public enum GroupingModes
		{
			[Token(Token = "0x4000774")]
			OrientationHorizontal,
			[Token(Token = "0x4000775")]
			OrientationAny
		}

		[Token(Token = "0x20001CC")]
		public enum OCRClassifierType
		{
			[Token(Token = "0x4000777")]
			KNN,
			[Token(Token = "0x4000778")]
			CNN
		}

		[Token(Token = "0x20001CD")]
		public enum OCRLevel
		{
			[Token(Token = "0x400077A")]
			Word,
			[Token(Token = "0x400077B")]
			TextLine
		}

		[Token(Token = "0x20001CE")]
		public enum OCRDecoderMode
		{
			[Token(Token = "0x400077D")]
			Viterbi
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0x3EA8A7C", Offset = "0x3EA8A7C", VA = "0x3EA8A7C")]
		public static void MSERsToERStats(InputArray image, Point[][] contours, out ERStat[][] regions)
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0x3EA8D1C", Offset = "0x3EA8D1C", VA = "0x3EA8D1C")]
		public static Mat[] ComputeNMChannels(Mat src, ERFilter.Mode mode)
		{
			return null;
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0x3EA8F84", Offset = "0x3EA8F84", VA = "0x3EA8F84")]
		public static Mat CreateOCRHMMTransitionsTable(string vocabulary, IList<string> lexicon)
		{
			return null;
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0x3EA91E4", Offset = "0x3EA91E4", VA = "0x3EA91E4")]
		public static void DetectRegions(InputArray image, ERFilter er_filter1, ERFilter er_filter2, out Point[][] regions)
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0x3EA93BC", Offset = "0x3EA93BC", VA = "0x3EA93BC")]
		public static void ErGrouping(Mat image, Mat[] channels, ERStat[][] regions, out Vec2i[][] groups, out Rect[] groups_rects, GroupingModes method, [Optional] string filename, float minProbablity = 0.5f)
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0x3EA9978", Offset = "0x3EA9978", VA = "0x3EA9978")]
		public static void ErGrouping(Mat image, Mat[] channels, Point[][] regions, out Rect[] groups_rects, GroupingModes method, [Optional] string filename, float minProbablity = 0.5f)
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0x3EA9E04", Offset = "0x3EA9E04", VA = "0x3EA9E04")]
		public static ERFilter.Callback LoadClassifierNM1(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0x3EA9EC8", Offset = "0x3EA9EC8", VA = "0x3EA9EC8")]
		public static ERFilter.Callback LoadClassifierNM2(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x3EA9F60", Offset = "0x3EA9F60", VA = "0x3EA9F60")]
		public static ERFilter CreateERFilterNM1(ERFilter.Callback cb, int thresholdDelta = 1, float minArea = 0.00025f, float maxArea = 0.13f, float minProbability = 0.4f, bool nonMaxSuppression = true, float minProbabilityDiff = 0.1f)
		{
			return null;
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x3EAA128", Offset = "0x3EAA128", VA = "0x3EAA128")]
		public static ERFilter CreateERFilterNM2(ERFilter.Callback cb, float minProbability = 0.3f)
		{
			return null;
		}
	}
	[Token(Token = "0x2000128")]
	public abstract class BaseOCR : DisposableCvObject
	{
		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected object[] preserved;

		[Token(Token = "0x600150B")]
		public abstract string Run(Mat image, out Rect[] rects, out string[] texts, out float[] confidences, CvText.OCRLevel component_level);

		[Token(Token = "0x600150C")]
		public abstract string Run(Mat image, Mat mask, out Rect[] rects, out string[] texts, out float[] confidences, CvText.OCRLevel component_level);

		[Token(Token = "0x600150D")]
		[Address(RVA = "0x221F938", Offset = "0x221F938", VA = "0x221F938")]
		protected BaseOCR()
		{
		}
	}
	[Token(Token = "0x2000129")]
	public sealed class OCRHMMDecoder : BaseOCR
	{
		[Token(Token = "0x20001CF")]
		public class ClassifierCallback : DisposableCvObject
		{
			[Token(Token = "0x6001912")]
			[Address(RVA = "0x4268488", Offset = "0x4268488", VA = "0x4268488")]
			private ClassifierCallback()
			{
			}

			[Token(Token = "0x6001913")]
			[Address(RVA = "0x4268490", Offset = "0x4268490", VA = "0x4268490")]
			public ClassifierCallback(string fileName, CvText.OCRClassifierType type)
			{
			}

			[Token(Token = "0x6001914")]
			[Address(RVA = "0x4268594", Offset = "0x4268594", VA = "0x4268594", Slot = "7")]
			protected override void DisposeUnmanaged()
			{
			}

			[Token(Token = "0x6001915")]
			[Address(RVA = "0x426861C", Offset = "0x426861C", VA = "0x426861C")]
			public void Eval(InputArray image, out int[] classes, out double[] confidences)
			{
			}
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0x4267D84", Offset = "0x4267D84", VA = "0x4267D84")]
		public OCRHMMDecoder(ClassifierCallback classifier, string vocabulary, InputArray transition_probabilities_table, InputArray emission_probabilities_table, CvText.OCRDecoderMode mode)
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0x4267F5C", Offset = "0x4267F5C", VA = "0x4267F5C", Slot = "7")]
		protected override void DisposeUnmanaged()
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0x4267FE4", Offset = "0x4267FE4", VA = "0x4267FE4", Slot = "8")]
		public override string Run(Mat image, out Rect[] rects, out string[] texts, out float[] confidences, CvText.OCRLevel component_level)
		{
			return null;
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0x426841C", Offset = "0x426841C", VA = "0x426841C", Slot = "9")]
		public override string Run(Mat image, Mat mask, out Rect[] rects, out string[] texts, out float[] confidences, CvText.OCRLevel component_level)
		{
			return null;
		}
	}
	[Token(Token = "0x200012A")]
	public sealed class OCRBeamSearchDecoder : BaseOCR
	{
		[Token(Token = "0x20001D0")]
		public class ClassifierCallback : DisposableCvObject
		{
			[Token(Token = "0x6001916")]
			[Address(RVA = "0x4267944", Offset = "0x4267944", VA = "0x4267944")]
			private ClassifierCallback()
			{
			}

			[Token(Token = "0x6001917")]
			[Address(RVA = "0x426794C", Offset = "0x426794C", VA = "0x426794C")]
			public ClassifierCallback(string fileName)
			{
			}

			[Token(Token = "0x6001918")]
			[Address(RVA = "0x42679D4", Offset = "0x42679D4", VA = "0x42679D4", Slot = "7")]
			protected override void DisposeUnmanaged()
			{
			}

			[Token(Token = "0x6001919")]
			[Address(RVA = "0x4267A5C", Offset = "0x4267A5C", VA = "0x4267A5C")]
			public void Eval(InputArray image, out int[] classes, out double[] confidences)
			{
			}
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0x4266E30", Offset = "0x4266E30", VA = "0x4266E30")]
		public OCRBeamSearchDecoder(ClassifierCallback classifier, string vocabulary, InputArray transition_probabilities_table, InputArray emission_probabilities_table, CvText.OCRDecoderMode mode, int beamSize = 500)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0x4267010", Offset = "0x4267010", VA = "0x4267010", Slot = "7")]
		protected override void DisposeUnmanaged()
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x4267098", Offset = "0x4267098", VA = "0x4267098", Slot = "8")]
		public override string Run(Mat image, out Rect[] rects, out string[] texts, out float[] confidences, CvText.OCRLevel component_level)
		{
			return null;
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x42674D0", Offset = "0x42674D0", VA = "0x42674D0", Slot = "9")]
		public override string Run(Mat image, Mat mask, out Rect[] rects, out string[] texts, out float[] confidences, CvText.OCRLevel component_level)
		{
			return null;
		}
	}
	[Token(Token = "0x200012B")]
	public abstract class BackgroundSubtractor : Algorithm
	{
		[Token(Token = "0x6001516")]
		[Address(RVA = "0x221B4D0", Offset = "0x221B4D0", VA = "0x221B4D0", Slot = "13")]
		public virtual void Apply(InputArray image, OutputArray fgmask, double learningRate = -1.0)
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0x221B640", Offset = "0x221B640", VA = "0x221B640", Slot = "14")]
		public virtual void GetBackgroundImage(OutputArray backgroundImage)
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0x221B728", Offset = "0x221B728", VA = "0x221B728")]
		protected BackgroundSubtractor()
		{
		}
	}
	[Token(Token = "0x200012C")]
	public class BackgroundSubtractorKNN : BackgroundSubtractor
	{
		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<BackgroundSubtractorKNN> objectPtr;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool disposed;

		[Token(Token = "0x1700019D")]
		public int History
		{
			[Token(Token = "0x600151C")]
			[Address(RVA = "0x221CCEC", Offset = "0x221CCEC", VA = "0x221CCEC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600151D")]
			[Address(RVA = "0x221CDC0", Offset = "0x221CDC0", VA = "0x221CDC0")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public int NSamples
		{
			[Token(Token = "0x600151E")]
			[Address(RVA = "0x221CEA4", Offset = "0x221CEA4", VA = "0x221CEA4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600151F")]
			[Address(RVA = "0x221CF78", Offset = "0x221CF78", VA = "0x221CF78")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public double Dist2Threshold
		{
			[Token(Token = "0x6001520")]
			[Address(RVA = "0x221D05C", Offset = "0x221D05C", VA = "0x221D05C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001521")]
			[Address(RVA = "0x221D138", Offset = "0x221D138", VA = "0x221D138")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public int KNNSamples
		{
			[Token(Token = "0x6001522")]
			[Address(RVA = "0x221D21C", Offset = "0x221D21C", VA = "0x221D21C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001523")]
			[Address(RVA = "0x221D2F0", Offset = "0x221D2F0", VA = "0x221D2F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public bool DetectShadows
		{
			[Token(Token = "0x6001524")]
			[Address(RVA = "0x221D3D4", Offset = "0x221D3D4", VA = "0x221D3D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001525")]
			[Address(RVA = "0x221D4B4", Offset = "0x221D4B4", VA = "0x221D4B4")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public int ShadowValue
		{
			[Token(Token = "0x6001526")]
			[Address(RVA = "0x221D59C", Offset = "0x221D59C", VA = "0x221D59C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001527")]
			[Address(RVA = "0x221D670", Offset = "0x221D670", VA = "0x221D670")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public double ShadowThreshold
		{
			[Token(Token = "0x6001528")]
			[Address(RVA = "0x221D754", Offset = "0x221D754", VA = "0x221D754")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001529")]
			[Address(RVA = "0x221D828", Offset = "0x221D828", VA = "0x221D828")]
			set
			{
			}
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x221CAA4", Offset = "0x221CAA4", VA = "0x221CAA4")]
		public static BackgroundSubtractorKNN Create(int history = 500, double dist2Threshold = 400.0, bool detectShadows = true)
		{
			return null;
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0x221CB5C", Offset = "0x221CB5C", VA = "0x221CB5C")]
		internal BackgroundSubtractorKNN(IntPtr ptr)
		{
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0x221CC08", Offset = "0x221CC08", VA = "0x221CC08", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200012D")]
	public class BackgroundSubtractorMOG2 : BackgroundSubtractor
	{
		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<BackgroundSubtractorMOG2> objectPtr;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool disposed;

		[Token(Token = "0x170001A4")]
		public int History
		{
			[Token(Token = "0x600152D")]
			[Address(RVA = "0x221E480", Offset = "0x221E480", VA = "0x221E480")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600152E")]
			[Address(RVA = "0x221E554", Offset = "0x221E554", VA = "0x221E554")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public int NMixtures
		{
			[Token(Token = "0x600152F")]
			[Address(RVA = "0x221E638", Offset = "0x221E638", VA = "0x221E638")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001530")]
			[Address(RVA = "0x221E70C", Offset = "0x221E70C", VA = "0x221E70C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public double BackgroundRatio
		{
			[Token(Token = "0x6001531")]
			[Address(RVA = "0x221E7F0", Offset = "0x221E7F0", VA = "0x221E7F0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001532")]
			[Address(RVA = "0x221E8C4", Offset = "0x221E8C4", VA = "0x221E8C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public double VarThreshold
		{
			[Token(Token = "0x6001533")]
			[Address(RVA = "0x221E9A8", Offset = "0x221E9A8", VA = "0x221E9A8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001534")]
			[Address(RVA = "0x221EA84", Offset = "0x221EA84", VA = "0x221EA84")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public double VarThresholdGen
		{
			[Token(Token = "0x6001535")]
			[Address(RVA = "0x221EB68", Offset = "0x221EB68", VA = "0x221EB68")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001536")]
			[Address(RVA = "0x221EC3C", Offset = "0x221EC3C", VA = "0x221EC3C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		public double VarInit
		{
			[Token(Token = "0x6001537")]
			[Address(RVA = "0x221ED20", Offset = "0x221ED20", VA = "0x221ED20")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001538")]
			[Address(RVA = "0x221EDF4", Offset = "0x221EDF4", VA = "0x221EDF4")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public double VarMin
		{
			[Token(Token = "0x6001539")]
			[Address(RVA = "0x221EED8", Offset = "0x221EED8", VA = "0x221EED8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600153A")]
			[Address(RVA = "0x221EFAC", Offset = "0x221EFAC", VA = "0x221EFAC")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public double VarMax
		{
			[Token(Token = "0x600153B")]
			[Address(RVA = "0x221F090", Offset = "0x221F090", VA = "0x221F090")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600153C")]
			[Address(RVA = "0x221F164", Offset = "0x221F164", VA = "0x221F164")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public double ComplexityReductionThreshold
		{
			[Token(Token = "0x600153D")]
			[Address(RVA = "0x221F248", Offset = "0x221F248", VA = "0x221F248")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600153E")]
			[Address(RVA = "0x221F31C", Offset = "0x221F31C", VA = "0x221F31C")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public bool DetectShadows
		{
			[Token(Token = "0x600153F")]
			[Address(RVA = "0x221F400", Offset = "0x221F400", VA = "0x221F400")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001540")]
			[Address(RVA = "0x221F4E0", Offset = "0x221F4E0", VA = "0x221F4E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public int ShadowValue
		{
			[Token(Token = "0x6001541")]
			[Address(RVA = "0x221F5C8", Offset = "0x221F5C8", VA = "0x221F5C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001542")]
			[Address(RVA = "0x221F69C", Offset = "0x221F69C", VA = "0x221F69C")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public double ShadowThreshold
		{
			[Token(Token = "0x6001543")]
			[Address(RVA = "0x221F780", Offset = "0x221F780", VA = "0x221F780")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001544")]
			[Address(RVA = "0x221F854", Offset = "0x221F854", VA = "0x221F854")]
			set
			{
			}
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0x221E238", Offset = "0x221E238", VA = "0x221E238")]
		public static BackgroundSubtractorMOG2 Create(int history = 500, double varThreshold = 16.0, bool detectShadows = true)
		{
			return null;
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0x221E2F0", Offset = "0x221E2F0", VA = "0x221E2F0")]
		internal BackgroundSubtractorMOG2(IntPtr ptr)
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0x221E39C", Offset = "0x221E39C", VA = "0x221E39C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200012E")]
	public abstract class DenseOpticalFlow : Algorithm
	{
		[Token(Token = "0x6001545")]
		[Address(RVA = "0x3EAD9D0", Offset = "0x3EAD9D0", VA = "0x3EAD9D0")]
		protected DenseOpticalFlow()
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0x3EAD9D8", Offset = "0x3EAD9D8", VA = "0x3EAD9D8")]
		public static DenseOpticalFlow CreateOptFlow_DualTVL1()
		{
			return null;
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0x3EADB40", Offset = "0x3EADB40", VA = "0x3EADB40", Slot = "13")]
		public virtual void CollectGarbage()
		{
		}

		[Token(Token = "0x6001548")]
		public abstract void Calc(InputArray frame0, InputArray frame1, InputOutputArray flow);
	}
	[Token(Token = "0x200012F")]
	internal sealed class DenseOpticalFlowImpl : DenseOpticalFlow
	{
		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<DenseOpticalFlow> detectorPtr;

		[Token(Token = "0x6001549")]
		[Address(RVA = "0x3EAE58C", Offset = "0x3EAE58C", VA = "0x3EAE58C")]
		private DenseOpticalFlowImpl()
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0x3EADA3C", Offset = "0x3EADA3C", VA = "0x3EADA3C")]
		internal static DenseOpticalFlowImpl FromPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x3EAE5EC", Offset = "0x3EAE5EC", VA = "0x3EAE5EC")]
		internal static DenseOpticalFlowImpl FromRawPtr(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x3EAE6B4", Offset = "0x3EAE6B4", VA = "0x3EAE6B4", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0x3EAE78C", Offset = "0x3EAE78C", VA = "0x3EAE78C", Slot = "14")]
		public override void Calc(InputArray frame0, InputArray frame1, InputOutputArray flow)
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0x3EAE920", Offset = "0x3EAE920", VA = "0x3EAE920", Slot = "13")]
		public override void CollectGarbage()
		{
		}
	}
	[Token(Token = "0x2000130")]
	public class KalmanFilter : DisposableCvObject
	{
		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x170001B0")]
		public Mat StatePre
		{
			[Token(Token = "0x6001552")]
			[Address(RVA = "0x3051F80", Offset = "0x3051F80", VA = "0x3051F80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B1")]
		public Mat StatePost
		{
			[Token(Token = "0x6001553")]
			[Address(RVA = "0x3052108", Offset = "0x3052108", VA = "0x3052108")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B2")]
		public Mat TransitionMatrix
		{
			[Token(Token = "0x6001554")]
			[Address(RVA = "0x30521E4", Offset = "0x30521E4", VA = "0x30521E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B3")]
		public Mat ControlMatrix
		{
			[Token(Token = "0x6001555")]
			[Address(RVA = "0x30522C0", Offset = "0x30522C0", VA = "0x30522C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B4")]
		public Mat MeasurementMatrix
		{
			[Token(Token = "0x6001556")]
			[Address(RVA = "0x305239C", Offset = "0x305239C", VA = "0x305239C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B5")]
		public Mat ProcessNoiseCov
		{
			[Token(Token = "0x6001557")]
			[Address(RVA = "0x3052478", Offset = "0x3052478", VA = "0x3052478")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B6")]
		public Mat MeasurementNoiseCov
		{
			[Token(Token = "0x6001558")]
			[Address(RVA = "0x3052554", Offset = "0x3052554", VA = "0x3052554")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B7")]
		public Mat ErrorCovPre
		{
			[Token(Token = "0x6001559")]
			[Address(RVA = "0x3052630", Offset = "0x3052630", VA = "0x3052630")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B8")]
		public Mat Gain
		{
			[Token(Token = "0x600155A")]
			[Address(RVA = "0x305270C", Offset = "0x305270C", VA = "0x305270C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B9")]
		public Mat ErrorCovPost
		{
			[Token(Token = "0x600155B")]
			[Address(RVA = "0x30527E8", Offset = "0x30527E8", VA = "0x30527E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0x3051D64", Offset = "0x3051D64", VA = "0x3051D64")]
		public KalmanFilter()
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0x3051DDC", Offset = "0x3051DDC", VA = "0x3051DDC")]
		public KalmanFilter(int dynamParams, int measureParams, int controlParams = 0, int type = 5)
		{
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0x3051E84", Offset = "0x3051E84", VA = "0x3051E84", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0x30528C4", Offset = "0x30528C4", VA = "0x30528C4")]
		public void Init(int dynamParams, int measureParams, int controlParams = 0, int type = 5)
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0x30529A4", Offset = "0x30529A4", VA = "0x30529A4")]
		public Mat Predict([Optional] Mat control)
		{
			return null;
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0x3052AA4", Offset = "0x3052AA4", VA = "0x3052AA4")]
		public Mat Correct(Mat measurement)
		{
			return null;
		}
	}
	[Token(Token = "0x2000131")]
	[Flags]
	public enum OpticalFlowFlags
	{
		[Token(Token = "0x400058E")]
		None = 0,
		[Token(Token = "0x400058F")]
		PyrAReady = 1,
		[Token(Token = "0x4000590")]
		PyrBReady = 2,
		[Token(Token = "0x4000591")]
		UseInitialFlow = 4,
		[Token(Token = "0x4000592")]
		LkGetMinEigenvals = 8,
		[Token(Token = "0x4000593")]
		FarnebackGaussian = 0x100
	}
}
namespace OpenCvSharp.Demo
{
	[Token(Token = "0x2000132")]
	public class CameraScaler : MonoBehaviour
	{
		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBCC8", Offset = "0x1DDBCC8")]
		private Vector2 <ScreenSize>k__BackingField;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBCD8", Offset = "0x1DDBCD8")]
		private Vector2 <ComponentSize>k__BackingField;

		[Token(Token = "0x170001BA")]
		private Vector2 ScreenSize
		{
			[Token(Token = "0x600155F")]
			[Address(RVA = "0x3EAB794", Offset = "0x3EAB794", VA = "0x3EAB794")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCBA8", Offset = "0x1DDCBA8")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001560")]
			[Address(RVA = "0x3EAB79C", Offset = "0x3EAB79C", VA = "0x3EAB79C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCBB8", Offset = "0x1DDCBB8")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		private Vector2 ComponentSize
		{
			[Token(Token = "0x6001561")]
			[Address(RVA = "0x3EAB7A4", Offset = "0x3EAB7A4", VA = "0x3EAB7A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCBC8", Offset = "0x1DDCBC8")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001562")]
			[Address(RVA = "0x3EAB7AC", Offset = "0x3EAB7AC", VA = "0x3EAB7AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCBD8", Offset = "0x1DDCBD8")]
			set
			{
			}
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0x3EAB7B4", Offset = "0x3EAB7B4", VA = "0x3EAB7B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0x3EAB830", Offset = "0x3EAB830", VA = "0x3EAB830")]
		private void Update()
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0x3EAB934", Offset = "0x3EAB934", VA = "0x3EAB934")]
		private void Scale()
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0x3EABA68", Offset = "0x3EABA68", VA = "0x3EABA68")]
		public CameraScaler()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public class DataStabilizerParams
	{
		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBCE8", Offset = "0x1DDBCE8")]
		private bool <Enabled>k__BackingField;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBCF8", Offset = "0x1DDBCF8")]
		private double <Threshold>k__BackingField;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD08", Offset = "0x1DDBD08")]
		private double <ThresholdFactor>k__BackingField;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD18", Offset = "0x1DDBD18")]
		private int <SamplesCount>k__BackingField;

		[Token(Token = "0x170001BC")]
		public bool Enabled
		{
			[Token(Token = "0x6001567")]
			[Address(RVA = "0x3EABA70", Offset = "0x3EABA70", VA = "0x3EABA70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCBE8", Offset = "0x1DDCBE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001568")]
			[Address(RVA = "0x3EABA78", Offset = "0x3EABA78", VA = "0x3EABA78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCBF8", Offset = "0x1DDCBF8")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public double Threshold
		{
			[Token(Token = "0x6001569")]
			[Address(RVA = "0x3EABA84", Offset = "0x3EABA84", VA = "0x3EABA84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC08", Offset = "0x1DDCC08")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600156A")]
			[Address(RVA = "0x3EABA8C", Offset = "0x3EABA8C", VA = "0x3EABA8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC18", Offset = "0x1DDCC18")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public double ThresholdFactor
		{
			[Token(Token = "0x600156B")]
			[Address(RVA = "0x3EABA94", Offset = "0x3EABA94", VA = "0x3EABA94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC28", Offset = "0x1DDCC28")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600156C")]
			[Address(RVA = "0x3EABA9C", Offset = "0x3EABA9C", VA = "0x3EABA9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC38", Offset = "0x1DDCC38")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public int SamplesCount
		{
			[Token(Token = "0x600156D")]
			[Address(RVA = "0x3EABAA4", Offset = "0x3EABAA4", VA = "0x3EABAA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC48", Offset = "0x1DDCC48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600156E")]
			[Address(RVA = "0x3EABAAC", Offset = "0x3EABAAC", VA = "0x3EABAAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC58", Offset = "0x1DDCC58")]
			set
			{
			}
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0x3EABAB4", Offset = "0x3EABAB4", VA = "0x3EABAB4")]
		public double GetScaledThreshold()
		{
			return default(double);
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0x3EABAC0", Offset = "0x3EABAC0", VA = "0x3EABAC0")]
		public DataStabilizerParams()
		{
		}
	}
	[Token(Token = "0x2000134")]
	internal interface IDataStabilizer<T>
	{
		[Token(Token = "0x170001C0")]
		DataStabilizerParams Params
		{
			[Token(Token = "0x6001571")]
			get;
			[Token(Token = "0x6001572")]
			set;
		}

		[Token(Token = "0x170001C1")]
		T Sample
		{
			[Token(Token = "0x6001573")]
			get;
			[Token(Token = "0x6001574")]
			set;
		}

		[Token(Token = "0x170001C2")]
		bool LastApplied
		{
			[Token(Token = "0x6001575")]
			get;
			[Token(Token = "0x6001576")]
			set;
		}
	}
	[Token(Token = "0x2000135")]
	internal abstract class DataStabilizerBase<T>
	{
		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T result;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected bool dirty;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[] samples;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected long inputSamples;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD28", Offset = "0x1DDBD28")]
		private DataStabilizerParams <Params>k__BackingField;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD38", Offset = "0x1DDBD38")]
		private bool <LastApplied>k__BackingField;

		[Token(Token = "0x170001C3")]
		public DataStabilizerParams Params
		{
			[Token(Token = "0x6001577")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC68", Offset = "0x1DDCC68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001578")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC78", Offset = "0x1DDCC78")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public virtual T Sample
		{
			[Token(Token = "0x6001579")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x600157A")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public bool LastApplied
		{
			[Token(Token = "0x600157B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC88", Offset = "0x1DDCC88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600157C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCC98", Offset = "0x1DDCC98")]
			private set
			{
			}
		}

		[Token(Token = "0x600157D")]
		protected DataStabilizerBase(DataStabilizerParams parameters)
		{
		}

		[Token(Token = "0x600157E")]
		protected abstract bool PrepareStabilizedSample();

		[Token(Token = "0x600157F")]
		protected abstract T ComputeAverageSample();

		[Token(Token = "0x6001580")]
		protected abstract void ValidateSample(T sample);

		[Token(Token = "0x6001581")]
		protected abstract T DefaultValue();
	}
	[Token(Token = "0x2000136")]
	internal class PointsDataStabilizer : DataStabilizerBase<Point[]>
	{
		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD48", Offset = "0x1DDBD48")]
		private bool <PerPointProcessing>k__BackingField;

		[Token(Token = "0x170001C6")]
		public bool PerPointProcessing
		{
			[Token(Token = "0x6001582")]
			[Address(RVA = "0x3EAC944", Offset = "0x3EAC944", VA = "0x3EAC944")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCCA8", Offset = "0x1DDCCA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001583")]
			[Address(RVA = "0x3EAC94C", Offset = "0x3EAC94C", VA = "0x3EAC94C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCCB8", Offset = "0x1DDCCB8")]
			set
			{
			}
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0x3EAC7B4", Offset = "0x3EAC7B4", VA = "0x3EAC7B4")]
		public PointsDataStabilizer(DataStabilizerParams parameters)
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x3EAC958", Offset = "0x3EAC958", VA = "0x3EAC958", Slot = "8")]
		protected override void ValidateSample(Point[] sample)
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x3EACA64", Offset = "0x3EACA64", VA = "0x3EACA64", Slot = "7")]
		protected override Point[] ComputeAverageSample()
		{
			return null;
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0x3EACC48", Offset = "0x3EACC48", VA = "0x3EACC48", Slot = "6")]
		protected override bool PrepareStabilizedSample()
		{
			return default(bool);
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0x3EACE98", Offset = "0x3EACE98", VA = "0x3EACE98", Slot = "9")]
		protected override Point[] DefaultValue()
		{
			return null;
		}
	}
	[Token(Token = "0x2000137")]
	internal class RectStabilizer : DataStabilizerBase<Rect>
	{
		[Token(Token = "0x6001589")]
		[Address(RVA = "0x3EAC0F4", Offset = "0x3EAC0F4", VA = "0x3EAC0F4")]
		public RectStabilizer(DataStabilizerParams parameters)
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0x3EACEA0", Offset = "0x3EACEA0", VA = "0x3EACEA0", Slot = "7")]
		protected override Rect ComputeAverageSample()
		{
			return default(Rect);
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0x3EAD010", Offset = "0x3EAD010", VA = "0x3EAD010", Slot = "8")]
		protected override void ValidateSample(Rect sample)
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x3EAD014", Offset = "0x3EAD014", VA = "0x3EAD014", Slot = "6")]
		protected override bool PrepareStabilizedSample()
		{
			return default(bool);
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0x3EAD204", Offset = "0x3EAD204", VA = "0x3EAD204", Slot = "9")]
		protected override Rect DefaultValue()
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x2000138")]
	public class DetectedObject
	{
		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PointsDataStabilizer marksStabilizer;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD58", Offset = "0x1DDBD58")]
		private string <Name>k__BackingField;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD68", Offset = "0x1DDBD68")]
		private Rect <Region>k__BackingField;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD78", Offset = "0x1DDBD78")]
		private Point[] <Marks>k__BackingField;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD88", Offset = "0x1DDBD88")]
		private DetectedObject[] <Elements>k__BackingField;

		[Token(Token = "0x170001C7")]
		public string Name
		{
			[Token(Token = "0x6001591")]
			[Address(RVA = "0x3EAC820", Offset = "0x3EAC820", VA = "0x3EAC820")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCCC8", Offset = "0x1DDCCC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001592")]
			[Address(RVA = "0x3EAC828", Offset = "0x3EAC828", VA = "0x3EAC828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCCD8", Offset = "0x1DDCCD8")]
			protected set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public Rect Region
		{
			[Token(Token = "0x6001593")]
			[Address(RVA = "0x3EAC830", Offset = "0x3EAC830", VA = "0x3EAC830")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCCE8", Offset = "0x1DDCCE8")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6001594")]
			[Address(RVA = "0x3EAC83C", Offset = "0x3EAC83C", VA = "0x3EAC83C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCCF8", Offset = "0x1DDCCF8")]
			protected set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public Point[] Marks
		{
			[Token(Token = "0x6001595")]
			[Address(RVA = "0x3EAC844", Offset = "0x3EAC844", VA = "0x3EAC844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCD08", Offset = "0x1DDCD08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001596")]
			[Address(RVA = "0x3EAC84C", Offset = "0x3EAC84C", VA = "0x3EAC84C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCD18", Offset = "0x1DDCD18")]
			protected set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public DetectedObject[] Elements
		{
			[Token(Token = "0x6001597")]
			[Address(RVA = "0x3EAC854", Offset = "0x3EAC854", VA = "0x3EAC854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCD28", Offset = "0x1DDCD28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001598")]
			[Address(RVA = "0x3EAC85C", Offset = "0x3EAC85C", VA = "0x3EAC85C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCD38", Offset = "0x1DDCD38")]
			set
			{
			}
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0x3EAC6F0", Offset = "0x3EAC6F0", VA = "0x3EAC6F0")]
		public DetectedObject(DataStabilizerParams stabilizerParameters)
		{
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0x3EAC0AC", Offset = "0x3EAC0AC", VA = "0x3EAC0AC")]
		public DetectedObject(DataStabilizerParams stabilizerParameters, string name, Rect region)
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0x3EAC328", Offset = "0x3EAC328", VA = "0x3EAC328")]
		public DetectedObject(DataStabilizerParams stabilizerParameters, string name, Point[] marks)
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0x3EAC864", Offset = "0x3EAC864", VA = "0x3EAC864", Slot = "4")]
		public virtual bool SetMarks(Point[] marks)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000139")]
	public class DetectedFace : DetectedObject
	{
		[Token(Token = "0x20001D1")]
		public enum FaceElements
		{
			[Token(Token = "0x400077F")]
			Jaw,
			[Token(Token = "0x4000780")]
			LeftEyebrow,
			[Token(Token = "0x4000781")]
			RightEyebrow,
			[Token(Token = "0x4000782")]
			NoseBridge,
			[Token(Token = "0x4000783")]
			Nose,
			[Token(Token = "0x4000784")]
			LeftEye,
			[Token(Token = "0x4000785")]
			RightEye,
			[Token(Token = "0x4000786")]
			OuterLip,
			[Token(Token = "0x4000787")]
			InnerLip
		}

		[Token(Token = "0x20001D2")]
		public struct Triangle
		{
			[Token(Token = "0x4000788")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Point i;

			[Token(Token = "0x4000789")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Point j;

			[Token(Token = "0x400078A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Point k;

			[Token(Token = "0x600191A")]
			[Address(RVA = "0x3EABD8C", Offset = "0x3EABD8C", VA = "0x3EABD8C")]
			public Triangle(Vec6f vec)
			{
			}

			[Token(Token = "0x600191B")]
			[Address(RVA = "0x3EABF14", Offset = "0x3EABF14", VA = "0x3EABF14")]
			public Point[] ToArray()
			{
				return null;
			}
		}

		[Token(Token = "0x20001D3")]
		public sealed class FaceInfo
		{
			[Token(Token = "0x400078B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF58", Offset = "0x1DDBF58")]
			private Point[] <ConvexHull>k__BackingField;

			[Token(Token = "0x400078C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF68", Offset = "0x1DDBF68")]
			private Triangle[] <DelaunayTriangles>k__BackingField;

			[Token(Token = "0x170002C9")]
			public Point[] ConvexHull
			{
				[Token(Token = "0x600191C")]
				[Address(RVA = "0x3EAC6D0", Offset = "0x3EAC6D0", VA = "0x3EAC6D0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD800", Offset = "0x1DDD800")]
				get
				{
					return null;
				}
				[Token(Token = "0x600191D")]
				[Address(RVA = "0x3EAC6D8", Offset = "0x3EAC6D8", VA = "0x3EAC6D8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD810", Offset = "0x1DDD810")]
				private set
				{
				}
			}

			[Token(Token = "0x170002CA")]
			public Triangle[] DelaunayTriangles
			{
				[Token(Token = "0x600191E")]
				[Address(RVA = "0x3EAC6E0", Offset = "0x3EAC6E0", VA = "0x3EAC6E0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD820", Offset = "0x1DDD820")]
				get
				{
					return null;
				}
				[Token(Token = "0x600191F")]
				[Address(RVA = "0x3EAC6E8", Offset = "0x3EAC6E8", VA = "0x3EAC6E8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD830", Offset = "0x1DDD830")]
				private set
				{
				}
			}

			[Token(Token = "0x6001920")]
			[Address(RVA = "0x3EABFAC", Offset = "0x3EABFAC", VA = "0x3EABFAC")]
			internal FaceInfo(Point[] hull, Triangle[] triangles)
			{
			}
		}

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected FaceInfo faceInfo;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectStabilizer faceStabilizer;

		[Token(Token = "0x170001CB")]
		public FaceInfo Info
		{
			[Token(Token = "0x600159A")]
			[Address(RVA = "0x3EABAFC", Offset = "0x3EABAFC", VA = "0x3EABAFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0x3EABFFC", Offset = "0x3EABFFC", VA = "0x3EABFFC")]
		public DetectedFace(DataStabilizerParams stabilizerParameters, Rect roi)
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x3EAC154", Offset = "0x3EAC154", VA = "0x3EAC154")]
		public void SetRegion(Rect roi)
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0x3EAC1AC", Offset = "0x3EAC1AC", VA = "0x3EAC1AC")]
		public bool DefineSubObject(FaceElements element, string name, int fromMark, int toMark, bool updateMarks = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0x3EAC414", Offset = "0x3EAC414", VA = "0x3EAC414")]
		public void SetLandmarks(Point[] points)
		{
		}
	}
	[Token(Token = "0x200013A")]
	internal static class ArrayUtilities
	{
		[Token(Token = "0x600159F")]
		public static T[] RangeSubset<T>(this T[] array, int startIndex, int length)
		{
			return null;
		}

		[Token(Token = "0x60015A0")]
		public static T[] SubsetFromTo<T>(this T[] array, int fromIndex, int toIndex)
		{
			return null;
		}

		[Token(Token = "0x60015A1")]
		public static T[] Subset<T>(this T[] array, params int[] indices)
		{
			return null;
		}
	}
	[Token(Token = "0x200013B")]
	public class FaceProcessorPerformanceParams
	{
		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBD98", Offset = "0x1DDBD98")]
		private int <Downscale>k__BackingField;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBDA8", Offset = "0x1DDBDA8")]
		private int <SkipRate>k__BackingField;

		[Token(Token = "0x170001CC")]
		public int Downscale
		{
			[Token(Token = "0x60015A2")]
			[Address(RVA = "0x3EAC8FC", Offset = "0x3EAC8FC", VA = "0x3EAC8FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCD78", Offset = "0x1DDCD78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015A3")]
			[Address(RVA = "0x3EAC904", Offset = "0x3EAC904", VA = "0x3EAC904")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCD88", Offset = "0x1DDCD88")]
			set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public int SkipRate
		{
			[Token(Token = "0x60015A4")]
			[Address(RVA = "0x3EAC90C", Offset = "0x3EAC90C", VA = "0x3EAC90C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCD98", Offset = "0x1DDCD98")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015A5")]
			[Address(RVA = "0x3EAC914", Offset = "0x3EAC914", VA = "0x3EAC914")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCDA8", Offset = "0x1DDCDA8")]
			set
			{
			}
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0x3EAC91C", Offset = "0x3EAC91C", VA = "0x3EAC91C")]
		public FaceProcessorPerformanceParams()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public class FaceProcessor<T> where T : Texture
	{
		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected CascadeClassifier cascadeFaces;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected CascadeClassifier cascadeEyes;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected ShapePredictor shapeFaces;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected Mat processingImage;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected double appliedFactor;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected bool cutFalsePositivesWithEyesSearch;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBDB8", Offset = "0x1DDBDB8")]
		private FaceProcessorPerformanceParams <Performance>k__BackingField;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBDC8", Offset = "0x1DDBDC8")]
		private DataStabilizerParams <DataStabilizer>k__BackingField;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBDD8", Offset = "0x1DDBDD8")]
		private Mat <Image>k__BackingField;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBDE8", Offset = "0x1DDBDE8")]
		private List<DetectedFace> <Faces>k__BackingField;

		[Token(Token = "0x170001CE")]
		public FaceProcessorPerformanceParams Performance
		{
			[Token(Token = "0x60015A7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCDB8", Offset = "0x1DDCDB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCDC8", Offset = "0x1DDCDC8")]
			private set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public DataStabilizerParams DataStabilizer
		{
			[Token(Token = "0x60015A9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCDD8", Offset = "0x1DDCDD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015AA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCDE8", Offset = "0x1DDCDE8")]
			private set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public Mat Image
		{
			[Token(Token = "0x60015AB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCDF8", Offset = "0x1DDCDF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE08", Offset = "0x1DDCE08")]
			private set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public List<DetectedFace> Faces
		{
			[Token(Token = "0x60015AD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE18", Offset = "0x1DDCE18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015AE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE28", Offset = "0x1DDCE28")]
			private set
			{
			}
		}

		[Token(Token = "0x60015AF")]
		public FaceProcessor()
		{
		}

		[Token(Token = "0x60015B0")]
		public virtual void Initialize(string facesCascadeData, string eyesCascadeData, [Optional] byte[] shapeData)
		{
		}

		[Token(Token = "0x60015B1")]
		protected virtual Mat MatFromTexture(T texture, Unity.TextureConversionParams texParams)
		{
			return null;
		}

		[Token(Token = "0x60015B2")]
		protected virtual void ImportTexture(T texture, Unity.TextureConversionParams texParams)
		{
		}

		[Token(Token = "0x60015B3")]
		public virtual void ProcessTexture(T texture, Unity.TextureConversionParams texParams, bool detect = true)
		{
		}

		[Token(Token = "0x60015B4")]
		public void MarkDetected(bool drawSubItems = true)
		{
		}
	}
	[Token(Token = "0x200013D")]
	public class FaceProcessorLive<T> : FaceProcessor<T> where T : Texture
	{
		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int frameCounter;

		[Token(Token = "0x60015B5")]
		public FaceProcessorLive()
		{
		}

		[Token(Token = "0x60015B6")]
		public override void ProcessTexture(T texture, Unity.TextureConversionParams texParams, bool detect = true)
		{
		}
	}
	[Token(Token = "0x200013E")]
	public abstract class WebCamera : MonoBehaviour
	{
		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Surface;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int DeviceIndex;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WebCamDevice? webCamDevice;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WebCamTexture webCamTexture;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Texture2D renderedTexture;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected bool forceFrontalCamera;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBDF8", Offset = "0x1DDBDF8")]
		private Unity.TextureConversionParams <TextureParameters>k__BackingField;

		[Token(Token = "0x170001D2")]
		protected Unity.TextureConversionParams TextureParameters
		{
			[Token(Token = "0x60015B7")]
			[Address(RVA = "0x3EAD210", Offset = "0x3EAD210", VA = "0x3EAD210")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE38", Offset = "0x1DDCE38")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015B8")]
			[Address(RVA = "0x3EAD218", Offset = "0x3EAD218", VA = "0x3EAD218")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE48", Offset = "0x1DDCE48")]
			private set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public string DeviceName
		{
			[Token(Token = "0x60015B9")]
			[Address(RVA = "0x3EAD220", Offset = "0x3EAD220", VA = "0x3EAD220")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015BA")]
			[Address(RVA = "0x3EAD2AC", Offset = "0x3EAD2AC", VA = "0x3EAD2AC")]
			set
			{
			}
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x3EAD594", Offset = "0x3EAD594", VA = "0x3EAD594")]
		private void ReadTextureConversionParameters()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x3EAD688", Offset = "0x3EAD688", VA = "0x3EAD688", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x3EAD708", Offset = "0x3EAD708", VA = "0x3EAD708")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x3EAD7DC", Offset = "0x3EAD7DC", VA = "0x3EAD7DC")]
		private void Update()
		{
		}

		[Token(Token = "0x60015BF")]
		protected abstract bool ProcessTexture(WebCamTexture input, ref Texture2D output);

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0x3EAD8A0", Offset = "0x3EAD8A0", VA = "0x3EAD8A0")]
		private void RenderFrame()
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0x3EAD9C8", Offset = "0x3EAD9C8", VA = "0x3EAD9C8")]
		protected WebCamera()
		{
		}
	}
}
namespace OpenCvSharp.XFeatures2D
{
	[Token(Token = "0x200013F")]
	public class BriefDescriptorExtractor : Feature2D
	{
		[Token(Token = "0x40005BC")]
		public const int PATCH_SIZE = 48;

		[Token(Token = "0x40005BD")]
		public const int KERNEL_SIZE = 9;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<BriefDescriptorExtractor> ptrObj;

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0x4068C88", Offset = "0x4068C88", VA = "0x4068C88")]
		internal BriefDescriptorExtractor(Ptr<BriefDescriptorExtractor> p)
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0x4068CDC", Offset = "0x4068CDC", VA = "0x4068CDC")]
		public static BriefDescriptorExtractor Create(int bytes = 32)
		{
			return null;
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0x4068D98", Offset = "0x4068D98", VA = "0x4068D98", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000140")]
	public class FREAK : Feature2D
	{
		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<FREAK> ptrObj;

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0x4068E78", Offset = "0x4068E78", VA = "0x4068E78")]
		internal FREAK(Ptr<FREAK> p)
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0x4068ECC", Offset = "0x4068ECC", VA = "0x4068ECC")]
		public static FREAK Create(bool orientationNormalized = true, bool scaleNormalized = true, float patternScale = 22f, int nOctaves = 4, [Optional] IEnumerable<int> selectedPairs)
		{
			return null;
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0x4068FF4", Offset = "0x4068FF4", VA = "0x4068FF4", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000141")]
	public class SIFT : Feature2D
	{
		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<SIFT> detectorPtr;

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0x40690A8", Offset = "0x40690A8", VA = "0x40690A8")]
		internal SIFT(Ptr<SIFT> p)
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0x40690FC", Offset = "0x40690FC", VA = "0x40690FC")]
		public static SIFT Create(int nFeatures = 0, int nOctaveLayers = 3, double contrastThreshold = 0.04, double edgeThreshold = 10.0, double sigma = 1.6)
		{
			return null;
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0x40691F0", Offset = "0x40691F0", VA = "0x40691F0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000142")]
	public class SURF : Feature2D
	{
		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<SURF> detectorPtr;

		[Token(Token = "0x170001D4")]
		public double HessianThreshold
		{
			[Token(Token = "0x60015CE")]
			[Address(RVA = "0x40694F8", Offset = "0x40694F8", VA = "0x40694F8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015CF")]
			[Address(RVA = "0x4069570", Offset = "0x4069570", VA = "0x4069570")]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public int NOctaves
		{
			[Token(Token = "0x60015D0")]
			[Address(RVA = "0x40695F8", Offset = "0x40695F8", VA = "0x40695F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015D1")]
			[Address(RVA = "0x4069670", Offset = "0x4069670", VA = "0x4069670")]
			set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		public int NOctaveLayers
		{
			[Token(Token = "0x60015D2")]
			[Address(RVA = "0x40696F8", Offset = "0x40696F8", VA = "0x40696F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x4069770", Offset = "0x4069770", VA = "0x4069770")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public bool Extended
		{
			[Token(Token = "0x60015D4")]
			[Address(RVA = "0x40697F8", Offset = "0x40697F8", VA = "0x40697F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015D5")]
			[Address(RVA = "0x406987C", Offset = "0x406987C", VA = "0x406987C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public bool Upright
		{
			[Token(Token = "0x60015D6")]
			[Address(RVA = "0x4069908", Offset = "0x4069908", VA = "0x4069908")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015D7")]
			[Address(RVA = "0x406998C", Offset = "0x406998C", VA = "0x406998C")]
			set
			{
			}
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0x40692CC", Offset = "0x40692CC", VA = "0x40692CC")]
		internal SURF(Ptr<SURF> p)
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0x4069320", Offset = "0x4069320", VA = "0x4069320")]
		public static SURF Create(double hessianThreshold, int nOctaves = 4, int nOctaveLayers = 2, bool extended = true, bool upright = false)
		{
			return null;
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0x406941C", Offset = "0x406941C", VA = "0x406941C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000143")]
	public class StarDetector : Feature2D
	{
		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<StarDetector> ptrObj;

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0x4069A18", Offset = "0x4069A18", VA = "0x4069A18")]
		internal StarDetector(Ptr<StarDetector> p)
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0x4069A6C", Offset = "0x4069A6C", VA = "0x4069A6C")]
		public static StarDetector Create(int maxSize = 45, int responseThreshold = 30, int lineThresholdProjected = 10, int lineThresholdBinarized = 8, int suppressNonmaxSize = 5)
		{
			return null;
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0x4069B58", Offset = "0x4069B58", VA = "0x4069B58", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
}
namespace OpenCvSharp.Tracking
{
	[Token(Token = "0x2000144")]
	public enum TrackerTypes
	{
		[Token(Token = "0x40005C9")]
		Boosting,
		[Token(Token = "0x40005CA")]
		GOTURN,
		[Token(Token = "0x40005CB")]
		TLD,
		[Token(Token = "0x40005CC")]
		KCF,
		[Token(Token = "0x40005CD")]
		MedianFlow,
		[Token(Token = "0x40005CE")]
		MIL
	}
	[Token(Token = "0x2000145")]
	public class Tracker : Algorithm
	{
		[Token(Token = "0x20001D4")]
		internal class Ptr : Ptr<Tracker>
		{
			[Token(Token = "0x6001921")]
			[Address(RVA = "0x4055E68", Offset = "0x4055E68", VA = "0x4055E68")]
			public Ptr(IntPtr ptr)
			{
			}

			[Token(Token = "0x6001922")]
			[Address(RVA = "0x40563B4", Offset = "0x40563B4", VA = "0x40563B4", Slot = "8")]
			public override IntPtr Get()
			{
				return default(IntPtr);
			}

			[Token(Token = "0x6001923")]
			[Address(RVA = "0x4056420", Offset = "0x4056420", VA = "0x4056420", Slot = "7")]
			protected override void DisposeUnmanaged()
			{
			}
		}

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr ptrObj;

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x4055DC8", Offset = "0x4055DC8", VA = "0x4055DC8")]
		protected Tracker(IntPtr p)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x4055EC8", Offset = "0x4055EC8", VA = "0x4055EC8")]
		public static Tracker Create(TrackerTypes trackerType)
		{
			return null;
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x40560FC", Offset = "0x40560FC", VA = "0x40560FC", Slot = "7")]
		protected override void DisposeUnmanaged()
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0x4056134", Offset = "0x4056134", VA = "0x4056134")]
		public bool Init(Mat image, Rect2d boundingBox)
		{
			return default(bool);
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x4056288", Offset = "0x4056288", VA = "0x4056288")]
		public bool Update(Mat image, ref Rect2d boundingBox)
		{
			return default(bool);
		}
	}
}
namespace OpenCvSharp.Detail
{
	[Token(Token = "0x2000146")]
	public enum WaveCorrectKind
	{
		[Token(Token = "0x40005D1")]
		Horizontal,
		[Token(Token = "0x40005D2")]
		Vertical
	}
	[Token(Token = "0x2000147")]
	public class FeaturesFinder
	{
		[Token(Token = "0x60015E0")]
		[Address(RVA = "0x3EB0250", Offset = "0x3EB0250", VA = "0x3EB0250")]
		public FeaturesFinder()
		{
		}
	}
	[Token(Token = "0x2000148")]
	public class FeaturesMatcher
	{
		[Token(Token = "0x60015E1")]
		[Address(RVA = "0x3EB0258", Offset = "0x3EB0258", VA = "0x3EB0258")]
		public FeaturesMatcher()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class BundleAdjusterBase
	{
		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x3EB0238", Offset = "0x3EB0238", VA = "0x3EB0238")]
		public BundleAdjusterBase()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class WarperCreator
	{
		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x3EB0268", Offset = "0x3EB0268", VA = "0x3EB0268")]
		public WarperCreator()
		{
		}
	}
	[Token(Token = "0x200014B")]
	public class ExposureCompensator
	{
		[Token(Token = "0x60015E4")]
		[Address(RVA = "0x3EB0248", Offset = "0x3EB0248", VA = "0x3EB0248")]
		public ExposureCompensator()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class SeamFinder
	{
		[Token(Token = "0x60015E5")]
		[Address(RVA = "0x3EB0260", Offset = "0x3EB0260", VA = "0x3EB0260")]
		public SeamFinder()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class Blender
	{
		[Token(Token = "0x60015E6")]
		[Address(RVA = "0x3EB0230", Offset = "0x3EB0230", VA = "0x3EB0230")]
		public Blender()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class CameraParams
	{
		[Token(Token = "0x60015E7")]
		[Address(RVA = "0x3EB0240", Offset = "0x3EB0240", VA = "0x3EB0240")]
		public CameraParams()
		{
		}
	}
}
namespace OpenCvSharp.ML
{
	[Token(Token = "0x200014F")]
	public class ANN_MLP : StatModel
	{
		[Token(Token = "0x20001D5")]
		public enum ActivationFunctions
		{
			[Token(Token = "0x400078E")]
			Identity,
			[Token(Token = "0x400078F")]
			SigmoidSym,
			[Token(Token = "0x4000790")]
			Gaussian
		}

		[Token(Token = "0x20001D6")]
		[Flags]
		public enum TrainFlags
		{
			[Token(Token = "0x4000792")]
			UpdateWeights = 1,
			[Token(Token = "0x4000793")]
			NoInputScale = 2,
			[Token(Token = "0x4000794")]
			NoOutputScale = 4
		}

		[Token(Token = "0x20001D7")]
		public enum TrainingMethods
		{
			[Token(Token = "0x4000796")]
			BackProp,
			[Token(Token = "0x4000797")]
			RProp
		}

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<ANN_MLP> ptrObj;

		[Token(Token = "0x170001D9")]
		public TermCriteria TermCriteria
		{
			[Token(Token = "0x60015EB")]
			[Address(RVA = "0x3057894", Offset = "0x3057894", VA = "0x3057894")]
			get
			{
				return default(TermCriteria);
			}
			[Token(Token = "0x60015EC")]
			[Address(RVA = "0x3057900", Offset = "0x3057900", VA = "0x3057900")]
			set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public double BackpropWeightScale
		{
			[Token(Token = "0x60015ED")]
			[Address(RVA = "0x3057984", Offset = "0x3057984", VA = "0x3057984")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015EE")]
			[Address(RVA = "0x30579F0", Offset = "0x30579F0", VA = "0x30579F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public double BackpropMomentumScale
		{
			[Token(Token = "0x60015EF")]
			[Address(RVA = "0x3057A6C", Offset = "0x3057A6C", VA = "0x3057A6C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015F0")]
			[Address(RVA = "0x3057AD8", Offset = "0x3057AD8", VA = "0x3057AD8")]
			set
			{
			}
		}

		[Token(Token = "0x170001DC")]
		public double RpropDW0
		{
			[Token(Token = "0x60015F1")]
			[Address(RVA = "0x3057B54", Offset = "0x3057B54", VA = "0x3057B54")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015F2")]
			[Address(RVA = "0x3057BC0", Offset = "0x3057BC0", VA = "0x3057BC0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public double RpropDWPlus
		{
			[Token(Token = "0x60015F3")]
			[Address(RVA = "0x3057C3C", Offset = "0x3057C3C", VA = "0x3057C3C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015F4")]
			[Address(RVA = "0x3057CA8", Offset = "0x3057CA8", VA = "0x3057CA8")]
			set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public double RpropDWMinus
		{
			[Token(Token = "0x60015F5")]
			[Address(RVA = "0x3057D24", Offset = "0x3057D24", VA = "0x3057D24")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015F6")]
			[Address(RVA = "0x3057D90", Offset = "0x3057D90", VA = "0x3057D90")]
			set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public double RpropDWMin
		{
			[Token(Token = "0x60015F7")]
			[Address(RVA = "0x3057E0C", Offset = "0x3057E0C", VA = "0x3057E0C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015F8")]
			[Address(RVA = "0x3057E78", Offset = "0x3057E78", VA = "0x3057E78")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public double RpropDWMax
		{
			[Token(Token = "0x60015F9")]
			[Address(RVA = "0x3057EF4", Offset = "0x3057EF4", VA = "0x3057EF4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015FA")]
			[Address(RVA = "0x3057F60", Offset = "0x3057F60", VA = "0x3057F60")]
			set
			{
			}
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0x3057678", Offset = "0x3057678", VA = "0x3057678")]
		protected ANN_MLP(IntPtr p)
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0x305772C", Offset = "0x305772C", VA = "0x305772C")]
		public static ANN_MLP Create()
		{
			return null;
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0x30577B8", Offset = "0x30577B8", VA = "0x30577B8", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x3057FDC", Offset = "0x3057FDC", VA = "0x3057FDC", Slot = "21")]
		public virtual void SetLayerSizes(InputArray layerSizes)
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0x3058114", Offset = "0x3058114", VA = "0x3058114", Slot = "22")]
		public virtual Mat GetLayerSizes()
		{
			return null;
		}
	}
	[Token(Token = "0x2000150")]
	public enum SampleTypes
	{
		[Token(Token = "0x40005D6")]
		RowSample,
		[Token(Token = "0x40005D7")]
		ColSample
	}
	[Token(Token = "0x2000151")]
	public class KNearest : StatModel
	{
		[Token(Token = "0x20001D8")]
		public enum Types
		{
			[Token(Token = "0x4000799")]
			BruteForce = 1,
			[Token(Token = "0x400079A")]
			KdTree
		}

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<KNearest> ptrObj;

		[Token(Token = "0x170001E1")]
		public int DefaultK
		{
			[Token(Token = "0x6001600")]
			[Address(RVA = "0x3058428", Offset = "0x3058428", VA = "0x3058428")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001601")]
			[Address(RVA = "0x3058494", Offset = "0x3058494", VA = "0x3058494")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public new bool IsClassifier
		{
			[Token(Token = "0x6001602")]
			[Address(RVA = "0x3058510", Offset = "0x3058510", VA = "0x3058510")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001603")]
			[Address(RVA = "0x3058588", Offset = "0x3058588", VA = "0x3058588")]
			set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public int Emax
		{
			[Token(Token = "0x6001604")]
			[Address(RVA = "0x3058608", Offset = "0x3058608", VA = "0x3058608")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001605")]
			[Address(RVA = "0x3058674", Offset = "0x3058674", VA = "0x3058674")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public Types AlgorithmType
		{
			[Token(Token = "0x6001606")]
			[Address(RVA = "0x30586F0", Offset = "0x30586F0", VA = "0x30586F0")]
			get
			{
				return default(Types);
			}
			[Token(Token = "0x6001607")]
			[Address(RVA = "0x305875C", Offset = "0x305875C", VA = "0x305875C")]
			set
			{
			}
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0x3058214", Offset = "0x3058214", VA = "0x3058214")]
		protected KNearest(IntPtr p)
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0x30582C0", Offset = "0x30582C0", VA = "0x30582C0")]
		public static KNearest Create()
		{
			return null;
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0x305834C", Offset = "0x305834C", VA = "0x305834C", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0x30587D8", Offset = "0x30587D8", VA = "0x30587D8")]
		public float FindNearest(InputArray samples, int k, OutputArray results, [Optional] OutputArray neighborResponses, [Optional] OutputArray dist)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000152")]
	public class LogisticRegression : StatModel
	{
		[Token(Token = "0x20001D9")]
		public enum RegKinds
		{
			[Token(Token = "0x400079C")]
			RegDisable = -1,
			[Token(Token = "0x400079D")]
			RegL1,
			[Token(Token = "0x400079E")]
			RegL2
		}

		[Token(Token = "0x20001DA")]
		public enum Methods
		{
			[Token(Token = "0x40007A0")]
			Batch,
			[Token(Token = "0x40007A1")]
			MiniBatch
		}

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<LogisticRegression> ptrObj;

		[Token(Token = "0x170001E5")]
		public double LearningRate
		{
			[Token(Token = "0x600160C")]
			[Address(RVA = "0x3058C30", Offset = "0x3058C30", VA = "0x3058C30")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600160D")]
			[Address(RVA = "0x3058C9C", Offset = "0x3058C9C", VA = "0x3058C9C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public int Iterations
		{
			[Token(Token = "0x600160E")]
			[Address(RVA = "0x3058D18", Offset = "0x3058D18", VA = "0x3058D18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600160F")]
			[Address(RVA = "0x3058D84", Offset = "0x3058D84", VA = "0x3058D84")]
			set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public RegKinds Regularization
		{
			[Token(Token = "0x6001610")]
			[Address(RVA = "0x3058E00", Offset = "0x3058E00", VA = "0x3058E00")]
			get
			{
				return default(RegKinds);
			}
			[Token(Token = "0x6001611")]
			[Address(RVA = "0x3058E6C", Offset = "0x3058E6C", VA = "0x3058E6C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public Methods TrainMethod
		{
			[Token(Token = "0x6001612")]
			[Address(RVA = "0x3058EE8", Offset = "0x3058EE8", VA = "0x3058EE8")]
			get
			{
				return default(Methods);
			}
			[Token(Token = "0x6001613")]
			[Address(RVA = "0x3058F54", Offset = "0x3058F54", VA = "0x3058F54")]
			set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public int MiniBatchSize
		{
			[Token(Token = "0x6001614")]
			[Address(RVA = "0x3058FD0", Offset = "0x3058FD0", VA = "0x3058FD0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001615")]
			[Address(RVA = "0x305903C", Offset = "0x305903C", VA = "0x305903C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public TermCriteria TermCriteria
		{
			[Token(Token = "0x6001616")]
			[Address(RVA = "0x30590B8", Offset = "0x30590B8", VA = "0x30590B8")]
			get
			{
				return default(TermCriteria);
			}
			[Token(Token = "0x6001617")]
			[Address(RVA = "0x3059124", Offset = "0x3059124", VA = "0x3059124")]
			set
			{
			}
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0x3058A1C", Offset = "0x3058A1C", VA = "0x3058A1C")]
		protected LogisticRegression(IntPtr p)
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0x3058AC8", Offset = "0x3058AC8", VA = "0x3058AC8")]
		public static LogisticRegression Create()
		{
			return null;
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0x3058B54", Offset = "0x3058B54", VA = "0x3058B54", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0x30591A8", Offset = "0x30591A8", VA = "0x30591A8")]
		public float Predict(InputArray samples, [Optional] OutputArray results, int flags = 0)
		{
			return default(float);
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0x3059374", Offset = "0x3059374", VA = "0x3059374")]
		public Mat GetLearntThetas()
		{
			return null;
		}
	}
	[Token(Token = "0x2000153")]
	public class NormalBayesClassifier : StatModel
	{
		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<NormalBayesClassifier> ptrObj;

		[Token(Token = "0x600161A")]
		[Address(RVA = "0x3059474", Offset = "0x3059474", VA = "0x3059474")]
		protected NormalBayesClassifier(IntPtr p)
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0x3059520", Offset = "0x3059520", VA = "0x3059520")]
		public static NormalBayesClassifier Create()
		{
			return null;
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x30595AC", Offset = "0x30595AC", VA = "0x30595AC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0x3059688", Offset = "0x3059688", VA = "0x3059688")]
		public float PredictProb(InputArray inputs, OutputArray outputs, OutputArray outputProbs, int flags = 0)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000154")]
	public struct ParamGrid
	{
		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double MinVal;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double MaxVal;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double LogStep;

		[Token(Token = "0x600161E")]
		[Address(RVA = "0x30598C4", Offset = "0x30598C4", VA = "0x30598C4")]
		public ParamGrid(double minVal, double maxVal, double logStep)
		{
		}
	}
	[Token(Token = "0x2000155")]
	public class SVM : StatModel
	{
		[Token(Token = "0x20001DB")]
		public class Kernel
		{
			[Token(Token = "0x6001924")]
			[Address(RVA = "0x305A830", Offset = "0x305A830", VA = "0x305A830")]
			public Kernel()
			{
			}
		}

		[Token(Token = "0x20001DC")]
		public enum Types
		{
			[Token(Token = "0x40007A3")]
			CSvc = 100,
			[Token(Token = "0x40007A4")]
			NuSvc,
			[Token(Token = "0x40007A5")]
			OneClass,
			[Token(Token = "0x40007A6")]
			EpsSvr,
			[Token(Token = "0x40007A7")]
			NuSvr
		}

		[Token(Token = "0x20001DD")]
		public enum KernelTypes
		{
			[Token(Token = "0x40007A9")]
			Custom = -1,
			[Token(Token = "0x40007AA")]
			Linear,
			[Token(Token = "0x40007AB")]
			Poly,
			[Token(Token = "0x40007AC")]
			Rbf,
			[Token(Token = "0x40007AD")]
			Sigmoid,
			[Token(Token = "0x40007AE")]
			Chi2,
			[Token(Token = "0x40007AF")]
			Inter
		}

		[Token(Token = "0x20001DE")]
		public enum ParamTypes
		{
			[Token(Token = "0x40007B1")]
			C,
			[Token(Token = "0x40007B2")]
			Gamma,
			[Token(Token = "0x40007B3")]
			P,
			[Token(Token = "0x40007B4")]
			Nu,
			[Token(Token = "0x40007B5")]
			Coef,
			[Token(Token = "0x40007B6")]
			Degree
		}

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Ptr<SVM> ptrObj;

		[Token(Token = "0x170001EB")]
		public Types Type
		{
			[Token(Token = "0x6001622")]
			[Address(RVA = "0x3059AE4", Offset = "0x3059AE4", VA = "0x3059AE4")]
			get
			{
				return default(Types);
			}
			[Token(Token = "0x6001623")]
			[Address(RVA = "0x3059B50", Offset = "0x3059B50", VA = "0x3059B50")]
			set
			{
			}
		}

		[Token(Token = "0x170001EC")]
		public double Gamma
		{
			[Token(Token = "0x6001624")]
			[Address(RVA = "0x3059BCC", Offset = "0x3059BCC", VA = "0x3059BCC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001625")]
			[Address(RVA = "0x3059C38", Offset = "0x3059C38", VA = "0x3059C38")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public double Coef0
		{
			[Token(Token = "0x6001626")]
			[Address(RVA = "0x3059CB4", Offset = "0x3059CB4", VA = "0x3059CB4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001627")]
			[Address(RVA = "0x3059D20", Offset = "0x3059D20", VA = "0x3059D20")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public double Degree
		{
			[Token(Token = "0x6001628")]
			[Address(RVA = "0x3059D9C", Offset = "0x3059D9C", VA = "0x3059D9C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001629")]
			[Address(RVA = "0x3059E08", Offset = "0x3059E08", VA = "0x3059E08")]
			set
			{
			}
		}

		[Token(Token = "0x170001EF")]
		public double C
		{
			[Token(Token = "0x600162A")]
			[Address(RVA = "0x3059E84", Offset = "0x3059E84", VA = "0x3059E84")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600162B")]
			[Address(RVA = "0x3059EF0", Offset = "0x3059EF0", VA = "0x3059EF0")]
			set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		public double Nu
		{
			[Token(Token = "0x600162C")]
			[Address(RVA = "0x3059F6C", Offset = "0x3059F6C", VA = "0x3059F6C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600162D")]
			[Address(RVA = "0x3059FD8", Offset = "0x3059FD8", VA = "0x3059FD8")]
			set
			{
			}
		}

		[Token(Token = "0x170001F1")]
		public double P
		{
			[Token(Token = "0x600162E")]
			[Address(RVA = "0x305A054", Offset = "0x305A054", VA = "0x305A054")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600162F")]
			[Address(RVA = "0x305A0C0", Offset = "0x305A0C0", VA = "0x305A0C0")]
			set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public Mat ClassWeights
		{
			[Token(Token = "0x6001630")]
			[Address(RVA = "0x305A13C", Offset = "0x305A13C", VA = "0x305A13C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001631")]
			[Address(RVA = "0x305A1D4", Offset = "0x305A1D4", VA = "0x305A1D4")]
			set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public TermCriteria TermCriteria
		{
			[Token(Token = "0x6001632")]
			[Address(RVA = "0x305A26C", Offset = "0x305A26C", VA = "0x305A26C")]
			get
			{
				return default(TermCriteria);
			}
			[Token(Token = "0x6001633")]
			[Address(RVA = "0x305A2D8", Offset = "0x305A2D8", VA = "0x305A2D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001F4")]
		public KernelTypes KernelType
		{
			[Token(Token = "0x6001634")]
			[Address(RVA = "0x305A35C", Offset = "0x305A35C", VA = "0x305A35C")]
			get
			{
				return default(KernelTypes);
			}
			[Token(Token = "0x6001635")]
			[Address(RVA = "0x305A3C8", Offset = "0x305A3C8", VA = "0x305A3C8")]
			set
			{
			}
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0x30598D0", Offset = "0x30598D0", VA = "0x30598D0")]
		protected SVM(IntPtr p)
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x305997C", Offset = "0x305997C", VA = "0x305997C")]
		public static SVM Create()
		{
			return null;
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0x3059A08", Offset = "0x3059A08", VA = "0x3059A08", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0x305A444", Offset = "0x305A444", VA = "0x305A444")]
		public void SetCustomKernel(Kernel kernel)
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x305A4A4", Offset = "0x305A4A4", VA = "0x305A4A4")]
		public bool TrainAuto(TrainData data, int kFold = 10, [Optional] ParamGrid? cGrid, [Optional] ParamGrid? gammaGrid, [Optional] ParamGrid? pGrid, [Optional] ParamGrid? nuGrid, [Optional] ParamGrid? coeffGrid, [Optional] ParamGrid? degreeGrid, bool balanced = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0x305A504", Offset = "0x305A504", VA = "0x305A504")]
		public Mat GetSupportVectors()
		{
			return null;
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0x305A604", Offset = "0x305A604", VA = "0x305A604")]
		public double GetDecisionFunction(int i, OutputArray alpha, OutputArray svidx)
		{
			return default(double);
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0x305A7C8", Offset = "0x305A7C8", VA = "0x305A7C8")]
		public static ParamGrid GetDefaultGrid(ParamTypes paramId)
		{
			return default(ParamGrid);
		}
	}
	[Token(Token = "0x2000156")]
	public abstract class StatModel : Algorithm
	{
		[Token(Token = "0x20001DF")]
		[Flags]
		public enum Flags
		{
			[Token(Token = "0x40007B8")]
			UpdateModel = 1,
			[Token(Token = "0x40007B9")]
			RawOutput = 1,
			[Token(Token = "0x40007BA")]
			CompressedInput = 2,
			[Token(Token = "0x40007BB")]
			PreprocessedInput = 4
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0x3057724", Offset = "0x3057724", VA = "0x3057724")]
		protected StatModel()
		{
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0x305A8A0", Offset = "0x305A8A0", VA = "0x305A8A0", Slot = "13")]
		public virtual int GetVarCount()
		{
			return default(int);
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0x305A980", Offset = "0x305A980", VA = "0x305A980", Slot = "14")]
		public new virtual bool Empty()
		{
			return default(bool);
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0x305AA6C", Offset = "0x305AA6C", VA = "0x305AA6C", Slot = "15")]
		public virtual bool IsTrained()
		{
			return default(bool);
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0x305AB58", Offset = "0x305AB58", VA = "0x305AB58", Slot = "16")]
		public virtual bool IsClassifier()
		{
			return default(bool);
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0x305AC44", Offset = "0x305AC44", VA = "0x305AC44", Slot = "17")]
		public virtual bool Train(TrainData trainData, int flags = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0x305ACA4", Offset = "0x305ACA4", VA = "0x305ACA4", Slot = "18")]
		public virtual bool Train(InputArray samples, SampleTypes layout, InputArray responses)
		{
			return default(bool);
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0x305AE94", Offset = "0x305AE94", VA = "0x305AE94", Slot = "19")]
		public virtual float CalcError(TrainData data, bool test, OutputArray resp)
		{
			return default(float);
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0x305AEF4", Offset = "0x305AEF4", VA = "0x305AEF4", Slot = "20")]
		public virtual float Predict(InputArray samples, [Optional] OutputArray results, Flags flags = (Flags)0)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000157")]
	public class TrainData
	{
		[Token(Token = "0x6001644")]
		[Address(RVA = "0x305B0CC", Offset = "0x305B0CC", VA = "0x305B0CC")]
		public TrainData()
		{
		}
	}
}
namespace OpenCvSharp.Flann
{
	[Token(Token = "0x2000158")]
	public enum FlannCentersInit
	{
		[Token(Token = "0x40005E4")]
		Random,
		[Token(Token = "0x40005E5")]
		Gonzales,
		[Token(Token = "0x40005E6")]
		KMeansPP
	}
	[Token(Token = "0x2000159")]
	public enum FlannDistance
	{
		[Token(Token = "0x40005E8")]
		Euclidean = 1,
		[Token(Token = "0x40005E9")]
		L2 = 1,
		[Token(Token = "0x40005EA")]
		Manhattan = 2,
		[Token(Token = "0x40005EB")]
		L1 = 2,
		[Token(Token = "0x40005EC")]
		Minkowski = 3,
		[Token(Token = "0x40005ED")]
		Max = 4,
		[Token(Token = "0x40005EE")]
		HistIntersect = 5,
		[Token(Token = "0x40005EF")]
		Hellinger = 6,
		[Token(Token = "0x40005F0")]
		ChiSquare = 7,
		[Token(Token = "0x40005F1")]
		CS = 7,
		[Token(Token = "0x40005F2")]
		KullbackLeibler = 8,
		[Token(Token = "0x40005F3")]
		KL = 8,
		[Token(Token = "0x40005F4")]
		Hamming = 9
	}
	[Token(Token = "0x200015A")]
	public class Index : DisposableCvObject
	{
		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x6001645")]
		[Address(RVA = "0x3EB988C", Offset = "0x3EB988C", VA = "0x3EB988C")]
		public Index(InputArray features, IndexParams @params, FlannDistance distType = FlannDistance.Euclidean)
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0x3EB99E0", Offset = "0x3EB99E0", VA = "0x3EB99E0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0x3EB9AC0", Offset = "0x3EB9AC0", VA = "0x3EB9AC0")]
		public void KnnSearch(float[] queries, out int[] indices, out float[] dists, int knn, SearchParams @params)
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0x3EB9C88", Offset = "0x3EB9C88", VA = "0x3EB9C88")]
		public void KnnSearch(Mat queries, Mat indices, Mat dists, int knn, SearchParams @params)
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0x3EB9E04", Offset = "0x3EB9E04", VA = "0x3EB9E04")]
		public void KnnSearch(Mat queries, out int[] indices, out float[] dists, int knn, SearchParams @params)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0x3EB9FAC", Offset = "0x3EB9FAC", VA = "0x3EB9FAC")]
		public void RadiusSearch(float[] queries, int[] indices, float[] dists, float radius, int maxResults, SearchParams @params)
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0x3EBA128", Offset = "0x3EBA128", VA = "0x3EBA128")]
		public void RadiusSearch(Mat queries, Mat indices, Mat dists, float radius, int maxResults, SearchParams @params)
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0x3EBA2B4", Offset = "0x3EBA2B4", VA = "0x3EBA2B4")]
		public void RadiusSearch(Mat queries, int[] indices, float[] dists, float radius, int maxResults, SearchParams @params)
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0x3EBA43C", Offset = "0x3EBA43C", VA = "0x3EBA43C")]
		public void Save(string filename)
		{
		}
	}
	[Token(Token = "0x200015B")]
	public class AutotunedIndexParams : IndexParams
	{
		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x600164E")]
		[Address(RVA = "0x3EB92E4", Offset = "0x3EB92E4", VA = "0x3EB92E4")]
		public AutotunedIndexParams(float targetPrecision = 0.9f, float buildWeight = 0.01f, float memoryWeight = 0f, float sampleFraction = 0.1f)
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0x3EB9498", Offset = "0x3EB9498", VA = "0x3EB9498", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200015C")]
	public class CompositeIndexParams : IndexParams
	{
		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x6001650")]
		[Address(RVA = "0x3EB9690", Offset = "0x3EB9690", VA = "0x3EB9690")]
		public CompositeIndexParams(int trees = 4, int branching = 32, int iterations = 11, FlannCentersInit centersInit = FlannCentersInit.Random, float cbIndex = 0.2f)
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0x3EB9790", Offset = "0x3EB9790", VA = "0x3EB9790", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200015D")]
	public class IndexParams : DisposableCvObject
	{
		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool disposed;

		[Token(Token = "0x6001652")]
		[Address(RVA = "0x3EB93D4", Offset = "0x3EB93D4", VA = "0x3EB93D4")]
		public IndexParams()
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0x3EB9594", Offset = "0x3EB9594", VA = "0x3EB9594", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0x3EBA504", Offset = "0x3EBA504", VA = "0x3EBA504")]
		public string GetString(string key, string defaultVal)
		{
			return null;
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0x3EBA5C4", Offset = "0x3EBA5C4", VA = "0x3EBA5C4")]
		public string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0x3EBA5CC", Offset = "0x3EBA5CC", VA = "0x3EBA5CC")]
		public int GetInt(string key, int defaultVal)
		{
			return default(int);
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0x3EBA650", Offset = "0x3EBA650", VA = "0x3EBA650")]
		public int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0x3EBA658", Offset = "0x3EBA658", VA = "0x3EBA658")]
		public double GetDouble(string key, double defaultVal)
		{
			return default(double);
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0x3EBA6E4", Offset = "0x3EBA6E4", VA = "0x3EBA6E4")]
		public double GetDouble(string key)
		{
			return default(double);
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0x3EBA6EC", Offset = "0x3EBA6EC", VA = "0x3EBA6EC")]
		public void SetString(string key, string value)
		{
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0x3EBA770", Offset = "0x3EBA770", VA = "0x3EBA770")]
		public void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0x3EBA7F4", Offset = "0x3EBA7F4", VA = "0x3EBA7F4")]
		public void SetDouble(string key, double value)
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0x3EBA880", Offset = "0x3EBA880", VA = "0x3EBA880")]
		public void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0x3EBA90C", Offset = "0x3EBA90C", VA = "0x3EBA90C")]
		public void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0x3EBA994", Offset = "0x3EBA994", VA = "0x3EBA994")]
		public void SetAlgorithm(int value)
		{
		}
	}
	[Token(Token = "0x200015E")]
	public class KDTreeIndexParams : IndexParams
	{
		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x6001660")]
		[Address(RVA = "0x3EBAA10", Offset = "0x3EBAA10", VA = "0x3EBAA10")]
		public KDTreeIndexParams(int trees = 4)
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0x3EBAAE0", Offset = "0x3EBAAE0", VA = "0x3EBAAE0", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200015F")]
	public class KMeansIndexParams : IndexParams
	{
		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x6001662")]
		[Address(RVA = "0x3EBABDC", Offset = "0x3EBABDC", VA = "0x3EBABDC")]
		public KMeansIndexParams(int branching = 32, int iterations = 11, FlannCentersInit centersInit = FlannCentersInit.Random, float cbIndex = 0.2f)
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0x3EBACD4", Offset = "0x3EBACD4", VA = "0x3EBACD4", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000160")]
	public class LinearIndexParams : IndexParams
	{
		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x6001664")]
		[Address(RVA = "0x3EBADD0", Offset = "0x3EBADD0", VA = "0x3EBADD0")]
		public LinearIndexParams()
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0x3EBAE90", Offset = "0x3EBAE90", VA = "0x3EBAE90", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class SavedIndexParams : IndexParams
	{
		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x6001666")]
		[Address(RVA = "0x3EBAF8C", Offset = "0x3EBAF8C", VA = "0x3EBAF8C")]
		public SavedIndexParams(string filename)
		{
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0x3EBB098", Offset = "0x3EBB098", VA = "0x3EBB098", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class SearchParams : IndexParams
	{
		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool disposed;

		[Token(Token = "0x6001668")]
		[Address(RVA = "0x3EBB194", Offset = "0x3EBB194", VA = "0x3EBB194")]
		public SearchParams()
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0x3EBB298", Offset = "0x3EBB298", VA = "0x3EBB298")]
		public SearchParams(int checks)
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0x3EBB2A4", Offset = "0x3EBB2A4", VA = "0x3EBB2A4")]
		public SearchParams(int checks, float eps)
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0x3EBB1A4", Offset = "0x3EBB1A4", VA = "0x3EBB1A4")]
		public SearchParams(int checks, float eps, bool sorted)
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0x3EBB2AC", Offset = "0x3EBB2AC", VA = "0x3EBB2AC", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
}
namespace OpenCvSharp.Face
{
	[Token(Token = "0x2000163")]
	public class BasicFaceRecognizer : FaceRecognizer
	{
		[Token(Token = "0x600166D")]
		[Address(RVA = "0x3EB20A4", Offset = "0x3EB20A4", VA = "0x3EB20A4")]
		public BasicFaceRecognizer(IntPtr smartPtr)
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0x3EB212C", Offset = "0x3EB212C", VA = "0x3EB212C", Slot = "13")]
		protected override void FreeNativeResources()
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0x3EB21B4", Offset = "0x3EB21B4", VA = "0x3EB21B4", Slot = "14")]
		protected override IntPtr GetPureObjectPtr()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0x3EB2220", Offset = "0x3EB2220", VA = "0x3EB2220", Slot = "22")]
		public virtual int GetNumComponents()
		{
			return default(int);
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0x3EB2294", Offset = "0x3EB2294", VA = "0x3EB2294", Slot = "23")]
		public virtual void SetNumComponents(int val)
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0x3EB2318", Offset = "0x3EB2318", VA = "0x3EB2318", Slot = "24")]
		public new virtual double GetThreshold()
		{
			return default(double);
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0x3EB238C", Offset = "0x3EB238C", VA = "0x3EB238C", Slot = "25")]
		public new virtual void SetThreshold(double val)
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0x3EB2410", Offset = "0x3EB2410", VA = "0x3EB2410", Slot = "26")]
		public virtual Mat[] GetProjections()
		{
			return null;
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0x3EB2580", Offset = "0x3EB2580", VA = "0x3EB2580", Slot = "27")]
		public virtual Mat GetLabels()
		{
			return null;
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0x3EB2638", Offset = "0x3EB2638", VA = "0x3EB2638", Slot = "28")]
		public virtual Mat GetEigenValues()
		{
			return null;
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0x3EB26F0", Offset = "0x3EB26F0", VA = "0x3EB26F0", Slot = "29")]
		public virtual Mat GetEigenVectors()
		{
			return null;
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0x3EB27A8", Offset = "0x3EB27A8", VA = "0x3EB27A8", Slot = "30")]
		public virtual Mat GetMean()
		{
			return null;
		}
	}
	[Token(Token = "0x2000164")]
	public static class CvFace
	{
		[Token(Token = "0x6001679")]
		[Address(RVA = "0x3EB2860", Offset = "0x3EB2860", VA = "0x3EB2860")]
		public static BasicFaceRecognizer CreateEigenFaceRecognizer(int numComponents = 0, double threshold = double.MaxValue)
		{
			return null;
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0x3EB2924", Offset = "0x3EB2924", VA = "0x3EB2924")]
		public static BasicFaceRecognizer CreateFisherFaceRecognizer(int numComponents = 0, double threshold = double.MaxValue)
		{
			return null;
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x3EB29E8", Offset = "0x3EB29E8", VA = "0x3EB29E8")]
		public static LBPHFaceRecognizer CreateLBPHFaceRecognizer(int radius = 1, int neighbors = 8, int gridX = 8, int gridY = 8, double threshold = double.MaxValue)
		{
			return null;
		}
	}
	[Token(Token = "0x2000165")]
	public abstract class FaceRecognizer : Algorithm
	{
		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected IntPtr smartPointer;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool disposed;

		[Token(Token = "0x600167C")]
		[Address(RVA = "0x3EB20E8", Offset = "0x3EB20E8", VA = "0x3EB20E8")]
		protected FaceRecognizer(IntPtr smartPtr)
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0x3EB2864", Offset = "0x3EB2864", VA = "0x3EB2864")]
		public static BasicFaceRecognizer CreateEigenFaceRecognizer(int numComponents = 0, double threshold = double.MaxValue)
		{
			return null;
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0x3EB2928", Offset = "0x3EB2928", VA = "0x3EB2928")]
		public static BasicFaceRecognizer CreateFisherFaceRecognizer(int numComponents = 0, double threshold = double.MaxValue)
		{
			return null;
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0x3EB29EC", Offset = "0x3EB29EC", VA = "0x3EB29EC")]
		public static LBPHFaceRecognizer CreateLBPHFaceRecognizer(int radius = 1, int neighbors = 8, int gridX = 8, int gridY = 8, double threshold = double.MaxValue)
		{
			return null;
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0x3EB2B18", Offset = "0x3EB2B18", VA = "0x3EB2B18", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001681")]
		protected abstract void FreeNativeResources();

		[Token(Token = "0x6001682")]
		protected abstract IntPtr GetPureObjectPtr();

		[Token(Token = "0x6001683")]
		[Address(RVA = "0x3EB2BD8", Offset = "0x3EB2BD8", VA = "0x3EB2BD8", Slot = "15")]
		public virtual void Train(IEnumerable<Mat> src, IEnumerable<int> labels)
		{
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0x3EB2D00", Offset = "0x3EB2D00", VA = "0x3EB2D00")]
		public void Update(IEnumerable<Mat> src, IEnumerable<int> labels)
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0x3EB2E28", Offset = "0x3EB2E28", VA = "0x3EB2E28", Slot = "16")]
		public virtual int Predict(InputArray src)
		{
			return default(int);
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0x3EB2F00", Offset = "0x3EB2F00", VA = "0x3EB2F00", Slot = "17")]
		public virtual void Predict(InputArray src, out int label, out double confidence)
		{
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0x3EB2FF0", Offset = "0x3EB2FF0", VA = "0x3EB2FF0", Slot = "18")]
		public new virtual void Save(string fileName)
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0x3EB30B4", Offset = "0x3EB30B4", VA = "0x3EB30B4", Slot = "19")]
		public virtual void Load(string fileName)
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0x3EB3178", Offset = "0x3EB3178", VA = "0x3EB3178", Slot = "20")]
		public virtual void Save(FileStorage fs)
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0x3EB3248", Offset = "0x3EB3248", VA = "0x3EB3248", Slot = "21")]
		public virtual void Load(FileStorage fs)
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0x3EB3318", Offset = "0x3EB3318", VA = "0x3EB3318")]
		public void SetLabelInfo(int label, string strInfo)
		{
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x3EB33E4", Offset = "0x3EB33E4", VA = "0x3EB33E4")]
		public string GetLabelInfo(int label)
		{
			return null;
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0x3EB3590", Offset = "0x3EB3590", VA = "0x3EB3590")]
		public int[] GetLabelsByString(string str)
		{
			return null;
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x3EB3748", Offset = "0x3EB3748", VA = "0x3EB3748")]
		public double GetThreshold()
		{
			return default(double);
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0x3EB37BC", Offset = "0x3EB37BC", VA = "0x3EB37BC")]
		public void SetThreshold(double val)
		{
		}
	}
	[Token(Token = "0x2000166")]
	public class LBPHFaceRecognizer : FaceRecognizer
	{
		[Token(Token = "0x6001690")]
		[Address(RVA = "0x3EB2AD4", Offset = "0x3EB2AD4", VA = "0x3EB2AD4")]
		public LBPHFaceRecognizer(IntPtr smartPtr)
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0x3EB3840", Offset = "0x3EB3840", VA = "0x3EB3840", Slot = "13")]
		protected override void FreeNativeResources()
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x3EB38C8", Offset = "0x3EB38C8", VA = "0x3EB38C8", Slot = "14")]
		protected override IntPtr GetPureObjectPtr()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x3EB3934", Offset = "0x3EB3934", VA = "0x3EB3934", Slot = "22")]
		public virtual int GetGridX()
		{
			return default(int);
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x3EB39A8", Offset = "0x3EB39A8", VA = "0x3EB39A8", Slot = "23")]
		public virtual void SetGridX(int val)
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0x3EB3A2C", Offset = "0x3EB3A2C", VA = "0x3EB3A2C", Slot = "24")]
		public virtual int GetGridY()
		{
			return default(int);
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x3EB3AA0", Offset = "0x3EB3AA0", VA = "0x3EB3AA0", Slot = "25")]
		public virtual void SetGridY(int val)
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0x3EB3B24", Offset = "0x3EB3B24", VA = "0x3EB3B24", Slot = "26")]
		public virtual int GetRadius()
		{
			return default(int);
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0x3EB3B98", Offset = "0x3EB3B98", VA = "0x3EB3B98", Slot = "27")]
		public virtual void SetRadius(int val)
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0x3EB3C1C", Offset = "0x3EB3C1C", VA = "0x3EB3C1C", Slot = "28")]
		public virtual int GetNeighbors()
		{
			return default(int);
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x3EB3C90", Offset = "0x3EB3C90", VA = "0x3EB3C90", Slot = "29")]
		public virtual void SetNeighbors(int val)
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x3EB3D14", Offset = "0x3EB3D14", VA = "0x3EB3D14", Slot = "30")]
		public new virtual double GetThreshold()
		{
			return default(double);
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x3EB3D88", Offset = "0x3EB3D88", VA = "0x3EB3D88", Slot = "31")]
		public new virtual void SetThreshold(double val)
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0x3EB3E0C", Offset = "0x3EB3E0C", VA = "0x3EB3E0C", Slot = "32")]
		public virtual Mat[] GetHistograms()
		{
			return null;
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x3EB3F7C", Offset = "0x3EB3F7C", VA = "0x3EB3F7C", Slot = "33")]
		public virtual Mat GetLabels()
		{
			return null;
		}
	}
}
namespace OpenCvSharp.Aruco
{
	[Token(Token = "0x2000167")]
	public static class CvAruco
	{
		[Token(Token = "0x600169F")]
		[Address(RVA = "0x221880C", Offset = "0x221880C", VA = "0x221880C")]
		public static void DetectMarkers(InputArray image, Dictionary dictionary, out Point2f[][] corners, out int[] ids, DetectorParameters parameters, out Point2f[][] rejectedImgPoints)
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0x2218CC0", Offset = "0x2218CC0", VA = "0x2218CC0")]
		public static void DrawDetectedMarkers(InputArray image, Point2f[][] corners, IEnumerable<int> ids)
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0x2218D30", Offset = "0x2218D30", VA = "0x2218D30")]
		public static void DrawDetectedMarkers(InputArray image, Point2f[][] corners, IEnumerable<int> ids, Scalar borderColor)
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0x221905C", Offset = "0x221905C", VA = "0x221905C")]
		public static void DrawMarker(Dictionary dictionary, int id, int sidePixels, OutputArray mat, int borderBits = 1)
		{
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0x22191D0", Offset = "0x22191D0", VA = "0x22191D0")]
		public static Dictionary GetPredefinedDictionary(PredefinedDictionaryName name)
		{
			return null;
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0x2219310", Offset = "0x2219310", VA = "0x2219310")]
		public static void DrawAxis(InputArray image, double[,] cameraMatrix, IEnumerable<double> distCoeffs, double[] rvec, double[] tvec, float length)
		{
		}
	}
	[Token(Token = "0x2000168")]
	public class DetectorParameters : DisposableCvObject
	{
		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Ptr<DetectorParameters> ptrObj;

		[Token(Token = "0x170001F5")]
		public int AdaptiveThreshWinSizeMin
		{
			[Token(Token = "0x60016A7")]
			[Address(RVA = "0x22196D0", Offset = "0x22196D0", VA = "0x22196D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x2219748", Offset = "0x2219748", VA = "0x2219748")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public int AdaptiveThreshWinSizeMax
		{
			[Token(Token = "0x60016A9")]
			[Address(RVA = "0x22197D0", Offset = "0x22197D0", VA = "0x22197D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016AA")]
			[Address(RVA = "0x2219848", Offset = "0x2219848", VA = "0x2219848")]
			set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public int AdaptiveThreshWinSizeStep
		{
			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x22198D0", Offset = "0x22198D0", VA = "0x22198D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x2219948", Offset = "0x2219948", VA = "0x2219948")]
			set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		public double AdaptiveThreshConstant
		{
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x22199D0", Offset = "0x22199D0", VA = "0x22199D0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x2219A48", Offset = "0x2219A48", VA = "0x2219A48")]
			set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public double MinMarkerPerimeterRate
		{
			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x2219AD0", Offset = "0x2219AD0", VA = "0x2219AD0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016B0")]
			[Address(RVA = "0x2219B48", Offset = "0x2219B48", VA = "0x2219B48")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public double MaxMarkerPerimeterRate
		{
			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x2219BD0", Offset = "0x2219BD0", VA = "0x2219BD0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016B2")]
			[Address(RVA = "0x2219C48", Offset = "0x2219C48", VA = "0x2219C48")]
			set
			{
			}
		}

		[Token(Token = "0x170001FB")]
		public double PolygonalApproxAccuracyRate
		{
			[Token(Token = "0x60016B3")]
			[Address(RVA = "0x2219CD0", Offset = "0x2219CD0", VA = "0x2219CD0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016B4")]
			[Address(RVA = "0x2219D48", Offset = "0x2219D48", VA = "0x2219D48")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public double MinCornerDistanceRate
		{
			[Token(Token = "0x60016B5")]
			[Address(RVA = "0x2219DD0", Offset = "0x2219DD0", VA = "0x2219DD0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016B6")]
			[Address(RVA = "0x2219E48", Offset = "0x2219E48", VA = "0x2219E48")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public int MinDistanceToBorder
		{
			[Token(Token = "0x60016B7")]
			[Address(RVA = "0x2219ED0", Offset = "0x2219ED0", VA = "0x2219ED0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016B8")]
			[Address(RVA = "0x2219F48", Offset = "0x2219F48", VA = "0x2219F48")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public double MinMarkerDistanceRate
		{
			[Token(Token = "0x60016B9")]
			[Address(RVA = "0x2219FD0", Offset = "0x2219FD0", VA = "0x2219FD0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016BA")]
			[Address(RVA = "0x221A048", Offset = "0x221A048", VA = "0x221A048")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public bool DoCornerRefinement
		{
			[Token(Token = "0x60016BB")]
			[Address(RVA = "0x221A0D0", Offset = "0x221A0D0", VA = "0x221A0D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016BC")]
			[Address(RVA = "0x221A148", Offset = "0x221A148", VA = "0x221A148")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public int CornerRefinementWinSize
		{
			[Token(Token = "0x60016BD")]
			[Address(RVA = "0x221A1D0", Offset = "0x221A1D0", VA = "0x221A1D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016BE")]
			[Address(RVA = "0x221A248", Offset = "0x221A248", VA = "0x221A248")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public int CornerRefinementMaxIterations
		{
			[Token(Token = "0x60016BF")]
			[Address(RVA = "0x221A2D0", Offset = "0x221A2D0", VA = "0x221A2D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016C0")]
			[Address(RVA = "0x221A348", Offset = "0x221A348", VA = "0x221A348")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public double CornerRefinementMinAccuracy
		{
			[Token(Token = "0x60016C1")]
			[Address(RVA = "0x221A3D0", Offset = "0x221A3D0", VA = "0x221A3D0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016C2")]
			[Address(RVA = "0x221A448", Offset = "0x221A448", VA = "0x221A448")]
			set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public int MarkerBorderBits
		{
			[Token(Token = "0x60016C3")]
			[Address(RVA = "0x221A4D0", Offset = "0x221A4D0", VA = "0x221A4D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016C4")]
			[Address(RVA = "0x221A548", Offset = "0x221A548", VA = "0x221A548")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public int PerspectiveRemovePixelPerCell
		{
			[Token(Token = "0x60016C5")]
			[Address(RVA = "0x221A5D0", Offset = "0x221A5D0", VA = "0x221A5D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016C6")]
			[Address(RVA = "0x221A648", Offset = "0x221A648", VA = "0x221A648")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public double PerspectiveRemoveIgnoredMarginPerCell
		{
			[Token(Token = "0x60016C7")]
			[Address(RVA = "0x221A6D0", Offset = "0x221A6D0", VA = "0x221A6D0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016C8")]
			[Address(RVA = "0x221A748", Offset = "0x221A748", VA = "0x221A748")]
			set
			{
			}
		}

		[Token(Token = "0x17000206")]
		public double MaxErroneousBitsInBorderRate
		{
			[Token(Token = "0x60016C9")]
			[Address(RVA = "0x221A7D0", Offset = "0x221A7D0", VA = "0x221A7D0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016CA")]
			[Address(RVA = "0x221A848", Offset = "0x221A848", VA = "0x221A848")]
			set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public double MinOtsuStdDev
		{
			[Token(Token = "0x60016CB")]
			[Address(RVA = "0x221A8D0", Offset = "0x221A8D0", VA = "0x221A8D0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016CC")]
			[Address(RVA = "0x221A948", Offset = "0x221A948", VA = "0x221A948")]
			set
			{
			}
		}

		[Token(Token = "0x17000208")]
		public double ErrorCorrectionRate
		{
			[Token(Token = "0x60016CD")]
			[Address(RVA = "0x221A9D0", Offset = "0x221A9D0", VA = "0x221A9D0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016CE")]
			[Address(RVA = "0x221AA48", Offset = "0x221AA48", VA = "0x221AA48")]
			set
			{
			}
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0x2219598", Offset = "0x2219598", VA = "0x2219598")]
		protected DetectorParameters(IntPtr p)
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0x2219644", Offset = "0x2219644", VA = "0x2219644")]
		public static DetectorParameters Create()
		{
			return null;
		}
	}
	[Token(Token = "0x2000169")]
	public class Dictionary : DisposableCvObject
	{
		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Ptr<Dictionary> ptrObj;

		[Token(Token = "0x17000209")]
		public Mat BytesList
		{
			[Token(Token = "0x60016D0")]
			[Address(RVA = "0x221AAD0", Offset = "0x221AAD0", VA = "0x221AAD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020A")]
		public int MarkerSize
		{
			[Token(Token = "0x60016D1")]
			[Address(RVA = "0x221AB78", Offset = "0x221AB78", VA = "0x221AB78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016D2")]
			[Address(RVA = "0x221ABF0", Offset = "0x221ABF0", VA = "0x221ABF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public int MaxCorrectionBits
		{
			[Token(Token = "0x60016D3")]
			[Address(RVA = "0x221AC78", Offset = "0x221AC78", VA = "0x221AC78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016D4")]
			[Address(RVA = "0x221ACF0", Offset = "0x221ACF0", VA = "0x221ACF0")]
			set
			{
			}
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0x2219264", Offset = "0x2219264", VA = "0x2219264")]
		internal Dictionary(IntPtr p)
		{
		}
	}
	[Token(Token = "0x200016A")]
	public enum PredefinedDictionaryName
	{
		[Token(Token = "0x4000603")]
		Dict4X4_50,
		[Token(Token = "0x4000604")]
		Dict4X4_100,
		[Token(Token = "0x4000605")]
		Dict4X4_250,
		[Token(Token = "0x4000606")]
		Dict4X4_1000,
		[Token(Token = "0x4000607")]
		Dict5X5_50,
		[Token(Token = "0x4000608")]
		Dict5X5_100,
		[Token(Token = "0x4000609")]
		Dict5X5_250,
		[Token(Token = "0x400060A")]
		Dict5X5_1000,
		[Token(Token = "0x400060B")]
		Dict6X6_50,
		[Token(Token = "0x400060C")]
		Dict6X6_100,
		[Token(Token = "0x400060D")]
		Dict6X6_250,
		[Token(Token = "0x400060E")]
		Dict6X6_1000,
		[Token(Token = "0x400060F")]
		Dict7X7_50,
		[Token(Token = "0x4000610")]
		Dict7X7_100,
		[Token(Token = "0x4000611")]
		Dict7X7_250,
		[Token(Token = "0x4000612")]
		Dict7X7_1000,
		[Token(Token = "0x4000613")]
		DictArucoOriginal
	}
}
namespace OpenCvSharp.Util
{
	[Token(Token = "0x200016B")]
	public class ArrayAddress1<T> : DisposableObject
	{
		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected Array array;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GCHandle gch;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected object original;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool disposed;

		[Token(Token = "0x1700020C")]
		public IntPtr Pointer
		{
			[Token(Token = "0x60016D9")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x1700020D")]
		public int Length
		{
			[Token(Token = "0x60016DB")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60016D5")]
		public ArrayAddress1(T[] array)
		{
		}

		[Token(Token = "0x60016D6")]
		public ArrayAddress1(IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x60016D7")]
		public ArrayAddress1(T[,] array)
		{
		}

		[Token(Token = "0x60016D8")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60016DA")]
		public static implicit operator IntPtr(ArrayAddress1<T> self)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200016C")]
	public class ArrayAddress2<T> : DisposableObject where T : struct
	{
		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool disposed;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[][] array;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GCHandle[] gch;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected IntPtr[] ptr;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected object original;

		[Token(Token = "0x1700020E")]
		public IntPtr[] Pointer
		{
			[Token(Token = "0x60016E1")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020F")]
		public int Dim1Length
		{
			[Token(Token = "0x60016E3")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000210")]
		public int[] Dim2Lengths
		{
			[Token(Token = "0x60016E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016DC")]
		public ArrayAddress2()
		{
		}

		[Token(Token = "0x60016DD")]
		public ArrayAddress2(T[][] array)
		{
		}

		[Token(Token = "0x60016DE")]
		public ArrayAddress2(IEnumerable<IEnumerable<T>> enumerable)
		{
		}

		[Token(Token = "0x60016DF")]
		protected void Initialize(T[][] target)
		{
		}

		[Token(Token = "0x60016E0")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60016E2")]
		public static implicit operator IntPtr[](ArrayAddress2<T> self)
		{
			return null;
		}
	}
	[Token(Token = "0x200016D")]
	public class DynamicInvoker<T> : DisposableObject
	{
		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE08", Offset = "0x1DDBE08")]
		private string <DllName>k__BackingField;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE18", Offset = "0x1DDBE18")]
		private string <FunctionName>k__BackingField;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE28", Offset = "0x1DDBE28")]
		private IntPtr <PtrLib>k__BackingField;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE38", Offset = "0x1DDBE38")]
		private IntPtr <PtrProc>k__BackingField;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE48", Offset = "0x1DDBE48")]
		private T <Call>k__BackingField;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool disposed;

		[Token(Token = "0x17000211")]
		public string DllName
		{
			[Token(Token = "0x60016E5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE58", Offset = "0x1DDCE58")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016E6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE68", Offset = "0x1DDCE68")]
			private set
			{
			}
		}

		[Token(Token = "0x17000212")]
		public string FunctionName
		{
			[Token(Token = "0x60016E7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE78", Offset = "0x1DDCE78")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE88", Offset = "0x1DDCE88")]
			private set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public IntPtr PtrLib
		{
			[Token(Token = "0x60016E9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCE98", Offset = "0x1DDCE98")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x60016EA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCEA8", Offset = "0x1DDCEA8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public IntPtr PtrProc
		{
			[Token(Token = "0x60016EB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCEB8", Offset = "0x1DDCEB8")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x60016EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCEC8", Offset = "0x1DDCEC8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public T Call
		{
			[Token(Token = "0x60016ED")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCED8", Offset = "0x1DDCED8")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60016EE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCEE8", Offset = "0x1DDCEE8")]
			private set
			{
			}
		}

		[Token(Token = "0x60016EF")]
		public DynamicInvoker(string dllName, string functionName)
		{
		}

		[Token(Token = "0x60016F0")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200016E")]
	internal delegate TResult Func<in T1, out TResult>(T1 t1);
	[Token(Token = "0x200016F")]
	internal static class EnumerableEx
	{
		[Token(Token = "0x20001E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBA78", Offset = "0x1DDBA78")]
		private sealed class <Select>d__0<TSource, TResult> : IEnumerable<TResult>, IEnumerable, IEnumerator<TResult>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40007BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40007BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TResult <>2__current;

			[Token(Token = "0x40007BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40007BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<TSource> enumerable;

			[Token(Token = "0x40007C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<TSource> <>3__enumerable;

			[Token(Token = "0x40007C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Func<TSource, TResult> selector;

			[Token(Token = "0x40007C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<TSource, TResult> <>3__selector;

			[Token(Token = "0x40007C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<TSource> <>7__wrap1;

			[Token(Token = "0x170002CB")]
			private TResult System.Collections.Generic.IEnumerator<TResult>.Current
			{
				[Token(Token = "0x6001929")]
				[DebuggerHidden]
				get
				{
					return (TResult)null;
				}
			}

			[Token(Token = "0x170002CC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600192B")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001925")]
			[DebuggerHidden]
			public <Select>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001926")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001927")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001928")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600192A")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600192C")]
			[DebuggerHidden]
			private IEnumerator<TResult> System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600192D")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x20001E1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBA88", Offset = "0x1DDBA88")]
		private sealed class <>c
		{
			[Token(Token = "0x40007C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40007C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Mat, IntPtr> <>9__3_0;

			[Token(Token = "0x40007C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<InputArray, IntPtr> <>9__4_0;

			[Token(Token = "0x600192F")]
			[Address(RVA = "0x4057180", Offset = "0x4057180", VA = "0x4057180")]
			public <>c()
			{
			}

			[Token(Token = "0x6001930")]
			[Address(RVA = "0x4057188", Offset = "0x4057188", VA = "0x4057188")]
			internal IntPtr <SelectPtrs>b__3_0(Mat obj)
			{
				return default(IntPtr);
			}

			[Token(Token = "0x6001931")]
			[Address(RVA = "0x405721C", Offset = "0x405721C", VA = "0x405721C")]
			internal IntPtr <SelectPtrs>b__4_0(InputArray obj)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x20001E2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBA98", Offset = "0x1DDBA98")]
		private sealed class <Where>d__5<TSource> : IEnumerable<TSource>, IEnumerable, IEnumerator<TSource>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40007C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40007C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TSource <>2__current;

			[Token(Token = "0x40007C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40007CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<TSource> enumerable;

			[Token(Token = "0x40007CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<TSource> <>3__enumerable;

			[Token(Token = "0x40007CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Func<TSource, bool> predicate;

			[Token(Token = "0x40007CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<TSource, bool> <>3__predicate;

			[Token(Token = "0x40007CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<TSource> <>7__wrap1;

			[Token(Token = "0x170002CD")]
			private TSource System.Collections.Generic.IEnumerator<TSource>.Current
			{
				[Token(Token = "0x6001936")]
				[DebuggerHidden]
				get
				{
					return (TSource)null;
				}
			}

			[Token(Token = "0x170002CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001938")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001932")]
			[DebuggerHidden]
			public <Where>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001933")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001934")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001935")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001937")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001939")]
			[DebuggerHidden]
			private IEnumerator<TSource> System.Collections.Generic.IEnumerable<TSource>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600193A")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x60016F5")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDCEF8", Offset = "0x1DDCEF8")]
		public static IEnumerable<TResult> Select<TSource, TResult>(IEnumerable<TSource> enumerable, Func<TSource, TResult> selector)
		{
			return null;
		}

		[Token(Token = "0x60016F6")]
		public static TResult[] SelectToArray<TSource, TResult>(IEnumerable<TSource> enumerable, Func<TSource, TResult> selector)
		{
			return null;
		}

		[Token(Token = "0x60016F7")]
		public static TResult[] SelectToArray<TSource, TResult>(IEnumerable enumerable, Func<TSource, TResult> selector)
		{
			return null;
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x4056F30", Offset = "0x4056F30", VA = "0x4056F30")]
		public static IntPtr[] SelectPtrs(IEnumerable<Mat> enumerable)
		{
			return null;
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x4057024", Offset = "0x4057024", VA = "0x4057024")]
		public static IntPtr[] SelectPtrs(IEnumerable<InputArray> enumerable)
		{
			return null;
		}

		[Token(Token = "0x60016FA")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1DDCF5C", Offset = "0x1DDCF5C")]
		public static IEnumerable<TSource> Where<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x60016FB")]
		public static TSource[] WhereToArray<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicate)
		{
			return null;
		}

		[Token(Token = "0x60016FC")]
		public static TSource[] ToArray<TSource>(IEnumerable<TSource> enumerable)
		{
			return null;
		}

		[Token(Token = "0x60016FD")]
		public static bool Any<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicate)
		{
			return default(bool);
		}

		[Token(Token = "0x60016FE")]
		public static bool AnyNull<TSource>(IEnumerable<TSource> enumerable) where TSource : class
		{
			return default(bool);
		}

		[Token(Token = "0x60016FF")]
		public static bool All<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicate)
		{
			return default(bool);
		}

		[Token(Token = "0x6001700")]
		public static int Count<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicate)
		{
			return default(int);
		}

		[Token(Token = "0x6001701")]
		public static int Count<TSource>(IEnumerable<TSource> enumerable)
		{
			return default(int);
		}

		[Token(Token = "0x6001702")]
		public static bool IsEmpty<TSource>(IEnumerable<TSource> enumerable)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000170")]
	public static class PInvokeHelper
	{
		[Token(Token = "0x6001703")]
		[Address(RVA = "0x40572B0", Offset = "0x40572B0", VA = "0x40572B0")]
		public static void TryPInvoke()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0x40573A4", Offset = "0x40573A4", VA = "0x40573A4")]
		public static void DllImportError(Exception ex)
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0x40573F0", Offset = "0x40573F0", VA = "0x40573F0")]
		public static OpenCvSharpException CreateException(Exception ex)
		{
			return null;
		}
	}
	[Token(Token = "0x2000171")]
	internal enum OS
	{
		[Token(Token = "0x4000624")]
		Windows,
		[Token(Token = "0x4000625")]
		Unix
	}
	[Token(Token = "0x2000172")]
	internal enum Runtime
	{
		[Token(Token = "0x4000627")]
		DotNet,
		[Token(Token = "0x4000628")]
		Mono
	}
	[Token(Token = "0x2000173")]
	internal static class Platform
	{
		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly OS OS;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly Runtime Runtime;

		[Token(Token = "0x6001706")]
		[Address(RVA = "0x405764C", Offset = "0x405764C", VA = "0x405764C")]
		static Platform()
		{
		}
	}
	[Token(Token = "0x2000174")]
	public class ScopedGCHandle : IDisposable
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle handle;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool disposed;

		[Token(Token = "0x17000216")]
		public GCHandle Handle
		{
			[Token(Token = "0x6001711")]
			[Address(RVA = "0x4057AAC", Offset = "0x4057AAC", VA = "0x4057AAC")]
			get
			{
				return default(GCHandle);
			}
		}

		[Token(Token = "0x17000217")]
		public bool IsAllocated
		{
			[Token(Token = "0x6001712")]
			[Address(RVA = "0x4057AB4", Offset = "0x4057AB4", VA = "0x4057AB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000218")]
		public object Target
		{
			[Token(Token = "0x6001713")]
			[Address(RVA = "0x4057AC0", Offset = "0x4057AC0", VA = "0x4057AC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001714")]
			[Address(RVA = "0x4057ACC", Offset = "0x4057ACC", VA = "0x4057ACC")]
			set
			{
			}
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x4057744", Offset = "0x4057744", VA = "0x4057744")]
		public ScopedGCHandle(object value)
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0x4057784", Offset = "0x4057784", VA = "0x4057784")]
		public ScopedGCHandle(object value, GCHandleType type)
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0x40577D4", Offset = "0x40577D4", VA = "0x40577D4")]
		private ScopedGCHandle(GCHandle handle)
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0x4057804", Offset = "0x4057804", VA = "0x4057804")]
		public static ScopedGCHandle Alloc(object value)
		{
			return null;
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x4057864", Offset = "0x4057864", VA = "0x4057864")]
		public static ScopedGCHandle Alloc(object value, GCHandleType type)
		{
			return null;
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x40578D4", Offset = "0x40578D4", VA = "0x40578D4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0x4057950", Offset = "0x4057950", VA = "0x4057950", Slot = "5")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0x40579A0", Offset = "0x40579A0", VA = "0x40579A0", Slot = "1")]
		~ScopedGCHandle()
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x4057A14", Offset = "0x4057A14", VA = "0x4057A14")]
		public static ScopedGCHandle FromIntPtr(IntPtr value)
		{
			return null;
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x4057A90", Offset = "0x4057A90", VA = "0x4057A90")]
		public static IntPtr ToIntPtr(ScopedGCHandle value)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x4057AD8", Offset = "0x4057AD8", VA = "0x4057AD8")]
		public IntPtr AddrOfPinnedObject()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x4057AE4", Offset = "0x4057AE4", VA = "0x4057AE4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0x4057AF0", Offset = "0x4057AF0", VA = "0x4057AF0")]
		public void Free()
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0x4057AFC", Offset = "0x4057AFC", VA = "0x4057AFC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x4057B08", Offset = "0x4057B08", VA = "0x4057B08", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000175")]
	public class StringArrayAddress : ArrayAddress2<byte>
	{
		[Token(Token = "0x600171A")]
		[Address(RVA = "0x4057B98", Offset = "0x4057B98", VA = "0x4057B98")]
		public StringArrayAddress(string[] stringArray)
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0x4057CD0", Offset = "0x4057CD0", VA = "0x4057CD0")]
		public StringArrayAddress(IEnumerable<string> enumerable)
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class StructurePointer : IDisposable
	{
		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE58", Offset = "0x1DDBE58")]
		private IntPtr <Ptr>k__BackingField;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE68", Offset = "0x1DDBE68")]
		private object <SrcObj>k__BackingField;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE78", Offset = "0x1DDBE78")]
		private int <Size>k__BackingField;

		[Token(Token = "0x17000219")]
		public IntPtr Ptr
		{
			[Token(Token = "0x600171C")]
			[Address(RVA = "0x4057D38", Offset = "0x4057D38", VA = "0x4057D38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCFC0", Offset = "0x1DDCFC0")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x600171D")]
			[Address(RVA = "0x4057D40", Offset = "0x4057D40", VA = "0x4057D40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCFD0", Offset = "0x1DDCFD0")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public object SrcObj
		{
			[Token(Token = "0x600171E")]
			[Address(RVA = "0x4057D48", Offset = "0x4057D48", VA = "0x4057D48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCFE0", Offset = "0x1DDCFE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600171F")]
			[Address(RVA = "0x4057D50", Offset = "0x4057D50", VA = "0x4057D50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDCFF0", Offset = "0x1DDCFF0")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public int Size
		{
			[Token(Token = "0x6001720")]
			[Address(RVA = "0x4057D58", Offset = "0x4057D58", VA = "0x4057D58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD000", Offset = "0x1DDD000")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001721")]
			[Address(RVA = "0x4057D60", Offset = "0x4057D60", VA = "0x4057D60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD010", Offset = "0x1DDD010")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0x4057D68", Offset = "0x4057D68", VA = "0x4057D68")]
		public StructurePointer(object obj)
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0x4057E70", Offset = "0x4057E70", VA = "0x4057E70")]
		public StructurePointer()
		{
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0x4057ED4", Offset = "0x4057ED4", VA = "0x4057ED4")]
		public static implicit operator IntPtr(StructurePointer self)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x4057EEC", Offset = "0x4057EEC", VA = "0x4057EEC", Slot = "5")]
		public virtual object ToStructure()
		{
			return null;
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x4057F78", Offset = "0x4057F78", VA = "0x4057F78", Slot = "6")]
		public virtual void Dispose()
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class StructurePointer<T> : StructurePointer
	{
		[Token(Token = "0x6001727")]
		public StructurePointer(T obj)
		{
		}

		[Token(Token = "0x6001728")]
		public StructurePointer()
		{
		}

		[Token(Token = "0x6001729")]
		public static implicit operator IntPtr(StructurePointer<T> self)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600172A")]
		public new T ToStructure()
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000178")]
	public delegate void Action();
	[Token(Token = "0x2000179")]
	public static class TimeMeasurer
	{
		[Token(Token = "0x600172F")]
		[Address(RVA = "0x4058004", Offset = "0x4058004", VA = "0x4058004")]
		public static TimeSpan Measure(Action action)
		{
			return default(TimeSpan);
		}
	}
	[Token(Token = "0x200017A")]
	public static class Utility
	{
		[Token(Token = "0x6001730")]
		[Address(RVA = "0x4058098", Offset = "0x4058098", VA = "0x4058098")]
		public unsafe static void CopyMemory(void* outDest, void* inSrc, uint inNumOfBytes)
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x40581A8", Offset = "0x40581A8", VA = "0x40581A8")]
		public unsafe static void CopyMemory(void* outDest, void* inSrc, int inNumOfBytes)
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0x40581AC", Offset = "0x40581AC", VA = "0x40581AC")]
		public static void CopyMemory(IntPtr outDest, IntPtr inSrc, uint inNumOfBytes)
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x40581B0", Offset = "0x40581B0", VA = "0x40581B0")]
		public static void CopyMemory(IntPtr outDest, IntPtr inSrc, int inNumOfBytes)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x40581B4", Offset = "0x40581B4", VA = "0x40581B4")]
		public unsafe static void ZeroMemory(void* outDest, uint inNumOfBytes)
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x40582A8", Offset = "0x40582A8", VA = "0x40582A8")]
		public unsafe static void ZeroMemory(void* outDest, int inNumOfBytes)
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x40582AC", Offset = "0x40582AC", VA = "0x40582AC")]
		public static void ZeroMemory(IntPtr outDest, uint inNumOfBytes)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0x40582B0", Offset = "0x40582B0", VA = "0x40582B0")]
		public static void ZeroMemory(IntPtr outDest, int inNumOfBytes)
		{
		}

		[Token(Token = "0x6001738")]
		public static T Cast<T>(IntPtr p)
		{
			return (T)null;
		}

		[Token(Token = "0x6001739")]
		public static T ToObject<T>(IntPtr ptr) where T : struct
		{
			return (T)null;
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x40582B4", Offset = "0x40582B4", VA = "0x40582B4")]
		private static bool CheckType(Type test, Type target)
		{
			return default(bool);
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0x40583DC", Offset = "0x40583DC", VA = "0x40583DC")]
		public static int SizeOf(Type t)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200017B")]
	public sealed class WindowsLibraryLoader
	{
		[Token(Token = "0x20001E3")]
		private class ProcessArchitectureInfo
		{
			[Token(Token = "0x40007CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF78", Offset = "0x1DDBF78")]
			private string <Architecture>k__BackingField;

			[Token(Token = "0x40007D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBF88", Offset = "0x1DDBF88")]
			private List<string> <Warnings>k__BackingField;

			[Token(Token = "0x170002CF")]
			public string Architecture
			{
				[Token(Token = "0x600193C")]
				[Address(RVA = "0x4059A48", Offset = "0x4059A48", VA = "0x4059A48")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD920", Offset = "0x1DDD920")]
				get
				{
					return null;
				}
				[Token(Token = "0x600193D")]
				[Address(RVA = "0x4059A50", Offset = "0x4059A50", VA = "0x4059A50")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD930", Offset = "0x1DDD930")]
				set
				{
				}
			}

			[Token(Token = "0x170002D0")]
			private List<string> Warnings
			{
				[Token(Token = "0x600193E")]
				[Address(RVA = "0x4059A58", Offset = "0x4059A58", VA = "0x4059A58")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD940", Offset = "0x1DDD940")]
				get
				{
					return null;
				}
				[Token(Token = "0x600193F")]
				[Address(RVA = "0x4059A60", Offset = "0x4059A60", VA = "0x4059A60")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD950", Offset = "0x1DDD950")]
				set
				{
				}
			}

			[Token(Token = "0x170002D1")]
			public bool HasWarnings
			{
				[Token(Token = "0x6001940")]
				[Address(RVA = "0x4059648", Offset = "0x4059648", VA = "0x4059648")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600193B")]
			[Address(RVA = "0x4059714", Offset = "0x4059714", VA = "0x4059714")]
			public ProcessArchitectureInfo()
			{
			}

			[Token(Token = "0x6001941")]
			[Address(RVA = "0x4059790", Offset = "0x4059790", VA = "0x4059790")]
			public void AddWarning(string format, params object[] args)
			{
			}

			[Token(Token = "0x6001942")]
			[Address(RVA = "0x40596A0", Offset = "0x40596A0", VA = "0x40596A0")]
			public string WarningText()
			{
				return null;
			}
		}

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly WindowsLibraryLoader instance;

		[Token(Token = "0x4000631")]
		private const string ProcessorArchitecture = "PROCESSOR_ARCHITECTURE";

		[Token(Token = "0x4000632")]
		private const string DllFileExtension = ".dll";

		[Token(Token = "0x4000633")]
		private const string DllDirectory = "dll";

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<string> loadedAssemblies;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<string, string> processorArchitecturePlatforms;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Dictionary<string, int> processorArchitectureAddressWidthPlatforms;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDBE88", Offset = "0x1DDBE88")]
		private List<string> <AdditionalPaths>k__BackingField;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly object syncLock;

		[Token(Token = "0x1700021C")]
		public static WindowsLibraryLoader Instance
		{
			[Token(Token = "0x600173C")]
			[Address(RVA = "0x405846C", Offset = "0x405846C", VA = "0x405846C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		public List<string> AdditionalPaths
		{
			[Token(Token = "0x600173D")]
			[Address(RVA = "0x40584D4", Offset = "0x40584D4", VA = "0x40584D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD020", Offset = "0x1DDD020")]
			get
			{
				return null;
			}
			[Token(Token = "0x600173E")]
			[Address(RVA = "0x40584DC", Offset = "0x40584DC", VA = "0x40584DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1DDD030", Offset = "0x1DDD030")]
			private set
			{
			}
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0x40584E4", Offset = "0x40584E4", VA = "0x40584E4")]
		private WindowsLibraryLoader()
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x40587E8", Offset = "0x40587E8", VA = "0x40587E8")]
		public bool IsLibraryLoaded(string dllName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0x40588C4", Offset = "0x40588C4", VA = "0x40588C4")]
		public bool IsCurrentPlatformSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0x4058910", Offset = "0x4058910", VA = "0x4058910")]
		public void LoadLibrary(string dllName, [Optional] IEnumerable<string> additionalPaths)
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x4058FB4", Offset = "0x4058FB4", VA = "0x4058FB4")]
		private ProcessArchitectureInfo GetProcessArchitecture()
		{
			return null;
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x4059580", Offset = "0x4059580", VA = "0x4059580")]
		private IntPtr LoadLibraryInternal(string dllName, string baseDirectory, ProcessArchitectureInfo processArchInfo)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0x40593D8", Offset = "0x40593D8", VA = "0x40593D8")]
		private IntPtr LoadLibraryRaw(string dllName, string baseDirectory)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0x40598A8", Offset = "0x40598A8", VA = "0x40598A8")]
		private string FixUpDllFileName(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0x4059810", Offset = "0x4059810", VA = "0x4059810")]
		private string GetPlatformName(string processorArchitecture)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001748")]
		[Address(RVA = "0x4059954", Offset = "0x4059954", VA = "0x4059954")]
		private static extern IntPtr Win32LoadLibrary(string dllPath);
	}
}
