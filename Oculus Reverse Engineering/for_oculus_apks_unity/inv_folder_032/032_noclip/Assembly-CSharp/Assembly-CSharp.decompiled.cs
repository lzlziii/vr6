using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using BNG;
using CloudFine.ThrowLab.UI;
using DTT.DailyRewards;
using DarkTonic.MasterAudio;
using DinoFracture;
using Dissonance;
using Dissonance.Audio.Playback;
using Dissonance.Datastructures;
using Dissonance.Integrations.PhotonUnityNetworking2;
using Dissonance.Networking;
using ExitGames.Client.Photon;
using Firebase;
using Firebase.Auth;
using Firebase.Firestore;
using Il2CppDummyDll;
using JetBrains.Annotations;
using MagicLightProbes;
using Obi;
using Oculus.Platform;
using Oculus.Platform.Models;
using Photon.Pun;
using Photon.Realtime;
using RootMotion.FinalIK;
using Smooth;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class AutoAttachFlashLight : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light light;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xF8C800", Offset = "0xF8C800", VA = "0xF8C800")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xF8C8F8", Offset = "0xF8C8F8", VA = "0xF8C8F8")]
	public AutoAttachFlashLight()
	{
	}
}
[Token(Token = "0x2000003")]
public class FixNonUniformScale : MonoBehaviour
{
	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool running;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xF8C900", Offset = "0xF8C900", VA = "0xF8C900")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xF8C97C", Offset = "0xF8C97C", VA = "0xF8C97C")]
	public void MakeUniform()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xF8CE04", Offset = "0xF8CE04", VA = "0xF8CE04")]
	public FixNonUniformScale()
	{
	}
}
[Token(Token = "0x2000004")]
public class ClipCoinManager : MonoBehaviour
{
	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI balanceText;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI userIDText;

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xF8CE0C", Offset = "0xF8CE0C", VA = "0xF8CE0C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xF8CEB0", Offset = "0xF8CEB0", VA = "0xF8CEB0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xF8CF30", Offset = "0xF8CF30", VA = "0xF8CF30")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xF8CE10", Offset = "0xF8CE10", VA = "0xF8CE10")]
	private void ShowCoinBalance()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xF8CFB0", Offset = "0xF8CFB0", VA = "0xF8CFB0")]
	public void ShowUserID()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xF8D044", Offset = "0xF8D044", VA = "0xF8D044")]
	public ClipCoinManager()
	{
	}
}
[Token(Token = "0x2000005")]
public class DestroyKittyOnTrigger : MonoBehaviour
{
	[Token(Token = "0x600000C")]
	[Address(RVA = "0xF8D04C", Offset = "0xF8D04C", VA = "0xF8D04C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xF8D110", Offset = "0xF8D110", VA = "0xF8D110")]
	public DestroyKittyOnTrigger()
	{
	}
}
[Token(Token = "0x2000006")]
public class EditorDisconnector : MonoBehaviour
{
	[Token(Token = "0x600000E")]
	[Address(RVA = "0xF8D118", Offset = "0xF8D118", VA = "0xF8D118")]
	public EditorDisconnector()
	{
	}
}
[Token(Token = "0x2000007")]
[ExecuteInEditMode]
public class Cell_01 : MonoBehaviour
{
	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float rowNumber;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float columnNumber;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int rN;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int cN;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer cellRenderer;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xF8D120", Offset = "0xF8D120", VA = "0xF8D120")]
	private void Start()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xF8D1F0", Offset = "0xF8D1F0", VA = "0xF8D1F0")]
	public void ChangeNumberDisplay()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xF8D2C0", Offset = "0xF8D2C0", VA = "0xF8D2C0")]
	public int totalRows()
	{
		return default(int);
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xF8D33C", Offset = "0xF8D33C", VA = "0xF8D33C")]
	public int totalColumns()
	{
		return default(int);
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xF8D3B8", Offset = "0xF8D3B8", VA = "0xF8D3B8")]
	public Cell_01()
	{
	}
}
[Token(Token = "0x2000008")]
[RequireComponent(typeof(Collider))]
public class Door : MonoBehaviour
{
	[Token(Token = "0x2000009")]
	public enum rotOrient
	{
		[Token(Token = "0x4000016")]
		Y_Axis_Up,
		[Token(Token = "0x4000017")]
		Z_Axis_Up,
		[Token(Token = "0x4000018")]
		X_Axis_Up
	}

	[Token(Token = "0x200000A")]
	public enum rotFixAxis
	{
		[Token(Token = "0x400001A")]
		Y,
		[Token(Token = "0x400001B")]
		Z
	}

	[Token(Token = "0x200000B")]
	public enum doorType
	{
		[Token(Token = "0x400001D")]
		Regular,
		[Token(Token = "0x400001E")]
		Sliding
	}

	[Token(Token = "0x200000C")]
	[CompilerGenerated]
	private sealed class <delayedCloseAudio>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400001F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Door <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600001C")]
			[Address(RVA = "0xF8DB7C", Offset = "0xF8DB7C", VA = "0xF8DB7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600001E")]
			[Address(RVA = "0xF8DBC4", Offset = "0xF8DBC4", VA = "0xF8DBC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000019")]
		[Address(RVA = "0xF8D9E0", Offset = "0xF8D9E0", VA = "0xF8D9E0")]
		[DebuggerHidden]
		public <delayedCloseAudio>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600001A")]
		[Address(RVA = "0xF8DAA0", Offset = "0xF8DAA0", VA = "0xF8DAA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600001B")]
		[Address(RVA = "0xF8DAA4", Offset = "0xF8DAA4", VA = "0xF8DAA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600001D")]
		[Address(RVA = "0xF8DB84", Offset = "0xF8DB84", VA = "0xF8DB84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000D")]
	[CompilerGenerated]
	private sealed class <moveDoor>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Door <>4__this;

		[Token(Token = "0x4000026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion target;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000022")]
			[Address(RVA = "0xF8DD78", Offset = "0xF8DD78", VA = "0xF8DD78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000024")]
			[Address(RVA = "0xF8DDC0", Offset = "0xF8DDC0", VA = "0xF8DDC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600001F")]
		[Address(RVA = "0xF8DA08", Offset = "0xF8DA08", VA = "0xF8DA08")]
		[DebuggerHidden]
		public <moveDoor>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000020")]
		[Address(RVA = "0xF8DBCC", Offset = "0xF8DBCC", VA = "0xF8DBCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000021")]
		[Address(RVA = "0xF8DBD0", Offset = "0xF8DBD0", VA = "0xF8DBD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000023")]
		[Address(RVA = "0xF8DD80", Offset = "0xF8DD80", VA = "0xF8DD80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public doorType doorMovement;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public rotOrient rotationOrientation;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool applyRotationFix;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public rotFixAxis rotationAxisFix;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float doorOpenAngle;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(1f, 5f)]
	public float speed;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip doorOpenSound;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip doorCloseSound;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion doorOpen;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion doorClosed;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool doorStatus;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xF8D3C0", Offset = "0xF8D3C0", VA = "0xF8D3C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xF8D77C", Offset = "0xF8D77C", VA = "0xF8D77C")]
	public void InteractWithThisDoor()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xF8D95C", Offset = "0xF8D95C", VA = "0xF8D95C")]
	[IteratorStateMachine(typeof(<delayedCloseAudio>d__16))]
	private IEnumerator delayedCloseAudio(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xF8D8C0", Offset = "0xF8D8C0", VA = "0xF8D8C0")]
	[IteratorStateMachine(typeof(<moveDoor>d__17))]
	private IEnumerator moveDoor(Quaternion target)
	{
		return null;
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xF8DA30", Offset = "0xF8DA30", VA = "0xF8DA30")]
	public Door()
	{
	}
}
[Token(Token = "0x200000E")]
public class MainGate : MonoBehaviour
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip openSound;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip closeSound;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSource source;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xF8DDC8", Offset = "0xF8DDC8", VA = "0xF8DDC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xF8DE94", Offset = "0xF8DE94", VA = "0xF8DE94")]
	public void PlayGateAudio(bool open)
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xF8DF08", Offset = "0xF8DF08", VA = "0xF8DF08")]
	public MainGate()
	{
	}
}
[Token(Token = "0x200000F")]
public class ParkingBarrier : MonoBehaviour
{
	[Token(Token = "0x2000010")]
	[CompilerGenerated]
	private sealed class <delayedClose>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400002E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParkingBarrier <>4__this;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000031")]
			[Address(RVA = "0xF8E2E0", Offset = "0xF8E2E0", VA = "0xF8E2E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000033")]
			[Address(RVA = "0xF8E328", Offset = "0xF8E328", VA = "0xF8E328", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600002E")]
		[Address(RVA = "0xF8E1BC", Offset = "0xF8E1BC", VA = "0xF8E1BC")]
		[DebuggerHidden]
		public <delayedClose>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600002F")]
		[Address(RVA = "0xF8E1F4", Offset = "0xF8E1F4", VA = "0xF8E1F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000030")]
		[Address(RVA = "0xF8E1F8", Offset = "0xF8E1F8", VA = "0xF8E1F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000032")]
		[Address(RVA = "0xF8E2E8", Offset = "0xF8E2E8", VA = "0xF8E2E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isPlayerInZone;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator animator;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(1f, 20f)]
	public float closeDelayTime;

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xF8DF10", Offset = "0xF8DF10", VA = "0xF8DF10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xF8DF84", Offset = "0xF8DF84", VA = "0xF8DF84")]
	private void Update()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xF8E018", Offset = "0xF8E018", VA = "0xF8E018")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xF8E098", Offset = "0xF8E098", VA = "0xF8E098")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xF8E138", Offset = "0xF8E138", VA = "0xF8E138")]
	[IteratorStateMachine(typeof(<delayedClose>d__7))]
	private IEnumerator delayedClose(float delay)
	{
		return null;
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xF8E1E4", Offset = "0xF8E1E4", VA = "0xF8E1E4")]
	public ParkingBarrier()
	{
	}
}
[Token(Token = "0x2000011")]
public class Raycaster_Interactions : MonoBehaviour
{
	[Token(Token = "0x2000012")]
	[CompilerGenerated]
	private sealed class <delayedOpen>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400003A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float secs;

		[Token(Token = "0x400003B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SlidingDoor sd;

		[Token(Token = "0x17000007")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600003D")]
			[Address(RVA = "0xF8ED20", Offset = "0xF8ED20", VA = "0xF8ED20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600003F")]
			[Address(RVA = "0xF8ED68", Offset = "0xF8ED68", VA = "0xF8ED68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600003A")]
		[Address(RVA = "0xF8E8EC", Offset = "0xF8E8EC", VA = "0xF8E8EC")]
		[DebuggerHidden]
		public <delayedOpen>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0xF8EB24", Offset = "0xF8EB24", VA = "0xF8EB24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0xF8EB28", Offset = "0xF8EB28", VA = "0xF8EB28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600003E")]
		[Address(RVA = "0xF8ED28", Offset = "0xF8ED28", VA = "0xF8ED28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera cam;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(1f, 5f)]
	public float rayDistance;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D crosshair;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D eButton;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int crossHairStatus;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool showCrosshair;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip[] buzzers;

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xF8E330", Offset = "0xF8E330", VA = "0xF8E330")]
	private void Start()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xF8E334", Offset = "0xF8E334", VA = "0xF8E334")]
	private void ConfigureCamera()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xF8E494", Offset = "0xF8E494", VA = "0xF8E494")]
	private void Update()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xF8E868", Offset = "0xF8E868", VA = "0xF8E868")]
	[IteratorStateMachine(typeof(<delayedOpen>d__10))]
	private IEnumerator delayedOpen(float secs, SlidingDoor sd)
	{
		return null;
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xF8E914", Offset = "0xF8E914", VA = "0xF8E914")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xF8EB14", Offset = "0xF8EB14", VA = "0xF8EB14")]
	public Raycaster_Interactions()
	{
	}
}
[Token(Token = "0x2000013")]
[RequireComponent(typeof(Animator))]
public class SlidingDoor : MonoBehaviour
{
	[Token(Token = "0x400003C")]
	private const string OPEN = "open";

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip openSound;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip closeSound;

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xF8EBE0", Offset = "0xF8EBE0", VA = "0xF8EBE0")]
	public void InteractWithSlidingDoor()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xF8ED70", Offset = "0xF8ED70", VA = "0xF8ED70")]
	public SlidingDoor()
	{
	}
}
[Token(Token = "0x2000014")]
public class OpenDoor : MonoBehaviour
{
	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float smooth;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float DoorOpenAngle;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip OpenAudio;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip CloseAudio;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool AudioS;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 defaultRot;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 openRot;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool open;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool enter;

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xF8ED78", Offset = "0xF8ED78", VA = "0xF8ED78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xF8EDB4", Offset = "0xF8EDB4", VA = "0xF8EDB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xF8EF54", Offset = "0xF8EF54", VA = "0xF8EF54")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xF8EFC4", Offset = "0xF8EFC4", VA = "0xF8EFC4")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xF8F030", Offset = "0xF8F030", VA = "0xF8F030")]
	public OpenDoor()
	{
	}
}
[Token(Token = "0x2000015")]
public class OldGUIExamplesCS : MonoBehaviour
{
	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D grumpy;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D beauty;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float w;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float h;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LTRect buttonRect1;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LTRect buttonRect2;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LTRect buttonRect3;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LTRect buttonRect4;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LTRect grumpyRect;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LTRect beautyTileRect;

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xF8F044", Offset = "0xF8F044", VA = "0xF8F044")]
	private void Start()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xF8F3C0", Offset = "0xF8F3C0", VA = "0xF8F3C0")]
	public void catMoved()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xF8F428", Offset = "0xF8F428", VA = "0xF8F428")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xF8FDC4", Offset = "0xF8FDC4", VA = "0xF8FDC4")]
	public OldGUIExamplesCS()
	{
	}
}
[Token(Token = "0x2000016")]
public class TestingPunch : MonoBehaviour
{
	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve exportCurve;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float overShootValue;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LTDescr descr;

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xF8FDCC", Offset = "0xF8FDCC", VA = "0xF8FDCC")]
	private void Start()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xF90208", Offset = "0xF90208", VA = "0xF90208")]
	private void Update()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xF91118", Offset = "0xF91118", VA = "0xF91118")]
	private static void tweenStatically(GameObject gameObject)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xF91288", Offset = "0xF91288", VA = "0xF91288")]
	private void enterMiniGameStart(object val)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xF913C4", Offset = "0xF913C4", VA = "0xF913C4")]
	private void updateColor(Color c)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xF91474", Offset = "0xF91474", VA = "0xF91474")]
	private void delayedMethod(object myVal)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xF91568", Offset = "0xF91568", VA = "0xF91568")]
	private void destroyOnComp(object p)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xF8FE64", Offset = "0xF8FE64", VA = "0xF8FE64")]
	private string curveToString(AnimationCurve curve)
	{
		return null;
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xF915F8", Offset = "0xF915F8", VA = "0xF915F8")]
	public TestingPunch()
	{
	}
}
[Token(Token = "0x200001B")]
public class TestingRigidbodyCS : MonoBehaviour
{
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject ball1;

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xF91FE4", Offset = "0xF91FE4", VA = "0xF91FE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xF9211C", Offset = "0xF9211C", VA = "0xF9211C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xF92120", Offset = "0xF92120", VA = "0xF92120")]
	public TestingRigidbodyCS()
	{
	}
}
[Token(Token = "0x200001C")]
public class Following : MonoBehaviour
{
	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform planet;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform followArrow;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform dude1;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform dude2;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform dude3;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform dude4;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform dude5;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform dude1Title;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform dude2Title;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform dude3Title;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform dude4Title;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform dude5Title;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Color dude1ColorVelocity;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 velocityPos;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float fromY;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float velocityY;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 fromVec3;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 velocityVec3;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Color fromColor;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Color velocityColor;

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xF92128", Offset = "0xF92128", VA = "0xF92128")]
	private void Start()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xF92680", Offset = "0xF92680", VA = "0xF92680")]
	private void Update()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xF92A98", Offset = "0xF92A98", VA = "0xF92A98")]
	private void moveArrow()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xF92BF8", Offset = "0xF92BF8", VA = "0xF92BF8")]
	public Following()
	{
	}
}
[Token(Token = "0x200001D")]
public class GeneralAdvancedTechniques : MonoBehaviour
{
	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject avatarRecursive;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject avatar2dRecursive;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RectTransform wingPersonPanel;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RectTransform textField;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject avatarMove;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform[] movePts;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] avatarSpeed;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] avatarSpeed2;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3[] circleSm;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] circleLrg;

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xF92C00", Offset = "0xF92C00", VA = "0xF92C00")]
	private void Start()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xF92FB0", Offset = "0xF92FB0", VA = "0xF92FB0")]
	public GeneralAdvancedTechniques()
	{
	}
}
[Token(Token = "0x200001E")]
public class GeneralBasic : MonoBehaviour
{
	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefabAvatar;

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xF93764", Offset = "0xF93764", VA = "0xF93764")]
	private void Start()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xF93A7C", Offset = "0xF93A7C", VA = "0xF93A7C")]
	private void advancedExamples()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xF93B64", Offset = "0xF93B64", VA = "0xF93B64")]
	public GeneralBasic()
	{
	}
}
[Token(Token = "0x2000020")]
public class GeneralBasics2d : MonoBehaviour
{
	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D dudeTexture;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject prefabParticles;

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xF94264", Offset = "0xF94264", VA = "0xF94264")]
	private void Start()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xF945C8", Offset = "0xF945C8", VA = "0xF945C8")]
	private GameObject createSpriteDude(string name, Vector3 pos, bool hasParticles = true)
	{
		return null;
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xF948A4", Offset = "0xF948A4", VA = "0xF948A4")]
	private void advancedExamples()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xF9498C", Offset = "0xF9498C", VA = "0xF9498C")]
	public GeneralBasics2d()
	{
	}
}
[Token(Token = "0x2000022")]
public class GeneralCameraShake : MonoBehaviour
{
	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject avatarBig;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float jumpIter;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioClip boomAudioClip;

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xF95038", Offset = "0xF95038", VA = "0xF95038")]
	private void Start()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xF95418", Offset = "0xF95418", VA = "0xF95418")]
	private void bigGuyJump()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xF95590", Offset = "0xF95590", VA = "0xF95590")]
	public GeneralCameraShake()
	{
	}
}
[Token(Token = "0x2000025")]
public class GeneralEasingTypes : MonoBehaviour
{
	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lineDrawScale;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve animationCurve;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string[] easeTypes;

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xF95BC8", Offset = "0xF95BC8", VA = "0xF95BC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xF95BCC", Offset = "0xF95BCC", VA = "0xF95BCC")]
	private void demoEaseTypes()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xF95FD0", Offset = "0xF95FD0", VA = "0xF95FD0")]
	private void resetLines()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xF96088", Offset = "0xF96088", VA = "0xF96088")]
	public GeneralEasingTypes()
	{
	}
}
[Token(Token = "0x2000027")]
public class GeneralEventsListeners : MonoBehaviour
{
	[Token(Token = "0x2000028")]
	public enum MyEvents
	{
		[Token(Token = "0x4000095")]
		CHANGE_COLOR,
		[Token(Token = "0x4000096")]
		JUMP,
		[Token(Token = "0x4000097")]
		LENGTH
	}

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 towardsRotation;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float turnForLength;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float turnForIter;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color fromColor;

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xF96E30", Offset = "0xF96E30", VA = "0xF96E30")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xF96ED8", Offset = "0xF96ED8", VA = "0xF96ED8")]
	private void Start()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xF96FFC", Offset = "0xF96FFC", VA = "0xF96FFC")]
	private void jumpUp(LTEvent e)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xF970A8", Offset = "0xF970A8", VA = "0xF970A8")]
	private void changeColor(LTEvent e)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xF9731C", Offset = "0xF9731C", VA = "0xF9731C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xF97374", Offset = "0xF97374", VA = "0xF97374")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xF973C4", Offset = "0xF973C4", VA = "0xF973C4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xF9759C", Offset = "0xF9759C", VA = "0xF9759C")]
	private void OnMouseDown()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xF97640", Offset = "0xF97640", VA = "0xF97640")]
	public GeneralEventsListeners()
	{
	}
}
[Token(Token = "0x2000029")]
public class GeneralSequencer : MonoBehaviour
{
	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject avatar1;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject star;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject dustCloudPrefab;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speedScale;

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xF976E4", Offset = "0xF976E4", VA = "0xF976E4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xF97958", Offset = "0xF97958", VA = "0xF97958")]
	public GeneralSequencer()
	{
	}
}
[Token(Token = "0x200002A")]
public class GeneralSimpleUI : MonoBehaviour
{
	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform button;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xF97C14", Offset = "0xF97C14", VA = "0xF97C14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xF98204", Offset = "0xF98204", VA = "0xF98204")]
	public GeneralSimpleUI()
	{
	}
}
[Token(Token = "0x200002C")]
public class GeneralUISpace : MonoBehaviour
{
	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform mainWindow;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RectTransform mainParagraphText;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RectTransform mainTitleText;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RectTransform mainButton1;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform mainButton2;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform pauseRing1;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public RectTransform pauseRing2;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RectTransform pauseWindow;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public RectTransform chatWindow;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public RectTransform chatRect;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Sprite[] chatSprites;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public RectTransform chatBar1;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public RectTransform chatBar2;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text chatText;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public RectTransform rawImageRect;

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xF984E0", Offset = "0xF984E0", VA = "0xF984E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xF98D54", Offset = "0xF98D54", VA = "0xF98D54")]
	public GeneralUISpace()
	{
	}
}
[Token(Token = "0x200002E")]
public class LogoCinematic : MonoBehaviour
{
	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lean;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject tween;

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xF98E88", Offset = "0xF98E88", VA = "0xF98E88")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xF98E8C", Offset = "0xF98E8C", VA = "0xF98E8C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xF992A4", Offset = "0xF992A4", VA = "0xF992A4")]
	private void playBoom()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xF9994C", Offset = "0xF9994C", VA = "0xF9994C")]
	public LogoCinematic()
	{
	}
}
[Token(Token = "0x200002F")]
public class PathBezier2d : MonoBehaviour
{
	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] cubes;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject dude1;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject dude2;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LTBezierPath visualizePath;

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xF99954", Offset = "0xF99954", VA = "0xF99954")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xF99B40", Offset = "0xF99B40", VA = "0xF99B40")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xF99B80", Offset = "0xF99B80", VA = "0xF99B80")]
	public PathBezier2d()
	{
	}
}
[Token(Token = "0x2000030")]
public class ExampleSpline : MonoBehaviour
{
	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] trans;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LTSpline spline;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject ltLogo;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject ltLogo2;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float iter;

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xF99B88", Offset = "0xF99B88", VA = "0xF99B88")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xF99F00", Offset = "0xF99F00", VA = "0xF99F00")]
	private void Update()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xF99F90", Offset = "0xF99F90", VA = "0xF99F90")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xF99FA8", Offset = "0xF99FA8", VA = "0xF99FA8")]
	public ExampleSpline()
	{
	}
}
[Token(Token = "0x2000031")]
public class PathSpline2d : MonoBehaviour
{
	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] cubes;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject dude1;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject dude2;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LTSpline visualizePath;

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xF99FB0", Offset = "0xF99FB0", VA = "0xF99FB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xF9A1F4", Offset = "0xF9A1F4", VA = "0xF9A1F4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xF9A234", Offset = "0xF9A234", VA = "0xF9A234")]
	public PathSpline2d()
	{
	}
}
[Token(Token = "0x2000032")]
public class PathSplineEndless : MonoBehaviour
{
	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject trackTrailRenderers;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject car;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject carInternal;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] cubes;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int cubesIter;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] trees;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int treesIter;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float randomIterWidth;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LTSpline track;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Vector3> trackPts;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int zIter;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float carIter;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float carAdd;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int trackMaxItems;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int trackIter;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float pushTrackAhead;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float randomIter;

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xF9A23C", Offset = "0xF9A23C", VA = "0xF9A23C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xF9A6DC", Offset = "0xF9A6DC", VA = "0xF9A6DC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xF9ACE4", Offset = "0xF9ACE4", VA = "0xF9ACE4")]
	private GameObject objectQueue(GameObject[] arr, ref int lastIter)
	{
		return null;
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xF9A344", Offset = "0xF9A344", VA = "0xF9A344")]
	private void addRandomTrackPoint()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xF9A5EC", Offset = "0xF9A5EC", VA = "0xF9A5EC")]
	private void refreshSpline()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xF9A8D4", Offset = "0xF9A8D4", VA = "0xF9A8D4")]
	private void playSwish()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xF9AE1C", Offset = "0xF9AE1C", VA = "0xF9AE1C")]
	public PathSplineEndless()
	{
	}
}
[Token(Token = "0x2000033")]
public class PathSplinePerformance : MonoBehaviour
{
	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject trackTrailRenderers;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject car;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject carInternal;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float circleLength;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float randomRange;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int trackNodes;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float carSpeed;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float tracerSpeed;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LTSpline track;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int trackIter;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float carAdd;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float trackPosition;

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xF9AEC4", Offset = "0xF9AEC4", VA = "0xF9AEC4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xF9B2A0", Offset = "0xF9B2A0", VA = "0xF9B2A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xF9B804", Offset = "0xF9B804", VA = "0xF9B804")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xF9B3F4", Offset = "0xF9B3F4", VA = "0xF9B3F4")]
	private void playSwish()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xF9B828", Offset = "0xF9B828", VA = "0xF9B828")]
	public PathSplinePerformance()
	{
	}
}
[Token(Token = "0x2000034")]
public class PathSplines : MonoBehaviour
{
	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] trans;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LTSpline cr;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject avatar1;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float iter;

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xF9B858", Offset = "0xF9B858", VA = "0xF9B858")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xF9BA00", Offset = "0xF9BA00", VA = "0xF9BA00")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xF9BB38", Offset = "0xF9BB38", VA = "0xF9BB38")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xF9BB80", Offset = "0xF9BB80", VA = "0xF9BB80")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xF9BBD0", Offset = "0xF9BBD0", VA = "0xF9BBD0")]
	public PathSplines()
	{
	}
}
[Token(Token = "0x2000035")]
public class PathSplineTrack : MonoBehaviour
{
	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject car;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject carInternal;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject trackTrailRenderers;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] trackOnePoints;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LTSpline track;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int trackIter;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float trackPosition;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xF9BD7C", Offset = "0xF9BD7C", VA = "0xF9BD7C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xF9BFFC", Offset = "0xF9BFFC", VA = "0xF9BFFC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xF9C578", Offset = "0xF9C578", VA = "0xF9C578")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xF9C168", Offset = "0xF9C168", VA = "0xF9C168")]
	private void playSwish()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xF9C5E4", Offset = "0xF9C5E4", VA = "0xF9C5E4")]
	public PathSplineTrack()
	{
	}
}
[Token(Token = "0x2000036")]
public class TestingZLegacy : MonoBehaviour
{
	[Token(Token = "0x2000037")]
	public delegate void NextFunc();

	[Token(Token = "0x2000038")]
	public enum TimingType
	{
		[Token(Token = "0x40000F5")]
		SteadyNormalTime,
		[Token(Token = "0x40000F6")]
		IgnoreTimeScale,
		[Token(Token = "0x40000F7")]
		HalfTimeScale,
		[Token(Token = "0x40000F8")]
		VariableTimeScale,
		[Token(Token = "0x40000F9")]
		Length
	}

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve customAnimationCurve;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform pt1;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pt2;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform pt3;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform pt4;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform pt5;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int exampleIter;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string[] exampleFunctions;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool useEstimatedTime;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject ltLogo;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private TimingType timingType;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int descrTimeScaleChangeId;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 origin;

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xF9C5F4", Offset = "0xF9C5F4", VA = "0xF9C5F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xF9C5F8", Offset = "0xF9C5F8", VA = "0xF9C5F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xF9C704", Offset = "0xF9C704", VA = "0xF9C704")]
	private void pauseNow()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xF9C778", Offset = "0xF9C778", VA = "0xF9C778")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xF9C8C8", Offset = "0xF9C8C8", VA = "0xF9C8C8")]
	private void endlessCallback()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xF9C930", Offset = "0xF9C930", VA = "0xF9C930")]
	private void cycleThroughExamples()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xF9CC84", Offset = "0xF9CC84", VA = "0xF9CC84")]
	public void updateValue3Example()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xF9CE7C", Offset = "0xF9CE7C", VA = "0xF9CE7C")]
	public void updateValue3ExampleUpdate(Vector3 val)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xF9CE80", Offset = "0xF9CE80", VA = "0xF9CE80")]
	public void updateValue3ExampleCallback(Vector3 val)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xF9CED0", Offset = "0xF9CED0", VA = "0xF9CED0")]
	public void loopTestClamp()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xF9D03C", Offset = "0xF9D03C", VA = "0xF9D03C")]
	public void loopTestPingPong()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xF9D19C", Offset = "0xF9D19C", VA = "0xF9D19C")]
	public void colorExample()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xF9D278", Offset = "0xF9D278", VA = "0xF9D278")]
	public void moveOnACurveExample()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xF9D4C8", Offset = "0xF9D4C8", VA = "0xF9D4C8")]
	public void customTweenExample()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xF9D684", Offset = "0xF9D684", VA = "0xF9D684")]
	public void moveExample()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xF9D780", Offset = "0xF9D780", VA = "0xF9D780")]
	public void rotateExample()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xF9D9C8", Offset = "0xF9D9C8", VA = "0xF9D9C8")]
	public void rotateOnUpdate(float val)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xF9D9CC", Offset = "0xF9D9CC", VA = "0xF9D9CC")]
	public void rotateFinished(object hash)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xF9DAE0", Offset = "0xF9DAE0", VA = "0xF9DAE0")]
	public void scaleExample()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xF9DBF4", Offset = "0xF9DBF4", VA = "0xF9DBF4")]
	public void updateValueExample()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xF9DDD4", Offset = "0xF9DDD4", VA = "0xF9DDD4")]
	public void updateValueExampleCallback(float val, object hash)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xF9DE44", Offset = "0xF9DE44", VA = "0xF9DE44")]
	public void delayedCallExample()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xF9DF40", Offset = "0xF9DF40", VA = "0xF9DF40")]
	public void delayedCallExampleCallback()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xF9E054", Offset = "0xF9E054", VA = "0xF9E054")]
	public void alphaExample()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xF9E170", Offset = "0xF9E170", VA = "0xF9E170")]
	public void moveLocalExample()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xF9E2C4", Offset = "0xF9E2C4", VA = "0xF9E2C4")]
	public void rotateAroundExample()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xF9E400", Offset = "0xF9E400", VA = "0xF9E400")]
	public void loopPause()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xF9E47C", Offset = "0xF9E47C", VA = "0xF9E47C")]
	public void loopResume()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xF9E4F8", Offset = "0xF9E4F8", VA = "0xF9E4F8")]
	public void punchTest()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xF9E580", Offset = "0xF9E580", VA = "0xF9E580")]
	public TestingZLegacy()
	{
	}
}
[Token(Token = "0x200003A")]
public class TestingZLegacyExt : MonoBehaviour
{
	[Token(Token = "0x200003B")]
	public delegate void NextFunc();

	[Token(Token = "0x200003C")]
	public enum TimingType
	{
		[Token(Token = "0x400010A")]
		SteadyNormalTime,
		[Token(Token = "0x400010B")]
		IgnoreTimeScale,
		[Token(Token = "0x400010C")]
		HalfTimeScale,
		[Token(Token = "0x400010D")]
		VariableTimeScale,
		[Token(Token = "0x400010E")]
		Length
	}

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve customAnimationCurve;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform pt1;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pt2;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform pt3;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform pt4;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform pt5;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int exampleIter;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string[] exampleFunctions;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool useEstimatedTime;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform ltLogo;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private TimingType timingType;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int descrTimeScaleChangeId;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 origin;

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xF9EC98", Offset = "0xF9EC98", VA = "0xF9EC98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xF9EC9C", Offset = "0xF9EC9C", VA = "0xF9EC9C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xF9EDA8", Offset = "0xF9EDA8", VA = "0xF9EDA8")]
	private void pauseNow()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xF9EE1C", Offset = "0xF9EE1C", VA = "0xF9EE1C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xF9EF6C", Offset = "0xF9EF6C", VA = "0xF9EF6C")]
	private void endlessCallback()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xF9EFD4", Offset = "0xF9EFD4", VA = "0xF9EFD4")]
	private void cycleThroughExamples()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xF9F2F4", Offset = "0xF9F2F4", VA = "0xF9F2F4")]
	public void updateValue3Example()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xF9F4C0", Offset = "0xF9F4C0", VA = "0xF9F4C0")]
	public void updateValue3ExampleUpdate(Vector3 val)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xF9F4C4", Offset = "0xF9F4C4", VA = "0xF9F4C4")]
	public void updateValue3ExampleCallback(Vector3 val)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xF9F514", Offset = "0xF9F514", VA = "0xF9F514")]
	public void loopTestClamp()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xF9F670", Offset = "0xF9F670", VA = "0xF9F670")]
	public void loopTestPingPong()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xF9F7C0", Offset = "0xF9F7C0", VA = "0xF9F7C0")]
	public void colorExample()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xF9F864", Offset = "0xF9F864", VA = "0xF9F864")]
	public void moveOnACurveExample()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xF9FA8C", Offset = "0xF9FA8C", VA = "0xF9FA8C")]
	public void customTweenExample()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xF9FC0C", Offset = "0xF9FC0C", VA = "0xF9FC0C")]
	public void moveExample()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xF9FCE0", Offset = "0xF9FCE0", VA = "0xF9FCE0")]
	public void rotateExample()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xF9FEF8", Offset = "0xF9FEF8", VA = "0xF9FEF8")]
	public void rotateOnUpdate(float val)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xF9FEFC", Offset = "0xF9FEFC", VA = "0xF9FEFC")]
	public void rotateFinished(object hash)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xFA0010", Offset = "0xFA0010", VA = "0xFA0010")]
	public void scaleExample()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xFA00D4", Offset = "0xFA00D4", VA = "0xFA00D4")]
	public void updateValueExample()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xFA0278", Offset = "0xFA0278", VA = "0xFA0278")]
	public void updateValueExampleCallback(float val, object hash)
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xFA02DC", Offset = "0xFA02DC", VA = "0xFA02DC")]
	public void delayedCallExample()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xFA03D8", Offset = "0xFA03D8", VA = "0xFA03D8")]
	public void delayedCallExampleCallback()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xFA049C", Offset = "0xFA049C", VA = "0xFA049C")]
	public void alphaExample()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xFA0584", Offset = "0xFA0584", VA = "0xFA0584")]
	public void moveLocalExample()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xFA06B4", Offset = "0xFA06B4", VA = "0xFA06B4")]
	public void rotateAroundExample()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xFA07A8", Offset = "0xFA07A8", VA = "0xFA07A8")]
	public void loopPause()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xFA07F4", Offset = "0xFA07F4", VA = "0xFA07F4")]
	public void loopResume()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xFA0840", Offset = "0xFA0840", VA = "0xFA0840")]
	public void punchTest()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xFA0884", Offset = "0xFA0884", VA = "0xFA0884")]
	public TestingZLegacyExt()
	{
	}
}
[Token(Token = "0x200003E")]
public class LeanAudioStream
{
	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int position;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip audioClip;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] audioArr;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xFA1F9C", Offset = "0xFA1F9C", VA = "0xFA1F9C")]
	public LeanAudioStream(float[] audioArr)
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xFA1FCC", Offset = "0xFA1FCC", VA = "0xFA1FCC")]
	public void OnAudioRead(float[] data)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xFA2040", Offset = "0xFA2040", VA = "0xFA2040")]
	public void OnAudioSetPosition(int newPosition)
	{
	}
}
[Token(Token = "0x200003F")]
public class LeanAudio
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float MIN_FREQEUNCY_PERIOD;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int PROCESSING_ITERATIONS_MAX;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float[] generatedWaveDistances;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int generatedWaveDistancesCount;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static float[] longList;

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xFA2048", Offset = "0xFA2048", VA = "0xFA2048")]
	public static LeanAudioOptions options()
	{
		return null;
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xFA2190", Offset = "0xFA2190", VA = "0xFA2190")]
	public static LeanAudioStream createAudioStream(AnimationCurve volume, AnimationCurve frequency, [Optional] LeanAudioOptions options)
	{
		return null;
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xFA2AFC", Offset = "0xFA2AFC", VA = "0xFA2AFC")]
	public static AudioClip createAudio(AnimationCurve volume, AnimationCurve frequency, [Optional] LeanAudioOptions options)
	{
		return null;
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xFA2260", Offset = "0xFA2260", VA = "0xFA2260")]
	private static int createAudioWave(AnimationCurve volume, AnimationCurve frequency, LeanAudioOptions options)
	{
		return default(int);
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xFA25EC", Offset = "0xFA25EC", VA = "0xFA25EC")]
	private static AudioClip createAudioFromWave(int waveLength, LeanAudioOptions options)
	{
		return null;
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xFA2BC0", Offset = "0xFA2BC0", VA = "0xFA2BC0")]
	private static void OnAudioSetPosition(int newPosition)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xFA2BC4", Offset = "0xFA2BC4", VA = "0xFA2BC4")]
	public static AudioClip generateAudioFromCurve(AnimationCurve curve, int frequencyRate = 44100)
	{
		return null;
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xFA2D30", Offset = "0xFA2D30", VA = "0xFA2D30")]
	public static AudioSource play(AudioClip audio, float volume)
	{
		return null;
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xFA2F2C", Offset = "0xFA2F2C", VA = "0xFA2F2C")]
	public static AudioSource play(AudioClip audio)
	{
		return null;
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xFA2FD4", Offset = "0xFA2FD4", VA = "0xFA2FD4")]
	public static AudioSource play(AudioClip audio, Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xFA3050", Offset = "0xFA3050", VA = "0xFA3050")]
	public static AudioSource play(AudioClip audio, Vector3 pos, float volume)
	{
		return null;
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xFA2DFC", Offset = "0xFA2DFC", VA = "0xFA2DFC")]
	public static AudioSource playClipAt(AudioClip clip, Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xFA3100", Offset = "0xFA3100", VA = "0xFA3100")]
	public static void printOutAudioClip(AudioClip audioClip, ref AnimationCurve curve, float scaleX = 1f)
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xFA32A8", Offset = "0xFA32A8", VA = "0xFA32A8")]
	public LeanAudio()
	{
	}
}
[Token(Token = "0x2000040")]
public class LeanAudioOptions
{
	[Token(Token = "0x2000041")]
	public enum LeanAudioWaveStyle
	{
		[Token(Token = "0x4000122")]
		Sine,
		[Token(Token = "0x4000123")]
		Square,
		[Token(Token = "0x4000124")]
		Sawtooth,
		[Token(Token = "0x4000125")]
		Noise
	}

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LeanAudioWaveStyle waveStyle;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3[] vibrato;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] modulation;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int frequencyRate;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float waveNoiseScale;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float waveNoiseInfluence;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool useSetData;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LeanAudioStream stream;

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xFA216C", Offset = "0xFA216C", VA = "0xFA216C")]
	public LeanAudioOptions()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xFA3308", Offset = "0xFA3308", VA = "0xFA3308")]
	public LeanAudioOptions setFrequency(int frequencyRate)
	{
		return null;
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xFA3310", Offset = "0xFA3310", VA = "0xFA3310")]
	public LeanAudioOptions setVibrato(Vector3[] vibrato)
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xFA332C", Offset = "0xFA332C", VA = "0xFA332C")]
	public LeanAudioOptions setWaveSine()
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xFA3334", Offset = "0xFA3334", VA = "0xFA3334")]
	public LeanAudioOptions setWaveSquare()
	{
		return null;
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xFA3340", Offset = "0xFA3340", VA = "0xFA3340")]
	public LeanAudioOptions setWaveSawtooth()
	{
		return null;
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xFA334C", Offset = "0xFA334C", VA = "0xFA334C")]
	public LeanAudioOptions setWaveNoise()
	{
		return null;
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xFA3358", Offset = "0xFA3358", VA = "0xFA3358")]
	public LeanAudioOptions setWaveStyle(LeanAudioWaveStyle style)
	{
		return null;
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xFA3360", Offset = "0xFA3360", VA = "0xFA3360")]
	public LeanAudioOptions setWaveNoiseScale(float waveScale)
	{
		return null;
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xFA3368", Offset = "0xFA3368", VA = "0xFA3368")]
	public LeanAudioOptions setWaveNoiseInfluence(float influence)
	{
		return null;
	}
}
[Token(Token = "0x2000042")]
public class LeanSmooth
{
	[Token(Token = "0x600012F")]
	[Address(RVA = "0xFA3370", Offset = "0xFA3370", VA = "0xFA3370")]
	public static float damp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xFA348C", Offset = "0xFA348C", VA = "0xFA348C")]
	public static Vector3 damp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xFA3538", Offset = "0xFA3538", VA = "0xFA3538")]
	public static Color damp(Color current, Color target, ref Color currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f)
	{
		return default(Color);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xFA3610", Offset = "0xFA3610", VA = "0xFA3610")]
	public static float spring(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f)
	{
		return default(float);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xFA36B8", Offset = "0xFA36B8", VA = "0xFA36B8")]
	public static Vector3 spring(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xFA3784", Offset = "0xFA3784", VA = "0xFA3784")]
	public static Color spring(Color current, Color target, ref Color currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f)
	{
		return default(Color);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xFA3884", Offset = "0xFA3884", VA = "0xFA3884")]
	public static float linear(float current, float target, float moveSpeed, float deltaTime = -1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xFA38F8", Offset = "0xFA38F8", VA = "0xFA38F8")]
	public static Vector3 linear(Vector3 current, Vector3 target, float moveSpeed, float deltaTime = -1f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xFA3A28", Offset = "0xFA3A28", VA = "0xFA3A28")]
	public static Color linear(Color current, Color target, float moveSpeed)
	{
		return default(Color);
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xFA3B7C", Offset = "0xFA3B7C", VA = "0xFA3B7C")]
	public static float bounceOut(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f, float hitDamping = 0.9f)
	{
		return default(float);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xFA3C64", Offset = "0xFA3C64", VA = "0xFA3C64")]
	public static Vector3 bounceOut(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f, float hitDamping = 0.9f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xFA3D40", Offset = "0xFA3D40", VA = "0xFA3D40")]
	public static Color bounceOut(Color current, Color target, ref Color currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f, float hitDamping = 0.9f)
	{
		return default(Color);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xFA3E54", Offset = "0xFA3E54", VA = "0xFA3E54")]
	public LeanSmooth()
	{
	}
}
[Token(Token = "0x2000043")]
public class LeanTester : MonoBehaviour
{
	[Token(Token = "0x2000044")]
	[CompilerGenerated]
	private sealed class <timeoutCheck>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeanTester <>4__this;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <pauseEndTime>5__2;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000142")]
			[Address(RVA = "0xFA4498", Offset = "0xFA4498", VA = "0xFA4498", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000144")]
			[Address(RVA = "0xFA44E0", Offset = "0xFA44E0", VA = "0xFA44E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600013F")]
		[Address(RVA = "0xFA3EF0", Offset = "0xFA3EF0", VA = "0xFA3EF0")]
		[DebuggerHidden]
		public <timeoutCheck>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000140")]
		[Address(RVA = "0xFA3F28", Offset = "0xFA3F28", VA = "0xFA3F28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0xFA3F2C", Offset = "0xFA3F2C", VA = "0xFA3F2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0xFA44A0", Offset = "0xFA44A0", VA = "0xFA44A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float timeout;

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xFA3E5C", Offset = "0xFA3E5C", VA = "0xFA3E5C")]
	public void Start()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xFA3E7C", Offset = "0xFA3E7C", VA = "0xFA3E7C")]
	[IteratorStateMachine(typeof(<timeoutCheck>d__2))]
	private IEnumerator timeoutCheck()
	{
		return null;
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xFA3F18", Offset = "0xFA3F18", VA = "0xFA3F18")]
	public LeanTester()
	{
	}
}
[Token(Token = "0x2000045")]
public class LeanTest
{
	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int expected;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int tests;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int passes;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float timeout;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static bool timeoutStarted;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public static bool testsFinished;

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xFA44E8", Offset = "0xFA44E8", VA = "0xFA44E8")]
	public static void debug(string name, bool didPass, [Optional] string failExplaination)
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xFA4554", Offset = "0xFA4554", VA = "0xFA4554")]
	public static void expect(bool didPass, string definition, [Optional] string failExplaination)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xFA4EE8", Offset = "0xFA4EE8", VA = "0xFA4EE8")]
	public static string padRight(int len)
	{
		return null;
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xFA4BC8", Offset = "0xFA4BC8", VA = "0xFA4BC8")]
	public static float printOutLength(string str)
	{
		return default(float);
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xFA4F5C", Offset = "0xFA4F5C", VA = "0xFA4F5C")]
	public static string formatBC(string str, string color)
	{
		return null;
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xFA408C", Offset = "0xFA408C", VA = "0xFA408C")]
	public static string formatB(string str)
	{
		return null;
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xFA4CF4", Offset = "0xFA4CF4", VA = "0xFA4CF4")]
	public static string formatC(string str, string color)
	{
		return null;
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xFA40F8", Offset = "0xFA40F8", VA = "0xFA40F8")]
	public static void overview()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xFA4FC4", Offset = "0xFA4FC4", VA = "0xFA4FC4")]
	public LeanTest()
	{
	}
}
[Token(Token = "0x2000046")]
public enum TweenAction
{
	[Token(Token = "0x4000132")]
	MOVE_X,
	[Token(Token = "0x4000133")]
	MOVE_Y,
	[Token(Token = "0x4000134")]
	MOVE_Z,
	[Token(Token = "0x4000135")]
	MOVE_LOCAL_X,
	[Token(Token = "0x4000136")]
	MOVE_LOCAL_Y,
	[Token(Token = "0x4000137")]
	MOVE_LOCAL_Z,
	[Token(Token = "0x4000138")]
	MOVE_CURVED,
	[Token(Token = "0x4000139")]
	MOVE_CURVED_LOCAL,
	[Token(Token = "0x400013A")]
	MOVE_SPLINE,
	[Token(Token = "0x400013B")]
	MOVE_SPLINE_LOCAL,
	[Token(Token = "0x400013C")]
	SCALE_X,
	[Token(Token = "0x400013D")]
	SCALE_Y,
	[Token(Token = "0x400013E")]
	SCALE_Z,
	[Token(Token = "0x400013F")]
	ROTATE_X,
	[Token(Token = "0x4000140")]
	ROTATE_Y,
	[Token(Token = "0x4000141")]
	ROTATE_Z,
	[Token(Token = "0x4000142")]
	ROTATE_AROUND,
	[Token(Token = "0x4000143")]
	ROTATE_AROUND_LOCAL,
	[Token(Token = "0x4000144")]
	CANVAS_ROTATEAROUND,
	[Token(Token = "0x4000145")]
	CANVAS_ROTATEAROUND_LOCAL,
	[Token(Token = "0x4000146")]
	CANVAS_PLAYSPRITE,
	[Token(Token = "0x4000147")]
	ALPHA,
	[Token(Token = "0x4000148")]
	TEXT_ALPHA,
	[Token(Token = "0x4000149")]
	CANVAS_ALPHA,
	[Token(Token = "0x400014A")]
	CANVASGROUP_ALPHA,
	[Token(Token = "0x400014B")]
	ALPHA_VERTEX,
	[Token(Token = "0x400014C")]
	COLOR,
	[Token(Token = "0x400014D")]
	CALLBACK_COLOR,
	[Token(Token = "0x400014E")]
	TEXT_COLOR,
	[Token(Token = "0x400014F")]
	CANVAS_COLOR,
	[Token(Token = "0x4000150")]
	CANVAS_MOVE_X,
	[Token(Token = "0x4000151")]
	CANVAS_MOVE_Y,
	[Token(Token = "0x4000152")]
	CANVAS_MOVE_Z,
	[Token(Token = "0x4000153")]
	CALLBACK,
	[Token(Token = "0x4000154")]
	MOVE,
	[Token(Token = "0x4000155")]
	MOVE_LOCAL,
	[Token(Token = "0x4000156")]
	MOVE_TO_TRANSFORM,
	[Token(Token = "0x4000157")]
	ROTATE,
	[Token(Token = "0x4000158")]
	ROTATE_LOCAL,
	[Token(Token = "0x4000159")]
	SCALE,
	[Token(Token = "0x400015A")]
	VALUE3,
	[Token(Token = "0x400015B")]
	GUI_MOVE,
	[Token(Token = "0x400015C")]
	GUI_MOVE_MARGIN,
	[Token(Token = "0x400015D")]
	GUI_SCALE,
	[Token(Token = "0x400015E")]
	GUI_ALPHA,
	[Token(Token = "0x400015F")]
	GUI_ROTATE,
	[Token(Token = "0x4000160")]
	DELAYED_SOUND,
	[Token(Token = "0x4000161")]
	CANVAS_MOVE,
	[Token(Token = "0x4000162")]
	CANVAS_SCALE,
	[Token(Token = "0x4000163")]
	CANVAS_SIZEDELTA,
	[Token(Token = "0x4000164")]
	FOLLOW
}
[Token(Token = "0x2000047")]
public enum LeanTweenType
{
	[Token(Token = "0x4000166")]
	notUsed,
	[Token(Token = "0x4000167")]
	linear,
	[Token(Token = "0x4000168")]
	easeOutQuad,
	[Token(Token = "0x4000169")]
	easeInQuad,
	[Token(Token = "0x400016A")]
	easeInOutQuad,
	[Token(Token = "0x400016B")]
	easeInCubic,
	[Token(Token = "0x400016C")]
	easeOutCubic,
	[Token(Token = "0x400016D")]
	easeInOutCubic,
	[Token(Token = "0x400016E")]
	easeInQuart,
	[Token(Token = "0x400016F")]
	easeOutQuart,
	[Token(Token = "0x4000170")]
	easeInOutQuart,
	[Token(Token = "0x4000171")]
	easeInQuint,
	[Token(Token = "0x4000172")]
	easeOutQuint,
	[Token(Token = "0x4000173")]
	easeInOutQuint,
	[Token(Token = "0x4000174")]
	easeInSine,
	[Token(Token = "0x4000175")]
	easeOutSine,
	[Token(Token = "0x4000176")]
	easeInOutSine,
	[Token(Token = "0x4000177")]
	easeInExpo,
	[Token(Token = "0x4000178")]
	easeOutExpo,
	[Token(Token = "0x4000179")]
	easeInOutExpo,
	[Token(Token = "0x400017A")]
	easeInCirc,
	[Token(Token = "0x400017B")]
	easeOutCirc,
	[Token(Token = "0x400017C")]
	easeInOutCirc,
	[Token(Token = "0x400017D")]
	easeInBounce,
	[Token(Token = "0x400017E")]
	easeOutBounce,
	[Token(Token = "0x400017F")]
	easeInOutBounce,
	[Token(Token = "0x4000180")]
	easeInBack,
	[Token(Token = "0x4000181")]
	easeOutBack,
	[Token(Token = "0x4000182")]
	easeInOutBack,
	[Token(Token = "0x4000183")]
	easeInElastic,
	[Token(Token = "0x4000184")]
	easeOutElastic,
	[Token(Token = "0x4000185")]
	easeInOutElastic,
	[Token(Token = "0x4000186")]
	easeSpring,
	[Token(Token = "0x4000187")]
	easeShake,
	[Token(Token = "0x4000188")]
	punch,
	[Token(Token = "0x4000189")]
	once,
	[Token(Token = "0x400018A")]
	clamp,
	[Token(Token = "0x400018B")]
	pingPong,
	[Token(Token = "0x400018C")]
	animationCurve
}
[Token(Token = "0x2000048")]
public enum LeanProp
{
	[Token(Token = "0x400018E")]
	position,
	[Token(Token = "0x400018F")]
	localPosition,
	[Token(Token = "0x4000190")]
	x,
	[Token(Token = "0x4000191")]
	y,
	[Token(Token = "0x4000192")]
	z,
	[Token(Token = "0x4000193")]
	localX,
	[Token(Token = "0x4000194")]
	localY,
	[Token(Token = "0x4000195")]
	localZ,
	[Token(Token = "0x4000196")]
	scale,
	[Token(Token = "0x4000197")]
	color
}
[Token(Token = "0x2000049")]
public class LeanTween : MonoBehaviour
{
	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool throwErrors;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float tau;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float PI_DIV2;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static LTSeq[] sequences;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static LTDescr[] tweens;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int[] tweensFinished;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static int[] tweensFinishedIds;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static LTDescr tween;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static int tweenMaxSearch;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static int maxTweens;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static int maxSequences;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private static int frameRendered;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static GameObject _tweenEmpty;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static float dtEstimated;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public static float dtManual;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static float dtActual;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private static uint global_counter;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static int i;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static int j;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static int finishedCnt;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static AnimationCurve punch;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static AnimationCurve shake;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static int maxTweenReached;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public static int startSearch;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static LTDescr d;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static Action<LTEvent>[] eventListeners;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static GameObject[] goListeners;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static int eventsMaxSearch;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public static int EVENTS_MAX;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static int LISTENERS_MAX;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private static int INIT_LISTENERS_MAX;

	[Token(Token = "0x1700000B")]
	public static int maxSearch
	{
		[Token(Token = "0x6000150")]
		[Address(RVA = "0xFA50D4", Offset = "0xFA50D4", VA = "0xFA50D4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700000C")]
	public static int maxSimulataneousTweens
	{
		[Token(Token = "0x6000151")]
		[Address(RVA = "0xFA512C", Offset = "0xFA512C", VA = "0xFA512C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700000D")]
	public static int tweensRunning
	{
		[Token(Token = "0x6000152")]
		[Address(RVA = "0xFA5184", Offset = "0xFA5184", VA = "0xFA5184")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700000E")]
	public static GameObject tweenEmpty
	{
		[Token(Token = "0x600017D")]
		[Address(RVA = "0xFA8F04", Offset = "0xFA8F04", VA = "0xFA8F04")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xFA501C", Offset = "0xFA501C", VA = "0xFA501C")]
	public static void init()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xFA5074", Offset = "0xFA5074", VA = "0xFA5074")]
	public static void init(int maxSimultaneousTweens)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xFA523C", Offset = "0xFA523C", VA = "0xFA523C")]
	public static void init(int maxSimultaneousTweens, int maxSimultaneousSequences)
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xFA56F4", Offset = "0xFA56F4", VA = "0xFA56F4")]
	public static void reset()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xFA584C", Offset = "0xFA584C", VA = "0xFA584C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xFA5CE0", Offset = "0xFA5CE0", VA = "0xFA5CE0")]
	private static void onLevelWasLoaded54(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xFA5D40", Offset = "0xFA5D40", VA = "0xFA5D40")]
	private static void internalOnLevelWasLoaded(int lvl)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xFA5898", Offset = "0xFA5898", VA = "0xFA5898")]
	public static void update()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xFA61F4", Offset = "0xFA61F4", VA = "0xFA61F4")]
	public static void removeTween(int i, int uniqueId)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xFA5EE4", Offset = "0xFA5EE4", VA = "0xFA5EE4")]
	public static void removeTween(int i)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xFA640C", Offset = "0xFA640C", VA = "0xFA640C")]
	public static Vector3[] add(Vector3[] a, Vector3 b)
	{
		return null;
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xFA6578", Offset = "0xFA6578", VA = "0xFA6578")]
	public static float closestRot(float from, float to)
	{
		return default(float);
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xFA65C8", Offset = "0xFA65C8", VA = "0xFA65C8")]
	public static void cancelAll()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xFA6618", Offset = "0xFA6618", VA = "0xFA6618")]
	public static void cancelAll(bool callComplete)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xFA67E0", Offset = "0xFA67E0", VA = "0xFA67E0")]
	public static void cancel(GameObject gameObject)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xFA6838", Offset = "0xFA6838", VA = "0xFA6838")]
	public static void cancel(GameObject gameObject, bool callOnComplete)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xFA69A0", Offset = "0xFA69A0", VA = "0xFA69A0")]
	public static void cancel(RectTransform rect)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xFA6A14", Offset = "0xFA6A14", VA = "0xFA6A14")]
	public static void cancel(GameObject gameObject, int uniqueId, bool callOnComplete = false)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xFA6C78", Offset = "0xFA6C78", VA = "0xFA6C78")]
	public static void cancel(LTRect ltRect, int uniqueId)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xFA6D88", Offset = "0xFA6D88", VA = "0xFA6D88")]
	public static void cancel(int uniqueId)
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xFA6DE0", Offset = "0xFA6DE0", VA = "0xFA6DE0")]
	public static void cancel(int uniqueId, bool callOnComplete)
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xFA7024", Offset = "0xFA7024", VA = "0xFA7024")]
	public static LTDescr descr(int uniqueId)
	{
		return null;
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xFA7268", Offset = "0xFA7268", VA = "0xFA7268")]
	public static LTDescr description(int uniqueId)
	{
		return null;
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xFA72BC", Offset = "0xFA72BC", VA = "0xFA72BC")]
	public static LTDescr[] descriptions([Optional] GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xFA754C", Offset = "0xFA754C", VA = "0xFA754C")]
	[Obsolete("Use 'pause( id )' instead")]
	public static void pause(GameObject gameObject, int uniqueId)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xFA75A0", Offset = "0xFA75A0", VA = "0xFA75A0")]
	public static void pause(int uniqueId)
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xFA7678", Offset = "0xFA7678", VA = "0xFA7678")]
	public static void pause(GameObject gameObject)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xFA77C8", Offset = "0xFA77C8", VA = "0xFA77C8")]
	public static void pauseAll()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xFA788C", Offset = "0xFA788C", VA = "0xFA788C")]
	public static void resumeAll()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xFA7950", Offset = "0xFA7950", VA = "0xFA7950")]
	[Obsolete("Use 'resume( id )' instead")]
	public static void resume(GameObject gameObject, int uniqueId)
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xFA79A4", Offset = "0xFA79A4", VA = "0xFA79A4")]
	public static void resume(int uniqueId)
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xFA7A7C", Offset = "0xFA7A7C", VA = "0xFA7A7C")]
	public static void resume(GameObject gameObject)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xFA7BCC", Offset = "0xFA7BCC", VA = "0xFA7BCC")]
	public static bool isPaused([Optional] GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xFA7E3C", Offset = "0xFA7E3C", VA = "0xFA7E3C")]
	public static bool isPaused(RectTransform rect)
	{
		return default(bool);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xFA808C", Offset = "0xFA808C", VA = "0xFA808C")]
	public static bool isPaused(int uniqueId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xFA7EAC", Offset = "0xFA7EAC", VA = "0xFA7EAC")]
	public static bool isTweening([Optional] GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xFA81DC", Offset = "0xFA81DC", VA = "0xFA81DC")]
	public static bool isTweening(RectTransform rect)
	{
		return default(bool);
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xFA824C", Offset = "0xFA824C", VA = "0xFA824C")]
	public static bool isTweening(int uniqueId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xFA8348", Offset = "0xFA8348", VA = "0xFA8348")]
	public static bool isTweening(LTRect ltRect)
	{
		return default(bool);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xFA845C", Offset = "0xFA845C", VA = "0xFA845C")]
	public static void drawBezierPath(Vector3 a, Vector3 b, Vector3 c, Vector3 d, float arrowSize = 0f, [Optional] Transform arrowTransform)
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xFA8A8C", Offset = "0xFA8A8C", VA = "0xFA8A8C")]
	public static object logError(string error)
	{
		return null;
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xFA8B2C", Offset = "0xFA8B2C", VA = "0xFA8B2C")]
	public static LTDescr options(LTDescr seed)
	{
		return null;
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xFA8B9C", Offset = "0xFA8B9C", VA = "0xFA8B9C")]
	public static LTDescr options()
	{
		return null;
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xFA8F6C", Offset = "0xFA8F6C", VA = "0xFA8F6C")]
	private static LTDescr pushNewTween(GameObject gameObject, Vector3 to, float time, LTDescr tween)
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xFA9088", Offset = "0xFA9088", VA = "0xFA9088")]
	public static LTDescr play(RectTransform rectTransform, Sprite[] sprites)
	{
		return null;
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xFA916C", Offset = "0xFA916C", VA = "0xFA916C")]
	public static LTSeq sequence(bool initSequence = true)
	{
		return null;
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xFA9394", Offset = "0xFA9394", VA = "0xFA9394")]
	public static LTDescr alpha(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xFA9464", Offset = "0xFA9464", VA = "0xFA9464")]
	public static LTDescr alpha(LTRect ltRect, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xFA9514", Offset = "0xFA9514", VA = "0xFA9514")]
	public static LTDescr textAlpha(RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xFA95B8", Offset = "0xFA95B8", VA = "0xFA95B8")]
	public static LTDescr alphaText(RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xFA965C", Offset = "0xFA965C", VA = "0xFA965C")]
	public static LTDescr alphaCanvas(CanvasGroup canvasGroup, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xFA9700", Offset = "0xFA9700", VA = "0xFA9700")]
	public static LTDescr alphaVertex(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xFA978C", Offset = "0xFA978C", VA = "0xFA978C")]
	public static LTDescr color(GameObject gameObject, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xFA9890", Offset = "0xFA9890", VA = "0xFA9890")]
	public static LTDescr textColor(RectTransform rectTransform, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xFA9968", Offset = "0xFA9968", VA = "0xFA9968")]
	public static LTDescr colorText(RectTransform rectTransform, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xFA9A40", Offset = "0xFA9A40", VA = "0xFA9A40")]
	public static LTDescr delayedCall(float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xFA9B20", Offset = "0xFA9B20", VA = "0xFA9B20")]
	public static LTDescr delayedCall(float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xFA9C00", Offset = "0xFA9C00", VA = "0xFA9C00")]
	public static LTDescr delayedCall(GameObject gameObject, float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xFA9CE4", Offset = "0xFA9CE4", VA = "0xFA9CE4")]
	public static LTDescr delayedCall(GameObject gameObject, float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xFA9DC8", Offset = "0xFA9DC8", VA = "0xFA9DC8")]
	public static LTDescr destroyAfter(LTRect rect, float delayTime)
	{
		return null;
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xFA9EB8", Offset = "0xFA9EB8", VA = "0xFA9EB8")]
	public static LTDescr move(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xFA9F54", Offset = "0xFA9F54", VA = "0xFA9F54")]
	public static LTDescr move(GameObject gameObject, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xFAA00C", Offset = "0xFAA00C", VA = "0xFAA00C")]
	public static LTDescr move(GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xFAA524", Offset = "0xFAA524", VA = "0xFAA524")]
	public static LTDescr move(GameObject gameObject, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xFAA5FC", Offset = "0xFAA5FC", VA = "0xFAA5FC")]
	public static LTDescr move(GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xFAA6D4", Offset = "0xFAA6D4", VA = "0xFAA6D4")]
	public static LTDescr moveSpline(GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xFAA82C", Offset = "0xFAA82C", VA = "0xFAA82C")]
	public static LTDescr moveSpline(GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xFAA904", Offset = "0xFAA904", VA = "0xFAA904")]
	public static LTDescr moveSplineLocal(GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xFAAA24", Offset = "0xFAAA24", VA = "0xFAAA24")]
	public static LTDescr move(LTRect ltRect, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xFAAAD4", Offset = "0xFAAAD4", VA = "0xFAAAD4")]
	public static LTDescr moveMargin(LTRect ltRect, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xFAAB84", Offset = "0xFAAB84", VA = "0xFAAB84")]
	public static LTDescr moveX(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xFAAC10", Offset = "0xFAAC10", VA = "0xFAAC10")]
	public static LTDescr moveY(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xFAAC9C", Offset = "0xFAAC9C", VA = "0xFAAC9C")]
	public static LTDescr moveZ(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xFAAD28", Offset = "0xFAAD28", VA = "0xFAAD28")]
	public static LTDescr moveLocal(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xFAADC4", Offset = "0xFAADC4", VA = "0xFAADC4")]
	public static LTDescr moveLocal(GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xFAAF2C", Offset = "0xFAAF2C", VA = "0xFAAF2C")]
	public static LTDescr moveLocalX(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xFAAFB8", Offset = "0xFAAFB8", VA = "0xFAAFB8")]
	public static LTDescr moveLocalY(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xFAB044", Offset = "0xFAB044", VA = "0xFAB044")]
	public static LTDescr moveLocalZ(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xFAB0D0", Offset = "0xFAB0D0", VA = "0xFAB0D0")]
	public static LTDescr moveLocal(GameObject gameObject, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xFAB1A8", Offset = "0xFAB1A8", VA = "0xFAB1A8")]
	public static LTDescr moveLocal(GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xFAB280", Offset = "0xFAB280", VA = "0xFAB280")]
	public static LTDescr move(GameObject gameObject, Transform to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xFAB364", Offset = "0xFAB364", VA = "0xFAB364")]
	public static LTDescr rotate(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xFAB400", Offset = "0xFAB400", VA = "0xFAB400")]
	public static LTDescr rotate(LTRect ltRect, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xFAB4A4", Offset = "0xFAB4A4", VA = "0xFAB4A4")]
	public static LTDescr rotateLocal(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xFAB540", Offset = "0xFAB540", VA = "0xFAB540")]
	public static LTDescr rotateX(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xFAB5CC", Offset = "0xFAB5CC", VA = "0xFAB5CC")]
	public static LTDescr rotateY(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xFAB658", Offset = "0xFAB658", VA = "0xFAB658")]
	public static LTDescr rotateZ(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xFAB6E4", Offset = "0xFAB6E4", VA = "0xFAB6E4")]
	public static LTDescr rotateAround(GameObject gameObject, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xFAB7A4", Offset = "0xFAB7A4", VA = "0xFAB7A4")]
	public static LTDescr rotateAroundLocal(GameObject gameObject, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xFAB864", Offset = "0xFAB864", VA = "0xFAB864")]
	public static LTDescr scale(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xFAB900", Offset = "0xFAB900", VA = "0xFAB900")]
	public static LTDescr scale(LTRect ltRect, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xFAB9B0", Offset = "0xFAB9B0", VA = "0xFAB9B0")]
	public static LTDescr scaleX(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xFABA3C", Offset = "0xFABA3C", VA = "0xFABA3C")]
	public static LTDescr scaleY(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xFABAC8", Offset = "0xFABAC8", VA = "0xFABAC8")]
	public static LTDescr scaleZ(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xFABB54", Offset = "0xFABB54", VA = "0xFABB54")]
	public static LTDescr value(GameObject gameObject, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xFABC04", Offset = "0xFABC04", VA = "0xFABC04")]
	public static LTDescr value(float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xFABCB8", Offset = "0xFABCB8", VA = "0xFABCB8")]
	public static LTDescr value(GameObject gameObject, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xFABD90", Offset = "0xFABD90", VA = "0xFABD90")]
	public static LTDescr value(GameObject gameObject, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xFABE60", Offset = "0xFABE60", VA = "0xFABE60")]
	public static LTDescr value(GameObject gameObject, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xFABFA8", Offset = "0xFABFA8", VA = "0xFABFA8")]
	public static LTDescr value(GameObject gameObject, Action<float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xFAC08C", Offset = "0xFAC08C", VA = "0xFAC08C")]
	public static LTDescr value(GameObject gameObject, Action<float, float> callOnUpdateRatio, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xFAC170", Offset = "0xFAC170", VA = "0xFAC170")]
	public static LTDescr value(GameObject gameObject, Action<Color> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xFAC2A4", Offset = "0xFAC2A4", VA = "0xFAC2A4")]
	public static LTDescr value(GameObject gameObject, Action<Color, object> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xFAC3D8", Offset = "0xFAC3D8", VA = "0xFAC3D8")]
	public static LTDescr value(GameObject gameObject, Action<Vector2> callOnUpdate, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xFAC4CC", Offset = "0xFAC4CC", VA = "0xFAC4CC")]
	public static LTDescr value(GameObject gameObject, Action<Vector3> callOnUpdate, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xFAC5D0", Offset = "0xFAC5D0", VA = "0xFAC5D0")]
	public static LTDescr value(GameObject gameObject, Action<float, object> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xFAC6B8", Offset = "0xFAC6B8", VA = "0xFAC6B8")]
	public static LTDescr delayedSound(AudioClip audio, Vector3 pos, float volume)
	{
		return null;
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xFAC79C", Offset = "0xFAC79C", VA = "0xFAC79C")]
	public static LTDescr delayedSound(GameObject gameObject, AudioClip audio, Vector3 pos, float volume)
	{
		return null;
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xFAC884", Offset = "0xFAC884", VA = "0xFAC884")]
	public static LTDescr move(RectTransform rectTrans, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xFAC948", Offset = "0xFAC948", VA = "0xFAC948")]
	public static LTDescr moveX(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xFAC9FC", Offset = "0xFAC9FC", VA = "0xFAC9FC")]
	public static LTDescr moveY(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xFACAB0", Offset = "0xFACAB0", VA = "0xFACAB0")]
	public static LTDescr moveZ(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xFACB64", Offset = "0xFACB64", VA = "0xFACB64")]
	public static LTDescr rotate(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xFACC64", Offset = "0xFACC64", VA = "0xFACC64")]
	public static LTDescr rotate(RectTransform rectTrans, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xFACD74", Offset = "0xFACD74", VA = "0xFACD74")]
	public static LTDescr rotateAround(RectTransform rectTrans, Vector3 axis, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xFACE5C", Offset = "0xFACE5C", VA = "0xFACE5C")]
	public static LTDescr rotateAroundLocal(RectTransform rectTrans, Vector3 axis, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xFACF44", Offset = "0xFACF44", VA = "0xFACF44")]
	public static LTDescr scale(RectTransform rectTrans, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xFAD008", Offset = "0xFAD008", VA = "0xFAD008")]
	public static LTDescr size(RectTransform rectTrans, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xFAD0C8", Offset = "0xFAD0C8", VA = "0xFAD0C8")]
	public static LTDescr alpha(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xFAD17C", Offset = "0xFAD17C", VA = "0xFAD17C")]
	public static LTDescr color(RectTransform rectTrans, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xFAD264", Offset = "0xFAD264", VA = "0xFAD264")]
	public static float tweenOnCurve(LTDescr tweenDescr, float ratioPassed)
	{
		return default(float);
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xFAD2AC", Offset = "0xFAD2AC", VA = "0xFAD2AC")]
	public static Vector3 tweenOnCurveVector(LTDescr tweenDescr, float ratioPassed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xFAD384", Offset = "0xFAD384", VA = "0xFAD384")]
	public static float easeOutQuadOpt(float start, float diff, float ratioPassed)
	{
		return default(float);
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xFAD39C", Offset = "0xFAD39C", VA = "0xFAD39C")]
	public static float easeInQuadOpt(float start, float diff, float ratioPassed)
	{
		return default(float);
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xFAD3AC", Offset = "0xFAD3AC", VA = "0xFAD3AC")]
	public static float easeInOutQuadOpt(float start, float diff, float ratioPassed)
	{
		return default(float);
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xFAD3FC", Offset = "0xFAD3FC", VA = "0xFAD3FC")]
	public static Vector3 easeInOutQuadOpt(Vector3 start, Vector3 diff, float ratioPassed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xFAD47C", Offset = "0xFAD47C", VA = "0xFAD47C")]
	public static float linear(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xFAD4A0", Offset = "0xFAD4A0", VA = "0xFAD4A0")]
	public static float clerp(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xFAD504", Offset = "0xFAD504", VA = "0xFAD504")]
	public static float spring(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xFAD5B4", Offset = "0xFAD5B4", VA = "0xFAD5B4")]
	public static float easeInQuad(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xFAD5C8", Offset = "0xFAD5C8", VA = "0xFAD5C8")]
	public static float easeOutQuad(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xFAD5E4", Offset = "0xFAD5E4", VA = "0xFAD5E4")]
	public static float easeInOutQuad(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xFAD638", Offset = "0xFAD638", VA = "0xFAD638")]
	public static float easeInOutQuadOpt2(float start, float diffBy2, float val, float val2)
	{
		return default(float);
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xFAD670", Offset = "0xFAD670", VA = "0xFAD670")]
	public static float easeInCubic(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xFAD688", Offset = "0xFAD688", VA = "0xFAD688")]
	public static float easeOutCubic(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xFAD6B0", Offset = "0xFAD6B0", VA = "0xFAD6B0")]
	public static float easeInOutCubic(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xFAD708", Offset = "0xFAD708", VA = "0xFAD708")]
	public static float easeInQuart(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xFAD724", Offset = "0xFAD724", VA = "0xFAD724")]
	public static float easeOutQuart(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xFAD74C", Offset = "0xFAD74C", VA = "0xFAD74C")]
	public static float easeInOutQuart(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xFAD7A8", Offset = "0xFAD7A8", VA = "0xFAD7A8")]
	public static float easeInQuint(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xFAD7C8", Offset = "0xFAD7C8", VA = "0xFAD7C8")]
	public static float easeOutQuint(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xFAD7F8", Offset = "0xFAD7F8", VA = "0xFAD7F8")]
	public static float easeInOutQuint(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xFAD860", Offset = "0xFAD860", VA = "0xFAD860")]
	public static float easeInSine(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xFAD898", Offset = "0xFAD898", VA = "0xFAD898")]
	public static float easeOutSine(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xFAD8CC", Offset = "0xFAD8CC", VA = "0xFAD8CC")]
	public static float easeInOutSine(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xFAD910", Offset = "0xFAD910", VA = "0xFAD910")]
	public static float easeInExpo(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xFAD948", Offset = "0xFAD948", VA = "0xFAD948")]
	public static float easeOutExpo(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xFAD980", Offset = "0xFAD980", VA = "0xFAD980")]
	public static float easeInOutExpo(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xFAD9F0", Offset = "0xFAD9F0", VA = "0xFAD9F0")]
	public static float easeInCirc(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xFADA18", Offset = "0xFADA18", VA = "0xFADA18")]
	public static float easeOutCirc(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xFADA40", Offset = "0xFADA40", VA = "0xFADA40")]
	public static float easeInOutCirc(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xFADA94", Offset = "0xFADA94", VA = "0xFADA94")]
	public static float easeInBounce(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xFADB1C", Offset = "0xFADB1C", VA = "0xFADB1C")]
	public static float easeOutBounce(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xFADBE4", Offset = "0xFADBE4", VA = "0xFADBE4")]
	public static float easeInOutBounce(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xFADC98", Offset = "0xFADC98", VA = "0xFADC98")]
	public static float easeInBack(float start, float end, float val, float overshoot = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xFADCCC", Offset = "0xFADCCC", VA = "0xFADCCC")]
	public static float easeOutBack(float start, float end, float val, float overshoot = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xFADD0C", Offset = "0xFADD0C", VA = "0xFADD0C")]
	public static float easeInOutBack(float start, float end, float val, float overshoot = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xFADDA4", Offset = "0xFADDA4", VA = "0xFADDA4")]
	public static float easeInElastic(float start, float end, float val, float overshoot = 1f, float period = 0.3f)
	{
		return default(float);
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xFADE7C", Offset = "0xFADE7C", VA = "0xFADE7C")]
	public static float easeOutElastic(float start, float end, float val, float overshoot = 1f, float period = 0.3f)
	{
		return default(float);
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xFADF4C", Offset = "0xFADF4C", VA = "0xFADF4C")]
	public static float easeInOutElastic(float start, float end, float val, float overshoot = 1f, float period = 0.3f)
	{
		return default(float);
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xFAE09C", Offset = "0xFAE09C", VA = "0xFAE09C")]
	public static LTDescr followDamp(Transform trans, Transform target, LeanProp prop, float smoothTime, float maxSpeed = -1f)
	{
		return null;
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xFAE434", Offset = "0xFAE434", VA = "0xFAE434")]
	public static LTDescr followSpring(Transform trans, Transform target, LeanProp prop, float smoothTime, float maxSpeed = -1f, float friction = 2f, float accelRate = 0.5f)
	{
		return null;
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xFAE7D8", Offset = "0xFAE7D8", VA = "0xFAE7D8")]
	public static LTDescr followBounceOut(Transform trans, Transform target, LeanProp prop, float smoothTime, float maxSpeed = -1f, float friction = 2f, float accelRate = 0.5f, float hitDamping = 0.9f)
	{
		return null;
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xFAEB6C", Offset = "0xFAEB6C", VA = "0xFAEB6C")]
	public static LTDescr followLinear(Transform trans, Transform target, LeanProp prop, float moveSpeed)
	{
		return null;
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xFAEEE0", Offset = "0xFAEEE0", VA = "0xFAEEE0")]
	public static void addListener(int eventId, Action<LTEvent> callback)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xFAEF48", Offset = "0xFAEF48", VA = "0xFAEF48")]
	public static void addListener(GameObject caller, int eventId, Action<LTEvent> callback)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xFAF384", Offset = "0xFAF384", VA = "0xFAF384")]
	public static bool removeListener(int eventId, Action<LTEvent> callback)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xFAF5EC", Offset = "0xFAF5EC", VA = "0xFAF5EC")]
	public static bool removeListener(int eventId)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xFAF3EC", Offset = "0xFAF3EC", VA = "0xFAF3EC")]
	public static bool removeListener(GameObject caller, int eventId, Action<LTEvent> callback)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xFAF6B0", Offset = "0xFAF6B0", VA = "0xFAF6B0")]
	public static void dispatchEvent(int eventId)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xFAF708", Offset = "0xFAF708", VA = "0xFAF708")]
	public static void dispatchEvent(int eventId, object data)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xFAF924", Offset = "0xFAF924", VA = "0xFAF924")]
	public LeanTween()
	{
	}
}
[Token(Token = "0x200004E")]
public class LTUtility
{
	[Token(Token = "0x600022C")]
	[Address(RVA = "0xFB1F10", Offset = "0xFB1F10", VA = "0xFB1F10")]
	public static Vector3[] reverse(Vector3[] arr)
	{
		return null;
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xFB1FAC", Offset = "0xFB1FAC", VA = "0xFB1FAC")]
	public LTUtility()
	{
	}
}
[Token(Token = "0x200004F")]
public class LTBezier
{
	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float length;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3 a;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 aa;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 bb;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 cc;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float len;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float[] arcLengths;

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xFB1FB4", Offset = "0xFB1FB4", VA = "0xFB1FB4")]
	public LTBezier(Vector3 a, Vector3 b, Vector3 c, Vector3 d, float precision)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xFB22A4", Offset = "0xFB22A4", VA = "0xFB22A4")]
	private float map(float u)
	{
		return default(float);
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xFB224C", Offset = "0xFB224C", VA = "0xFB224C")]
	private Vector3 bezierPoint(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xFB23C4", Offset = "0xFB23C4", VA = "0xFB23C4")]
	public Vector3 point(float t)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000050")]
public class LTBezierPath
{
	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3[] pts;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float length;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool orientToPath;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool orientToPath2d;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LTBezier[] beziers;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] lengthRatio;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int currentBezier;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int previousBezier;

	[Token(Token = "0x1700000F")]
	public float distance
	{
		[Token(Token = "0x6000235")]
		[Address(RVA = "0xFB23E4", Offset = "0xFB23E4", VA = "0xFB23E4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xFB23DC", Offset = "0xFB23DC", VA = "0xFB23DC")]
	public LTBezierPath()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xFAA174", Offset = "0xFAA174", VA = "0xFAA174")]
	public LTBezierPath(Vector3[] pts_)
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xFAA1A0", Offset = "0xFAA1A0", VA = "0xFAA1A0")]
	public void setPoints(Vector3[] pts_)
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xFB23EC", Offset = "0xFB23EC", VA = "0xFB23EC")]
	public Vector3 point(float ratio)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xFB24B0", Offset = "0xFB24B0", VA = "0xFB24B0")]
	public void place2d(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xFB2564", Offset = "0xFB2564", VA = "0xFB2564")]
	public void placeLocal2d(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xFB2618", Offset = "0xFB2618", VA = "0xFB2618")]
	public void place(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xFB2684", Offset = "0xFB2684", VA = "0xFB2684")]
	public void place(Transform transform, float ratio, Vector3 worldUp)
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xFB2720", Offset = "0xFB2720", VA = "0xFB2720")]
	public void placeLocal(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xFB278C", Offset = "0xFB278C", VA = "0xFB278C")]
	public void placeLocal(Transform transform, float ratio, Vector3 worldUp)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xFB2874", Offset = "0xFB2874", VA = "0xFB2874")]
	public void gizmoDraw(float t = -1f)
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xFB2954", Offset = "0xFB2954", VA = "0xFB2954")]
	public float ratioAtPoint(Vector3 pt, float precision = 0.01f)
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x2000051")]
public class LTSpline
{
	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int DISTANCE_COUNT;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int SUBLINE_COUNT;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float distance;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool constantSpeed;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3[] pts;

	[NonSerialized]
	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] ptsAdj;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int ptsAdjLength;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool orientToPath;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool orientToPath2d;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int numSections;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int currPt;

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xFAA7F4", Offset = "0xFAA7F4", VA = "0xFAA7F4")]
	public LTSpline(Vector3[] pts)
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xFB2F38", Offset = "0xFB2F38", VA = "0xFB2F38")]
	public LTSpline(Vector3[] pts, bool constantSpeed)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xFB2B2C", Offset = "0xFB2B2C", VA = "0xFB2B2C")]
	private void init(Vector3[] pts, bool constantSpeed)
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xFB317C", Offset = "0xFB317C", VA = "0xFB317C")]
	public Vector3 map(float u)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xFB2F78", Offset = "0xFB2F78", VA = "0xFB2F78")]
	public Vector3 interp(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xFB3278", Offset = "0xFB3278", VA = "0xFB3278")]
	public float ratioAtPoint(Vector3 pt)
	{
		return default(float);
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xFB33A4", Offset = "0xFB33A4", VA = "0xFB33A4")]
	public Vector3 point(float ratio)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xFB33BC", Offset = "0xFB33BC", VA = "0xFB33BC")]
	public void place2d(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xFB3470", Offset = "0xFB3470", VA = "0xFB3470")]
	public void placeLocal2d(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xFB35A8", Offset = "0xFB35A8", VA = "0xFB35A8")]
	public void place(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xFB3614", Offset = "0xFB3614", VA = "0xFB3614")]
	public void place(Transform transform, float ratio, Vector3 worldUp)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xFB36B0", Offset = "0xFB36B0", VA = "0xFB36B0")]
	public void placeLocal(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xFB371C", Offset = "0xFB371C", VA = "0xFB371C")]
	public void placeLocal(Transform transform, float ratio, Vector3 worldUp)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xFB37DC", Offset = "0xFB37DC", VA = "0xFB37DC")]
	public void gizmoDraw(float t = -1f)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xFB3890", Offset = "0xFB3890", VA = "0xFB3890")]
	public void drawGizmo(Color color)
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xFB39DC", Offset = "0xFB39DC", VA = "0xFB39DC")]
	public static void drawGizmo(Transform[] arr, Color color)
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xFB3C0C", Offset = "0xFB3C0C", VA = "0xFB3C0C")]
	public static void drawLine(Transform[] arr, float width, Color color)
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xFB3C1C", Offset = "0xFB3C1C", VA = "0xFB3C1C")]
	public void drawLinesGLLines(Material outlineMaterial, Color color, float width)
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xFB3DE4", Offset = "0xFB3DE4", VA = "0xFB3DE4")]
	public Vector3[] generateVectors()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000052")]
public class LTRect
{
	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Rect _rect;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float alpha;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotation;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 pivot;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 margin;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Rect relativeRect;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool rotateEnabled;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[HideInInspector]
	public bool rotateFinished;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool alphaEnabled;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string labelStr;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LTGUI.Element_Type type;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GUIStyle style;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool useColor;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Color color;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool fontScaleToFit;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool useSimpleScale;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
	public bool sizeByHeight;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Texture texture;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int _id;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[HideInInspector]
	public int counter;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool colorTouched;

	[Token(Token = "0x17000010")]
	public bool hasInitiliazed
	{
		[Token(Token = "0x6000258")]
		[Address(RVA = "0xFB4698", Offset = "0xFB4698", VA = "0xFB4698")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000011")]
	public int id
	{
		[Token(Token = "0x6000259")]
		[Address(RVA = "0xFA62B4", Offset = "0xFA62B4", VA = "0xFA62B4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000012")]
	public float x
	{
		[Token(Token = "0x600025D")]
		[Address(RVA = "0xFB46B0", Offset = "0xFB46B0", VA = "0xFB46B0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600025E")]
		[Address(RVA = "0xFB46BC", Offset = "0xFB46BC", VA = "0xFB46BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public float y
	{
		[Token(Token = "0x600025F")]
		[Address(RVA = "0xFB46C8", Offset = "0xFB46C8", VA = "0xFB46C8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000260")]
		[Address(RVA = "0xFB46D4", Offset = "0xFB46D4", VA = "0xFB46D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public float width
	{
		[Token(Token = "0x6000261")]
		[Address(RVA = "0xFB46E0", Offset = "0xFB46E0", VA = "0xFB46E0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000262")]
		[Address(RVA = "0xFB46EC", Offset = "0xFB46EC", VA = "0xFB46EC")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public float height
	{
		[Token(Token = "0x6000263")]
		[Address(RVA = "0xFB46F8", Offset = "0xFB46F8", VA = "0xFB46F8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000264")]
		[Address(RVA = "0xFB4704", Offset = "0xFB4704", VA = "0xFB4704")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public Rect rect
	{
		[Token(Token = "0x6000265")]
		[Address(RVA = "0xFB4710", Offset = "0xFB4710", VA = "0xFB4710")]
		get
		{
			return default(Rect);
		}
		[Token(Token = "0x6000266")]
		[Address(RVA = "0xFB48F8", Offset = "0xFB48F8", VA = "0xFB48F8")]
		set
		{
		}
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xFB4018", Offset = "0xFB4018", VA = "0xFB4018")]
	public LTRect()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xFB4128", Offset = "0xFB4128", VA = "0xFB4128")]
	public LTRect(Rect rect)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xFB41C0", Offset = "0xFB41C0", VA = "0xFB41C0")]
	public LTRect(float x, float y, float width, float height)
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xFB4284", Offset = "0xFB4284", VA = "0xFB4284")]
	public LTRect(float x, float y, float width, float height, float alpha)
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xFB4350", Offset = "0xFB4350", VA = "0xFB4350")]
	public LTRect(float x, float y, float width, float height, float alpha, float rotation)
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xFB46A8", Offset = "0xFB46A8", VA = "0xFB46A8")]
	public void setId(int id, int counter)
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xFB40BC", Offset = "0xFB40BC", VA = "0xFB40BC")]
	public void reset()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xFB4434", Offset = "0xFB4434", VA = "0xFB4434")]
	public void resetForRotation()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xFB4904", Offset = "0xFB4904", VA = "0xFB4904")]
	public LTRect setStyle(GUIStyle style)
	{
		return null;
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xFB4920", Offset = "0xFB4920", VA = "0xFB4920")]
	public LTRect setFontScaleToFit(bool fontScaleToFit)
	{
		return null;
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xFB492C", Offset = "0xFB492C", VA = "0xFB492C")]
	public LTRect setColor(Color color)
	{
		return null;
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xFB4940", Offset = "0xFB4940", VA = "0xFB4940")]
	public LTRect setAlpha(float alpha)
	{
		return null;
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xFB4948", Offset = "0xFB4948", VA = "0xFB4948")]
	public LTRect setLabel(string str)
	{
		return null;
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xFB4964", Offset = "0xFB4964", VA = "0xFB4964")]
	public LTRect setUseSimpleScale(bool useSimpleScale, Rect relativeRect)
	{
		return null;
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xFB4978", Offset = "0xFB4978", VA = "0xFB4978")]
	public LTRect setUseSimpleScale(bool useSimpleScale)
	{
		return null;
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xFB49E0", Offset = "0xFB49E0", VA = "0xFB49E0")]
	public LTRect setSizeByHeight(bool sizeByHeight)
	{
		return null;
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xFB49EC", Offset = "0xFB49EC", VA = "0xFB49EC", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000053")]
public class LTEvent
{
	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int id;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public object data;

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xFAF8EC", Offset = "0xFAF8EC", VA = "0xFAF8EC")]
	public LTEvent(int id, object data)
	{
	}
}
[Token(Token = "0x2000054")]
public class LTGUI
{
	[Token(Token = "0x2000055")]
	public enum Element_Type
	{
		[Token(Token = "0x4000205")]
		Texture,
		[Token(Token = "0x4000206")]
		Label
	}

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int RECT_LEVELS;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int RECTS_PER_LEVEL;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int BUTTONS_MAX;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static LTRect[] levels;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int[] levelDepths;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Rect[] buttons;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static int[] buttonLevels;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static int[] buttonLastFrame;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static LTRect r;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static Color color;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static bool isGUIEnabled;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static int global_counter;

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xFB4D2C", Offset = "0xFB4D2C", VA = "0xFB4D2C")]
	public static void init()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xFB4E20", Offset = "0xFB4E20", VA = "0xFB4E20")]
	public static void initRectCheck()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xFA5D8C", Offset = "0xFA5D8C", VA = "0xFA5D8C")]
	public static void reset()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xFB4FA8", Offset = "0xFB4FA8", VA = "0xFB4FA8")]
	public static void update(int updateLevel)
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xFB58E8", Offset = "0xFB58E8", VA = "0xFB58E8")]
	public static bool checkOnScreen(Rect rect)
	{
		return default(bool);
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xFA62C0", Offset = "0xFA62C0", VA = "0xFA62C0")]
	public static void destroy(int id)
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xFB59C4", Offset = "0xFB59C4", VA = "0xFB59C4")]
	public static void destroyAll(int depth)
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xFB5AAC", Offset = "0xFB5AAC", VA = "0xFB5AAC")]
	public static LTRect label(Rect rect, string label, int depth)
	{
		return null;
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xFB5B70", Offset = "0xFB5B70", VA = "0xFB5B70")]
	public static LTRect label(LTRect rect, string label, int depth)
	{
		return null;
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xFB5F90", Offset = "0xFB5F90", VA = "0xFB5F90")]
	public static LTRect texture(Rect rect, Texture texture, int depth)
	{
		return null;
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xFB6054", Offset = "0xFB6054", VA = "0xFB6054")]
	public static LTRect texture(LTRect rect, Texture texture, int depth)
	{
		return null;
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xFB5BF8", Offset = "0xFB5BF8", VA = "0xFB5BF8")]
	public static LTRect element(LTRect rect, int depth)
	{
		return null;
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xFB60D8", Offset = "0xFB60D8", VA = "0xFB60D8")]
	public static bool hasNoOverlap(Rect rect, int depth)
	{
		return default(bool);
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xFB6398", Offset = "0xFB6398", VA = "0xFB6398")]
	public static bool pressedWithinRect(Rect rect)
	{
		return default(bool);
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xFB651C", Offset = "0xFB651C", VA = "0xFB651C")]
	public static bool checkWithinRect(Vector2 vec2, Rect rect)
	{
		return default(bool);
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xFB64AC", Offset = "0xFB64AC", VA = "0xFB64AC")]
	public static Vector2 firstTouch()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xFB65E4", Offset = "0xFB65E4", VA = "0xFB65E4")]
	public LTGUI()
	{
	}
}
[Token(Token = "0x2000056")]
public static class LeanTweenExt
{
	[Token(Token = "0x6000283")]
	[Address(RVA = "0x1047FF0", Offset = "0x1047FF0", VA = "0x1047FF0")]
	public static LTDescr LeanAlpha(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x1048060", Offset = "0x1048060", VA = "0x1048060")]
	public static LTDescr LeanAlphaVertex(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x10480D0", Offset = "0x10480D0", VA = "0x10480D0")]
	public static LTDescr LeanAlpha(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x1048140", Offset = "0x1048140", VA = "0x1048140")]
	public static LTDescr LeanAlpha(this CanvasGroup canvas, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x10481B0", Offset = "0x10481B0", VA = "0x10481B0")]
	public static LTDescr LeanAlphaText(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x1048220", Offset = "0x1048220", VA = "0x1048220")]
	public static void LeanCancel(this GameObject gameObject)
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x1048278", Offset = "0x1048278", VA = "0x1048278")]
	public static void LeanCancel(this GameObject gameObject, bool callOnComplete)
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x10482E0", Offset = "0x10482E0", VA = "0x10482E0")]
	public static void LeanCancel(this GameObject gameObject, int uniqueId, bool callOnComplete = false)
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x1048350", Offset = "0x1048350", VA = "0x1048350")]
	public static void LeanCancel(this RectTransform rectTransform)
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x10483A8", Offset = "0x10483A8", VA = "0x10483A8")]
	public static LTDescr LeanColor(this GameObject gameObject, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x1048440", Offset = "0x1048440", VA = "0x1048440")]
	public static LTDescr LeanColorText(this RectTransform rectTransform, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x10484D8", Offset = "0x10484D8", VA = "0x10484D8")]
	public static LTDescr LeanDelayedCall(this GameObject gameObject, float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x1048550", Offset = "0x1048550", VA = "0x1048550")]
	public static LTDescr LeanDelayedCall(this GameObject gameObject, float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x10485C8", Offset = "0x10485C8", VA = "0x10485C8")]
	public static bool LeanIsPaused(this GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x1048620", Offset = "0x1048620", VA = "0x1048620")]
	public static bool LeanIsPaused(this RectTransform rectTransform)
	{
		return default(bool);
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x1048678", Offset = "0x1048678", VA = "0x1048678")]
	public static bool LeanIsTweening(this GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x10486D0", Offset = "0x10486D0", VA = "0x10486D0")]
	public static LTDescr LeanMove(this GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x1048758", Offset = "0x1048758", VA = "0x1048758")]
	public static LTDescr LeanMove(this Transform transform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x10487FC", Offset = "0x10487FC", VA = "0x10487FC")]
	public static LTDescr LeanMove(this RectTransform rectTransform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x1048884", Offset = "0x1048884", VA = "0x1048884")]
	public static LTDescr LeanMove(this GameObject gameObject, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x1048904", Offset = "0x1048904", VA = "0x1048904")]
	public static LTDescr LeanMove(this Transform transform, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x10489A0", Offset = "0x10489A0", VA = "0x10489A0")]
	public static LTDescr LeanMove(this GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x1048A18", Offset = "0x1048A18", VA = "0x1048A18")]
	public static LTDescr LeanMove(this GameObject gameObject, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x1048A90", Offset = "0x1048A90", VA = "0x1048A90")]
	public static LTDescr LeanMove(this GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x1048B08", Offset = "0x1048B08", VA = "0x1048B08")]
	public static LTDescr LeanMove(this Transform transform, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x1048B94", Offset = "0x1048B94", VA = "0x1048B94")]
	public static LTDescr LeanMove(this Transform transform, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x1048C20", Offset = "0x1048C20", VA = "0x1048C20")]
	public static LTDescr LeanMove(this Transform transform, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x1048CAC", Offset = "0x1048CAC", VA = "0x1048CAC")]
	public static LTDescr LeanMoveLocal(this GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x1048D34", Offset = "0x1048D34", VA = "0x1048D34")]
	public static LTDescr LeanMoveLocal(this GameObject gameObject, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x1048DAC", Offset = "0x1048DAC", VA = "0x1048DAC")]
	public static LTDescr LeanMoveLocal(this GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x1048E24", Offset = "0x1048E24", VA = "0x1048E24")]
	public static LTDescr LeanMoveLocal(this Transform transform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x1048EC8", Offset = "0x1048EC8", VA = "0x1048EC8")]
	public static LTDescr LeanMoveLocal(this Transform transform, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x1048F54", Offset = "0x1048F54", VA = "0x1048F54")]
	public static LTDescr LeanMoveLocal(this Transform transform, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x1048FE0", Offset = "0x1048FE0", VA = "0x1048FE0")]
	public static LTDescr LeanMoveLocalX(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x1049050", Offset = "0x1049050", VA = "0x1049050")]
	public static LTDescr LeanMoveLocalY(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x10490C0", Offset = "0x10490C0", VA = "0x10490C0")]
	public static LTDescr LeanMoveLocalZ(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x1049130", Offset = "0x1049130", VA = "0x1049130")]
	public static LTDescr LeanMoveLocalX(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x10491BC", Offset = "0x10491BC", VA = "0x10491BC")]
	public static LTDescr LeanMoveLocalY(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x1049248", Offset = "0x1049248", VA = "0x1049248")]
	public static LTDescr LeanMoveLocalZ(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x10492D4", Offset = "0x10492D4", VA = "0x10492D4")]
	public static LTDescr LeanMoveSpline(this GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x104934C", Offset = "0x104934C", VA = "0x104934C")]
	public static LTDescr LeanMoveSpline(this GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x10493C4", Offset = "0x10493C4", VA = "0x10493C4")]
	public static LTDescr LeanMoveSpline(this Transform transform, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x1049450", Offset = "0x1049450", VA = "0x1049450")]
	public static LTDescr LeanMoveSpline(this Transform transform, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x10494DC", Offset = "0x10494DC", VA = "0x10494DC")]
	public static LTDescr LeanMoveSplineLocal(this GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x1049554", Offset = "0x1049554", VA = "0x1049554")]
	public static LTDescr LeanMoveSplineLocal(this Transform transform, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x10495E0", Offset = "0x10495E0", VA = "0x10495E0")]
	public static LTDescr LeanMoveX(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x1049650", Offset = "0x1049650", VA = "0x1049650")]
	public static LTDescr LeanMoveX(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x10496DC", Offset = "0x10496DC", VA = "0x10496DC")]
	public static LTDescr LeanMoveX(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x104974C", Offset = "0x104974C", VA = "0x104974C")]
	public static LTDescr LeanMoveY(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x10497BC", Offset = "0x10497BC", VA = "0x10497BC")]
	public static LTDescr LeanMoveY(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x1049848", Offset = "0x1049848", VA = "0x1049848")]
	public static LTDescr LeanMoveY(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x10498B8", Offset = "0x10498B8", VA = "0x10498B8")]
	public static LTDescr LeanMoveZ(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x1049928", Offset = "0x1049928", VA = "0x1049928")]
	public static LTDescr LeanMoveZ(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x10499B4", Offset = "0x10499B4", VA = "0x10499B4")]
	public static LTDescr LeanMoveZ(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x1049A24", Offset = "0x1049A24", VA = "0x1049A24")]
	public static void LeanPause(this GameObject gameObject)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x1049A7C", Offset = "0x1049A7C", VA = "0x1049A7C")]
	public static LTDescr LeanPlay(this RectTransform rectTransform, Sprite[] sprites)
	{
		return null;
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x1049AE4", Offset = "0x1049AE4", VA = "0x1049AE4")]
	public static void LeanResume(this GameObject gameObject)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x1049B3C", Offset = "0x1049B3C", VA = "0x1049B3C")]
	public static LTDescr LeanRotate(this GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x1049BC4", Offset = "0x1049BC4", VA = "0x1049BC4")]
	public static LTDescr LeanRotate(this Transform transform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x1049C68", Offset = "0x1049C68", VA = "0x1049C68")]
	public static LTDescr LeanRotate(this RectTransform rectTransform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x1049CF0", Offset = "0x1049CF0", VA = "0x1049CF0")]
	public static LTDescr LeanRotateAround(this GameObject gameObject, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x1049D88", Offset = "0x1049D88", VA = "0x1049D88")]
	public static LTDescr LeanRotateAround(this Transform transform, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x1049E3C", Offset = "0x1049E3C", VA = "0x1049E3C")]
	public static LTDescr LeanRotateAround(this RectTransform rectTransform, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x1049ED4", Offset = "0x1049ED4", VA = "0x1049ED4")]
	public static LTDescr LeanRotateAroundLocal(this GameObject gameObject, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x1049F6C", Offset = "0x1049F6C", VA = "0x1049F6C")]
	public static LTDescr LeanRotateAroundLocal(this Transform transform, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x104A020", Offset = "0x104A020", VA = "0x104A020")]
	public static LTDescr LeanRotateAroundLocal(this RectTransform rectTransform, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x104A0B8", Offset = "0x104A0B8", VA = "0x104A0B8")]
	public static LTDescr LeanRotateX(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x104A128", Offset = "0x104A128", VA = "0x104A128")]
	public static LTDescr LeanRotateX(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x104A1B4", Offset = "0x104A1B4", VA = "0x104A1B4")]
	public static LTDescr LeanRotateY(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x104A224", Offset = "0x104A224", VA = "0x104A224")]
	public static LTDescr LeanRotateY(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x104A2B0", Offset = "0x104A2B0", VA = "0x104A2B0")]
	public static LTDescr LeanRotateZ(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x104A320", Offset = "0x104A320", VA = "0x104A320")]
	public static LTDescr LeanRotateZ(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x104A3AC", Offset = "0x104A3AC", VA = "0x104A3AC")]
	public static LTDescr LeanScale(this GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x104A434", Offset = "0x104A434", VA = "0x104A434")]
	public static LTDescr LeanScale(this Transform transform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x104A4D8", Offset = "0x104A4D8", VA = "0x104A4D8")]
	public static LTDescr LeanScale(this RectTransform rectTransform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x104A560", Offset = "0x104A560", VA = "0x104A560")]
	public static LTDescr LeanScaleX(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x104A5D0", Offset = "0x104A5D0", VA = "0x104A5D0")]
	public static LTDescr LeanScaleX(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x104A65C", Offset = "0x104A65C", VA = "0x104A65C")]
	public static LTDescr LeanScaleY(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x104A6CC", Offset = "0x104A6CC", VA = "0x104A6CC")]
	public static LTDescr LeanScaleY(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x104A758", Offset = "0x104A758", VA = "0x104A758")]
	public static LTDescr LeanScaleZ(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x104A7C8", Offset = "0x104A7C8", VA = "0x104A7C8")]
	public static LTDescr LeanScaleZ(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x104A854", Offset = "0x104A854", VA = "0x104A854")]
	public static LTDescr LeanSize(this RectTransform rectTransform, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x104A8D4", Offset = "0x104A8D4", VA = "0x104A8D4")]
	public static LTDescr LeanValue(this GameObject gameObject, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x104A9EC", Offset = "0x104A9EC", VA = "0x104A9EC")]
	public static LTDescr LeanValue(this GameObject gameObject, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x104AA6C", Offset = "0x104AA6C", VA = "0x104AA6C")]
	public static LTDescr LeanValue(this GameObject gameObject, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x104AB04", Offset = "0x104AB04", VA = "0x104AB04")]
	public static LTDescr LeanValue(this GameObject gameObject, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x104ABB4", Offset = "0x104ABB4", VA = "0x104ABB4")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x104AC44", Offset = "0x104AC44", VA = "0x104AC44")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<float, float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x104ACD4", Offset = "0x104ACD4", VA = "0x104ACD4")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<float, object> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x104AD64", Offset = "0x104AD64", VA = "0x104AD64")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<Color> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x104AE84", Offset = "0x104AE84", VA = "0x104AE84")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<Vector2> callOnUpdate, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x104AF2C", Offset = "0x104AF2C", VA = "0x104AF2C")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<Vector3> callOnUpdate, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x104AFEC", Offset = "0x104AFEC", VA = "0x104AFEC")]
	public static void LeanSetPosX(this Transform transform, float val)
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x104B038", Offset = "0x104B038", VA = "0x104B038")]
	public static void LeanSetPosY(this Transform transform, float val)
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x104B084", Offset = "0x104B084", VA = "0x104B084")]
	public static void LeanSetPosZ(this Transform transform, float val)
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x104B0D0", Offset = "0x104B0D0", VA = "0x104B0D0")]
	public static void LeanSetLocalPosX(this Transform transform, float val)
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x104B11C", Offset = "0x104B11C", VA = "0x104B11C")]
	public static void LeanSetLocalPosY(this Transform transform, float val)
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x104B168", Offset = "0x104B168", VA = "0x104B168")]
	public static void LeanSetLocalPosZ(this Transform transform, float val)
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x104B1B4", Offset = "0x104B1B4", VA = "0x104B1B4")]
	public static Color LeanColor(this Transform transform)
	{
		return default(Color);
	}
}
[Token(Token = "0x2000057")]
public class LTDescr
{
	[Token(Token = "0x2000058")]
	public delegate Vector3 EaseTypeDelegate();

	[Token(Token = "0x2000059")]
	public delegate void ActionMethodDelegate();

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool toggle;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool useEstimatedTime;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool useFrames;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool useManualTime;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool usesNormalDt;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool hasInitiliazed;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool hasExtraOnCompletes;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool hasPhysics;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool onCompleteOnRepeat;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool onCompleteOnStart;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool useRecursion;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ratioPassed;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float passed;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float time;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lastVal;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private uint _id;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int loopCount;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public uint counter;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float direction;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float directionLast;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float overshoot;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float period;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float scale;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool destroyOnComplete;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform trans;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	internal Vector3 fromInternal;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	internal Vector3 toInternal;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	internal Vector3 diff;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	internal Vector3 diffDiv2;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TweenAction type;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private LeanTweenType easeType;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LeanTweenType loopType;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool hasUpdateCallback;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public EaseTypeDelegate easeMethod;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public SpriteRenderer spriteRen;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public RectTransform rectTransform;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Text uiText;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Image uiImage;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public RawImage rawImage;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Sprite[] sprites;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public LTDescrOptional _optional;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float val;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float dt;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Vector3 newVect;

	[Token(Token = "0x17000017")]
	public Vector3 from
	{
		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x104B21C", Offset = "0x104B21C", VA = "0x104B21C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x104B228", Offset = "0x104B228", VA = "0x104B228")]
		set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public Vector3 to
	{
		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x104B234", Offset = "0x104B234", VA = "0x104B234")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x104B240", Offset = "0x104B240", VA = "0x104B240")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public ActionMethodDelegate easeInternal
	{
		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x104B24C", Offset = "0x104B24C", VA = "0x104B24C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x104B254", Offset = "0x104B254", VA = "0x104B254")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public ActionMethodDelegate initInternal
	{
		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x104B25C", Offset = "0x104B25C", VA = "0x104B25C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x104B264", Offset = "0x104B264", VA = "0x104B264")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public Transform toTrans
	{
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x104B26C", Offset = "0x104B26C", VA = "0x104B26C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001C")]
	public int uniqueId
	{
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x104BE00", Offset = "0x104BE00", VA = "0x104BE00")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700001D")]
	public int id
	{
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x104BCA4", Offset = "0x104BCA4", VA = "0x104BCA4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700001E")]
	public LTDescrOptional optional
	{
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x104BE10", Offset = "0x104BE10", VA = "0x104BE10")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x104BE18", Offset = "0x104BE18", VA = "0x104BE18")]
		set
		{
		}
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x104B288", Offset = "0x104B288", VA = "0x104B288", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x104BCB4", Offset = "0x104BCB4", VA = "0x104BCB4")]
	public LTDescr()
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x104BD38", Offset = "0x104BD38", VA = "0x104BD38")]
	[Obsolete("Use 'LeanTween.cancel( id )' instead")]
	public LTDescr cancel(GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x104BE20", Offset = "0x104BE20", VA = "0x104BE20")]
	public void reset()
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x104C150", Offset = "0x104C150", VA = "0x104C150")]
	public LTDescr setFollow()
	{
		return null;
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x104C15C", Offset = "0x104C15C", VA = "0x104C15C")]
	public LTDescr setMoveX()
	{
		return null;
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x104C2F4", Offset = "0x104C2F4", VA = "0x104C2F4")]
	public LTDescr setMoveY()
	{
		return null;
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x104C3C4", Offset = "0x104C3C4", VA = "0x104C3C4")]
	public LTDescr setMoveZ()
	{
		return null;
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x104C494", Offset = "0x104C494", VA = "0x104C494")]
	public LTDescr setMoveLocalX()
	{
		return null;
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x104C564", Offset = "0x104C564", VA = "0x104C564")]
	public LTDescr setMoveLocalY()
	{
		return null;
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x104C634", Offset = "0x104C634", VA = "0x104C634")]
	public LTDescr setMoveLocalZ()
	{
		return null;
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x104C704", Offset = "0x104C704", VA = "0x104C704")]
	private void initFromInternal()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x104C70C", Offset = "0x104C70C", VA = "0x104C70C")]
	public LTDescr setOffset(Vector3 offset)
	{
		return null;
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x104C718", Offset = "0x104C718", VA = "0x104C718")]
	public LTDescr setMoveCurved()
	{
		return null;
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x104C7E8", Offset = "0x104C7E8", VA = "0x104C7E8")]
	public LTDescr setMoveCurvedLocal()
	{
		return null;
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x104C8B8", Offset = "0x104C8B8", VA = "0x104C8B8")]
	public LTDescr setMoveSpline()
	{
		return null;
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x104C988", Offset = "0x104C988", VA = "0x104C988")]
	public LTDescr setMoveSplineLocal()
	{
		return null;
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x104CA58", Offset = "0x104CA58", VA = "0x104CA58")]
	public LTDescr setScaleX()
	{
		return null;
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x104CB28", Offset = "0x104CB28", VA = "0x104CB28")]
	public LTDescr setScaleY()
	{
		return null;
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x104CBF8", Offset = "0x104CBF8", VA = "0x104CBF8")]
	public LTDescr setScaleZ()
	{
		return null;
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x104CCC8", Offset = "0x104CCC8", VA = "0x104CCC8")]
	public LTDescr setRotateX()
	{
		return null;
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x104CD98", Offset = "0x104CD98", VA = "0x104CD98")]
	public LTDescr setRotateY()
	{
		return null;
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x104CE68", Offset = "0x104CE68", VA = "0x104CE68")]
	public LTDescr setRotateZ()
	{
		return null;
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x104CF38", Offset = "0x104CF38", VA = "0x104CF38")]
	public LTDescr setRotateAround()
	{
		return null;
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x104D008", Offset = "0x104D008", VA = "0x104D008")]
	public LTDescr setRotateAroundLocal()
	{
		return null;
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x104D0D8", Offset = "0x104D0D8", VA = "0x104D0D8")]
	public LTDescr setAlpha()
	{
		return null;
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x104D1A8", Offset = "0x104D1A8", VA = "0x104D1A8")]
	public LTDescr setTextAlpha()
	{
		return null;
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x104D278", Offset = "0x104D278", VA = "0x104D278")]
	public LTDescr setAlphaVertex()
	{
		return null;
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x104D348", Offset = "0x104D348", VA = "0x104D348")]
	public LTDescr setColor()
	{
		return null;
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x104D418", Offset = "0x104D418", VA = "0x104D418")]
	public LTDescr setCallbackColor()
	{
		return null;
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x104D4E8", Offset = "0x104D4E8", VA = "0x104D4E8")]
	public LTDescr setTextColor()
	{
		return null;
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x104D5B8", Offset = "0x104D5B8", VA = "0x104D5B8")]
	public LTDescr setCanvasAlpha()
	{
		return null;
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x104D688", Offset = "0x104D688", VA = "0x104D688")]
	public LTDescr setCanvasGroupAlpha()
	{
		return null;
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x104D758", Offset = "0x104D758", VA = "0x104D758")]
	public LTDescr setCanvasColor()
	{
		return null;
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x104D828", Offset = "0x104D828", VA = "0x104D828")]
	public LTDescr setCanvasMoveX()
	{
		return null;
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x104D8F8", Offset = "0x104D8F8", VA = "0x104D8F8")]
	public LTDescr setCanvasMoveY()
	{
		return null;
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x104D9C8", Offset = "0x104D9C8", VA = "0x104D9C8")]
	public LTDescr setCanvasMoveZ()
	{
		return null;
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x104DA98", Offset = "0x104DA98", VA = "0x104DA98")]
	private void initCanvasRotateAround()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x104DAD4", Offset = "0x104DAD4", VA = "0x104DAD4")]
	public LTDescr setCanvasRotateAround()
	{
		return null;
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x104DBA4", Offset = "0x104DBA4", VA = "0x104DBA4")]
	public LTDescr setCanvasRotateAroundLocal()
	{
		return null;
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x104DC74", Offset = "0x104DC74", VA = "0x104DC74")]
	public LTDescr setCanvasPlaySprite()
	{
		return null;
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x104DD44", Offset = "0x104DD44", VA = "0x104DD44")]
	public LTDescr setCanvasMove()
	{
		return null;
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x104DE14", Offset = "0x104DE14", VA = "0x104DE14")]
	public LTDescr setCanvasScale()
	{
		return null;
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x104DEE4", Offset = "0x104DEE4", VA = "0x104DEE4")]
	public LTDescr setCanvasSizeDelta()
	{
		return null;
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x104DFB4", Offset = "0x104DFB4", VA = "0x104DFB4")]
	private void callback()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x104E02C", Offset = "0x104E02C", VA = "0x104E02C")]
	public LTDescr setCallback()
	{
		return null;
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x104E164", Offset = "0x104E164", VA = "0x104E164")]
	public LTDescr setValue3()
	{
		return null;
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x104E29C", Offset = "0x104E29C", VA = "0x104E29C")]
	public LTDescr setMove()
	{
		return null;
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x104E36C", Offset = "0x104E36C", VA = "0x104E36C")]
	public LTDescr setMoveLocal()
	{
		return null;
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x104E43C", Offset = "0x104E43C", VA = "0x104E43C")]
	public LTDescr setMoveToTransform()
	{
		return null;
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x104E50C", Offset = "0x104E50C", VA = "0x104E50C")]
	public LTDescr setRotate()
	{
		return null;
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x104E5DC", Offset = "0x104E5DC", VA = "0x104E5DC")]
	public LTDescr setRotateLocal()
	{
		return null;
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x104E6AC", Offset = "0x104E6AC", VA = "0x104E6AC")]
	public LTDescr setScale()
	{
		return null;
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x104E77C", Offset = "0x104E77C", VA = "0x104E77C")]
	public LTDescr setGUIMove()
	{
		return null;
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x104E84C", Offset = "0x104E84C", VA = "0x104E84C")]
	public LTDescr setGUIMoveMargin()
	{
		return null;
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x104E91C", Offset = "0x104E91C", VA = "0x104E91C")]
	public LTDescr setGUIScale()
	{
		return null;
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x104E9EC", Offset = "0x104E9EC", VA = "0x104E9EC")]
	public LTDescr setGUIAlpha()
	{
		return null;
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x104EABC", Offset = "0x104EABC", VA = "0x104EABC")]
	public LTDescr setGUIRotate()
	{
		return null;
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x104EB8C", Offset = "0x104EB8C", VA = "0x104EB8C")]
	public LTDescr setDelayedSound()
	{
		return null;
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x104EC5C", Offset = "0x104EC5C", VA = "0x104EC5C")]
	public LTDescr setTarget(Transform trans)
	{
		return null;
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x104EC84", Offset = "0x104EC84", VA = "0x104EC84")]
	private void init()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x104EEC0", Offset = "0x104EEC0", VA = "0x104EEC0")]
	private void initSpeed()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x104EFB4", Offset = "0x104EFB4", VA = "0x104EFB4")]
	public LTDescr updateNow()
	{
		return null;
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x104EFCC", Offset = "0x104EFCC", VA = "0x104EFCC")]
	public bool updateInternal()
	{
		return default(bool);
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x104EDC8", Offset = "0x104EDC8", VA = "0x104EDC8")]
	public void callOnCompletes()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x104F3E8", Offset = "0x104F3E8", VA = "0x104F3E8")]
	public LTDescr setFromColor(Color col)
	{
		return null;
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x104F424", Offset = "0x104F424", VA = "0x104F424")]
	private static void alphaRecursive(Transform transform, float val, bool useRecursion = true)
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x104F89C", Offset = "0x104F89C", VA = "0x104F89C")]
	private static void colorRecursive(Transform transform, Color toColor, bool useRecursion = true)
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x104FC80", Offset = "0x104FC80", VA = "0x104FC80")]
	private static void alphaRecursive(RectTransform rectTransform, float val, int recursiveLevel = 0)
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x10500C0", Offset = "0x10500C0", VA = "0x10500C0")]
	private static void alphaRecursiveSprite(Transform transform, float val)
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x1050498", Offset = "0x1050498", VA = "0x1050498")]
	private static void colorRecursiveSprite(Transform transform, Color toColor)
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x1050898", Offset = "0x1050898", VA = "0x1050898")]
	private static void colorRecursive(RectTransform rectTransform, Color toColor)
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x1050CD0", Offset = "0x1050CD0", VA = "0x1050CD0")]
	private static void textAlphaChildrenRecursive(Transform trans, float val, bool useRecursion = true)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x1051088", Offset = "0x1051088", VA = "0x1051088")]
	private static void textAlphaRecursive(Transform trans, float val, bool useRecursion = true)
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x1051408", Offset = "0x1051408", VA = "0x1051408")]
	private static void textColorRecursive(Transform trans, Color toColor)
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x10517C4", Offset = "0x10517C4", VA = "0x10517C4")]
	private static Color tweenColor(LTDescr tween, float val)
	{
		return default(Color);
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x1051820", Offset = "0x1051820", VA = "0x1051820")]
	public LTDescr pause()
	{
		return null;
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x1051838", Offset = "0x1051838", VA = "0x1051838")]
	public LTDescr resume()
	{
		return null;
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x1051844", Offset = "0x1051844", VA = "0x1051844")]
	public LTDescr setAxis(Vector3 axis)
	{
		return null;
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x1051864", Offset = "0x1051864", VA = "0x1051864")]
	public LTDescr setDelay(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x105186C", Offset = "0x105186C", VA = "0x105186C")]
	public LTDescr setEase(LeanTweenType easeType)
	{
		return null;
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x10519A8", Offset = "0x10519A8", VA = "0x10519A8")]
	public LTDescr setEaseLinear()
	{
		return null;
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x1052CD0", Offset = "0x1052CD0", VA = "0x1052CD0")]
	public LTDescr setEaseSpring()
	{
		return null;
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x1051AC8", Offset = "0x1051AC8", VA = "0x1051AC8")]
	public LTDescr setEaseInQuad()
	{
		return null;
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x1051A38", Offset = "0x1051A38", VA = "0x1051A38")]
	public LTDescr setEaseOutQuad()
	{
		return null;
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x1051B58", Offset = "0x1051B58", VA = "0x1051B58")]
	public LTDescr setEaseInOutQuad()
	{
		return null;
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x1051BE8", Offset = "0x1051BE8", VA = "0x1051BE8")]
	public LTDescr setEaseInCubic()
	{
		return null;
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x1051C78", Offset = "0x1051C78", VA = "0x1051C78")]
	public LTDescr setEaseOutCubic()
	{
		return null;
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x1051D08", Offset = "0x1051D08", VA = "0x1051D08")]
	public LTDescr setEaseInOutCubic()
	{
		return null;
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x1051D98", Offset = "0x1051D98", VA = "0x1051D98")]
	public LTDescr setEaseInQuart()
	{
		return null;
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x1051E28", Offset = "0x1051E28", VA = "0x1051E28")]
	public LTDescr setEaseOutQuart()
	{
		return null;
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x1051EB8", Offset = "0x1051EB8", VA = "0x1051EB8")]
	public LTDescr setEaseInOutQuart()
	{
		return null;
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x1051F48", Offset = "0x1051F48", VA = "0x1051F48")]
	public LTDescr setEaseInQuint()
	{
		return null;
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x1051FD8", Offset = "0x1051FD8", VA = "0x1051FD8")]
	public LTDescr setEaseOutQuint()
	{
		return null;
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x1052068", Offset = "0x1052068", VA = "0x1052068")]
	public LTDescr setEaseInOutQuint()
	{
		return null;
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x10520F8", Offset = "0x10520F8", VA = "0x10520F8")]
	public LTDescr setEaseInSine()
	{
		return null;
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x1052188", Offset = "0x1052188", VA = "0x1052188")]
	public LTDescr setEaseOutSine()
	{
		return null;
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x1052218", Offset = "0x1052218", VA = "0x1052218")]
	public LTDescr setEaseInOutSine()
	{
		return null;
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x10522A8", Offset = "0x10522A8", VA = "0x10522A8")]
	public LTDescr setEaseInExpo()
	{
		return null;
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x1052338", Offset = "0x1052338", VA = "0x1052338")]
	public LTDescr setEaseOutExpo()
	{
		return null;
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x10523C8", Offset = "0x10523C8", VA = "0x10523C8")]
	public LTDescr setEaseInOutExpo()
	{
		return null;
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x1052458", Offset = "0x1052458", VA = "0x1052458")]
	public LTDescr setEaseInCirc()
	{
		return null;
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x10524E8", Offset = "0x10524E8", VA = "0x10524E8")]
	public LTDescr setEaseOutCirc()
	{
		return null;
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x1052578", Offset = "0x1052578", VA = "0x1052578")]
	public LTDescr setEaseInOutCirc()
	{
		return null;
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x1052608", Offset = "0x1052608", VA = "0x1052608")]
	public LTDescr setEaseInBounce()
	{
		return null;
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x1052698", Offset = "0x1052698", VA = "0x1052698")]
	public LTDescr setEaseOutBounce()
	{
		return null;
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x1052728", Offset = "0x1052728", VA = "0x1052728")]
	public LTDescr setEaseInOutBounce()
	{
		return null;
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x10527B8", Offset = "0x10527B8", VA = "0x10527B8")]
	public LTDescr setEaseInBack()
	{
		return null;
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x1052848", Offset = "0x1052848", VA = "0x1052848")]
	public LTDescr setEaseOutBack()
	{
		return null;
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x10528D8", Offset = "0x10528D8", VA = "0x10528D8")]
	public LTDescr setEaseInOutBack()
	{
		return null;
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x1052968", Offset = "0x1052968", VA = "0x1052968")]
	public LTDescr setEaseInElastic()
	{
		return null;
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x10529F8", Offset = "0x10529F8", VA = "0x10529F8")]
	public LTDescr setEaseOutElastic()
	{
		return null;
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x1052A88", Offset = "0x1052A88", VA = "0x1052A88")]
	public LTDescr setEaseInOutElastic()
	{
		return null;
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x1052B18", Offset = "0x1052B18", VA = "0x1052B18")]
	public LTDescr setEasePunch()
	{
		return null;
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x1052BF4", Offset = "0x1052BF4", VA = "0x1052BF4")]
	public LTDescr setEaseShake()
	{
		return null;
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x1052D60", Offset = "0x1052D60", VA = "0x1052D60")]
	private Vector3 tweenOnCurve()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x1052E20", Offset = "0x1052E20", VA = "0x1052E20")]
	private Vector3 easeInOutQuad()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x1052EC4", Offset = "0x1052EC4", VA = "0x1052EC4")]
	private Vector3 easeInQuad()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x1052F3C", Offset = "0x1052F3C", VA = "0x1052F3C")]
	private Vector3 easeOutQuad()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x1052FC0", Offset = "0x1052FC0", VA = "0x1052FC0")]
	private Vector3 easeLinear()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x1053038", Offset = "0x1053038", VA = "0x1053038")]
	private Vector3 easeSpring()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x1053134", Offset = "0x1053134", VA = "0x1053134")]
	private Vector3 easeInCubic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x10531B0", Offset = "0x10531B0", VA = "0x10531B0")]
	private Vector3 easeOutCubic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x105323C", Offset = "0x105323C", VA = "0x105323C")]
	private Vector3 easeInOutCubic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x10532E8", Offset = "0x10532E8", VA = "0x10532E8")]
	private Vector3 easeInQuart()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x1053368", Offset = "0x1053368", VA = "0x1053368")]
	private Vector3 easeOutQuart()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x10533F8", Offset = "0x10533F8", VA = "0x10533F8")]
	private Vector3 easeInOutQuart()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x10534CC", Offset = "0x10534CC", VA = "0x10534CC")]
	private Vector3 easeInQuint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x1053550", Offset = "0x1053550", VA = "0x1053550")]
	private Vector3 easeOutQuint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x10535E4", Offset = "0x10535E4", VA = "0x10535E4")]
	private Vector3 easeInOutQuint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x10536A0", Offset = "0x10536A0", VA = "0x10536A0")]
	private Vector3 easeInSine()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x1053760", Offset = "0x1053760", VA = "0x1053760")]
	private Vector3 easeOutSine()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x1053814", Offset = "0x1053814", VA = "0x1053814")]
	private Vector3 easeInOutSine()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x10538A4", Offset = "0x10538A4", VA = "0x10538A4")]
	private Vector3 easeInExpo()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x105392C", Offset = "0x105392C", VA = "0x105392C")]
	private Vector3 easeOutExpo()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x10539B4", Offset = "0x10539B4", VA = "0x10539B4")]
	private Vector3 easeInOutExpo()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x1053A80", Offset = "0x1053A80", VA = "0x1053A80")]
	private Vector3 easeInCirc()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x1053B10", Offset = "0x1053B10", VA = "0x1053B10")]
	private Vector3 easeOutCirc()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x1053B9C", Offset = "0x1053B9C", VA = "0x1053B9C")]
	private Vector3 easeInOutCirc()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x1053C6C", Offset = "0x1053C6C", VA = "0x1053C6C")]
	private Vector3 easeInBounce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x1053D98", Offset = "0x1053D98", VA = "0x1053D98")]
	private Vector3 easeOutBounce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x1053EE8", Offset = "0x1053EE8", VA = "0x1053EE8")]
	private Vector3 easeInOutBounce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x10540C4", Offset = "0x10540C4", VA = "0x10540C4")]
	private Vector3 easeInBack()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x105416C", Offset = "0x105416C", VA = "0x105416C")]
	private Vector3 easeOutBack()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x1054214", Offset = "0x1054214", VA = "0x1054214")]
	private Vector3 easeInOutBack()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x1054318", Offset = "0x1054318", VA = "0x1054318")]
	private Vector3 easeInElastic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x10543F8", Offset = "0x10543F8", VA = "0x10543F8")]
	private Vector3 easeOutElastic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x10544D8", Offset = "0x10544D8", VA = "0x10544D8")]
	private Vector3 easeInOutElastic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x10545B8", Offset = "0x10545B8", VA = "0x10545B8")]
	public LTDescr setOvershoot(float overshoot)
	{
		return null;
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x10545C0", Offset = "0x10545C0", VA = "0x10545C0")]
	public LTDescr setPeriod(float period)
	{
		return null;
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x10545C8", Offset = "0x10545C8", VA = "0x10545C8")]
	public LTDescr setScale(float scale)
	{
		return null;
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x10545D0", Offset = "0x10545D0", VA = "0x10545D0")]
	public LTDescr setEase(AnimationCurve easeCurve)
	{
		return null;
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x1054678", Offset = "0x1054678", VA = "0x1054678")]
	public LTDescr setTo(Vector3 to)
	{
		return null;
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x10546A8", Offset = "0x10546A8", VA = "0x10546A8")]
	public LTDescr setTo(Transform to)
	{
		return null;
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x10546D0", Offset = "0x10546D0", VA = "0x10546D0")]
	public LTDescr setFrom(Vector3 from)
	{
		return null;
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x1054794", Offset = "0x1054794", VA = "0x1054794")]
	public LTDescr setFrom(float from)
	{
		return null;
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x10547A0", Offset = "0x10547A0", VA = "0x10547A0")]
	public LTDescr setDiff(Vector3 diff)
	{
		return null;
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x10547AC", Offset = "0x10547AC", VA = "0x10547AC")]
	public LTDescr setHasInitialized(bool has)
	{
		return null;
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x10547B8", Offset = "0x10547B8", VA = "0x10547B8")]
	public LTDescr setId(uint id, uint global_counter)
	{
		return null;
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x10547C4", Offset = "0x10547C4", VA = "0x10547C4")]
	public LTDescr setPassed(float passed)
	{
		return null;
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x10547CC", Offset = "0x10547CC", VA = "0x10547CC")]
	public LTDescr setTime(float time)
	{
		return null;
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x10547E8", Offset = "0x10547E8", VA = "0x10547E8")]
	public LTDescr setSpeed(float speed)
	{
		return null;
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x1054810", Offset = "0x1054810", VA = "0x1054810")]
	public LTDescr setRepeat(int repeat)
	{
		return null;
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x1054860", Offset = "0x1054860", VA = "0x1054860")]
	public LTDescr setLoopType(LeanTweenType loopType)
	{
		return null;
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x1054868", Offset = "0x1054868", VA = "0x1054868")]
	public LTDescr setUseEstimatedTime(bool useEstimatedTime)
	{
		return null;
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x1054878", Offset = "0x1054878", VA = "0x1054878")]
	public LTDescr setIgnoreTimeScale(bool useUnScaledTime)
	{
		return null;
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x1054888", Offset = "0x1054888", VA = "0x1054888")]
	public LTDescr setUseFrames(bool useFrames)
	{
		return null;
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x1054898", Offset = "0x1054898", VA = "0x1054898")]
	public LTDescr setUseManualTime(bool useManualTime)
	{
		return null;
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x10548A8", Offset = "0x10548A8", VA = "0x10548A8")]
	public LTDescr setLoopCount(int loopCount)
	{
		return null;
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x10548B8", Offset = "0x10548B8", VA = "0x10548B8")]
	public LTDescr setLoopOnce()
	{
		return null;
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x10548C4", Offset = "0x10548C4", VA = "0x10548C4")]
	public LTDescr setLoopClamp()
	{
		return null;
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x10548E4", Offset = "0x10548E4", VA = "0x10548E4")]
	public LTDescr setLoopClamp(int loops)
	{
		return null;
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x10548EC", Offset = "0x10548EC", VA = "0x10548EC")]
	public LTDescr setLoopPingPong()
	{
		return null;
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x105490C", Offset = "0x105490C", VA = "0x105490C")]
	public LTDescr setLoopPingPong(int loops)
	{
		return null;
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x1054938", Offset = "0x1054938", VA = "0x1054938")]
	public LTDescr setOnComplete(Action onComplete)
	{
		return null;
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x1054968", Offset = "0x1054968", VA = "0x1054968")]
	public LTDescr setOnComplete(Action<object> onComplete)
	{
		return null;
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x1054998", Offset = "0x1054998", VA = "0x1054998")]
	public LTDescr setOnComplete(Action<object> onComplete, object onCompleteParam)
	{
		return null;
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x10549EC", Offset = "0x10549EC", VA = "0x10549EC")]
	public LTDescr setOnCompleteParam(object onCompleteParam)
	{
		return null;
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x1054A1C", Offset = "0x1054A1C", VA = "0x1054A1C")]
	public LTDescr setOnUpdate(Action<float> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x1054A4C", Offset = "0x1054A4C", VA = "0x1054A4C")]
	public LTDescr setOnUpdateRatio(Action<float, float> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x1054A7C", Offset = "0x1054A7C", VA = "0x1054A7C")]
	public LTDescr setOnUpdateObject(Action<float, object> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x1054AAC", Offset = "0x1054AAC", VA = "0x1054AAC")]
	public LTDescr setOnUpdateVector2(Action<Vector2> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x1054ADC", Offset = "0x1054ADC", VA = "0x1054ADC")]
	public LTDescr setOnUpdateVector3(Action<Vector3> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x1054B0C", Offset = "0x1054B0C", VA = "0x1054B0C")]
	public LTDescr setOnUpdateColor(Action<Color> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x1054B3C", Offset = "0x1054B3C", VA = "0x1054B3C")]
	public LTDescr setOnUpdateColor(Action<Color, object> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x1054B6C", Offset = "0x1054B6C", VA = "0x1054B6C")]
	public LTDescr setOnUpdate(Action<Color> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x1054B9C", Offset = "0x1054B9C", VA = "0x1054B9C")]
	public LTDescr setOnUpdate(Action<Color, object> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x1054BCC", Offset = "0x1054BCC", VA = "0x1054BCC")]
	public LTDescr setOnUpdate(Action<float, object> onUpdate, [Optional] object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x1054C20", Offset = "0x1054C20", VA = "0x1054C20")]
	public LTDescr setOnUpdate(Action<Vector3, object> onUpdate, [Optional] object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x1054C74", Offset = "0x1054C74", VA = "0x1054C74")]
	public LTDescr setOnUpdate(Action<Vector2> onUpdate, [Optional] object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x1054CC8", Offset = "0x1054CC8", VA = "0x1054CC8")]
	public LTDescr setOnUpdate(Action<Vector3> onUpdate, [Optional] object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x1054D1C", Offset = "0x1054D1C", VA = "0x1054D1C")]
	public LTDescr setOnUpdateParam(object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x1054D44", Offset = "0x1054D44", VA = "0x1054D44")]
	public LTDescr setOrientToPath(bool doesOrient)
	{
		return null;
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x1054E14", Offset = "0x1054E14", VA = "0x1054E14")]
	public LTDescr setOrientToPath2d(bool doesOrient2d)
	{
		return null;
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x1054E6C", Offset = "0x1054E6C", VA = "0x1054E6C")]
	public LTDescr setRect(LTRect rect)
	{
		return null;
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x1054E94", Offset = "0x1054E94", VA = "0x1054E94")]
	public LTDescr setRect(Rect rect)
	{
		return null;
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x1054F3C", Offset = "0x1054F3C", VA = "0x1054F3C")]
	public LTDescr setPath(LTBezierPath path)
	{
		return null;
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x1054F64", Offset = "0x1054F64", VA = "0x1054F64")]
	public LTDescr setPoint(Vector3 point)
	{
		return null;
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x1054F84", Offset = "0x1054F84", VA = "0x1054F84")]
	public LTDescr setDestroyOnComplete(bool doesDestroy)
	{
		return null;
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x1054F90", Offset = "0x1054F90", VA = "0x1054F90")]
	public LTDescr setAudio(object audio)
	{
		return null;
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x1054854", Offset = "0x1054854", VA = "0x1054854")]
	public LTDescr setOnCompleteOnRepeat(bool isOn)
	{
		return null;
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x1054FB8", Offset = "0x1054FB8", VA = "0x1054FB8")]
	public LTDescr setOnCompleteOnStart(bool isOn)
	{
		return null;
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x1054FC4", Offset = "0x1054FC4", VA = "0x1054FC4")]
	public LTDescr setRect(RectTransform rect)
	{
		return null;
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x1054FE0", Offset = "0x1054FE0", VA = "0x1054FE0")]
	public LTDescr setSprites(Sprite[] sprites)
	{
		return null;
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x1054FFC", Offset = "0x1054FFC", VA = "0x1054FFC")]
	public LTDescr setFrameRate(float frameRate)
	{
		return null;
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x1055024", Offset = "0x1055024", VA = "0x1055024")]
	public LTDescr setOnStart(Action onStart)
	{
		return null;
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x105504C", Offset = "0x105504C", VA = "0x105504C")]
	public LTDescr setDirection(float direction)
	{
		return null;
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x1055220", Offset = "0x1055220", VA = "0x1055220")]
	public LTDescr setRecursive(bool useRecursion)
	{
		return null;
	}
}
[Token(Token = "0x200005B")]
public class LTDescrOptional
{
	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve animationCurve;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int initFrameCount;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Color color;

	[Token(Token = "0x1700001F")]
	public Transform toTrans
	{
		[Token(Token = "0x6000429")]
		[Address(RVA = "0x1059618", Offset = "0x1059618", VA = "0x1059618")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600042A")]
		[Address(RVA = "0x1059620", Offset = "0x1059620", VA = "0x1059620")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public Vector3 point
	{
		[Token(Token = "0x600042B")]
		[Address(RVA = "0x1059628", Offset = "0x1059628", VA = "0x1059628")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600042C")]
		[Address(RVA = "0x1059634", Offset = "0x1059634", VA = "0x1059634")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000021")]
	public Vector3 axis
	{
		[Token(Token = "0x600042D")]
		[Address(RVA = "0x1059640", Offset = "0x1059640", VA = "0x1059640")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600042E")]
		[Address(RVA = "0x105964C", Offset = "0x105964C", VA = "0x105964C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000022")]
	public float lastVal
	{
		[Token(Token = "0x600042F")]
		[Address(RVA = "0x1059658", Offset = "0x1059658", VA = "0x1059658")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000430")]
		[Address(RVA = "0x1059660", Offset = "0x1059660", VA = "0x1059660")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000023")]
	public Quaternion origRotation
	{
		[Token(Token = "0x6000431")]
		[Address(RVA = "0x1059668", Offset = "0x1059668", VA = "0x1059668")]
		[CompilerGenerated]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000432")]
		[Address(RVA = "0x1059674", Offset = "0x1059674", VA = "0x1059674")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public LTBezierPath path
	{
		[Token(Token = "0x6000433")]
		[Address(RVA = "0x1059680", Offset = "0x1059680", VA = "0x1059680")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000434")]
		[Address(RVA = "0x1059688", Offset = "0x1059688", VA = "0x1059688")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public LTSpline spline
	{
		[Token(Token = "0x6000435")]
		[Address(RVA = "0x1059690", Offset = "0x1059690", VA = "0x1059690")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000436")]
		[Address(RVA = "0x1059698", Offset = "0x1059698", VA = "0x1059698")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public LTRect ltRect
	{
		[Token(Token = "0x6000437")]
		[Address(RVA = "0x10596A0", Offset = "0x10596A0", VA = "0x10596A0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000438")]
		[Address(RVA = "0x10596A8", Offset = "0x10596A8", VA = "0x10596A8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public Action<float> onUpdateFloat
	{
		[Token(Token = "0x6000439")]
		[Address(RVA = "0x10596B0", Offset = "0x10596B0", VA = "0x10596B0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600043A")]
		[Address(RVA = "0x10596B8", Offset = "0x10596B8", VA = "0x10596B8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public Action<float, float> onUpdateFloatRatio
	{
		[Token(Token = "0x600043B")]
		[Address(RVA = "0x10596C0", Offset = "0x10596C0", VA = "0x10596C0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600043C")]
		[Address(RVA = "0x10596C8", Offset = "0x10596C8", VA = "0x10596C8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000029")]
	public Action<float, object> onUpdateFloatObject
	{
		[Token(Token = "0x600043D")]
		[Address(RVA = "0x10596D0", Offset = "0x10596D0", VA = "0x10596D0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600043E")]
		[Address(RVA = "0x10596D8", Offset = "0x10596D8", VA = "0x10596D8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public Action<Vector2> onUpdateVector2
	{
		[Token(Token = "0x600043F")]
		[Address(RVA = "0x10596E0", Offset = "0x10596E0", VA = "0x10596E0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000440")]
		[Address(RVA = "0x10596E8", Offset = "0x10596E8", VA = "0x10596E8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public Action<Vector3> onUpdateVector3
	{
		[Token(Token = "0x6000441")]
		[Address(RVA = "0x10596F0", Offset = "0x10596F0", VA = "0x10596F0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000442")]
		[Address(RVA = "0x10596F8", Offset = "0x10596F8", VA = "0x10596F8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public Action<Vector3, object> onUpdateVector3Object
	{
		[Token(Token = "0x6000443")]
		[Address(RVA = "0x1059700", Offset = "0x1059700", VA = "0x1059700")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000444")]
		[Address(RVA = "0x1059708", Offset = "0x1059708", VA = "0x1059708")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public Action<Color> onUpdateColor
	{
		[Token(Token = "0x6000445")]
		[Address(RVA = "0x1059710", Offset = "0x1059710", VA = "0x1059710")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000446")]
		[Address(RVA = "0x1059718", Offset = "0x1059718", VA = "0x1059718")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700002E")]
	public Action<Color, object> onUpdateColorObject
	{
		[Token(Token = "0x6000447")]
		[Address(RVA = "0x1059720", Offset = "0x1059720", VA = "0x1059720")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000448")]
		[Address(RVA = "0x1059728", Offset = "0x1059728", VA = "0x1059728")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700002F")]
	public Action onComplete
	{
		[Token(Token = "0x6000449")]
		[Address(RVA = "0x1059730", Offset = "0x1059730", VA = "0x1059730")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600044A")]
		[Address(RVA = "0x1059738", Offset = "0x1059738", VA = "0x1059738")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000030")]
	public Action<object> onCompleteObject
	{
		[Token(Token = "0x600044B")]
		[Address(RVA = "0x1059740", Offset = "0x1059740", VA = "0x1059740")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600044C")]
		[Address(RVA = "0x1059748", Offset = "0x1059748", VA = "0x1059748")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000031")]
	public object onCompleteParam
	{
		[Token(Token = "0x600044D")]
		[Address(RVA = "0x1059750", Offset = "0x1059750", VA = "0x1059750")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600044E")]
		[Address(RVA = "0x1059758", Offset = "0x1059758", VA = "0x1059758")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000032")]
	public object onUpdateParam
	{
		[Token(Token = "0x600044F")]
		[Address(RVA = "0x1059760", Offset = "0x1059760", VA = "0x1059760")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000450")]
		[Address(RVA = "0x1059768", Offset = "0x1059768", VA = "0x1059768")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000033")]
	public Action onStart
	{
		[Token(Token = "0x6000451")]
		[Address(RVA = "0x1059770", Offset = "0x1059770", VA = "0x1059770")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000452")]
		[Address(RVA = "0x1059778", Offset = "0x1059778", VA = "0x1059778")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x104C038", Offset = "0x104C038", VA = "0x104C038")]
	public void reset()
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x104F294", Offset = "0x104F294", VA = "0x104F294")]
	public void callOnUpdate(float val, float ratioPassed)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x104BD30", Offset = "0x104BD30", VA = "0x104BD30")]
	public LTDescrOptional()
	{
	}
}
[Token(Token = "0x200005C")]
public class LTSeq
{
	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LTSeq previous;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LTSeq current;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LTDescr tween;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float totalDelay;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeScale;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int debugIter;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public uint counter;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool toggle;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private uint _id;

	[Token(Token = "0x17000034")]
	public int id
	{
		[Token(Token = "0x6000456")]
		[Address(RVA = "0x1059780", Offset = "0x1059780", VA = "0x1059780")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x1059790", Offset = "0x1059790", VA = "0x1059790")]
	public void reset()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x10597C0", Offset = "0x10597C0", VA = "0x10597C0")]
	public void init(uint id, uint global_counter)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x1059814", Offset = "0x1059814", VA = "0x1059814")]
	private LTSeq addOn()
	{
		return null;
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x10598C8", Offset = "0x10598C8", VA = "0x10598C8")]
	private float addPreviousDelays()
	{
		return default(float);
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x1059904", Offset = "0x1059904", VA = "0x1059904")]
	public LTSeq append(float delay)
	{
		return null;
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x1059928", Offset = "0x1059928", VA = "0x1059928")]
	public LTSeq append(Action callback)
	{
		return null;
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x10599F8", Offset = "0x10599F8", VA = "0x10599F8")]
	public LTSeq append(Action<object> callback, object obj)
	{
		return null;
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x1059A8C", Offset = "0x1059A8C", VA = "0x1059A8C")]
	public LTSeq append(GameObject gameObject, Action callback)
	{
		return null;
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x1059B10", Offset = "0x1059B10", VA = "0x1059B10")]
	public LTSeq append(GameObject gameObject, Action<object> callback, object obj)
	{
		return null;
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x105999C", Offset = "0x105999C", VA = "0x105999C")]
	public LTSeq append(LTDescr tween)
	{
		return null;
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x1059BB4", Offset = "0x1059BB4", VA = "0x1059BB4")]
	public LTSeq insert(LTDescr tween)
	{
		return null;
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x1059BF8", Offset = "0x1059BF8", VA = "0x1059BF8")]
	public LTSeq setScale(float timeScale)
	{
		return null;
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x1059C18", Offset = "0x1059C18", VA = "0x1059C18")]
	private void setScaleRecursive(LTSeq seq, float timeScale, int count)
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x1059C90", Offset = "0x1059C90", VA = "0x1059C90")]
	public LTSeq reverse()
	{
		return null;
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x1059C94", Offset = "0x1059C94", VA = "0x1059C94")]
	public LTSeq()
	{
	}
}
[Token(Token = "0x200005D")]
public class SmoothSyncExamplePlayerControllerPUN2 : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody rb;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody2D rb2D;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SmoothSyncPUN2 smoothSync;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SmoothSyncPUN2 childSmoothSync;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float transformMovementSpeed;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float rigidbodyMovementForce;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject childObjectToControl;

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x1059C9C", Offset = "0x1059C9C", VA = "0x1059C9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x1059E44", Offset = "0x1059E44", VA = "0x1059E44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x105A7EC", Offset = "0x105A7EC", VA = "0x105A7EC")]
	public static bool validateStateOfPlayer(StatePUN2 latestReceivedState, StatePUN2 latestValidatedState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x105A8C0", Offset = "0x105A8C0", VA = "0x105A8C0")]
	public SmoothSyncExamplePlayerControllerPUN2()
	{
	}
}
[Token(Token = "0x200005E")]
public class CameraController : MonoBehaviour
{
	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float cameraSpeed;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float zoomSpeed;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Camera mainCam;

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x105A8D4", Offset = "0x105A8D4", VA = "0x105A8D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0x105A8F8", Offset = "0x105A8F8", VA = "0x105A8F8")]
	private void Update()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x105ABA4", Offset = "0x105ABA4", VA = "0x105ABA4")]
	public CameraController()
	{
	}
}
[Token(Token = "0x200005F")]
public class UIElementController : MonoBehaviour
{
	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject hints;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEngine.UI.Slider slider;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Light[] lights;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lightCurrentValue;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool toggle;

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x105ABB8", Offset = "0x105ABB8", VA = "0x105ABB8")]
	private void Start()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x105ACCC", Offset = "0x105ACCC", VA = "0x105ACCC")]
	private void Update()
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x105AD30", Offset = "0x105AD30", VA = "0x105AD30")]
	private void CheckLightIntensityValues()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x105ADC8", Offset = "0x105ADC8", VA = "0x105ADC8")]
	public UIElementController()
	{
	}
}
[Token(Token = "0x2000060")]
public class UISliderEvents : MonoBehaviour, IPointerUpHandler, IEventSystemHandler
{
	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onPointerUp;

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x105ADDC", Offset = "0x105ADDC", VA = "0x105ADDC", Slot = "4")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x105ADF8", Offset = "0x105ADF8", VA = "0x105ADF8")]
	public UISliderEvents()
	{
	}
}
[Token(Token = "0x2000061")]
public static class BallisticsUtility
{
	[Token(Token = "0x6000474")]
	[Address(RVA = "0x105AE00", Offset = "0x105AE00", VA = "0x105AE00")]
	public static bool IsZero(double d)
	{
		return default(bool);
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x105AE28", Offset = "0x105AE28", VA = "0x105AE28")]
	public static int SolveQuadric(double c0, double c1, double c2, out double s0, out double s1)
	{
		return default(int);
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x105AF18", Offset = "0x105AF18", VA = "0x105AF18")]
	public static int SolveCubic(double c0, double c1, double c2, double c3, out double s0, out double s1, out double s2)
	{
		return default(int);
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x105B164", Offset = "0x105B164", VA = "0x105B164")]
	public static int SolveQuartic(double c0, double c1, double c2, double c3, double c4, out double s0, out double s1, out double s2, out double s3)
	{
		return default(int);
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0x105B51C", Offset = "0x105B51C", VA = "0x105B51C")]
	public static float ballistic_range(float speed, float gravity, float initial_height)
	{
		return default(float);
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0x105B554", Offset = "0x105B554", VA = "0x105B554")]
	public static int solve_ballistic_arc(Vector3 proj_pos, float proj_speed, Vector3 target, float gravity, out Vector3 s0, out Vector3 s1)
	{
		return default(int);
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0x105B868", Offset = "0x105B868", VA = "0x105B868")]
	public static int solve_ballistic_arc(Vector3 proj_pos, float proj_speed, Vector3 target_pos, Vector3 target_velocity, float gravity, out Vector3 s0, out Vector3 s1)
	{
		return default(int);
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0x105BB8C", Offset = "0x105BB8C", VA = "0x105BB8C")]
	public static bool solve_ballistic_arc_lateral(Vector3 proj_pos, float lateral_speed, Vector3 target_pos, float max_height, out Vector3 fire_velocity, out float gravity)
	{
		return default(bool);
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x105BD78", Offset = "0x105BD78", VA = "0x105BD78")]
	public static bool solve_ballistic_arc_lateral(Vector3 proj_pos, float lateral_speed, Vector3 target, Vector3 target_velocity, float max_height_offset, out Vector3 fire_velocity, out float gravity, out Vector3 impact_point)
	{
		return default(bool);
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x105C070", Offset = "0x105C070", VA = "0x105C070")]
	public static int solve_ballistic_arc(Vector3 proj_pos, float proj_speed, Vector3 target, Vector3 acceleration, out Vector3 s0, out Vector3 s1)
	{
		return default(int);
	}
}
[Token(Token = "0x2000062")]
public class EffectOnCollision : MonoBehaviour
{
	[Token(Token = "0x2000063")]
	[CompilerGenerated]
	private sealed class <FlashRenderer>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer renderer;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000486")]
			[Address(RVA = "0x105C678", Offset = "0x105C678", VA = "0x105C678", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000488")]
			[Address(RVA = "0x105C6C0", Offset = "0x105C6C0", VA = "0x105C6C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x105C4F8", Offset = "0x105C4F8", VA = "0x105C4F8")]
		[DebuggerHidden]
		public <FlashRenderer>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x105C528", Offset = "0x105C528", VA = "0x105C528", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x105C52C", Offset = "0x105C52C", VA = "0x105C52C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x105C680", Offset = "0x105C680", VA = "0x105C680", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem _particleEffect;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource _audio;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MeshRenderer _flashRenderer;

	[Token(Token = "0x600047E")]
	[Address(RVA = "0x105C38C", Offset = "0x105C38C", VA = "0x105C38C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x105C480", Offset = "0x105C480", VA = "0x105C480")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x105C390", Offset = "0x105C390", VA = "0x105C390")]
	private void Effect()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x105C484", Offset = "0x105C484", VA = "0x105C484")]
	[IteratorStateMachine(typeof(<FlashRenderer>d__6))]
	private IEnumerator FlashRenderer(MeshRenderer renderer)
	{
		return null;
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x105C520", Offset = "0x105C520", VA = "0x105C520")]
	public EffectOnCollision()
	{
	}
}
[Token(Token = "0x2000064")]
public static class EstimationUtility
{
	[Token(Token = "0x6000489")]
	[Address(RVA = "0x105C6C8", Offset = "0x105C6C8", VA = "0x105C6C8")]
	public static Vector3 SimpleAverage(Vector3[] inputs, out float[] componentWeights)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x105C7E0", Offset = "0x105C7E0", VA = "0x105C7E0")]
	public static Vector3 WeightedMovingAverage(Vector3[] inputs, out float[] componentWeights)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x105C91C", Offset = "0x105C91C", VA = "0x105C91C")]
	public static Vector3 ExponentialMovingAverage(Vector3[] inputs, out float[] componentWeights)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x105CAB0", Offset = "0x105CAB0", VA = "0x105CAB0")]
	public static Vector3 CustomCurveAverage(Vector3[] inputs, AnimationCurve curve, out float[] componentWeights)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000065")]
public class ESTrigger : MonoBehaviourPunCallbacks, IOnEventCallback
{
	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ObjToRotate;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float targetRotation;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float duration;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip clickSound;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool wasClicked;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource _source;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public DoorHandler doorToUnlock;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material greenMat;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Renderer targetRenderer;

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x105CC24", Offset = "0x105CC24", VA = "0x105CC24")]
	private void Start()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x105CD08", Offset = "0x105CD08", VA = "0x105CD08")]
	private string GetRoomPropertyName()
	{
		return null;
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x105CD28", Offset = "0x105CD28", VA = "0x105CD28")]
	private void ButtonPushAnimation()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x105CDFC", Offset = "0x105CDFC", VA = "0x105CDFC")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x105CE38", Offset = "0x105CE38", VA = "0x105CE38")]
	public void OnButtonClicked()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x105CFAC", Offset = "0x105CFAC", VA = "0x105CFAC")]
	private void PlaySoundAtDoor()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x105D008", Offset = "0x105D008", VA = "0x105D008", Slot = "54")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x105D220", Offset = "0x105D220", VA = "0x105D220")]
	public ESTrigger()
	{
	}
}
[Token(Token = "0x2000066")]
public class IDCard : MonoBehaviour
{
	[Token(Token = "0x6000495")]
	[Address(RVA = "0x105D234", Offset = "0x105D234", VA = "0x105D234")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x105D314", Offset = "0x105D314", VA = "0x105D314")]
	public IDCard()
	{
	}
}
[Token(Token = "0x2000067")]
public class LobbyHandler : MonoBehaviour
{
	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Toggle joinLobbyToggle;

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x105D31C", Offset = "0x105D31C", VA = "0x105D31C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x105D470", Offset = "0x105D470", VA = "0x105D470")]
	private void OnLobbyToggle(Toggle val)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x105D4F0", Offset = "0x105D4F0", VA = "0x105D4F0")]
	public void Disconnect()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x105D568", Offset = "0x105D568", VA = "0x105D568")]
	public LobbyHandler()
	{
	}
}
[Token(Token = "0x2000068")]
public class MLPForceSaveProbes : MonoBehaviour
{
	[Token(Token = "0x600049C")]
	[Address(RVA = "0x105D578", Offset = "0x105D578", VA = "0x105D578")]
	public MLPForceSaveProbes()
	{
	}
}
[Token(Token = "0x2000069")]
[CreateAssetMenu(fileName = "New MLP Settings Asset", menuName = "Magic Tools/Magic Light Probes/Create New Settings Asset", order = 1)]
public class MLPSettings : ScriptableObject
{
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public global::MagicLightProbes.MagicLightProbes.Workflow workflow;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float probesSpacing;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float cornersDetectionThreshold;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float cornerProbesSpacing;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distanceFromGeometry;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int divideVolumeOnProbesCount;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useVolumeBottom;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool selectedObjectsAsGlobal;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxHeightAboveGeometry;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxHeightAboveTerrain;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LayerMask collisionDetectionLayers;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float collisionDetectionRadius;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool considerDistanceToLights;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public global::MagicLightProbes.MagicLightProbes.FillingMode fillingMode;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float lightIntensityThreshold;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool cullByColor;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float colorThreshold;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool fillEquivalentVolume;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float equivalentVolumeFillingRate;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool fillUnlitVolume;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float unlitVolumeFillingRate;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool optimizeForMixedLighting;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool tryPreventLightLeakage;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public global::MagicLightProbes.MagicLightProbes.BoundsDisplayMode boundsDisplayMode;

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x105D580", Offset = "0x105D580", VA = "0x105D580")]
	public MLPSettings()
	{
	}
}
[Token(Token = "0x200006A")]
public class MantisLODEditorProfessional : MonoBehaviour
{
	[Token(Token = "0x600049E")]
	[Address(RVA = "0x105D588", Offset = "0x105D588", VA = "0x105D588")]
	public MantisLODEditorProfessional()
	{
	}
}
[Token(Token = "0x200006B")]
public class MoveMe : MonoBehaviour
{
	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool forwarding;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float delta;

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x105D590", Offset = "0x105D590", VA = "0x105D590")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x105D594", Offset = "0x105D594", VA = "0x105D594")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x105D63C", Offset = "0x105D63C", VA = "0x105D63C")]
	public MoveMe()
	{
	}
}
[Token(Token = "0x200006C")]
public class RotateMe : MonoBehaviour
{
	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 center_to_ratate;

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x105D64C", Offset = "0x105D64C", VA = "0x105D64C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x105D7F4", Offset = "0x105D7F4", VA = "0x105D7F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x105D940", Offset = "0x105D940", VA = "0x105D940")]
	public RotateMe()
	{
	}
}
[Token(Token = "0x200006D")]
public class ActorCOMTransform : MonoBehaviour
{
	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 offset;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ObiActor actor;

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x105D948", Offset = "0x105D948", VA = "0x105D948")]
	public void Update()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x105DA40", Offset = "0x105DA40", VA = "0x105DA40")]
	public ActorCOMTransform()
	{
	}
}
[Token(Token = "0x200006E")]
public class ActorSpawner : MonoBehaviour
{
	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObiActor template;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int basePhase;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int maxInstances;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spawnDelay;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int phase;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int instances;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timeFromLastSpawn;

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x105DA48", Offset = "0x105DA48", VA = "0x105DA48")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x105DC40", Offset = "0x105DC40", VA = "0x105DC40")]
	public ActorSpawner()
	{
	}
}
[Token(Token = "0x200006F")]
[RequireComponent(typeof(ObiActor))]
public class AddRandomVelocity : MonoBehaviour
{
	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float intensity;

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x105DC60", Offset = "0x105DC60", VA = "0x105DC60")]
	private void Update()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x105DCF8", Offset = "0x105DCF8", VA = "0x105DCF8")]
	public AddRandomVelocity()
	{
	}
}
[Token(Token = "0x2000070")]
public class Blinker : MonoBehaviour
{
	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color highlightColor;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer rend;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color original;

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x105DD08", Offset = "0x105DD08", VA = "0x105DD08")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x105DD90", Offset = "0x105DD90", VA = "0x105DD90")]
	public void Blink()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x105DDC4", Offset = "0x105DDC4", VA = "0x105DDC4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x105DEA8", Offset = "0x105DEA8", VA = "0x105DEA8")]
	public Blinker()
	{
	}
}
[Token(Token = "0x2000071")]
[RequireComponent(typeof(ObiSolver))]
public class ColliderHighlighter : MonoBehaviour
{
	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ObiSolver solver;

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x105DEB0", Offset = "0x105DEB0", VA = "0x105DEB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x105DF08", Offset = "0x105DF08", VA = "0x105DF08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x105DF94", Offset = "0x105DF94", VA = "0x105DF94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x105E020", Offset = "0x105E020", VA = "0x105E020")]
	private void Solver_OnCollision(object sender, ObiSolver.ObiCollisionEventArgs e)
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x105E1B8", Offset = "0x105E1B8", VA = "0x105E1B8")]
	public ColliderHighlighter()
	{
	}
}
[Token(Token = "0x2000072")]
[RequireComponent(typeof(ObiSolver))]
public class CollisionEventHandler : MonoBehaviour
{
	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ObiSolver solver;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int contactCount;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ObiSolver.ObiCollisionEventArgs frame;

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x105E1C0", Offset = "0x105E1C0", VA = "0x105E1C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x105E218", Offset = "0x105E218", VA = "0x105E218")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x105E2A4", Offset = "0x105E2A4", VA = "0x105E2A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x105E330", Offset = "0x105E330", VA = "0x105E330")]
	private void Solver_OnCollision(object sender, ObiSolver.ObiCollisionEventArgs e)
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x105E33C", Offset = "0x105E33C", VA = "0x105E33C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x105E868", Offset = "0x105E868", VA = "0x105E868")]
	public CollisionEventHandler()
	{
	}
}
[Token(Token = "0x2000073")]
[ExecuteInEditMode]
[RequireComponent(typeof(ObiActor))]
public class DebugParticleFrames : MonoBehaviour
{
	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ObiActor actor;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float size;

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x105E870", Offset = "0x105E870", VA = "0x105E870")]
	public void Awake()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x105E8C8", Offset = "0x105E8C8", VA = "0x105E8C8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x105EAB8", Offset = "0x105EAB8", VA = "0x105EAB8")]
	public DebugParticleFrames()
	{
	}
}
[Token(Token = "0x2000074")]
public class ExtrapolationCamera : MonoBehaviour
{
	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float extrapolation;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	public float smoothness;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	public float linearSpeed;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 1f)]
	public float rotationalSpeed;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Min(0f)]
	public float distanceFromTarget;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 lastPosition;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 extrapolatedPos;

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x105EAC8", Offset = "0x105EAC8", VA = "0x105EAC8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x105EB4C", Offset = "0x105EB4C", VA = "0x105EB4C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0x105EC7C", Offset = "0x105EC7C", VA = "0x105EC7C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0x105EF38", Offset = "0x105EF38", VA = "0x105EF38")]
	public void Teleport(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0x105F048", Offset = "0x105F048", VA = "0x105F048")]
	public ExtrapolationCamera()
	{
	}
}
[Token(Token = "0x2000075")]
[RequireComponent(typeof(Text))]
public class FPSDisplay : MonoBehaviour
{
	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float updateInterval;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool showMedian;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float medianLearnrate;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float accum;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timeleft;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float currentFPS;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float median;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float average;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Text uguiText;

	[Token(Token = "0x17000037")]
	public float CurrentFPS
	{
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x105F064", Offset = "0x105F064", VA = "0x105F064")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000038")]
	public float FPSMedian
	{
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x105F06C", Offset = "0x105F06C", VA = "0x105F06C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000039")]
	public float FPSAverage
	{
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x105F074", Offset = "0x105F074", VA = "0x105F074")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x105F07C", Offset = "0x105F07C", VA = "0x105F07C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x105F0E0", Offset = "0x105F0E0", VA = "0x105F0E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x105F27C", Offset = "0x105F27C", VA = "0x105F27C")]
	public void ResetMedianAndAverage()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x105F284", Offset = "0x105F284", VA = "0x105F284")]
	public FPSDisplay()
	{
	}
}
[Token(Token = "0x2000076")]
public class ObiActorTeleport : MonoBehaviour
{
	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObiActor actor;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x105F2A0", Offset = "0x105F2A0", VA = "0x105F2A0")]
	public void Teleport()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x105F33C", Offset = "0x105F33C", VA = "0x105F33C")]
	public ObiActorTeleport()
	{
	}
}
[Token(Token = "0x2000077")]
[RequireComponent(typeof(ObiSolver))]
public class ObiParticleCounter : MonoBehaviour
{
	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ObiSolver solver;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int counter;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider2D targetCollider;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ObiSolver.ObiCollisionEventArgs frame;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private HashSet<int> particles;

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x105F344", Offset = "0x105F344", VA = "0x105F344")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x105F39C", Offset = "0x105F39C", VA = "0x105F39C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x105F428", Offset = "0x105F428", VA = "0x105F428")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x105F4B4", Offset = "0x105F4B4", VA = "0x105F4B4")]
	private void Solver_OnCollision(object sender, ObiSolver.ObiCollisionEventArgs e)
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x105F650", Offset = "0x105F650", VA = "0x105F650")]
	public ObiParticleCounter()
	{
	}
}
[Token(Token = "0x2000078")]
public class ObjectDragger : MonoBehaviour
{
	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 screenPoint;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 offset;

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x105F6D8", Offset = "0x105F6D8", VA = "0x105F6D8")]
	private void OnMouseDown()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x105F7C8", Offset = "0x105F7C8", VA = "0x105F7C8")]
	private void OnMouseDrag()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x105F860", Offset = "0x105F860", VA = "0x105F860")]
	public ObjectDragger()
	{
	}
}
[Token(Token = "0x2000079")]
public class ObjectLimit : MonoBehaviour
{
	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minX;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxX;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minY;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxY;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minZ;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxZ;

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x105F868", Offset = "0x105F868", VA = "0x105F868")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x105F954", Offset = "0x105F954", VA = "0x105F954")]
	public ObjectLimit()
	{
	}
}
[Token(Token = "0x200007A")]
public class SlowmoToggler : MonoBehaviour
{
	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x105F96C", Offset = "0x105F96C", VA = "0x105F96C")]
	public void Slowmo(bool slowmo)
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x105F984", Offset = "0x105F984", VA = "0x105F984")]
	public SlowmoToggler()
	{
	}
}
[Token(Token = "0x200007B")]
[RequireComponent(typeof(ObiSolver))]
public class WorldSpaceGravity : MonoBehaviour
{
	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ObiSolver solver;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 worldGravity;

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x105F98C", Offset = "0x105F98C", VA = "0x105F98C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x105F9E4", Offset = "0x105F9E4", VA = "0x105F9E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x105FA38", Offset = "0x105FA38", VA = "0x105FA38")]
	public WorldSpaceGravity()
	{
	}
}
[Token(Token = "0x200007C")]
public class CharacterControl2D : MonoBehaviour
{
	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float acceleration;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxSpeed;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float jumpPower;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody unityRigidbody;

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x105FA50", Offset = "0x105FA50", VA = "0x105FA50")]
	public void Awake()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x105FAA8", Offset = "0x105FAA8", VA = "0x105FAA8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x105FC7C", Offset = "0x105FC7C", VA = "0x105FC7C")]
	public CharacterControl2D()
	{
	}
}
[Token(Token = "0x200007D")]
public class CraneController : MonoBehaviour
{
	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ObiRopeCursor cursor;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ObiRope rope;

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x105FC98", Offset = "0x105FC98", VA = "0x105FC98")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x105FD2C", Offset = "0x105FD2C", VA = "0x105FD2C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x105FE74", Offset = "0x105FE74", VA = "0x105FE74")]
	public CraneController()
	{
	}
}
[Token(Token = "0x200007E")]
[RequireComponent(typeof(ObiRope))]
public class CursorController : MonoBehaviour
{
	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ObiRopeCursor cursor;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ObiRope rope;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minLength;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x105FE7C", Offset = "0x105FE7C", VA = "0x105FE7C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x105FF0C", Offset = "0x105FF0C", VA = "0x105FF0C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x1060168", Offset = "0x1060168", VA = "0x1060168")]
	public CursorController()
	{
	}
}
[Token(Token = "0x200007F")]
public class ExtendableGrapplingHook : MonoBehaviour
{
	[Token(Token = "0x2000080")]
	[CompilerGenerated]
	private sealed class <AttachHook>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExtendableGrapplingHook <>4__this;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ObiConstraints<ObiPinConstraintsBatch> <pinConstraints>5__2;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <currentLength>5__3;

		[Token(Token = "0x1700003A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004ED")]
			[Address(RVA = "0x10612E4", Offset = "0x10612E4", VA = "0x10612E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004EF")]
			[Address(RVA = "0x106132C", Offset = "0x106132C", VA = "0x106132C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x1060584", Offset = "0x1060584", VA = "0x1060584")]
		[DebuggerHidden]
		public <AttachHook>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x106073C", Offset = "0x106073C", VA = "0x106073C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x1060740", Offset = "0x1060740", VA = "0x1060740", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x10612EC", Offset = "0x10612EC", VA = "0x10612EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObiSolver solver;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ObiCollider character;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material material;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ObiRopeSection section;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 1f)]
	public float hookResolution;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float hookExtendRetractSpeed;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float hookShootSpeed;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int particlePoolSize;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ObiRope rope;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ObiRopeBlueprint blueprint;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ObiRopeExtrudedRenderer ropeRenderer;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ObiRopeCursor cursor;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private RaycastHit hookAttachment;

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x106017C", Offset = "0x106017C", VA = "0x106017C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x1060360", Offset = "0x1060360", VA = "0x1060360")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x10603BC", Offset = "0x10603BC", VA = "0x10603BC")]
	private void LaunchHook()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x1060510", Offset = "0x1060510", VA = "0x1060510")]
	[IteratorStateMachine(typeof(<AttachHook>d__16))]
	private IEnumerator AttachHook()
	{
		return null;
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x10605AC", Offset = "0x10605AC", VA = "0x10605AC")]
	private void DetachHook()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x1060620", Offset = "0x1060620", VA = "0x1060620")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x106071C", Offset = "0x106071C", VA = "0x106071C")]
	public ExtendableGrapplingHook()
	{
	}
}
[Token(Token = "0x2000081")]
public class GrapplingHook : MonoBehaviour
{
	[Token(Token = "0x2000082")]
	[CompilerGenerated]
	private sealed class <AttachHook>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrapplingHook <>4__this;

		[Token(Token = "0x1700003C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004FA")]
			[Address(RVA = "0x1062140", Offset = "0x1062140", VA = "0x1062140", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004FC")]
			[Address(RVA = "0x1062188", Offset = "0x1062188", VA = "0x1062188", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x1061734", Offset = "0x1061734", VA = "0x1061734")]
		[DebuggerHidden]
		public <AttachHook>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x10618DC", Offset = "0x10618DC", VA = "0x10618DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x10618E0", Offset = "0x10618E0", VA = "0x10618E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x1062148", Offset = "0x1062148", VA = "0x1062148", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObiSolver solver;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ObiCollider character;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float hookExtendRetractSpeed;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material material;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ObiRopeSection section;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ObiRope rope;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ObiRopeBlueprint blueprint;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ObiRopeExtrudedRenderer ropeRenderer;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ObiRopeCursor cursor;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private RaycastHit hookAttachment;

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x1061334", Offset = "0x1061334", VA = "0x1061334")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x1061510", Offset = "0x1061510", VA = "0x1061510")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x106156C", Offset = "0x106156C", VA = "0x106156C")]
	private void LaunchHook()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x10616C0", Offset = "0x10616C0", VA = "0x10616C0")]
	[IteratorStateMachine(typeof(<AttachHook>d__13))]
	private IEnumerator AttachHook()
	{
		return null;
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x106175C", Offset = "0x106175C", VA = "0x106175C")]
	private void DetachHook()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x10617D0", Offset = "0x10617D0", VA = "0x10617D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x10618CC", Offset = "0x10618CC", VA = "0x10618CC")]
	public GrapplingHook()
	{
	}
}
[Token(Token = "0x2000083")]
[RequireComponent(typeof(ObiRope))]
public class HosePump : MonoBehaviour
{
	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Bulge controls")]
	public float pumpSpeed;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float bulgeFrequency;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float baseThickness;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bulgeThickness;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color bulgeColor;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Flow controls")]
	public ParticleSystem waterEmitter;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float flowSpeedMin;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float flowSpeedMax;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float minEmitRate;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxEmitRate;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ObiRope rope;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ObiPathSmoother smoother;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float time;

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x1062190", Offset = "0x1062190", VA = "0x1062190")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x1062288", Offset = "0x1062288", VA = "0x1062288")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x1062314", Offset = "0x1062314", VA = "0x1062314")]
	private void Rope_OnBeginStep(ObiActor actor, float stepTime)
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x10626DC", Offset = "0x10626DC", VA = "0x10626DC")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x10628EC", Offset = "0x10628EC", VA = "0x10628EC")]
	public HosePump()
	{
	}
}
[Token(Token = "0x2000084")]
public class RopeBetweenTwoPoints : MonoBehaviour
{
	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform start;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform end;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ObiSolver solver;

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x1062918", Offset = "0x1062918", VA = "0x1062918")]
	private void Start()
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x106291C", Offset = "0x106291C", VA = "0x106291C")]
	private void Generate()
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x1062FDC", Offset = "0x1062FDC", VA = "0x1062FDC")]
	public RopeBetweenTwoPoints()
	{
	}
}
[Token(Token = "0x2000085")]
public class RopeNet : MonoBehaviour
{
	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2Int resolution;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 size;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float nodeSize;

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x1062FE4", Offset = "0x1062FE4", VA = "0x1062FE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x106327C", Offset = "0x106327C", VA = "0x106327C")]
	private void CreateNet(ObiSolver solver)
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x1063C1C", Offset = "0x1063C1C", VA = "0x1063C1C")]
	private void PinRope(ObiRope rope, ObiCollider bodyA, ObiCollider bodyB, Vector3 offsetA, Vector3 offsetB)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x1063740", Offset = "0x1063740", VA = "0x1063740")]
	private ObiRope CreateRope(Vector3 pointA, Vector3 pointB)
	{
		return null;
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x1063E88", Offset = "0x1063E88", VA = "0x1063E88")]
	public RopeNet()
	{
	}
}
[Token(Token = "0x2000086")]
[RequireComponent(typeof(ObiRope))]
public class RopeSweepCut : MonoBehaviour
{
	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera cam;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ObiRope rope;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 cutStartPosition;

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x1063EB0", Offset = "0x1063EB0", VA = "0x1063EB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x10640B4", Offset = "0x10640B4", VA = "0x10640B4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0x1063F10", Offset = "0x1063F10", VA = "0x1063F10")]
	private void AddMouseLine()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x10640B8", Offset = "0x10640B8", VA = "0x10640B8")]
	private void DeleteMouseLine()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x1064160", Offset = "0x1064160", VA = "0x1064160")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0x10641D8", Offset = "0x10641D8", VA = "0x10641D8")]
	private void ProcessInput()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0x106430C", Offset = "0x106430C", VA = "0x106430C")]
	private void ScreenSpaceCut(Vector2 lineStart, Vector2 lineEnd)
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0x1064520", Offset = "0x1064520", VA = "0x1064520")]
	private bool SegmentSegmentIntersection(Vector2 A, Vector2 B, Vector2 C, Vector2 D, out float r, out float s)
	{
		return default(bool);
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0x1064690", Offset = "0x1064690", VA = "0x1064690")]
	public RopeSweepCut()
	{
	}
}
[Token(Token = "0x2000087")]
public class RopeTenser : MonoBehaviour
{
	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float force;

	[Token(Token = "0x6000513")]
	[Address(RVA = "0x1064698", Offset = "0x1064698", VA = "0x1064698")]
	private void Update()
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0x1064740", Offset = "0x1064740", VA = "0x1064740")]
	public RopeTenser()
	{
	}
}
[Token(Token = "0x2000088")]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(ObiRope))]
public class RopeTensionColorizer : MonoBehaviour
{
	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minTension;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxTension;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color normalColor;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color tensionColor;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RopeTenser tenser;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float tenserThreshold;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float tenserMax;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ObiRope rope;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material localMaterial;

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x1064750", Offset = "0x1064750", VA = "0x1064750")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0x10647F0", Offset = "0x10647F0", VA = "0x10647F0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0x106484C", Offset = "0x106484C", VA = "0x106484C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0x106498C", Offset = "0x106498C", VA = "0x106498C")]
	public RopeTensionColorizer()
	{
	}
}
[Token(Token = "0x2000089")]
public class RuntimeRopeGenerator
{
	[Token(Token = "0x200008A")]
	[CompilerGenerated]
	private sealed class <MakeRope>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700003E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000522")]
			[Address(RVA = "0x1064B04", Offset = "0x1064B04", VA = "0x1064B04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000524")]
			[Address(RVA = "0x1064B4C", Offset = "0x1064B4C", VA = "0x1064B4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x1064A20", Offset = "0x1064A20", VA = "0x1064A20")]
		[DebuggerHidden]
		public <MakeRope>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x1064A68", Offset = "0x1064A68", VA = "0x1064A68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x1064A6C", Offset = "0x1064A6C", VA = "0x1064A6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x1064B0C", Offset = "0x1064B0C", VA = "0x1064B0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ObiSolver solver;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int pinnedParticle;

	[Token(Token = "0x6000519")]
	[Address(RVA = "0x10649C0", Offset = "0x10649C0", VA = "0x10649C0")]
	[IteratorStateMachine(typeof(<MakeRope>d__2))]
	public IEnumerator MakeRope(Transform anchoredTo, Vector3 attachmentOffset, float ropeLength)
	{
		return null;
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0x1064A48", Offset = "0x1064A48", VA = "0x1064A48")]
	public void AddPendulum(ObiCollider pendulum, Vector3 attachmentOffset)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0x1064A4C", Offset = "0x1064A4C", VA = "0x1064A4C")]
	public void RemovePendulum()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0x1064A50", Offset = "0x1064A50", VA = "0x1064A50")]
	public void ChangeRopeLength(float changeAmount)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0x1064A54", Offset = "0x1064A54", VA = "0x1064A54")]
	private void UpdateTethers()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0x1064A58", Offset = "0x1064A58", VA = "0x1064A58")]
	public RuntimeRopeGenerator()
	{
	}
}
[Token(Token = "0x200008B")]
public class RuntimeRopeGeneratorUse : MonoBehaviour
{
	[Token(Token = "0x200008C")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RuntimeRopeGeneratorUse <>4__this;

		[Token(Token = "0x17000040")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600052B")]
			[Address(RVA = "0x1064D80", Offset = "0x1064D80", VA = "0x1064D80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600052D")]
			[Address(RVA = "0x1064DC8", Offset = "0x1064DC8", VA = "0x1064DC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x1064BC8", Offset = "0x1064BC8", VA = "0x1064BC8")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x1064C54", Offset = "0x1064C54", VA = "0x1064C54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x1064C58", Offset = "0x1064C58", VA = "0x1064C58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x1064D88", Offset = "0x1064D88", VA = "0x1064D88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObiCollider pendulum;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RuntimeRopeGenerator rg;

	[Token(Token = "0x6000525")]
	[Address(RVA = "0x1064B54", Offset = "0x1064B54", VA = "0x1064B54")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	public IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0x1064BF0", Offset = "0x1064BF0", VA = "0x1064BF0")]
	public void Update()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0x1064C4C", Offset = "0x1064C4C", VA = "0x1064C4C")]
	public RuntimeRopeGeneratorUse()
	{
	}
}
[Token(Token = "0x200008D")]
public class SnakeController : MonoBehaviour
{
	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform headReferenceFrame;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float headSpeed;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float upSpeed;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float slitherSpeed;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ObiRope rope;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ObiSolver solver;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[] traction;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3[] surfaceNormal;

	[Token(Token = "0x600052E")]
	[Address(RVA = "0x1064DD0", Offset = "0x1064DD0", VA = "0x1064DD0")]
	private void Start()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x1064FCC", Offset = "0x1064FCC", VA = "0x1064FCC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x10650F8", Offset = "0x10650F8", VA = "0x10650F8")]
	private void ResetSurfaceInfo(ObiSolver s, float stepTime)
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x10651B8", Offset = "0x10651B8", VA = "0x10651B8")]
	private void AnalyzeContacts(object sender, ObiSolver.ObiCollisionEventArgs e)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x106539C", Offset = "0x106539C", VA = "0x106539C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x10659F8", Offset = "0x10659F8", VA = "0x10659F8")]
	public SnakeController()
	{
	}
}
[Token(Token = "0x200008E")]
[ExecuteInEditMode]
public class SpiralCurve : MonoBehaviour
{
	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float radius;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float radialStep;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float heightStep;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float points;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationalMass;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float thickness;

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x1065A14", Offset = "0x1065A14", VA = "0x1065A14")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0x1065A18", Offset = "0x1065A18", VA = "0x1065A18")]
	public void Generate()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0x1065DD8", Offset = "0x1065DD8", VA = "0x1065DD8")]
	public SpiralCurve()
	{
	}
}
[Token(Token = "0x200008F")]
public class Wrappable : MonoBehaviour
{
	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool wrapped;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color normalColor;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color wrappedColor;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material localMaterial;

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x1065DF4", Offset = "0x1065DF4", VA = "0x1065DF4")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0x1065E5C", Offset = "0x1065E5C", VA = "0x1065E5C")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x1065EB8", Offset = "0x1065EB8", VA = "0x1065EB8")]
	public void Reset()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0x1065EE4", Offset = "0x1065EE4", VA = "0x1065EE4")]
	public void SetWrapped()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0x1065F14", Offset = "0x1065F14", VA = "0x1065F14")]
	public bool IsWrapped()
	{
		return default(bool);
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0x1065F1C", Offset = "0x1065F1C", VA = "0x1065F1C")]
	public Wrappable()
	{
	}
}
[Token(Token = "0x2000090")]
[RequireComponent(typeof(ObiSolver))]
public class WrapRopeGameController : MonoBehaviour
{
	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ObiSolver solver;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Wrappable[] wrappables;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onFinish;

	[Token(Token = "0x600053D")]
	[Address(RVA = "0x1065F3C", Offset = "0x1065F3C", VA = "0x1065F3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0x1065F94", Offset = "0x1065F94", VA = "0x1065F94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0x1066020", Offset = "0x1066020", VA = "0x1066020")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0x10660AC", Offset = "0x10660AC", VA = "0x10660AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0x1066108", Offset = "0x1066108", VA = "0x1066108")]
	private void Solver_OnCollision(ObiSolver s, ObiSolver.ObiCollisionEventArgs e)
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0x1066544", Offset = "0x1066544", VA = "0x1066544")]
	public WrapRopeGameController()
	{
	}
}
[Token(Token = "0x2000091")]
[RequireComponent(typeof(Rigidbody))]
public class WrapRopePlayerController : MonoBehaviour
{
	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float acceleration;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody rb;

	[Token(Token = "0x6000543")]
	[Address(RVA = "0x10665B8", Offset = "0x10665B8", VA = "0x10665B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0x1066610", Offset = "0x1066610", VA = "0x1066610")]
	private void Update()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0x1066884", Offset = "0x1066884", VA = "0x1066884")]
	public WrapRopePlayerController()
	{
	}
}
[Token(Token = "0x2000092")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x2000093")]
	public delegate void OnClick();

	[Token(Token = "0x2000094")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x2000095")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x2000096")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x4000339")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x400033A")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x400033B")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform[] additionalButtonPrefab;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool[] reEnable;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float elementSpacing;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float marginH;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float marginV;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector2[] insertPositions;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 menuOffset;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private OVRCameraRig rig;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private LaserPointer lp;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private LineRenderer lr;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool isHorizontal;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	public bool usePanelCentricRelayout;

	[Token(Token = "0x6000546")]
	[Address(RVA = "0x1066894", Offset = "0x1066894", VA = "0x1066894")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0x1066E00", Offset = "0x1066E00", VA = "0x1066E00")]
	public void Show()
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0x106717C", Offset = "0x106717C", VA = "0x106717C")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0x10672F8", Offset = "0x10672F8", VA = "0x10672F8")]
	private void StackedRelayout()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0x1067510", Offset = "0x1067510", VA = "0x1067510")]
	private void PanelCentricRelayout()
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0x106716C", Offset = "0x106716C", VA = "0x106716C")]
	private void Relayout()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0x1067804", Offset = "0x1067804", VA = "0x1067804")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0x1067B80", Offset = "0x1067B80", VA = "0x1067B80")]
	public RectTransform AddButton(string label, [Optional] OnClick handler, int buttonIndex = -1, int targetCanvas = 0, bool highResolutionText = false)
	{
		return null;
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0x1067F30", Offset = "0x1067F30", VA = "0x1067F30")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x1068028", Offset = "0x1068028", VA = "0x1068028")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x10681F8", Offset = "0x10681F8", VA = "0x10681F8")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0x1068290", Offset = "0x1068290", VA = "0x1068290")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x106846C", Offset = "0x106846C", VA = "0x106846C")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0x1068668", Offset = "0x1068668", VA = "0x1068668")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x1068960", Offset = "0x1068960", VA = "0x1068960")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x1068A50", Offset = "0x1068A50", VA = "0x1068A50")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x1068AE4", Offset = "0x1068AE4", VA = "0x1068AE4")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x200009C")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x1069164", Offset = "0x1069164", VA = "0x1069164")]
	private void Start()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x1069208", Offset = "0x1069208", VA = "0x1069208")]
	private void Update()
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x10692A4", Offset = "0x10692A4", VA = "0x10692A4")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x10692DC", Offset = "0x10692DC", VA = "0x10692DC")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x200009D")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x200009E")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x400036B")]
		On,
		[Token(Token = "0x400036C")]
		Off,
		[Token(Token = "0x400036D")]
		OnWhenHitTarget
	}

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000042")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x6000576")]
		[Address(RVA = "0x10692E4", Offset = "0x10692E4", VA = "0x10692E4")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x6000575")]
		[Address(RVA = "0x1066DC0", Offset = "0x1066DC0", VA = "0x1066DC0")]
		set
		{
		}
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x10692EC", Offset = "0x10692EC", VA = "0x10692EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x1069344", Offset = "0x1069344", VA = "0x1069344")]
	private void Start()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x106947C", Offset = "0x106947C", VA = "0x106947C", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x1069498", Offset = "0x1069498", VA = "0x1069498", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x10694E8", Offset = "0x10694E8", VA = "0x10694E8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x1069688", Offset = "0x1069688", VA = "0x1069688")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x1069798", Offset = "0x1069798", VA = "0x1069798")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x106981C", Offset = "0x106981C", VA = "0x106981C")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x10698DC", Offset = "0x10698DC", VA = "0x10698DC")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x1069984", Offset = "0x1069984", VA = "0x1069984")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x1069A70", Offset = "0x1069A70", VA = "0x1069A70")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x200009F")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x400036E")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x400036F")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x4000370")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This should be a reference to the OVRCameraRig that is usually a child of the PlayerController.")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Collision layers to be used for the purposes of fading out the screen when the HMD is inside world geometry and adjusting the capsule height.")]
	public LayerMask CollideLayers;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Offset is added to camera's real world height, effectively treating it as though the player was taller/standing higher.")]
	public float HeightOffset;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Minimum height that the character capsule can shrink to.  To disable, set to capsule's height.")]
	public float MinimumHeight;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Maximum height that the character capsule can grow to.  To disable, set to capsule's height.")]
	public float MaximumHeight;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x1069A80", Offset = "0x1069A80", VA = "0x1069A80")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x1069A88", Offset = "0x1069A88", VA = "0x1069A88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x1069B18", Offset = "0x1069B18", VA = "0x1069B18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x1069BA4", Offset = "0x1069BA4", VA = "0x1069BA4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x1069C30", Offset = "0x1069C30", VA = "0x1069C30")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x1069F50", Offset = "0x1069F50", VA = "0x1069F50")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x106A1B0", Offset = "0x106A1B0", VA = "0x106A1B0")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000A0")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x106A908", Offset = "0x106A908", VA = "0x106A908")]
	private void Start()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x106A9B4", Offset = "0x106A9B4", VA = "0x106A9B4")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x20000A1")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x20000A2")]
	public enum States
	{
		[Token(Token = "0x400039E")]
		Ready,
		[Token(Token = "0x400039F")]
		Aim,
		[Token(Token = "0x40003A0")]
		CancelAim,
		[Token(Token = "0x40003A1")]
		PreTeleport,
		[Token(Token = "0x40003A2")]
		CancelTeleport,
		[Token(Token = "0x40003A3")]
		Teleporting,
		[Token(Token = "0x40003A4")]
		PostTeleport
	}

	[Token(Token = "0x20000A3")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x40003A6")]
		None,
		[Token(Token = "0x40003A7")]
		Aim,
		[Token(Token = "0x40003A8")]
		PreTeleport,
		[Token(Token = "0x40003A9")]
		Teleport
	}

	[Token(Token = "0x20000A4")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x40003AB")]
		Point,
		[Token(Token = "0x40003AC")]
		Sphere,
		[Token(Token = "0x40003AD")]
		Capsule
	}

	[Token(Token = "0x20000A5")]
	public class AimData
	{
		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x17000046")]
		public List<Vector3> Points
		{
			[Token(Token = "0x60005C0")]
			[Address(RVA = "0x106C6D4", Offset = "0x106C6D4", VA = "0x106C6D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60005C1")]
			[Address(RVA = "0x106C6DC", Offset = "0x106C6DC", VA = "0x106C6DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x106C64C", Offset = "0x106C64C", VA = "0x106C64C")]
		public AimData()
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x106C6E4", Offset = "0x106C6E4", VA = "0x106C6E4")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20000A6")]
	[CompilerGenerated]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000047")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005C6")]
			[Address(RVA = "0x106C84C", Offset = "0x106C84C", VA = "0x106C84C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000048")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005C8")]
			[Address(RVA = "0x106C894", Offset = "0x106C894", VA = "0x106C894", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x106B3A0", Offset = "0x106B3A0", VA = "0x106B3A0")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x106C73C", Offset = "0x106C73C", VA = "0x106C73C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x106C740", Offset = "0x106C740", VA = "0x106C740", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x106C854", Offset = "0x106C854", VA = "0x106C854", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000A7")]
	[CompilerGenerated]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000049")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005CC")]
			[Address(RVA = "0x106C9F8", Offset = "0x106C9F8", VA = "0x106C9F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005CE")]
			[Address(RVA = "0x106CA40", Offset = "0x106CA40", VA = "0x106CA40", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x106B828", Offset = "0x106B828", VA = "0x106B828")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x106C89C", Offset = "0x106C89C", VA = "0x106C89C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x106C8A0", Offset = "0x106C8A0", VA = "0x106C8A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x106CA00", Offset = "0x106CA00", VA = "0x106CA00", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000A8")]
	[CompilerGenerated]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700004B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005D2")]
			[Address(RVA = "0x106CAFC", Offset = "0x106CAFC", VA = "0x106CAFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005D4")]
			[Address(RVA = "0x106CB44", Offset = "0x106CB44", VA = "0x106CB44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x106B9FC", Offset = "0x106B9FC", VA = "0x106B9FC")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x106CA48", Offset = "0x106CA48", VA = "0x106CA48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x106CA4C", Offset = "0x106CA4C", VA = "0x106CA4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x106CB04", Offset = "0x106CB04", VA = "0x106CB04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000A9")]
	[CompilerGenerated]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700004D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005D8")]
			[Address(RVA = "0x106CC34", Offset = "0x106CC34", VA = "0x106CC34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005DA")]
			[Address(RVA = "0x106CC7C", Offset = "0x106CC7C", VA = "0x106CC7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x106BBD0", Offset = "0x106BBD0", VA = "0x106BBD0")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x106CB4C", Offset = "0x106CB4C", VA = "0x106CB4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x106CB50", Offset = "0x106CB50", VA = "0x106CB50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x106CC3C", Offset = "0x106CC3C", VA = "0x106CC3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AA")]
	[CompilerGenerated]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700004F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005DE")]
			[Address(RVA = "0x106CD38", Offset = "0x106CD38", VA = "0x106CD38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005E0")]
			[Address(RVA = "0x106CD80", Offset = "0x106CD80", VA = "0x106CD80", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x106BDA4", Offset = "0x106BDA4", VA = "0x106BDA4")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x106CC84", Offset = "0x106CC84", VA = "0x106CC84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x106CC88", Offset = "0x106CC88", VA = "0x106CC88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x106CD40", Offset = "0x106CD40", VA = "0x106CD40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AB")]
	[CompilerGenerated]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005E4")]
			[Address(RVA = "0x106CE6C", Offset = "0x106CE6C", VA = "0x106CE6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005E6")]
			[Address(RVA = "0x106CEB4", Offset = "0x106CEB4", VA = "0x106CEB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x106BF78", Offset = "0x106BF78", VA = "0x106BF78")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x106CD88", Offset = "0x106CD88", VA = "0x106CD88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x106CD8C", Offset = "0x106CD8C", VA = "0x106CD8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x106CE74", Offset = "0x106CE74", VA = "0x106CE74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AC")]
	[CompilerGenerated]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000053")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005EA")]
			[Address(RVA = "0x106CFC0", Offset = "0x106CFC0", VA = "0x106CFC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005EC")]
			[Address(RVA = "0x106D008", Offset = "0x106D008", VA = "0x106D008", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x106C14C", Offset = "0x106C14C", VA = "0x106C14C")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x106CEBC", Offset = "0x106CEBC", VA = "0x106CEBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x106CEC0", Offset = "0x106CEC0", VA = "0x106CEC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x106CFC8", Offset = "0x106CFC8", VA = "0x106CFC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Allow linear movement prior to the teleport system being activated.")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Allow linear movement while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Tooltip("Allow linear movement while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[Tooltip("Allow linear movement after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Allow rotation prior to the teleport system being activated.")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[Tooltip("Allow rotation while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[Tooltip("Allow rotation while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[Tooltip("Allow rotation after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableRotationDuringPostTeleport;

	[NonSerialized]
	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This prefab will be instantiated as needed and updated to match the current aim target.")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("TeleportDestinationPrefab will be instantiated into this layer.")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("When aiming at possible destinations, the aim collision type determines which shape to use for collision tests.")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Tooltip("Use the character collision radius/height/skinwidth for sphere/capsule collision tests.")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Radius of the sphere or capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionRadius;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("Height of the capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000043")]
	public States CurrentState
	{
		[Token(Token = "0x600058D")]
		[Address(RVA = "0x106AA04", Offset = "0x106AA04", VA = "0x106AA04")]
		[CompilerGenerated]
		get
		{
			return default(States);
		}
		[Token(Token = "0x600058E")]
		[Address(RVA = "0x106AA0C", Offset = "0x106AA0C", VA = "0x106AA0C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000044")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x6000592")]
		[Address(RVA = "0x106ABDC", Offset = "0x106ABDC", VA = "0x106ABDC")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000045")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x6000593")]
		[Address(RVA = "0x106AC00", Offset = "0x106AC00", VA = "0x106AC00")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000594")]
		[Address(RVA = "0x106AC08", Offset = "0x106AC08", VA = "0x106AC08")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x600058F")]
		[Address(RVA = "0x106AA14", Offset = "0x106AA14", VA = "0x106AA14")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000590")]
		[Address(RVA = "0x106AAC4", Offset = "0x106AAC4", VA = "0x106AAC4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x600059E")]
		[Address(RVA = "0x106B268", Offset = "0x106B268", VA = "0x106B268")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600059F")]
		[Address(RVA = "0x106B304", Offset = "0x106B304", VA = "0x106B304")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x106B3C8", Offset = "0x106B3C8", VA = "0x106B3C8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x106B464", Offset = "0x106B464", VA = "0x106B464")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x106B500", Offset = "0x106B500", VA = "0x106B500")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x106B5B0", Offset = "0x106B5B0", VA = "0x106B5B0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x106B67C", Offset = "0x106B67C", VA = "0x106B67C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x106B718", Offset = "0x106B718", VA = "0x106B718")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x106B850", Offset = "0x106B850", VA = "0x106B850")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x106B8EC", Offset = "0x106B8EC", VA = "0x106B8EC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x106BA24", Offset = "0x106BA24", VA = "0x106BA24")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x106BAC0", Offset = "0x106BAC0", VA = "0x106BAC0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x106BBF8", Offset = "0x106BBF8", VA = "0x106BBF8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x106BC94", Offset = "0x106BC94", VA = "0x106BC94")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x106BDCC", Offset = "0x106BDCC", VA = "0x106BDCC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x106BE68", Offset = "0x106BE68", VA = "0x106BE68")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x106BFA0", Offset = "0x106BFA0", VA = "0x106BFA0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x106C03C", Offset = "0x106C03C", VA = "0x106C03C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x106C174", Offset = "0x106C174", VA = "0x106C174")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x106C224", Offset = "0x106C224", VA = "0x106C224")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x106A9BC", Offset = "0x106A9BC", VA = "0x106A9BC")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x106A9E0", Offset = "0x106A9E0", VA = "0x106A9E0")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x106AB74", Offset = "0x106AB74", VA = "0x106AB74")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x106AC10", Offset = "0x106AC10", VA = "0x106AC10")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x106AED8", Offset = "0x106AED8", VA = "0x106AED8")]
	[Conditional("DEBUG_TELEPORT_STATES")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x106AF80", Offset = "0x106AF80", VA = "0x106AF80")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x106B06C", Offset = "0x106B06C", VA = "0x106B06C")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x106B088", Offset = "0x106B088", VA = "0x106B088")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x106B138", Offset = "0x106B138", VA = "0x106B138")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x106B168", Offset = "0x106B168", VA = "0x106B168")]
	private void Awake()
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0x106B1C8", Offset = "0x106B1C8", VA = "0x106B1C8", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0x106B260", Offset = "0x106B260", VA = "0x106B260", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x106B1EC", Offset = "0x106B1EC", VA = "0x106B1EC")]
	[IteratorStateMachine(typeof(<ReadyStateCoroutine>d__52))]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x106B660", Offset = "0x106B660", VA = "0x106B660")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x106B7B4", Offset = "0x106B7B4", VA = "0x106B7B4")]
	[IteratorStateMachine(typeof(<AimStateCoroutine>d__64))]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x106B988", Offset = "0x106B988", VA = "0x106B988")]
	[IteratorStateMachine(typeof(<CancelAimStateCoroutine>d__68))]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x106BB5C", Offset = "0x106BB5C", VA = "0x106BB5C")]
	[IteratorStateMachine(typeof(<PreTeleportStateCoroutine>d__72))]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x106BD30", Offset = "0x106BD30", VA = "0x106BD30")]
	[IteratorStateMachine(typeof(<CancelTeleportStateCoroutine>d__76))]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x106BF04", Offset = "0x106BF04", VA = "0x106BF04")]
	[IteratorStateMachine(typeof(<TeleportingStateCoroutine>d__80))]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x106C0D8", Offset = "0x106C0D8", VA = "0x106C0D8")]
	[IteratorStateMachine(typeof(<PostTeleportStateCoroutine>d__84))]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x106C2D4", Offset = "0x106C2D4", VA = "0x106C2D4")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x106C3E8", Offset = "0x106C3E8", VA = "0x106C3E8")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x106C418", Offset = "0x106C418", VA = "0x106C418")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x106C554", Offset = "0x106C554", VA = "0x106C554")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x106C63C", Offset = "0x106C63C", VA = "0x106C63C")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x20000AD")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000C")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x106D010", Offset = "0x106D010", VA = "0x106D010")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x106D0AC", Offset = "0x106D0AC", VA = "0x106D0AC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x106D148", Offset = "0x106D148", VA = "0x106D148")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x106D1E4", Offset = "0x106D1E4", VA = "0x106D1E4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x106D280", Offset = "0x106D280", VA = "0x106D280")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x106D360", Offset = "0x106D360", VA = "0x106D360")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x106D364", Offset = "0x106D364", VA = "0x106D364")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x106D3D8", Offset = "0x106D3D8", VA = "0x106D3D8")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x106D4FC", Offset = "0x106D4FC", VA = "0x106D4FC")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x106D774", Offset = "0x106D774", VA = "0x106D774")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x106D994", Offset = "0x106D994", VA = "0x106D994")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x20000AE")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x106D9B4", Offset = "0x106D9B4", VA = "0x106D9B4", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x106DA44", Offset = "0x106DA44", VA = "0x106DA44", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60005FA")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0x106DB14", Offset = "0x106DB14", VA = "0x106DB14")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x20000AF")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0x106DB24", Offset = "0x106DB24", VA = "0x106DB24", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x106DCB4", Offset = "0x106DCB4", VA = "0x106DCB4")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x20000B0")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The MinimumElevation is relative to the AimPosition.")]
	public float MinimumElevation;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The Gravity is used in conjunction with AimVelocity and the aim direction to simulate a projectile.")]
	public float Gravity;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0.001f, 50f)]
	[Tooltip("The AimVelocity is the initial speed of the faked projectile.")]
	public float AimVelocity;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0.001f, 1f)]
	[Tooltip("The AimStep is the how much to subdivide the iteration.")]
	public float AimStep;

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0x106DCC4", Offset = "0x106DCC4", VA = "0x106DCC4", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x106DE98", Offset = "0x106DE98", VA = "0x106DE98")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x20000B1")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This prefab will be instantiated when the aim visual is awakened, and will be set active when the user is aiming, and deactivated when they are done aiming.")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x6000600")]
	[Address(RVA = "0x106DEAC", Offset = "0x106DEAC", VA = "0x106DEAC")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0x106DFD8", Offset = "0x106DFD8", VA = "0x106DFD8")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0x106E004", Offset = "0x106E004", VA = "0x106E004")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x106E030", Offset = "0x106E030", VA = "0x106E030")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0x106E0D4", Offset = "0x106E0D4", VA = "0x106E0D4", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0x106E134", Offset = "0x106E134", VA = "0x106E134", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0x106E190", Offset = "0x106E190", VA = "0x106E190")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x20000B2")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If the target handler provides a target position, this transform will be moved to that position and it's game object enabled. A target position being provided does not mean the position is valid, only that the aim handler found something to test as a destination.")]
	public Transform PositionIndicator;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This transform will be rotated to match the rotation of the aiming target. Simple teleport destinations should assign this to the object containing this component. More complex teleport destinations might assign this to a sub-object that is used to indicate the landing orientation independently from the rest of the destination indicator, such as when world space effects are required. This will typically be a child of the PositionIndicator.")]
	public Transform OrientationIndicator;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("After the player teleports, the character controller will have it's rotation set to this value. It is different from the OrientationIndicator transform.rotation in order to support both head-relative and forward-facing teleport modes (See TeleportOrientationHandlerThumbstick.cs).")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x17000055")]
	public bool IsValidDestination
	{
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x106E28C", Offset = "0x106E28C", VA = "0x106E28C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x106E294", Offset = "0x106E294", VA = "0x106E294")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x106E424", Offset = "0x106E424", VA = "0x106E424")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x106E4D4", Offset = "0x106E4D4", VA = "0x106E4D4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0x106E2A0", Offset = "0x106E2A0", VA = "0x106E2A0")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0x106E324", Offset = "0x106E324", VA = "0x106E324")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x106E3EC", Offset = "0x106E3EC", VA = "0x106E3EC")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x106E420", Offset = "0x106E420", VA = "0x106E420")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0x106E584", Offset = "0x106E584", VA = "0x106E584")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0x106E5A8", Offset = "0x106E5A8", VA = "0x106E5A8")]
	public void Recycle()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0x106E5C8", Offset = "0x106E5C8", VA = "0x106E5C8", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x20000B3")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x20000B4")]
	[CompilerGenerated]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000056")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600061E")]
			[Address(RVA = "0x106EBA0", Offset = "0x106EBA0", VA = "0x106EBA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000620")]
			[Address(RVA = "0x106EBE8", Offset = "0x106EBE8", VA = "0x106EBE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x106EA0C", Offset = "0x106EA0C", VA = "0x106EA0C")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x106EB10", Offset = "0x106EB10", VA = "0x106EB10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x106EB14", Offset = "0x106EB14", VA = "0x106EB14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x106EBA8", Offset = "0x106EBA8", VA = "0x106EBA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000B5")]
	[CompilerGenerated]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000058")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000624")]
			[Address(RVA = "0x106EC8C", Offset = "0x106EC8C", VA = "0x106EC8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000626")]
			[Address(RVA = "0x106ECD4", Offset = "0x106ECD4", VA = "0x106ECD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x106EAA8", Offset = "0x106EAA8", VA = "0x106EAA8")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x106EBF0", Offset = "0x106EBF0", VA = "0x106EBF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x106EBF4", Offset = "0x106EBF4", VA = "0x106EBF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x106EC94", Offset = "0x106EC94", VA = "0x106EC94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x6000612")]
	[Address(RVA = "0x106E7BC", Offset = "0x106E7BC", VA = "0x106E7BC")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0x106E890", Offset = "0x106E890", VA = "0x106E890", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x106E8E4", Offset = "0x106E8E4", VA = "0x106E8E4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x106E998", Offset = "0x106E998", VA = "0x106E998")]
	[IteratorStateMachine(typeof(<TeleportReadyCoroutine>d__5))]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0x106EA34", Offset = "0x106EA34", VA = "0x106EA34")]
	[IteratorStateMachine(typeof(<TeleportAimCoroutine>d__6))]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000617")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x6000618")]
	public abstract void GetAimData(out Ray aimRay);
}
[Token(Token = "0x20000B6")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The button used to begin aiming for a teleport.")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The button used to trigger the teleport after aiming. It can be the same button as the AimButton, however you cannot abort a teleport if it is.")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("When true, the system will not use the PreTeleport intention which will allow a teleport to occur on a button downpress. When false, the button downpress will trigger the PreTeleport intention and the Teleport intention when the button is released.")]
	public bool FastTeleport;

	[Token(Token = "0x1700005A")]
	public Transform Pointer
	{
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x106ECDC", Offset = "0x106ECDC", VA = "0x106ECDC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000628")]
		[Address(RVA = "0x106ECE4", Offset = "0x106ECE4", VA = "0x106ECE4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x106ECEC", Offset = "0x106ECEC", VA = "0x106ECEC", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x106EE18", Offset = "0x106EE18", VA = "0x106EE18", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0x106EECC", Offset = "0x106EECC", VA = "0x106EECC")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x20000B7")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x20000B8")]
	public enum InputModes
	{
		[Token(Token = "0x40003FE")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x40003FF")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x4000400")]
		ThumbstickTeleport,
		[Token(Token = "0x4000401")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x20000B9")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x4000403")]
		A,
		[Token(Token = "0x4000404")]
		B,
		[Token(Token = "0x4000405")]
		LeftTrigger,
		[Token(Token = "0x4000406")]
		LeftThumbstick,
		[Token(Token = "0x4000407")]
		RightTrigger,
		[Token(Token = "0x4000408")]
		RightThumbstick,
		[Token(Token = "0x4000409")]
		X,
		[Token(Token = "0x400040A")]
		Y
	}

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("CapacitiveButtonForAimAndTeleport=Activate aiming via cap touch detection, press the same button to teleport.\nSeparateButtonsForAimAndTeleport=Use one button to begin aiming, and another to trigger the teleport.\nThumbstickTeleport=Push a thumbstick to begin aiming, release to teleport.")]
	public InputModes InputMode;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Select the controller to be used for aiming. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Select the button to use for triggering aim and teleport when InputMode==CapacitiveButtonForAimAndTeleport")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("The thumbstick magnitude required to trigger aiming and teleports when InputMode==InputModes.ThumbstickTeleport")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x106EED0", Offset = "0x106EED0", VA = "0x106EED0")]
	private void Start()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x106EED4", Offset = "0x106EED4", VA = "0x106EED4", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x106F308", Offset = "0x106F308", VA = "0x106F308", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x106F3C4", Offset = "0x106F3C4", VA = "0x106F3C4")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x20000BA")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x20000BB")]
	public enum OrientationModes
	{
		[Token(Token = "0x400040F")]
		HeadRelative,
		[Token(Token = "0x4000410")]
		ForwardFacing
	}

	[Token(Token = "0x20000BC")]
	[CompilerGenerated]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x1700005B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600063C")]
			[Address(RVA = "0x106F884", Offset = "0x106F884", VA = "0x106F884", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600063E")]
			[Address(RVA = "0x106F8CC", Offset = "0x106F8CC", VA = "0x106F8CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x106F694", Offset = "0x106F694", VA = "0x106F694")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x106F7D4", Offset = "0x106F7D4", VA = "0x106F7D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x106F7D8", Offset = "0x106F7D8", VA = "0x106F7D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x106F88C", Offset = "0x106F88C", VA = "0x106F88C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x6000630")]
	[Address(RVA = "0x106F4B4", Offset = "0x106F4B4", VA = "0x106F4B4")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0x106F59C", Offset = "0x106F59C", VA = "0x106F59C")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0x106F5A4", Offset = "0x106F5A4", VA = "0x106F5A4", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0x106F5E4", Offset = "0x106F5E4", VA = "0x106F5E4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0x106F620", Offset = "0x106F620", VA = "0x106F620")]
	[IteratorStateMachine(typeof(<UpdateOrientationCoroutine>d__7))]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000635")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x6000636")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x6000637")]
	[Address(RVA = "0x106F6BC", Offset = "0x106F6BC", VA = "0x106F6BC")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x20000BD")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x600063F")]
	[Address(RVA = "0x106F8D4", Offset = "0x106F8D4", VA = "0x106F8D4", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x106F8D8", Offset = "0x106F8D8", VA = "0x106F8D8", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x106F950", Offset = "0x106F950", VA = "0x106F950")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x20000BE")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Should the destination orientation be updated during the aim state in addition to the PreTeleport state?")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How far from the destination must the HMD be pointing before using it for orientation")]
	public float AimDistanceThreshold;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("How far from the destination must the HMD be pointing before rejecting the teleport")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x106F954", Offset = "0x106F954", VA = "0x106F954", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0x106F9A4", Offset = "0x106F9A4", VA = "0x106F9A4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0x106FE20", Offset = "0x106FE20", VA = "0x106FE20")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x20000BF")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Which thumbstick is to be used for adjusting the teleport orientation. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The orientation will only change if the thumbstick magnitude is above this value. This will usually be larger than the TeleportInputHandlerTouch.ThumbstickTeleportThreshold.")]
	public float RotateStickThreshold;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x106FE24", Offset = "0x106FE24", VA = "0x106FE24", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x106FE5C", Offset = "0x106FE5C", VA = "0x106FE5C", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x1070334", Offset = "0x1070334", VA = "0x1070334")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x20000C0")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x1070344", Offset = "0x1070344", VA = "0x1070344")]
	private void Start()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x1070348", Offset = "0x1070348", VA = "0x1070348")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x1070350", Offset = "0x1070350", VA = "0x1070350")]
	private void Update()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x107043C", Offset = "0x107043C", VA = "0x107043C")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0x1070458", Offset = "0x1070458", VA = "0x1070458")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x20000C1")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x1700005D")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x1070470", Offset = "0x1070470", VA = "0x1070470")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x1070478", Offset = "0x1070478", VA = "0x1070478")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x106D9DC", Offset = "0x106D9DC", VA = "0x106D9DC", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x106DAEC", Offset = "0x106DAEC", VA = "0x106DAEC", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x1070480", Offset = "0x1070480", VA = "0x1070480")]
	[Conditional("DEBUG_TELEPORT_EVENT_HANDLERS")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x106E128", Offset = "0x106E128", VA = "0x106E128", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x106E188", Offset = "0x106E188", VA = "0x106E188", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0x106DB1C", Offset = "0x106DB1C", VA = "0x106DB1C")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x20000C2")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x20000C3")]
	[CompilerGenerated]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x1700005E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000660")]
			[Address(RVA = "0x1070B6C", Offset = "0x1070B6C", VA = "0x1070B6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000662")]
			[Address(RVA = "0x1070BB4", Offset = "0x1070BB4", VA = "0x1070BB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x1070734", Offset = "0x1070734", VA = "0x1070734")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x10708B4", Offset = "0x10708B4", VA = "0x10708B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x10708B8", Offset = "0x10708B8", VA = "0x10708B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x1070B74", Offset = "0x1070B74", VA = "0x1070B74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("This bitmask controls which game object layers will be included in the targeting collision tests.")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x400042A")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x6000655")]
	[Address(RVA = "0x1070550", Offset = "0x1070550", VA = "0x1070550")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x107066C", Offset = "0x107066C", VA = "0x107066C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x1070698", Offset = "0x1070698", VA = "0x1070698", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x10706C0", Offset = "0x10706C0", VA = "0x10706C0")]
	[IteratorStateMachine(typeof(<TargetAimCoroutine>d__7))]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x107075C", Offset = "0x107075C", VA = "0x107075C", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x600065A")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x1070778", Offset = "0x1070778", VA = "0x1070778", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}
}
[Token(Token = "0x20000C4")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x1070BBC", Offset = "0x1070BBC", VA = "0x1070BBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0x1070C24", Offset = "0x1070C24", VA = "0x1070C24", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x1070D90", Offset = "0x1070D90", VA = "0x1070D90", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x1070E80", Offset = "0x1070E80", VA = "0x1070E80")]
	[Conditional("SHOW_PATH_RESULT")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x1070E84", Offset = "0x1070E84", VA = "0x1070E84")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x20000C5")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("When checking line of sight to the destination, add this value to the vertical offset for targeting collision checks.")]
	public float LOSOffset;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Teleport logic will only work with TeleportPoint components that exist in the layers specified by this mask.")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x1070E90", Offset = "0x1070E90", VA = "0x1070E90", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x1071090", Offset = "0x1071090", VA = "0x1071090")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x20000C6")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x600066A")]
	[Address(RVA = "0x107109C", Offset = "0x107109C", VA = "0x107109C", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x1071208", Offset = "0x1071208", VA = "0x1071208")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x20000C7")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x600066C")]
	[Address(RVA = "0x107120C", Offset = "0x107120C", VA = "0x107120C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x1071294", Offset = "0x1071294", VA = "0x1071294", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600066E")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x1071318", Offset = "0x1071318", VA = "0x1071318")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x20000C8")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x20000C9")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000060")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000676")]
			[Address(RVA = "0x1071680", Offset = "0x1071680", VA = "0x1071680", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000678")]
			[Address(RVA = "0x10716C8", Offset = "0x10716C8", VA = "0x10716C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x10713B4", Offset = "0x10713B4", VA = "0x10713B4")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x1071578", Offset = "0x1071578", VA = "0x1071578", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x107157C", Offset = "0x107157C", VA = "0x107157C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x1071688", Offset = "0x1071688", VA = "0x1071688", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 2f)]
	[Tooltip("How long the transition takes. Usually this is greater than Teleport Delay.")]
	public float TransitionDuration;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	[Tooltip("At what percentage of the elapsed transition time does the teleport occur?")]
	public float TeleportDelay;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Fade to black over the duration of the transition")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x1071320", Offset = "0x1071320", VA = "0x1071320", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x1071340", Offset = "0x1071340", VA = "0x1071340")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__4))]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x10713DC", Offset = "0x10713DC", VA = "0x10713DC")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x20000CA")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x6000679")]
	[Address(RVA = "0x10716D0", Offset = "0x10716D0", VA = "0x10716D0", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x10716EC", Offset = "0x10716EC", VA = "0x10716EC")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x20000CB")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x20000CC")]
	[CompilerGenerated]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000062")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000681")]
			[Address(RVA = "0x107191C", Offset = "0x107191C", VA = "0x107191C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000683")]
			[Address(RVA = "0x1071964", Offset = "0x1071964", VA = "0x1071964", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x1071788", Offset = "0x1071788", VA = "0x1071788")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x10717F8", Offset = "0x10717F8", VA = "0x10717F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x10717FC", Offset = "0x10717FC", VA = "0x10717FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x1071924", Offset = "0x1071924", VA = "0x1071924", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 1f)]
	[Tooltip("How much time the warp transition takes to complete.")]
	public float TransitionDuration;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x10716F4", Offset = "0x10716F4", VA = "0x10716F4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x1071714", Offset = "0x1071714", VA = "0x1071714")]
	[IteratorStateMachine(typeof(<DoWarp>d__3))]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x10717B0", Offset = "0x10717B0", VA = "0x10717B0")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x20000CD")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x20000CE")]
	public enum PlabackState
	{
		[Token(Token = "0x400045A")]
		Idle = 1,
		[Token(Token = "0x400045B")]
		Preparing,
		[Token(Token = "0x400045C")]
		Buffering,
		[Token(Token = "0x400045D")]
		Ready,
		[Token(Token = "0x400045E")]
		Ended
	}

	[Token(Token = "0x20000CF")]
	public enum StereoMode
	{
		[Token(Token = "0x4000460")]
		Unknown = -1,
		[Token(Token = "0x4000461")]
		Mono,
		[Token(Token = "0x4000462")]
		TopBottom,
		[Token(Token = "0x4000463")]
		LeftRight,
		[Token(Token = "0x4000464")]
		Mesh
	}

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x17000064")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000684")]
		[Address(RVA = "0x107196C", Offset = "0x107196C", VA = "0x107196C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000065")]
	private static IntPtr Activity
	{
		[Token(Token = "0x6000685")]
		[Address(RVA = "0x1071C5C", Offset = "0x1071C5C", VA = "0x1071C5C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000066")]
	public static bool IsAvailable
	{
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x1071EDC", Offset = "0x1071EDC", VA = "0x1071EDC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000067")]
	public static bool IsPlaying
	{
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x1071F50", Offset = "0x1071F50", VA = "0x1071F50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000068")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x1072054", Offset = "0x1072054", VA = "0x1072054")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x17000069")]
	public static long Duration
	{
		[Token(Token = "0x6000689")]
		[Address(RVA = "0x107215C", Offset = "0x107215C", VA = "0x107215C")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x1700006A")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x1072264", Offset = "0x1072264", VA = "0x1072264")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x1700006B")]
	public static int VideoWidth
	{
		[Token(Token = "0x600068B")]
		[Address(RVA = "0x107236C", Offset = "0x107236C", VA = "0x107236C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700006C")]
	public static int VideoHeight
	{
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x1072474", Offset = "0x1072474", VA = "0x1072474")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700006D")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x107257C", Offset = "0x107257C", VA = "0x107257C")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x1072684", Offset = "0x1072684", VA = "0x1072684")]
		set
		{
		}
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0x10727EC", Offset = "0x10727EC", VA = "0x10727EC")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0x1072A04", Offset = "0x1072A04", VA = "0x1072A04")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0x1072B0C", Offset = "0x1072B0C", VA = "0x1072B0C")]
	public static void Play()
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0x1072C14", Offset = "0x1072C14", VA = "0x1072C14")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0x1072D1C", Offset = "0x1072D1C", VA = "0x1072D1C")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0x1072E8C", Offset = "0x1072E8C", VA = "0x1072E8C")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0x1072FF8", Offset = "0x1072FF8", VA = "0x1072FF8")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x20000D0")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x1400000F")]
	public event Action onButtonDown
	{
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x107324C", Offset = "0x107324C", VA = "0x107324C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x10732E8", Offset = "0x10732E8", VA = "0x10732E8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0x1073384", Offset = "0x1073384", VA = "0x1073384", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0x10733A0", Offset = "0x10733A0", VA = "0x10733A0")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x20000D1")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x20000D2")]
	public enum ButtonType
	{
		[Token(Token = "0x4000468")]
		Play,
		[Token(Token = "0x4000469")]
		Pause,
		[Token(Token = "0x400046A")]
		FastForward,
		[Token(Token = "0x400046B")]
		Rewind,
		[Token(Token = "0x400046C")]
		SkipForward,
		[Token(Token = "0x400046D")]
		SkipBack,
		[Token(Token = "0x400046E")]
		Stop
	}

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x1700006E")]
	public ButtonType buttonType
	{
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x10733A8", Offset = "0x10733A8", VA = "0x10733A8")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x10733B0", Offset = "0x10733B0", VA = "0x10733B0")]
		set
		{
		}
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0x10733D4", Offset = "0x10733D4", VA = "0x10733D4", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0x1074228", Offset = "0x1074228", VA = "0x1074228")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x20000D3")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x20000D4")]
	public enum VideoShape
	{
		[Token(Token = "0x4000483")]
		_360,
		[Token(Token = "0x4000484")]
		_180,
		[Token(Token = "0x4000485")]
		Quad
	}

	[Token(Token = "0x20000D5")]
	public enum VideoStereo
	{
		[Token(Token = "0x4000487")]
		Mono,
		[Token(Token = "0x4000488")]
		TopBottom,
		[Token(Token = "0x4000489")]
		LeftRight,
		[Token(Token = "0x400048A")]
		BottomTop
	}

	[Token(Token = "0x20000D6")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000072")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006B5")]
			[Address(RVA = "0x1075750", Offset = "0x1075750", VA = "0x1075750", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006B7")]
			[Address(RVA = "0x1075798", Offset = "0x1075798", VA = "0x1075798", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x107490C", Offset = "0x107490C", VA = "0x107490C")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x10755A4", Offset = "0x10755A4", VA = "0x10755A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x10755A8", Offset = "0x10755A8", VA = "0x10755A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1075758", Offset = "0x1075758", VA = "0x1075758", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x1700006F")]
	public bool IsPlaying
	{
		[Token(Token = "0x600069F")]
		[Address(RVA = "0x1074280", Offset = "0x1074280", VA = "0x1074280")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x1074288", Offset = "0x1074288", VA = "0x1074288")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000070")]
	public long Duration
	{
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x1074294", Offset = "0x1074294", VA = "0x1074294")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x107429C", Offset = "0x107429C", VA = "0x107429C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000071")]
	public long PlaybackPosition
	{
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x10742A4", Offset = "0x10742A4", VA = "0x10742A4")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x10742AC", Offset = "0x10742AC", VA = "0x10742AC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x10742B4", Offset = "0x10742B4", VA = "0x10742B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x1074538", Offset = "0x1074538", VA = "0x1074538")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x1074598", Offset = "0x1074598", VA = "0x1074598")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x1074898", Offset = "0x1074898", VA = "0x1074898")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x1074934", Offset = "0x1074934", VA = "0x1074934")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x1074C0C", Offset = "0x1074C0C", VA = "0x1074C0C")]
	public void Play()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x1074C90", Offset = "0x1074C90", VA = "0x1074C90")]
	public void Pause()
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x1074D10", Offset = "0x1074D10", VA = "0x1074D10")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x1074DFC", Offset = "0x1074DFC", VA = "0x1074DFC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0x1075398", Offset = "0x1075398", VA = "0x1075398")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x1075434", Offset = "0x1075434", VA = "0x1075434")]
	public void Stop()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x10754B4", Offset = "0x10754B4", VA = "0x10754B4")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0x1075594", Offset = "0x1075594", VA = "0x1075594")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x20000D8")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x20000D9")]
	private enum PlaybackState
	{
		[Token(Token = "0x40004A7")]
		Playing,
		[Token(Token = "0x40004A8")]
		Paused,
		[Token(Token = "0x40004A9")]
		Rewinding,
		[Token(Token = "0x40004AA")]
		FastForwarding
	}

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.UI.Slider ProgressBar;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x1075874", Offset = "0x1075874", VA = "0x1075874")]
	private void Start()
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x1075BA0", Offset = "0x1075BA0", VA = "0x1075BA0")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x1075D70", Offset = "0x1075D70", VA = "0x1075D70")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x1075E94", Offset = "0x1075E94", VA = "0x1075E94")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x1075F90", Offset = "0x1075F90", VA = "0x1075F90")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x1075E68", Offset = "0x1075E68", VA = "0x1075E68")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x1075FF0", Offset = "0x1075FF0", VA = "0x1075FF0")]
	private void Update()
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0x1075AA0", Offset = "0x1075AA0", VA = "0x1075AA0")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0x1076320", Offset = "0x1076320", VA = "0x1076320")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x20000DA")]
public static class VectorUtil
{
	[Token(Token = "0x60006C3")]
	[Address(RVA = "0x1075320", Offset = "0x1075320", VA = "0x1075320")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x20000DB")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x40004AB")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x40004AC")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x1076330", Offset = "0x1076330", VA = "0x1076330")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0x1076984", Offset = "0x1076984", VA = "0x1076984")]
	private void Update()
	{
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0x1076BE0", Offset = "0x1076BE0", VA = "0x1076BE0")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0x1076D44", Offset = "0x1076D44", VA = "0x1076D44")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0x1076EAC", Offset = "0x1076EAC", VA = "0x1076EAC")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x1077030", Offset = "0x1077030", VA = "0x1077030")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x20000DC")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x40004B5")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x1077040", Offset = "0x1077040", VA = "0x1077040")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x1077098", Offset = "0x1077098", VA = "0x1077098")]
	private void Start()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x107709C", Offset = "0x107709C", VA = "0x107709C")]
	private void Update()
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x107672C", Offset = "0x107672C", VA = "0x107672C")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x10770A0", Offset = "0x10770A0", VA = "0x10770A0")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x10772BC", Offset = "0x10772BC", VA = "0x10772BC")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x20000DD")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x10772C4", Offset = "0x10772C4", VA = "0x10772C4")]
	private void Start()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x1077824", Offset = "0x1077824", VA = "0x1077824")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x10778D0", Offset = "0x10778D0", VA = "0x10778D0")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x1077B60", Offset = "0x1077B60", VA = "0x1077B60")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x1077C34", Offset = "0x1077C34", VA = "0x1077C34")]
	private void Update()
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x1077D0C", Offset = "0x1077D0C", VA = "0x1077D0C")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x1077D74", Offset = "0x1077D74", VA = "0x1077D74")]
	public DebugUISample()
	{
	}
}
[Token(Token = "0x20000DE")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x1077F1C", Offset = "0x1077F1C", VA = "0x1077F1C")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x20000DF")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x1077F24", Offset = "0x1077F24", VA = "0x1077F24")]
	private void Start()
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x1077FBC", Offset = "0x1077FBC", VA = "0x1077FBC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x1078094", Offset = "0x1078094", VA = "0x1078094")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x10780F0", Offset = "0x10780F0", VA = "0x10780F0")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x20000E0")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x10780F8", Offset = "0x10780F8", VA = "0x10780F8")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x20000E1")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x20000E2")]
	[CompilerGenerated]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x17000074")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006E8")]
			[Address(RVA = "0x1078508", Offset = "0x1078508", VA = "0x1078508", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006EA")]
			[Address(RVA = "0x1078550", Offset = "0x1078550", VA = "0x1078550", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x10783A4", Offset = "0x10783A4", VA = "0x10783A4")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x10783D4", Offset = "0x10783D4", VA = "0x10783D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x10783D8", Offset = "0x10783D8", VA = "0x10783D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x1078510", Offset = "0x1078510", VA = "0x1078510", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x1078100", Offset = "0x1078100", VA = "0x1078100")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x107820C", Offset = "0x107820C", VA = "0x107820C")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x1078198", Offset = "0x1078198", VA = "0x1078198")]
	[IteratorStateMachine(typeof(<GetCenterEye>d__6))]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x10783CC", Offset = "0x10783CC", VA = "0x10783CC")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x20000E3")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(4f, 32f)]
	public int SubdivisionsU;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(4f, 32f)]
	public int SubdivisionsV;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x1078558", Offset = "0x1078558", VA = "0x1078558")]
	private void Update()
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x1079F00", Offset = "0x1079F00", VA = "0x1079F00")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x20000E4")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x17000076")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x1079F08", Offset = "0x1079F08", VA = "0x1079F08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x1079F58", Offset = "0x1079F58", VA = "0x1079F58")]
	public void Start()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x107A390", Offset = "0x107A390", VA = "0x107A390")]
	public void Update()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x107A468", Offset = "0x107A468", VA = "0x107A468")]
	[Conditional("DEBUG_LOCOMOTION_PANEL")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x60006F1")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60006F2")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x60006F3")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x60006F4")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x60006F5")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x60006F6")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x60006F7")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x60006F8")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0x107A4C0", Offset = "0x107A4C0", VA = "0x107A4C0")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0x107A500", Offset = "0x107A500", VA = "0x107A500")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0x107A56C", Offset = "0x107A56C", VA = "0x107A56C")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0x107A6B8", Offset = "0x107A6B8", VA = "0x107A6B8")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0x107A788", Offset = "0x107A788", VA = "0x107A788")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0x107A26C", Offset = "0x107A26C", VA = "0x107A26C")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0x107A858", Offset = "0x107A858", VA = "0x107A858")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0x107A8A4", Offset = "0x107A8A4", VA = "0x107A8A4")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x107A9B4", Offset = "0x107A9B4", VA = "0x107A9B4")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x20000E5")]
[RequireComponent(typeof(Canvas))]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x20000E6")]
	public enum DrawMode
	{
		[Token(Token = "0x40004E4")]
		Opaque,
		[Token(Token = "0x40004E5")]
		OpaqueWithClip,
		[Token(Token = "0x40004E6")]
		TransparentDefaultAlpha,
		[Token(Token = "0x40004E7")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private Shader _opaqueShader;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x17000077")]
	public bool overlayEnabled
	{
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x107BFF8", Offset = "0x107BFF8", VA = "0x107BFF8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x107C07C", Offset = "0x107C07C", VA = "0x107C07C")]
		set
		{
		}
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0x107A9BC", Offset = "0x107A9BC", VA = "0x107A9BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0x107B680", Offset = "0x107B680", VA = "0x107B680")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0x107B6F4", Offset = "0x107B6F4", VA = "0x107B6F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0x107B7C4", Offset = "0x107B7C4", VA = "0x107B7C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0x107B894", Offset = "0x107B894", VA = "0x107B894", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0x107BA98", Offset = "0x107BA98", VA = "0x107BA98")]
	private void Update()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0x107C138", Offset = "0x107C138", VA = "0x107C138")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x20000E7")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x107C1F4", Offset = "0x107C1F4", VA = "0x107C1F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x107C594", Offset = "0x107C594", VA = "0x107C594")]
	private void Update()
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x107C728", Offset = "0x107C728", VA = "0x107C728")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x107C730", Offset = "0x107C730", VA = "0x107C730")]
	public void Release()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x107C718", Offset = "0x107C718", VA = "0x107C718")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x107C738", Offset = "0x107C738", VA = "0x107C738")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x20000E8")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x20000E9")]
	[CompilerGenerated]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x17000078")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600071C")]
			[Address(RVA = "0x107CE80", Offset = "0x107CE80", VA = "0x107CE80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600071E")]
			[Address(RVA = "0x107CEC8", Offset = "0x107CEC8", VA = "0x107CEC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x107CD24", Offset = "0x107CD24", VA = "0x107CD24")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x107CD7C", Offset = "0x107CD7C", VA = "0x107CD7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x107CD80", Offset = "0x107CD80", VA = "0x107CD80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x107CE88", Offset = "0x107CE88", VA = "0x107CE88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EA")]
	[CompilerGenerated]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700007A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000722")]
			[Address(RVA = "0x107D04C", Offset = "0x107D04C", VA = "0x107D04C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000724")]
			[Address(RVA = "0x107D094", Offset = "0x107D094", VA = "0x107D094", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x107CD4C", Offset = "0x107CD4C", VA = "0x107CD4C")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x107CED0", Offset = "0x107CED0", VA = "0x107CED0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x107CED4", Offset = "0x107CED4", VA = "0x107CED4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x107D054", Offset = "0x107D054", VA = "0x107D054", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x107C740", Offset = "0x107C740", VA = "0x107C740")]
	private void Start()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x107CA20", Offset = "0x107CA20", VA = "0x107CA20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x107CA70", Offset = "0x107CA70", VA = "0x107CA70")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x107CBE8", Offset = "0x107CBE8", VA = "0x107CBE8")]
	public void Release()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x107CC8C", Offset = "0x107CC8C", VA = "0x107CC8C")]
	[IteratorStateMachine(typeof(<FadeCameraClearColor>d__8))]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x107CB28", Offset = "0x107CB28", VA = "0x107CB28")]
	[IteratorStateMachine(typeof(<FadeSphere>d__9))]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x107CD74", Offset = "0x107CD74", VA = "0x107CD74")]
	public BrushController()
	{
	}
}
[Token(Token = "0x20000EB")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x6000725")]
	[Address(RVA = "0x107D09C", Offset = "0x107D09C", VA = "0x107D09C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x107D0F0", Offset = "0x107D0F0", VA = "0x107D0F0")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x20000EC")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x6000727")]
	[Address(RVA = "0x107D0F8", Offset = "0x107D0F8", VA = "0x107D0F8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0x107D2CC", Offset = "0x107D2CC", VA = "0x107D2CC")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0x107D35C", Offset = "0x107D35C", VA = "0x107D35C")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0x107D3B8", Offset = "0x107D3B8", VA = "0x107D3B8")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x20000ED")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x20000EE")]
	[CompilerGenerated]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x1700007C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000737")]
			[Address(RVA = "0x107E590", Offset = "0x107E590", VA = "0x107E590", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000739")]
			[Address(RVA = "0x107E5D8", Offset = "0x107E5D8", VA = "0x107E5D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x107E2F8", Offset = "0x107E2F8", VA = "0x107E2F8")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x107E3C0", Offset = "0x107E3C0", VA = "0x107E3C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x107E3C4", Offset = "0x107E3C4", VA = "0x107E3C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x107E598", Offset = "0x107E598", VA = "0x107E598", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 localPosition;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x600072B")]
	[Address(RVA = "0x107D3C0", Offset = "0x107D3C0", VA = "0x107D3C0")]
	private void Start()
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0x107D6A8", Offset = "0x107D6A8", VA = "0x107D6A8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0x107D994", Offset = "0x107D994", VA = "0x107D994")]
	private void FindHands()
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0x107DCBC", Offset = "0x107DCBC", VA = "0x107DCBC")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x107DF94", Offset = "0x107DF94", VA = "0x107DF94")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x107E07C", Offset = "0x107E07C", VA = "0x107E07C")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x107E214", Offset = "0x107E214", VA = "0x107E214")]
	public void Release()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x107E164", Offset = "0x107E164", VA = "0x107E164")]
	[IteratorStateMachine(typeof(<FadeLighting>d__17))]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x107E320", Offset = "0x107E320", VA = "0x107E320")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x20000EF")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x20000F0")]
	public enum ManipulationType
	{
		[Token(Token = "0x400051C")]
		Default,
		[Token(Token = "0x400051D")]
		ForcedHand,
		[Token(Token = "0x400051E")]
		DollyHand,
		[Token(Token = "0x400051F")]
		DollyAttached,
		[Token(Token = "0x4000520")]
		HorizontalScaled,
		[Token(Token = "0x4000521")]
		VerticalScaled,
		[Token(Token = "0x4000522")]
		Menu
	}

	[Token(Token = "0x20000F1")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x20000F2")]
	public delegate void ReleasedObject();

	[Token(Token = "0x20000F3")]
	public delegate void SetCursorPosition(Vector3 cursorPosition);

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string ObjectName;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string ObjectInstructions;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x107E5E0", Offset = "0x107E5E0", VA = "0x107E5E0")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x107E640", Offset = "0x107E640", VA = "0x107E640")]
	public void Release()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x107E65C", Offset = "0x107E65C", VA = "0x107E65C")]
	public void CursorPos(Vector3 cursorPos)
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0x107E678", Offset = "0x107E678", VA = "0x107E678")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x20000F4")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The segments around the tip of a finger")]
	public int radialDivisions;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The fade range (finger width is 2x this)")]
	public float borderSize;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Along the fingers, each knuckle scales down by this amount.  Default is zero for uniform width along entire finger.")]
	public float fingerTaper;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Shorten the last bone of each finger; need this to account for bone structure (end bone is at finger tip instead of center). Default is 1.")]
	public float fingerTipLength;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Move the base of the 4 main fingers towards the tips, to avoid a visible mesh crack between finger webbing. Default is 0.")]
	public float webOffset;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] handVertices;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector2[] handUVs;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x600074A")]
	[Address(RVA = "0x107E930", Offset = "0x107E930", VA = "0x107E930")]
	private void Awake()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x107EB90", Offset = "0x107EB90", VA = "0x107EB90")]
	private void Update()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x107ED58", Offset = "0x107ED58", VA = "0x107ED58")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x107F3AC", Offset = "0x107F3AC", VA = "0x107F3AC")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, Vector3 point1, Vector3 point2)
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x107F944", Offset = "0x107F944", VA = "0x107F944")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x1081C4C", Offset = "0x1081C4C", VA = "0x1081C4C")]
	private void AddVertex(Vector3 position, Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x1081FC0", Offset = "0x1081FC0", VA = "0x1081FC0")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x20000F5")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x1082FE4", Offset = "0x1082FE4", VA = "0x1082FE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x108334C", Offset = "0x108334C", VA = "0x108334C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x1083080", Offset = "0x1083080", VA = "0x1083080")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x10837B4", Offset = "0x10837B4", VA = "0x10837B4")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x1083D24", Offset = "0x1083D24", VA = "0x1083D24")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x20000F6")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x20000F7")]
	[CompilerGenerated]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x1700007E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000765")]
			[Address(RVA = "0x10865B0", Offset = "0x10865B0", VA = "0x10865B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000767")]
			[Address(RVA = "0x10865F8", Offset = "0x10865F8", VA = "0x10865F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x1085EF0", Offset = "0x1085EF0", VA = "0x1085EF0")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x10862D8", Offset = "0x10862D8", VA = "0x10862D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x10862DC", Offset = "0x10862DC", VA = "0x10862DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x10865B8", Offset = "0x10865B8", VA = "0x10865B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 localGrabOffset;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 camGrabPosition;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 handGrabPosition;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 cursorPosition;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x1083D34", Offset = "0x1083D34", VA = "0x1083D34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x1083F30", Offset = "0x1083F30", VA = "0x1083F30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x1084E5C", Offset = "0x1084E5C", VA = "0x1084E5C")]
	private void GrabHoverObject(GameObject grbObj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x1085BF4", Offset = "0x1085BF4", VA = "0x1085BF4")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x1083EBC", Offset = "0x1083EBC", VA = "0x1083EBC")]
	[IteratorStateMachine(typeof(<StartDemo>d__23))]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x1084180", Offset = "0x1084180", VA = "0x1084180")]
	private void FindHoverObject(Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x1085154", Offset = "0x1085154", VA = "0x1085154")]
	private void ManipulateObject(GameObject obj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x1085F18", Offset = "0x1085F18", VA = "0x1085F18")]
	private void ClampGrabOffset(ref Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0x1085FCC", Offset = "0x1085FCC", VA = "0x1085FCC")]
	private Vector3 ClampScale(Vector3 localScale, Vector2 thumb)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0x1085FFC", Offset = "0x1085FFC", VA = "0x1085FFC")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0x1085DD4", Offset = "0x1085DD4", VA = "0x1085DD4")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0x10860EC", Offset = "0x10860EC", VA = "0x10860EC")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x20000F8")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x1086600", Offset = "0x1086600", VA = "0x1086600")]
	private void Start()
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x108676C", Offset = "0x108676C", VA = "0x108676C")]
	private void Update()
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0x1086820", Offset = "0x1086820", VA = "0x1086820")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x20000F9")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x20000FA")]
	public enum BrushState
	{
		[Token(Token = "0x400055F")]
		Idle,
		[Token(Token = "0x4000560")]
		Inking
	}

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Vector3> inkPositions;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x1086828", Offset = "0x1086828", VA = "0x1086828")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0x1086830", Offset = "0x1086830", VA = "0x1086830")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0x1086AE0", Offset = "0x1086AE0", VA = "0x1086AE0")]
	private void StartLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0x1086D14", Offset = "0x1086D14", VA = "0x1086D14")]
	private void UpdateLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0x1086F54", Offset = "0x1086F54", VA = "0x1086F54")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x10869F8", Offset = "0x10869F8", VA = "0x10869F8")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0x1087024", Offset = "0x1087024", VA = "0x1087024")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x20000FB")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000772")]
	[Address(RVA = "0x10870C0", Offset = "0x10870C0", VA = "0x10870C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0x108722C", Offset = "0x108722C", VA = "0x108722C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0x1087418", Offset = "0x1087418", VA = "0x1087418")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x20000FC")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x6000775")]
	[Address(RVA = "0x1087420", Offset = "0x1087420", VA = "0x1087420")]
	private void Start()
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0x1087608", Offset = "0x1087608", VA = "0x1087608")]
	private void Update()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0x10877A8", Offset = "0x10877A8", VA = "0x10877A8")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x20000FD")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x20000FE")]
	[CompilerGenerated]
	private sealed class <FadeToCurrentStyle>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x17000080")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000790")]
			[Address(RVA = "0x10884C8", Offset = "0x10884C8", VA = "0x10884C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000792")]
			[Address(RVA = "0x1088510", Offset = "0x1088510", VA = "0x1088510", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x10882BC", Offset = "0x10882BC", VA = "0x10882BC")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x108843C", Offset = "0x108843C", VA = "0x108843C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x1088440", Offset = "0x1088440", VA = "0x1088440", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x10884D0", Offset = "0x10884D0", VA = "0x10884D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000FF")]
	[CompilerGenerated]
	private sealed class <FadeToDefaultPassthrough>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x17000082")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000796")]
			[Address(RVA = "0x108859C", Offset = "0x108859C", VA = "0x108859C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000083")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000798")]
			[Address(RVA = "0x10885E4", Offset = "0x10885E4", VA = "0x10885E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x10882E4", Offset = "0x10882E4", VA = "0x10882E4")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x1088518", Offset = "0x1088518", VA = "0x1088518", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x108851C", Offset = "0x108851C", VA = "0x108851C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x10885A4", Offset = "0x10885A4", VA = "0x10885A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000100")]
	[CompilerGenerated]
	private sealed class <FadeTo>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float styleValueMultiplier;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <timer>5__2;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <brightness>5__3;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <contrast>5__4;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <saturation>5__5;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <blend>5__7;

		[Token(Token = "0x17000084")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600079C")]
			[Address(RVA = "0x10887DC", Offset = "0x10887DC", VA = "0x10887DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600079E")]
			[Address(RVA = "0x1088824", Offset = "0x1088824", VA = "0x1088824", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x1088394", Offset = "0x1088394", VA = "0x1088394")]
		[DebuggerHidden]
		public <FadeTo>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x10885EC", Offset = "0x10885EC", VA = "0x10885EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x10885F0", Offset = "0x10885F0", VA = "0x10885F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x10887E4", Offset = "0x10887E4", VA = "0x10887E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000565")]
	private const float FadeDuration = 0.2f;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private OVRInput.Controller _controllerHand;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private OVRPassthroughLayer _passthroughLayer;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform _colorWheel;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Texture2D _colorTexture;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Texture2D _colorLutTexture;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private CanvasGroup _mainCanvas;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject[] _compactObjects;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject[] _objectsToHideForColorPassthrough;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 _cursorPosition;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool _settingColor;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Color _savedColor;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float _savedBrightness;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float _savedContrast;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float _savedSaturation;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private OVRPassthroughLayer.ColorMapEditorType _currentStyle;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _savedBlend;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private OVRPassthroughColorLut _passthroughColorLut;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private IEnumerator _fade;

	[Token(Token = "0x6000778")]
	[Address(RVA = "0x10877B0", Offset = "0x10877B0", VA = "0x10877B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0x1087B60", Offset = "0x1087B60", VA = "0x1087B60")]
	private void Update()
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0x1087F00", Offset = "0x1087F00", VA = "0x1087F00")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0x1087F30", Offset = "0x1087F30", VA = "0x1087F30")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0x1087F38", Offset = "0x1087F38", VA = "0x1087F38")]
	public void OnSaturationChanged(float newValue)
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0x1087F40", Offset = "0x1087F40", VA = "0x1087F40")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0x1087F74", Offset = "0x1087F74", VA = "0x1087F74")]
	public void OnBlendChange(float newValue)
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0x1087F9C", Offset = "0x1087F9C", VA = "0x1087F9C")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0x1087FA8", Offset = "0x1087FA8", VA = "0x1087FA8")]
	public void SetPassthroughStyleToColorAdjustment(bool isOn)
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0x1087FF8", Offset = "0x1087FF8", VA = "0x1087FF8")]
	public void SetPassthroughStyleToColorLut(bool isOn)
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0x1088008", Offset = "0x1088008", VA = "0x1088008")]
	private void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0x1088168", Offset = "0x1088168", VA = "0x1088168")]
	private void Release()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0x10880E4", Offset = "0x10880E4", VA = "0x10880E4")]
	[IteratorStateMachine(typeof(<FadeToCurrentStyle>d__31))]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x1088238", Offset = "0x1088238", VA = "0x1088238")]
	[IteratorStateMachine(typeof(<FadeToDefaultPassthrough>d__32))]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x108830C", Offset = "0x108830C", VA = "0x108830C")]
	[IteratorStateMachine(typeof(<FadeTo>d__33))]
	private IEnumerator FadeTo(float styleValueMultiplier, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x1087F08", Offset = "0x1087F08", VA = "0x1087F08")]
	private void UpdateBrighnessContrastSaturation()
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x1087AF8", Offset = "0x1087AF8", VA = "0x1087AF8")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x10883BC", Offset = "0x10883BC", VA = "0x10883BC")]
	private void Cursor(Vector3 cP)
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x1087B78", Offset = "0x1087B78", VA = "0x1087B78")]
	private void GetColorFromWheel()
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x1087FBC", Offset = "0x1087FBC", VA = "0x1087FBC")]
	private void SetPassthroughStyle(OVRPassthroughLayer.ColorMapEditorType passthroughStyle)
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x10883C8", Offset = "0x10883C8", VA = "0x10883C8")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x2000101")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x600079F")]
	[Address(RVA = "0x108882C", Offset = "0x108882C", VA = "0x108882C")]
	private void Start()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0x10888E0", Offset = "0x10888E0", VA = "0x10888E0")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x2000102")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0x10888E8", Offset = "0x10888E8", VA = "0x10888E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x1088954", Offset = "0x1088954", VA = "0x1088954")]
	private void Update()
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0x1088C48", Offset = "0x1088C48", VA = "0x1088C48")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x2000103")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0x1088C50", Offset = "0x1088C50", VA = "0x1088C50")]
	private void Update()
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x10890A4", Offset = "0x10890A4", VA = "0x10890A4")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x2000104")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x10890AC", Offset = "0x10890AC", VA = "0x10890AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x1089314", Offset = "0x1089314", VA = "0x1089314")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x1089360", Offset = "0x1089360", VA = "0x1089360")]
	public void Release()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x10893A0", Offset = "0x10893A0", VA = "0x10893A0")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x2000105")]
public class BouncingBallLogic : MonoBehaviour
{
	[Token(Token = "0x2000106")]
	[CompilerGenerated]
	private sealed class <PlayPopCallback>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float clipLength;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BouncingBallLogic <>4__this;

		[Token(Token = "0x17000086")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007B5")]
			[Address(RVA = "0x1089ABC", Offset = "0x1089ABC", VA = "0x1089ABC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007B7")]
			[Address(RVA = "0x1089B04", Offset = "0x1089B04", VA = "0x1089B04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x1089984", Offset = "0x1089984", VA = "0x1089984")]
		[DebuggerHidden]
		public <PlayPopCallback>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x10899C4", Offset = "0x10899C4", VA = "0x10899C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x10899C8", Offset = "0x10899C8", VA = "0x10899C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x1089AC4", Offset = "0x1089AC4", VA = "0x1089AC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float TTL;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip pop;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip bounce;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip loadball;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material visibleMat;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material hiddenMat;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioSource;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform centerEyeCamera;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isVisible;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timer;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isReleased;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool isReadyForDestroy;

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x10893A8", Offset = "0x10893A8", VA = "0x10893A8")]
	private void OnCollisionEnter()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x10893CC", Offset = "0x10893CC", VA = "0x10893CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x10894D4", Offset = "0x10894D4", VA = "0x10894D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x1089578", Offset = "0x1089578", VA = "0x1089578")]
	private void UpdateVisibility()
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x10897CC", Offset = "0x10897CC", VA = "0x10897CC")]
	private void SetVisible(bool setVisible)
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x1089870", Offset = "0x1089870", VA = "0x1089870")]
	public void Release(Vector3 pos, Vector3 vel, Vector3 angVel)
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x1089748", Offset = "0x1089748", VA = "0x1089748")]
	[IteratorStateMachine(typeof(<PlayPopCallback>d__18))]
	private IEnumerator PlayPopCallback(float clipLength)
	{
		return null;
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x10899AC", Offset = "0x10899AC", VA = "0x10899AC")]
	public BouncingBallLogic()
	{
	}
}
[Token(Token = "0x2000107")]
public class BouncingBallMgr : MonoBehaviour
{
	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform trackingspace;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject rightControllerPivot;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private OVRInput.RawButton actionBtn;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject ball;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject currentBall;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool ballGrabbed;

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x1089B0C", Offset = "0x1089B0C", VA = "0x1089B0C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x1089E1C", Offset = "0x1089E1C", VA = "0x1089E1C")]
	public BouncingBallMgr()
	{
	}
}
[Token(Token = "0x2000108")]
[DefaultExecutionOrder(30)]
[RequireComponent(typeof(OVRSceneAnchor))]
public class FurnitureSpawner : MonoBehaviour
{
	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Add a point at ceiling.")]
	public GameObject RoomLightPrefab;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Spawnable> SpawnablePrefabs;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRSceneAnchor _sceneAnchor;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OVRSemanticClassification _classification;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameObject _roomLightRef;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _frameCounter;

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x1089E24", Offset = "0x1089E24", VA = "0x1089E24")]
	private void Start()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x108A03C", Offset = "0x108A03C", VA = "0x108A03C")]
	private void SpawnSpawnable()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x108A4AC", Offset = "0x108A4AC", VA = "0x108A4AC")]
	private bool FindValidSpawnable(out Spawnable currentSpawnable)
	{
		return default(bool);
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x1089EC4", Offset = "0x1089EC4", VA = "0x1089EC4")]
	private void AddRoomLight()
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0x108A6CC", Offset = "0x108A6CC", VA = "0x108A6CC")]
	private void GetVolumeFromTopPlane(Transform plane, Vector2 dimensions, float height, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0x108ABB8", Offset = "0x108ABB8", VA = "0x108ABB8")]
	public FurnitureSpawner()
	{
	}
}
[Token(Token = "0x2000109")]
public class MyCustomSceneModelLoader : OVRSceneModelLoader
{
	[Token(Token = "0x200010A")]
	[CompilerGenerated]
	private sealed class <DelayedLoad>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MyCustomSceneModelLoader <>4__this;

		[Token(Token = "0x17000088")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007C7")]
			[Address(RVA = "0x108ADEC", Offset = "0x108ADEC", VA = "0x108ADEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007C9")]
			[Address(RVA = "0x108AE34", Offset = "0x108AE34", VA = "0x108AE34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x108AC34", Offset = "0x108AC34", VA = "0x108AC34")]
		[DebuggerHidden]
		public <DelayedLoad>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x108ACEC", Offset = "0x108ACEC", VA = "0x108ACEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x108ACF0", Offset = "0x108ACF0", VA = "0x108ACF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x108ADF4", Offset = "0x108ADF4", VA = "0x108ADF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0x108ABC0", Offset = "0x108ABC0", VA = "0x108ABC0")]
	[IteratorStateMachine(typeof(<DelayedLoad>d__0))]
	private IEnumerator DelayedLoad()
	{
		return null;
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0x108AC5C", Offset = "0x108AC5C", VA = "0x108AC5C", Slot = "4")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0x108AC7C", Offset = "0x108AC7C", VA = "0x108AC7C", Slot = "6")]
	protected override void OnNoSceneModelToLoad()
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0x108ACE4", Offset = "0x108ACE4", VA = "0x108ACE4")]
	public MyCustomSceneModelLoader()
	{
	}
}
[Token(Token = "0x200010B")]
[RequireComponent(typeof(OVRManager))]
public class PassthroughPlayInEditor : MonoBehaviour
{
	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x108AE3C", Offset = "0x108AE3C", VA = "0x108AE3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0x108AE40", Offset = "0x108AE40", VA = "0x108AE40")]
	public PassthroughPlayInEditor()
	{
	}
}
[Token(Token = "0x200010C")]
public class RequestCaptureFlow : MonoBehaviour
{
	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Button RequestCaptureBtn;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRSceneManager _sceneManager;

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x108AE48", Offset = "0x108AE48", VA = "0x108AE48")]
	private void Start()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x108AEC0", Offset = "0x108AEC0", VA = "0x108AEC0")]
	private void Update()
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x108AF44", Offset = "0x108AF44", VA = "0x108AF44")]
	public RequestCaptureFlow()
	{
	}
}
[Token(Token = "0x200010D")]
[ExecuteInEditMode]
public class SimpleResizable : MonoBehaviour
{
	[Token(Token = "0x200010E")]
	public enum Method
	{
		[Token(Token = "0x40005C4")]
		Adapt,
		[Token(Token = "0x40005C5")]
		AdaptWithAsymmetricalPadding,
		[Token(Token = "0x40005C6")]
		Scale,
		[Token(Token = "0x40005C7")]
		None
	}

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Space(15f)]
	public Method ScalingX;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 0.5f)]
	public float PaddingX;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(-0.5f, 0f)]
	public float PaddingXMax;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space(15f)]
	public Method ScalingY;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 0.5f)]
	public float PaddingY;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(-0.5f, 0f)]
	public float PaddingYMax;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space(15f)]
	public Method ScalingZ;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 0.5f)]
	public float PaddingZ;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(-0.5f, 0f)]
	public float PaddingZMax;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Bounds _bounds;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform _pivotTransform;

	[Token(Token = "0x1700008A")]
	public Vector3 PivotPosition
	{
		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x108AF54", Offset = "0x108AF54", VA = "0x108AF54")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700008B")]
	public Vector3 NewSize
	{
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x108AF70", Offset = "0x108AF70", VA = "0x108AF70")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x108AF7C", Offset = "0x108AF7C", VA = "0x108AF7C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700008C")]
	public Vector3 DefaultSize
	{
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x108AF88", Offset = "0x108AF88", VA = "0x108AF88")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x108AF94", Offset = "0x108AF94", VA = "0x108AF94")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700008D")]
	public Mesh Mesh
	{
		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x108AFA0", Offset = "0x108AFA0", VA = "0x108AFA0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x108AFA8", Offset = "0x108AFA8", VA = "0x108AFA8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x108AFB0", Offset = "0x108AFB0", VA = "0x108AFB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x108B0EC", Offset = "0x108B0EC", VA = "0x108B0EC")]
	public SimpleResizable()
	{
	}
}
[Token(Token = "0x200010F")]
public class SimpleResizer
{
	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x108A824", Offset = "0x108A824", VA = "0x108A824")]
	public void CreateResizedObject(Vector3 newSize, GameObject parent, SimpleResizable sourcePrefab)
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x108B0F4", Offset = "0x108B0F4", VA = "0x108B0F4")]
	private Mesh ProcessVertices(SimpleResizable resizable, Vector3 newSize)
	{
		return null;
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x108B378", Offset = "0x108B378", VA = "0x108B378")]
	private float CalculateNewVertexPosition(SimpleResizable.Method resizeMethod, float currentPosition, float currentSize, float newSize, float padding, float paddingMax, float pivot)
	{
		return default(float);
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x108A81C", Offset = "0x108A81C", VA = "0x108A81C")]
	public SimpleResizer()
	{
	}
}
[Serializable]
[Token(Token = "0x2000110")]
public class Spawnable : ISerializationCallbackReceiver
{
	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SimpleResizable ResizablePrefab;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ClassificationLabel;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int _editorClassificationIndex;

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x108B420", Offset = "0x108B420", VA = "0x108B420", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x108B424", Offset = "0x108B424", VA = "0x108B424", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x108B88C", Offset = "0x108B88C", VA = "0x108B88C")]
	public Spawnable()
	{
	}
}
[Token(Token = "0x2000111")]
[RequireComponent(typeof(OVRSceneAnchor))]
public class VolumeAndPlaneSwitcher : MonoBehaviour
{
	[Token(Token = "0x2000112")]
	public enum GeometryType
	{
		[Token(Token = "0x40005CF")]
		Plane,
		[Token(Token = "0x40005D0")]
		Volume
	}

	[Serializable]
	[Token(Token = "0x2000113")]
	public struct LabelGeometryPair
	{
		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string label;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GeometryType desiredGeometryType;
	}

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSceneAnchor planePrefab;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRSceneAnchor volumePrefab;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<LabelGeometryPair> desiredSwitches;

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x108B8E4", Offset = "0x108B8E4", VA = "0x108B8E4")]
	private void ReplaceAnchor(OVRSceneAnchor prefab, Vector3 position, Quaternion rotation, Vector3 localScale)
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x108BD10", Offset = "0x108BD10", VA = "0x108BD10")]
	private void Start()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x108C648", Offset = "0x108C648", VA = "0x108C648")]
	private void GetVolumeFromTopPlane(Transform plane, Vector2 dimensions, float height, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0x108C520", Offset = "0x108C520", VA = "0x108C520")]
	private void GetTopPlaneFromVolume(Transform volume, Vector3 dimensions, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0x108C6C8", Offset = "0x108C6C8", VA = "0x108C6C8")]
	public VolumeAndPlaneSwitcher()
	{
	}
}
[Token(Token = "0x2000114")]
[RequireComponent(typeof(OVRSpatialAnchor))]
public class Anchor : MonoBehaviour
{
	[Token(Token = "0x2000115")]
	[CompilerGenerated]
	private sealed class <Start>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Anchor <>4__this;

		[Token(Token = "0x1700008F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007F8")]
			[Address(RVA = "0x108D490", Offset = "0x108D490", VA = "0x108D490", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007FA")]
			[Address(RVA = "0x108D4D8", Offset = "0x108D4D8", VA = "0x108D4D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x108C8C4", Offset = "0x108C8C4", VA = "0x108C8C4")]
		[DebuggerHidden]
		public <Start>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x108D314", Offset = "0x108D314", VA = "0x108D314", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x108D318", Offset = "0x108D318", VA = "0x108D318", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x108D498", Offset = "0x108D498", VA = "0x108D498", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005D3")]
	public const string NumUuidsPlayerPref = "numUuids";

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("canvas_")]
	[SerializeField]
	private Canvas _canvas;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[FormerlySerializedAs("pivot_")]
	private Transform _pivot;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[FormerlySerializedAs("anchorMenu_")]
	private GameObject _anchorMenu;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _isSelected;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool _isHovered;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[FormerlySerializedAs("anchorName_")]
	[SerializeField]
	private TextMeshProUGUI _anchorName;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[FormerlySerializedAs("saveIcon_")]
	private GameObject _saveIcon;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[FormerlySerializedAs("labelImage_")]
	[SerializeField]
	private Image _labelImage;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("labelBaseColor_")]
	[SerializeField]
	private Color _labelBaseColor;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[FormerlySerializedAs("labelHighlightColor_")]
	private Color _labelHighlightColor;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[FormerlySerializedAs("labelSelectedColor_")]
	[SerializeField]
	private Color _labelSelectedColor;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[FormerlySerializedAs("uiManager_")]
	private AnchorUIManager _uiManager;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[FormerlySerializedAs("renderers_")]
	private MeshRenderer[] _renderers;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int _menuIndex;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[FormerlySerializedAs("buttonList_")]
	[SerializeField]
	private List<UnityEngine.UI.Button> _buttonList;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UnityEngine.UI.Button _selectedButton;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private OVRSpatialAnchor _spatialAnchor;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameObject _icon;

	[Token(Token = "0x1700008E")]
	public bool ShowSaveIcon
	{
		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x108CD70", Offset = "0x108CD70", VA = "0x108CD70")]
		set
		{
		}
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0x108C6D0", Offset = "0x108C6D0", VA = "0x108C6D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0x108C850", Offset = "0x108C850", VA = "0x108C850")]
	[IteratorStateMachine(typeof(<Start>d__20))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0x108C8EC", Offset = "0x108C8EC", VA = "0x108C8EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x108CB64", Offset = "0x108CB64", VA = "0x108CB64")]
	public void OnSaveLocalButtonPressed()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x108CC34", Offset = "0x108CC34", VA = "0x108CC34")]
	public void OnHideButtonPressed()
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x108CCA0", Offset = "0x108CCA0", VA = "0x108CCA0")]
	public void OnEraseButtonPressed()
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x108CD90", Offset = "0x108CD90", VA = "0x108CD90")]
	public void OnHoverStart()
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x108CEAC", Offset = "0x108CEAC", VA = "0x108CEAC")]
	public void OnHoverEnd()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x108CFB4", Offset = "0x108CFB4", VA = "0x108CFB4")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x108C93C", Offset = "0x108C93C", VA = "0x108C93C")]
	private void BillboardPanel(Transform panel)
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x108CA70", Offset = "0x108CA70", VA = "0x108CA70")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x108D084", Offset = "0x108D084", VA = "0x108D084")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x108D1BC", Offset = "0x108D1BC", VA = "0x108D1BC")]
	public Anchor()
	{
	}
}
[Token(Token = "0x2000116")]
[RequireComponent(typeof(SpatialAnchorLoader))]
public class AnchorUIManager : MonoBehaviour
{
	[Token(Token = "0x2000117")]
	public enum AnchorMode
	{
		[Token(Token = "0x40005FC")]
		Create,
		[Token(Token = "0x40005FD")]
		Select
	}

	[Token(Token = "0x2000118")]
	private delegate void PrimaryPressDelegate();

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorUIManager Instance;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("createModeButton_")]
	[SerializeField]
	private GameObject _createModeButton;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[FormerlySerializedAs("selectModeButton_")]
	[SerializeField]
	private GameObject _selectModeButton;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[FormerlySerializedAs("trackedDevice_")]
	[SerializeField]
	private Transform _trackedDevice;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _raycastOrigin;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _drawRaycast;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FormerlySerializedAs("lineRenderer_")]
	[SerializeField]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Anchor _hoveredAnchor;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Anchor _selectedAnchor;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnchorMode _mode;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[FormerlySerializedAs("buttonList_")]
	private List<UnityEngine.UI.Button> _buttonList;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _menuIndex;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private UnityEngine.UI.Button _selectedButton;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Anchor _anchorPrefab;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[FormerlySerializedAs("placementPreview_")]
	[SerializeField]
	private GameObject _placementPreview;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[FormerlySerializedAs("anchorPlacementTransform_")]
	private Transform _anchorPlacementTransform;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PrimaryPressDelegate _primaryPressDelegate;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool _isFocused;

	[Token(Token = "0x17000091")]
	public Anchor AnchorPrefab
	{
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x108D4E0", Offset = "0x108D4E0", VA = "0x108D4E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x108D4E8", Offset = "0x108D4E8", VA = "0x108D4E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x108D5B4", Offset = "0x108D5B4", VA = "0x108D5B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x108D704", Offset = "0x108D704", VA = "0x108D704")]
	private void Update()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x108DB74", Offset = "0x108DB74", VA = "0x108DB74")]
	public void OnCreateModeButtonPressed()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x108DBE0", Offset = "0x108DBE0", VA = "0x108DBE0")]
	public void OnLoadAnchorsButtonPressed()
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x108D69C", Offset = "0x108D69C", VA = "0x108D69C")]
	private void ToggleCreateMode()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x108DE60", Offset = "0x108DE60", VA = "0x108DE60")]
	private void StartPlacementMode()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x108DEE8", Offset = "0x108DEE8", VA = "0x108DEE8")]
	private void EndPlacementMode()
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x108DF08", Offset = "0x108DF08", VA = "0x108DF08")]
	private void StartSelectMode()
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x108DE40", Offset = "0x108DE40", VA = "0x108DE40")]
	private void EndSelectMode()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x108DA80", Offset = "0x108DA80", VA = "0x108DA80")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x108E108", Offset = "0x108E108", VA = "0x108E108")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x108DF90", Offset = "0x108DF90", VA = "0x108DF90")]
	private void ShowAnchorPreview()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x108E07C", Offset = "0x108E07C", VA = "0x108E07C")]
	private void HideAnchorPreview()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x108E208", Offset = "0x108E208", VA = "0x108E208")]
	private void PlaceAnchor()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x108E09C", Offset = "0x108E09C", VA = "0x108E09C")]
	private void ShowRaycastLine()
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0x108E0D4", Offset = "0x108E0D4", VA = "0x108E0D4")]
	private void HideRaycastLine()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x108D804", Offset = "0x108D804", VA = "0x108D804")]
	private void ControllerRaycast()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x108E2F4", Offset = "0x108E2F4", VA = "0x108E2F4")]
	private void HoverAnchor(Anchor anchor)
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x108E31C", Offset = "0x108E31C", VA = "0x108E31C")]
	private void UnhoverAnchor()
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x108E3AC", Offset = "0x108E3AC", VA = "0x108E3AC")]
	private void SelectAnchor()
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0x108E4F4", Offset = "0x108E4F4", VA = "0x108E4F4")]
	public AnchorUIManager()
	{
	}
}
[Token(Token = "0x2000119")]
public class SpatialAnchorLoader : MonoBehaviour
{
	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private OVRSpatialAnchor _anchorPrefab;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action<OVRSpatialAnchor.UnboundAnchor, bool> _onLoadAnchor;

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x108DC34", Offset = "0x108DC34", VA = "0x108DC34")]
	public void LoadAnchorsByUuid()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0x108E6B0", Offset = "0x108E6B0", VA = "0x108E6B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0x108E5D0", Offset = "0x108E5D0", VA = "0x108E5D0")]
	private void Load(OVRSpatialAnchor.LoadOptions options)
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0x108E734", Offset = "0x108E734", VA = "0x108E734")]
	private void OnLocalized(OVRSpatialAnchor.UnboundAnchor unboundAnchor, bool success)
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0x108E544", Offset = "0x108E544", VA = "0x108E544")]
	private static void Log(string message)
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0x108E8E4", Offset = "0x108E8E4", VA = "0x108E8E4")]
	public SpatialAnchorLoader()
	{
	}
}
[Token(Token = "0x200011A")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x108EA1C", Offset = "0x108EA1C", VA = "0x108EA1C")]
	private void Start()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x108EC30", Offset = "0x108EC30", VA = "0x108EC30")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x108ED34", Offset = "0x108ED34", VA = "0x108ED34")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x200011C")]
public class LocalizedHaptics : MonoBehaviour
{
	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x6000822")]
	[Address(RVA = "0x108ED58", Offset = "0x108ED58", VA = "0x108ED58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0x108ED80", Offset = "0x108ED80", VA = "0x108ED80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0x108EEBC", Offset = "0x108EEBC", VA = "0x108EEBC")]
	public LocalizedHaptics()
	{
	}
}
[Token(Token = "0x200011D")]
public class SceneSettings : MonoBehaviour
{
	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Time")]
	private float m_fixedTimeStep;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Header("Physics")]
	private float m_gravityScalar;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_defaultContactOffset;

	[Token(Token = "0x6000825")]
	[Address(RVA = "0x108EECC", Offset = "0x108EECC", VA = "0x108EECC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0x108EF64", Offset = "0x108EF64", VA = "0x108EF64")]
	private void Start()
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0x108EF6C", Offset = "0x108EF6C", VA = "0x108EF6C")]
	private static void CollidersSetContactOffset(float contactOffset)
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x108F030", Offset = "0x108F030", VA = "0x108F030")]
	public SceneSettings()
	{
	}
}
[Token(Token = "0x200011E")]
public class StylusTip : MonoBehaviour
{
	[Token(Token = "0x400060A")]
	private const int MaxBreadCrumbs = 60;

	[Token(Token = "0x400060B")]
	private const float BreadCrumbMinSize = 0.005f;

	[Token(Token = "0x400060C")]
	private const float BreadCrumbMaxSize = 0.02f;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("External")]
	[SerializeField]
	private Transform m_trackingSpace;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Settings")]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_breadCrumbPf;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject m_breadCrumbContainer;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject[] m_breadCrumbs;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_breadCrumbIndexPrev;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int m_breadCrumbIndexCurr;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x108F050", Offset = "0x108F050", VA = "0x108F050")]
	private void Awake()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x108F2D0", Offset = "0x108F2D0", VA = "0x108F2D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x108F700", Offset = "0x108F700", VA = "0x108F700")]
	private static Pose GetT_Device_StylusTip(OVRInput.Controller controller)
	{
		return default(Pose);
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x108F82C", Offset = "0x108F82C", VA = "0x108F82C")]
	public StylusTip()
	{
	}
}
[Token(Token = "0x200011F")]
public class UiAxis1dInspector : MonoBehaviour
{
	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private float m_minExtent;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float m_maxExtent;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEngine.UI.Slider m_slider;

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x108F844", Offset = "0x108F844", VA = "0x108F844")]
	public void SetExtents(float minExtent, float maxExtent)
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x108F84C", Offset = "0x108F84C", VA = "0x108F84C")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x108F870", Offset = "0x108F870", VA = "0x108F870")]
	public void SetValue(float value)
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x108F974", Offset = "0x108F974", VA = "0x108F974")]
	public UiAxis1dInspector()
	{
	}
}
[Token(Token = "0x2000120")]
public class UiAxis2dInspector : MonoBehaviour
{
	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Settings")]
	private Vector2 m_xExtent;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector2 m_yExtent;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image m_handle;

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x108F984", Offset = "0x108F984", VA = "0x108F984")]
	public void SetExtents(Vector2 xExtent, Vector2 yExtent)
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x108F990", Offset = "0x108F990", VA = "0x108F990")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x108F9B4", Offset = "0x108F9B4", VA = "0x108F9B4")]
	public void SetValue(bool isTouching, Vector2 value)
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x108FD7C", Offset = "0x108FD7C", VA = "0x108FD7C")]
	public UiAxis2dInspector()
	{
	}
}
[Token(Token = "0x2000121")]
public class UiBoolInspector : MonoBehaviour
{
	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Components")]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Toggle m_toggle;

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x108FD90", Offset = "0x108FD90", VA = "0x108FD90")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x108FDB4", Offset = "0x108FDB4", VA = "0x108FDB4")]
	public void SetValue(bool value)
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x108FDD4", Offset = "0x108FDD4", VA = "0x108FDD4")]
	public UiBoolInspector()
	{
	}
}
[Token(Token = "0x2000122")]
public class UiDeviceInspector : MonoBehaviour
{
	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Left Column Components")]
	[SerializeField]
	private TextMeshProUGUI m_title;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_status;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UiBoolInspector m_thumbRestTouch;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UiAxis1dInspector m_thumbRestForce;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UiAxis1dInspector m_indexTrigger;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UiAxis1dInspector m_gripTrigger;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UiAxis1dInspector m_stylusTipForce;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UiAxis1dInspector m_indexCurl1d;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UiAxis1dInspector m_indexSlider1d;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Header("Right Column Components")]
	private UiBoolInspector m_ax;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private UiBoolInspector m_axTouch;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private UiBoolInspector m_by;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private UiBoolInspector m_byTouch;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private UiBoolInspector m_indexTouch;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private UiAxis2dInspector m_thumbstick;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x108FDDC", Offset = "0x108FDDC", VA = "0x108FDDC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x108FE04", Offset = "0x108FE04", VA = "0x108FE04")]
	private void Update()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x109038C", Offset = "0x109038C", VA = "0x109038C")]
	private static string ToDeviceModel()
	{
		return null;
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x10903CC", Offset = "0x10903CC", VA = "0x10903CC")]
	private static string ToHandednessString(OVRInput.Handedness handedness)
	{
		return null;
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x1090450", Offset = "0x1090450", VA = "0x1090450")]
	public UiDeviceInspector()
	{
	}
}
[Token(Token = "0x2000123")]
public class UiSceneMenu : MonoBehaviour
{
	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Settings")]
	private VerticalLayoutGroup m_layoutGroup;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_labelPf;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector2 s_lastThumbstickL;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Vector2 s_lastThumbstickR;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Scene m_activeScene;

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x1090460", Offset = "0x1090460", VA = "0x1090460")]
	private void Awake()
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x109072C", Offset = "0x109072C", VA = "0x109072C")]
	private void Update()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x1090844", Offset = "0x1090844", VA = "0x1090844")]
	private bool InputPrevScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x10908E0", Offset = "0x10908E0", VA = "0x10908E0")]
	private bool InputNextScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0x1090924", Offset = "0x1090924", VA = "0x1090924")]
	private bool KeyboardPrevScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0x10909C0", Offset = "0x10909C0", VA = "0x10909C0")]
	private bool KeyboardNextScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0x1090930", Offset = "0x1090930", VA = "0x1090930")]
	private bool ThumbstickPrevScene(OVRInput.Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0x10909CC", Offset = "0x10909CC", VA = "0x10909CC")]
	private bool ThumbstickNextScene(OVRInput.Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0x1090A5C", Offset = "0x1090A5C", VA = "0x1090A5C")]
	private Vector2 GetLastThumbstickValue(OVRInput.Controller controller)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x1090888", Offset = "0x1090888", VA = "0x1090888")]
	private void ChangeScene(int nextScene)
	{
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0x1090504", Offset = "0x1090504", VA = "0x1090504")]
	private void CreateLabel(int sceneIndex, string scenePath)
	{
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0x1090AC4", Offset = "0x1090AC4", VA = "0x1090AC4")]
	public UiSceneMenu()
	{
	}
}
[Token(Token = "0x2000124")]
public class UiVectorInspector : MonoBehaviour
{
	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x6000849")]
	[Address(RVA = "0x1090ACC", Offset = "0x1090ACC", VA = "0x1090ACC")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0x1090AF0", Offset = "0x1090AF0", VA = "0x1090AF0")]
	public void SetValue(bool value)
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0x1090BA0", Offset = "0x1090BA0", VA = "0x1090BA0")]
	public UiVectorInspector()
	{
	}
}
[Token(Token = "0x2000125")]
public class LightFlicker : MonoBehaviour
{
	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MinLightIntensity;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MaxLightIntensity;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float AccelerateTime;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float _targetIntensity;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _lastIntensity;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _timePassed;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light _lt;

	[Token(Token = "0x4000640")]
	private const double Tolerance = 0.0001;

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x1090BA8", Offset = "0x1090BA8", VA = "0x1090BA8")]
	private void Start()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x1090C24", Offset = "0x1090C24", VA = "0x1090C24")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0x1090CE8", Offset = "0x1090CE8", VA = "0x1090CE8")]
	public LightFlicker()
	{
	}
}
[Token(Token = "0x2000126")]
public class LightOptimize : MonoBehaviour
{
	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float availableDistance;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float Distance;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Light Lightcomponent;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject Player;

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x1090D04", Offset = "0x1090D04", VA = "0x1090D04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x1090E44", Offset = "0x1090E44", VA = "0x1090E44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x1090F78", Offset = "0x1090F78", VA = "0x1090F78")]
	public LightOptimize()
	{
	}
}
[Token(Token = "0x2000127")]
[RequireComponent(typeof(CharacterController))]
public class SimplePlayerController : MonoBehaviour
{
	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera playerCamera;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float walkSpeed;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float runSpeed;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float lookSpeed;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float lookXLimit;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float gravity;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CharacterController characterController;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 moveDirection;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float rotationX;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canMove;

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x1090F80", Offset = "0x1090F80", VA = "0x1090F80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x1090FF0", Offset = "0x1090FF0", VA = "0x1090FF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0x10913B4", Offset = "0x10913B4", VA = "0x10913B4")]
	public SimplePlayerController()
	{
	}
}
[Token(Token = "0x2000128")]
public class NextPrefab : MonoBehaviour
{
	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_PrefabList;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_CurrentElementIndex;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_CurrentParticleIndex;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject[] m_CurrentElementList;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject m_CurrentParticle;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text m_ParticleName;

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x1091430", Offset = "0x1091430", VA = "0x1091430")]
	private void Start()
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x10915D4", Offset = "0x10915D4", VA = "0x10915D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0x109145C", Offset = "0x109145C", VA = "0x109145C")]
	private void ShowParticle()
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x1091640", Offset = "0x1091640", VA = "0x1091640")]
	public NextPrefab()
	{
	}
}
[Token(Token = "0x2000129")]
[AddComponentMenu("Camera-Control/Mouse Orbit with zoom")]
public class UserCamera : MonoBehaviour
{
	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float yOffset;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float distance;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float xSpeed;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ySpeed;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMinLimit;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float yMaxLimit;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceMin;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float distanceMax;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float x;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float y;

	[Token(Token = "0x6000859")]
	[Address(RVA = "0x1091650", Offset = "0x1091650", VA = "0x1091650")]
	private void Start()
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x109167C", Offset = "0x109167C", VA = "0x109167C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x1091974", Offset = "0x1091974", VA = "0x1091974")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x10919B0", Offset = "0x10919B0", VA = "0x10919B0")]
	public UserCamera()
	{
	}
}
[Token(Token = "0x200012A")]
public class Scanner : MonoBehaviour
{
	[Token(Token = "0x600085D")]
	[Address(RVA = "0x10919CC", Offset = "0x10919CC", VA = "0x10919CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x10919D0", Offset = "0x10919D0", VA = "0x10919D0")]
	public Scanner()
	{
	}
}
[Token(Token = "0x200012B")]
public class AddStringsToList : MonoBehaviour
{
	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool addSTRING;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string str;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool removeSTring;

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x10919D8", Offset = "0x10919D8", VA = "0x10919D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x1091D6C", Offset = "0x1091D6C", VA = "0x1091D6C")]
	public AddStringsToList()
	{
	}
}
[Token(Token = "0x200012C")]
public class AiAttackManager : MonoBehaviour
{
	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AICharacterControl aiCharacterControl;

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x1091DC4", Offset = "0x1091DC4", VA = "0x1091DC4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x1091E1C", Offset = "0x1091E1C", VA = "0x1091E1C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x1091F18", Offset = "0x1091F18", VA = "0x1091F18")]
	public AiAttackManager()
	{
	}
}
[Token(Token = "0x200012D")]
[RequireComponent(typeof(ThirdPersonCharacter))]
[RequireComponent(typeof(NavMeshAgent))]
public class AICharacterControl : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x200012E")]
	[CompilerGenerated]
	private sealed class <TimeCount>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float val;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AICharacterControl <>4__this;

		[Token(Token = "0x17000093")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600088F")]
			[Address(RVA = "0x1094DC0", Offset = "0x1094DC0", VA = "0x1094DC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0x1094E08", Offset = "0x1094E08", VA = "0x1094E08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x1093964", Offset = "0x1093964", VA = "0x1093964")]
		[DebuggerHidden]
		public <TimeCount>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x1094D14", Offset = "0x1094D14", VA = "0x1094D14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x1094D18", Offset = "0x1094D18", VA = "0x1094D18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x1094DC8", Offset = "0x1094DC8", VA = "0x1094DC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012F")]
	[CompilerGenerated]
	private sealed class <Hurt>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AICharacterControl <>4__this;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float val;

		[Token(Token = "0x17000095")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000895")]
			[Address(RVA = "0x1095034", Offset = "0x1095034", VA = "0x1095034", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000897")]
			[Address(RVA = "0x109507C", Offset = "0x109507C", VA = "0x109507C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x109398C", Offset = "0x109398C", VA = "0x109398C")]
		[DebuggerHidden]
		public <Hurt>d__57(int <>1__state)
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x1094E10", Offset = "0x1094E10", VA = "0x1094E10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x1094E14", Offset = "0x1094E14", VA = "0x1094E14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x109503C", Offset = "0x109503C", VA = "0x109503C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000130")]
	[CompilerGenerated]
	private sealed class <Death>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AICharacterControl <>4__this;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float val;

		[Token(Token = "0x17000097")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600089B")]
			[Address(RVA = "0x10953AC", Offset = "0x10953AC", VA = "0x10953AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600089D")]
			[Address(RVA = "0x10953F4", Offset = "0x10953F4", VA = "0x10953F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x10939B4", Offset = "0x10939B4", VA = "0x10939B4")]
		[DebuggerHidden]
		public <Death>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x1095084", Offset = "0x1095084", VA = "0x1095084", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x1095088", Offset = "0x1095088", VA = "0x1095088", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x10953B4", Offset = "0x10953B4", VA = "0x10953B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000131")]
	[CompilerGenerated]
	private sealed class <PlayScareAudio>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AICharacterControl <>4__this;

		[Token(Token = "0x17000099")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008A1")]
			[Address(RVA = "0x10954C8", Offset = "0x10954C8", VA = "0x10954C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008A3")]
			[Address(RVA = "0x1095510", Offset = "0x1095510", VA = "0x1095510", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x1094150", Offset = "0x1094150", VA = "0x1094150")]
		[DebuggerHidden]
		public <PlayScareAudio>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x10953FC", Offset = "0x10953FC", VA = "0x10953FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x1095400", Offset = "0x1095400", VA = "0x1095400", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x10954D0", Offset = "0x10954D0", VA = "0x10954D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000132")]
	[CompilerGenerated]
	private sealed class <FollowForSeconds>d__69 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AICharacterControl <>4__this;

		[Token(Token = "0x1700009B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008A7")]
			[Address(RVA = "0x1095648", Offset = "0x1095648", VA = "0x1095648", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008A9")]
			[Address(RVA = "0x1095690", Offset = "0x1095690", VA = "0x1095690", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x10949BC", Offset = "0x10949BC", VA = "0x10949BC")]
		[DebuggerHidden]
		public <FollowForSeconds>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x1095518", Offset = "0x1095518", VA = "0x1095518", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x109551C", Offset = "0x109551C", VA = "0x109551C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x1095650", Offset = "0x1095650", VA = "0x1095650", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3 CurDestination;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool _isAttacking;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int viewID;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform[] WayPoints;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int destPoint;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private NavMeshAgent agent;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform CurTarget;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private SyncPlayer _syncPlayer;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	public string targetTag;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float fieldOfView;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int searchDistance;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int maxDistancePlayerCanApproach;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	public bool Follows;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float followForDuration;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	private float CurTargetDistance;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private bool CanNotAttack;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Coroutine followcoroutine;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public LayerMask searchMask;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public LayerMask PlayerMask;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private bool canSwitchTarget;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	public bool _isHurt;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public AudioSource SwingAudioSrc;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Coroutine FollowRoutine;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public AudioSource hurtAudio;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public AudioSource detectedAudio;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public AudioClip[] clips;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Coroutine scareAudioRoutine;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[SerializeField]
	private float patrolSpeed;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ReferenceHolder holder;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Coroutine _deathRoutine;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Coroutine _countDownRoutine;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float remainingTimeA;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private SmoothSyncPUN2 _smoothSync;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Transform eye;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public bool updateAIRotation;

	[Token(Token = "0x17000092")]
	public ThirdPersonCharacter character
	{
		[Token(Token = "0x6000864")]
		[Address(RVA = "0x1091F20", Offset = "0x1091F20", VA = "0x1091F20")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000865")]
		[Address(RVA = "0x1091F28", Offset = "0x1091F28", VA = "0x1091F28")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x1091F30", Offset = "0x1091F30", VA = "0x1091F30")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x109208C", Offset = "0x109208C", VA = "0x109208C")]
	private void AssignWayPoints()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x10920F4", Offset = "0x10920F4", VA = "0x10920F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x109258C", Offset = "0x109258C", VA = "0x109258C")]
	public void SetTargetDestination(Vector3 targetPos)
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x1092730", Offset = "0x1092730", VA = "0x1092730")]
	private void SpawnTrap()
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x1092734", Offset = "0x1092734", VA = "0x1092734")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x1092D1C", Offset = "0x1092D1C", VA = "0x1092D1C", Slot = "32")]
	public override void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0x1092F74", Offset = "0x1092F74", VA = "0x1092F74")]
	public void Die()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x1093068", Offset = "0x1093068", VA = "0x1093068", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x1093238", Offset = "0x1093238", VA = "0x1093238")]
	public void TakeDamage()
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x109332C", Offset = "0x109332C", VA = "0x109332C")]
	public void TakeHit()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x10935D0", Offset = "0x10935D0", VA = "0x10935D0")]
	[PunRPC]
	private void RPC_SyncAI(float t, int no)
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0x109372C", Offset = "0x109372C", VA = "0x109372C")]
	[PunRPC]
	private void RPC_SetDestination(Vector3 pos)
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x1093738", Offset = "0x1093738", VA = "0x1093738")]
	[PunRPC]
	private void RPC_damage()
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0x1093824", Offset = "0x1093824", VA = "0x1093824")]
	[PunRPC]
	private void RPC_die()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x10938E0", Offset = "0x10938E0", VA = "0x10938E0")]
	[IteratorStateMachine(typeof(<TimeCount>d__56))]
	private IEnumerator TimeCount(float val)
	{
		return null;
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x10937A0", Offset = "0x10937A0", VA = "0x10937A0")]
	[IteratorStateMachine(typeof(<Hurt>d__57))]
	private IEnumerator Hurt(float val)
	{
		return null;
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x10936A8", Offset = "0x10936A8", VA = "0x10936A8")]
	[IteratorStateMachine(typeof(<Death>d__58))]
	private IEnumerator Death(float val)
	{
		return null;
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x10939DC", Offset = "0x10939DC", VA = "0x10939DC")]
	private void GetTarget(Transform otherTarget)
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x1093360", Offset = "0x1093360", VA = "0x1093360")]
	private void ChaseOnHit()
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0x1092B00", Offset = "0x1092B00", VA = "0x1092B00")]
	private void SearchForEnemies()
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0x1093C40", Offset = "0x1093C40", VA = "0x1093C40")]
	private void CheckAndSetTarget(Vector3 direction, int distance)
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0x1093EB8", Offset = "0x1093EB8", VA = "0x1093EB8")]
	private void FollowTarget(Transform target, SyncPlayer syncPlayer)
	{
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0x10940DC", Offset = "0x10940DC", VA = "0x10940DC")]
	[IteratorStateMachine(typeof(<PlayScareAudio>d__64))]
	private IEnumerator PlayScareAudio(int index)
	{
		return null;
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0x1094178", Offset = "0x1094178", VA = "0x1094178")]
	[PunRPC]
	private void RPC_PlayScareAudio(int index)
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0x1093DA8", Offset = "0x1093DA8", VA = "0x1093DA8")]
	private Transform GetClosestEnemy(Collider[] enemies, Transform fromThis)
	{
		return null;
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0x10941DC", Offset = "0x10941DC", VA = "0x10941DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0x109458C", Offset = "0x109458C", VA = "0x109458C")]
	private void StopFollow()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0x1094068", Offset = "0x1094068", VA = "0x1094068")]
	[IteratorStateMachine(typeof(<FollowForSeconds>d__69))]
	private IEnumerator FollowForSeconds()
	{
		return null;
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x109484C", Offset = "0x109484C", VA = "0x109484C")]
	private void GotoNextPoint()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x1094748", Offset = "0x1094748", VA = "0x1094748")]
	private void Attack()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x10949E4", Offset = "0x10949E4", VA = "0x10949E4")]
	[PunRPC]
	private void RPC_Bat()
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0x1094AD4", Offset = "0x1094AD4", VA = "0x1094AD4")]
	public void AttackEvent()
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0x1092464", Offset = "0x1092464", VA = "0x1092464")]
	private void Shuffle()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x1094B8C", Offset = "0x1094B8C", VA = "0x1094B8C")]
	private void PlayMusic()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x1094B90", Offset = "0x1094B90", VA = "0x1094B90")]
	private bool CanReachPosition()
	{
		return default(bool);
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x10928C4", Offset = "0x10928C4", VA = "0x10928C4")]
	private void IsAgentOnNavMesh()
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x1094C58", Offset = "0x1094C58", VA = "0x1094C58")]
	public AICharacterControl()
	{
	}
}
[Token(Token = "0x2000133")]
public class AiInstantiater : MonoBehaviour
{
	[Token(Token = "0x2000135")]
	[CompilerGenerated]
	private sealed class <Start>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AiInstantiater <>4__this;

		[Token(Token = "0x1700009F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008BC")]
			[Address(RVA = "0x10968A0", Offset = "0x10968A0", VA = "0x10968A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008BE")]
			[Address(RVA = "0x10968E8", Offset = "0x10968E8", VA = "0x10968E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x1095900", Offset = "0x1095900", VA = "0x1095900")]
		[DebuggerHidden]
		public <Start>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x1096580", Offset = "0x1096580", VA = "0x1096580", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x1096584", Offset = "0x1096584", VA = "0x1096584", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x10968A8", Offset = "0x10968A8", VA = "0x10968A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject AiToInstantiate;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isKitty;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Transform> WayPoints;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float waypointSearchRadius;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public LayerMask WayPointMask;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LayerMask checkPlayerVisibilityMask;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float spawnDistanceFromPlayer;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string TimeToGhostSpawn;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canStartAI;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float startTime;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float spawnTime;

	[Token(Token = "0x1700009D")]
	private bool IsItTimeYet
	{
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x1095698", Offset = "0x1095698", VA = "0x1095698")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700009E")]
	private bool IsTimeToStartKnown
	{
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x1095748", Offset = "0x1095748", VA = "0x1095748")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0x10957B4", Offset = "0x10957B4", VA = "0x10957B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0x1095870", Offset = "0x1095870", VA = "0x1095870")]
	private void Update()
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x109588C", Offset = "0x109588C", VA = "0x109588C")]
	[IteratorStateMachine(typeof(<Start>d__18))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0x1095928", Offset = "0x1095928", VA = "0x1095928")]
	private void SetGhostSpawnTime(float sec)
	{
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0x1095A34", Offset = "0x1095A34", VA = "0x1095A34")]
	public void OnAIDestroy()
	{
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0x1095A94", Offset = "0x1095A94", VA = "0x1095A94")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0x1096160", Offset = "0x1096160", VA = "0x1096160")]
	private bool CanPlayerSeeSpawn(Transform spawnPointPos, Transform playerPos)
	{
		return default(bool);
	}

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0x1096070", Offset = "0x1096070", VA = "0x1096070")]
	private bool IsItTooNearToPlayer(Transform spawnPointPos, Transform playerPos)
	{
		return default(bool);
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0x1095F10", Offset = "0x1095F10", VA = "0x1095F10")]
	private bool CheckGhostConditionsForSpawn()
	{
		return default(bool);
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0x10963CC", Offset = "0x10963CC", VA = "0x10963CC")]
	public AiInstantiater()
	{
	}
}
[Token(Token = "0x2000136")]
public class AIManager : MonoBehaviour
{
	[Token(Token = "0x2000137")]
	public enum AIType
	{
		[Token(Token = "0x40006B2")]
		Bacteria,
		[Token(Token = "0x40006B3")]
		PartyGoer,
		[Token(Token = "0x40006B4")]
		SkinStealer,
		[Token(Token = "0x40006B5")]
		Kitty,
		[Token(Token = "0x40006B6")]
		Floaty
	}

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool enableCustomSpeed;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float patrolSpeed;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float chaseSpeed;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public AIType ai;

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0x10922DC", Offset = "0x10922DC", VA = "0x10922DC")]
	public float GetPatrolSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0x10923A0", Offset = "0x10923A0", VA = "0x10923A0")]
	public float GetChaseSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x10968F0", Offset = "0x10968F0", VA = "0x10968F0")]
	public AIManager()
	{
	}
}
[Token(Token = "0x2000138")]
public class AiTriggerInstantiate : MonoBehaviour, IOnEventCallback
{
	[Token(Token = "0x200013A")]
	[CompilerGenerated]
	private sealed class <Start>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AiTriggerInstantiate <>4__this;

		[Token(Token = "0x170000A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008D1")]
			[Address(RVA = "0x1097504", Offset = "0x1097504", VA = "0x1097504", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008D3")]
			[Address(RVA = "0x109754C", Offset = "0x109754C", VA = "0x109754C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x10972C4", Offset = "0x10972C4", VA = "0x10972C4")]
		[DebuggerHidden]
		public <Start>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x10972EC", Offset = "0x10972EC", VA = "0x10972EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x10972F0", Offset = "0x10972F0", VA = "0x10972F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x109750C", Offset = "0x109750C", VA = "0x109750C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("gameObjectToInstantiate")]
	public List<GameObject> gameObjectsToInstantiate;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Transform> spawnPoints;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string tagName;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool instantiateOnTrigger;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool destroyAfterInstantiating;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform instantiateAtPos;

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x10968F8", Offset = "0x10968F8", VA = "0x10968F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x1096950", Offset = "0x1096950", VA = "0x1096950")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x10969A8", Offset = "0x10969A8", VA = "0x10969A8")]
	[IteratorStateMachine(typeof(<Start>d__8))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x1096A1C", Offset = "0x1096A1C", VA = "0x1096A1C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x1096C10", Offset = "0x1096C10", VA = "0x1096C10")]
	private Transform RandomSpawnPoint(List<Transform> SpawnList)
	{
		return null;
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x1096A58", Offset = "0x1096A58", VA = "0x1096A58")]
	private void InstantiateObj()
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x1096CC0", Offset = "0x1096CC0", VA = "0x1096CC0")]
	private void RPC_InstantiateAI()
	{
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0x10970AC", Offset = "0x10970AC", VA = "0x10970AC", Slot = "4")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x10970D4", Offset = "0x10970D4", VA = "0x10970D4")]
	public AiTriggerInstantiate()
	{
	}
}
[Token(Token = "0x200013B")]
public class AppEntitlementCheck : MonoBehaviour
{
	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string appID;

	[Token(Token = "0x14000010")]
	public static event Action OnUserNameReceived
	{
		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x1097554", Offset = "0x1097554", VA = "0x1097554")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x109760C", Offset = "0x109760C", VA = "0x109760C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x10976C4", Offset = "0x10976C4", VA = "0x10976C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x10978E8", Offset = "0x10978E8", VA = "0x10978E8")]
	private void EntitlementCallback(Message msg)
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x1097A54", Offset = "0x1097A54", VA = "0x1097A54")]
	private void OnReportButtonIntentNotif(Message<string> message)
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0x1097A88", Offset = "0x1097A88", VA = "0x1097A88")]
	private void GetLoggedInUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x1097C5C", Offset = "0x1097C5C", VA = "0x1097C5C")]
	public AppEntitlementCheck()
	{
	}
}
[Token(Token = "0x200013C")]
public class AuthManager : Singleton<AuthManager>
{
	[Token(Token = "0x200013D")]
	[CompilerGenerated]
	private sealed class <StartLoginCoroutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AuthManager <>4__this;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string val;

		[Token(Token = "0x170000A3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008EB")]
			[Address(RVA = "0x1098554", Offset = "0x1098554", VA = "0x1098554", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008ED")]
			[Address(RVA = "0x109859C", Offset = "0x109859C", VA = "0x109859C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x1097EF4", Offset = "0x1097EF4", VA = "0x1097EF4")]
		[DebuggerHidden]
		public <StartLoginCoroutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x1098400", Offset = "0x1098400", VA = "0x1098400", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x1098404", Offset = "0x1098404", VA = "0x1098404", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x109855C", Offset = "0x109855C", VA = "0x109855C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013E")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass11_0
	{
		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AuthManager <>4__this;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Task<FirebaseUser> LoginTask;

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x10985A4", Offset = "0x10985A4", VA = "0x10985A4")]
		public <>c__DisplayClass11_0()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x10985AC", Offset = "0x10985AC", VA = "0x10985AC")]
		internal bool <Login>b__0()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x10985D0", Offset = "0x10985D0", VA = "0x10985D0")]
		internal bool <Login>b__1()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200013F")]
	[CompilerGenerated]
	private sealed class <Login>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AuthManager <>4__this;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string _email;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass11_0 <>8__1;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string _password;

		[Token(Token = "0x170000A5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008F4")]
			[Address(RVA = "0x1098BA0", Offset = "0x1098BA0", VA = "0x1098BA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008F6")]
			[Address(RVA = "0x1098BE8", Offset = "0x1098BE8", VA = "0x1098BE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x10980C4", Offset = "0x10980C4", VA = "0x10980C4")]
		[DebuggerHidden]
		public <Login>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x10985EC", Offset = "0x10985EC", VA = "0x10985EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x10985F0", Offset = "0x10985F0", VA = "0x10985F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x1098BA8", Offset = "0x1098BA8", VA = "0x1098BA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000140")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Task<FirebaseUser> RegisterTask;

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x1098BF0", Offset = "0x1098BF0", VA = "0x1098BF0")]
		public <>c__DisplayClass12_0()
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x1098BF8", Offset = "0x1098BF8", VA = "0x1098BF8")]
		internal bool <Register>b__1()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000141")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass12_1
	{
		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Task ProfileTask;

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x1098C14", Offset = "0x1098C14", VA = "0x1098C14")]
		public <>c__DisplayClass12_1()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x1098C1C", Offset = "0x1098C1C", VA = "0x1098C1C")]
		internal bool <Register>b__2()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000142")]
	[CompilerGenerated]
	private sealed class <Register>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AuthManager <>4__this;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string _username;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _email;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string _password;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private <>c__DisplayClass12_0 <>8__1;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private <>c__DisplayClass12_1 <>8__2;

		[Token(Token = "0x170000A7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008FE")]
			[Address(RVA = "0x10992A4", Offset = "0x10992A4", VA = "0x10992A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000900")]
			[Address(RVA = "0x10992EC", Offset = "0x10992EC", VA = "0x10992EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x10980EC", Offset = "0x10980EC", VA = "0x10980EC")]
		[DebuggerHidden]
		public <Register>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x1098C38", Offset = "0x1098C38", VA = "0x1098C38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x1098C3C", Offset = "0x1098C3C", VA = "0x1098C3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x10992AC", Offset = "0x10992AC", VA = "0x10992AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private FirebaseAuth auth;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private FirebaseUser user;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private FirebaseFirestore db;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string _userID;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isInitialized;

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x1097D58", Offset = "0x1097D58", VA = "0x1097D58")]
	public void InitializeFirebase()
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x1097E3C", Offset = "0x1097E3C", VA = "0x1097E3C")]
	public string GetUserId()
	{
		return null;
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x1097C2C", Offset = "0x1097C2C", VA = "0x1097C2C")]
	public void StartLogin(string val)
	{
	}

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0x1097E64", Offset = "0x1097E64", VA = "0x1097E64")]
	[IteratorStateMachine(typeof(<StartLoginCoroutine>d__8))]
	private IEnumerator StartLoginCoroutine(string val)
	{
		return null;
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x1097F1C", Offset = "0x1097F1C", VA = "0x1097F1C")]
	private void LoginButton(string userEmail, string userPass)
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x1097FE0", Offset = "0x1097FE0", VA = "0x1097FE0")]
	private void RegisterButton(string userEmail, string userPass)
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x1097F3C", Offset = "0x1097F3C", VA = "0x1097F3C")]
	[IteratorStateMachine(typeof(<Login>d__11))]
	private IEnumerator Login(string _email, string _password)
	{
		return null;
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x1098004", Offset = "0x1098004", VA = "0x1098004")]
	[IteratorStateMachine(typeof(<Register>d__12))]
	private IEnumerator Register(string _email, string _password, string _username)
	{
		return null;
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x1098114", Offset = "0x1098114", VA = "0x1098114")]
	private bool HasDayPassed()
	{
		return default(bool);
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x109836C", Offset = "0x109836C", VA = "0x109836C")]
	public AuthManager()
	{
	}
}
[Token(Token = "0x2000143")]
public class AutoGamePauseManager : BaseOVRFocusHandler
{
	[Token(Token = "0x14000011")]
	public static event Action OnPause
	{
		[Token(Token = "0x6000901")]
		[Address(RVA = "0x10992F4", Offset = "0x10992F4", VA = "0x10992F4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000902")]
		[Address(RVA = "0x10993AC", Offset = "0x10993AC", VA = "0x10993AC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public static event Action OnResume
	{
		[Token(Token = "0x6000903")]
		[Address(RVA = "0x1099464", Offset = "0x1099464", VA = "0x1099464")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000904")]
		[Address(RVA = "0x1099520", Offset = "0x1099520", VA = "0x1099520")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0x10995DC", Offset = "0x10995DC", VA = "0x10995DC", Slot = "4")]
	protected override void OnGamePause()
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0x1099640", Offset = "0x1099640", VA = "0x1099640", Slot = "5")]
	protected override void OnGameUnPause()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0x10996A4", Offset = "0x10996A4", VA = "0x10996A4")]
	public AutoGamePauseManager()
	{
	}
}
[Token(Token = "0x2000144")]
public class AvatarHandler : MonoBehaviour
{
	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Cosmetics.Avatar avatarID;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isSubscriptionRequired;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject selectCanvas;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject purchaseCanvas;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int avatarCost;

	[Token(Token = "0x6000908")]
	[Address(RVA = "0x10996B4", Offset = "0x10996B4", VA = "0x10996B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0x1099734", Offset = "0x1099734", VA = "0x1099734")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0x10997B4", Offset = "0x10997B4", VA = "0x10997B4")]
	private void RefreshProduct()
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0x1099950", Offset = "0x1099950", VA = "0x1099950")]
	private void Start()
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0x1099974", Offset = "0x1099974", VA = "0x1099974")]
	public void PurchaseAvatar()
	{
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0x10997D8", Offset = "0x10997D8", VA = "0x10997D8")]
	private bool IsAvatarUnlocked()
	{
		return default(bool);
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x10998B8", Offset = "0x10998B8", VA = "0x10998B8")]
	private void UnLockAvatar()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x1099B04", Offset = "0x1099B04", VA = "0x1099B04")]
	public void ChooseSkin()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0x1099C28", Offset = "0x1099C28", VA = "0x1099C28")]
	private bool IsEntity()
	{
		return default(bool);
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0x1099C5C", Offset = "0x1099C5C", VA = "0x1099C5C")]
	private void SetPlayerSkin(string val)
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x1099CF0", Offset = "0x1099CF0", VA = "0x1099CF0")]
	public AvatarHandler()
	{
	}
}
[Token(Token = "0x2000145")]
public abstract class BaseOVRFocusHandler : MonoBehaviour
{
	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isPaused;

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x1099CF8", Offset = "0x1099CF8", VA = "0x1099CF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0x1099E94", Offset = "0x1099E94", VA = "0x1099E94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x109A030", Offset = "0x109A030", VA = "0x109A030")]
	private void PauseGame()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0x109A048", Offset = "0x109A048", VA = "0x109A048")]
	private void UnPauseGame()
	{
	}

	[Token(Token = "0x6000917")]
	protected abstract void OnGamePause();

	[Token(Token = "0x6000918")]
	protected abstract void OnGameUnPause();

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x109A0F0", Offset = "0x109A0F0", VA = "0x109A0F0")]
	private void DisableAudioListener(bool canEnable)
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x10996AC", Offset = "0x10996AC", VA = "0x10996AC")]
	protected BaseOVRFocusHandler()
	{
	}
}
[Token(Token = "0x2000146")]
public class ButtonClick : MonoBehaviourPunCallbacks, IOnEventCallback
{
	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float targetPosition;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float duration;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip clickSound;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool wasClicked;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource _source;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material greenMat;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Renderer targetRenderer;

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x109A0FC", Offset = "0x109A0FC", VA = "0x109A0FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x109A2A0", Offset = "0x109A2A0", VA = "0x109A2A0")]
	private void ButtonPushAnimation()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x109A39C", Offset = "0x109A39C", VA = "0x109A39C")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x109A3D8", Offset = "0x109A3D8", VA = "0x109A3D8")]
	public void OnButtonClicked()
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x109A54C", Offset = "0x109A54C", VA = "0x109A54C", Slot = "54")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x109A788", Offset = "0x109A788", VA = "0x109A788")]
	public ButtonClick()
	{
	}
}
[Token(Token = "0x2000147")]
public class OfficeDoorOpener : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer door1Renderer;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material greenMat;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DoorHandler door1Handler;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Renderer door2Renderer;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DoorHandler door2Handler;

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x109A79C", Offset = "0x109A79C", VA = "0x109A79C", Slot = "46")]
	public override void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x109A8E8", Offset = "0x109A8E8", VA = "0x109A8E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0x109A9D4", Offset = "0x109A9D4", VA = "0x109A9D4")]
	public OfficeDoorOpener()
	{
	}
}
[Token(Token = "0x2000148")]
public class PlayerObjInstantiater : MonoBehaviour
{
	[Token(Token = "0x200014A")]
	[CompilerGenerated]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerObjInstantiater <>4__this;

		[Token(Token = "0x170000A9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600092C")]
			[Address(RVA = "0x109AE18", Offset = "0x109AE18", VA = "0x109AE18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600092E")]
			[Address(RVA = "0x109AE60", Offset = "0x109AE60", VA = "0x109AE60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x109AA50", Offset = "0x109AA50", VA = "0x109AA50")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x109AB74", Offset = "0x109AB74", VA = "0x109AB74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x109AB78", Offset = "0x109AB78", VA = "0x109AB78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x109AE20", Offset = "0x109AE20", VA = "0x109AE20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject objToInstantiate;

	[Token(Token = "0x6000924")]
	[Address(RVA = "0x109A9DC", Offset = "0x109A9DC", VA = "0x109A9DC")]
	[IteratorStateMachine(typeof(<Start>d__1))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0x109AA78", Offset = "0x109AA78", VA = "0x109AA78")]
	public PlayerObjInstantiater()
	{
	}
}
[Token(Token = "0x200014B")]
public class TriggerClick : MonoBehaviourPunCallbacks, IOnEventCallback
{
	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float targetRotation;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float duration;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip clickSound;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool wasClicked;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource _source;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material greenMat;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Renderer targetRenderer;

	[Token(Token = "0x600092F")]
	[Address(RVA = "0x109AE68", Offset = "0x109AE68", VA = "0x109AE68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0x109AF34", Offset = "0x109AF34", VA = "0x109AF34")]
	private void ButtonPushAnimation()
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0x109B014", Offset = "0x109B014", VA = "0x109B014")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x109B050", Offset = "0x109B050", VA = "0x109B050")]
	public void OnButtonClicked()
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x109B1C4", Offset = "0x109B1C4", VA = "0x109B1C4", Slot = "54")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x109B400", Offset = "0x109B400", VA = "0x109B400")]
	public TriggerClick()
	{
	}
}
[Token(Token = "0x200014C")]
public class CharacterManager : MonoBehaviour
{
	[Token(Token = "0x200014D")]
	[CompilerGenerated]
	private sealed class <AssignPlayerVariables>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CharacterManager <>4__this;

		[Token(Token = "0x170000AB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600093D")]
			[Address(RVA = "0x109B8FC", Offset = "0x109B8FC", VA = "0x109B8FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600093F")]
			[Address(RVA = "0x109B944", Offset = "0x109B944", VA = "0x109B944", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x109B528", Offset = "0x109B528", VA = "0x109B528")]
		[DebuggerHidden]
		public <AssignPlayerVariables>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x109B558", Offset = "0x109B558", VA = "0x109B558", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x109B55C", Offset = "0x109B55C", VA = "0x109B55C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x109B904", Offset = "0x109B904", VA = "0x109B904", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform playerTransform;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform leftHand;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rightHand;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform characterHead;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HandController leftController;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandController rightController;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Grabber leftGrabber;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Grabber rightGrabber;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject leftHandCustom;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject rightHandCustom;

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x109B414", Offset = "0x109B414", VA = "0x109B414")]
	private void Start()
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x109B48C", Offset = "0x109B48C", VA = "0x109B48C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x109B520", Offset = "0x109B520", VA = "0x109B520")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x109B4AC", Offset = "0x109B4AC", VA = "0x109B4AC")]
	[IteratorStateMachine(typeof(<AssignPlayerVariables>d__13))]
	private IEnumerator AssignPlayerVariables()
	{
		return null;
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x109B550", Offset = "0x109B550", VA = "0x109B550")]
	public CharacterManager()
	{
	}
}
[Token(Token = "0x200014E")]
public class CheckForKeys : MonoBehaviour
{
	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isCustomUpdateInitialized;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject _ironKey;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject _blueKey;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject _greenKey;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject _redKey;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject fuse;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LayerMask grabbableMask;

	[Token(Token = "0x6000940")]
	[Address(RVA = "0x109B94C", Offset = "0x109B94C", VA = "0x109B94C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0x109BADC", Offset = "0x109BADC", VA = "0x109BADC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x109BB1C", Offset = "0x109BB1C", VA = "0x109BB1C")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0x109BBC4", Offset = "0x109BBC4", VA = "0x109BBC4")]
	private void CheckKeys()
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0x109C338", Offset = "0x109C338", VA = "0x109C338")]
	private void CheckForFunKeys()
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0x109BDD0", Offset = "0x109BDD0", VA = "0x109BDD0")]
	private void CheckForFuses()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0x109C2B4", Offset = "0x109C2B4", VA = "0x109C2B4")]
	private Transform RandomSpawnPoint(List<Transform> SpawnList)
	{
		return null;
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0x109C714", Offset = "0x109C714", VA = "0x109C714")]
	public CheckForKeys()
	{
	}
}
[Token(Token = "0x200014F")]
public class CheckItemsForRespawn : MonoBehaviour
{
	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isCustomUpdateInitialized;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject _blueKey;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject _greenKey;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject _redKey;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject _stone;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject _cageStone;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject fuse;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LayerMask grabbableMask;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private JailManager _jailManager;

	[Token(Token = "0x6000948")]
	[Address(RVA = "0x109C71C", Offset = "0x109C71C", VA = "0x109C71C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0x109C7D0", Offset = "0x109C7D0", VA = "0x109C7D0")]
	private void Start()
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0x109C848", Offset = "0x109C848", VA = "0x109C848")]
	private void Update()
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0x109C86C", Offset = "0x109C86C", VA = "0x109C86C")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0x109D2A0", Offset = "0x109D2A0", VA = "0x109D2A0")]
	private void CheckForStones()
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0x109D5A4", Offset = "0x109D5A4", VA = "0x109D5A4")]
	private void CheckForCageStones()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0x109C914", Offset = "0x109C914", VA = "0x109C914")]
	private void CheckForKeys()
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0x109CDAC", Offset = "0x109CDAC", VA = "0x109CDAC")]
	private void CheckForFuses()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0x109D520", Offset = "0x109D520", VA = "0x109D520")]
	private Transform RandomSpawnPoint(List<Transform> SpawnList)
	{
		return null;
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0x109D6C4", Offset = "0x109D6C4", VA = "0x109D6C4")]
	public CheckItemsForRespawn()
	{
	}
}
[Token(Token = "0x2000150")]
public class Code : MonoBehaviour
{
	[Token(Token = "0x2000151")]
	public enum CodeIndex
	{
		[Token(Token = "0x4000723")]
		Zero,
		[Token(Token = "0x4000724")]
		One,
		[Token(Token = "0x4000725")]
		Two,
		[Token(Token = "0x4000726")]
		None
	}

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI _textMeshProUGUI;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject _canvas;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CodeIndex index;

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x109D6CC", Offset = "0x109D6CC", VA = "0x109D6CC")]
	private string GetCode()
	{
		return null;
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x109D83C", Offset = "0x109D83C", VA = "0x109D83C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x109D918", Offset = "0x109D918", VA = "0x109D918")]
	public Code()
	{
	}
}
[Token(Token = "0x2000152")]
public class CodeInput : MonoBehaviour
{
	[Token(Token = "0x2000153")]
	[CompilerGenerated]
	private sealed class <CodeSuccessRestRoutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CodeInput <>4__this;

		[Token(Token = "0x170000AD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000962")]
			[Address(RVA = "0x109E12C", Offset = "0x109E12C", VA = "0x109E12C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000964")]
			[Address(RVA = "0x109E174", Offset = "0x109E174", VA = "0x109E174", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x109DF44", Offset = "0x109DF44", VA = "0x109DF44")]
		[DebuggerHidden]
		public <CodeSuccessRestRoutine>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x109E068", Offset = "0x109E068", VA = "0x109E068", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x109E06C", Offset = "0x109E06C", VA = "0x109E06C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x109E134", Offset = "0x109E134", VA = "0x109E134", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private InputField thisInputField;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool AttachToVRKeyboard;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool ActivateKeyboardOnSelect;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool DeactivateKeyboardOnDeselect;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRKeyboard AttachedKeyboard;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isFocused;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool wasFocused;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool codeSuccess;

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x109D920", Offset = "0x109D920", VA = "0x109D920")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x109DA60", Offset = "0x109DA60", VA = "0x109DA60")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0x109DB8C", Offset = "0x109DB8C", VA = "0x109DB8C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x109DD84", Offset = "0x109DD84", VA = "0x109DD84")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x109DC14", Offset = "0x109DC14", VA = "0x109DC14")]
	private string GetCode()
	{
		return null;
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0x109DED0", Offset = "0x109DED0", VA = "0x109DED0")]
	[IteratorStateMachine(typeof(<CodeSuccessRestRoutine>d__13))]
	private IEnumerator CodeSuccessRestRoutine()
	{
		return null;
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0x109DF6C", Offset = "0x109DF6C", VA = "0x109DF6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x109D990", Offset = "0x109D990", VA = "0x109D990")]
	public void OnInputSelect()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x109DAD0", Offset = "0x109DAD0", VA = "0x109DAD0")]
	public void OnInputDeselect()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0x109E058", Offset = "0x109E058", VA = "0x109E058")]
	public CodeInput()
	{
	}
}
[Token(Token = "0x2000154")]
public class ConnectionHandler : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x2000155")]
	public enum Regions
	{
		[Token(Token = "0x400073F")]
		us,
		[Token(Token = "0x4000740")]
		eu,
		[Token(Token = "0x4000741")]
		asia
	}

	[Token(Token = "0x2000156")]
	[CompilerGenerated]
	private sealed class <Start>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ConnectionHandler <>4__this;

		[Token(Token = "0x170000AF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000981")]
			[Address(RVA = "0x10A0078", Offset = "0x10A0078", VA = "0x10A0078", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000983")]
			[Address(RVA = "0x10A00C0", Offset = "0x10A00C0", VA = "0x10A00C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x109E240", Offset = "0x109E240", VA = "0x109E240")]
		[DebuggerHidden]
		public <Start>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x109FD94", Offset = "0x109FD94", VA = "0x109FD94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x109FD98", Offset = "0x109FD98", VA = "0x109FD98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x10A0080", Offset = "0x10A0080", VA = "0x10A0080", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000158")]
	[CompilerGenerated]
	private sealed class <RandomSetup>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ConnectionHandler <>4__this;

		[Token(Token = "0x170000B1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600098D")]
			[Address(RVA = "0x10A0530", Offset = "0x10A0530", VA = "0x10A0530", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600098F")]
			[Address(RVA = "0x10A0578", Offset = "0x10A0578", VA = "0x10A0578", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x109E5A4", Offset = "0x109E5A4", VA = "0x109E5A4")]
		[DebuggerHidden]
		public <RandomSetup>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x10A02F0", Offset = "0x10A02F0", VA = "0x10A02F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x10A02F4", Offset = "0x10A02F4", VA = "0x10A02F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x10A0538", Offset = "0x10A0538", VA = "0x10A0538", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000159")]
	[CompilerGenerated]
	private sealed class <JoinRandomRoutine>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ConnectionHandler <>4__this;

		[Token(Token = "0x170000B3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000993")]
			[Address(RVA = "0x10A08D8", Offset = "0x10A08D8", VA = "0x10A08D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000995")]
			[Address(RVA = "0x10A0920", Offset = "0x10A0920", VA = "0x10A0920", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x109E640", Offset = "0x109E640", VA = "0x109E640")]
		[DebuggerHidden]
		public <JoinRandomRoutine>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x10A0580", Offset = "0x10A0580", VA = "0x10A0580", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x10A0584", Offset = "0x10A0584", VA = "0x10A0584", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x10A08E0", Offset = "0x10A08E0", VA = "0x10A08E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200015A")]
	[CompilerGenerated]
	private sealed class <PrivateSetup>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ConnectionHandler <>4__this;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool create;

		[Token(Token = "0x170000B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000999")]
			[Address(RVA = "0x10A0BDC", Offset = "0x10A0BDC", VA = "0x10A0BDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600099B")]
			[Address(RVA = "0x10A0C24", Offset = "0x10A0C24", VA = "0x10A0C24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x109EACC", Offset = "0x109EACC", VA = "0x109EACC")]
		[DebuggerHidden]
		public <PrivateSetup>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x10A0928", Offset = "0x10A0928", VA = "0x10A0928", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x10A092C", Offset = "0x10A092C", VA = "0x10A092C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x10A0BE4", Offset = "0x10A0BE4", VA = "0x10A0BE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200015B")]
	[CompilerGenerated]
	private sealed class <JoinOrCreatePrivateRoomRoutine>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string GameName;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ConnectionHandler <>4__this;

		[Token(Token = "0x170000B7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600099F")]
			[Address(RVA = "0x10A0E88", Offset = "0x10A0E88", VA = "0x10A0E88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0x10A0ED0", Offset = "0x10A0ED0", VA = "0x10A0ED0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x109ECC4", Offset = "0x109ECC4", VA = "0x109ECC4")]
		[DebuggerHidden]
		public <JoinOrCreatePrivateRoomRoutine>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x10A0C2C", Offset = "0x10A0C2C", VA = "0x10A0C2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x10A0C30", Offset = "0x10A0C30", VA = "0x10A0C30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x10A0E90", Offset = "0x10A0E90", VA = "0x10A0E90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField createRoomNameTxt;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InputField joinRoomNameTxt;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject loading;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int mode;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text playerNameTxt;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Regions myRegion;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TMP_Dropdown _dropdown;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int map;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject errorDialog;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI errorText;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool ConnectCancel;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool ConnectToMainGame;

	[Token(Token = "0x6000965")]
	[Address(RVA = "0x109E17C", Offset = "0x109E17C", VA = "0x109E17C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0x109E1CC", Offset = "0x109E1CC", VA = "0x109E1CC")]
	[IteratorStateMachine(typeof(<Start>d__14))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0x109E268", Offset = "0x109E268", VA = "0x109E268")]
	private void DropdownValueChanged(TMP_Dropdown change)
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0x109E360", Offset = "0x109E360", VA = "0x109E360")]
	public void SetMode(int val)
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0x109E480", Offset = "0x109E480", VA = "0x109E480")]
	private void JoinLobbyGame()
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0x109E510", Offset = "0x109E510", VA = "0x109E510")]
	public void JoinRandomRoom()
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x109E530", Offset = "0x109E530", VA = "0x109E530")]
	[IteratorStateMachine(typeof(<RandomSetup>d__19))]
	private IEnumerator RandomSetup()
	{
		return null;
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0x109E5CC", Offset = "0x109E5CC", VA = "0x109E5CC")]
	[IteratorStateMachine(typeof(<JoinRandomRoutine>d__20))]
	private IEnumerator JoinRandomRoutine()
	{
		return null;
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0x109E668", Offset = "0x109E668", VA = "0x109E668")]
	private void Connect()
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0x109E800", Offset = "0x109E800", VA = "0x109E800")]
	public void SetMap(int mapId)
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0x109E808", Offset = "0x109E808", VA = "0x109E808", Slot = "40")]
	public override void OnRoomListUpdate(List<RoomInfo> roomList)
	{
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0x109E9FC", Offset = "0x109E9FC", VA = "0x109E9FC")]
	public void JoinPrivateRoom()
	{
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0x109EAA8", Offset = "0x109EAA8", VA = "0x109EAA8")]
	public void CreatePrivateRoom()
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0x109EA20", Offset = "0x109EA20", VA = "0x109EA20")]
	[IteratorStateMachine(typeof(<PrivateSetup>d__26))]
	private IEnumerator PrivateSetup(bool create)
	{
		return null;
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0x109EAF4", Offset = "0x109EAF4", VA = "0x109EAF4")]
	private void ConnectToPrivateGame()
	{
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0x109EC34", Offset = "0x109EC34", VA = "0x109EC34")]
	[IteratorStateMachine(typeof(<JoinOrCreatePrivateRoomRoutine>d__28))]
	private IEnumerator JoinOrCreatePrivateRoomRoutine(string GameName)
	{
		return null;
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0x109ECEC", Offset = "0x109ECEC", VA = "0x109ECEC", Slot = "45")]
	public override void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0x109EEA0", Offset = "0x109EEA0", VA = "0x109EEA0", Slot = "38")]
	public override void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0x109F06C", Offset = "0x109F06C", VA = "0x109F06C", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0x109F1D0", Offset = "0x109F1D0", VA = "0x109F1D0", Slot = "33")]
	public override void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0x109F3D8", Offset = "0x109F3D8", VA = "0x109F3D8", Slot = "34")]
	public override void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0x109F5C8", Offset = "0x109F5C8", VA = "0x109F5C8")]
	private RoomOptions GetRoomOptions()
	{
		return null;
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0x109FAE4", Offset = "0x109FAE4", VA = "0x109FAE4", Slot = "44")]
	public override void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0x109FD7C", Offset = "0x109FD7C", VA = "0x109FD7C")]
	public ConnectionHandler()
	{
	}
}
[Token(Token = "0x200015C")]
public class Constants : MonoBehaviour
{
	[Token(Token = "0x4000758")]
	public const int KeyInstantiateEvent = 31;

	[Token(Token = "0x4000759")]
	public const int FuseInstantiateEvent = 32;

	[Token(Token = "0x400075A")]
	public const int AIInstantiateEvent = 33;

	[Token(Token = "0x400075B")]
	public const int AITriggerInstantiateEvent = 34;

	[Token(Token = "0x400075C")]
	public const byte SyncDoorsEventCode = 11;

	[Token(Token = "0x400075D")]
	public const byte SyncDrawersEventCode = 12;

	[Token(Token = "0x400075E")]
	public const byte OpenDrawerEventCode = 13;

	[Token(Token = "0x400075F")]
	public const byte OpenDoorEventCode = 14;

	[Token(Token = "0x4000760")]
	public const byte CloseRoomEvent = 15;

	[Token(Token = "0x4000761")]
	public const byte EndLevelEvent = 16;

	[Token(Token = "0x4000762")]
	public const byte FuseBoxEventCode = 17;

	[Token(Token = "0x4000763")]
	public const byte EscapeJailEventCode = 18;

	[Token(Token = "0x4000764")]
	public const byte JailBtnPressEventCode = 19;

	[Token(Token = "0x4000765")]
	public const byte JailBtnReleaseEventCode = 20;

	[Token(Token = "0x4000766")]
	public const byte StartEscapeGameEventCode = 21;

	[Token(Token = "0x4000767")]
	public const int InfoEvent = 22;

	[Token(Token = "0x4000768")]
	public const byte EndEscapeGameEventCode = 23;

	[Token(Token = "0x4000769")]
	public const byte TriggerClickEventCode = 24;

	[Token(Token = "0x400076A")]
	public const byte ButtonClickEventCode = 25;

	[Token(Token = "0x400076B")]
	public const string CountDown = "CountDown";

	[Token(Token = "0x400076C")]
	public const string ButtonClick = "ButtonClick";

	[Token(Token = "0x400076D")]
	public const string TriggerClick = "TriggerClick";

	[Token(Token = "0x400076E")]
	public const string IsInJail = "IsInJail";

	[Token(Token = "0x400076F")]
	public const string ClipCoins = "ClipCoins";

	[Token(Token = "0x4000770")]
	public const string Skin = "Skin";

	[Token(Token = "0x4000771")]
	public const string PrevEntitySkin = "EntitySkin";

	[Token(Token = "0x4000772")]
	public const string PrevPlayerSkin = "PlayerSkin";

	[Token(Token = "0x4000773")]
	public const int JoinReward = 200;

	[Token(Token = "0x4000774")]
	public const int SupporterReward = 2000;

	[Token(Token = "0x4000775")]
	public const int DailyReward = 100;

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x10A0ED8", Offset = "0x10A0ED8", VA = "0x10A0ED8")]
	public Constants()
	{
	}
}
[Token(Token = "0x200015D")]
public class Cosmetics
{
	[Token(Token = "0x200015E")]
	public enum Avatar
	{
		[Token(Token = "0x4000777")]
		Default,
		[Token(Token = "0x4000778")]
		RedSkin,
		[Token(Token = "0x4000779")]
		NightRanger,
		[Token(Token = "0x400077A")]
		SurvivorGirl,
		[Token(Token = "0x400077B")]
		SurvivorMan,
		[Token(Token = "0x400077C")]
		Kitty,
		[Token(Token = "0x400077D")]
		PartyPooper,
		[Token(Token = "0x400077E")]
		PartyPooperNaked,
		[Token(Token = "0x400077F")]
		WhiteSkin,
		[Token(Token = "0x4000780")]
		TechSkin,
		[Token(Token = "0x4000781")]
		PartyGoer,
		[Token(Token = "0x4000782")]
		Bacteria,
		[Token(Token = "0x4000783")]
		ClipCoins,
		[Token(Token = "0x4000784")]
		Supporter
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x10A0EE0", Offset = "0x10A0EE0", VA = "0x10A0EE0")]
	public Cosmetics()
	{
	}
}
[Token(Token = "0x200015F")]
public class CountDown : MonoBehaviourPunCallbacks, IOnEventCallback
{
	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private double timeToStart;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool hasGameStarted;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI countDownText;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float CountDownTime;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isGameOver;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ui;

	[Token(Token = "0x170000B9")]
	public bool IsItTimeYet
	{
		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x10A0EE8", Offset = "0x10A0EE8", VA = "0x10A0EE8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000BA")]
	public bool IsTimeToStartKnown
	{
		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x10A0F68", Offset = "0x10A0F68", VA = "0x10A0F68")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000BB")]
	public double SecondsUntilItsTime
	{
		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x10A0F80", Offset = "0x10A0F80", VA = "0x10A0F80")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0x10A1008", Offset = "0x10A1008", VA = "0x10A1008", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x10A1060", Offset = "0x10A1060", VA = "0x10A1060", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x10A10B8", Offset = "0x10A10B8", VA = "0x10A10B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x10A11AC", Offset = "0x10A11AC", VA = "0x10A11AC")]
	private void Update()
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x10A15F0", Offset = "0x10A15F0", VA = "0x10A15F0")]
	private void DisplayTime(float timeToDisplay)
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x10A179C", Offset = "0x10A179C", VA = "0x10A179C", Slot = "46")]
	public override void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x10A18BC", Offset = "0x10A18BC", VA = "0x10A18BC", Slot = "54")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x10A1918", Offset = "0x10A1918", VA = "0x10A1918")]
	public CountDown()
	{
	}
}
[Token(Token = "0x2000160")]
public class CustomFixedUpdate
{
	[Token(Token = "0x2000161")]
	public delegate void OnFixedUpdateCallback(float aDeltaTime);

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float m_FixedTimeStep;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float m_Timer;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OnFixedUpdateCallback m_Callback;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_MaxAllowedTimeStep;

	[Token(Token = "0x170000BC")]
	public float MaxAllowedTimeStep
	{
		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x10A1920", Offset = "0x10A1920", VA = "0x10A1920")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x10A1928", Offset = "0x10A1928", VA = "0x10A1928")]
		set
		{
		}
	}

	[Token(Token = "0x170000BD")]
	public float deltaTime
	{
		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x10A1930", Offset = "0x10A1930", VA = "0x10A1930")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x10A1938", Offset = "0x10A1938", VA = "0x10A1938")]
		set
		{
		}
	}

	[Token(Token = "0x170000BE")]
	public float updateRate
	{
		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x10A194C", Offset = "0x10A194C", VA = "0x10A194C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x10A195C", Offset = "0x10A195C", VA = "0x10A195C")]
		set
		{
		}
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0x10A1978", Offset = "0x10A1978", VA = "0x10A1978")]
	public CustomFixedUpdate(float aTimeStep, OnFixedUpdateCallback aCallback, float aMaxAllowedTimestep)
	{
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0x109BAD4", Offset = "0x109BAD4", VA = "0x109BAD4")]
	public CustomFixedUpdate(float aTimeStep, OnFixedUpdateCallback aCallback)
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0x10A1A4C", Offset = "0x10A1A4C", VA = "0x10A1A4C")]
	public CustomFixedUpdate(OnFixedUpdateCallback aCallback)
	{
	}

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0x10A1A5C", Offset = "0x10A1A5C", VA = "0x10A1A5C")]
	public CustomFixedUpdate(OnFixedUpdateCallback aCallback, float aFPS, float aMaxAllowedTimestep)
	{
	}

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0x10A1A68", Offset = "0x10A1A68", VA = "0x10A1A68")]
	public CustomFixedUpdate(OnFixedUpdateCallback aCallback, float aFPS)
	{
	}

	[Token(Token = "0x60009BA")]
	[Address(RVA = "0x10A1A78", Offset = "0x10A1A78", VA = "0x10A1A78")]
	public void Update(float aDeltaTime)
	{
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0x109BB00", Offset = "0x109BB00", VA = "0x109BB00")]
	public void Update()
	{
	}
}
[Token(Token = "0x2000162")]
public class DailyRewardManager : MonoBehaviour
{
	[Token(Token = "0x2000164")]
	[CompilerGenerated]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DailyRewardManager <>4__this;

		[Token(Token = "0x170000BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0x10A2448", Offset = "0x10A2448", VA = "0x10A2448", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009CE")]
			[Address(RVA = "0x10A2490", Offset = "0x10A2490", VA = "0x10A2490", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x10A1C5C", Offset = "0x10A1C5C", VA = "0x10A1C5C")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x10A2170", Offset = "0x10A2170", VA = "0x10A2170", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x10A2174", Offset = "0x10A2174", VA = "0x10A2174", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x10A2450", Offset = "0x10A2450", VA = "0x10A2450", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DailyReward dailyReward;

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x10A1BE8", Offset = "0x10A1BE8", VA = "0x10A1BE8")]
	[IteratorStateMachine(typeof(<Start>d__1))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0x10A1C84", Offset = "0x10A1C84", VA = "0x10A1C84")]
	private void ClaimReward()
	{
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0x10A1D24", Offset = "0x10A1D24", VA = "0x10A1D24")]
	public DailyRewardManager()
	{
	}
}
[Token(Token = "0x2000165")]
public class DestroyAI : MonoBehaviour
{
	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool destroyAI;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PhotonView photonView;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AICharacterControl aiCharacterControl;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float searchDistance;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool destroyAfterStopFollow;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool skipThisUpdate;

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0x10A2498", Offset = "0x10A2498", VA = "0x10A2498")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0x10A254C", Offset = "0x10A254C", VA = "0x10A254C")]
	private void Start()
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0x10A2604", Offset = "0x10A2604", VA = "0x10A2604")]
	private void Update()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x10A2628", Offset = "0x10A2628", VA = "0x10A2628")]
	private void TimeOut()
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x10A2634", Offset = "0x10A2634", VA = "0x10A2634")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x10A2948", Offset = "0x10A2948", VA = "0x10A2948")]
	private bool CheckTarget(Vector3 direction, float distance)
	{
		return default(bool);
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x10A2A48", Offset = "0x10A2A48", VA = "0x10A2A48")]
	public void StartDestroyAI()
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x10A2BC0", Offset = "0x10A2BC0", VA = "0x10A2BC0")]
	public void StopDestroyAI()
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x10A2CAC", Offset = "0x10A2CAC", VA = "0x10A2CAC")]
	[PunRPC]
	private void RPC_DestroyAI()
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0x10A2CBC", Offset = "0x10A2CBC", VA = "0x10A2CBC")]
	[PunRPC]
	private void RPC_StopDestroyAI()
	{
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0x10A2CC4", Offset = "0x10A2CC4", VA = "0x10A2CC4")]
	public DestroyAI()
	{
	}
}
[Token(Token = "0x2000166")]
public class DestroyMyself : MonoBehaviour
{
	[Token(Token = "0x2000167")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DestroyMyself <>4__this;

		[Token(Token = "0x170000C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009DF")]
			[Address(RVA = "0x10A2E64", Offset = "0x10A2E64", VA = "0x10A2E64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0x10A2EAC", Offset = "0x10A2EAC", VA = "0x10A2EAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x10A2D48", Offset = "0x10A2D48", VA = "0x10A2D48")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x10A2D78", Offset = "0x10A2D78", VA = "0x10A2D78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x10A2D7C", Offset = "0x10A2D7C", VA = "0x10A2D7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x10A2E6C", Offset = "0x10A2E6C", VA = "0x10A2E6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0x10A2CD4", Offset = "0x10A2CD4", VA = "0x10A2CD4")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0x10A2D70", Offset = "0x10A2D70", VA = "0x10A2D70")]
	public DestroyMyself()
	{
	}
}
[Token(Token = "0x2000168")]
public class DestroyOnTrigger : MonoBehaviour
{
	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string tag;

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x10A2EB4", Offset = "0x10A2EB4", VA = "0x10A2EB4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0x10A2F4C", Offset = "0x10A2F4C", VA = "0x10A2F4C")]
	public DestroyOnTrigger()
	{
	}
}
[Token(Token = "0x2000169")]
public class DetectHeightCheat : MonoBehaviour
{
	[Token(Token = "0x200016A")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DetectHeightCheat <>4__this;

		[Token(Token = "0x170000C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E9")]
			[Address(RVA = "0x10A3124", Offset = "0x10A3124", VA = "0x10A3124", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0x10A316C", Offset = "0x10A316C", VA = "0x10A316C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x10A3018", Offset = "0x10A3018", VA = "0x10A3018")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x10A3048", Offset = "0x10A3048", VA = "0x10A3048", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x10A304C", Offset = "0x10A304C", VA = "0x10A304C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x10A312C", Offset = "0x10A312C", VA = "0x10A312C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0x10A2FA4", Offset = "0x10A2FA4", VA = "0x10A2FA4")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0x10A3040", Offset = "0x10A3040", VA = "0x10A3040")]
	public DetectHeightCheat()
	{
	}
}
[Token(Token = "0x200016B")]
public class DisableOnEnable : MonoBehaviour
{
	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] GameObjects;

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0x10A3174", Offset = "0x10A3174", VA = "0x10A3174")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0x10A31D8", Offset = "0x10A31D8", VA = "0x10A31D8")]
	public DisableOnEnable()
	{
	}
}
[Token(Token = "0x200016C")]
public class DoorHandler : MonoBehaviour
{
	[Token(Token = "0x200016D")]
	public enum DoorType
	{
		[Token(Token = "0x40007B6")]
		Open,
		[Token(Token = "0x40007B7")]
		RedDoor,
		[Token(Token = "0x40007B8")]
		BlueDoor,
		[Token(Token = "0x40007B9")]
		GreenDoor,
		[Token(Token = "0x40007BA")]
		IronDoor,
		[Token(Token = "0x40007BB")]
		Closed
	}

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float targetRotation;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float duration;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip doorOpen;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip doorClose;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip doorUnlock;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip doorLocked;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool CanCloseDoor;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool IsDoor;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int doorID;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 rotationDir;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public DoorType doorType;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine outlineRoutine;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Collider _collider;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioSource _source;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isDoorOperating;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool isOpen;

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x10A31E0", Offset = "0x10A31E0", VA = "0x10A31E0")]
	public void OpenDoorEvent(bool isAi)
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x10A349C", Offset = "0x10A349C", VA = "0x10A349C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x10A352C", Offset = "0x10A352C", VA = "0x10A352C")]
	public DoorType GetDoorType()
	{
		return default(DoorType);
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x10A3430", Offset = "0x10A3430", VA = "0x10A3430")]
	public void OpenDoor(bool val, bool IsAi)
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x10A38BC", Offset = "0x10A38BC", VA = "0x10A38BC")]
	public void PlayLockedSound()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0x10A3534", Offset = "0x10A3534", VA = "0x10A3534")]
	private void RPC_OpenDoor()
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0x10A3764", Offset = "0x10A3764", VA = "0x10A3764")]
	private void RPC_CloseDoor()
	{
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0x10A395C", Offset = "0x10A395C", VA = "0x10A395C")]
	private void SetDoorStatus(bool status)
	{
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0x10A38E4", Offset = "0x10A38E4", VA = "0x10A38E4")]
	private void OpenSound()
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0x10A3920", Offset = "0x10A3920", VA = "0x10A3920")]
	private void CloseSound()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0x10A3994", Offset = "0x10A3994", VA = "0x10A3994")]
	public void SyncDoor()
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0x10A3A90", Offset = "0x10A3A90", VA = "0x10A3A90")]
	public DoorHandler()
	{
	}
}
[Token(Token = "0x200016E")]
public class DoorKey : MonoBehaviour
{
	[Token(Token = "0x200016F")]
	public enum Key
	{
		[Token(Token = "0x40007BF")]
		RedKey,
		[Token(Token = "0x40007C0")]
		BlueKey,
		[Token(Token = "0x40007C1")]
		GreenKey,
		[Token(Token = "0x40007C2")]
		IronKey
	}

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Key doorKey;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PhotonView photonView;

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0x10A3BBC", Offset = "0x10A3BBC", VA = "0x10A3BBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0x10A3C14", Offset = "0x10A3C14", VA = "0x10A3C14")]
	private void Start()
	{
	}

	[Token(Token = "0x60009FE")]
	[Address(RVA = "0x10A3C18", Offset = "0x10A3C18", VA = "0x10A3C18")]
	public void HideForEnemy()
	{
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0x10A3CF0", Offset = "0x10A3CF0", VA = "0x10A3CF0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0x10A3E54", Offset = "0x10A3E54", VA = "0x10A3E54")]
	private bool IsDoorLocked(DoorHandler.DoorType doorType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0x10A3EAC", Offset = "0x10A3EAC", VA = "0x10A3EAC")]
	public DoorKey()
	{
	}
}
[Token(Token = "0x2000170")]
public class DoorOpenerHandTrigger : MonoBehaviour
{
	[Token(Token = "0x6000A02")]
	[Address(RVA = "0x10A3EB4", Offset = "0x10A3EB4", VA = "0x10A3EB4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0x10A4080", Offset = "0x10A4080", VA = "0x10A4080")]
	private bool IsDoorLocked(DoorHandler.DoorType doorType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0x10A41A8", Offset = "0x10A41A8", VA = "0x10A41A8")]
	public DoorOpenerHandTrigger()
	{
	}
}
[Token(Token = "0x2000171")]
public class DoorsController : MonoBehaviourPunCallbacks, IOnEventCallback
{
	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<DoorHandler> doors;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<DoorHandler> realDoors;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<int> doorIds;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<int> drawerIds;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool initialised;

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0x10A41B0", Offset = "0x10A41B0", VA = "0x10A41B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0x10A42B0", Offset = "0x10A42B0", VA = "0x10A42B0", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0x10A4344", Offset = "0x10A4344", VA = "0x10A4344")]
	private void SyncDoors(Player newPlayer)
	{
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0x10A4798", Offset = "0x10A4798", VA = "0x10A4798", Slot = "54")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0x10A4ADC", Offset = "0x10A4ADC", VA = "0x10A4ADC")]
	public DoorsController()
	{
	}
}
[Token(Token = "0x2000172")]
public class DropOnTrigger : MonoBehaviour
{
	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotation;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject targetObj;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isFallingDown;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SoundGroup]
	public string damageSound;

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0x10A4C0C", Offset = "0x10A4C0C", VA = "0x10A4C0C")]
	public void FallDown()
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0x10A4DF0", Offset = "0x10A4DF0", VA = "0x10A4DF0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0x10A4E60", Offset = "0x10A4E60", VA = "0x10A4E60")]
	public DropOnTrigger()
	{
	}
}
[Token(Token = "0x2000174")]
public class ElevationChecker : MonoBehaviour
{
	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Minimum Y position our player is allowed to go. Useful for floating point precision and making sure player didn't fall through the map.")]
	public float MinElevation;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MaxElevation;

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0x10A4F60", Offset = "0x10A4F60", VA = "0x10A4F60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0x10A4FB4", Offset = "0x10A4FB4", VA = "0x10A4FB4", Slot = "4")]
	public virtual void CheckPlayerElevationRespawn()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0x10A50AC", Offset = "0x10A50AC", VA = "0x10A50AC")]
	public ElevationChecker()
	{
	}
}
[Token(Token = "0x2000175")]
public class EnableIfEditor : MonoBehaviour
{
	[Token(Token = "0x6000A12")]
	[Address(RVA = "0x10A50C0", Offset = "0x10A50C0", VA = "0x10A50C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0x10A514C", Offset = "0x10A514C", VA = "0x10A514C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0x10A51B8", Offset = "0x10A51B8", VA = "0x10A51B8")]
	public EnableIfEditor()
	{
	}
}
[Token(Token = "0x2000176")]
public class EndGameTrigger : MonoBehaviour
{
	[Token(Token = "0x6000A15")]
	[Address(RVA = "0x10A51C0", Offset = "0x10A51C0", VA = "0x10A51C0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0x10A53AC", Offset = "0x10A53AC", VA = "0x10A53AC")]
	public EndGameTrigger()
	{
	}
}
[Token(Token = "0x2000177")]
public class EnemyAbilityModifier : MonoBehaviour
{
	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string teamName;

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0x10A53B4", Offset = "0x10A53B4", VA = "0x10A53B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0x10A57B0", Offset = "0x10A57B0", VA = "0x10A57B0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0x10A5598", Offset = "0x10A5598", VA = "0x10A5598")]
	private void AssignToken(string teamName)
	{
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0x10A57B8", Offset = "0x10A57B8", VA = "0x10A57B8")]
	private void RemoveToken(string teamName)
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0x10A58E4", Offset = "0x10A58E4", VA = "0x10A58E4")]
	public EnemyAbilityModifier()
	{
	}
}
[Token(Token = "0x2000178")]
public class EnemyDamage : MonoBehaviour
{
	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AICharacterControl _control;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float HealthAmt;

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0x10A593C", Offset = "0x10A593C", VA = "0x10A593C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0x10A5994", Offset = "0x10A5994", VA = "0x10A5994")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0x10A5998", Offset = "0x10A5998", VA = "0x10A5998")]
	private void TakeDamage()
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0x10A59B4", Offset = "0x10A59B4", VA = "0x10A59B4")]
	private void HitDamage()
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0x10A59D0", Offset = "0x10A59D0", VA = "0x10A59D0")]
	public void OnDamage(float amount, Vector3 position, Vector3 force, GameObject attacker)
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0x10A59EC", Offset = "0x10A59EC", VA = "0x10A59EC")]
	public void Heal()
	{
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0x10A59F0", Offset = "0x10A59F0", VA = "0x10A59F0")]
	public void OnDeath(Vector3 position, Vector3 force, GameObject attacker)
	{
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0x10A5A58", Offset = "0x10A5A58", VA = "0x10A5A58")]
	public EnemyDamage()
	{
	}
}
[Token(Token = "0x2000179")]
public class EnemyVoiceDistortion : MonoBehaviour
{
	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VoicePlayback _playbackComponent;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DissonanceComms _dissonanceComms;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private VoicePlayerState _playerState;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioDistortionFilter audioDistortionFilter;

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0x10A5A68", Offset = "0x10A5A68", VA = "0x10A5A68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0x10A5B18", Offset = "0x10A5B18", VA = "0x10A5B18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0x10A5CAC", Offset = "0x10A5CAC", VA = "0x10A5CAC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0x10A5D4C", Offset = "0x10A5D4C", VA = "0x10A5D4C")]
	public EnemyVoiceDistortion()
	{
	}
}
[Token(Token = "0x200017A")]
public class EntityManager : MonoBehaviour
{
	[Token(Token = "0x200017B")]
	[CompilerGenerated]
	private sealed class <SoundIntervalRoutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EntityManager <>4__this;

		[Token(Token = "0x170000C5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0x10A608C", Offset = "0x10A608C", VA = "0x10A608C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0x10A60D4", Offset = "0x10A60D4", VA = "0x10A60D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x10A5F88", Offset = "0x10A5F88", VA = "0x10A5F88")]
		[DebuggerHidden]
		public <SoundIntervalRoutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x10A5FC8", Offset = "0x10A5FC8", VA = "0x10A5FC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x10A5FCC", Offset = "0x10A5FCC", VA = "0x10A5FCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x10A6094", Offset = "0x10A6094", VA = "0x10A6094", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView view;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource audioSrc;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool canMakeSound;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ControllerBinding entityAudioInput;

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0x10A5D54", Offset = "0x10A5D54", VA = "0x10A5D54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0x10A5DAC", Offset = "0x10A5DAC", VA = "0x10A5DAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0x10A5F4C", Offset = "0x10A5F4C", VA = "0x10A5F4C")]
	[PunRPC]
	private void RPC_PlayAudio()
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0x10A5ED8", Offset = "0x10A5ED8", VA = "0x10A5ED8")]
	[IteratorStateMachine(typeof(<SoundIntervalRoutine>d__7))]
	private IEnumerator SoundIntervalRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0x10A5FB0", Offset = "0x10A5FB0", VA = "0x10A5FB0")]
	public EntityManager()
	{
	}
}
[Token(Token = "0x200017C")]
public class EscapeGameEndTrigger : MonoBehaviour
{
	[Token(Token = "0x6000A33")]
	[Address(RVA = "0x10A60DC", Offset = "0x10A60DC", VA = "0x10A60DC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0x10A6300", Offset = "0x10A6300", VA = "0x10A6300")]
	public EscapeGameEndTrigger()
	{
	}
}
[Token(Token = "0x200017D")]
public class EscapeGameManager : MonoBehaviour, IOnEventCallback
{
	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hasGameStarted;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool forceGameStart;

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0x10A6308", Offset = "0x10A6308", VA = "0x10A6308")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0x10A636C", Offset = "0x10A636C", VA = "0x10A636C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0x10A63C4", Offset = "0x10A63C4", VA = "0x10A63C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0x10A641C", Offset = "0x10A641C", VA = "0x10A641C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0x10A6568", Offset = "0x10A6568", VA = "0x10A6568")]
	private void StartGame()
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0x10A683C", Offset = "0x10A683C", VA = "0x10A683C")]
	private void DestroyAllItems()
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0x10A6840", Offset = "0x10A6840", VA = "0x10A6840")]
	public void EndGame()
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0x10A6844", Offset = "0x10A6844", VA = "0x10A6844")]
	public void ResetGame()
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0x10A6848", Offset = "0x10A6848", VA = "0x10A6848", Slot = "4")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0x10A6B98", Offset = "0x10A6B98", VA = "0x10A6B98")]
	public EscapeGameManager()
	{
	}
}
[Token(Token = "0x200017E")]
public class EscapeWinManager : MonoBehaviour, IOnEventCallback
{
	[Token(Token = "0x200017F")]
	[CompilerGenerated]
	private sealed class <EndGameRoutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170000C7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A4C")]
			[Address(RVA = "0x10A74BC", Offset = "0x10A74BC", VA = "0x10A74BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A4E")]
			[Address(RVA = "0x10A7504", Offset = "0x10A7504", VA = "0x10A7504", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x10A6F94", Offset = "0x10A6F94", VA = "0x10A6F94")]
		[DebuggerHidden]
		public <EndGameRoutine>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x10A7324", Offset = "0x10A7324", VA = "0x10A7324", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x10A7328", Offset = "0x10A7328", VA = "0x10A7328", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x10A74C4", Offset = "0x10A74C4", VA = "0x10A74C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float elapsedTime;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timeLimit;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask LayerMask;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask TempMask;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool gameOver;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool forcePlayerWin;

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0x10A6BA0", Offset = "0x10A6BA0", VA = "0x10A6BA0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0x10A6BF8", Offset = "0x10A6BF8", VA = "0x10A6BF8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0x10A6C50", Offset = "0x10A6C50", VA = "0x10A6C50")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0x10A6CCC", Offset = "0x10A6CCC", VA = "0x10A6CCC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0x10A6DEC", Offset = "0x10A6DEC", VA = "0x10A6DEC")]
	private bool IsJailFull()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0x10A6188", Offset = "0x10A6188", VA = "0x10A6188")]
	public void PlayersWon()
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0x10A147C", Offset = "0x10A147C", VA = "0x10A147C")]
	public void EntityWon()
	{
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0x10A6F34", Offset = "0x10A6F34", VA = "0x10A6F34")]
	[IteratorStateMachine(typeof(<EndGameRoutine>d__13))]
	private IEnumerator EndGameRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0x10A6FBC", Offset = "0x10A6FBC", VA = "0x10A6FBC", Slot = "4")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0x10A7314", Offset = "0x10A7314", VA = "0x10A7314")]
	public EscapeWinManager()
	{
	}
}
[Token(Token = "0x2000180")]
public class FirebaseInitializer : MonoBehaviour
{
	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DependencyStatus dependencyStatus;

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0x10A750C", Offset = "0x10A750C", VA = "0x10A750C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0x10A76A0", Offset = "0x10A76A0", VA = "0x10A76A0")]
	private void SetRemoteValues()
	{
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0x10A7D50", Offset = "0x10A7D50", VA = "0x10A7D50")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0x10A7D54", Offset = "0x10A7D54", VA = "0x10A7D54")]
	private void InitializeFirebase()
	{
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0x10A8368", Offset = "0x10A8368", VA = "0x10A8368")]
	private Task FetchDataAsync()
	{
		return null;
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0x10A84AC", Offset = "0x10A84AC", VA = "0x10A84AC")]
	private void FetchComplete(Task fetchTask)
	{
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0x10A8898", Offset = "0x10A8898", VA = "0x10A8898")]
	public FirebaseInitializer()
	{
	}
}
[Token(Token = "0x2000182")]
public class FootstepHandler : MonoBehaviour
{
	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool playFootStepsAudio;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float volume;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float waterVolume;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip[] m_FootstepSounds;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip[] m_waterFootstepSounds;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource FootAudioSrc;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isInWater;

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0x10A8B54", Offset = "0x10A8B54", VA = "0x10A8B54")]
	private void PlayFootStepAudio(AudioClip[] clips, float vol)
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0x10A8C54", Offset = "0x10A8C54", VA = "0x10A8C54")]
	public void FootStepEvent(AnimationEvent evt)
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0x10A8CCC", Offset = "0x10A8CCC", VA = "0x10A8CCC")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0x10A8D34", Offset = "0x10A8D34", VA = "0x10A8D34")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0x10A8D98", Offset = "0x10A8D98", VA = "0x10A8D98")]
	public FootstepHandler()
	{
	}
}
[Token(Token = "0x2000183")]
public class Fuse : MonoBehaviour
{
	[Token(Token = "0x2000184")]
	public enum FuseType
	{
		[Token(Token = "0x40007F6")]
		Red,
		[Token(Token = "0x40007F7")]
		Blue,
		[Token(Token = "0x40007F8")]
		Green
	}

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView photonView;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject particleFX;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FuseType fuseType;

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0x10A8DB4", Offset = "0x10A8DB4", VA = "0x10A8DB4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0x10A56C4", Offset = "0x10A56C4", VA = "0x10A56C4")]
	public void HideForEnemy()
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0x10A8E14", Offset = "0x10A8E14", VA = "0x10A8E14")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0x10A90A4", Offset = "0x10A90A4", VA = "0x10A90A4")]
	[PunRPC]
	private void DestroyObj()
	{
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0x10A9158", Offset = "0x10A9158", VA = "0x10A9158")]
	public Fuse()
	{
	}
}
[Token(Token = "0x2000185")]
public class FuseBoxHandler : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Fuse Inserted?")]
	private bool fuse1Inserted;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool fuse2Inserted;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[SerializeField]
	private bool fuse3Inserted;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	[SerializeField]
	private bool fuse4Inserted;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool powerOn;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Individual Fuses (Parented to the fusebox)")]
	private GameObject fuseObject1;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject fuseObject2;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject fuseObject3;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject fuseObject4;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Header("Fusebox Lights (Parented to the fusebox)")]
	private Renderer light1;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Renderer light2;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Renderer light3;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Renderer light4;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Header("Materials (Inside the project folder)")]
	private Material greenButton;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject endTrigger;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private new PhotonView photonView;

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0x10A9160", Offset = "0x10A9160", VA = "0x10A9160")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0x10A8F9C", Offset = "0x10A8F9C", VA = "0x10A8F9C")]
	public void ShowFuse(int amt)
	{
	}

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0x109C6F4", Offset = "0x109C6F4", VA = "0x109C6F4")]
	public int GetFuseCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0x10A91E8", Offset = "0x10A91E8", VA = "0x10A91E8")]
	[PunRPC]
	private void RPC_HandleFuseBox(int amt)
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0x10A92A0", Offset = "0x10A92A0", VA = "0x10A92A0")]
	public void CheckFuseBox(int i)
	{
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0x10A9434", Offset = "0x10A9434", VA = "0x10A9434")]
	public FuseBoxHandler()
	{
	}
}
[Token(Token = "0x2000186")]
public class GameManager : Singleton<GameManager>
{
	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ReferenceHolder referenceHolder;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool ISFireBaseInitialized;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isTagGame;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool isLobbyGame;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool amEnemy;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool amDead;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool isEscapeGame;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool privateRoom;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	public bool ikSet;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isSupporterUnlocked;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool isBanned;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<string> mutedPlayers;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string userName;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Remote Vars")]
	public float _androidVersionCode;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string _announcementText;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float _bacteriaPatrolSpeed;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float _bacteriaEnemyAISpeed;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float _skinStealerPatrolSpeed;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float _skinStealerEnemyAISpeed;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float _partyGoerPatrolSpeed;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float _partyGoerEnemyAISpeed;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float _playerSpeed;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float _playerSpeedModifier;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float _enemySpeedModifier;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float _enemySpeed;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float _enemyEscapeGameModeSpeed;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float _enemyEscapeGameModeSpeedModifier;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float _playerEscapeGameModeSpeed;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float _playerEscapeGameModeSpeedModifier;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float _countDownEscapeMode;

	[Token(Token = "0x170000C9")]
	public float AndroidVersionCode
	{
		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x10A943C", Offset = "0x10A943C", VA = "0x10A943C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000CA")]
	public string AnnouncementText
	{
		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x10A9444", Offset = "0x10A9444", VA = "0x10A9444")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CB")]
	public float BacteriaEnemyAISpeed
	{
		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x10A944C", Offset = "0x10A944C", VA = "0x10A944C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000CC")]
	public float BacteriaPatrolSpeed
	{
		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x10A9454", Offset = "0x10A9454", VA = "0x10A9454")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000CD")]
	public float SkinStealerPatrolSpeed
	{
		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x10A945C", Offset = "0x10A945C", VA = "0x10A945C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000CE")]
	public float SkinStealerEnemyAISpeed
	{
		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x10A9464", Offset = "0x10A9464", VA = "0x10A9464")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000CF")]
	public float PlayerSpeed
	{
		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x10A946C", Offset = "0x10A946C", VA = "0x10A946C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D0")]
	public float PlayerSpeedModifier
	{
		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x10A9474", Offset = "0x10A9474", VA = "0x10A9474")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D1")]
	public float EnemySpeedModifier
	{
		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x10A947C", Offset = "0x10A947C", VA = "0x10A947C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D2")]
	public float EnemySpeed
	{
		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x10A9484", Offset = "0x10A9484", VA = "0x10A9484")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D3")]
	public float EnemyEscapeGameModeSpeed
	{
		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x10A948C", Offset = "0x10A948C", VA = "0x10A948C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D4")]
	public float EnemyEscapeGameModeSpeedModifier
	{
		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x10A9494", Offset = "0x10A9494", VA = "0x10A9494")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D5")]
	public float PlayerEscapeGameModeSpeed
	{
		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x10A949C", Offset = "0x10A949C", VA = "0x10A949C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D6")]
	public float PlayerEscapeGameModeSpeedModifier
	{
		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x10A94A4", Offset = "0x10A94A4", VA = "0x10A94A4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D7")]
	public float CountDownEscapeMode
	{
		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x10A94AC", Offset = "0x10A94AC", VA = "0x10A94AC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D8")]
	public float PartyGoerPatrolSpeed
	{
		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x10A94B4", Offset = "0x10A94B4", VA = "0x10A94B4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D9")]
	public float PartyGoerEnemyAISpeed
	{
		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x10A94BC", Offset = "0x10A94BC", VA = "0x10A94BC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x10A94C4", Offset = "0x10A94C4", VA = "0x10A94C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0x10A9654", Offset = "0x10A9654", VA = "0x10A9654")]
	public float GetRoomPropertyFloat(string PropertyName)
	{
		return default(float);
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0x109D5E4", Offset = "0x109D5E4", VA = "0x109D5E4")]
	public bool GetRoomPropertyBool(string PropertyName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0x109A1C8", Offset = "0x109A1C8", VA = "0x109A1C8")]
	public int GetRoomPropertyInt(string PropertyName)
	{
		return default(int);
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0x10A9728", Offset = "0x10A9728", VA = "0x10A9728")]
	public double GetRoomPropertyDouble(string PropertyName)
	{
		return default(double);
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x10A97FC", Offset = "0x10A97FC", VA = "0x10A97FC")]
	public void SetRoomPropertyInt(int val, string property)
	{
	}

	[Token(Token = "0x6000A81")]
	[Address(RVA = "0x10A98EC", Offset = "0x10A98EC", VA = "0x10A98EC")]
	public void SetPropertyBool(bool val, string property)
	{
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0x10A99E0", Offset = "0x10A99E0", VA = "0x10A99E0")]
	public void SetPlayerPropertyInt(int index, string property)
	{
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x10A9AB8", Offset = "0x10A9AB8", VA = "0x10A9AB8")]
	public void SetPlayerPropertyString(string Value, string property)
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x10A9B60", Offset = "0x10A9B60", VA = "0x10A9B60")]
	public void SetPlayerPropertyFloat(float val, string property)
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0x10A9C40", Offset = "0x10A9C40", VA = "0x10A9C40")]
	public void SetPlayerPropertyVector3(Vector3 val, string property)
	{
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0x10A71EC", Offset = "0x10A71EC", VA = "0x10A71EC")]
	public void SetPlayerPropertyBool(bool value, string property)
	{
	}

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0x10A9D34", Offset = "0x10A9D34", VA = "0x10A9D34")]
	public GameManager()
	{
	}
}
[Token(Token = "0x2000187")]
public class GlobalKeyPickUp : MonoBehaviour
{
	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NetworkedGrabbable _grabbable;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PhotonView _photonView;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DoorKey _doorKey;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool wasDestroyed;

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0x10A9E54", Offset = "0x10A9E54", VA = "0x10A9E54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0x10A9F14", Offset = "0x10A9F14", VA = "0x10A9F14")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0x10A9F6C", Offset = "0x10A9F6C", VA = "0x10A9F6C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x10A9FC4", Offset = "0x10A9FC4", VA = "0x10A9FC4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0x10AA5EC", Offset = "0x10AA5EC", VA = "0x10AA5EC")]
	[PunRPC]
	private void RPC_DestroyObj()
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0x10AA55C", Offset = "0x10AA55C", VA = "0x10AA55C")]
	private string GetDoorName()
	{
		return null;
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0x10AA618", Offset = "0x10AA618", VA = "0x10AA618")]
	public GlobalKeyPickUp()
	{
	}
}
[Token(Token = "0x2000188")]
public class HideHandler : MonoBehaviour
{
	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0x10AA620", Offset = "0x10AA620", VA = "0x10AA620")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0x10AA6B8", Offset = "0x10AA6B8", VA = "0x10AA6B8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0x10AA6BC", Offset = "0x10AA6BC", VA = "0x10AA6BC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0x10AA750", Offset = "0x10AA750", VA = "0x10AA750")]
	public HideHandler()
	{
	}
}
[Token(Token = "0x2000189")]
public class Highlighter : MonoBehaviour
{
	[Token(Token = "0x200018A")]
	[CompilerGenerated]
	private sealed class <HighLightRoutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Highlighter <>4__this;

		[Token(Token = "0x170000DA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A9C")]
			[Address(RVA = "0x10AAB2C", Offset = "0x10AAB2C", VA = "0x10AAB2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A9E")]
			[Address(RVA = "0x10AAB74", Offset = "0x10AAB74", VA = "0x10AAB74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x10AAA20", Offset = "0x10AAA20", VA = "0x10AAA20")]
		[DebuggerHidden]
		public <HighLightRoutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x10AAA50", Offset = "0x10AAA50", VA = "0x10AAA50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x10AAA54", Offset = "0x10AAA54", VA = "0x10AAA54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x10AAB34", Offset = "0x10AAB34", VA = "0x10AAB34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer _renderer;

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0x10AA758", Offset = "0x10AA758", VA = "0x10AA758")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0x10AA7D8", Offset = "0x10AA7D8", VA = "0x10AA7D8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0x10AA858", Offset = "0x10AA858", VA = "0x10AA858")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0x10AA99C", Offset = "0x10AA99C", VA = "0x10AA99C")]
	private void HighLight()
	{
	}

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0x10AA928", Offset = "0x10AA928", VA = "0x10AA928")]
	[IteratorStateMachine(typeof(<HighLightRoutine>d__5))]
	private IEnumerator HighLightRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0x10AAA48", Offset = "0x10AAA48", VA = "0x10AAA48")]
	public Highlighter()
	{
	}
}
[Token(Token = "0x200018B")]
public class IgnoreParentRotation : MonoBehaviour
{
	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion spawnRot;

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0x10AAB7C", Offset = "0x10AAB7C", VA = "0x10AAB7C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0x10AABA8", Offset = "0x10AABA8", VA = "0x10AABA8")]
	public IgnoreParentRotation()
	{
	}
}
[Token(Token = "0x200018C")]
public class InfoHandler : MonoBehaviour, IOnEventCallback
{
	[Token(Token = "0x200018D")]
	[CompilerGenerated]
	private sealed class <InfoRoutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InfoHandler <>4__this;

		[Token(Token = "0x170000DC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0x10AAF4C", Offset = "0x10AAF4C", VA = "0x10AAF4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0x10AAF94", Offset = "0x10AAF94", VA = "0x10AAF94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x10AAD60", Offset = "0x10AAD60", VA = "0x10AAD60")]
		[DebuggerHidden]
		public <InfoRoutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x10AAE8C", Offset = "0x10AAE8C", VA = "0x10AAE8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x10AAE90", Offset = "0x10AAE90", VA = "0x10AAE90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x10AAF54", Offset = "0x10AAF54", VA = "0x10AAF54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI text;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject infoObj;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI endGameText;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject escapeGameEndCanvas;

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0x10AABDC", Offset = "0x10AABDC", VA = "0x10AABDC")]
	public void ShowInfo(string info)
	{
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0x10AACB0", Offset = "0x10AACB0", VA = "0x10AACB0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0x10AAD08", Offset = "0x10AAD08", VA = "0x10AAD08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0x10AAC3C", Offset = "0x10AAC3C", VA = "0x10AAC3C")]
	[IteratorStateMachine(typeof(<InfoRoutine>d__7))]
	private IEnumerator InfoRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0x10AAD88", Offset = "0x10AAD88", VA = "0x10AAD88", Slot = "4")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0x10A72C8", Offset = "0x10A72C8", VA = "0x10A72C8")]
	public void ShowEscapeEndScreen(string val)
	{
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0x10AAE84", Offset = "0x10AAE84", VA = "0x10AAE84")]
	public InfoHandler()
	{
	}
}
[Token(Token = "0x200018E")]
public class InGameMenuHandler : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x2000190")]
	[CompilerGenerated]
	private sealed class <LeaveRoom>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InGameMenuHandler <>4__this;

		[Token(Token = "0x170000DE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0x10ABA98", Offset = "0x10ABA98", VA = "0x10ABA98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0x10ABAE0", Offset = "0x10ABAE0", VA = "0x10ABAE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x10AB660", Offset = "0x10AB660", VA = "0x10AB660")]
		[DebuggerHidden]
		public <LeaveRoom>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x10AB8A4", Offset = "0x10AB8A4", VA = "0x10AB8A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x10AB8A8", Offset = "0x10AB8A8", VA = "0x10AB8A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x10ABAA0", Offset = "0x10ABAA0", VA = "0x10ABAA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ArmSwingLocomotion armSwingLocomotion;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SmoothLocomotion smoothLocomotion;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float sprintSpeed;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PlayerRotation playerRotation;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Toggle armSwingToggle;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Toggle snapTurnToggle;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.UI.Slider volumeSlider;

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x10AAF9C", Offset = "0x10AAF9C", VA = "0x10AAF9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x10AB4B4", Offset = "0x10AB4B4", VA = "0x10AB4B4")]
	private void MusicVolume(float val)
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x10AB5BC", Offset = "0x10AB5BC", VA = "0x10AB5BC")]
	private void OnArmSwingToggle(Toggle val)
	{
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0x10AB5D4", Offset = "0x10AB5D4", VA = "0x10AB5D4")]
	private void OnSnapTurnToggle(Toggle val)
	{
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0x10AB368", Offset = "0x10AB368", VA = "0x10AB368")]
	private void EnableArmSwing(bool val)
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0x10AB410", Offset = "0x10AB410", VA = "0x10AB410")]
	private void EnableSnapTurning(bool val)
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0x10A526C", Offset = "0x10A526C", VA = "0x10A526C")]
	public void MainMenu()
	{
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0x10AB5EC", Offset = "0x10AB5EC", VA = "0x10AB5EC")]
	[IteratorStateMachine(typeof(<LeaveRoom>d__14))]
	private IEnumerator LeaveRoom()
	{
		return null;
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0x10AB688", Offset = "0x10AB688", VA = "0x10AB688", Slot = "38")]
	public override void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0x10AB730", Offset = "0x10AB730", VA = "0x10AB730")]
	private void Disconnect()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0x10AB7B0", Offset = "0x10AB7B0", VA = "0x10AB7B0")]
	public InGameMenuHandler()
	{
	}
}
[Token(Token = "0x2000191")]
public class InGamePurchaseHandler : MonoBehaviour
{
	[Token(Token = "0x2000192")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InGamePurchaseHandler <>4__this;

		[Token(Token = "0x170000E0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0x10AC04C", Offset = "0x10AC04C", VA = "0x10AC04C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0x10AC094", Offset = "0x10AC094", VA = "0x10AC094", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x10ABB5C", Offset = "0x10ABB5C", VA = "0x10ABB5C")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x10ABDD4", Offset = "0x10ABDD4", VA = "0x10ABDD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x10ABDD8", Offset = "0x10ABDD8", VA = "0x10ABDD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x10AC054", Offset = "0x10AC054", VA = "0x10AC054", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject purchaseObjs;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject instantiatedObj;

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0x10ABAE8", Offset = "0x10ABAE8", VA = "0x10ABAE8")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0x10ABB84", Offset = "0x10ABB84", VA = "0x10ABB84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0x10ABC04", Offset = "0x10ABC04", VA = "0x10ABC04")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0x10ABC84", Offset = "0x10ABC84", VA = "0x10ABC84")]
	private void PurchaseSuccessful()
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0x10ABDCC", Offset = "0x10ABDCC", VA = "0x10ABDCC")]
	public InGamePurchaseHandler()
	{
	}
}
[Token(Token = "0x2000193")]
public class Instantiater : MonoBehaviour, IOnEventCallback
{
	[Token(Token = "0x2000194")]
	public enum instantiateType
	{
		[Token(Token = "0x4000853")]
		KeyInstantiate,
		[Token(Token = "0x4000854")]
		FuseInstantiate,
		[Token(Token = "0x4000855")]
		AIInstantiate
	}

	[Token(Token = "0x2000196")]
	[CompilerGenerated]
	private sealed class <Start>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Instantiater <>4__this;

		[Token(Token = "0x170000E2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0x10AD08C", Offset = "0x10AD08C", VA = "0x10AD08C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0x10AD0D4", Offset = "0x10AD0D4", VA = "0x10AD0D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x10AC110", Offset = "0x10AC110", VA = "0x10AC110")]
		[DebuggerHidden]
		public <Start>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x10ACE34", Offset = "0x10ACE34", VA = "0x10ACE34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x10ACE38", Offset = "0x10ACE38", VA = "0x10ACE38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x10AD094", Offset = "0x10AD094", VA = "0x10AD094", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("gameObjectToInstantiate")]
	public List<GameObject> gameObjectsToInstantiate;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Transform> spawnPoints;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string tagName;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool instantiateAtStart;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool instantiateOnTrigger;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool destroyAfterInstantiating;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	private bool instantiated;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform instantiateAtPos;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool dontUseObjRot;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public instantiateType myType;

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0x10AC09C", Offset = "0x10AC09C", VA = "0x10AC09C")]
	[IteratorStateMachine(typeof(<Start>d__11))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0x10AC138", Offset = "0x10AC138", VA = "0x10AC138")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0x10AC304", Offset = "0x10AC304", VA = "0x10AC304")]
	private Transform RandomSpawnPoint(List<Transform> SpawnList)
	{
		return null;
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0x10AC17C", Offset = "0x10AC17C", VA = "0x10AC17C")]
	private void InstantiateObj()
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0x10AC3B4", Offset = "0x10AC3B4", VA = "0x10AC3B4")]
	[PunRPC]
	private void RPC_Instantiate()
	{
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0x10AC778", Offset = "0x10AC778", VA = "0x10AC778")]
	[PunRPC]
	private void RPC_InstantiateFuse()
	{
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0x10ACBEC", Offset = "0x10ACBEC", VA = "0x10ACBEC")]
	private void InstantiateStart()
	{
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0x10ACC10", Offset = "0x10ACC10", VA = "0x10ACC10", Slot = "4")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0x10ACC68", Offset = "0x10ACC68", VA = "0x10ACC68")]
	public Instantiater()
	{
	}
}
[Token(Token = "0x2000197")]
public class JailButton : MonoBehaviour
{
	[Token(Token = "0x2000198")]
	[CompilerGenerated]
	private sealed class <Timer>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public JailButton <>4__this;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <rate>5__2;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <i>5__3;

		[Token(Token = "0x170000E4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0x10ADA90", Offset = "0x10ADA90", VA = "0x10ADA90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0x10ADAD8", Offset = "0x10ADAD8", VA = "0x10ADAD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x10AD794", Offset = "0x10AD794", VA = "0x10AD794")]
		[DebuggerHidden]
		public <Timer>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x10AD7CC", Offset = "0x10AD7CC", VA = "0x10AD7CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x10AD7D0", Offset = "0x10AD7D0", VA = "0x10AD7D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x10ADA98", Offset = "0x10ADA98", VA = "0x10ADA98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image progressbar;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private JailManager _jailManager;

	[Token(Token = "0x6000AE1")]
	[Address(RVA = "0x10AD0DC", Offset = "0x10AD0DC", VA = "0x10AD0DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0x10AD178", Offset = "0x10AD178", VA = "0x10AD178")]
	public void OnButtonDown()
	{
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0x10AD268", Offset = "0x10AD268", VA = "0x10AD268")]
	private bool IsJailEmpty()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0x10AD5B8", Offset = "0x10AD5B8", VA = "0x10AD5B8")]
	public void OnButtonUp()
	{
	}

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0x10AD534", Offset = "0x10AD534", VA = "0x10AD534")]
	[IteratorStateMachine(typeof(<Timer>d__7))]
	private IEnumerator Timer(float time)
	{
		return null;
	}

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0x10AD7BC", Offset = "0x10AD7BC", VA = "0x10AD7BC")]
	public JailButton()
	{
	}
}
[Token(Token = "0x2000199")]
public class JailCheck : MonoBehaviour
{
	[Token(Token = "0x6000AED")]
	[Address(RVA = "0x10ADAE0", Offset = "0x10ADAE0", VA = "0x10ADAE0")]
	public JailCheck()
	{
	}
}
[Token(Token = "0x200019A")]
public class JailManager : MonoBehaviour, IOnEventCallback
{
	[Token(Token = "0x200019B")]
	[CompilerGenerated]
	private sealed class <StopAlarmSoundRoutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public JailManager <>4__this;

		[Token(Token = "0x170000E6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0x10AE218", Offset = "0x10AE218", VA = "0x10AE218", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B02")]
			[Address(RVA = "0x10AE260", Offset = "0x10AE260", VA = "0x10AE260", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x10ADEB0", Offset = "0x10ADEB0", VA = "0x10ADEB0")]
		[DebuggerHidden]
		public <StopAlarmSoundRoutine>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x10AE15C", Offset = "0x10AE15C", VA = "0x10AE15C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x10AE160", Offset = "0x10AE160", VA = "0x10AE160", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x10AE220", Offset = "0x10AE220", VA = "0x10AE220", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider playerSpawnArea;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider enemySpawnArea;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider jailSpawnArea;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Collider> jailEscapeSpawnAreas;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource alarmSound;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Transform> stoneTransforms;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Transform> cageStoneTransforms;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool forceJailEscape;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform aiTargetPos;

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0x10ADAE8", Offset = "0x10ADAE8", VA = "0x10ADAE8")]
	public Vector3 GetJailSpawnPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0x10ADCA4", Offset = "0x10ADCA4", VA = "0x10ADCA4")]
	public Vector3 GetJailEscapeSpawnPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0x10A6B90", Offset = "0x10A6B90", VA = "0x10A6B90")]
	public Vector3 GetPlayerSpawnPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0x10A6B88", Offset = "0x10A6B88", VA = "0x10A6B88")]
	public Vector3 GetEnemySpawnPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0x10ADD24", Offset = "0x10ADD24", VA = "0x10ADD24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0x10ADD7C", Offset = "0x10ADD7C", VA = "0x10ADD7C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0x10AD3B0", Offset = "0x10AD3B0", VA = "0x10AD3B0")]
	public void OnJailButtonPress()
	{
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0x10AD610", Offset = "0x10AD610", VA = "0x10AD610")]
	public void OnJailButtonRelease()
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0x10ADDD4", Offset = "0x10ADDD4", VA = "0x10ADDD4")]
	private void SyncAlarmSound()
	{
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0x10ADE88", Offset = "0x10ADE88", VA = "0x10ADE88")]
	private void StopAlarmSound()
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0x10ADE14", Offset = "0x10ADE14", VA = "0x10ADE14")]
	[IteratorStateMachine(typeof(<StopAlarmSoundRoutine>d__19))]
	private IEnumerator StopAlarmSoundRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0x10AD924", Offset = "0x10AD924", VA = "0x10AD924")]
	public void JailBreak()
	{
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0x10ADED8", Offset = "0x10ADED8", VA = "0x10ADED8", Slot = "4")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0x10ADAF0", Offset = "0x10ADAF0", VA = "0x10ADAF0")]
	private Vector3 GetSpawnPoint(Collider spawnPoint)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0x10AE054", Offset = "0x10AE054", VA = "0x10AE054")]
	public JailManager()
	{
	}
}
[Token(Token = "0x200019C")]
public class JumpScareManager : MonoBehaviour
{
	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource audioSource;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject scareObjs;

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0x10AE268", Offset = "0x10AE268", VA = "0x10AE268")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0x10AE2C0", Offset = "0x10AE2C0", VA = "0x10AE2C0")]
	public void StartJumpScare()
	{
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0x10AE2F4", Offset = "0x10AE2F4", VA = "0x10AE2F4")]
	public void StopJumpScare()
	{
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0x10AE314", Offset = "0x10AE314", VA = "0x10AE314")]
	public JumpScareManager()
	{
	}
}
[Token(Token = "0x200019D")]
public class KeyboardInput : MonoBehaviour, ISelectHandler, IEventSystemHandler
{
	[Token(Token = "0x200019E")]
	[CompilerGenerated]
	private sealed class <KeyBoardRoutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyboardInput <>4__this;

		[Token(Token = "0x170000E8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B10")]
			[Address(RVA = "0x10AE6F4", Offset = "0x10AE6F4", VA = "0x10AE6F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B12")]
			[Address(RVA = "0x10AE73C", Offset = "0x10AE73C", VA = "0x10AE73C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x10AE4B8", Offset = "0x10AE4B8", VA = "0x10AE4B8")]
		[DebuggerHidden]
		public <KeyBoardRoutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x10AE59C", Offset = "0x10AE59C", VA = "0x10AE59C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x10AE5A0", Offset = "0x10AE5A0", VA = "0x10AE5A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x10AE6FC", Offset = "0x10AE6FC", VA = "0x10AE6FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TouchScreenKeyboard keyboard;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField _inputField;

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0x10AE31C", Offset = "0x10AE31C", VA = "0x10AE31C")]
	public void OpenKeyBoard()
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0x10AE424", Offset = "0x10AE424", VA = "0x10AE424")]
	public void OpenNumPad()
	{
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0x10AE3B0", Offset = "0x10AE3B0", VA = "0x10AE3B0")]
	[IteratorStateMachine(typeof(<KeyBoardRoutine>d__4))]
	private IEnumerator KeyBoardRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0x10AE4E0", Offset = "0x10AE4E0", VA = "0x10AE4E0", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0x10AE584", Offset = "0x10AE584", VA = "0x10AE584")]
	public KeyboardInput()
	{
	}
}
[Token(Token = "0x200019F")]
public class Kitty : MonoBehaviour
{
	[Token(Token = "0x20001A0")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170000EA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0x10AE950", Offset = "0x10AE950", VA = "0x10AE950", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0x10AE998", Offset = "0x10AE998", VA = "0x10AE998", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x10AE7A4", Offset = "0x10AE7A4", VA = "0x10AE7A4")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x10AE7D4", Offset = "0x10AE7D4", VA = "0x10AE7D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x10AE7D8", Offset = "0x10AE7D8", VA = "0x10AE7D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x10AE958", Offset = "0x10AE958", VA = "0x10AE958", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0x10AE744", Offset = "0x10AE744", VA = "0x10AE744")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0x10AE7CC", Offset = "0x10AE7CC", VA = "0x10AE7CC")]
	public Kitty()
	{
	}
}
[Token(Token = "0x20001A1")]
public class KittyInstantiater : MonoBehaviour
{
	[Token(Token = "0x20001A3")]
	[CompilerGenerated]
	private sealed class <Start>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KittyInstantiater <>4__this;

		[Token(Token = "0x170000EE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0x10AF78C", Offset = "0x10AF78C", VA = "0x10AF78C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0x10AF7D4", Offset = "0x10AF7D4", VA = "0x10AF7D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x10AF43C", Offset = "0x10AF43C", VA = "0x10AF43C")]
		[DebuggerHidden]
		public <Start>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x10AF464", Offset = "0x10AF464", VA = "0x10AF464", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x10AF468", Offset = "0x10AF468", VA = "0x10AF468", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x10AF794", Offset = "0x10AF794", VA = "0x10AF794", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject AiToInstantiate;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Transform> WayPoints;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float waypointSearchRadius;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LayerMask WayPointMask;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LayerMask checkPlayerVisibilityMask;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float spawnDistanceFromPlayer;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string TimeToKittySpawn;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool canStartAI;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float startTime;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float spawnTime;

	[Token(Token = "0x170000EC")]
	private bool IsItTimeYet
	{
		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x10AE9A0", Offset = "0x10AE9A0", VA = "0x10AE9A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000ED")]
	private bool IsTimeToStartKnown
	{
		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x10AEA4C", Offset = "0x10AEA4C", VA = "0x10AEA4C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B1D")]
	[Address(RVA = "0x10AEAB4", Offset = "0x10AEAB4", VA = "0x10AEAB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B1E")]
	[Address(RVA = "0x10AEB6C", Offset = "0x10AEB6C", VA = "0x10AEB6C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0x10AEB90", Offset = "0x10AEB90", VA = "0x10AEB90")]
	[IteratorStateMachine(typeof(<Start>d__17))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0x10AEC04", Offset = "0x10AEC04", VA = "0x10AEC04")]
	private void SetGhostSpawnTime(float sec)
	{
	}

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0x10AE8F0", Offset = "0x10AE8F0", VA = "0x10AE8F0")]
	public void OnAIDestroy()
	{
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0x10AED10", Offset = "0x10AED10", VA = "0x10AED10")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0x10AF278", Offset = "0x10AF278", VA = "0x10AF278")]
	private bool CanPlayerSeeSpawn(Transform spawnPointPos, Transform playerPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0x10AF270", Offset = "0x10AF270", VA = "0x10AF270")]
	private bool IsItTooNearToPlayer(Transform spawnPointPos, Transform playerPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0x10AF0D8", Offset = "0x10AF0D8", VA = "0x10AF0D8")]
	private bool CheckGhostConditionsForSpawn()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0x10AF280", Offset = "0x10AF280", VA = "0x10AF280")]
	public KittyInstantiater()
	{
	}
}
[Token(Token = "0x20001A4")]
public class KittyToy : MonoBehaviour
{
	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView photonView;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string cuteItemCount;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NetworkedGrabbable _grabbable;

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0x10AF7DC", Offset = "0x10AF7DC", VA = "0x10AF7DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0x10AF86C", Offset = "0x10AF86C", VA = "0x10AF86C")]
	public void DestoySelf()
	{
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0x10AF958", Offset = "0x10AF958", VA = "0x10AF958")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0x10AFD08", Offset = "0x10AFD08", VA = "0x10AFD08")]
	[PunRPC]
	private void DestroyObj()
	{
	}

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0x10AFDBC", Offset = "0x10AFDBC", VA = "0x10AFDBC")]
	public KittyToy()
	{
	}
}
[Token(Token = "0x20001A5")]
public class KittyToyInstantiater : MonoBehaviour
{
	[Token(Token = "0x20001A7")]
	[CompilerGenerated]
	private sealed class <Start>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KittyToyInstantiater <>4__this;

		[Token(Token = "0x170000F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B47")]
			[Address(RVA = "0x10B0A8C", Offset = "0x10B0A8C", VA = "0x10B0A8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0x10B0AD4", Offset = "0x10B0AD4", VA = "0x10B0AD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x10B007C", Offset = "0x10B007C", VA = "0x10B007C")]
		[DebuggerHidden]
		public <Start>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x10B076C", Offset = "0x10B076C", VA = "0x10B076C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x10B0770", Offset = "0x10B0770", VA = "0x10B0770", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x10B0A94", Offset = "0x10B0A94", VA = "0x10B0A94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] ObjsToInstantiate;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float waypointSearchRadius;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask WayPointMask;

	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LayerMask checkPlayerVisibilityMask;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Transform> WayPoints;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float spawnDistanceFromPlayer;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string TimeToKittySpawn;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canStartAI;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float startTime;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float spawnTime;

	[Token(Token = "0x170000F0")]
	private bool IsItTimeYet
	{
		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x10AFE14", Offset = "0x10AFE14", VA = "0x10AFE14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F1")]
	private bool IsTimeToStartKnown
	{
		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x10AFEC4", Offset = "0x10AFEC4", VA = "0x10AFEC4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0x10AFF30", Offset = "0x10AFF30", VA = "0x10AFF30")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0x10AFFEC", Offset = "0x10AFFEC", VA = "0x10AFFEC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0x10B0008", Offset = "0x10B0008", VA = "0x10B0008")]
	[IteratorStateMachine(typeof(<Start>d__17))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0x10B00A4", Offset = "0x10B00A4", VA = "0x10B00A4")]
	private void SetGhostSpawnTime(float sec)
	{
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0x10B01B0", Offset = "0x10B01B0", VA = "0x10B01B0")]
	public void OnAIDestroy()
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0x10B0210", Offset = "0x10B0210", VA = "0x10B0210")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0x10B05A0", Offset = "0x10B05A0", VA = "0x10B05A0")]
	private bool CanPlayerSeeSpawn(Transform spawnPointPos, Transform playerPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0x10B05A8", Offset = "0x10B05A8", VA = "0x10B05A8")]
	private bool IsItTooNearToPlayer(Transform spawnPointPos, Transform playerPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0x10B043C", Offset = "0x10B043C", VA = "0x10B043C")]
	private bool CheckGhostConditionsForSpawn()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0x10B05B0", Offset = "0x10B05B0", VA = "0x10B05B0")]
	public KittyToyInstantiater()
	{
	}
}
[Token(Token = "0x20001A8")]
public class Level0ExitHandler : MonoBehaviour, IOnEventCallback
{
	[Token(Token = "0x20001A9")]
	[CompilerGenerated]
	private sealed class <LoadLevelRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Level0ExitHandler <>4__this;

		[Token(Token = "0x170000F4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0x10B1744", Offset = "0x10B1744", VA = "0x10B1744", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0x10B178C", Offset = "0x10B178C", VA = "0x10B178C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x10B0FA4", Offset = "0x10B0FA4", VA = "0x10B0FA4")]
		[DebuggerHidden]
		public <LoadLevelRoutine>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x10B153C", Offset = "0x10B153C", VA = "0x10B153C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x10B1540", Offset = "0x10B1540", VA = "0x10B1540", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x10B174C", Offset = "0x10B174C", VA = "0x10B174C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isStayingInTrigger;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private InfoHandler infoHandler;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool allPlayersRequired;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool LoadingScene;

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0x10B0ADC", Offset = "0x10B0ADC", VA = "0x10B0ADC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0x10B0B94", Offset = "0x10B0B94", VA = "0x10B0B94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0x10B0BEC", Offset = "0x10B0BEC", VA = "0x10B0BEC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0x10B0C44", Offset = "0x10B0C44", VA = "0x10B0C44")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0x10B0E68", Offset = "0x10B0E68", VA = "0x10B0E68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0x10AFB48", Offset = "0x10AFB48", VA = "0x10AFB48")]
	public void LoadNextLevel()
	{
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0x10B0E84", Offset = "0x10B0E84", VA = "0x10B0E84")]
	private void LoadLevel()
	{
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0x10B0F30", Offset = "0x10B0F30", VA = "0x10B0F30")]
	[IteratorStateMachine(typeof(<LoadLevelRoutine>d__12))]
	private IEnumerator LoadLevelRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0x10B0FCC", Offset = "0x10B0FCC", VA = "0x10B0FCC")]
	private void CloseRoom()
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0x10B1164", Offset = "0x10B1164", VA = "0x10B1164")]
	private void OnCloseRoomEvent()
	{
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0x10B1230", Offset = "0x10B1230", VA = "0x10B1230")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0x10B1358", Offset = "0x10B1358", VA = "0x10B1358")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0x10B13BC", Offset = "0x10B13BC", VA = "0x10B13BC", Slot = "4")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0x10B152C", Offset = "0x10B152C", VA = "0x10B152C")]
	public Level0ExitHandler()
	{
	}
}
[Token(Token = "0x20001AA")]
public class LevelExitSpawner : MonoBehaviour
{
	[Token(Token = "0x20001AC")]
	[CompilerGenerated]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LevelExitSpawner <>4__this;

		[Token(Token = "0x170000F6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B67")]
			[Address(RVA = "0x10B1BBC", Offset = "0x10B1BBC", VA = "0x10B1BBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B69")]
			[Address(RVA = "0x10B1C04", Offset = "0x10B1C04", VA = "0x10B1C04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x10B1808", Offset = "0x10B1808", VA = "0x10B1808")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x10B19EC", Offset = "0x10B19EC", VA = "0x10B19EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x10B19F0", Offset = "0x10B19F0", VA = "0x10B19F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x10B1BC4", Offset = "0x10B1BC4", VA = "0x10B1BC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DisableOnEnable[] exitObjs;

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0x10B1794", Offset = "0x10B1794", VA = "0x10B1794")]
	[IteratorStateMachine(typeof(<Start>d__1))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0x10B1830", Offset = "0x10B1830", VA = "0x10B1830")]
	private string GetLevelProperty()
	{
		return null;
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0x10B18F0", Offset = "0x10B18F0", VA = "0x10B18F0")]
	public LevelExitSpawner()
	{
	}
}
[Token(Token = "0x20001AD")]
public class LevelRestartHandler : MonoBehaviour
{
	[Token(Token = "0x20001AE")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LevelRestartHandler <>4__this;

		[Token(Token = "0x170000F8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0x10B2080", Offset = "0x10B2080", VA = "0x10B2080", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B75")]
			[Address(RVA = "0x10B20C8", Offset = "0x10B20C8", VA = "0x10B20C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x10B1D3C", Offset = "0x10B1D3C", VA = "0x10B1D3C")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x10B1FC4", Offset = "0x10B1FC4", VA = "0x10B1FC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x10B1FC8", Offset = "0x10B1FC8", VA = "0x10B1FC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x10B2088", Offset = "0x10B2088", VA = "0x10B2088", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001AF")]
	[CompilerGenerated]
	private sealed class <ResetBool>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LevelRestartHandler <>4__this;

		[Token(Token = "0x170000FA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B79")]
			[Address(RVA = "0x10B2188", Offset = "0x10B2188", VA = "0x10B2188", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0x10B21D0", Offset = "0x10B21D0", VA = "0x10B21D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x10B1F94", Offset = "0x10B1F94", VA = "0x10B1F94")]
		[DebuggerHidden]
		public <ResetBool>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x10B20D0", Offset = "0x10B20D0", VA = "0x10B20D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x10B20D4", Offset = "0x10B20D4", VA = "0x10B20D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x10B2190", Offset = "0x10B2190", VA = "0x10B2190", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isRestarting;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool hasLevelStarted;

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0x10B1C0C", Offset = "0x10B1C0C", VA = "0x10B1C0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0x10B1CC8", Offset = "0x10B1CC8", VA = "0x10B1CC8")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0x10B1D64", Offset = "0x10B1D64", VA = "0x10B1D64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0x10B1D80", Offset = "0x10B1D80", VA = "0x10B1D80")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0x10B1F20", Offset = "0x10B1F20", VA = "0x10B1F20")]
	[IteratorStateMachine(typeof(<ResetBool>d__7))]
	private IEnumerator ResetBool()
	{
		return null;
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0x10B1FBC", Offset = "0x10B1FBC", VA = "0x10B1FBC")]
	public LevelRestartHandler()
	{
	}
}
[Token(Token = "0x20001B0")]
public class LoadEscapeGame : MonoBehaviour
{
	[Token(Token = "0x20001B1")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170000FC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B81")]
			[Address(RVA = "0x10B2400", Offset = "0x10B2400", VA = "0x10B2400", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B83")]
			[Address(RVA = "0x10B2448", Offset = "0x10B2448", VA = "0x10B2448", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x10B2238", Offset = "0x10B2238", VA = "0x10B2238")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x10B2268", Offset = "0x10B2268", VA = "0x10B2268", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x10B226C", Offset = "0x10B226C", VA = "0x10B226C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x10B2408", Offset = "0x10B2408", VA = "0x10B2408", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000B7C")]
	[Address(RVA = "0x10B21D8", Offset = "0x10B21D8", VA = "0x10B21D8")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000B7D")]
	[Address(RVA = "0x10B2260", Offset = "0x10B2260", VA = "0x10B2260")]
	public LoadEscapeGame()
	{
	}
}
[Token(Token = "0x20001B2")]
public class LoadingCircle : MonoBehaviour
{
	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform rectComponent;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float rotateSpeed;

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0x10B2450", Offset = "0x10B2450", VA = "0x10B2450")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0x10B24A8", Offset = "0x10B24A8", VA = "0x10B24A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0x10B24E8", Offset = "0x10B24E8", VA = "0x10B24E8")]
	public LoadingCircle()
	{
	}
}
[Token(Token = "0x20001B3")]
public class MainMenuSkinHandler : MonoBehaviour
{
	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer[] hazmatRenderers;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materials;

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0x10B24F8", Offset = "0x10B24F8", VA = "0x10B24F8")]
	public void ChooseSkin(string val)
	{
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x10B24FC", Offset = "0x10B24FC", VA = "0x10B24FC")]
	public void DisplaySkin(int val)
	{
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x10B258C", Offset = "0x10B258C", VA = "0x10B258C")]
	public MainMenuSkinHandler()
	{
	}
}
[Token(Token = "0x20001B4")]
public class MainMenuUiHandler : MonoBehaviour
{
	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField PlayerNameInputTxt;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayNamePanel;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text DisplayNameTxt;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI NameWarningText;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject EnterNameObj;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ShopPanel;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject UpdateDialog;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject noInternetDialog;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject audioPermissionDialog;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI announcementsText;

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0x10B2594", Offset = "0x10B2594", VA = "0x10B2594")]
	public void SetAnnouncementsText(string val)
	{
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x10B25B8", Offset = "0x10B25B8", VA = "0x10B25B8")]
	public void OpenDiscord()
	{
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x10B25FC", Offset = "0x10B25FC", VA = "0x10B25FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x10B2680", Offset = "0x10B2680", VA = "0x10B2680")]
	public void AcceptAudioPermission()
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0x10B26FC", Offset = "0x10B26FC", VA = "0x10B26FC")]
	public void ShowUpdateDialog(float val)
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0x10B27E0", Offset = "0x10B27E0", VA = "0x10B27E0")]
	public void EditName_BtnClick()
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0x10B27E4", Offset = "0x10B27E4", VA = "0x10B27E4")]
	public void OnEnterName_BtnClick()
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0x10B2A30", Offset = "0x10B2A30", VA = "0x10B2A30")]
	private void ShowName()
	{
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0x10B2BF8", Offset = "0x10B2BF8", VA = "0x10B2BF8")]
	public MainMenuUiHandler()
	{
	}
}
[Token(Token = "0x20001B5")]
public class NameCanvas : MonoBehaviour
{
	[Token(Token = "0x20001B6")]
	[CompilerGenerated]
	private sealed class <FindPlayerState>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NameCanvas <>4__this;

		[Token(Token = "0x170000FF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B9D")]
			[Address(RVA = "0x10B3328", Offset = "0x10B3328", VA = "0x10B3328", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0x10B3370", Offset = "0x10B3370", VA = "0x10B3370", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x10B2E34", Offset = "0x10B2E34", VA = "0x10B2E34")]
		[DebuggerHidden]
		public <FindPlayerState>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x10B3128", Offset = "0x10B3128", VA = "0x10B3128", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x10B312C", Offset = "0x10B312C", VA = "0x10B312C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x10B3330", Offset = "0x10B3330", VA = "0x10B3330", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView photonView;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI nameTxt;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject speakingIndicator;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IDissonancePlayer _player;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VoicePlayerState _state;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform playerTransform;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform posYTransform;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform posXZTransform;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float yOffSet;

	[Token(Token = "0x170000FE")]
	private bool IsSpeaking
	{
		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x10B2C00", Offset = "0x10B2C00", VA = "0x10B2C00")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0x10B2CD0", Offset = "0x10B2CD0", VA = "0x10B2CD0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0x10B2E2C", Offset = "0x10B2E2C", VA = "0x10B2E2C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0x10B2DB8", Offset = "0x10B2DB8", VA = "0x10B2DB8")]
	[IteratorStateMachine(typeof(<FindPlayerState>d__13))]
	private IEnumerator FindPlayerState()
	{
		return null;
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0x10B2E5C", Offset = "0x10B2E5C", VA = "0x10B2E5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0x10B2F14", Offset = "0x10B2F14", VA = "0x10B2F14")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0x10B3114", Offset = "0x10B3114", VA = "0x10B3114")]
	public NameCanvas()
	{
	}
}
[Token(Token = "0x20001B7")]
public class NetworkHandler : MonoBehaviourPunCallbacks, IPunObservable
{
	[Token(Token = "0x20001B9")]
	[CompilerGenerated]
	private sealed class <Start>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkHandler <>4__this;

		[Token(Token = "0x17000103")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BB8")]
			[Address(RVA = "0x10B4480", Offset = "0x10B4480", VA = "0x10B4480", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000104")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BBA")]
			[Address(RVA = "0x10B44C8", Offset = "0x10B44C8", VA = "0x10B44C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x10B3674", Offset = "0x10B3674", VA = "0x10B3674")]
		[DebuggerHidden]
		public <Start>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x10B4248", Offset = "0x10B4248", VA = "0x10B4248", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x10B424C", Offset = "0x10B424C", VA = "0x10B424C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x10B4488", Offset = "0x10B4488", VA = "0x10B4488", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool focusLost;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool HasClientRequestedForMaster;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool IsMasterSending;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private double timeToStart;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private double SecondsToCloseRoom;

	[Token(Token = "0x17000101")]
	private bool IsItTimeYet
	{
		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x10B3378", Offset = "0x10B3378", VA = "0x10B3378")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000102")]
	private bool IsTimeToStartKnown
	{
		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x10B33F8", Offset = "0x10B33F8", VA = "0x10B33F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BA2")]
	[Address(RVA = "0x10B3410", Offset = "0x10B3410", VA = "0x10B3410", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000BA3")]
	[Address(RVA = "0x10B3508", Offset = "0x10B3508", VA = "0x10B3508", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000BA4")]
	[Address(RVA = "0x10B3600", Offset = "0x10B3600", VA = "0x10B3600")]
	[IteratorStateMachine(typeof(<Start>d__11))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000BA5")]
	[Address(RVA = "0x10B369C", Offset = "0x10B369C", VA = "0x10B369C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BA6")]
	[Address(RVA = "0x10B38A0", Offset = "0x10B38A0", VA = "0x10B38A0")]
	private void CloseRoom()
	{
	}

	[Token(Token = "0x6000BA7")]
	[Address(RVA = "0x10B3960", Offset = "0x10B3960", VA = "0x10B3960")]
	[PunRPC]
	private void RPC_RequestMasterClientAccess(int actorNumber)
	{
	}

	[Token(Token = "0x6000BA8")]
	[Address(RVA = "0x10B3A08", Offset = "0x10B3A08", VA = "0x10B3A08", Slot = "54")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0x10B3AE4", Offset = "0x10B3AE4", VA = "0x10B3AE4")]
	private void MasterTimeoutDetectRoutine()
	{
	}

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0x10B3D5C", Offset = "0x10B3D5C", VA = "0x10B3D5C", Slot = "32")]
	public override void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000BAB")]
	[Address(RVA = "0x10B3DEC", Offset = "0x10B3DEC", VA = "0x10B3DEC")]
	private void LostFocus()
	{
	}

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0x10B3DF4", Offset = "0x10B3DF4", VA = "0x10B3DF4")]
	private void Disconnect()
	{
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0x10B3E44", Offset = "0x10B3E44", VA = "0x10B3E44")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0x10B3FD0", Offset = "0x10B3FD0", VA = "0x10B3FD0")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000BAF")]
	[Address(RVA = "0x10B3EFC", Offset = "0x10B3EFC", VA = "0x10B3EFC")]
	private void DropItems()
	{
	}

	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0x10B4078", Offset = "0x10B4078", VA = "0x10B4078", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0x10B4140", Offset = "0x10B4140", VA = "0x10B4140")]
	public NetworkHandler()
	{
	}
}
[Token(Token = "0x20001BA")]
public class OculusAudioSrcLinker : MonoBehaviour
{
	[Token(Token = "0x20001BB")]
	[CompilerGenerated]
	private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OculusAudioSrcLinker <>4__this;

		[Token(Token = "0x17000105")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0x10B47C4", Offset = "0x10B47C4", VA = "0x10B47C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000106")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0x10B480C", Offset = "0x10B480C", VA = "0x10B480C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x10B4544", Offset = "0x10B4544", VA = "0x10B4544")]
		[DebuggerHidden]
		public <Start>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x10B4574", Offset = "0x10B4574", VA = "0x10B4574", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x10B4578", Offset = "0x10B4578", VA = "0x10B4578", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x10B47CC", Offset = "0x10B47CC", VA = "0x10B47CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DissonanceComms comms;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IDissonancePlayer player;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource src;

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0x10B44D0", Offset = "0x10B44D0", VA = "0x10B44D0")]
	[IteratorStateMachine(typeof(<Start>d__3))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0x10B456C", Offset = "0x10B456C", VA = "0x10B456C")]
	public OculusAudioSrcLinker()
	{
	}
}
[Token(Token = "0x20001BC")]
public class OnCollsionStay : MonoBehaviour
{
	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0x10B4814", Offset = "0x10B4814", VA = "0x10B4814")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x10B4888", Offset = "0x10B4888", VA = "0x10B4888")]
	public OnCollsionStay()
	{
	}
}
[Token(Token = "0x20001BD")]
public class PhotonDestroy : MonoBehaviour
{
	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x10B4890", Offset = "0x10B4890", VA = "0x10B4890")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x10B4924", Offset = "0x10B4924", VA = "0x10B4924")]
	public PhotonDestroy()
	{
	}
}
[Token(Token = "0x20001BE")]
public class PlayAudioRandom : MonoBehaviour
{
	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource audio;

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x10B492C", Offset = "0x10B492C", VA = "0x10B492C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x10B4984", Offset = "0x10B4984", VA = "0x10B4984")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0x10B49D4", Offset = "0x10B49D4", VA = "0x10B49D4")]
	public PlayAudioRandom()
	{
	}
}
[Token(Token = "0x20001BF")]
public class PlayerAbilityModifier : MonoBehaviour
{
	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string teamName;

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0x10B49DC", Offset = "0x10B49DC", VA = "0x10B49DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0x10B4C08", Offset = "0x10B4C08", VA = "0x10B4C08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0x10B4ADC", Offset = "0x10B4ADC", VA = "0x10B4ADC")]
	private void AssignToken(string teamName)
	{
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0x10B4C10", Offset = "0x10B4C10", VA = "0x10B4C10")]
	private void RemoveToken(string teamName)
	{
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0x10B4D3C", Offset = "0x10B4D3C", VA = "0x10B4D3C")]
	public PlayerAbilityModifier()
	{
	}
}
[Token(Token = "0x20001C0")]
public class PlayerDamage : MonoBehaviour
{
	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0x10B4D94", Offset = "0x10B4D94", VA = "0x10B4D94")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0x10B4F0C", Offset = "0x10B4F0C", VA = "0x10B4F0C")]
	public PlayerDamage()
	{
	}
}
[Token(Token = "0x20001C1")]
public class PlayerListData : MonoBehaviour
{
	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject muteImage;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject speakImage;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI playerText;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.UI.Button muteButton;

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0x10B4F14", Offset = "0x10B4F14", VA = "0x10B4F14")]
	public PlayerListData()
	{
	}
}
[Token(Token = "0x20001C2")]
public class PlayerListHandler : MonoBehaviour
{
	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject playerBlock;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> tempObjs;

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0x10B4F1C", Offset = "0x10B4F1C", VA = "0x10B4F1C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0x10B52EC", Offset = "0x10B52EC", VA = "0x10B52EC")]
	private void onBtnClick(string dissonanceID, PlayerListData playerData)
	{
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0x10B5554", Offset = "0x10B5554", VA = "0x10B5554")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0x10B56EC", Offset = "0x10B56EC", VA = "0x10B56EC")]
	public PlayerListHandler()
	{
	}
}
[Token(Token = "0x20001C4")]
public class PlayerManager : MonoBehaviour
{
	[Token(Token = "0x20001C6")]
	[CompilerGenerated]
	private sealed class <Start>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerManager <>4__this;

		[Token(Token = "0x17000107")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C01")]
			[Address(RVA = "0x10B7C20", Offset = "0x10B7C20", VA = "0x10B7C20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0x10B7C68", Offset = "0x10B7C68", VA = "0x10B7C68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x10B5CF4", Offset = "0x10B5CF4", VA = "0x10B5CF4")]
		[DebuggerHidden]
		public <Start>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x10B79BC", Offset = "0x10B79BC", VA = "0x10B79BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x10B79C0", Offset = "0x10B79C0", VA = "0x10B79C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x10B7C28", Offset = "0x10B7C28", VA = "0x10B7C28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C7")]
	[CompilerGenerated]
	private sealed class <fadeOutWithDelay>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delaySeconds;

		[Token(Token = "0x17000109")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C07")]
			[Address(RVA = "0x10B7D64", Offset = "0x10B7D64", VA = "0x10B7D64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0x10B7DAC", Offset = "0x10B7DAC", VA = "0x10B7DAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x10B6074", Offset = "0x10B6074", VA = "0x10B6074")]
		[DebuggerHidden]
		public <fadeOutWithDelay>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x10B7C70", Offset = "0x10B7C70", VA = "0x10B7C70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x10B7C74", Offset = "0x10B7C74", VA = "0x10B7C74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x10B7D6C", Offset = "0x10B7D6C", VA = "0x10B7D6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C8")]
	[CompilerGenerated]
	private sealed class <JumpScareRoutine>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerManager <>4__this;

		[Token(Token = "0x1700010B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0x10B7F5C", Offset = "0x10B7F5C", VA = "0x10B7F5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C0F")]
			[Address(RVA = "0x10B7FA4", Offset = "0x10B7FA4", VA = "0x10B7FA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x10B6E3C", Offset = "0x10B6E3C", VA = "0x10B6E3C")]
		[DebuggerHidden]
		public <JumpScareRoutine>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x10B7DB4", Offset = "0x10B7DB4", VA = "0x10B7DB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x10B7DB8", Offset = "0x10B7DB8", VA = "0x10B7DB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x10B7F64", Offset = "0x10B7F64", VA = "0x10B7F64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C9")]
	[CompilerGenerated]
	private sealed class <ResetPositionRoutine>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerManager <>4__this;

		[Token(Token = "0x1700010D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0x10B8108", Offset = "0x10B8108", VA = "0x10B8108", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0x10B8150", Offset = "0x10B8150", VA = "0x10B8150", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x10B7428", Offset = "0x10B7428", VA = "0x10B7428")]
		[DebuggerHidden]
		public <ResetPositionRoutine>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x10B7FAC", Offset = "0x10B7FAC", VA = "0x10B7FAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x10B7FB0", Offset = "0x10B7FB0", VA = "0x10B7FB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x10B8110", Offset = "0x10B8110", VA = "0x10B8110", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001CA")]
	[CompilerGenerated]
	private sealed class <StallRoutine>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerManager <>4__this;

		[Token(Token = "0x1700010F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x10B82A4", Offset = "0x10B82A4", VA = "0x10B82A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x10B82EC", Offset = "0x10B82EC", VA = "0x10B82EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x10B74C4", Offset = "0x10B74C4", VA = "0x10B74C4")]
		[DebuggerHidden]
		public <StallRoutine>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x10B8158", Offset = "0x10B8158", VA = "0x10B8158", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x10B815C", Offset = "0x10B815C", VA = "0x10B815C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x10B82AC", Offset = "0x10B82AC", VA = "0x10B82AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject deathCanvas;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject menuCanvas;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isDead;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeRemaining;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool timerIsRunning;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI timeText;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RemotePlayerInstantiater RemotePlayerInstantiater;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Camera[] cameras;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private JumpScareManager jumpScareManager;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool canRevive;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool isInJail;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	private bool isSkinEnabled;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SmoothLocomotion _smoothLocomotion;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ArmSwingLocomotion _armSwingLocomotion;

	[Token(Token = "0x14000013")]
	public static event Action HighLightEvent
	{
		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x10B5790", Offset = "0x10B5790", VA = "0x10B5790")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x10B5848", Offset = "0x10B5848", VA = "0x10B5848")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public static event Action onDeath
	{
		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x10B5900", Offset = "0x10B5900", VA = "0x10B5900")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x10B59BC", Offset = "0x10B59BC", VA = "0x10B59BC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	public static event Action onRevive
	{
		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x10B5A78", Offset = "0x10B5A78", VA = "0x10B5A78")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x10B5B34", Offset = "0x10B5B34", VA = "0x10B5B34")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0x10B5BF0", Offset = "0x10B5BF0", VA = "0x10B5BF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0x10B5C80", Offset = "0x10B5C80", VA = "0x10B5C80")]
	[IteratorStateMachine(typeof(<Start>d__24))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0x10B5D1C", Offset = "0x10B5D1C", VA = "0x10B5D1C")]
	private void TeleportPlayer()
	{
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0x10B6004", Offset = "0x10B6004", VA = "0x10B6004")]
	[IteratorStateMachine(typeof(<fadeOutWithDelay>d__26))]
	private IEnumerator fadeOutWithDelay(float delaySeconds)
	{
		return null;
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0x10B609C", Offset = "0x10B609C", VA = "0x10B609C")]
	private void TeleportPlayerToLocation(Vector3 pos)
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0x10B61A8", Offset = "0x10B61A8", VA = "0x10B61A8")]
	private void EnableMovement()
	{
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0x10B61E0", Offset = "0x10B61E0", VA = "0x10B61E0")]
	private void DisableMovement()
	{
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0x10B621C", Offset = "0x10B621C", VA = "0x10B621C")]
	private void HandleHMDMounted()
	{
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0x10B6220", Offset = "0x10B6220", VA = "0x10B6220")]
	private void HandleHMDUnmounted()
	{
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0x10B6224", Offset = "0x10B6224", VA = "0x10B6224")]
	private void EnableRenderer()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0x10B636C", Offset = "0x10B636C", VA = "0x10B636C")]
	private void DisableRenderer()
	{
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0x10B64B0", Offset = "0x10B64B0", VA = "0x10B64B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0x10B66A8", Offset = "0x10B66A8", VA = "0x10B66A8")]
	private void DisplayTime(float timeToDisplay)
	{
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0x10B6AB4", Offset = "0x10B6AB4", VA = "0x10B6AB4")]
	public void Die()
	{
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0x10B6CFC", Offset = "0x10B6CFC", VA = "0x10B6CFC")]
	private void DestroyRemotePlayer()
	{
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0x10B6DC8", Offset = "0x10B6DC8", VA = "0x10B6DC8")]
	[IteratorStateMachine(typeof(<JumpScareRoutine>d__38))]
	private IEnumerator JumpScareRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0x10B6884", Offset = "0x10B6884", VA = "0x10B6884")]
	private void Revive()
	{
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0x10B6E64", Offset = "0x10B6E64", VA = "0x10B6E64")]
	private static bool IsInfinityOrNaN(Vector3 v)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0x10B7024", Offset = "0x10B7024", VA = "0x10B7024")]
	private void RespawnPlayer()
	{
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0x10B71CC", Offset = "0x10B71CC", VA = "0x10B71CC")]
	public void EscapeJail()
	{
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0x10B7334", Offset = "0x10B7334", VA = "0x10B7334")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0x10B73B4", Offset = "0x10B73B4", VA = "0x10B73B4")]
	[IteratorStateMachine(typeof(<ResetPositionRoutine>d__44))]
	private IEnumerator ResetPositionRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0x10B7450", Offset = "0x10B7450", VA = "0x10B7450")]
	[IteratorStateMachine(typeof(<StallRoutine>d__45))]
	private IEnumerator StallRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0x10B4E88", Offset = "0x10B4E88", VA = "0x10B4E88")]
	public void Stall()
	{
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0x10B74EC", Offset = "0x10B74EC", VA = "0x10B74EC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0x10B666C", Offset = "0x10B666C", VA = "0x10B666C")]
	private void ToggleMenu()
	{
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0x10B74F0", Offset = "0x10B74F0", VA = "0x10B74F0")]
	public void OnTagged()
	{
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0x10B76DC", Offset = "0x10B76DC", VA = "0x10B76DC")]
	public void ResetToPlayer()
	{
	}

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0x10B78B0", Offset = "0x10B78B0", VA = "0x10B78B0")]
	public PlayerManager()
	{
	}
}
[Token(Token = "0x20001CB")]
public class ProceduralStairsOntrigger : MonoBehaviour
{
	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject stairPrefab;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject generatedUpperStair;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject generatedLowerStair;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isLowerStair;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool isUpperStair;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private StairCleaner _stairCleaner;

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0x10B82F4", Offset = "0x10B82F4", VA = "0x10B82F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0x10B834C", Offset = "0x10B834C", VA = "0x10B834C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0x10B8658", Offset = "0x10B8658", VA = "0x10B8658")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0x10B892C", Offset = "0x10B892C", VA = "0x10B892C")]
	public ProceduralStairsOntrigger()
	{
	}
}
[Token(Token = "0x20001CC")]
public class PurchaseManager : Singleton<PurchaseManager>
{
	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Supporter;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool RedSkin;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool NightRanger;

	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool SurvivorGirl;

	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool SurvivorMan;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool Kitty;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool PartyPooper;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public bool PartyPooperNaked;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool WhiteSkin;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool PartyGoer;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool isPurchasingSkin;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool isReadComplete;

	[Token(Token = "0x14000016")]
	public static event Action OnRefreshProducts
	{
		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x10B8934", Offset = "0x10B8934", VA = "0x10B8934")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x10B89EC", Offset = "0x10B89EC", VA = "0x10B89EC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0x10B8AA4", Offset = "0x10B8AA4", VA = "0x10B8AA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0x10B8BD0", Offset = "0x10B8BD0", VA = "0x10B8BD0")]
	public void AuthComplete()
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0x10B8BD4", Offset = "0x10B8BD4", VA = "0x10B8BD4")]
	private void ReadDb()
	{
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0x10B8DC8", Offset = "0x10B8DC8", VA = "0x10B8DC8")]
	public void FirstWriteToDatabase()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0x10B91B8", Offset = "0x10B91B8", VA = "0x10B91B8")]
	public void SkinPurchase(string skinName, int skinCost)
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0x10B94D4", Offset = "0x10B94D4", VA = "0x10B94D4")]
	public void AddSupporterPack(bool addCoins)
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0x10B98A0", Offset = "0x10B98A0", VA = "0x10B98A0")]
	public void AddCoinsToDatabase(int clipCoins)
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0x10B9BF0", Offset = "0x10B9BF0", VA = "0x10B9BF0")]
	public PurchaseManager()
	{
	}
}
[Token(Token = "0x20001CF")]
public class PushToTalk : MonoBehaviour
{
	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VoiceBroadcastTrigger voiceBroadcastTrigger;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PhotonView pv;

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0x10BA888", Offset = "0x10BA888", VA = "0x10BA888")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x10BA970", Offset = "0x10BA970", VA = "0x10BA970")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x10BAA04", Offset = "0x10BAA04", VA = "0x10BAA04")]
	public PushToTalk()
	{
	}
}
[Token(Token = "0x20001D0")]
public class ReferenceHolder : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x20001D2")]
	[CompilerGenerated]
	private sealed class <Start>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ReferenceHolder <>4__this;

		[Token(Token = "0x17000111")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x10BB320", Offset = "0x10BB320", VA = "0x10BB320", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x10BB368", Offset = "0x10BB368", VA = "0x10BB368", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x10BABA4", Offset = "0x10BABA4", VA = "0x10BABA4")]
		[DebuggerHidden]
		public <Start>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x10BB100", Offset = "0x10BB100", VA = "0x10BB100", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x10BB104", Offset = "0x10BB104", VA = "0x10BB104", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x10BB328", Offset = "0x10BB328", VA = "0x10BB328", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D3")]
	[CompilerGenerated]
	private sealed class <SetUpDissonance>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ReferenceHolder <>4__this;

		[Token(Token = "0x17000113")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C48")]
			[Address(RVA = "0x10BB550", Offset = "0x10BB550", VA = "0x10BB550", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0x10BB598", Offset = "0x10BB598", VA = "0x10BB598", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x10BAC40", Offset = "0x10BAC40", VA = "0x10BAC40")]
		[DebuggerHidden]
		public <SetUpDissonance>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x10BB370", Offset = "0x10BB370", VA = "0x10BB370", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x10BB374", Offset = "0x10BB374", VA = "0x10BB374", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x10BB558", Offset = "0x10BB558", VA = "0x10BB558", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform leftHand;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rightHand;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform PlayerTransform;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform RemotePlayerTransform;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform characterHead;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform vrikCharacter;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public HandController leftController;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public HandController rightController;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Grabber leftGrabber;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Grabber rightGrabber;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public DissonanceComms dissonanceComms;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform enemySpawnPoint;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<Transform> wayPoints;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<Transform> randomSpawnPoints;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<Collider> spawnAreas;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform payRoomSpawnPoint;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<Transform> Keyspawns;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<Transform> FuseSpawns;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public AudioSource musicSrc;

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x10BAA0C", Offset = "0x10BAA0C", VA = "0x10BAA0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x10BAB30", Offset = "0x10BAB30", VA = "0x10BAB30")]
	[IteratorStateMachine(typeof(<Start>d__20))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0x10BABCC", Offset = "0x10BABCC", VA = "0x10BABCC")]
	[IteratorStateMachine(typeof(<SetUpDissonance>d__21))]
	private IEnumerator SetUpDissonance()
	{
		return null;
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0x10B5E54", Offset = "0x10B5E54", VA = "0x10B5E54")]
	public Vector3 GetPlayerSpawnPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0x10BAC68", Offset = "0x10BAC68", VA = "0x10BAC68")]
	private Vector3 GetSpawnPoint(Collider spawnPoint)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0x10BAE1C", Offset = "0x10BAE1C", VA = "0x10BAE1C")]
	public ReferenceHolder()
	{
	}
}
[Token(Token = "0x20001D4")]
public class RemoteIkPlayerInit : MonoBehaviour
{
	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator RemoteLeftHandAnimator;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator RemoteRightHandAnimator;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isEnemy;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject playerMarker;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject enemyMarker;

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0x10BB5A0", Offset = "0x10BB5A0", VA = "0x10BB5A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0x10BB6B8", Offset = "0x10BB6B8", VA = "0x10BB6B8")]
	public RemoteIkPlayerInit()
	{
	}
}
[Token(Token = "0x20001D5")]
public class RemoteIKScale : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VRIK ik;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float scaleMlp;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private new PhotonView photonView;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool remoteSync;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private Vector3 scale;

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0x10BB6C0", Offset = "0x10BB6C0", VA = "0x10BB6C0", Slot = "47")]
	public override void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0x10BB94C", Offset = "0x10BB94C", VA = "0x10BB94C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0x10BB9DC", Offset = "0x10BB9DC", VA = "0x10BB9DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C50")]
	[Address(RVA = "0x10BBB58", Offset = "0x10BBB58", VA = "0x10BBB58")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C51")]
	[Address(RVA = "0x10BBB68", Offset = "0x10BBB68", VA = "0x10BBB68")]
	private void SyncIK()
	{
	}

	[Token(Token = "0x6000C52")]
	[Address(RVA = "0x10BBBA8", Offset = "0x10BBBA8", VA = "0x10BBBA8")]
	public RemoteIKScale()
	{
	}
}
[Token(Token = "0x20001D6")]
public class RemotePlayerInstantiater : MonoBehaviour
{
	[Token(Token = "0x20001D8")]
	[CompilerGenerated]
	private sealed class <InstantiateRemotePlayer>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RemotePlayerInstantiater <>4__this;

		[Token(Token = "0x17000115")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x10BC7A4", Offset = "0x10BC7A4", VA = "0x10BC7A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C68")]
			[Address(RVA = "0x10BC7EC", Offset = "0x10BC7EC", VA = "0x10BC7EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x10BC018", Offset = "0x10BC018", VA = "0x10BC018")]
		[DebuggerHidden]
		public <InstantiateRemotePlayer>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x10BC1DC", Offset = "0x10BC1DC", VA = "0x10BC1DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x10BC1E0", Offset = "0x10BC1E0", VA = "0x10BC1E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x10BC7AC", Offset = "0x10BC7AC", VA = "0x10BC7AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D9")]
	[CompilerGenerated]
	private sealed class <ResetTimerRoutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RemotePlayerInstantiater <>4__this;

		[Token(Token = "0x17000117")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0x10BC8B8", Offset = "0x10BC8B8", VA = "0x10BC8B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0x10BC900", Offset = "0x10BC900", VA = "0x10BC900", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x10BC0B8", Offset = "0x10BC0B8", VA = "0x10BC0B8")]
		[DebuggerHidden]
		public <ResetTimerRoutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x10BC7F4", Offset = "0x10BC7F4", VA = "0x10BC7F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x10BC7F8", Offset = "0x10BC7F8", VA = "0x10BC7F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x10BC8C0", Offset = "0x10BC8C0", VA = "0x10BC8C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject remotePlayer;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject instantiatedObj;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isCoroutineRunning;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool _destroyedByUnmount;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PlayerManager playerManager;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool canRevive;

	[Token(Token = "0x6000C53")]
	[Address(RVA = "0x10BBBB8", Offset = "0x10BBBB8", VA = "0x10BBBB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C54")]
	[Address(RVA = "0x10BBC2C", Offset = "0x10BBC2C", VA = "0x10BBC2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C55")]
	[Address(RVA = "0x10BBC90", Offset = "0x10BBC90", VA = "0x10BBC90")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C56")]
	[Address(RVA = "0x10BBC94", Offset = "0x10BBC94", VA = "0x10BBC94")]
	private void HandleHmdMounted()
	{
	}

	[Token(Token = "0x6000C57")]
	[Address(RVA = "0x10BBD20", Offset = "0x10BBD20", VA = "0x10BBD20")]
	private void HandleHmdUnmounted()
	{
	}

	[Token(Token = "0x6000C58")]
	[Address(RVA = "0x10BBDBC", Offset = "0x10BBDBC", VA = "0x10BBDBC")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0x10B7098", Offset = "0x10B7098", VA = "0x10B7098")]
	public void InstantiatePlayer()
	{
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0x10B6D14", Offset = "0x10B6D14", VA = "0x10B6D14")]
	public void DestroyRemotePlayer()
	{
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0x10BBE3C", Offset = "0x10BBE3C", VA = "0x10BBE3C")]
	private void DestroyMyPlayers()
	{
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0x10BBDC8", Offset = "0x10BBDC8", VA = "0x10BBDC8")]
	[IteratorStateMachine(typeof(<InstantiateRemotePlayer>d__15))]
	private IEnumerator InstantiateRemotePlayer()
	{
		return null;
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0x10BC040", Offset = "0x10BC040", VA = "0x10BC040")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0x10BC044", Offset = "0x10BC044", VA = "0x10BC044")]
	[IteratorStateMachine(typeof(<ResetTimerRoutine>d__17))]
	private IEnumerator ResetTimerRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0x10BC0E0", Offset = "0x10BC0E0", VA = "0x10BC0E0")]
	public RemotePlayerInstantiater()
	{
	}
}
[Token(Token = "0x20001DA")]
public class RemotePlayerManager : MonoBehaviourPunCallbacks, IPunInstantiateMagicCallback
{
	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PhotonView pv;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRIK ik;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SyncPlayer syncPlayer;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isDead;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool isEnemy;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FormerlySerializedAs("AudioSource")]
	public AudioSource hitAudioSource;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PhotonPlayer dissonancePlayer;

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0x10BC908", Offset = "0x10BC908", VA = "0x10BC908")]
	private void DisableObjectSync()
	{
	}

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0x10BC994", Offset = "0x10BC994", VA = "0x10BC994")]
	private void EnableObjectSync()
	{
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0x10BCA04", Offset = "0x10BCA04", VA = "0x10BCA04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0x10BCA94", Offset = "0x10BCA94", VA = "0x10BCA94")]
	public void ApplyDamage()
	{
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0x10BCB58", Offset = "0x10BCB58", VA = "0x10BCB58", Slot = "54")]
	private void Photon.Pun.IPunInstantiateMagicCallback.OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0x10BCCA4", Offset = "0x10BCCA4", VA = "0x10BCCA4")]
	[PunRPC]
	private void RPC_Damage()
	{
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0x10BD070", Offset = "0x10BD070", VA = "0x10BD070")]
	public void ResetToPlayer()
	{
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0x10BD120", Offset = "0x10BD120", VA = "0x10BD120")]
	[PunRPC]
	private void RPC_ResetPlayer()
	{
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0x10BD1B0", Offset = "0x10BD1B0", VA = "0x10BD1B0")]
	public void Tag()
	{
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0x10BD27C", Offset = "0x10BD27C", VA = "0x10BD27C")]
	[PunRPC]
	private void RPC_TAG()
	{
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0x10BD38C", Offset = "0x10BD38C", VA = "0x10BD38C")]
	public RemotePlayerManager()
	{
	}
}
[Token(Token = "0x20001DB")]
public class RemotePlayerSyncIK : MonoBehaviour
{
	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform PlayerHeadTransform;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform PlayerLeftHandTransform;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform PlayerRightHandTransform;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform PlayerTransform;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Transform of the remote player's head. This will be updated during Update")]
	public Transform RemoteHeadTransform;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform RemoteRightHandTransform;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform RemoteLeftHandTransform;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isInitialized;

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0x10BC688", Offset = "0x10BC688", VA = "0x10BC688")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000C7B")]
	[Address(RVA = "0x10BD394", Offset = "0x10BD394", VA = "0x10BD394")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0x10BD3F8", Offset = "0x10BD3F8", VA = "0x10BD3F8")]
	private void ApplyTransformAndRotation(Transform original, Transform target)
	{
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0x10BD44C", Offset = "0x10BD44C", VA = "0x10BD44C")]
	public RemotePlayerSyncIK()
	{
	}
}
[Token(Token = "0x20001DC")]
public class SceneHandler : MonoBehaviour
{
	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objsToInstantiate;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool keepRoomsOpenAtStart;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isLevelFinished;

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0x10BD454", Offset = "0x10BD454", VA = "0x10BD454")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0x10BD5D0", Offset = "0x10BD5D0", VA = "0x10BD5D0")]
	public SceneHandler()
	{
	}
}
[Token(Token = "0x20001DD")]
public class ShopManager : MonoBehaviour
{
	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_priceText;

	[Token(Token = "0x400096F")]
	private const string FULL_GAME = "Full_Game";

	[Token(Token = "0x4000970")]
	private const string LowCoins = "3k";

	[Token(Token = "0x4000971")]
	private const string MidCoins = "7k";

	[Token(Token = "0x4000972")]
	private const string MaxCoins = "20k";

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject productPurchasedDialog;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool debugUi;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject debugDialog;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI debugText;

	[Token(Token = "0x14000017")]
	public static event Action OnProductPurchase
	{
		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x10BD5E0", Offset = "0x10BD5E0", VA = "0x10BD5E0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x10BD698", Offset = "0x10BD698", VA = "0x10BD698")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0x10BD750", Offset = "0x10BD750", VA = "0x10BD750")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0x10BD808", Offset = "0x10BD808", VA = "0x10BD808")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0x10BD958", Offset = "0x10BD958", VA = "0x10BD958")]
	public void FetchProductPrices()
	{
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0x10BDA98", Offset = "0x10BDA98", VA = "0x10BDA98")]
	private void GetProductsBySKUCallback(Message<ProductList> msg)
	{
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0x10BD8AC", Offset = "0x10BD8AC", VA = "0x10BD8AC")]
	public void FetchPurchasedProducts()
	{
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0x10BE2F4", Offset = "0x10BE2F4", VA = "0x10BE2F4")]
	private void GetViewerPurchasesCallback(Message<PurchaseList> msg)
	{
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0x10BEBF8", Offset = "0x10BEBF8", VA = "0x10BEBF8")]
	public void BuyFullGamePressed()
	{
	}

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0x10BECF0", Offset = "0x10BECF0", VA = "0x10BECF0")]
	public void BuyLowCoins()
	{
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0x10BEDE8", Offset = "0x10BEDE8", VA = "0x10BEDE8")]
	public void BuyMidCoins()
	{
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0x10BEEE0", Offset = "0x10BEEE0", VA = "0x10BEEE0")]
	public void BuyMaxCoins()
	{
	}

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0x10BEFD8", Offset = "0x10BEFD8", VA = "0x10BEFD8")]
	private void LaunchCheckoutFlowCallback(Message<Purchase> msg)
	{
	}

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0x10BEB2C", Offset = "0x10BEB2C", VA = "0x10BEB2C")]
	private void OnSupporterPurchased()
	{
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0x10BF3D0", Offset = "0x10BF3D0", VA = "0x10BF3D0")]
	public ShopManager()
	{
	}
}
[Token(Token = "0x20001DE")]
public class Singleton<T> : MonoBehaviour where T : Component
{
	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T instance;

	[Token(Token = "0x17000119")]
	public static T Instance
	{
		[Token(Token = "0x6000C8F")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C90")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000C91")]
	public Singleton()
	{
	}
}
[Token(Token = "0x20001DF")]
public class SkinManager : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x20001E1")]
	[CompilerGenerated]
	private sealed class <SetSkinProperty>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinManager <>4__this;

		[Token(Token = "0x1700011A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x10C04D0", Offset = "0x10C04D0", VA = "0x10C04D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CAA")]
			[Address(RVA = "0x10C0518", Offset = "0x10C0518", VA = "0x10C0518", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x10BF7A0", Offset = "0x10BF7A0", VA = "0x10BF7A0")]
		[DebuggerHidden]
		public <SetSkinProperty>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x10C02CC", Offset = "0x10C02CC", VA = "0x10C02CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x10C02D0", Offset = "0x10C02D0", VA = "0x10C02D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x10C04D8", Offset = "0x10C04D8", VA = "0x10C04D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineRenderer;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer[] renderers;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material redMaterial;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material nightRangerMaterial;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material yellowMaterial;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material whiteMaterial;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material techMaterial;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject defaultSkin;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject newHazmat;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject kitty;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject partyGoer;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject bacteria;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject partyPooper;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject partyPooperNaked;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private new PhotonView photonView;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public string skinVal;

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0x10BF3D8", Offset = "0x10BF3D8", VA = "0x10BF3D8", Slot = "47")]
	public override void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0x10BF6D4", Offset = "0x10BF6D4", VA = "0x10BF6D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0x10BF72C", Offset = "0x10BF72C", VA = "0x10BF72C")]
	[IteratorStateMachine(typeof(<SetSkinProperty>d__18))]
	private IEnumerator SetSkinProperty()
	{
		return null;
	}

	[Token(Token = "0x6000C95")]
	[Address(RVA = "0x10BF7C8", Offset = "0x10BF7C8", VA = "0x10BF7C8", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0x10BF91C", Offset = "0x10BF91C", VA = "0x10BF91C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C97")]
	[Address(RVA = "0x10B75B4", Offset = "0x10B75B4", VA = "0x10B75B4")]
	public void ShowEnemySkin()
	{
	}

	[Token(Token = "0x6000C98")]
	[Address(RVA = "0x10B77D0", Offset = "0x10B77D0", VA = "0x10B77D0")]
	public void ShowPlayerSkin()
	{
	}

	[Token(Token = "0x6000C99")]
	[Address(RVA = "0x10BF54C", Offset = "0x10BF54C", VA = "0x10BF54C")]
	public void ApplySkin(string val)
	{
	}

	[Token(Token = "0x6000C9A")]
	public T ParseEnum<T>(string value, T defaultValue) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0x10BFF2C", Offset = "0x10BFF2C", VA = "0x10BFF2C")]
	private void SetMaterial(Material mat)
	{
	}

	[Token(Token = "0x6000C9C")]
	[Address(RVA = "0x10BFF9C", Offset = "0x10BFF9C", VA = "0x10BFF9C")]
	private void SetRenderers()
	{
	}

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0x10B63E0", Offset = "0x10B63E0", VA = "0x10B63E0")]
	public void HideSkin()
	{
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0x10B629C", Offset = "0x10B629C", VA = "0x10B629C")]
	public void ShowSkin()
	{
	}

	[Token(Token = "0x6000C9F")]
	[Address(RVA = "0x10BFC34", Offset = "0x10BFC34", VA = "0x10BFC34")]
	private void DisableGameObjects()
	{
	}

	[Token(Token = "0x6000CA0")]
	[Address(RVA = "0x10BFD54", Offset = "0x10BFD54", VA = "0x10BFD54")]
	private void ChooseSkin(Cosmetics.Avatar val)
	{
	}

	[Token(Token = "0x6000CA1")]
	[Address(RVA = "0x10C01D0", Offset = "0x10C01D0", VA = "0x10C01D0")]
	public SkinManager()
	{
	}
}
[Token(Token = "0x20001E2")]
public class Stone : MonoBehaviour
{
	[Token(Token = "0x20001E3")]
	public enum StoneType
	{
		[Token(Token = "0x4000990")]
		NormalStone,
		[Token(Token = "0x4000991")]
		CageStone
	}

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StoneType stoneType;

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0x10C0520", Offset = "0x10C0520", VA = "0x10C0520")]
	public Stone()
	{
	}
}
[Token(Token = "0x20001E4")]
public class SwinginArmMotion : MonoBehaviour
{
	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject LeftHand;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject RightHand;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject CenterEyeCamera;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject FowardDirection;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 PositionPreviousFrameLeftHand;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 PositionPreviousFrameRightHand;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 PlayerPositionPreviousFrame;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 PlayerPositionThisFrame;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 PositionThisFrameLeftHand;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 PositionThisFrameRightHand;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float speed;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float handSpeed;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private SmoothLocomotion smoothLocomotion;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public ControllerBinding swingingPlayerInput;

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0x10C0528", Offset = "0x10C0528", VA = "0x10C0528")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0x10C05F0", Offset = "0x10C05F0", VA = "0x10C05F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CAE")]
	[Address(RVA = "0x10C08E8", Offset = "0x10C08E8", VA = "0x10C08E8")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000CAF")]
	[Address(RVA = "0x10C08EC", Offset = "0x10C08EC", VA = "0x10C08EC")]
	public SwinginArmMotion()
	{
	}
}
[Token(Token = "0x20001E5")]
public class SyncPlayer : MonoBehaviour
{
	[Token(Token = "0x20001E6")]
	[CompilerGenerated]
	private sealed class <ResetTarget>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SyncPlayer <>4__this;

		[Token(Token = "0x17000120")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0x10C0CDC", Offset = "0x10C0CDC", VA = "0x10C0CDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000121")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0x10C0D24", Offset = "0x10C0D24", VA = "0x10C0D24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x10C0B8C", Offset = "0x10C0B8C", VA = "0x10C0B8C")]
		[DebuggerHidden]
		public <ResetTarget>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x10C0BC8", Offset = "0x10C0BC8", VA = "0x10C0BC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x10C0BCC", Offset = "0x10C0BCC", VA = "0x10C0BCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x10C0CE4", Offset = "0x10C0CE4", VA = "0x10C0CE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool hasTarget;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private int followedBy;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool _gotHit;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool isHiding;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine _targetRoutine;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform posYTransform;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform posXZTransform;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float yOffSet;

	[Token(Token = "0x1700011C")]
	public bool GotHit
	{
		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x10C0904", Offset = "0x10C0904", VA = "0x10C0904")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700011D")]
	public bool HasTarget
	{
		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x10C0990", Offset = "0x10C0990", VA = "0x10C0990")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x10C0998", Offset = "0x10C0998", VA = "0x10C0998")]
		set
		{
		}
	}

	[Token(Token = "0x1700011E")]
	public int FollowedBy
	{
		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x10C09A4", Offset = "0x10C09A4", VA = "0x10C09A4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700011F")]
	public bool IsHiding
	{
		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x10C09AC", Offset = "0x10C09AC", VA = "0x10C09AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0x10C090C", Offset = "0x10C090C", VA = "0x10C090C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0x10C09B4", Offset = "0x10C09B4", VA = "0x10C09B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0x10C09B8", Offset = "0x10C09B8", VA = "0x10C09B8")]
	public void OnRespawn()
	{
	}

	[Token(Token = "0x6000CB8")]
	[Address(RVA = "0x10C09C0", Offset = "0x10C09C0", VA = "0x10C09C0")]
	public void Hide(bool val)
	{
	}

	[Token(Token = "0x6000CB9")]
	[Address(RVA = "0x10C09CC", Offset = "0x10C09CC", VA = "0x10C09CC")]
	public void TakeDamage(int viewID)
	{
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0x10BCFDC", Offset = "0x10BCFDC", VA = "0x10BCFDC")]
	public void OnDeath()
	{
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0x10C0AAC", Offset = "0x10C0AAC", VA = "0x10C0AAC")]
	public void SetTarget(int id)
	{
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0x10C0B18", Offset = "0x10C0B18", VA = "0x10C0B18")]
	[IteratorStateMachine(typeof(<ResetTarget>d__24))]
	private IEnumerator ResetTarget()
	{
		return null;
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0x10C0BB4", Offset = "0x10C0BB4", VA = "0x10C0BB4")]
	public SyncPlayer()
	{
	}
}
[Token(Token = "0x20001E7")]
public class TagGameManager : MonoBehaviour
{
	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CustomFixedUpdate FU_instance;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool initalized;

	[Token(Token = "0x6000CC4")]
	[Address(RVA = "0x10C0D2C", Offset = "0x10C0D2C", VA = "0x10C0D2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CC5")]
	[Address(RVA = "0x10C0DE4", Offset = "0x10C0DE4", VA = "0x10C0DE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0x10C0E60", Offset = "0x10C0E60", VA = "0x10C0E60")]
	private void OnFixedUpdate(float dt)
	{
	}

	[Token(Token = "0x6000CC7")]
	[Address(RVA = "0x10C1044", Offset = "0x10C1044", VA = "0x10C1044")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CC8")]
	[Address(RVA = "0x10C10BC", Offset = "0x10C10BC", VA = "0x10C10BC")]
	public TagGameManager()
	{
	}
}
[Token(Token = "0x20001E8")]
public class TagHandler : MonoBehaviour
{
	[Token(Token = "0x6000CC9")]
	[Address(RVA = "0x10C10C4", Offset = "0x10C10C4", VA = "0x10C10C4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000CCA")]
	[Address(RVA = "0x10C1454", Offset = "0x10C1454", VA = "0x10C1454")]
	public TagHandler()
	{
	}
}
[Token(Token = "0x20001E9")]
public class ThirdPersonCharacter : MonoBehaviourPun
{
	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_MovingTurnSpeed;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float m_StationaryTurnSpeed;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_GroundCheckDistance;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator m_Animator;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_IsGrounded;

	[Token(Token = "0x40009B2")]
	private const float k_Half = 0.5f;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_TurnAmount;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_ForwardAmount;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 m_GroundNormal;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_CapsuleHeight;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 m_CapsuleCenter;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_Crouching;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Interact;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int Attack;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int Hurt;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int Throw;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int Timeout;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly int Forward;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly int Turn;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static readonly int OnGround;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly int HitDamage;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool isHit;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool enableAnimations;

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0x10C145C", Offset = "0x10C145C", VA = "0x10C145C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0x10C14B4", Offset = "0x10C14B4", VA = "0x10C14B4")]
	public void Move(Vector3 move, bool crouch, bool jump)
	{
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0x10C198C", Offset = "0x10C198C", VA = "0x10C198C")]
	private void UpdateAnimator(Vector3 move)
	{
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0x10C1A8C", Offset = "0x10C1A8C", VA = "0x10C1A8C")]
	public void AttackAnimation()
	{
	}

	[Token(Token = "0x6000CCF")]
	[Address(RVA = "0x10C1B04", Offset = "0x10C1B04", VA = "0x10C1B04")]
	public void ResetAllAnimatorTriggers(Animator animator)
	{
	}

	[Token(Token = "0x6000CD0")]
	[Address(RVA = "0x10C1BA8", Offset = "0x10C1BA8", VA = "0x10C1BA8")]
	public void InteractAnimation(bool value)
	{
	}

	[Token(Token = "0x6000CD1")]
	[Address(RVA = "0x10C1CC0", Offset = "0x10C1CC0", VA = "0x10C1CC0")]
	public void HurtAnimation()
	{
	}

	[Token(Token = "0x6000CD2")]
	[Address(RVA = "0x10C1D4C", Offset = "0x10C1D4C", VA = "0x10C1D4C")]
	public void DeathAnimation()
	{
	}

	[Token(Token = "0x6000CD3")]
	[Address(RVA = "0x10C1DE4", Offset = "0x10C1DE4", VA = "0x10C1DE4")]
	public void ReviveAnimation()
	{
	}

	[Token(Token = "0x6000CD4")]
	[Address(RVA = "0x10C1E7C", Offset = "0x10C1E7C", VA = "0x10C1E7C")]
	public void HitAnimation()
	{
	}

	[Token(Token = "0x6000CD5")]
	[Address(RVA = "0x10C1F10", Offset = "0x10C1F10", VA = "0x10C1F10")]
	public void ResetHitDamage()
	{
	}

	[Token(Token = "0x6000CD6")]
	[Address(RVA = "0x10C1F18", Offset = "0x10C1F18", VA = "0x10C1F18")]
	public void ThrowAnimation()
	{
	}

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0x10C1F88", Offset = "0x10C1F88", VA = "0x10C1F88")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0x10C2058", Offset = "0x10C2058", VA = "0x10C2058")]
	[PunRPC]
	private void RPC_Sync(bool value)
	{
	}

	[Token(Token = "0x6000CD9")]
	[Address(RVA = "0x10C1908", Offset = "0x10C1908", VA = "0x10C1908")]
	private void ApplyExtraTurnRotation()
	{
	}

	[Token(Token = "0x6000CDA")]
	[Address(RVA = "0x10C178C", Offset = "0x10C178C", VA = "0x10C178C")]
	private void CheckGroundStatus()
	{
	}

	[Token(Token = "0x6000CDB")]
	[Address(RVA = "0x10C20D8", Offset = "0x10C20D8", VA = "0x10C20D8")]
	public ThirdPersonCharacter()
	{
	}
}
[Token(Token = "0x20001EA")]
public class TriggerExplosionOnCollision : MonoBehaviour
{
	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Force;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SoundGroup]
	public string damageSound;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Radius;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isFracturing;

	[Token(Token = "0x6000CDD")]
	[Address(RVA = "0x10C22E8", Offset = "0x10C22E8", VA = "0x10C22E8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000CDE")]
	[Address(RVA = "0x10C239C", Offset = "0x10C239C", VA = "0x10C239C")]
	private void OnFracture(OnFractureEventArgs args)
	{
	}

	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0x10C24CC", Offset = "0x10C24CC", VA = "0x10C24CC")]
	private void Explode(GameObject root, Bounds bounds, Vector3 scale)
	{
	}

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0x10C27B4", Offset = "0x10C27B4", VA = "0x10C27B4")]
	public TriggerExplosionOnCollision()
	{
	}
}
[Token(Token = "0x20001EB")]
public class UiDebug : MonoBehaviour
{
	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI texttt;

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0x10C27BC", Offset = "0x10C27BC", VA = "0x10C27BC")]
	public UiDebug()
	{
	}
}
[Token(Token = "0x20001EC")]
public class UiHighLighter : MonoBehaviour
{
	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<UnityEngine.UI.Button> buttons;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Image> highLighters;

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0x10C27C4", Offset = "0x10C27C4", VA = "0x10C27C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0x10C2A00", Offset = "0x10C2A00", VA = "0x10C2A00")]
	private void OnBtnCLick(int val)
	{
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0x10C2BC8", Offset = "0x10C2BC8", VA = "0x10C2BC8")]
	public UiHighLighter()
	{
	}
}
[Token(Token = "0x20001EE")]
public class UnlockHandler : MonoBehaviour
{
	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject unLockableObj;

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0x10C2D08", Offset = "0x10C2D08", VA = "0x10C2D08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0x10C2E94", Offset = "0x10C2E94", VA = "0x10C2E94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0x10C2D8C", Offset = "0x10C2D8C", VA = "0x10C2D8C")]
	private void CheckUnlock()
	{
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0x10C2F10", Offset = "0x10C2F10", VA = "0x10C2F10")]
	public UnlockHandler()
	{
	}
}
[Token(Token = "0x20001EF")]
public class StairCleaner : MonoBehaviour
{
	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0x10C2F18", Offset = "0x10C2F18", VA = "0x10C2F18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0x10C2F1C", Offset = "0x10C2F1C", VA = "0x10C2F1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0x10C2F20", Offset = "0x10C2F20", VA = "0x10C2F20")]
	public StairCleaner()
	{
	}
}
namespace StylizedWaterShader
{
	[Token(Token = "0x20001F0")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class EnableDepthBuffer : MonoBehaviour
	{
		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera cam;

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x10C2F28", Offset = "0x10C2F28", VA = "0x10C2F28")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x10C2FD4", Offset = "0x10C2FD4", VA = "0x10C2FD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x10C30CC", Offset = "0x10C30CC", VA = "0x10C30CC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x10C3150", Offset = "0x10C3150", VA = "0x10C3150")]
		public EnableDepthBuffer()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(MeshRenderer))]
	[HelpURL("http://staggart.xyz/unity/stylized-water-shader/documentation/")]
	public class StylizedWater : MonoBehaviour
	{
		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] shaderNames;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int shaderIndex;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Shader DesktopShader;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Shader MobileAdvancedShader;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(2000f, 4000f)]
		public int renderQueue;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool enableVertexColors;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool enableDepthTex;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool isUnlit;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool enableGradient;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Gradient colorGradient;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ColorUsage(true, true)]
		public Color waterShallowColor;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 100f)]
		public float depth;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[ColorUsage(true, true)]
		public Color waterColor;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[ColorUsage(true, true)]
		public Color fresnelColor;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float fresnel;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ColorUsage(true, true)]
		public Color rimColor;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(-0.5f, 0.5f)]
		public float waveTint;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(0f, 1f)]
		public float transparency;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0.01f, 1f)]
		public float glossiness;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Range(0f, 1f)]
		public float metallicness;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 3f)]
		public float edgeFade;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string[] tilingMethodNames;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float worldSpaceTiling;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(0f, 0.2f)]
		public float refractionAmount;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool enableNormalMap;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 1f)]
		public float normalStrength;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool enableMacroNormals;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Range(250f, 3000f)]
		public float macroNormalsDistance;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Range(0f, 50f)]
		public float normalTiling;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int intersectionSolver;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string[] intersectionSolverNames;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(0f, 30f)]
		public float rimSize;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Range(0.1f, 30f)]
		public float rimFalloff;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float rimTiling;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Range(0f, 1f)]
		public float rimDistortion;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool enableVCIntersection;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int foamSolver;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public string[] foamSolverNames;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Range(-1f, 1f)]
		public float foamOpacity;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float foamTiling;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Range(0f, 1f)]
		public float foamSize;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Range(0f, 3f)]
		public float foamDistortion;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Range(0f, 1f)]
		public float foamSpeed;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[Range(0f, 1f)]
		public float waveFoam;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Range(0f, 1f)]
		public float reflectionStrength;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[Range(0.01f, 10f)]
		public float reflectionFresnel;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool showReflection;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[Range(0f, 0.2f)]
		public float reflectionRefraction;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Range(0.01f, 10f)]
		public float waveSpeed;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[Range(0f, 1f)]
		public float waveStrength;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Range(-1f, 1f)]
		public Vector4 waveDirectionXZ;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool enableSecondaryWaves;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Texture2D customIntersection;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Texture2D customNormal;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Texture2D customHeightmap;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public string[] intersectionStyleNames;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public int intersectionStyle;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public string[] waveStyleNames;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public int waveStyle;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string[] waveHeightmapNames;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public int waveHeightmapStyle;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float waveSize;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool useCustomIntersection;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		public bool useCustomNormals;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
		public bool useCustomHeightmap;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Texture2D normals;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Texture2D shadermap;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Texture2D colorGradientTex;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public bool useCompression;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool EnableReflections;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Camera reflectionCamera;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Camera refractCamera;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool useReflection;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool useRefractionCam;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool enableReflectionBlur;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[Range(1f, 15f)]
		public float reflectionBlurLength;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[Range(1f, 4f)]
		public int reflectionBlurPasses;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private StylizedWaterBlur reflectionBlurRenderer;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public string[] refractionSolverNames;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public int refractionSolver;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public string[] resolutionNames;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public int reflectionRes;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public int refractRes;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public int reflectionTextureSize;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public int refractTextureSize;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[Range(0f, 10f)]
		public float clipPlaneOffset;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public LayerMask reflectLayers;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public LayerMask refractLayers;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Dictionary<Camera, StylizedWaterBlur> m_BlurRenderers;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Dictionary<Camera, Camera> m_RefractCameras;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private RenderTexture m_RefractTexture;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private int m_OldRefractTextureSize;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool s_InsideRendering;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		public int lightingMethod;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public string[] lightingMethodNames;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public bool enableShadows;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private StylizedWaterShadowCaster shadowRenderer;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public Light shadowCaster;

		[NonSerialized]
		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public Material material;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public bool isMobileAdvanced;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x281")]
		public bool isMobilePlatform;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public string shaderName;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public bool isWaterLayer;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x291")]
		public bool hasShaderParams;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x292")]
		public bool hasMaterial;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x293")]
		public bool usingSinglePassRendering;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		public bool hideMeshRenderer;

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x10C3158", Offset = "0x10C3158", VA = "0x10C3158")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x10C327C", Offset = "0x10C327C", VA = "0x10C327C")]
		public void Init()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x10C31F4", Offset = "0x10C31F4", VA = "0x10C31F4")]
		public void GetProperties()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x10C3280", Offset = "0x10C3280", VA = "0x10C3280")]
		private void GetShaderProperties()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x10C3CF0", Offset = "0x10C3CF0", VA = "0x10C3CF0")]
		private void GetShaderType()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x10C3CF4", Offset = "0x10C3CF4", VA = "0x10C3CF4")]
		private void SetShaderType()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x10C31F8", Offset = "0x10C31F8", VA = "0x10C31F8")]
		public void SetProperties()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x10C3FA0", Offset = "0x10C3FA0", VA = "0x10C3FA0")]
		private void SetShaderProperties()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x10C4C9C", Offset = "0x10C4C9C", VA = "0x10C4C9C")]
		public void DisableReflectionCam()
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x10C4A88", Offset = "0x10C4A88", VA = "0x10C4A88")]
		public void DisableRefractionCam()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x10C3CF8", Offset = "0x10C3CF8", VA = "0x10C3CF8")]
		private void EnableShadowRendering()
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x10C3DD4", Offset = "0x10C3DD4", VA = "0x10C3DD4")]
		private void DisableShadowRendering()
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x10C4F14", Offset = "0x10C4F14", VA = "0x10C4F14")]
		public void SetVegetationStudioWaterLevel()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x10C4F18", Offset = "0x10C4F18", VA = "0x10C4F18")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x10C5D64", Offset = "0x10C5D64", VA = "0x10C5D64")]
		public void CreateReflectionTexture()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x10C5EA0", Offset = "0x10C5EA0", VA = "0x10C5EA0")]
		public void CreateRefractionTexture()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x10C561C", Offset = "0x10C561C", VA = "0x10C561C")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractCamera)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x10C6050", Offset = "0x10C6050", VA = "0x10C6050")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x10C60EC", Offset = "0x10C60EC", VA = "0x10C60EC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x10C60F0", Offset = "0x10C60F0", VA = "0x10C60F0")]
		public StylizedWater()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class StylizedWaterBlur : MonoBehaviour
	{
		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float length;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int passes;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Shader m_BlurRenderShader;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material m_BlurRenderMat;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CommandBuffer cmd;

		[Token(Token = "0x17000122")]
		private static Shader BlurRenderShader
		{
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0x10C7274", Offset = "0x10C7274", VA = "0x10C7274")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000123")]
		private static Material BlurRenderMat
		{
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0x10C733C", Offset = "0x10C733C", VA = "0x10C733C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x10C7438", Offset = "0x10C7438", VA = "0x10C7438")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x10C7918", Offset = "0x10C7918", VA = "0x10C7918")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x10C74DC", Offset = "0x10C74DC", VA = "0x10C74DC")]
		public void Render()
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x10C79B4", Offset = "0x10C79B4", VA = "0x10C79B4")]
		public StylizedWaterBlur()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Light))]
	public class StylizedWaterShadowCaster : MonoBehaviour
	{
		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CommandBuffer cmd;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Light dirLight;

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x10C79C8", Offset = "0x10C79C8", VA = "0x10C79C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x10C7B94", Offset = "0x10C7B94", VA = "0x10C7B94")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x10C7C14", Offset = "0x10C7C14", VA = "0x10C7C14")]
		public StylizedWaterShadowCaster()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public static class StylizedWaterUtilities
	{
		[Token(Token = "0x20001F5")]
		public static class CameraUtils
		{
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x10C802C", Offset = "0x10C802C", VA = "0x10C802C")]
			public static Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign, float clipPlaneOffset)
			{
				return default(Vector4);
			}

			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x10C81D4", Offset = "0x10C81D4", VA = "0x10C81D4")]
			public static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
			{
			}

			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x10C8268", Offset = "0x10C8268", VA = "0x10C8268")]
			public static void CopyCameraSettings(Camera src, Camera dest)
			{
			}
		}

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool DEBUG;

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x10C7C1C", Offset = "0x10C7C1C", VA = "0x10C7C1C")]
		public static string[] ComposeDropdown(Texture2D[] resource, string replaceFilter)
		{
			return null;
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x10C7E7C", Offset = "0x10C7E7C", VA = "0x10C7E7C")]
		public static bool IsApproximatelyEqual(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x10C7E94", Offset = "0x10C7E94", VA = "0x10C7E94")]
		public static bool HasVertexColors(Mesh mesh)
		{
			return default(bool);
		}
	}
}
namespace UnityStandardAssets.Effects
{
	[Token(Token = "0x20001F6")]
	[RequireComponent(typeof(SphereCollider))]
	public class AfterburnerPhysicsForce : MonoBehaviour
	{
		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float effectAngle;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float effectWidth;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float effectDistance;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float force;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider[] m_Cols;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SphereCollider m_Sphere;

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x10C83F0", Offset = "0x10C83F0", VA = "0x10C83F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x10C84C8", Offset = "0x10C84C8", VA = "0x10C84C8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x10C8A34", Offset = "0x10C8A34", VA = "0x10C8A34")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x10C8F84", Offset = "0x10C8F84", VA = "0x10C8F84")]
		public AfterburnerPhysicsForce()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public class ExplosionFireAndDebris : MonoBehaviour
	{
		[Token(Token = "0x20001F8")]
		[CompilerGenerated]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExplosionFireAndDebris <>4__this;

			[Token(Token = "0x4000A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <multiplier>5__2;

			[Token(Token = "0x17000124")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D1F")]
				[Address(RVA = "0x10C96B8", Offset = "0x10C96B8", VA = "0x10C96B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000125")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D21")]
				[Address(RVA = "0x10C9700", Offset = "0x10C9700", VA = "0x10C9700", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0x10C900C", Offset = "0x10C900C", VA = "0x10C900C")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0x10C9188", Offset = "0x10C9188", VA = "0x10C9188", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0x10C918C", Offset = "0x10C918C", VA = "0x10C918C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D20")]
			[Address(RVA = "0x10C96C0", Offset = "0x10C96C0", VA = "0x10C96C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] debrisPrefabs;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform firePrefab;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numDebrisPieces;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int numFires;

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x10C8F98", Offset = "0x10C8F98", VA = "0x10C8F98")]
		[IteratorStateMachine(typeof(<Start>d__4))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x10C9034", Offset = "0x10C9034", VA = "0x10C9034")]
		private void AddFire(Transform t, Vector3 pos, Vector3 normal)
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x10C9180", Offset = "0x10C9180", VA = "0x10C9180")]
		public ExplosionFireAndDebris()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public class ExplosionPhysicsForce : MonoBehaviour
	{
		[Token(Token = "0x20001FA")]
		[CompilerGenerated]
		private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExplosionPhysicsForce <>4__this;

			[Token(Token = "0x17000126")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D27")]
				[Address(RVA = "0x10C9B9C", Offset = "0x10C9B9C", VA = "0x10C9B9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000127")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D29")]
				[Address(RVA = "0x10C9BE4", Offset = "0x10C9BE4", VA = "0x10C9BE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D24")]
			[Address(RVA = "0x10C977C", Offset = "0x10C977C", VA = "0x10C977C")]
			[DebuggerHidden]
			public <Start>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000D25")]
			[Address(RVA = "0x10C97B4", Offset = "0x10C97B4", VA = "0x10C97B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D26")]
			[Address(RVA = "0x10C97B8", Offset = "0x10C97B8", VA = "0x10C97B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D28")]
			[Address(RVA = "0x10C9BA4", Offset = "0x10C9BA4", VA = "0x10C9BA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float explosionForce;

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x10C9708", Offset = "0x10C9708", VA = "0x10C9708")]
		[IteratorStateMachine(typeof(<Start>d__1))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x10C97A4", Offset = "0x10C97A4", VA = "0x10C97A4")]
		public ExplosionPhysicsForce()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x10C9BEC", Offset = "0x10C9BEC", VA = "0x10C9BEC")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class ExtinguishableParticleSystem : MonoBehaviour
	{
		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float multiplier;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem[] m_Systems;

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x10C9BF4", Offset = "0x10C9BF4", VA = "0x10C9BF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x10C9C4C", Offset = "0x10C9C4C", VA = "0x10C9C4C")]
		public void Extinguish()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x10C9CC4", Offset = "0x10C9CC4", VA = "0x10C9CC4")]
		public ExtinguishableParticleSystem()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class FireLight : MonoBehaviour
	{
		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Rnd;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool m_Burning;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light m_Light;

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x10C9CD4", Offset = "0x10C9CD4", VA = "0x10C9CD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x10C9D44", Offset = "0x10C9D44", VA = "0x10C9D44")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x10C9F2C", Offset = "0x10C9F2C", VA = "0x10C9F2C")]
		public void Extinguish()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x10C9F54", Offset = "0x10C9F54", VA = "0x10C9F54")]
		public FireLight()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class Hose : MonoBehaviour
	{
		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxPower;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minPower;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float changeSpeed;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem[] hoseWaterSystems;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer systemRenderer;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_Power;

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x10C9F64", Offset = "0x10C9F64", VA = "0x10C9F64")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x10CA0E4", Offset = "0x10CA0E4", VA = "0x10CA0E4")]
		public Hose()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class ParticleSystemMultiplier : MonoBehaviour
	{
		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float multiplier;

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x10CA100", Offset = "0x10CA100", VA = "0x10CA100")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x10CA240", Offset = "0x10CA240", VA = "0x10CA240")]
		public ParticleSystemMultiplier()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class SmokeParticles : MonoBehaviour
	{
		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] extinguishSounds;

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x10CA250", Offset = "0x10CA250", VA = "0x10CA250")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x10CA300", Offset = "0x10CA300", VA = "0x10CA300")]
		public SmokeParticles()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class WaterHoseParticles : MonoBehaviour
	{
		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float lastSoundTime;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ParticleCollisionEvent> m_CollisionEvents;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem m_ParticleSystem;

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x10CA308", Offset = "0x10CA308", VA = "0x10CA308")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x10CA360", Offset = "0x10CA360", VA = "0x10CA360")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x10CA580", Offset = "0x10CA580", VA = "0x10CA580")]
		public WaterHoseParticles()
		{
		}
	}
}
namespace UnityStandardAssets.Water
{
	[Token(Token = "0x2000202")]
	[ExecuteInEditMode]
	public class WaterBasic : MonoBehaviour
	{
		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x10CA610", Offset = "0x10CA610", VA = "0x10CA610")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x10CA80C", Offset = "0x10CA80C", VA = "0x10CA80C")]
		public WaterBasic()
		{
		}
	}
	[Token(Token = "0x2000203")]
	[RequireComponent(typeof(WaterBase))]
	[ExecuteInEditMode]
	public class Displace : MonoBehaviour
	{
		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x10CA814", Offset = "0x10CA814", VA = "0x10CA814")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x10CA834", Offset = "0x10CA834", VA = "0x10CA834")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x10CA898", Offset = "0x10CA898", VA = "0x10CA898")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x10CA8FC", Offset = "0x10CA8FC", VA = "0x10CA8FC")]
		public Displace()
		{
		}
	}
	[Token(Token = "0x2000204")]
	[RequireComponent(typeof(WaterBase))]
	[ExecuteInEditMode]
	public class GerstnerDisplace : Displace
	{
		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x10CA904", Offset = "0x10CA904", VA = "0x10CA904")]
		public GerstnerDisplace()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class MeshContainer
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x10CA90C", Offset = "0x10CA90C", VA = "0x10CA90C")]
		public MeshContainer(Mesh m)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x10CA97C", Offset = "0x10CA97C", VA = "0x10CA97C")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x2000206")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(WaterBase))]
	public class PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask reflectionMask;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool reflectSkybox;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color clearColor;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string reflectionSampler;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float clipPlaneOffset;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_SharedMaterial;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x10CA9B4", Offset = "0x10CA9B4", VA = "0x10CA9B4")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x10CAAB0", Offset = "0x10CAAB0", VA = "0x10CAAB0")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x10CADC0", Offset = "0x10CADC0", VA = "0x10CADC0")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x10CAE74", Offset = "0x10CAE74", VA = "0x10CAE74")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x10CAFCC", Offset = "0x10CAFCC", VA = "0x10CAFCC")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x10CB840", Offset = "0x10CB840", VA = "0x10CB840")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x10CB898", Offset = "0x10CB898", VA = "0x10CB898")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x10CB978", Offset = "0x10CB978", VA = "0x10CB978")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x10CB9DC", Offset = "0x10CB9DC", VA = "0x10CB9DC")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x10CB188", Offset = "0x10CB188", VA = "0x10CB188")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x10CBA40", Offset = "0x10CBA40", VA = "0x10CBA40")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x10CBCF4", Offset = "0x10CBCF4", VA = "0x10CBCF4")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x10CBAA0", Offset = "0x10CBAA0", VA = "0x10CBAA0")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x10CBE60", Offset = "0x10CBE60", VA = "0x10CBE60")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x10CBB44", Offset = "0x10CBB44", VA = "0x10CBB44")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x10CBE80", Offset = "0x10CBE80", VA = "0x10CBE80")]
		public PlanarReflection()
		{
		}
	}
	[Token(Token = "0x2000207")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(WaterBase))]
	public class SpecularLighting : MonoBehaviour
	{
		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform specularLight;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterBase m_WaterBase;

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x10CBEF0", Offset = "0x10CBEF0", VA = "0x10CBEF0")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x10CC018", Offset = "0x10CC018", VA = "0x10CC018")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x10CC230", Offset = "0x10CC230", VA = "0x10CC230")]
		public SpecularLighting()
		{
		}
	}
	[Token(Token = "0x2000208")]
	[ExecuteInEditMode]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x2000209")]
		public enum WaterMode
		{
			[Token(Token = "0x4000A88")]
			Simple,
			[Token(Token = "0x4000A89")]
			Reflective,
			[Token(Token = "0x4000A8A")]
			Refractive
		}

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x10CC238", Offset = "0x10CC238", VA = "0x10CC238")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x10CDB6C", Offset = "0x10CDB6C", VA = "0x10CDB6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x10CDED4", Offset = "0x10CDED4", VA = "0x10CDED4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x10CD6EC", Offset = "0x10CD6EC", VA = "0x10CD6EC")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x10CCD80", Offset = "0x10CCD80", VA = "0x10CCD80")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x10CCD6C", Offset = "0x10CCD6C", VA = "0x10CCD6C")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x10CCC0C", Offset = "0x10CCC0C", VA = "0x10CCC0C")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x10CD9BC", Offset = "0x10CD9BC", VA = "0x10CD9BC")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x10CD928", Offset = "0x10CD928", VA = "0x10CD928")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x10CE180", Offset = "0x10CE180", VA = "0x10CE180")]
		public Water()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public enum WaterQuality
	{
		[Token(Token = "0x4000A8C")]
		High = 2,
		[Token(Token = "0x4000A8D")]
		Medium = 1,
		[Token(Token = "0x4000A8E")]
		Low = 0
	}
	[Token(Token = "0x200020B")]
	[ExecuteInEditMode]
	public class WaterBase : MonoBehaviour
	{
		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material sharedMaterial;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterQuality waterQuality;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool edgeBlend;

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x10CE280", Offset = "0x10CE280", VA = "0x10CE280")]
		public void UpdateShader()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x10CE3F8", Offset = "0x10CE3F8", VA = "0x10CE3F8")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x10CE49C", Offset = "0x10CE49C", VA = "0x10CE49C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x10CE510", Offset = "0x10CE510", VA = "0x10CE510")]
		public WaterBase()
		{
		}
	}
	[Token(Token = "0x200020C")]
	[ExecuteInEditMode]
	public class WaterTile : MonoBehaviour
	{
		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarReflection reflection;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterBase waterBase;

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x10CE528", Offset = "0x10CE528", VA = "0x10CE528")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x10CE52C", Offset = "0x10CE52C", VA = "0x10CE52C")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x10CE6EC", Offset = "0x10CE6EC", VA = "0x10CE6EC")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x10CE7D0", Offset = "0x10CE7D0", VA = "0x10CE7D0")]
		public WaterTile()
		{
		}
	}
}
namespace Photon.Realtime.Demo
{
	[Token(Token = "0x200020D")]
	public class ConnectAndJoinRandomLb : MonoBehaviour, IConnectionCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppSettings appSettings;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LoadBalancingClient lbc;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ConnectionHandler ch;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text StateUiText;

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x10CE7D8", Offset = "0x10CE7D8", VA = "0x10CE7D8")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x10CE964", Offset = "0x10CE964", VA = "0x10CE964")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x10CEA98", Offset = "0x10CEA98", VA = "0x10CEA98", Slot = "4")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x10CEA9C", Offset = "0x10CEA9C", VA = "0x10CEA9C", Slot = "5")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x10CEB20", Offset = "0x10CEB20", VA = "0x10CEB20", Slot = "6")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x10CEC0C", Offset = "0x10CEC0C", VA = "0x10CEC0C", Slot = "8")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x10CEC10", Offset = "0x10CEC10", VA = "0x10CEC10", Slot = "9")]
		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x10CEC14", Offset = "0x10CEC14", VA = "0x10CEC14", Slot = "7")]
		public void OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x10CECF0", Offset = "0x10CECF0", VA = "0x10CECF0", Slot = "19")]
		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x10CECF4", Offset = "0x10CECF4", VA = "0x10CECF4", Slot = "20")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x10CECF8", Offset = "0x10CECF8", VA = "0x10CECF8", Slot = "17")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x10CECFC", Offset = "0x10CECFC", VA = "0x10CECFC", Slot = "18")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x10CED00", Offset = "0x10CED00", VA = "0x10CED00", Slot = "10")]
		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x10CED04", Offset = "0x10CED04", VA = "0x10CED04", Slot = "11")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x10CED08", Offset = "0x10CED08", VA = "0x10CED08", Slot = "12")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x10CED0C", Offset = "0x10CED0C", VA = "0x10CED0C", Slot = "13")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x10CED74", Offset = "0x10CED74", VA = "0x10CED74", Slot = "14")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x10CED78", Offset = "0x10CED78", VA = "0x10CED78", Slot = "15")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x10CEE2C", Offset = "0x10CEE2C", VA = "0x10CEE2C", Slot = "16")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x10CEE30", Offset = "0x10CEE30", VA = "0x10CEE30")]
		private void OnRegionPingCompleted(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x10CEF54", Offset = "0x10CEF54", VA = "0x10CEF54")]
		public ConnectAndJoinRandomLb()
		{
		}
	}
}
namespace Photon.Chat.Demo
{
	[Token(Token = "0x200020E")]
	public static class AppSettingsExtensions
	{
		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x10CEFC8", Offset = "0x10CEFC8", VA = "0x10CEFC8")]
		public static ChatAppSettings GetChatSettings(this AppSettings appSettings)
		{
			return null;
		}
	}
	[Token(Token = "0x200020F")]
	public class ChannelSelector : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
	{
		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Channel;

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x10CF0C8", Offset = "0x10CF0C8", VA = "0x10CF0C8")]
		public void SetChannel(string channel)
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x10CF14C", Offset = "0x10CF14C", VA = "0x10CF14C", Slot = "4")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x10CF468", Offset = "0x10CF468", VA = "0x10CF468")]
		public ChannelSelector()
		{
		}
	}
	[Token(Token = "0x2000210")]
	[ExecuteInEditMode]
	public class ChatAppIdCheckerUI : MonoBehaviour
	{
		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text Description;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool WizardOpenedOnce;

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x10CF470", Offset = "0x10CF470", VA = "0x10CF470")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x10CF544", Offset = "0x10CF544", VA = "0x10CF544")]
		public ChatAppIdCheckerUI()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class ChatGui : MonoBehaviour, IChatClientListener
	{
		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] ChannelsToJoinOnConnect;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] FriendsList;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int HistoryLengthToFetch;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string selectedChannelName;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChatClient chatClient;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected internal ChatAppSettings chatAppSettings;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject missingAppIdErrorPanel;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject ConnectingLabel;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RectTransform ChatPanel;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject UserIdFormPanel;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InputField InputFieldChat;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Text CurrentChannelText;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Toggle ChannelToggleToInstantiate;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject FriendListUiItemtoInstantiate;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Dictionary<string, Toggle> channelToggles;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Dictionary<string, FriendItem> friendListItemLUT;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool ShowState;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Title;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Text StateText;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Text UserIdText;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string HelpText;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int TestLength;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private byte[] testBytes;

		[Token(Token = "0x17000128")]
		public string UserName
		{
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0x10CF54C", Offset = "0x10CF54C", VA = "0x10CF54C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0x10CF554", Offset = "0x10CF554", VA = "0x10CF554")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x10CF55C", Offset = "0x10CF55C", VA = "0x10CF55C")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x10CF820", Offset = "0x10CF820", VA = "0x10CF820")]
		public void Connect()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x10CF9B4", Offset = "0x10CF9B4", VA = "0x10CF9B4")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x10CF9CC", Offset = "0x10CF9CC", VA = "0x10CF9CC")]
		public void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x10CF9E4", Offset = "0x10CF9E4", VA = "0x10CF9E4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x10CFAB4", Offset = "0x10CFAB4", VA = "0x10CFAB4")]
		public void OnEnterSend()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x10D05B0", Offset = "0x10D05B0", VA = "0x10D05B0")]
		public void OnClickSend()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x10CFB48", Offset = "0x10CFB48", VA = "0x10CFB48")]
		private void SendChatMessage(string inputLine)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x10D0660", Offset = "0x10D0660", VA = "0x10D0660")]
		public void PostHelpToCurrentChannel()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x10D0704", Offset = "0x10D0704", VA = "0x10D0704", Slot = "4")]
		public void DebugReturn(DebugLevel level, string message)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x10D07AC", Offset = "0x10D07AC", VA = "0x10D07AC", Slot = "6")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x10D0AE8", Offset = "0x10D0AE8", VA = "0x10D0AE8", Slot = "5")]
		public void OnDisconnected()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x10D0B6C", Offset = "0x10D0B6C", VA = "0x10D0B6C", Slot = "7")]
		public void OnChatStateChange(ChatState state)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x10D0C00", Offset = "0x10D0C00", VA = "0x10D0C00", Slot = "10")]
		public void OnSubscribed(string[] channels, bool[] results)
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x10D0F50", Offset = "0x10D0F50", VA = "0x10D0F50")]
		public void OnSubscribed(string channel, string[] users, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x10D0D94", Offset = "0x10D0D94", VA = "0x10D0D94")]
		private void InstantiateChannelButton(string channelName)
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x10D0990", Offset = "0x10D0990", VA = "0x10D0990")]
		private void InstantiateFriendButton(string friendId)
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x10D1138", Offset = "0x10D1138", VA = "0x10D1138", Slot = "11")]
		public void OnUnsubscribed(string[] channels)
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x10D157C", Offset = "0x10D157C", VA = "0x10D157C", Slot = "8")]
		public void OnGetMessages(string channelName, string[] senders, object[] messages)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x10D15BC", Offset = "0x10D15BC", VA = "0x10D15BC", Slot = "9")]
		public void OnPrivateMessage(string sender, object message, string channelName)
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x10D16D0", Offset = "0x10D16D0", VA = "0x10D16D0", Slot = "12")]
		public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x10D1A10", Offset = "0x10D1A10", VA = "0x10D1A10", Slot = "13")]
		public void OnUserSubscribed(string channel, string user)
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x10D1B2C", Offset = "0x10D1B2C", VA = "0x10D1B2C", Slot = "14")]
		public void OnUserUnsubscribed(string channel, string user)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x10D1C48", Offset = "0x10D1C48", VA = "0x10D1C48")]
		public void OnChannelPropertiesChanged(string channel, string userId, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x10D1DD0", Offset = "0x10D1DD0", VA = "0x10D1DD0")]
		public void OnUserPropertiesChanged(string channel, string targetUserId, string senderUserId, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x10D1F98", Offset = "0x10D1F98", VA = "0x10D1F98")]
		public void OnErrorInfo(string channel, string error, object data)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x10D20EC", Offset = "0x10D20EC", VA = "0x10D20EC")]
		public void AddMessageToSelectedChannel(string msg)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x10CF1C4", Offset = "0x10CF1C4", VA = "0x10CF1C4")]
		public void ShowChannel(string channelName)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x10D21D8", Offset = "0x10D21D8", VA = "0x10D21D8")]
		public void OpenDashboard()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x10D221C", Offset = "0x10D221C", VA = "0x10D221C")]
		public ChatGui()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public class FriendItem : MonoBehaviour
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text NameLabel;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text StatusLabel;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text Health;

		[Token(Token = "0x17000129")]
		[HideInInspector]
		public string FriendId
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x10D23A0", Offset = "0x10D23A0", VA = "0x10D23A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0x10D1114", Offset = "0x10D1114", VA = "0x10D1114")]
			set
			{
			}
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x10D23C4", Offset = "0x10D23C4", VA = "0x10D23C4")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x10D1890", Offset = "0x10D1890", VA = "0x10D1890")]
		public void OnFriendStatusUpdate(int status, bool gotMessage, object message)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x10D2428", Offset = "0x10D2428", VA = "0x10D2428")]
		public FriendItem()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public class IgnoreUiRaycastWhenInactive : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x10D2430", Offset = "0x10D2430", VA = "0x10D2430", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x10D2450", Offset = "0x10D2450", VA = "0x10D2450")]
		public IgnoreUiRaycastWhenInactive()
		{
		}
	}
	[Token(Token = "0x2000214")]
	[RequireComponent(typeof(ChatGui))]
	public class NamePickGui : MonoBehaviour
	{
		[Token(Token = "0x4000AB6")]
		private const string UserNamePlayerPref = "NamePickUserName";

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChatGui chatNewComponent;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField idInput;

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x10D2458", Offset = "0x10D2458", VA = "0x10D2458")]
		public void Start()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x10D2524", Offset = "0x10D2524", VA = "0x10D2524")]
		public void EndEditOnEnter()
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x10D2560", Offset = "0x10D2560", VA = "0x10D2560")]
		public void StartChat()
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x10D2644", Offset = "0x10D2644", VA = "0x10D2644")]
		public NamePickGui()
		{
		}
	}
}
namespace Photon.Chat.UtilityScripts
{
	[Token(Token = "0x2000215")]
	public class EventSystemSpawner : MonoBehaviour
	{
		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x10D264C", Offset = "0x10D264C", VA = "0x10D264C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x10D2754", Offset = "0x10D2754", VA = "0x10D2754")]
		public EventSystemSpawner()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public class OnStartDelete : MonoBehaviour
	{
		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x10D275C", Offset = "0x10D275C", VA = "0x10D275C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x10D27C8", Offset = "0x10D27C8", VA = "0x10D27C8")]
		public OnStartDelete()
		{
		}
	}
	[Token(Token = "0x2000217")]
	[RequireComponent(typeof(Text))]
	public class TextButtonTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Selectable Selectable;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalColor;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color HoverColor;

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x10D27D0", Offset = "0x10D27D0", VA = "0x10D27D0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x10D2828", Offset = "0x10D2828", VA = "0x10D2828")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x10D2858", Offset = "0x10D2858", VA = "0x10D2858")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x10D2888", Offset = "0x10D2888", VA = "0x10D2888", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x10D2938", Offset = "0x10D2938", VA = "0x10D2938", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x10D29E8", Offset = "0x10D29E8", VA = "0x10D29E8")]
		public TextButtonTransition()
		{
		}
	}
	[Token(Token = "0x2000218")]
	[RequireComponent(typeof(Text))]
	public class TextToggleIsOnTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle toggle;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _text;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalOnColor;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color NormalOffColor;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color HoverOnColor;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color HoverOffColor;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isHover;

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x10D2A04", Offset = "0x10D2A04", VA = "0x10D2A04")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x10D2B58", Offset = "0x10D2B58", VA = "0x10D2B58")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x10D2AF4", Offset = "0x10D2AF4", VA = "0x10D2AF4")]
		public void OnValueChanged(bool isOn)
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x10D2C00", Offset = "0x10D2C00", VA = "0x10D2C00", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x10D2C74", Offset = "0x10D2C74", VA = "0x10D2C74", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x10D2CE4", Offset = "0x10D2CE4", VA = "0x10D2CE4")]
		public TextToggleIsOnTransition()
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x2000219")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x1700012A")]
		public bool Highlight
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x10D2D08", Offset = "0x10D2D08", VA = "0x10D2D08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x10D2D10", Offset = "0x10D2D10", VA = "0x10D2D10")]
			set
			{
			}
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x10D2D1C", Offset = "0x10D2D1C", VA = "0x10D2D1C")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x10D2EBC", Offset = "0x10D2EBC", VA = "0x10D2EBC", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x10D2ED8", Offset = "0x10D2ED8", VA = "0x10D2ED8", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x10D2EF4", Offset = "0x10D2EF4", VA = "0x10D2EF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x10D2DC8", Offset = "0x10D2DC8", VA = "0x10D2DC8")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x10D31A8", Offset = "0x10D31A8", VA = "0x10D31A8")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x1700012B")]
		public bool InRange
		{
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0x10D3220", Offset = "0x10D3220", VA = "0x10D3220")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0x10D3228", Offset = "0x10D3228", VA = "0x10D3228")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public bool Targeted
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0x10D3394", Offset = "0x10D3394", VA = "0x10D3394")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x10D339C", Offset = "0x10D339C", VA = "0x10D339C")]
			set
			{
			}
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x10D33A8", Offset = "0x10D33A8", VA = "0x10D33A8", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x10D3234", Offset = "0x10D3234", VA = "0x10D3234")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x10D3598", Offset = "0x10D3598", VA = "0x10D3598")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x200021B")]
	[RequireComponent(typeof(Rigidbody))]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x1700012D")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x10D35A0", Offset = "0x10D35A0", VA = "0x10D35A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0x10D35A8", Offset = "0x10D35A8", VA = "0x10D35A8")]
			set
			{
			}
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x10D35C4", Offset = "0x10D35C4", VA = "0x10D35C4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x10D37D0", Offset = "0x10D37D0", VA = "0x10D37D0", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x10D40BC", Offset = "0x10D40BC", VA = "0x10D40BC", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x10D4624", Offset = "0x10D4624", VA = "0x10D4624", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x10D4A34", Offset = "0x10D4A34", VA = "0x10D4A34")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x10D39F8", Offset = "0x10D39F8", VA = "0x10D39F8")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x10D4B20", Offset = "0x10D4B20", VA = "0x10D4B20")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x10D4F20", Offset = "0x10D4F20", VA = "0x10D4F20", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x10D4F38", Offset = "0x10D4F38", VA = "0x10D4F38", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x10D4F40", Offset = "0x10D4F40", VA = "0x10D4F40")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x200021D")]
		public enum CrosshairState
		{
			[Token(Token = "0x4000AE2")]
			Disabled,
			[Token(Token = "0x4000AE3")]
			Enabled,
			[Token(Token = "0x4000AE4")]
			Targeted
		}

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x10D4F60", Offset = "0x10D4F60", VA = "0x10D4F60")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x10D350C", Offset = "0x10D350C", VA = "0x10D350C")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x10D4FC8", Offset = "0x10D4FC8", VA = "0x10D4FC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x10D5000", Offset = "0x10D5000", VA = "0x10D5000")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x10D5008", Offset = "0x10D5008", VA = "0x10D5008")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x10D50B4", Offset = "0x10D50B4", VA = "0x10D50B4")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x10D515C", Offset = "0x10D515C", VA = "0x10D515C")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x10D5164", Offset = "0x10D5164", VA = "0x10D5164")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x10D5250", Offset = "0x10D5250", VA = "0x10D5250")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x10D525C", Offset = "0x10D525C", VA = "0x10D525C")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x10D5268", Offset = "0x10D5268", VA = "0x10D5268")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x10D5270", Offset = "0x10D5270", VA = "0x10D5270")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x10D52C0", Offset = "0x10D52C0", VA = "0x10D52C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x10D5698", Offset = "0x10D5698", VA = "0x10D5698")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x10D5784", Offset = "0x10D5784", VA = "0x10D5784")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x10D52C4", Offset = "0x10D52C4", VA = "0x10D52C4")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x10D5870", Offset = "0x10D5870", VA = "0x10D5870")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x2000222")]
		public enum ContactTest
		{
			[Token(Token = "0x4000AFB")]
			PerpenTest,
			[Token(Token = "0x4000AFC")]
			BackwardsPress
		}

		[Token(Token = "0x4000AEC")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x4000AED")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x1700012E")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x10D5948", Offset = "0x10D5948", VA = "0x10D5948", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012F")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x10D5950", Offset = "0x10D5950", VA = "0x10D5950")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000130")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0x10D595C", Offset = "0x10D595C", VA = "0x10D595C")]
			[CompilerGenerated]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x10D5964", Offset = "0x10D5964", VA = "0x10D5964")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x10D596C", Offset = "0x10D596C", VA = "0x10D596C", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x10D5ABC", Offset = "0x10D5ABC", VA = "0x10D5ABC")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x10D5CC4", Offset = "0x10D5CC4", VA = "0x10D5CC4", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x10D6288", Offset = "0x10D6288", VA = "0x10D6288")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x10D63F0", Offset = "0x10D63F0", VA = "0x10D63F0")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x10D61AC", Offset = "0x10D61AC", VA = "0x10D61AC")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x10D64FC", Offset = "0x10D64FC", VA = "0x10D64FC")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x10D6608", Offset = "0x10D6608", VA = "0x10D6608")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x10D6690", Offset = "0x10D6690", VA = "0x10D6690")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x2000223")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x17000131")]
		public Collider Collider
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x10D67B4", Offset = "0x10D67B4", VA = "0x10D67B4", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0x10D67BC", Offset = "0x10D67BC", VA = "0x10D67BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x10D67C4", Offset = "0x10D67C4", VA = "0x10D67C4", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0x10D67CC", Offset = "0x10D67CC", VA = "0x10D67CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0x10D67D4", Offset = "0x10D67D4", VA = "0x10D67D4", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x10D6824", Offset = "0x10D6824", VA = "0x10D6824")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x10D68B8", Offset = "0x10D68B8", VA = "0x10D68B8")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000134")]
		Collider Collider
		{
			[Token(Token = "0x6000E01")]
			get;
		}

		[Token(Token = "0x17000135")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6000E02")]
			get;
		}

		[Token(Token = "0x17000136")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000E03")]
			get;
		}
	}
	[Token(Token = "0x2000225")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x10D5C18", Offset = "0x10D5C18", VA = "0x10D5C18")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x2000226")]
	public enum InteractionType
	{
		[Token(Token = "0x4000B05")]
		Enter,
		[Token(Token = "0x4000B06")]
		Stay,
		[Token(Token = "0x4000B07")]
		Exit
	}
	[Token(Token = "0x2000227")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000228")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x4000B19")]
			Mesh,
			[Token(Token = "0x4000B1A")]
			Skeleton,
			[Token(Token = "0x4000B1B")]
			Both
		}

		[Token(Token = "0x2000229")]
		[CompilerGenerated]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000142")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E26")]
				[Address(RVA = "0x10D7D18", Offset = "0x10D7D18", VA = "0x10D7D18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000143")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E28")]
				[Address(RVA = "0x10D7D60", Offset = "0x10D7D60", VA = "0x10D7D60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E23")]
			[Address(RVA = "0x10D7310", Offset = "0x10D7310", VA = "0x10D7310")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x10D7AF8", Offset = "0x10D7AF8", VA = "0x10D7AF8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E25")]
			[Address(RVA = "0x10D7AFC", Offset = "0x10D7AFC", VA = "0x10D7AFC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E27")]
			[Address(RVA = "0x10D7D20", Offset = "0x10D7D20", VA = "0x10D7D20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B08")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x17000137")]
		public OVRHand RightHand
		{
			[Token(Token = "0x6000E05")]
			[Address(RVA = "0x10D68C0", Offset = "0x10D68C0", VA = "0x10D68C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x10D68EC", Offset = "0x10D68EC", VA = "0x10D68EC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x10D6950", Offset = "0x10D6950", VA = "0x10D6950")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x10D697C", Offset = "0x10D697C", VA = "0x10D697C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0x10D69E0", Offset = "0x10D69E0", VA = "0x10D69E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x10D6A0C", Offset = "0x10D6A0C", VA = "0x10D6A0C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0x10D6A70", Offset = "0x10D6A70", VA = "0x10D6A70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0x10D6A9C", Offset = "0x10D6A9C", VA = "0x10D6A9C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x10D6B00", Offset = "0x10D6B00", VA = "0x10D6B00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x10D6B2C", Offset = "0x10D6B2C", VA = "0x10D6B2C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0x10D6B90", Offset = "0x10D6B90", VA = "0x10D6B90")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x10D6BB8", Offset = "0x10D6BB8", VA = "0x10D6BB8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6000E11")]
			[Address(RVA = "0x10D6C18", Offset = "0x10D6C18", VA = "0x10D6C18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x10D6C40", Offset = "0x10D6C40", VA = "0x10D6C40")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0x10D6CA0", Offset = "0x10D6CA0", VA = "0x10D6CA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x10D6CC8", Offset = "0x10D6CC8", VA = "0x10D6CC8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x10D6D28", Offset = "0x10D6D28", VA = "0x10D6D28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x10D6D50", Offset = "0x10D6D50", VA = "0x10D6D50")]
			private set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x10D6DB0", Offset = "0x10D6DB0", VA = "0x10D6DB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E18")]
			[Address(RVA = "0x10D6DD8", Offset = "0x10D6DD8", VA = "0x10D6DD8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public static HandsManager Instance
		{
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0x10D6E38", Offset = "0x10D6E38", VA = "0x10D6E38")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x10D6E80", Offset = "0x10D6E80", VA = "0x10D6E80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x10D6ED8", Offset = "0x10D6ED8", VA = "0x10D6ED8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x10D7294", Offset = "0x10D7294", VA = "0x10D7294")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x10D7220", Offset = "0x10D7220", VA = "0x10D7220")]
		[IteratorStateMachine(typeof(<FindSkeletonVisualGameObjects>d__52))]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x10D7338", Offset = "0x10D7338", VA = "0x10D7338")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x10D73FC", Offset = "0x10D73FC", VA = "0x10D73FC")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x10D75CC", Offset = "0x10D75CC", VA = "0x10D75CC")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x10D7830", Offset = "0x10D7830", VA = "0x10D7830")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x10D7990", Offset = "0x10D7990", VA = "0x10D7990")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200022B")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0x10D83B0", Offset = "0x10D83B0", VA = "0x10D83B0")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000144")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0x10D7D68", Offset = "0x10D7D68", VA = "0x10D7D68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0x10D7D70", Offset = "0x10D7D70", VA = "0x10D7D70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x6000E2B")]
			[Address(RVA = "0x10D7D78", Offset = "0x10D7D78", VA = "0x10D7D78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000147")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6000E2C")]
			[Address(RVA = "0x10D7D80", Offset = "0x10D7D80", VA = "0x10D7D80", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000018")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6000E2D")]
			[Address(RVA = "0x10D7D88", Offset = "0x10D7D88", VA = "0x10D7D88")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E2E")]
			[Address(RVA = "0x10D7E38", Offset = "0x10D7E38", VA = "0x10D7E38")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6000E30")]
			[Address(RVA = "0x10D7F04", Offset = "0x10D7F04", VA = "0x10D7F04")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E31")]
			[Address(RVA = "0x10D7FB4", Offset = "0x10D7FB4", VA = "0x10D7FB4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6000E33")]
			[Address(RVA = "0x10D8080", Offset = "0x10D8080", VA = "0x10D8080")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E34")]
			[Address(RVA = "0x10D8130", Offset = "0x10D8130", VA = "0x10D8130")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x10D7EE8", Offset = "0x10D7EE8", VA = "0x10D7EE8", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x10D8064", Offset = "0x10D8064", VA = "0x10D8064", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x10D81E0", Offset = "0x10D81E0", VA = "0x10D81E0", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000E36")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x10D5A68", Offset = "0x10D5A68", VA = "0x10D5A68", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x10D82AC", Offset = "0x10D82AC", VA = "0x10D82AC", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x10D67AC", Offset = "0x10D67AC", VA = "0x10D67AC")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4000B27")]
		None,
		[Token(Token = "0x4000B28")]
		Proximity,
		[Token(Token = "0x4000B29")]
		Contact,
		[Token(Token = "0x4000B2A")]
		Action
	}
	[Token(Token = "0x200022D")]
	public enum InteractableState
	{
		[Token(Token = "0x4000B2C")]
		Default,
		[Token(Token = "0x4000B2D")]
		ProximityState,
		[Token(Token = "0x4000B2E")]
		ContactState,
		[Token(Token = "0x4000B2F")]
		ActionState
	}
	[Token(Token = "0x200022E")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x10D6338", Offset = "0x10D6338", VA = "0x10D6338")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x17000148")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0x10D83F8", Offset = "0x10D83F8", VA = "0x10D83F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x10D81FC", Offset = "0x10D81FC", VA = "0x10D81FC")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x10D8300", Offset = "0x10D8300", VA = "0x10D8300")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x10D8450", Offset = "0x10D8450", VA = "0x10D8450")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x2000231")]
		[CompilerGenerated]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x4000B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x4000B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x4000B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x4000B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x4000B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x4000B40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000149")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E49")]
				[Address(RVA = "0x10D8C10", Offset = "0x10D8C10", VA = "0x10D8C10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E4B")]
				[Address(RVA = "0x10D8C58", Offset = "0x10D8C58", VA = "0x10D8C58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E45")]
			[Address(RVA = "0x10D85F8", Offset = "0x10D85F8", VA = "0x10D85F8")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000E46")]
			[Address(RVA = "0x10D8734", Offset = "0x10D8734", VA = "0x10D8734", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E47")]
			[Address(RVA = "0x10D8750", Offset = "0x10D8750", VA = "0x10D8750", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E48")]
			[Address(RVA = "0x10D8BC0", Offset = "0x10D8BC0", VA = "0x10D8BC0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0x10D8C18", Offset = "0x10D8C18", VA = "0x10D8C18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x10D84F0", Offset = "0x10D84F0", VA = "0x10D84F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x10D855C", Offset = "0x10D855C", VA = "0x10D855C")]
		[IteratorStateMachine(typeof(<AttachToolsToHands>d__3))]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x10D8620", Offset = "0x10D8620", VA = "0x10D8620")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x10D872C", Offset = "0x10D872C", VA = "0x10D872C")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x1700014B")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0x10D8C60", Offset = "0x10D8C60", VA = "0x10D8C60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x10D8DBC", Offset = "0x10D8DBC", VA = "0x10D8DBC")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x10D8E58", Offset = "0x10D8E58", VA = "0x10D8E58")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x10D8EF4", Offset = "0x10D8EF4", VA = "0x10D8EF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x10D9190", Offset = "0x10D9190", VA = "0x10D9190")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x10D91CC", Offset = "0x10D91CC", VA = "0x10D91CC")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x10D94A4", Offset = "0x10D94A4", VA = "0x10D94A4")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x10D96AC", Offset = "0x10D96AC", VA = "0x10D96AC")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x2000234")]
		[CompilerGenerated]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x17000150")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E65")]
				[Address(RVA = "0x10DA87C", Offset = "0x10DA87C", VA = "0x10DA87C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000151")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E67")]
				[Address(RVA = "0x10DA8C4", Offset = "0x10DA8C4", VA = "0x10DA8C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E62")]
			[Address(RVA = "0x10D9948", Offset = "0x10D9948", VA = "0x10D9948")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000E63")]
			[Address(RVA = "0x10DA3EC", Offset = "0x10DA3EC", VA = "0x10DA3EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E64")]
			[Address(RVA = "0x10DA3F0", Offset = "0x10DA3F0", VA = "0x10DA3F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E66")]
			[Address(RVA = "0x10DA884", Offset = "0x10DA884", VA = "0x10DA884", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B48")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700014C")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000E54")]
			[Address(RVA = "0x10D97B4", Offset = "0x10D97B4", VA = "0x10D97B4", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x1700014D")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6000E55")]
			[Address(RVA = "0x10D97BC", Offset = "0x10D97BC", VA = "0x10D97BC", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x1700014E")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6000E56")]
			[Address(RVA = "0x10D97C4", Offset = "0x10D97C4", VA = "0x10D97C4", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014F")]
		public override bool EnableState
		{
			[Token(Token = "0x6000E57")]
			[Address(RVA = "0x10D97CC", Offset = "0x10D97CC", VA = "0x10D97CC", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E58")]
			[Address(RVA = "0x10D97F4", Offset = "0x10D97F4", VA = "0x10D97F4", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x10D9824", Offset = "0x10D9824", VA = "0x10D9824", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x10D98D4", Offset = "0x10D98D4", VA = "0x10D98D4")]
		[IteratorStateMachine(typeof(<AttachTriggerLogic>d__21))]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x10D9970", Offset = "0x10D9970", VA = "0x10D9970")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x10D9BF0", Offset = "0x10D9BF0", VA = "0x10D9BF0")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x10D9DAC", Offset = "0x10D9DAC", VA = "0x10D9DAC")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x10D9E94", Offset = "0x10D9E94", VA = "0x10D9E94", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x10DA228", Offset = "0x10DA228", VA = "0x10DA228", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x10DA22C", Offset = "0x10DA22C", VA = "0x10DA22C", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x10DA230", Offset = "0x10DA230", VA = "0x10DA230")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x17000152")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0x10DA8CC", Offset = "0x10DA8CC", VA = "0x10DA8CC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E69")]
			[Address(RVA = "0x10DA8D4", Offset = "0x10DA8D4", VA = "0x10DA8D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public bool EnableState
		{
			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0x10DA8DC", Offset = "0x10DA8DC", VA = "0x10DA8DC", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0x10DA8F8", Offset = "0x10DA8F8", VA = "0x10DA8F8", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0x10DA918", Offset = "0x10DA918", VA = "0x10DA918", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0x10DA920", Offset = "0x10DA920", VA = "0x10DA920", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public float SphereRadius
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0x10DA92C", Offset = "0x10DA92C", VA = "0x10DA92C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0x10DA934", Offset = "0x10DA934", VA = "0x10DA934")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x10DA93C", Offset = "0x10DA93C", VA = "0x10DA93C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x10DA978", Offset = "0x10DA978", VA = "0x10DA978", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x10DA97C", Offset = "0x10DA97C", VA = "0x10DA97C")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000236")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x4000B5B")]
		None = 0,
		[Token(Token = "0x4000B5C")]
		Ray = 1,
		[Token(Token = "0x4000B5D")]
		Poke = 4,
		[Token(Token = "0x4000B5E")]
		All = -1
	}
	[Token(Token = "0x2000237")]
	public enum ToolInputState
	{
		[Token(Token = "0x4000B60")]
		Inactive,
		[Token(Token = "0x4000B61")]
		PrimaryInputDown,
		[Token(Token = "0x4000B62")]
		PrimaryInputDownStay,
		[Token(Token = "0x4000B63")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000238")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x10DA1D4", Offset = "0x10DA1D4", VA = "0x10DA1D4")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x2000239")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x17000156")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0x10D6688", Offset = "0x10D6688", VA = "0x10D6688")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000157")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0x10DA984", Offset = "0x10DA984", VA = "0x10DA984")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0x10DA98C", Offset = "0x10DA98C", VA = "0x10DA98C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000E77")]
			get;
		}

		[Token(Token = "0x17000159")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6000E78")]
			get;
		}

		[Token(Token = "0x1700015A")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6000E79")]
			get;
		}

		[Token(Token = "0x1700015B")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0x10DA998", Offset = "0x10DA998", VA = "0x10DA998")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0x10DA9A4", Offset = "0x10DA9A4", VA = "0x10DA9A4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0x10DA9B0", Offset = "0x10DA9B0", VA = "0x10DA9B0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0x10DA9BC", Offset = "0x10DA9BC", VA = "0x10DA9BC")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6000E82")]
			get;
			[Token(Token = "0x6000E83")]
			set;
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x10DA9C8", Offset = "0x10DA9C8", VA = "0x10DA9C8")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000E7F")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6000E80")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6000E81")]
		public abstract void DeFocus();

		[Token(Token = "0x6000E84")]
		public abstract void Initialize();

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x10D9614", Offset = "0x10D9614", VA = "0x10D9614")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x10D965C", Offset = "0x10D965C", VA = "0x10D965C")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x10DA9D0", Offset = "0x10DA9D0", VA = "0x10DA9D0", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x10DAC98", Offset = "0x10DAC98", VA = "0x10DAC98", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x10DA244", Offset = "0x10DA244", VA = "0x10DA244")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public interface InteractableToolView
	{
		[Token(Token = "0x1700015E")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6000E8A")]
			get;
		}

		[Token(Token = "0x1700015F")]
		bool EnableState
		{
			[Token(Token = "0x6000E8C")]
			get;
			[Token(Token = "0x6000E8D")]
			set;
		}

		[Token(Token = "0x17000160")]
		bool ToolActivateState
		{
			[Token(Token = "0x6000E8E")]
			get;
			[Token(Token = "0x6000E8F")]
			set;
		}

		[Token(Token = "0x6000E8B")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x200023B")]
	public class PinchStateModule
	{
		[Token(Token = "0x200023C")]
		private enum PinchState
		{
			[Token(Token = "0x4000B74")]
			None,
			[Token(Token = "0x4000B75")]
			PinchDown,
			[Token(Token = "0x4000B76")]
			PinchStay,
			[Token(Token = "0x4000B77")]
			PinchUp
		}

		[Token(Token = "0x4000B70")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x17000161")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6000E90")]
			[Address(RVA = "0x10DB534", Offset = "0x10DB534", VA = "0x10DB534")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000162")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0x10DB5B0", Offset = "0x10DB5B0", VA = "0x10DB5B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000163")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0x10DB62C", Offset = "0x10DB62C", VA = "0x10DB62C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x10DB6A8", Offset = "0x10DB6A8", VA = "0x10DB6A8")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x10DB6D0", Offset = "0x10DB6D0", VA = "0x10DB6D0")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x4000B78")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x4000B79")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x4000B7A")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x4000B7B")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x4000B7C")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Range(0f, 45f)]
		private float _coneAngleDegrees;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x17000164")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0x10DB848", Offset = "0x10DB848", VA = "0x10DB848", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000165")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0x10DB850", Offset = "0x10DB850", VA = "0x10DB850", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000166")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0x10DB8AC", Offset = "0x10DB8AC", VA = "0x10DB8AC", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000167")]
		public override bool EnableState
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0x10DB8B4", Offset = "0x10DB8B4", VA = "0x10DB8B4", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0x10DB8D0", Offset = "0x10DB8D0", VA = "0x10DB8D0", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x10DB8F0", Offset = "0x10DB8F0", VA = "0x10DB8F0", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x10DB944", Offset = "0x10DB944", VA = "0x10DB944")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x10DB9D0", Offset = "0x10DB9D0", VA = "0x10DB9D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x10DBC3C", Offset = "0x10DBC3C", VA = "0x10DBC3C")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x10DBCB8", Offset = "0x10DBCB8", VA = "0x10DBCB8", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x10DC0AC", Offset = "0x10DC0AC", VA = "0x10DC0AC")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x10DC248", Offset = "0x10DC248", VA = "0x10DC248")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x10DC360", Offset = "0x10DC360", VA = "0x10DC360")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x10DC684", Offset = "0x10DC684", VA = "0x10DC684")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x10DCA00", Offset = "0x10DCA00", VA = "0x10DCA00", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x10DCA3C", Offset = "0x10DCA3C", VA = "0x10DCA3C", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x10DCA70", Offset = "0x10DCA70", VA = "0x10DCA70")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4000B88")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x4000B89")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x17000168")]
		public bool EnableState
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0x10DCB84", Offset = "0x10DCB84", VA = "0x10DCB84", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0x10DCBA0", Offset = "0x10DCBA0", VA = "0x10DCBA0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0x10DCBF4", Offset = "0x10DCBF4", VA = "0x10DCBF4", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0x10DCBFC", Offset = "0x10DCBFC", VA = "0x10DCBFC", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0x10DCE58", Offset = "0x10DCE58", VA = "0x10DCE58", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0x10DCE60", Offset = "0x10DCE60", VA = "0x10DCE60")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x10DCC38", Offset = "0x10DCC38", VA = "0x10DCC38")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x10DCE68", Offset = "0x10DCE68", VA = "0x10DCE68", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x10DCF08", Offset = "0x10DCF08", VA = "0x10DCF08")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x10DD1B4", Offset = "0x10DD1B4", VA = "0x10DD1B4")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x10DD25C", Offset = "0x10DD25C", VA = "0x10DD25C")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x1700016B")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0x10DD2C0", Offset = "0x10DD2C0", VA = "0x10DD2C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0x10DD2C8", Offset = "0x10DD2C8", VA = "0x10DD2C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700016C")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0x10DD334", Offset = "0x10DD334", VA = "0x10DD334")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0x10DD33C", Offset = "0x10DD33C", VA = "0x10DD33C")]
			set
			{
			}
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x10DD398", Offset = "0x10DD398", VA = "0x10DD398")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x10DD638", Offset = "0x10DD638", VA = "0x10DD638")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x10DD648", Offset = "0x10DD648", VA = "0x10DD648")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x10DD658", Offset = "0x10DD658", VA = "0x10DD658")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x10DD660", Offset = "0x10DD660", VA = "0x10DD660")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x10DD664", Offset = "0x10DD664", VA = "0x10DD664")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x10DD6F0", Offset = "0x10DD6F0", VA = "0x10DD6F0")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x10DD780", Offset = "0x10DD780", VA = "0x10DD780")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x10DD810", Offset = "0x10DD810", VA = "0x10DD810")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x10DD8BC", Offset = "0x10DD8BC", VA = "0x10DD8BC")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x10DD998", Offset = "0x10DD998", VA = "0x10DD998")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x10DD9DC", Offset = "0x10DD9DC", VA = "0x10DD9DC")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x10DDA40", Offset = "0x10DDA40", VA = "0x10DDA40")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x10DDAA0", Offset = "0x10DDAA0", VA = "0x10DDAA0")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x10DDAA8", Offset = "0x10DDAA8", VA = "0x10DDAA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x10DDAAC", Offset = "0x10DDAAC", VA = "0x10DDAAC")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x10DDA70", Offset = "0x10DDA70", VA = "0x10DDA70")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x10DDAE0", Offset = "0x10DDAE0", VA = "0x10DDAE0")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x2000243")]
		[CompilerGenerated]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x4000BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x4000BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x4000BA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x1700016D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ECF")]
				[Address(RVA = "0x10DE160", Offset = "0x10DE160", VA = "0x10DE160", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ED1")]
				[Address(RVA = "0x10DE1A8", Offset = "0x10DE1A8", VA = "0x10DE1A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ECC")]
			[Address(RVA = "0x10DDED8", Offset = "0x10DDED8", VA = "0x10DDED8")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0x10DDFA0", Offset = "0x10DDFA0", VA = "0x10DDFA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0x10DDFA4", Offset = "0x10DDFA4", VA = "0x10DDFA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0x10DE168", Offset = "0x10DE168", VA = "0x10DE168", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B99")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x4000B9A")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x10DDAE8", Offset = "0x10DDAE8", VA = "0x10DDAE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x10DDB88", Offset = "0x10DDB88", VA = "0x10DDB88")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x10DDE98", Offset = "0x10DDE98", VA = "0x10DDE98")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x10DDE24", Offset = "0x10DDE24", VA = "0x10DDE24")]
		[IteratorStateMachine(typeof(<LerpToHMD>d__13))]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x10DDF00", Offset = "0x10DDF00", VA = "0x10DDF00")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x2000245")]
		public enum SelectionState
		{
			[Token(Token = "0x4000BB0")]
			Off,
			[Token(Token = "0x4000BB1")]
			Selected,
			[Token(Token = "0x4000BB2")]
			Highlighted
		}

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x1700016F")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0x10DE1B0", Offset = "0x10DE1B0", VA = "0x10DE1B0")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0x10DE1B8", Offset = "0x10DE1B8", VA = "0x10DE1B8")]
			set
			{
			}
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x10DE30C", Offset = "0x10DE30C", VA = "0x10DE30C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x10DE4D0", Offset = "0x10DE4D0", VA = "0x10DE4D0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x10DE22C", Offset = "0x10DE22C", VA = "0x10DE22C")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x10DE598", Offset = "0x10DE598", VA = "0x10DE598")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000246")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000247")]
		public enum SegmentType
		{
			[Token(Token = "0x4000BC1")]
			Straight,
			[Token(Token = "0x4000BC2")]
			LeftTurn,
			[Token(Token = "0x4000BC3")]
			RightTurn,
			[Token(Token = "0x4000BC4")]
			Switch
		}

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x4000BB9")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x4000BBA")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x17000170")]
		public float StartDistance
		{
			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0x10DE608", Offset = "0x10DE608", VA = "0x10DE608")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0x10DE610", Offset = "0x10DE610", VA = "0x10DE610")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public float GridSize
		{
			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0x10DE618", Offset = "0x10DE618", VA = "0x10DE618")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0x10DE620", Offset = "0x10DE620", VA = "0x10DE620")]
			private set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public int SubDivCount
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0x10DE628", Offset = "0x10DE628", VA = "0x10DE628")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0x10DE630", Offset = "0x10DE630", VA = "0x10DE630")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public SegmentType Type
		{
			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0x10DE638", Offset = "0x10DE638", VA = "0x10DE638")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x17000174")]
		public Pose EndPose
		{
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0x10DE640", Offset = "0x10DE640", VA = "0x10DE640")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000175")]
		public float Radius
		{
			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0x10DEA14", Offset = "0x10DEA14", VA = "0x10DEA14")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000176")]
		public float SegmentLength
		{
			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0x10DE69C", Offset = "0x10DE69C", VA = "0x10DE69C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x10DEA24", Offset = "0x10DEA24", VA = "0x10DEA24")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x10DEA3C", Offset = "0x10DEA3C", VA = "0x10DEA3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x10DE6DC", Offset = "0x10DE6DC", VA = "0x10DE6DC")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x10DEA40", Offset = "0x10DEA40", VA = "0x10DEA40")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x10DEA44", Offset = "0x10DEA44", VA = "0x10DEA44")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x10DEAA0", Offset = "0x10DEAA0", VA = "0x10DEAA0")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x10DF3D4", Offset = "0x10DF3D4", VA = "0x10DF3D4")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x10DF658", Offset = "0x10DF658", VA = "0x10DF658")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000249")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x4000BD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4000BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x17000177")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EF9")]
				[Address(RVA = "0x10E018C", Offset = "0x10E018C", VA = "0x10E018C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000178")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EFB")]
				[Address(RVA = "0x10E01D4", Offset = "0x10E01D4", VA = "0x10E01D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0x10DFFC0", Offset = "0x10DFFC0", VA = "0x10DFFC0")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0x10E0010", Offset = "0x10E0010", VA = "0x10E0010", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0x10E0014", Offset = "0x10E0014", VA = "0x10E0014", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0x10E0194", Offset = "0x10E0194", VA = "0x10E0194", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BC5")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x4000BC6")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x10DF7B8", Offset = "0x10DF7B8", VA = "0x10DF7B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x10DF870", Offset = "0x10DF870", VA = "0x10DF870")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x10DF900", Offset = "0x10DF900", VA = "0x10DF900")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x10DFA50", Offset = "0x10DFA50", VA = "0x10DFA50")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x10DFBE4", Offset = "0x10DFBE4", VA = "0x10DFBE4")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x10DFCF4", Offset = "0x10DFCF4", VA = "0x10DFCF4")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x10DFEF8", Offset = "0x10DFEF8", VA = "0x10DFEF8")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x10DFE04", Offset = "0x10DFE04", VA = "0x10DFE04")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x10DFE18", Offset = "0x10DFE18", VA = "0x10DFE18")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x10DFF4C", Offset = "0x10DFF4C", VA = "0x10DFF4C")]
		[IteratorStateMachine(typeof(<ResetPosition>d__26))]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x10DFFE8", Offset = "0x10DFFE8", VA = "0x10DFFE8")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x17000179")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0x10E01DC", Offset = "0x10E01DC", VA = "0x10E01DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x10E01EC", Offset = "0x10E01EC", VA = "0x10E01EC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x10E01F4", Offset = "0x10E01F4", VA = "0x10E01F4", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x10E0524", Offset = "0x10E0524", VA = "0x10E0524")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x4000BDE")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x4000BDF")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x1700017A")]
		public float Distance
		{
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0x10E0620", Offset = "0x10E0620", VA = "0x10E0620")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0x10E0628", Offset = "0x10E0628", VA = "0x10E0628")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public float Scale
		{
			[Token(Token = "0x6000F02")]
			[Address(RVA = "0x10E0630", Offset = "0x10E0630", VA = "0x10E0630")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F03")]
			[Address(RVA = "0x10E0638", Offset = "0x10E0638", VA = "0x10E0638")]
			set
			{
			}
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x10E01F0", Offset = "0x10E01F0", VA = "0x10E01F0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x10E0640", Offset = "0x10E0640", VA = "0x10E0640")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x10E0230", Offset = "0x10E0230", VA = "0x10E0230")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x10E0440", Offset = "0x10E0440", VA = "0x10E0440")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x6000F08")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x10E0584", Offset = "0x10E0584", VA = "0x10E0584")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x200024D")]
		[CompilerGenerated]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x4000BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x4000BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x4000BF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x4000BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x4000BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x4000BFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x4000BFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x4000BFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x1700017C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F17")]
				[Address(RVA = "0x10E0F10", Offset = "0x10E0F10", VA = "0x10E0F10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F19")]
				[Address(RVA = "0x10E0F58", Offset = "0x10E0F58", VA = "0x10E0F58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F14")]
			[Address(RVA = "0x10E0B84", Offset = "0x10E0B84", VA = "0x10E0B84")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000F15")]
			[Address(RVA = "0x10E0CF8", Offset = "0x10E0CF8", VA = "0x10E0CF8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F16")]
			[Address(RVA = "0x10E0CFC", Offset = "0x10E0CFC", VA = "0x10E0CFC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F18")]
			[Address(RVA = "0x10E0F18", Offset = "0x10E0F18", VA = "0x10E0F18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x10E07B0", Offset = "0x10E07B0", VA = "0x10E07B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x10E080C", Offset = "0x10E080C", VA = "0x10E080C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x10E08E4", Offset = "0x10E08E4", VA = "0x10E08E4")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x10E0A38", Offset = "0x10E0A38", VA = "0x10E0A38")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x10E0940", Offset = "0x10E0940", VA = "0x10E0940")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x10E0B00", Offset = "0x10E0B00", VA = "0x10E0B00")]
		[IteratorStateMachine(typeof(<AnimateCrossing>d__15))]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x10E0BAC", Offset = "0x10E0BAC", VA = "0x10E0BAC")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x10E0C44", Offset = "0x10E0C44", VA = "0x10E0C44")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x10E0CA0", Offset = "0x10E0CA0", VA = "0x10E0CA0")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x200024F")]
		private enum EngineSoundState
		{
			[Token(Token = "0x4000C1C")]
			Start,
			[Token(Token = "0x4000C1D")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x4000C1E")]
			Stop
		}

		[Token(Token = "0x2000250")]
		[CompilerGenerated]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4000C22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4000C23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4000C24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4000C25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4000C26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4000C27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x1700017E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F2C")]
				[Address(RVA = "0x10E17F0", Offset = "0x10E17F0", VA = "0x10E17F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F2E")]
				[Address(RVA = "0x10E1838", Offset = "0x10E1838", VA = "0x10E1838", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F29")]
			[Address(RVA = "0x10E1200", Offset = "0x10E1200", VA = "0x10E1200")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6000F2A")]
			[Address(RVA = "0x10E15C8", Offset = "0x10E15C8", VA = "0x10E15C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F2B")]
			[Address(RVA = "0x10E15CC", Offset = "0x10E15CC", VA = "0x10E15CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F2D")]
			[Address(RVA = "0x10E17F8", Offset = "0x10E17F8", VA = "0x10E17F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BFE")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x4000BFF")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x4000C00")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x4000C01")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0.2f, 2.7f)]
		[SerializeField]
		protected float _initialSpeed;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x10E0F60", Offset = "0x10E0F60", VA = "0x10E0F60")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x10E10BC", Offset = "0x10E10BC", VA = "0x10E10BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x10E10C8", Offset = "0x10E10C8", VA = "0x10E10C8", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x10DD694", Offset = "0x10DD694", VA = "0x10DD694")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x10E1034", Offset = "0x10E1034", VA = "0x10E1034")]
		[IteratorStateMachine(typeof(<StartStopTrain>d__34))]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x10E1228", Offset = "0x10E1228", VA = "0x10E1228")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x10E11A0", Offset = "0x10E11A0", VA = "0x10E11A0")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x10DD720", Offset = "0x10DD720", VA = "0x10DD720")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x10DD7B0", Offset = "0x10DD7B0", VA = "0x10DD7B0")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x10E143C", Offset = "0x10E143C", VA = "0x10E143C")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x10E1530", Offset = "0x10E1530", VA = "0x10E1530")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x10DD840", Offset = "0x10DD840", VA = "0x10DD840")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x10DD8EC", Offset = "0x10DD8EC", VA = "0x10DD8EC")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x10DD9CC", Offset = "0x10DD9CC", VA = "0x10DD9CC")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x10E156C", Offset = "0x10E156C", VA = "0x10E156C")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x17000180")]
		public float TrackLength
		{
			[Token(Token = "0x6000F2F")]
			[Address(RVA = "0x10E1840", Offset = "0x10E1840", VA = "0x10E1840")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F30")]
			[Address(RVA = "0x10E1848", Offset = "0x10E1848", VA = "0x10E1848")]
			private set
			{
			}
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x10E1850", Offset = "0x10E1850", VA = "0x10E1850")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x10E06A8", Offset = "0x10E06A8", VA = "0x10E06A8")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x10E1854", Offset = "0x10E1854", VA = "0x10E1854")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x10E1A4C", Offset = "0x10E1A4C", VA = "0x10E1A4C")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x10E1B2C", Offset = "0x10E1B2C", VA = "0x10E1B2C")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class Pose
	{
		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x10DF720", Offset = "0x10DF720", VA = "0x10DF720")]
		public Pose()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x10E1B48", Offset = "0x10E1B48", VA = "0x10E1B48")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000254")]
		[CompilerGenerated]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4000C3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4000C40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4000C41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x17000182")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F44")]
				[Address(RVA = "0x10E213C", Offset = "0x10E213C", VA = "0x10E213C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000183")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F46")]
				[Address(RVA = "0x10E2184", Offset = "0x10E2184", VA = "0x10E2184", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F41")]
			[Address(RVA = "0x10E1E24", Offset = "0x10E1E24", VA = "0x10E1E24")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000F42")]
			[Address(RVA = "0x10E1F98", Offset = "0x10E1F98", VA = "0x10E1F98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F43")]
			[Address(RVA = "0x10E1F9C", Offset = "0x10E1F9C", VA = "0x10E1F9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F45")]
			[Address(RVA = "0x10E2144", Offset = "0x10E2144", VA = "0x10E2144", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000255")]
		[CompilerGenerated]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4000C45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4000C46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4000C47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x17000184")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F4A")]
				[Address(RVA = "0x10E2260", Offset = "0x10E2260", VA = "0x10E2260", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000185")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F4C")]
				[Address(RVA = "0x10E22A8", Offset = "0x10E22A8", VA = "0x10E22A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F47")]
			[Address(RVA = "0x10E1F00", Offset = "0x10E1F00", VA = "0x10E1F00")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000F48")]
			[Address(RVA = "0x10E218C", Offset = "0x10E218C", VA = "0x10E218C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F49")]
			[Address(RVA = "0x10E2190", Offset = "0x10E2190", VA = "0x10E2190", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0x10E2268", Offset = "0x10E2268", VA = "0x10E2268", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C31")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x17000181")]
		public bool IsMoving
		{
			[Token(Token = "0x6000F38")]
			[Address(RVA = "0x10E1BAC", Offset = "0x10E1BAC", VA = "0x10E1BAC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0x10E1BB4", Offset = "0x10E1BB4", VA = "0x10E1BB4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x10E1BC0", Offset = "0x10E1BC0", VA = "0x10E1BC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x10E1BF0", Offset = "0x10E1BF0", VA = "0x10E1BF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x10E1D30", Offset = "0x10E1D30", VA = "0x10E1D30")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x10E1DA0", Offset = "0x10E1DA0", VA = "0x10E1DA0")]
		[IteratorStateMachine(typeof(<LerpToSpeed>d__17))]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x10E1E4C", Offset = "0x10E1E4C", VA = "0x10E1E4C")]
		[IteratorStateMachine(typeof(<PlaySoundDelayed>d__18))]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x10E1F28", Offset = "0x10E1F28", VA = "0x10E1F28")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x10E1F90", Offset = "0x10E1F90", VA = "0x10E1F90")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x10E22B0", Offset = "0x10E22B0", VA = "0x10E22B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x10E2324", Offset = "0x10E2324", VA = "0x10E2324")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x10E23EC", Offset = "0x10E23EC", VA = "0x10E23EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x10E24FC", Offset = "0x10E24FC", VA = "0x10E24FC")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x10E2578", Offset = "0x10E2578", VA = "0x10E2578")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x10E2640", Offset = "0x10E2640", VA = "0x10E2640")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x2000257")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4000C4E")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4000C4F")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4000C50")]
		EUDT_None,
		[Token(Token = "0x4000C51")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000258")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000259")]
		[CompilerGenerated]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x17000186")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F66")]
				[Address(RVA = "0x10E3CD0", Offset = "0x10E3CD0", VA = "0x10E3CD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000187")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F68")]
				[Address(RVA = "0x10E3D18", Offset = "0x10E3D18", VA = "0x10E3D18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F63")]
			[Address(RVA = "0x10E3360", Offset = "0x10E3360", VA = "0x10E3360")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x10E3AD4", Offset = "0x10E3AD4", VA = "0x10E3AD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F65")]
			[Address(RVA = "0x10E3AD8", Offset = "0x10E3AD8", VA = "0x10E3AD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F67")]
			[Address(RVA = "0x10E3CD8", Offset = "0x10E3CD8", VA = "0x10E3CD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x4000C53")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x4000C54")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x4000C55")]
		private const string noneID = "NoneID";

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("App vs Compositor Comparison Settings")]
		public GameObject mainCamera;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Level Loading Sim Settings")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x10E2650", Offset = "0x10E2650", VA = "0x10E2650")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x10E2E90", Offset = "0x10E2E90", VA = "0x10E2E90")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x10E2FB8", Offset = "0x10E2FB8", VA = "0x10E2FB8")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x10E30E8", Offset = "0x10E30E8", VA = "0x10E30E8")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x10E3218", Offset = "0x10E3218", VA = "0x10E3218")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x10E2F98", Offset = "0x10E2F98", VA = "0x10E2F98")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x10E32EC", Offset = "0x10E32EC", VA = "0x10E32EC")]
		[IteratorStateMachine(typeof(<WaitforOVROverlay>d__30))]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x10E3388", Offset = "0x10E3388", VA = "0x10E3388")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x10E2AC0", Offset = "0x10E2AC0", VA = "0x10E2AC0")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x10E34D0", Offset = "0x10E34D0", VA = "0x10E34D0")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x10E33B0", Offset = "0x10E33B0", VA = "0x10E33B0")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x10E3858", Offset = "0x10E3858", VA = "0x10E3858")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x10E3944", Offset = "0x10E3944", VA = "0x10E3944")]
		public OVROverlaySample()
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x200025A")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x4000C6D")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4000C6E")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4000C6F")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4000C70")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x4000C71")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x4000C72")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x4000C73")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x4000C74")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x4000C75")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x4000C76")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4000C77")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x10E3D20", Offset = "0x10E3D20", VA = "0x10E3D20")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x10E3D78", Offset = "0x10E3D78", VA = "0x10E3D78")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x10E41C8", Offset = "0x10E41C8", VA = "0x10E41C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x10E42B4", Offset = "0x10E42B4", VA = "0x10E42B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x10E4418", Offset = "0x10E4418", VA = "0x10E4418")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x10E46E8", Offset = "0x10E46E8", VA = "0x10E46E8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x10E47CC", Offset = "0x10E47CC", VA = "0x10E47CC")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x10E497C", Offset = "0x10E497C", VA = "0x10E497C")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x10E44A4", Offset = "0x10E44A4", VA = "0x10E44A4")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x10E44F8", Offset = "0x10E44F8", VA = "0x10E44F8")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x10E4088", Offset = "0x10E4088", VA = "0x10E4088")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x10E4AA0", Offset = "0x10E4AA0", VA = "0x10E4AA0")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public enum HandPoseId
	{
		[Token(Token = "0x4000C8C")]
		Default,
		[Token(Token = "0x4000C8D")]
		Generic,
		[Token(Token = "0x4000C8E")]
		PingPongBall,
		[Token(Token = "0x4000C8F")]
		Controller
	}
	[Token(Token = "0x200025D")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x17000188")]
		public bool AllowPointing
		{
			[Token(Token = "0x6000F78")]
			[Address(RVA = "0x10E4B58", Offset = "0x10E4B58", VA = "0x10E4B58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000189")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6000F79")]
			[Address(RVA = "0x10E4B60", Offset = "0x10E4B60", VA = "0x10E4B60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018A")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6000F7A")]
			[Address(RVA = "0x10E4B68", Offset = "0x10E4B68", VA = "0x10E4B68")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x10E4B70", Offset = "0x10E4B70", VA = "0x10E4B70")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x10E4B78", Offset = "0x10E4B78", VA = "0x10E4B78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x10E4E44", Offset = "0x10E4E44", VA = "0x10E4E44")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x10E4E94", Offset = "0x10E4E94", VA = "0x10E4E94")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x10E4ECC", Offset = "0x10E4ECC", VA = "0x10E4ECC")]
		public TouchController()
		{
		}
	}
}
namespace Obi
{
	[Token(Token = "0x200025F")]
	[RequireComponent(typeof(CapsuleCollider))]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(Animator))]
	public class ObiCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_MovingTurnSpeed;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_StationaryTurnSpeed;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_JumpPower;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Range(1f, 4f)]
		private float m_GravityMultiplier;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_RunCycleLegOffset;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_MoveSpeedMultiplier;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_AnimSpeedMultiplier;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_GroundCheckDistance;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator m_Animator;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_IsGrounded;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_OrigGroundCheckDistance;

		[Token(Token = "0x4000CA2")]
		private const float k_Half = 0.5f;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_TurnAmount;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float m_ForwardAmount;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 m_GroundNormal;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_CapsuleHeight;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 m_CapsuleCenter;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CapsuleCollider m_Capsule;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool m_Crouching;

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x10E4ED4", Offset = "0x10E4ED4", VA = "0x10E4ED4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x10E504C", Offset = "0x10E504C", VA = "0x10E504C")]
		public void Move(Vector3 move, bool crouch, bool jump)
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x10E5668", Offset = "0x10E5668", VA = "0x10E5668")]
		private void ScaleCapsuleForCrouching(bool crouch)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x10E5888", Offset = "0x10E5888", VA = "0x10E5888")]
		private void PreventStandingInLowHeadroom()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x10E5A08", Offset = "0x10E5A08", VA = "0x10E5A08")]
		private void UpdateAnimator(Vector3 move)
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x10E55D0", Offset = "0x10E55D0", VA = "0x10E55D0")]
		private void HandleAirborneMovement()
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x10E54B4", Offset = "0x10E54B4", VA = "0x10E54B4")]
		private void HandleGroundedMovement(bool crouch, bool jump)
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x10E5430", Offset = "0x10E5430", VA = "0x10E5430")]
		private void ApplyExtraTurnRotation()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x10E5CC8", Offset = "0x10E5CC8", VA = "0x10E5CC8")]
		public void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x10E52A8", Offset = "0x10E52A8", VA = "0x10E52A8")]
		private void CheckGroundStatus()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x10E5D58", Offset = "0x10E5D58", VA = "0x10E5D58")]
		public ObiCharacter()
		{
		}
	}
	[Token(Token = "0x2000260")]
	[RequireComponent(typeof(ObiCharacter))]
	public class SampleCharacterController : MonoBehaviour
	{
		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ObiCharacter m_Character;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_Cam;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_CamForward;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 m_Move;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_Jump;

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x10E5D78", Offset = "0x10E5D78", VA = "0x10E5D78")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x10E5E88", Offset = "0x10E5E88", VA = "0x10E5E88")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x10E6130", Offset = "0x10E6130", VA = "0x10E6130")]
		public SampleCharacterController()
		{
		}
	}
	[Token(Token = "0x2000261")]
	[RequireComponent(typeof(ObiActor))]
	public class ColorFromPhase : MonoBehaviour
	{
		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ObiActor actor;

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x10E6138", Offset = "0x10E6138", VA = "0x10E6138")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x10E6190", Offset = "0x10E6190", VA = "0x10E6190")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x10E6384", Offset = "0x10E6384", VA = "0x10E6384")]
		public ColorFromPhase()
		{
		}
	}
	[Token(Token = "0x2000262")]
	[RequireComponent(typeof(ObiActor))]
	public class ColorFromVelocity : MonoBehaviour
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ObiActor actor;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensibility;

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x10E638C", Offset = "0x10E638C", VA = "0x10E638C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x10E63E4", Offset = "0x10E63E4", VA = "0x10E63E4")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x10E63E8", Offset = "0x10E63E8", VA = "0x10E63E8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x10E65AC", Offset = "0x10E65AC", VA = "0x10E65AC")]
		public ColorFromVelocity()
		{
		}
	}
	[Token(Token = "0x2000263")]
	[RequireComponent(typeof(ObiActor))]
	public class ColorRandomizer : MonoBehaviour
	{
		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ObiActor actor;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gradient gradient;

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x10E65C0", Offset = "0x10E65C0", VA = "0x10E65C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x10E66D4", Offset = "0x10E66D4", VA = "0x10E66D4")]
		public ColorRandomizer()
		{
		}
	}
	[Token(Token = "0x2000264")]
	[RequireComponent(typeof(Camera))]
	public class LookAroundCamera : MonoBehaviour
	{
		[Token(Token = "0x2000265")]
		public struct CameraShot
		{
			[Token(Token = "0x4000CBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000CBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion rotation;

			[Token(Token = "0x4000CBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 up;

			[Token(Token = "0x4000CBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float fieldOfView;

			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0x10E687C", Offset = "0x10E687C", VA = "0x10E687C")]
			public CameraShot(Vector3 position, Quaternion rotation, Vector3 up, float fieldOfView)
			{
			}
		}

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera cam;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CameraShot currentShot;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float movementSpeed;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float rotationSpeed;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float translationResponse;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float rotationResponse;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float fovResponse;

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x10E6748", Offset = "0x10E6748", VA = "0x10E6748")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x10E68A4", Offset = "0x10E68A4", VA = "0x10E68A4")]
		private void LookAt(Vector3 position, Vector3 up)
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x10E68E0", Offset = "0x10E68E0", VA = "0x10E68E0")]
		private void UpdateShot()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x10E6A94", Offset = "0x10E6A94", VA = "0x10E6A94")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x10E6EA8", Offset = "0x10E6EA8", VA = "0x10E6EA8")]
		public LookAroundCamera()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class MoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000267")]
		public class Vector3andSpace
		{
			[Token(Token = "0x4000CC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x4000CC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0x10E6FA4", Offset = "0x10E6FA4", VA = "0x10E6FA4")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x10E6EC4", Offset = "0x10E6EC4", VA = "0x10E6EC4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x10E6EE0", Offset = "0x10E6EE0", VA = "0x10E6EE0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x10E6F9C", Offset = "0x10E6F9C", VA = "0x10E6F9C")]
		public MoveAndRotate()
		{
		}
	}
}
namespace MantisLOD
{
	[Token(Token = "0x2000268")]
	internal class My_Half_edge : IComparable
	{
		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool alive;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int pqIndex;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public My_Half_vertex vertex;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int index;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public My_Half_face face;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public My_Half_edge next;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float cost;

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x10E6FB4", Offset = "0x10E6FB4", VA = "0x10E6FB4")]
		public My_Half_edge()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x10E6FD4", Offset = "0x10E6FD4", VA = "0x10E6FD4", Slot = "4")]
		public int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000269")]
	internal class My_Half_vertex
	{
		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool alive;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool on_boundary;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool on_symmetry;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 position;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<My_Half_edge> edges;

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x10E7058", Offset = "0x10E7058", VA = "0x10E7058")]
		public My_Half_vertex()
		{
		}
	}
	[Token(Token = "0x200026A")]
	internal class My_Half_face
	{
		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool alive;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int mat;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public My_Half_edge edge;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 n;

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x10E70F0", Offset = "0x10E70F0", VA = "0x10E70F0")]
		public My_Half_face()
		{
		}
	}
	[Token(Token = "0x200026B")]
	internal class My_Half_edge_index
	{
		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public My_Half_edge edge;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int index_from;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int index_to;

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x10E7110", Offset = "0x10E7110", VA = "0x10E7110")]
		public My_Half_edge_index()
		{
		}
	}
	[Token(Token = "0x200026C")]
	internal class My_Half_trace
	{
		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool safe;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public My_Half_vertex v_from;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public My_Half_vertex v_to;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<My_Half_face> erased_faces;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<My_Half_edge_index> updated_edge_indices;

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x10E7118", Offset = "0x10E7118", VA = "0x10E7118")]
		public My_Half_trace()
		{
		}
	}
	[Token(Token = "0x200026D")]
	internal abstract class BinaryHeap
	{
		[Token(Token = "0x4000CDD")]
		private const int rootIndex = 1;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<My_Half_edge> collection;

		[Token(Token = "0x1700018B")]
		private int LastNodeIndex
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x10E7558", Offset = "0x10E7558", VA = "0x10E7558")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x10E71FC", Offset = "0x10E71FC", VA = "0x10E71FC")]
		public BinaryHeap()
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x10E7338", Offset = "0x10E7338", VA = "0x10E7338")]
		public BinaryHeap(int capacity)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x10E7488", Offset = "0x10E7488", VA = "0x10E7488")]
		public void Push(My_Half_edge item)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x10E76FC", Offset = "0x10E76FC", VA = "0x10E76FC")]
		public My_Half_edge Pop()
		{
			return null;
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x10E7A1C", Offset = "0x10E7A1C", VA = "0x10E7A1C")]
		public bool Remove(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x10E7B40", Offset = "0x10E7B40", VA = "0x10E7B40")]
		public int Size()
		{
			return default(int);
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x10E7B8C", Offset = "0x10E7B8C", VA = "0x10E7B8C")]
		public My_Half_edge Top()
		{
			return null;
		}

		[Token(Token = "0x6000FAF")]
		protected abstract bool Compare(My_Half_edge current, My_Half_edge other);

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x10E75A4", Offset = "0x10E75A4", VA = "0x10E75A4")]
		private void BubbleUp(int index)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x10E7844", Offset = "0x10E7844", VA = "0x10E7844")]
		private void BubbleDown(int index)
		{
		}
	}
	[Token(Token = "0x200026E")]
	internal class MinHeap : BinaryHeap
	{
		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x10E7BFC", Offset = "0x10E7BFC", VA = "0x10E7BFC")]
		public MinHeap()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x10E7C00", Offset = "0x10E7C00", VA = "0x10E7C00")]
		public MinHeap(int capacity)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x10E7C04", Offset = "0x10E7C04", VA = "0x10E7C04", Slot = "4")]
		protected override bool Compare(My_Half_edge current, My_Half_edge other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200026F")]
	internal class Vector3Comparer : IEqualityComparer<Vector3>
	{
		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x10E7C24", Offset = "0x10E7C24", VA = "0x10E7C24", Slot = "4")]
		public bool Equals(Vector3 vec1, Vector3 vec2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x10E7C7C", Offset = "0x10E7C7C", VA = "0x10E7C7C", Slot = "5")]
		public int GetHashCode(Vector3 vec)
		{
			return default(int);
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x10E7CE0", Offset = "0x10E7CE0", VA = "0x10E7CE0")]
		public Vector3Comparer()
		{
		}
	}
	[Token(Token = "0x2000270")]
	internal class Progressive_Mesh
	{
		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<My_Half_vertex> vertices;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<My_Half_face> faces;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<My_Half_edge> edges;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<My_Half_trace> contract_trace;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<Vector3> normals;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<Vector4> colors;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly List<Vector2> uvs;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int current_trace_position;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly MinHeap pq;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 MAX;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 MIN;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float max_square_length_of_mesh;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int face_count;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int mat_count;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool lock_boundary;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		private bool lock_detail;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		private bool lock_symmetry;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		private bool lock_normal;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool lock_shape;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool use_detail_map;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int detail_boost;

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x10E7CE8", Offset = "0x10E7CE8", VA = "0x10E7CE8")]
		public Progressive_Mesh()
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x10E7F9C", Offset = "0x10E7F9C", VA = "0x10E7F9C")]
		public int get_trace_num()
		{
			return default(int);
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x10E7FE4", Offset = "0x10E7FE4", VA = "0x10E7FE4")]
		public void create_progressive_mesh(Vector3[] vertex_array, int vertex_count, int[] triangle_array, int triangle_count, Vector3[] normal_array, int normal_count, Color[] color_array, int color_count, Vector2[] uv_array, int uv_count, int protect_boundary, int protect_detail, int protect_symmetry, int protect_normal, int protect_shape, int use_detail_map, int detail_boost)
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x10E9338", Offset = "0x10E9338", VA = "0x10E9338")]
		public void get_triangle_list(int goal, int[] triangle_array, ref int triangle_count)
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x10E8174", Offset = "0x10E8174", VA = "0x10E8174")]
		private void load_mesh_from_array(Vector3[] vertex_array, int vertex_count, int[] triangle_array, int triangle_count, Vector3[] normal_array, int normal_count, Color[] color_array, int color_count, Vector2[] uv_array, int uv_count)
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x10E9A4C", Offset = "0x10E9A4C", VA = "0x10E9A4C")]
		private void calculate_face_normal(My_Half_face one_face)
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x10E9BC0", Offset = "0x10E9BC0", VA = "0x10E9BC0")]
		private void calculate_face_normals()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x10E9CFC", Offset = "0x10E9CFC", VA = "0x10E9CFC")]
		private bool is_boundary_edge(My_Half_edge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x10E9F70", Offset = "0x10E9F70", VA = "0x10E9F70")]
		private void detect_and_mark_boundaries()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x10EA114", Offset = "0x10EA114", VA = "0x10EA114")]
		private bool is_symmetry_edge(My_Half_edge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x10EA7F8", Offset = "0x10EA7F8", VA = "0x10EA7F8")]
		private void detect_and_mark_symmetries()
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x10EA990", Offset = "0x10EA990", VA = "0x10EA990")]
		private float cost_of_edge(My_Half_edge edge)
		{
			return default(float);
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x10E8DA0", Offset = "0x10E8DA0", VA = "0x10E8DA0")]
		private void calculate_cost_of_edges()
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x10EC12C", Offset = "0x10EC12C", VA = "0x10EC12C")]
		private bool contract_edge(My_Half_edge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x10E8F20", Offset = "0x10E8F20", VA = "0x10E8F20")]
		private void contract_edges()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x10E8FA4", Offset = "0x10E8FA4", VA = "0x10E8FA4")]
		private int trace_to(int goal)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000271")]
	public static class MantisLODSimpler
	{
		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<Progressive_Mesh> simplers;

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x10ED4A4", Offset = "0x10ED4A4", VA = "0x10ED4A4")]
		public static int create_progressive_mesh(Vector3[] vertex_array, int vertex_count, int[] triangle_array, int triangle_count, Vector3[] normal_array, int normal_count, Color[] color_array, int color_count, Vector2[] uv_array, int uv_count, int protect_boundary, int protect_detail, int protect_symmetry, int protect_normal, int protect_shape, int use_detail_map, int detail_boost)
		{
			return default(int);
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x10ED794", Offset = "0x10ED794", VA = "0x10ED794")]
		public static int get_triangle_list(int index, float goal, int[] triangle_array, ref int triangle_count)
		{
			return default(int);
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x10ED904", Offset = "0x10ED904", VA = "0x10ED904")]
		public static int delete_progressive_mesh(int index)
		{
			return default(int);
		}
	}
}
namespace MantisLODEditor
{
	[Token(Token = "0x2000272")]
	public class Lod_Mesh
	{
		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int triangle_count;

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x10EDAB0", Offset = "0x10EDAB0", VA = "0x10EDAB0")]
		public Lod_Mesh()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class Lod_Mesh_Table
	{
		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh origin_mesh;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Component> containers;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Lod_Mesh[] lod_meshes;

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x10EDAB8", Offset = "0x10EDAB8", VA = "0x10EDAB8")]
		public Lod_Mesh_Table()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public static class MantisLODEditorUtility
	{
		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x10EDAC0", Offset = "0x10EDAC0", VA = "0x10EDAC0")]
		public static string get_uuid_from_mesh(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x10EDD40", Offset = "0x10EDD40", VA = "0x10EDD40")]
		public static int PrepareSimplify(Mantis_Mesh[] Mantis_Meshes, bool use_origin_triangles = true)
		{
			return default(int);
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x10EDFB0", Offset = "0x10EDFB0", VA = "0x10EDFB0")]
		public static void Simplify(Mantis_Mesh[] Mantis_Meshes, bool protect_boundary, bool protect_detail, bool protect_symmetry, bool protect_normal, bool protect_shape, bool use_detail_map, int detail_boost)
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x10EE288", Offset = "0x10EE288", VA = "0x10EE288")]
		public static int SetQuality(Mantis_Mesh[] Mantis_Meshes, float quality)
		{
			return default(int);
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x10EE480", Offset = "0x10EE480", VA = "0x10EE480")]
		public static void SaveSimplifiedMesh(Mesh mesh, string filePath)
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x10EE484", Offset = "0x10EE484", VA = "0x10EE484")]
		public static void FinishSimplify(Mantis_Mesh[] Mantis_Meshes, bool use_origin_triangles = true, bool unload_asset = false)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x10EE5C4", Offset = "0x10EE5C4", VA = "0x10EE5C4")]
		public static ProgressiveMesh MakeProgressiveMesh(Mantis_Mesh[] Mantis_Meshes, int max_lod_count)
		{
			return null;
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x10EECF0", Offset = "0x10EECF0", VA = "0x10EECF0")]
		public static void SaveProgressiveMesh(ProgressiveMesh pm, string filePath)
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x10EECF4", Offset = "0x10EECF4", VA = "0x10EECF4")]
		public static ProgressiveMesh LoadProgressiveMesh(string filePath)
		{
			return null;
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x10EED3C", Offset = "0x10EED3C", VA = "0x10EED3C")]
		public static int get_triangles_count_from_progressive_mesh(ProgressiveMesh pm, int _lod, int _mesh_count)
		{
			return default(int);
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x10EEE30", Offset = "0x10EEE30", VA = "0x10EEE30")]
		private static int[] get_triangles_from_progressive_mesh(ProgressiveMesh pm, int _lod, int _mesh_count, int _mat)
		{
			return null;
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x10EEF9C", Offset = "0x10EEF9C", VA = "0x10EEF9C")]
		private static void set_triangles(ProgressiveMesh pm, Mesh mesh, string uuid, int lod)
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x10EF070", Offset = "0x10EF070", VA = "0x10EF070")]
		public static void GenerateRuntimeLOD(ProgressiveMesh pm, Component[] containers, bool optimize_on_the_fly)
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x10EF694", Offset = "0x10EF694", VA = "0x10EF694")]
		public static int SwitchRuntimeLOD(ProgressiveMesh pm, int[] mesh_lod_range, int lod, Component[] Components)
		{
			return default(int);
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x10EFC8C", Offset = "0x10EFC8C", VA = "0x10EFC8C")]
		public static void FinishRuntimeLOD(ProgressiveMesh pm)
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class Mantis_Mesh
	{
		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int index;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string uuid;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[][] origin_triangles;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int[] out_triangles;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int out_count;

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xFB7658", Offset = "0xFB7658", VA = "0xFB7658")]
		public Mantis_Mesh()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000276")]
	public class ProgressiveMesh : ScriptableObject
	{
		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] triangles;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] uuids;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<string, Lod_Mesh_Table> lod_meshes_dic;

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xFB768C", Offset = "0xFB768C", VA = "0xFB768C")]
		public ProgressiveMesh()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class ProgressiveMeshRuntime : MonoBehaviour
	{
		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ProgressiveMesh progressiveMesh;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text fpsHint;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text lodHint;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text triangleHint;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public bool optimize_on_the_fly;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public int[] mesh_lod_range;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public bool never_cull;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public int lod_strategy;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public float cull_ratio;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public float disappear_distance;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public float updateInterval;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int current_lod;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Component[] allBasicRenderers;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float currentTimeToInterval;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool culled;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool working;

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xFB7694", Offset = "0xFB7694", VA = "0xFB7694")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xFB78C8", Offset = "0xFB78C8", VA = "0xFB78C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xFB78CC", Offset = "0xFB78CC", VA = "0xFB78CC")]
		private float ratio_of_screen()
		{
			return default(float);
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xFB7CC0", Offset = "0xFB7CC0", VA = "0xFB7CC0")]
		private float ratio_of_distance(float distance0)
		{
			return default(float);
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xFB8084", Offset = "0xFB8084", VA = "0xFB8084")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xFB8970", Offset = "0xFB8970", VA = "0xFB8970")]
		private void create_default_mesh_lod_range()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xFB7698", Offset = "0xFB7698", VA = "0xFB7698")]
		private void get_all_meshes()
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xFB8A5C", Offset = "0xFB8A5C", VA = "0xFB8A5C")]
		public void reset_all_parameters()
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xFB8AA8", Offset = "0xFB8AA8", VA = "0xFB8AA8")]
		private void clean_all()
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xFB8AE0", Offset = "0xFB8AE0", VA = "0xFB8AE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xFB8AE4", Offset = "0xFB8AE4", VA = "0xFB8AE4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xFB8AE8", Offset = "0xFB8AE8", VA = "0xFB8AE8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xFB8AEC", Offset = "0xFB8AEC", VA = "0xFB8AEC")]
		public ProgressiveMeshRuntime()
		{
		}
	}
}
namespace MagicLightProbes
{
	[Token(Token = "0x2000278")]
	[ExecuteInEditMode]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/main-component")]
	public class MagicLightProbes : MonoBehaviour
	{
		[Token(Token = "0x2000279")]
		public struct VolumeParameters
		{
			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int volumeIndex;

			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 position;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 demensions;

			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0xFB9824", Offset = "0xFB9824", VA = "0xFB9824")]
			public VolumeParameters(int _volumeIndex, Vector3 _position, Vector3 _demensions)
			{
			}
		}

		[Token(Token = "0x200027A")]
		public enum FillingMode
		{
			[Token(Token = "0x4000DCD")]
			VerticalDublicating,
			[Token(Token = "0x4000DCE")]
			FullFilling,
			[Token(Token = "0x4000DCF")]
			SeparateFilling
		}

		[Token(Token = "0x200027B")]
		public enum ExcludingLightsMode
		{
			[Token(Token = "0x4000DD1")]
			AllInList,
			[Token(Token = "0x4000DD2")]
			AllExceptInList
		}

		[Token(Token = "0x200027C")]
		public enum Workflow
		{
			[Token(Token = "0x4000DD4")]
			Simple,
			[Token(Token = "0x4000DD5")]
			Advanced
		}

		[Token(Token = "0x200027D")]
		public enum BoundsDisplayMode
		{
			[Token(Token = "0x4000DD7")]
			Always,
			[Token(Token = "0x4000DD8")]
			OnSelection
		}

		[Token(Token = "0x200027E")]
		public enum DebugPasses
		{
			[Token(Token = "0x4000DDA")]
			MaximumHeight,
			[Token(Token = "0x4000DDB")]
			GeometryCollision,
			[Token(Token = "0x4000DDC")]
			GeometryIntersections,
			[Token(Token = "0x4000DDD")]
			NearGeometry,
			[Token(Token = "0x4000DDE")]
			OutOfRange,
			[Token(Token = "0x4000DDF")]
			OutOfRangeBorders,
			[Token(Token = "0x4000DE0")]
			ShadingBorders,
			[Token(Token = "0x4000DE1")]
			ContrastAreas,
			[Token(Token = "0x4000DE2")]
			NearLights,
			[Token(Token = "0x4000DE3")]
			LightIntensity,
			[Token(Token = "0x4000DE4")]
			UnlitProbes,
			[Token(Token = "0x4000DE5")]
			EqualProbes,
			[Token(Token = "0x4000DE6")]
			GeometryEdges,
			[Token(Token = "0x4000DE7")]
			EqualColor
		}

		[Token(Token = "0x200027F")]
		public enum DrawModes
		{
			[Token(Token = "0x4000DE9")]
			Accepted,
			[Token(Token = "0x4000DEA")]
			Culled,
			[Token(Token = "0x4000DEB")]
			Both
		}

		[Token(Token = "0x2000280")]
		public enum CalculationTarget
		{
			[Token(Token = "0x4000DED")]
			GeometryEdges,
			[Token(Token = "0x4000DEE")]
			GeneralCalculation
		}

		[Serializable]
		[Token(Token = "0x2000281")]
		private struct TempPointData
		{
			[Token(Token = "0x4000DEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float xPos;

			[Token(Token = "0x4000DF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float yPos;

			[Token(Token = "0x4000DF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float zPos;

			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0xFB9838", Offset = "0xFB9838", VA = "0xFB9838")]
			public TempPointData(Vector3 _position)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000282")]
		public class WorkPathFoundEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0xFB9844", Offset = "0xFB9844", VA = "0xFB9844")]
			public WorkPathFoundEvent()
			{
			}
		}

		[Token(Token = "0x4000D13")]
		private const string COMPUTE_SHADERS_FOLDER = "/Passes/Compute Shaders/";

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator colorThresholdRecalculationRoutine;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator lightProbesVolumeCalculatingRoutine;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IEnumerator lightProbesVolumeCalculatingSubRoutine;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IEnumerator executingPassesRoutine;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerator volumeDivideingRoutine;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool autoSaveSettings;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MLPSettings lastSettingsAsset;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<string> groundAndFloorObjects;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<string> storedGroundAndFloorKeywords;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject probesVolume;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useDynamicDensity;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float volumeSpacing;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float volumeSpacingMin;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float volumeSpacingMax;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float cornersDetectionThreshold;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float cornersDetectionThresholdMin;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float cornersDetectionThresholdMax;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float lastCornersDetectionThreshold;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lastCornersDetectionThresholdMin;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float lastCornersDetectionThresholdMax;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int lastMaxProbesInVolume;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int maxProbesInVolume;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int defaultMaxProbesCount;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float lastVolumeSpacing;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float lastVolumeSpacingMin;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float lastVolumeSpacingMax;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool volumeSpacingChanged;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool tooManySubVolumes;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public FillingMode fillingMode;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ExcludingLightsMode excludingLightsMode;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public MLPSettings settingsAsset;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Workflow workflow;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float maxHeightAboveGeometry;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float lastMaxHeightAboveGeometry;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float maxHeightAboveTerrain;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool considerDistanceToLights;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float lightIntensityTreshold;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float colorTreshold;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float collisionDetectionRadius;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool saveProbesNearbyGeometry;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float cornerProbesSpacing;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float nearbyGeometryDetectionRadius;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float nearbyGeometryDetectionRadiusMin;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float nearbyGeometryDetectionRadiusMax;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float distanceFromNearbyGeometry;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool fillEquivalentVolume;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float equivalentVolumeFillingRate;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public bool fillUnlitVolume;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		public bool fillFreeVolume;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float unlitVolumeFillingRate;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float freeVolumeFillingRate;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool cullAcceptedVolume;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float acceptedVolumeFillingRate;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float nearbyGeometryVolumeFillingRate;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float verticalDublicatingHeight;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float verticalDublicatingStep;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public LayerMask raycastFilter;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public List<MLPLight> excludedLights;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public LayerMask layerMask;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public int firstCollisionLayer;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool useMultithreading;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public GameObject previousSelection;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public bool unloaded;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		public bool sceneChanging;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		public bool waitForPrevious;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public MagicLightProbes previousVolume;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public bool optimizeForMixedLighting;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
		public bool lastOptimizeForMixedLightingValue;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15A")]
		public bool lastUseDynamicDensityValue;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15B")]
		public bool preventLeakageThroughWalls;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool useVolumeBottom;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15D")]
		public bool placeProbesOnGeometryEdges;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float lastColorThreshold;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float lastLightIntensityThreshold;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float lastEquivalentVolumeFillingRate;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float lastUnlitVolumeFillingRate;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float lastFreeVolumeFillingRate;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float lastCornerProbesSpacing;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float lastDistanceFromGeometry;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public bool debugMode;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float debugObjectScale;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public BoundsDisplayMode boundsDisplayMode;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public DebugPasses debugPass;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public DrawModes drawMode;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool debugShowLightIntensity;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		public bool showPreviewGrid;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
		public bool nextStep;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x193")]
		public bool cullByColor;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public bool forceSaveProbesOnShadingBorders;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public string dataPath;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public string workPath;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool workPathFound;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public List<Vector3> localFinishedPositions;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public ComputeShader calculateVolumeFilling;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public ComputeShader calculateProbeSpacing;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public ComputeShader calculateDistanceFromGeometry;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public MLPVolume currentVolume;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool recalculationRequired;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private List<Collider> lightColliders;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private List<Collider> objectColliders;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private List<MLPPointData> finalDebugAcceptedPoints;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private List<MLPPointData> finalDebugCulledPoints;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private List<GameObject> tempObjects;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private List<GameObject> temporarilyDisabledDynamicObjects;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private List<GameObject> staticObjectsWithoutCollider;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public List<GameObject> finalStaticGameObjectsList;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private GameObject combinedVolumeObject;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private VolumeParameters currentEditingVolume;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private Vector3 currentSelectedObjectLastPosition;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private GameObject lastSelectedObject;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public bool cancelCombination;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public List<IEnumerator> passesToExecute;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public List<GameObject> staticObjects;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public List<MLPLight> lights;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public List<MLPPointData> tmpSharedPointsArray;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public List<MLPPointData> tmpOutOfRangePoints;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public List<MLPPointData> tmpOutOfMaxHeightPoints;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public List<MLPPointData> tmpGeometryCollisionPoints;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public List<MLPPointData> tmpContrastOnOutOfRangePoints;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public List<MLPPointData> tmpContrastShadingBordersPoints;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public List<MLPPointData> tmpUnlitPoints;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public List<MLPPointData> tmpFreePoints;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public List<MLPPointData> tmpNearbyGeometryPoints;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public List<MLPPointData> tmpPointsNearGeometryIntersections;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public List<MLPPointData> tmpNearbyLightsPoints;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public List<MLPPointData> tmpEqualPoints;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public List<MLPPointData> debugCulledPoints;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public List<MLPPointData> debugAcceptedPoints;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public List<GameObject> subVolumesDivided;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public List<Vector3> points;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public List<VolumeParameters> innerVolumes;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public List<VolumeParameters> subVolumesParameters;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public List<MagicLightProbes> innerVolumesObjects;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public List<LayerMask> layerMasks;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public List<Vector3> transformedPoints;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public string assetEditorPath;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool operationalDataLost;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public bool localOperationalDataLost;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x331")]
		public bool recombinationNeeded;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x332")]
		public bool isInBackground;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x333")]
		public bool realtimeEditing;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		public bool calculated;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x335")]
		public bool calculatingError;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public int xPointsCount;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		public int yPointsCount;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public int zPointsCount;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x344")]
		public float prevVolumeScaleX;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public float prevVolumeScaleY;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		public float prevVolumeScaleZ;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public int totalProbes;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x354")]
		public int totalProbesInSubVolume;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public int totalProbesInVolume;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		public bool calculatingVolume;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35D")]
		public bool calculatingVolumeSubPass;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public string currentPass;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public int currentPassProgressCounter;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		public int currentPassProgressFrameSkipper;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public float totalProgress;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		public float currentPassProgress;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public int selectedTab;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37D")]
		public bool restored;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public int currentVolumePart;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		public float eta;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public bool changed;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x389")]
		public bool redivideParts;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38A")]
		public bool combinedVolumeError;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38B")]
		public bool isInPrefab;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		public Vector3 prefabPosition;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public GameObject prefabRoot;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public MLPPrefab prefabConnectionObject;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public string prefabRootName;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public bool calculatedFromPrefab;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		public string prefabUID;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private bool passesExecuting;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		private int totalProgressCounter;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private int totalProgressFrameSkipper;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		private float startTime;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private float endTime;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D4")]
		private bool scenePreparing;

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xFB8B1C", Offset = "0xFB8B1C", VA = "0xFB8B1C")]
		public void CheckForNearContrast(MLPPointData pointForCheck)
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xFB8F04", Offset = "0xFB8F04", VA = "0xFB8F04")]
		public bool UpdateProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xFB8F4C", Offset = "0xFB8F4C", VA = "0xFB8F4C")]
		private bool UpdateTotalProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xFB8F94", Offset = "0xFB8F94", VA = "0xFB8F94")]
		public MagicLightProbes()
		{
		}
	}
	[Token(Token = "0x2000283")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-combined-volume")]
	[ExecuteInEditMode]
	public class MLPCombinedVolume : MonoBehaviour
	{
		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xFB988C", Offset = "0xFB988C", VA = "0xFB988C")]
		public MLPCombinedVolume()
		{
		}
	}
	[Token(Token = "0x2000284")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-light")]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	public class MLPLight : MonoBehaviour
	{
		[Token(Token = "0x2000285")]
		public enum CalculationMode
		{
			[Token(Token = "0x4000E17")]
			AccurateShadows,
			[Token(Token = "0x4000E18")]
			LightIntensity
		}

		[Token(Token = "0x2000286")]
		public enum MLPLightType
		{
			[Token(Token = "0x4000E1A")]
			Spot,
			[Token(Token = "0x4000E1B")]
			Directional,
			[Token(Token = "0x4000E1C")]
			Point,
			[Token(Token = "0x4000E1D")]
			Area,
			[Token(Token = "0x4000E1E")]
			Mesh
		}

		[Token(Token = "0x2000287")]
		public enum MLPLightTypeMA
		{
			[Token(Token = "0x4000E20")]
			Area = 3,
			[Token(Token = "0x4000E21")]
			Mesh
		}

		[Token(Token = "0x2000288")]
		public enum TracePointSettingMode
		{
			[Token(Token = "0x4000E23")]
			Auto,
			[Token(Token = "0x4000E24")]
			Custom
		}

		[Token(Token = "0x2000289")]
		public enum ShadowmaskMode
		{
			[Token(Token = "0x4000E26")]
			Shadowmask,
			[Token(Token = "0x4000E27")]
			DistanceShadowmask
		}

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MLPLightType lightType;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MLPLightType lastLightType;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MLPLightTypeMA lightTypeMA;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CalculationMode calculationMode;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TracePointSettingMode tracePointSettingType;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LightmapBakeType lightMode;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ShadowmaskMode shadowmaskMode;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light targetLight;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject parentGameObject;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 position;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 forward;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool saveNearbyProbes;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float saveRadius;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float range;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool useSourceParameters;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool reverseDirection;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angle;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool customTracePoints;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool accurateTrace;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int accuracy;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int lastAccuracy;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool isDirectional;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float tracePointSize;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lastTracePointSize;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MeshFilter lastMesh;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<GameObject> tracePoints;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<MLPTracePoint> tracePointsData;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public MLPTracePoint mainTracePoint;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float intensity;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool resetEditor;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool showLightOnScene;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool saveOnOutOfRange;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		public bool isHDRP;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector2 hdrpAreaSize;

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xFB9894", Offset = "0xFB9894", VA = "0xFB9894")]
		public MLPLight()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class MLPPointData
	{
		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lightIntensity;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxIntencity;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 position;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int col;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int row;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int depth;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<float> distancesToLights;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Vector3> collisionPoints;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<MLPPointData> nearbyPoints;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> nearbyPointsOptimaziable;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool removed;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool outOfRange;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool inSaveRange;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool savedNearGeometry;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool contrastOnOutOfRangeArea;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool inRangeOfLight;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool contrastOnShadingArea;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool equalIntensity;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool equalColor;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool borderPoint;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool outOfMaxHeight;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float angleToLight;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 contactPoint;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool inCorner;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool lockForCull;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public bool onGeometryEdge;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool lightLeakLocked;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 collisionNormal;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<MLPLight> inRangeForLights;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MLPLight> inShadowForLights;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject temporaryObject;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject collisionObject;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color averagedColor;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool xEndPoint;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool yEndPoint;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		public bool zEndPoint;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
		public bool xStartPoint;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool yStartPoint;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		public bool zStartPoint;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int equivalent;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float avaragedColorValue;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool isUnlit;

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xFB9978", Offset = "0xFB9978", VA = "0xFB9978")]
		public void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xFB9984", Offset = "0xFB9984", VA = "0xFB9984")]
		public void SetOutOfRange(bool visibility)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xFB9990", Offset = "0xFB9990", VA = "0xFB9990")]
		public void SetLightIntensity(float intensity)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xFB9998", Offset = "0xFB9998", VA = "0xFB9998")]
		public void SetInSaveRange(bool value)
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xFB99A4", Offset = "0xFB99A4", VA = "0xFB99A4")]
		public void SetInContrastArea(bool value)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xFB99B0", Offset = "0xFB99B0", VA = "0xFB99B0")]
		public MLPPointData()
		{
		}
	}
	[Token(Token = "0x200028B")]
	[ExecuteInEditMode]
	public class MLPPrefab : MonoBehaviour
	{
		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new string name;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string uid;

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xFB9B80", Offset = "0xFB9B80", VA = "0xFB9B80")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xFB9BFC", Offset = "0xFB9BFC", VA = "0xFB9BFC")]
		public MLPPrefab()
		{
		}
	}
	[Token(Token = "0x200028C")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-quick-editing")]
	public class MLPQuickEditing : MonoBehaviour
	{
		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MagicLightProbes parent;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float gizmoScale;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float drawDistance;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 _lastPrefabPosition;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion _lastPrefabRotation;

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xFB9C04", Offset = "0xFB9C04", VA = "0xFB9C04")]
		public MLPQuickEditing()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028D")]
	public class MLPTracePoint
	{
		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 forward;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string name;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject pointGameObject;

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xFB9CA4", Offset = "0xFB9CA4", VA = "0xFB9CA4")]
		public MLPTracePoint()
		{
		}
	}
	[Token(Token = "0x200028E")]
	[ExecuteInEditMode]
	public class MLPVolume : MonoBehaviour
	{
		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MagicLightProbes parentRootComponent;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MeshRenderer selfRenderer;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool showGizmo;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool showGizmoSelected;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool isPartVolume;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool isSubdividedPart;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isCalculated;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool isInProcess;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool skipped;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int id;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color colorOnSelection;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> localAcceptedPoints;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<MLPPointData> localNearbyGeometryPoints;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<MLPPointData> localContrastPoints;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<MLPPointData> localCornerPoints;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Vector3> localNearbyGeometryPointsPositions;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Vector3> resultNearbyGeometryPointsPositions;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Vector3> localCornerPointsPositions;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Vector3> resultLocalCornerPointsPositions;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<Vector3> localEquivalentPointsPositions;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<Vector3> resultLocalEquivalentPointsPositions;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<Vector3> resultLocalFreePointsPositions;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<Vector3> localUnlitPointsPositions;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<Vector3> localFreePointsPositions;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<Vector3> resultLocalUnlitPointsPositions;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<Vector3> localDirections;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<Vector3> localAvaragedDirections;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<MLPPointData> localColorThresholdEditingPoints;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int objectsInside;

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xFB9CAC", Offset = "0xFB9CAC", VA = "0xFB9CAC")]
		public MLPVolume()
		{
		}
	}
	[Token(Token = "0x200028F")]
	public class DublicateVertical
	{
		[Token(Token = "0x2000290")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <steps>5__2;

			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<MLPPointData> <candidates>5__3;

			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<MLPPointData> <savedNearGeometry>5__4;

			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__5;

			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<MLPPointData>.Enumerator <>7__wrap5;

			[Token(Token = "0x1700018C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001007")]
				[Address(RVA = "0xFBAC94", Offset = "0xFBAC94", VA = "0xFBAC94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001009")]
				[Address(RVA = "0xFBACDC", Offset = "0xFBACDC", VA = "0xFBACDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001003")]
			[Address(RVA = "0xFBA060", Offset = "0xFBA060", VA = "0xFBA060")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001004")]
			[Address(RVA = "0xFBA090", Offset = "0xFBA090", VA = "0xFBA090", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001005")]
			[Address(RVA = "0xFBA0AC", Offset = "0xFBA0AC", VA = "0xFBA0AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001006")]
			[Address(RVA = "0xFBAC44", Offset = "0xFBAC44", VA = "0xFBAC44")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001008")]
			[Address(RVA = "0xFBAC9C", Offset = "0xFBAC9C", VA = "0xFBAC9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xFB9FEC", Offset = "0xFB9FEC", VA = "0xFB9FEC")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xFBA088", Offset = "0xFBA088", VA = "0xFBA088")]
		public DublicateVertical()
		{
		}
	}
	[Token(Token = "0x2000291")]
	public static class RandomGen
	{
		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random _global;

		[Token(Token = "0x4000E83")]
		[ThreadStatic]
		private static System.Random _local;

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xFBACE4", Offset = "0xFBACE4", VA = "0xFBACE4")]
		public static int Next(int min, int max)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000292")]
	public class EquivalentProbesOptimization
	{
		[Token(Token = "0x2000293")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4000E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool realtimeEditing;

			[Token(Token = "0x4000E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3[] <exit>5__2;

			[Token(Token = "0x4000E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__3;

			[Token(Token = "0x4000E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <i>5__4;

			[Token(Token = "0x1700018E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001011")]
				[Address(RVA = "0xFBB7C8", Offset = "0xFBB7C8", VA = "0xFBB7C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001013")]
				[Address(RVA = "0xFBB810", Offset = "0xFBB810", VA = "0xFBB810", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600100E")]
			[Address(RVA = "0xFBB004", Offset = "0xFBB004", VA = "0xFBB004")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x600100F")]
			[Address(RVA = "0xFBB034", Offset = "0xFBB034", VA = "0xFBB034", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001010")]
			[Address(RVA = "0xFBB038", Offset = "0xFBB038", VA = "0xFBB038", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001012")]
			[Address(RVA = "0xFBB7D0", Offset = "0xFBB7D0", VA = "0xFBB7D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xFBAF68", Offset = "0xFBAF68", VA = "0xFBAF68")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xFBB02C", Offset = "0xFBB02C", VA = "0xFBB02C")]
		public EquivalentProbesOptimization()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class PartialVolumeFilling
	{
		[Token(Token = "0x2000295")]
		public enum TargetPoint
		{
			[Token(Token = "0x4000E8D")]
			Unlit,
			[Token(Token = "0x4000E8E")]
			Equivalent,
			[Token(Token = "0x4000E8F")]
			Free
		}

		[Token(Token = "0x2000296")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TargetPoint targetPoint;

			[Token(Token = "0x4000E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool realtimeEditing;

			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__2;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<Vector3> <realTimeEditingList>5__3;

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private List<Vector3> <targetPoints>5__4;

			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <fillingRate>5__5;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3[] <exit>5__6;

			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__7;

			[Token(Token = "0x17000190")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001019")]
				[Address(RVA = "0xFBC928", Offset = "0xFBC928", VA = "0xFBC928", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000191")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600101B")]
				[Address(RVA = "0xFBC970", Offset = "0xFBC970", VA = "0xFBC970", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001016")]
			[Address(RVA = "0xFBB8C4", Offset = "0xFBB8C4", VA = "0xFBB8C4")]
			[DebuggerHidden]
			public <ExecutePass>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001017")]
			[Address(RVA = "0xFBB8F4", Offset = "0xFBB8F4", VA = "0xFBB8F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001018")]
			[Address(RVA = "0xFBB8F8", Offset = "0xFBB8F8", VA = "0xFBB8F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600101A")]
			[Address(RVA = "0xFBC930", Offset = "0xFBC930", VA = "0xFBC930", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xFBB818", Offset = "0xFBB818", VA = "0xFBB818")]
		[IteratorStateMachine(typeof(<ExecutePass>d__1))]
		public IEnumerator ExecutePass(MagicLightProbes parent, TargetPoint targetPoint, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xFBB8EC", Offset = "0xFBB8EC", VA = "0xFBB8EC")]
		public PartialVolumeFilling()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class RemoveUnusedPoints
	{
		[Token(Token = "0x2000298")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<MLPPointData> <pointsToRemove>5__2;

			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__3;

			[Token(Token = "0x17000192")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001021")]
				[Address(RVA = "0xFBCDA8", Offset = "0xFBCDA8", VA = "0xFBCDA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000193")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001023")]
				[Address(RVA = "0xFBCDF0", Offset = "0xFBCDF0", VA = "0xFBCDF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600101E")]
			[Address(RVA = "0xFBC9EC", Offset = "0xFBC9EC", VA = "0xFBC9EC")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x600101F")]
			[Address(RVA = "0xFBCA1C", Offset = "0xFBCA1C", VA = "0xFBCA1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001020")]
			[Address(RVA = "0xFBCA20", Offset = "0xFBCA20", VA = "0xFBCA20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001022")]
			[Address(RVA = "0xFBCDB0", Offset = "0xFBCDB0", VA = "0xFBCDB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xFBC978", Offset = "0xFBC978", VA = "0xFBC978")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xFBCA14", Offset = "0xFBCA14", VA = "0xFBCA14")]
		public RemoveUnusedPoints()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class SetDistanceFromGeometry
	{
		[Token(Token = "0x200029A")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3[] <exit>5__2;

			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__3;

			[Token(Token = "0x17000194")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001029")]
				[Address(RVA = "0xFBD45C", Offset = "0xFBD45C", VA = "0xFBD45C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000195")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600102B")]
				[Address(RVA = "0xFBD4A4", Offset = "0xFBD4A4", VA = "0xFBD4A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001026")]
			[Address(RVA = "0xFBCE88", Offset = "0xFBCE88", VA = "0xFBCE88")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001027")]
			[Address(RVA = "0xFBCEB8", Offset = "0xFBCEB8", VA = "0xFBCEB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001028")]
			[Address(RVA = "0xFBCEBC", Offset = "0xFBCEBC", VA = "0xFBCEBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600102A")]
			[Address(RVA = "0xFBD464", Offset = "0xFBD464", VA = "0xFBD464", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xFBCDF8", Offset = "0xFBCDF8", VA = "0xFBCDF8")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, MLPVolume currentVolume)
		{
			return null;
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xFBCEB0", Offset = "0xFBCEB0", VA = "0xFBCEB0")]
		public SetDistanceFromGeometry()
		{
		}
	}
}
namespace UnityEngine.UI
{
	[Token(Token = "0x200029B")]
	[AddComponentMenu("UI/Raycast Filters/Ignore Raycast Filter")]
	public class UIIgnoreRaycast : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x600102C")]
		[Address(RVA = "0xFBD4AC", Offset = "0xFBD4AC", VA = "0xFBD4AC", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xFBD4B4", Offset = "0xFBD4B4", VA = "0xFBD4B4")]
		public UIIgnoreRaycast()
		{
		}
	}
}
namespace Wacki
{
	[Token(Token = "0x200029C")]
	public abstract class IUILaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float laserThickness;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float laserHitScale;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool laserAlwaysOn;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color color;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject hitPoint;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject pointer;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _distanceLimit;

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xFBD4BC", Offset = "0xFBD4BC", VA = "0xFBD4BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xFBD928", Offset = "0xFBD928", VA = "0xFBD928")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xFBDA64", Offset = "0xFBDA64", VA = "0xFBDA64", Slot = "4")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xFBDA68", Offset = "0xFBDA68", VA = "0xFBDA68", Slot = "5")]
		public virtual void OnEnterControl(GameObject control)
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xFBDA6C", Offset = "0xFBDA6C", VA = "0xFBDA6C", Slot = "6")]
		public virtual void OnExitControl(GameObject control)
		{
		}

		[Token(Token = "0x6001033")]
		public abstract bool ButtonDown();

		[Token(Token = "0x6001034")]
		public abstract bool ButtonUp();

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xFBDA70", Offset = "0xFBDA70", VA = "0xFBDA70", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xFBDC4C", Offset = "0xFBDC4C", VA = "0xFBDC4C", Slot = "10")]
		public virtual void LimitLaserDistance(float distance)
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xFBDC70", Offset = "0xFBDC70", VA = "0xFBDC70")]
		protected IUILaserPointer()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public class LaserPointerEventData : PointerEventData
	{
		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject current;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public IUILaserPointer controller;

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xFBDC84", Offset = "0xFBDC84", VA = "0xFBDC84")]
		public LaserPointerEventData(EventSystem e)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xFBDC8C", Offset = "0xFBDC8C", VA = "0xFBDC8C", Slot = "4")]
		public override void Reset()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class LaserPointerInputModule : BaseInputModule
	{
		[Token(Token = "0x200029F")]
		private class ControllerData
		{
			[Token(Token = "0x4000EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LaserPointerEventData pointerEvent;

			[Token(Token = "0x4000EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject currentPoint;

			[Token(Token = "0x4000EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject currentPressed;

			[Token(Token = "0x4000EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject currentDragging;

			[Token(Token = "0x6001044")]
			[Address(RVA = "0xFBDFE0", Offset = "0xFBDFE0", VA = "0xFBDFE0")]
			public ControllerData()
			{
			}
		}

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LaserPointerInputModule _instance;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LayerMask layerMask;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Camera UICamera;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PhysicsRaycaster raycaster;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HashSet<IUILaserPointer> _controllers;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<IUILaserPointer, ControllerData> _controllerData;

		[Token(Token = "0x17000196")]
		public static LaserPointerInputModule instance
		{
			[Token(Token = "0x600103A")]
			[Address(RVA = "0xFBDCC4", Offset = "0xFBDCC4", VA = "0xFBDCC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xFBDD0C", Offset = "0xFBDD0C", VA = "0xFBDD0C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xFBDE30", Offset = "0xFBDE30", VA = "0xFBDE30", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xFBD894", Offset = "0xFBD894", VA = "0xFBD894")]
		public void AddController(IUILaserPointer controller)
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xFBDA0C", Offset = "0xFBDA0C", VA = "0xFBDA0C")]
		public void RemoveController(IUILaserPointer controller)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xFBDFE8", Offset = "0xFBDFE8", VA = "0xFBDFE8")]
		protected void UpdateCameraPosition(IUILaserPointer controller)
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xFBE080", Offset = "0xFBE080", VA = "0xFBE080")]
		public void ClearSelection()
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xFBE10C", Offset = "0xFBE10C", VA = "0xFBE10C")]
		private void Select(GameObject go)
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xFBE1F0", Offset = "0xFBE1F0", VA = "0xFBE1F0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xFBF3E8", Offset = "0xFBF3E8", VA = "0xFBF3E8")]
		public LaserPointerInputModule()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class OVRUILaserPointer : IUILaserPointer
	{
		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public OVRInput.Button primaryTrigger;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVRInput.Controller controller;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private OVRHapticsClip enterHapticClip;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private OVRHapticsClip exitHapticClip;

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xFBF470", Offset = "0xFBF470", VA = "0xFBF470", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xFBF5B4", Offset = "0xFBF5B4", VA = "0xFBF5B4", Slot = "7")]
		public override bool ButtonDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xFBF614", Offset = "0xFBF614", VA = "0xFBF614", Slot = "8")]
		public override bool ButtonUp()
		{
			return default(bool);
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xFBF674", Offset = "0xFBF674", VA = "0xFBF674", Slot = "5")]
		public override void OnEnterControl(GameObject control)
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xFBF730", Offset = "0xFBF730", VA = "0xFBF730", Slot = "6")]
		public override void OnExitControl(GameObject control)
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xFBF474", Offset = "0xFBF474", VA = "0xFBF474")]
		private void InitHaptics()
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xFBF7EC", Offset = "0xFBF7EC", VA = "0xFBF7EC")]
		private void WriteHapticSamples(OVRHapticsClip clip, float freq, float amplitude, int duration)
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xFBF95C", Offset = "0xFBF95C", VA = "0xFBF95C")]
		public OVRUILaserPointer()
		{
		}
	}
}
namespace CloudFine
{
	[Token(Token = "0x20002A1")]
	public class Billboard : MonoBehaviour
	{
		[Token(Token = "0x600104D")]
		[Address(RVA = "0xFBF970", Offset = "0xFBF970", VA = "0xFBF970")]
		private void Update()
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xFBFB0C", Offset = "0xFBFB0C", VA = "0xFBFB0C")]
		public Billboard()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class CollisionListener : MonoBehaviour
	{
		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<Collision> CollisionEnter;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<Collision> CollisionExit;

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xFBFB14", Offset = "0xFBFB14", VA = "0xFBFB14")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xFBFB30", Offset = "0xFBFB30", VA = "0xFBFB30")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xFBFB4C", Offset = "0xFBFB4C", VA = "0xFBFB4C")]
		public CollisionListener()
		{
		}
	}
}
namespace CloudFine.ThrowLab
{
	[Token(Token = "0x20002A3")]
	public enum Device
	{
		[Token(Token = "0x4000EC1")]
		UNSPECIFIED,
		[Token(Token = "0x4000EC2")]
		OCULUS_TOUCH,
		[Token(Token = "0x4000EC3")]
		VIVE,
		[Token(Token = "0x4000EC4")]
		KNUCKLES,
		[Token(Token = "0x4000EC5")]
		WINDOWS_MR
	}
	[Token(Token = "0x20002A4")]
	public enum HandSide
	{
		[Token(Token = "0x4000EC7")]
		RIGHT,
		[Token(Token = "0x4000EC8")]
		LEFT
	}
	[Token(Token = "0x20002A5")]
	public static class DeviceDetectionUtility
	{
		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<Device, Vector3> _centerOfMassOfssets;

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xFBFB54", Offset = "0xFBFB54", VA = "0xFBFB54")]
		public static Vector3 GetCenterOfMassOffset(Device controller, HandSide side)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20002A6")]
	public abstract class DeviceDetector : MonoBehaviour
	{
		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HandSide _side;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Device _detected;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _drawGizmo;

		[Token(Token = "0x17000197")]
		public HandSide Side
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0xFBFE74", Offset = "0xFBFE74", VA = "0xFBFE74")]
			get
			{
				return default(HandSide);
			}
		}

		[Token(Token = "0x17000198")]
		public Device DetectedDevice
		{
			[Token(Token = "0x6001055")]
			[Address(RVA = "0xFBFE7C", Offset = "0xFBFE7C", VA = "0xFBFE7C")]
			get
			{
				return default(Device);
			}
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xFBFE84", Offset = "0xFBFE84", VA = "0xFBFE84")]
		protected void OnControllerTypeDetermined(Device device)
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xFBFE8C", Offset = "0xFBFE8C", VA = "0xFBFE8C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xFBFF4C", Offset = "0xFBFF4C", VA = "0xFBFF4C")]
		protected DeviceDetector()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public abstract class GrabThresholdModifier : MonoBehaviour
	{
		[Token(Token = "0x6001059")]
		public abstract float GripValue();

		[Token(Token = "0x600105A")]
		public abstract void SetGrabThreshold(float grip);

		[Token(Token = "0x600105B")]
		public abstract void SetReleaseThreshold(float grip);

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xFBFF5C", Offset = "0xFBFF5C", VA = "0xFBFF5C")]
		protected GrabThresholdModifier()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public class LabManager : MonoBehaviour
	{
		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Spawn")]
		public List<ThrowHandle> _throwablePrefabs;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform _spawnPoint;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem _spawnEffect;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ThrowHandle _throwablePrefab;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ThrowTracker _trackerPrefab;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("UI")]
		public UIThrowConfiguration _configurationUI;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DeviceDetectorUI _deviceDetector;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RectTransform _trackerUIListRoot;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Text _throwableLabel;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Lines")]
		public Texture2D[] _lineTextures;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color[] _lineColors;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Variants")]
		public GameObject variantPanelRoot;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Image[] tabFills;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.UI.Button variantResetButton;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEngine.UI.Button variantSaveButton;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject warningNoConfigs;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Toggle variantEnabledToggle;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Toggle variantLineEnabledToggle;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Toggle variantSamplesEnabledToggle;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _throwableIndex;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Device _device;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<ThrowTracker> _trackers;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Dictionary<ThrowConfiguration, ThrowConfiguration[]> _tempConfigVariants;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ThrowHandle _currentSpawn;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int currentConfigIndex;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private ThrowConfiguration[] configSet;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ThrowConfiguration original;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Color[] colorSet;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool[] configEnabled;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool[] showSamples;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool[] showLine;

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xFBFF64", Offset = "0xFBFF64", VA = "0xFBFF64")]
		private void Awake()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xFC004C", Offset = "0xFC004C", VA = "0xFC004C")]
		private void Start()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xFC0628", Offset = "0xFC0628", VA = "0xFC0628")]
		private void Update()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xFC0FB4", Offset = "0xFC0FB4", VA = "0xFC0FB4")]
		private void SetDevice(Device device)
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xFC0774", Offset = "0xFC0774", VA = "0xFC0774")]
		public void SpawnTrackedThrowable()
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xFC1B68", Offset = "0xFC1B68", VA = "0xFC1B68")]
		private void RespawnThrowable()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xFC1C0C", Offset = "0xFC1C0C", VA = "0xFC1C0C")]
		public void SetCurrentConfigEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xFC0550", Offset = "0xFC0550", VA = "0xFC0550")]
		public void SetConfigEnabled(int i, bool enabled)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xFC1CEC", Offset = "0xFC1CEC", VA = "0xFC1CEC")]
		public void SetCurrentLineEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xFC1CFC", Offset = "0xFC1CFC", VA = "0xFC1CFC")]
		public void SetLineEnabled(int i, bool enabled)
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xFC1D30", Offset = "0xFC1D30", VA = "0xFC1D30")]
		public void SetCurrentSampleVisEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xFC1D40", Offset = "0xFC1D40", VA = "0xFC1D40")]
		public void SetSampleVisualizationEnabled(int i, bool enabled)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xFC1D74", Offset = "0xFC1D74", VA = "0xFC1D74")]
		public void SaveCurrentConfig()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xFC1FE8", Offset = "0xFC1FE8", VA = "0xFC1FE8")]
		public void ResetCurrentConfig()
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xFC2158", Offset = "0xFC2158", VA = "0xFC2158")]
		public void ClearAll()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xFC2424", Offset = "0xFC2424", VA = "0xFC2424")]
		public void Reset()
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xFC2428", Offset = "0xFC2428", VA = "0xFC2428")]
		public void CycleThrowableRight()
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xFC24A0", Offset = "0xFC24A0", VA = "0xFC24A0")]
		public void CycleThrowableLeft()
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xFC0158", Offset = "0xFC0158", VA = "0xFC0158")]
		private void SelectThrowable(int i)
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xFC2034", Offset = "0xFC2034", VA = "0xFC2034")]
		public void LoadConfig(int i)
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xFC1C74", Offset = "0xFC1C74", VA = "0xFC1C74")]
		public void ReloadCurrentConfig()
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xFC2EBC", Offset = "0xFC2EBC", VA = "0xFC2EBC")]
		public LabManager()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[CreateAssetMenu(fileName = "NewThrowConfig", menuName = "ThrowLab/ThrowConfiguration", order = 1)]
	public class ThrowConfiguration : ScriptableObject
	{
		[Token(Token = "0x20002AA")]
		public enum EstimationAlgorithm
		{
			[Token(Token = "0x4000F08")]
			SIMPLE_AVERAGE,
			[Token(Token = "0x4000F09")]
			WEIGHTED_AVERAGE,
			[Token(Token = "0x4000F0A")]
			EXPONENTIAL_AVERAGE,
			[Token(Token = "0x4000F0B")]
			CUSTOM_CURVE
		}

		[Token(Token = "0x20002AB")]
		public enum PeriodMeasurement
		{
			[Token(Token = "0x4000F0D")]
			FRAMES,
			[Token(Token = "0x4000F0E")]
			TIME
		}

		[Token(Token = "0x20002AC")]
		public enum SampleTime
		{
			[Token(Token = "0x4000F10")]
			SCALED,
			[Token(Token = "0x4000F11")]
			UNSCALED,
			[Token(Token = "0x4000F12")]
			FIXED
		}

		[Token(Token = "0x20002AD")]
		public enum VelocitySource
		{
			[Token(Token = "0x4000F14")]
			DEVICE_CENTER_OF_MASS,
			[Token(Token = "0x4000F15")]
			HAND_TRACKED_POSITION,
			[Token(Token = "0x4000F16")]
			OBJECT_CENTER,
			[Token(Token = "0x4000F17")]
			OBJECT_CUSTOM_OFFSET
		}

		[Token(Token = "0x20002AE")]
		public enum AssistTargetMethod
		{
			[Token(Token = "0x4000F19")]
			GAZE,
			[Token(Token = "0x4000F1A")]
			NEAREST
		}

		[Token(Token = "0x20002AF")]
		public enum FalloffSource
		{
			[Token(Token = "0x4000F1C")]
			TIME,
			[Token(Token = "0x4000F1D")]
			DISTANCE,
			[Token(Token = "0x4000F1E")]
			MIN_TIME_DIST
		}

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Velocity Smoothing")]
		public bool smoothingEnabled;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EstimationAlgorithm estimationFunction;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PeriodMeasurement samplePeriodMeasurement;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public SampleTime sampleTime;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int periodFrames;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float periodSeconds;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VelocitySource sampleSourceType;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve smoothingAverageCustomCurve;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Velocity Scaling")]
		public bool scaleEnabled;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float scaleMultiplier;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float scaleThreshold;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 5f)]
		public float scaleRampExponent;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useScaleRampCustomCurve;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve scaleRampCustomCurve;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Aim Assist")]
		public bool assistEnabled;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		public float assistWeight;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 180f)]
		public float assistRangeDegrees;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 5f)]
		public float assistRampExponent;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool useAssistRampCustomCurve;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve assistRampCustomCurve;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AssistTargetMethod assistTargetMethod;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Header("Friction")]
		public bool frictionEnabled;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float frictionFalloffSeconds;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 5f)]
		public float frictionFalloffExponent;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool useFrictionFalloffCustomCurve;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve frictionFalloffCustomCurve;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		[SerializeField]
		private string uniqueID;

		[Token(Token = "0x17000199")]
		private string path
		{
			[Token(Token = "0x600107C")]
			[Address(RVA = "0xFC330C", Offset = "0xFC330C", VA = "0xFC330C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019A")]
		private string saveDirectory
		{
			[Token(Token = "0x600107D")]
			[Address(RVA = "0xFC354C", Offset = "0xFC354C", VA = "0xFC354C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xFC3134", Offset = "0xFC3134", VA = "0xFC3134")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xFC3178", Offset = "0xFC3178", VA = "0xFC3178")]
		public float SampleAssistCurve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xFC31F8", Offset = "0xFC31F8", VA = "0xFC31F8")]
		public float SampleFrictionCurve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xFC3250", Offset = "0xFC3250", VA = "0xFC3250")]
		public float SampleScalingCurve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xFC31BC", Offset = "0xFC31BC", VA = "0xFC31BC")]
		private static float SampleExponentialCurve(float t, float exp, bool flip = false)
		{
			return default(float);
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xFC3294", Offset = "0xFC3294", VA = "0xFC3294")]
		public Vector3 GetEstimate(Vector3[] inputs, out float[] componentWeights)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xFC32F0", Offset = "0xFC32F0", VA = "0xFC32F0")]
		public float[] GetWeights(Vector3[] inputs)
		{
			return null;
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xFC2514", Offset = "0xFC2514", VA = "0xFC2514")]
		public ThrowConfiguration Clone()
		{
			return null;
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xFC1DC0", Offset = "0xFC1DC0", VA = "0xFC1DC0")]
		public void CopyTo(ThrowConfiguration other)
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xFC1F5C", Offset = "0xFC1F5C", VA = "0xFC1F5C")]
		public void SaveToJSON()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xFC3138", Offset = "0xFC3138", VA = "0xFC3138")]
		public void LoadFromJSON()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xFC3598", Offset = "0xFC3598", VA = "0xFC3598")]
		public ThrowConfiguration()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B0")]
	public class ThrowConfigurationSet
	{
		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private ThrowConfiguration[] _deviceConfigurations;

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xFC3840", Offset = "0xFC3840", VA = "0xFC3840")]
		public ThrowConfiguration GetConfigForDevice(Device device)
		{
			return null;
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xFC3A00", Offset = "0xFC3A00", VA = "0xFC3A00")]
		public void SetConfigForDevice(Device device, ThrowConfiguration config)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xFC3A68", Offset = "0xFC3A68", VA = "0xFC3A68")]
		public void SetConfigs(ThrowConfiguration[] set)
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xFC3A70", Offset = "0xFC3A70", VA = "0xFC3A70")]
		public ThrowConfigurationSet()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public class ThrowHandle : MonoBehaviour
	{
		[Token(Token = "0x20002B2")]
		public struct VelocitySample
		{
			[Token(Token = "0x4000F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 velocity;

			[Token(Token = "0x4000F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Quaternion rotation;

			[Token(Token = "0x4000F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 angularVelocity;

			[Token(Token = "0x4000F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float time;

			[Token(Token = "0x60010AC")]
			[Address(RVA = "0xFC4AF4", Offset = "0xFC4AF4", VA = "0xFC4AF4")]
			public VelocitySample(Vector3 position, Vector3 velocity, Quaternion rotation, Vector3 angular, float time)
			{
			}
		}

		[Token(Token = "0x20002B5")]
		[CompilerGenerated]
		private sealed class <IgnoreCollisionWithOtherRoutine>d__57 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ThrowHandle <>4__this;

			[Token(Token = "0x4000F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject other;

			[Token(Token = "0x170001A0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010B7")]
				[Address(RVA = "0xFC6760", Offset = "0xFC6760", VA = "0xFC6760", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010B9")]
				[Address(RVA = "0xFC67A8", Offset = "0xFC67A8", VA = "0xFC67A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010B4")]
			[Address(RVA = "0xFC59B8", Offset = "0xFC59B8", VA = "0xFC59B8")]
			[DebuggerHidden]
			public <IgnoreCollisionWithOtherRoutine>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x60010B5")]
			[Address(RVA = "0xFC65E0", Offset = "0xFC65E0", VA = "0xFC65E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010B6")]
			[Address(RVA = "0xFC65E4", Offset = "0xFC65E4", VA = "0xFC65E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010B8")]
			[Address(RVA = "0xFC6768", Offset = "0xFC6768", VA = "0xFC6768", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action onDetachFromHand;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<GameObject, GameObject> onPickUp;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<Vector3> onFinalTrajectory;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<VelocitySample> OnSampleRecorded;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<ThrowHandle> OnDestroyHandle;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action onFrictionApplied;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		[FormerlySerializedAs("_controllerConfigurations")]
		private ThrowConfiguration[] _deviceConfigurations;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ThrowConfigurationSet _throwConfigurationSet;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Device _attachedDevice;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _velocitySensor;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject _handCollisionRoot;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ThrowTarget currentTarget;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Action<ThrowTarget> OnTargetedThrow;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<VelocitySample> _velocityHistory;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _sampledPreviousPosition;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion _sampledPreviousRotation;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _rootMotionTransform;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 _rootVelocity;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 _previousRootPosition;

		[Token(Token = "0x1700019B")]
		public bool _attached
		{
			[Token(Token = "0x6001085")]
			[Address(RVA = "0xFC3A78", Offset = "0xFC3A78", VA = "0xFC3A78")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001086")]
			[Address(RVA = "0xFC3A80", Offset = "0xFC3A80", VA = "0xFC3A80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public float _timeOfRelease
		{
			[Token(Token = "0x6001087")]
			[Address(RVA = "0xFC3A8C", Offset = "0xFC3A8C", VA = "0xFC3A8C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001088")]
			[Address(RVA = "0xFC3A94", Offset = "0xFC3A94", VA = "0xFC3A94")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public bool _applyingInfluence
		{
			[Token(Token = "0x6001089")]
			[Address(RVA = "0xFC3A9C", Offset = "0xFC3A9C", VA = "0xFC3A9C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600108A")]
			[Address(RVA = "0xFC3AA4", Offset = "0xFC3AA4", VA = "0xFC3AA4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public bool _frictionActive
		{
			[Token(Token = "0x600108B")]
			[Address(RVA = "0xFC3AB0", Offset = "0xFC3AB0", VA = "0xFC3AB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019F")]
		public ThrowConfiguration Settings
		{
			[Token(Token = "0x600108C")]
			[Address(RVA = "0xFC3B14", Offset = "0xFC3B14", VA = "0xFC3B14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xFC3B34", Offset = "0xFC3B34", VA = "0xFC3B34")]
		private void Awake()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xFC3D80", Offset = "0xFC3D80", VA = "0xFC3D80")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xFC3CD0", Offset = "0xFC3CD0", VA = "0xFC3CD0")]
		private void MigrateData()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xFC3D84", Offset = "0xFC3D84", VA = "0xFC3D84")]
		private void Update()
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xFC4778", Offset = "0xFC4778", VA = "0xFC4778")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xFC48DC", Offset = "0xFC48DC", VA = "0xFC48DC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xFC49A8", Offset = "0xFC49A8", VA = "0xFC49A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xFC4A68", Offset = "0xFC4A68", VA = "0xFC4A68")]
		public ThrowConfigurationSet GetConfigSet()
		{
			return null;
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xFC4A70", Offset = "0xFC4A70", VA = "0xFC4A70")]
		public void SetConfigSet(ThrowConfigurationSet set)
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xFC0FC4", Offset = "0xFC0FC4", VA = "0xFC0FC4")]
		public ThrowConfiguration GetConfigForDevice(Device device)
		{
			return null;
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xFC0FDC", Offset = "0xFC0FDC", VA = "0xFC0FDC")]
		public void SetConfigForDevice(Device device, ThrowConfiguration config)
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xFC4018", Offset = "0xFC4018", VA = "0xFC4018")]
		private void RecordVelocitySample(float deltaTime, float time)
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xFC4A78", Offset = "0xFC4A78", VA = "0xFC4A78")]
		public Transform GetSampleSource()
		{
			return null;
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xFC4B20", Offset = "0xFC4B20", VA = "0xFC4B20")]
		private void ClearOldSamples()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xFC4CD4", Offset = "0xFC4CD4", VA = "0xFC4CD4")]
		public List<VelocitySample> GetSampleWeights(out float[] weights)
		{
			return null;
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xFC4E24", Offset = "0xFC4E24", VA = "0xFC4E24")]
		public void OnAttach(GameObject hand, GameObject collisionRoot)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xFC51B0", Offset = "0xFC51B0", VA = "0xFC51B0")]
		public void OnDetach()
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xFC0FF4", Offset = "0xFC0FF4", VA = "0xFC0FF4")]
		public void SetPhysicsEnabled(bool collision)
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xFC1A44", Offset = "0xFC1A44", VA = "0xFC1A44")]
		public void IgnoreCollisionWithOther(GameObject other, bool ignore)
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xFC5908", Offset = "0xFC5908", VA = "0xFC5908")]
		public void IgnoreCollisionWithOtherForFixedUpdate(GameObject other)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xFC5928", Offset = "0xFC5928", VA = "0xFC5928")]
		[IteratorStateMachine(typeof(<IgnoreCollisionWithOtherRoutine>d__57))]
		protected IEnumerator IgnoreCollisionWithOtherRoutine(GameObject other)
		{
			return null;
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xFC5368", Offset = "0xFC5368", VA = "0xFC5368")]
		public Vector3 GetVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xFC5754", Offset = "0xFC5754", VA = "0xFC5754")]
		public Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xFC59E0", Offset = "0xFC59E0", VA = "0xFC59E0")]
		private Vector3 GetEstimate(Vector3[] inputs)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xFC43A8", Offset = "0xFC43A8", VA = "0xFC43A8")]
		private ThrowTarget FindBestGazeBasedThrowTarget(List<ThrowTarget> targets)
		{
			return null;
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xFC60BC", Offset = "0xFC60BC", VA = "0xFC60BC")]
		private ThrowTarget FindClosestThrowTarget(Vector3 origin, Vector3 rawVelocity, List<ThrowTarget> targets)
		{
			return null;
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xFC5C84", Offset = "0xFC5C84", VA = "0xFC5C84")]
		private Vector3 ApplyAssist(Vector3 rawVelocity, Vector3 origin, Vector3 targetPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xFC5A14", Offset = "0xFC5A14", VA = "0xFC5A14")]
		private Vector3 ApplySpeedIncrease(Vector3 rawVelocity)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xFC63F4", Offset = "0xFC63F4", VA = "0xFC63F4")]
		public float GetHandFriction()
		{
			return default(float);
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xFC47FC", Offset = "0xFC47FC", VA = "0xFC47FC")]
		private void ApplyFriction()
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xFC64A4", Offset = "0xFC64A4", VA = "0xFC64A4")]
		public ThrowHandle()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public class ThrowTarget : MonoBehaviour
	{
		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _showReticle;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject reticle;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ThrowHandle> targettingHandles;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ThrowTarget> _allTargets;

		[Token(Token = "0x170001A2")]
		public static List<ThrowTarget> AllTargets
		{
			[Token(Token = "0x60010BA")]
			[Address(RVA = "0xFC42F0", Offset = "0xFC42F0", VA = "0xFC42F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010BB")]
			[Address(RVA = "0xFC67B0", Offset = "0xFC67B0", VA = "0xFC67B0")]
			protected set
			{
			}
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xFC6808", Offset = "0xFC6808", VA = "0xFC6808")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xFC69B0", Offset = "0xFC69B0", VA = "0xFC69B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xFC6AF8", Offset = "0xFC6AF8", VA = "0xFC6AF8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xFC6D04", Offset = "0xFC6D04", VA = "0xFC6D04")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xFC6DB0", Offset = "0xFC6DB0", VA = "0xFC6DB0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xFC4690", Offset = "0xFC4690", VA = "0xFC4690")]
		public void AddTargettingHandle(ThrowHandle handle)
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xFC4600", Offset = "0xFC4600", VA = "0xFC4600")]
		public void RemoveTargettingHandle(ThrowHandle handle)
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xFC6990", Offset = "0xFC6990", VA = "0xFC6990")]
		private void ShowHideReticle(bool show)
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xFC6AFC", Offset = "0xFC6AFC", VA = "0xFC6AFC")]
		private void MaintainReticleSize()
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xFC5C64", Offset = "0xFC5C64", VA = "0xFC5C64")]
		public Vector3 GetTargetPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xFC6E04", Offset = "0xFC6E04", VA = "0xFC6E04")]
		public ThrowTarget()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public class ThrowTracker : MonoBehaviour
	{
		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LineRenderer _trajectoryLine;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem _sampleParticleSystem;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystemRenderer _particleRenderer;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UIThrowTracker _trackerUIPrefab;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject _collisionMarkerPrefab;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _origin;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _releaseVelocity;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ThrowHandle _handle;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 _groundHitPoint;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool _tracking;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Vector3> _positions;

		[Token(Token = "0x4000F57")]
		private const int _positionsCap = 500;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UIThrowTracker _ui;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _show;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool _showLine;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool _showSamples;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Color _color;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 particleMaxSize;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<ThrowHandle.VelocitySample> visSamples;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] visWeights;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ParticleSystem.Particle[] _smoothingSampleSet;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<ParticleSystem.Particle> _postReleaseSampleSet;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GameObject _collisionMarker;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<MeshRenderer> _outlineRenderers;

		[Token(Token = "0x170001A3")]
		public float GroundDistance
		{
			[Token(Token = "0x60010CA")]
			[Address(RVA = "0xFC6F68", Offset = "0xFC6F68", VA = "0xFC6F68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xFC702C", Offset = "0xFC702C", VA = "0xFC702C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xFC708C", Offset = "0xFC708C", VA = "0xFC708C")]
		private void Update()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xFC7248", Offset = "0xFC7248", VA = "0xFC7248")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xFC10CC", Offset = "0xFC10CC", VA = "0xFC10CC")]
		public void TrackThrowable(ThrowHandle throwable)
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xFC1644", Offset = "0xFC1644", VA = "0xFC1644")]
		public void SetLineAppearance(Texture lineTex, Color lineColor)
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xFC16E0", Offset = "0xFC16E0", VA = "0xFC16E0")]
		public void ShowHideLine(bool show)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xFC1718", Offset = "0xFC1718", VA = "0xFC1718")]
		public void ShowHideSamples(bool show)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xFC763C", Offset = "0xFC763C", VA = "0xFC763C")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xFC17CC", Offset = "0xFC17CC", VA = "0xFC17CC")]
		public void AttachUIToRoot(Transform root)
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xFC7648", Offset = "0xFC7648", VA = "0xFC7648")]
		public void OnDetach()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xFC803C", Offset = "0xFC803C", VA = "0xFC803C")]
		public void EndTracking()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xFC8044", Offset = "0xFC8044", VA = "0xFC8044")]
		public void OnAttach(GameObject hand, GameObject collisionRoot)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xFC804C", Offset = "0xFC804C", VA = "0xFC804C")]
		private void RecordFinalTrajectory(Vector3 launch)
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xFC8234", Offset = "0xFC8234", VA = "0xFC8234")]
		private void VisualizeSmoothingSample(ThrowHandle.VelocitySample sample)
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xFC79BC", Offset = "0xFC79BC", VA = "0xFC79BC")]
		private void VisualizeEstimatedVelocity()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xFC7DA8", Offset = "0xFC7DA8", VA = "0xFC7DA8")]
		private void RefreshParticles()
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xFC8720", Offset = "0xFC8720", VA = "0xFC8720")]
		private ParticleSystem.Particle CreateParticleForCurrentEstimatedVelocity()
		{
			return default(ParticleSystem.Particle);
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xFC82B4", Offset = "0xFC82B4", VA = "0xFC82B4")]
		private void VisualizeVelocitySmoothingData(List<ThrowHandle.VelocitySample> samples, float[] weights)
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xFC8B68", Offset = "0xFC8B68", VA = "0xFC8B68")]
		public void ToggleVisible()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xFC8B80", Offset = "0xFC8B80", VA = "0xFC8B80")]
		public void ShowHide(bool show)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xFC8CD0", Offset = "0xFC8CD0", VA = "0xFC8CD0")]
		private void OnHandleDestroyed(ThrowHandle handle)
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xFC22D8", Offset = "0xFC22D8", VA = "0xFC22D8")]
		public void Cleanup()
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xFC8CD4", Offset = "0xFC8CD4", VA = "0xFC8CD4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xFC8DD8", Offset = "0xFC8DD8", VA = "0xFC8DD8")]
		private void PlaceCollisionMarker(Vector3 position, Vector3 normal)
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xFC724C", Offset = "0xFC724C", VA = "0xFC724C")]
		private void CreateOutline(GameObject original)
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xFC7EE4", Offset = "0xFC7EE4", VA = "0xFC7EE4")]
		private void ShowHideOutline(bool show)
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xFC9038", Offset = "0xFC9038", VA = "0xFC9038")]
		public ThrowTracker()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class DeviceDetectorUI : MonoBehaviour
	{
		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text _leftDetected;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text _rightDetected;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text _warning;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DeviceDetector _leftDetector;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DeviceDetector _rightDetector;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Device _detected;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<Device> OnDeviceDetected;

		[Token(Token = "0x170001A4")]
		public Device DetectedDevice
		{
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0xFC919C", Offset = "0xFC919C", VA = "0xFC919C")]
			get
			{
				return default(Device);
			}
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xFC91A4", Offset = "0xFC91A4", VA = "0xFC91A4")]
		private void Start()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xFC9520", Offset = "0xFC9520", VA = "0xFC9520")]
		private void Update()
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xFC9724", Offset = "0xFC9724", VA = "0xFC9724")]
		public DeviceDetectorUI()
		{
		}
	}
}
namespace CloudFine.ThrowLab.VRIF
{
	[Token(Token = "0x20002BB")]
	[RequireComponent(typeof(ThrowHandle))]
	public class ThrowLabGrabbable : Grabbable
	{
		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private ThrowHandle m_handle;

		[Token(Token = "0x170001A5")]
		private ThrowHandle _handle
		{
			[Token(Token = "0x60010EE")]
			[Address(RVA = "0xFC97E4", Offset = "0xFC97E4", VA = "0xFC97E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xFC98F4", Offset = "0xFC98F4", VA = "0xFC98F4", Slot = "20")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xFC9A74", Offset = "0xFC9A74", VA = "0xFC9A74", Slot = "27")]
		public override void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xFC9AA4", Offset = "0xFC9AA4", VA = "0xFC9AA4")]
		public ThrowLabGrabbable()
		{
		}
	}
}
namespace CloudFine.ThrowLab.Oculus
{
	[Token(Token = "0x20002BC")]
	public class Oculus_DeviceDetector : DeviceDetector
	{
		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xFC9AAC", Offset = "0xFC9AAC", VA = "0xFC9AAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xFC9AB8", Offset = "0xFC9AB8", VA = "0xFC9AB8")]
		public Oculus_DeviceDetector()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Oculus_GrabThresholdModifier : GrabThresholdModifier
	{
		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OVRGrabber _grabber;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xFC9AC8", Offset = "0xFC9AC8", VA = "0xFC9AC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xFC9B20", Offset = "0xFC9B20", VA = "0xFC9B20", Slot = "4")]
		public override float GripValue()
		{
			return default(float);
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xFC9B80", Offset = "0xFC9B80", VA = "0xFC9B80", Slot = "5")]
		public override void SetGrabThreshold(float grip)
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xFC9B9C", Offset = "0xFC9B9C", VA = "0xFC9B9C", Slot = "6")]
		public override void SetReleaseThreshold(float grip)
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xFC9BB8", Offset = "0xFC9BB8", VA = "0xFC9BB8")]
		public Oculus_GrabThresholdModifier()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	[RequireComponent(typeof(ThrowHandle))]
	public class ThrowLabOVRGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ThrowHandle m_handle;

		[Token(Token = "0x170001A6")]
		private ThrowHandle _handle
		{
			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xFC9BC0", Offset = "0xFC9BC0", VA = "0xFC9BC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xFC9CD0", Offset = "0xFC9CD0", VA = "0xFC9CD0", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xFC9D34", Offset = "0xFC9D34", VA = "0xFC9D34", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xFC9D5C", Offset = "0xFC9D5C", VA = "0xFC9D5C")]
		public ThrowLabOVRGrabbable()
		{
		}
	}
}
namespace CloudFine.ThrowLab.UI
{
	[Token(Token = "0x20002BF")]
	[RequireComponent(typeof(Image))]
	public class UIAngleValue : MonoBehaviour
	{
		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Image image;

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xFC9D64", Offset = "0xFC9D64", VA = "0xFC9D64")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xFC9DBC", Offset = "0xFC9DBC", VA = "0xFC9DBC")]
		public void SetRange(float range)
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xFC9E40", Offset = "0xFC9E40", VA = "0xFC9E40")]
		public UIAngleValue()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	public class UIColorMeTag : MonoBehaviour
	{
		[Token(Token = "0x6001100")]
		[Address(RVA = "0xFC9E48", Offset = "0xFC9E48", VA = "0xFC9E48")]
		public UIColorMeTag()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	[RequireComponent(typeof(LineRenderer))]
	public class UICurveLine : MonoBehaviour
	{
		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Func<float, float> curveFunction;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numPositions;

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xFC9E50", Offset = "0xFC9E50", VA = "0xFC9E50")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xFC9EA8", Offset = "0xFC9EA8", VA = "0xFC9EA8")]
		public void SetCurveFunc(Func<float, float> curveFunc)
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xFC9EC4", Offset = "0xFC9EC4", VA = "0xFC9EC4")]
		public void RefreshCurve()
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xFCA024", Offset = "0xFCA024", VA = "0xFCA024")]
		public UICurveLine()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public class UISmoothingVisual : MonoBehaviour
	{
		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image[] bars;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ThrowConfiguration.EstimationAlgorithm algorithm;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] dummyData;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] weights;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Func<Vector3[], float[]> _func;

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xFCA034", Offset = "0xFCA034", VA = "0xFCA034")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xFCA0F4", Offset = "0xFCA0F4", VA = "0xFCA0F4")]
		public void SetFunc(Func<Vector3[], float[]> func)
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xFCA0FC", Offset = "0xFCA0FC", VA = "0xFCA0FC")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xFCA1A8", Offset = "0xFCA1A8", VA = "0xFCA1A8")]
		public UISmoothingVisual()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	[RequireComponent(typeof(RectTransform))]
	public class UIStepper : UIBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002C4")]
		public class StepperValueChangedEvent : UnityEvent<float>
		{
			[Token(Token = "0x6001120")]
			[Address(RVA = "0xFCA544", Offset = "0xFCA544", VA = "0xFCA544")]
			public StepperValueChangedEvent()
			{
			}
		}

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.UI.Button[] _sides;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _value;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _minimum;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _maximum;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float _step;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _wrap;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Graphic _separator;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _separatorWidth;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private StepperValueChangedEvent _onValueChanged;

		[Token(Token = "0x170001A7")]
		public UnityEngine.UI.Button[] sides
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0xFCA1B0", Offset = "0xFCA1B0", VA = "0xFCA1B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A8")]
		public float value
		{
			[Token(Token = "0x600110A")]
			[Address(RVA = "0xFCA2C0", Offset = "0xFCA2C0", VA = "0xFCA2C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600110B")]
			[Address(RVA = "0xFCA2C8", Offset = "0xFCA2C8", VA = "0xFCA2C8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		public float minimum
		{
			[Token(Token = "0x600110C")]
			[Address(RVA = "0xFCA33C", Offset = "0xFCA33C", VA = "0xFCA33C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600110D")]
			[Address(RVA = "0xFCA344", Offset = "0xFCA344", VA = "0xFCA344")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public float maximum
		{
			[Token(Token = "0x600110E")]
			[Address(RVA = "0xFCA34C", Offset = "0xFCA34C", VA = "0xFCA34C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600110F")]
			[Address(RVA = "0xFCA354", Offset = "0xFCA354", VA = "0xFCA354")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public float step
		{
			[Token(Token = "0x6001110")]
			[Address(RVA = "0xFCA35C", Offset = "0xFCA35C", VA = "0xFCA35C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001111")]
			[Address(RVA = "0xFCA364", Offset = "0xFCA364", VA = "0xFCA364")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public bool wrap
		{
			[Token(Token = "0x6001112")]
			[Address(RVA = "0xFCA36C", Offset = "0xFCA36C", VA = "0xFCA36C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001113")]
			[Address(RVA = "0xFCA374", Offset = "0xFCA374", VA = "0xFCA374")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public Graphic separator
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0xFCA380", Offset = "0xFCA380", VA = "0xFCA380")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001115")]
			[Address(RVA = "0xFCA388", Offset = "0xFCA388", VA = "0xFCA388")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		private float separatorWidth
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0xFCA390", Offset = "0xFCA390", VA = "0xFCA390")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001AF")]
		public StepperValueChangedEvent onValueChanged
		{
			[Token(Token = "0x6001117")]
			[Address(RVA = "0xFCA4B8", Offset = "0xFCA4B8", VA = "0xFCA4B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001118")]
			[Address(RVA = "0xFCA4C0", Offset = "0xFCA4C0", VA = "0xFCA4C0")]
			set
			{
			}
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xFCA4C8", Offset = "0xFCA4C8", VA = "0xFCA4C8")]
		protected UIStepper()
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xFCA1F8", Offset = "0xFCA1F8", VA = "0xFCA1F8")]
		private UnityEngine.UI.Button[] GetSides()
		{
			return null;
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xFCA624", Offset = "0xFCA624", VA = "0xFCA624")]
		public void StepUp()
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xFCA6D0", Offset = "0xFCA6D0", VA = "0xFCA6D0")]
		public void StepDown()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xFCA62C", Offset = "0xFCA62C", VA = "0xFCA62C")]
		private void Step(float amount)
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xFCA58C", Offset = "0xFCA58C", VA = "0xFCA58C")]
		private void DisableAtExtremes(UnityEngine.UI.Button[] sides)
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xFCA6DC", Offset = "0xFCA6DC", VA = "0xFCA6DC")]
		private void RecreateSprites(UnityEngine.UI.Button[] sides)
		{
		}
	}
	[Token(Token = "0x20002C5")]
	[RequireComponent(typeof(UnityEngine.UI.Button))]
	public class UIStepperSide : UIBehaviour, IPointerClickHandler, IEventSystemHandler, ISubmitHandler
	{
		[Token(Token = "0x170001B0")]
		private UnityEngine.UI.Button button
		{
			[Token(Token = "0x6001121")]
			[Address(RVA = "0xFCA914", Offset = "0xFCA914", VA = "0xFCA914")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B1")]
		private UIStepper stepper
		{
			[Token(Token = "0x6001122")]
			[Address(RVA = "0xFCA95C", Offset = "0xFCA95C", VA = "0xFCA95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B2")]
		private bool leftmost
		{
			[Token(Token = "0x6001123")]
			[Address(RVA = "0xFCA9A4", Offset = "0xFCA9A4", VA = "0xFCA9A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xFCAA38", Offset = "0xFCAA38", VA = "0xFCAA38")]
		protected UIStepperSide()
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xFCAA40", Offset = "0xFCAA40", VA = "0xFCAA40", Slot = "19")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xFCAAE8", Offset = "0xFCAAE8", VA = "0xFCAAE8", Slot = "20")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xFCAA64", Offset = "0xFCAA64", VA = "0xFCAA64")]
		private void Press()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class UITabBar : MonoBehaviour
	{
		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform _frontTabRoot;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform _backTabRoot;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.UI.Button[] _tabButtons;

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xFCAAEC", Offset = "0xFCAAEC", VA = "0xFCAAEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xFCAAF4", Offset = "0xFCAAF4", VA = "0xFCAAF4")]
		public void SetTab(int tab)
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xFCAB90", Offset = "0xFCAB90", VA = "0xFCAB90")]
		public UITabBar()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class UIThrowConfiguration : MonoBehaviour
	{
		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ThrowConfiguration currentConfig;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color currentColor;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text configLabel;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject configOptionsRoot;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject variantPanelRoot;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Smoothing")]
		public Toggle smoothingToggle;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject smoothingOptionsRoot;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Dropdown smoothingAlgorithmDropdown;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Dropdown smoothingPeriodDropdown;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Dropdown smoothingTimeDropdown;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UIStepper smoothingFramesStepper;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UIStepper smoothignSecondsStepper;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Dropdown smoothingPointDropdown;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UISmoothingVisual smoothingUI;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Friction")]
		public Toggle frictionToggle;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject frictionOptionsRoot;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEngine.UI.Slider frictionFalloffSlider;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Toggle frictionCustomCurveToggle;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UIStepper frictionSecondsStepper;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UICurveLine frictionCurveUI;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Assist")]
		public Toggle assistToggle;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject assistOptionsRoot;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Toggle assistCustomCurveToggle;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public UnityEngine.UI.Slider assistGravitySlider;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public UnityEngine.UI.Slider assistWeightSlider;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public UnityEngine.UI.Slider assistRangeSlider;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public UICurveLine assistCurveUI;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Dropdown targetSelectionDropdown;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Header("Scale")]
		public Toggle scaleToggle;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public GameObject scaleOptionsRoot;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Toggle scaleCustomCurveToggle;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public UnityEngine.UI.Slider scaleRampSlider;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public UIStepper scaleStepper;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public UIStepper scaleThresholdStepper;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public UICurveLine scaleCurveUI;

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xFCAB98", Offset = "0xFCAB98", VA = "0xFCAB98")]
		private void Awake()
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xFC2570", Offset = "0xFC2570", VA = "0xFC2570")]
		public void LoadConfig(ThrowConfiguration config, Color color, bool enabled)
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xFCB238", Offset = "0xFCB238", VA = "0xFCB238")]
		public void SetAssistEnabled(bool enabled)
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xFCADF0", Offset = "0xFCADF0", VA = "0xFCADF0")]
		public void SetAssistEnabled(bool enabled, bool configEnabled)
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xFCB430", Offset = "0xFCB430", VA = "0xFCB430")]
		public void SetFrictionEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xFCAEB4", Offset = "0xFCAEB4", VA = "0xFCAEB4")]
		public void SetFrictionEnabled(bool enabled, bool configEnabled)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xFCB538", Offset = "0xFCB538", VA = "0xFCB538")]
		public void SetSmoothingEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xFCAF78", Offset = "0xFCAF78", VA = "0xFCAF78")]
		public void SetSmoothingEnabled(bool enabled, bool configEnabled)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xFCB544", Offset = "0xFCB544", VA = "0xFCB544")]
		public void SetScalingEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xFCB028", Offset = "0xFCB028", VA = "0xFCB028")]
		public void SetScalingEnabled(bool enabled, bool configEnabled)
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xFCB244", Offset = "0xFCB244", VA = "0xFCB244")]
		private void SetPanelEnabled(GameObject panelRoot, GameObject toggle, bool enabled)
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xFCB0EC", Offset = "0xFCB0EC", VA = "0xFCB0EC")]
		private void SetChildrenColor(GameObject root, Color c)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xFCB64C", Offset = "0xFCB64C", VA = "0xFCB64C")]
		public void SetEstimationAlgorithm(int value)
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xFCB6CC", Offset = "0xFCB6CC", VA = "0xFCB6CC")]
		public void SetPeriodMeasurement(int value)
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xFCB820", Offset = "0xFCB820", VA = "0xFCB820")]
		public void SetSampleSource(int value)
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xFCB8A0", Offset = "0xFCB8A0", VA = "0xFCB8A0")]
		public void SetSmoothingSampleTime(int value)
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xFCB920", Offset = "0xFCB920", VA = "0xFCB920")]
		public void SetSmoothingSeconds(float seconds)
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xFCB9A0", Offset = "0xFCB9A0", VA = "0xFCB9A0")]
		public void SetSmoothingFrames(float frames)
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xFCBA38", Offset = "0xFCBA38", VA = "0xFCBA38")]
		public void SetAssistRange(float range)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xFCBAB8", Offset = "0xFCBAB8", VA = "0xFCBAB8")]
		public void SetAssistGravity(float gravity)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xFCBB38", Offset = "0xFCBB38", VA = "0xFCBB38")]
		public void SetAssistWeight(float weight)
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xFCB334", Offset = "0xFCB334", VA = "0xFCB334")]
		public void SetAssistCustomCurve(bool value)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xFCBBB8", Offset = "0xFCBBB8", VA = "0xFCBBB8")]
		public void SetTargetSelectionMethod(int value)
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xFCBC38", Offset = "0xFCBC38", VA = "0xFCBC38")]
		public void SetScalingMultiplier(float scale)
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xFCBCB8", Offset = "0xFCBCB8", VA = "0xFCBCB8")]
		public void SetScalingThreshold(float threshold)
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xFCBD38", Offset = "0xFCBD38", VA = "0xFCBD38")]
		public void SetScalingRamp(float value)
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xFCB550", Offset = "0xFCB550", VA = "0xFCB550")]
		public void SetScalingCustomCurve(bool value)
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xFCBDB8", Offset = "0xFCBDB8", VA = "0xFCBDB8")]
		public void SetFrictionDuration(float value)
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xFCBE38", Offset = "0xFCBE38", VA = "0xFCBE38")]
		public void SetFrictionFalloff(float value)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xFCB43C", Offset = "0xFCB43C", VA = "0xFCB43C")]
		public void SetFrictionCustomCurve(bool value)
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xFCBEB8", Offset = "0xFCBEB8", VA = "0xFCBEB8")]
		public UIThrowConfiguration()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class UIThrowGrip : MonoBehaviour
	{
		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image[] gripLevels;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image[] hands;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text noHandsWarning;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool[] gripStates;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sprite openHand;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Sprite closedHand;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<GrabThresholdModifier> grips;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.UI.Slider grabBeginSlider;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.UI.Slider grabEndSlider;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool beginEndEqual;

		[Token(Token = "0x170001B3")]
		private float grabBegin
		{
			[Token(Token = "0x600114A")]
			[Address(RVA = "0xFCCEC0", Offset = "0xFCCEC0", VA = "0xFCCEC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600114B")]
			[Address(RVA = "0xFCCF08", Offset = "0xFCCF08", VA = "0xFCCF08")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		private float grabEnd
		{
			[Token(Token = "0x600114C")]
			[Address(RVA = "0xFCCF5C", Offset = "0xFCCF5C", VA = "0xFCCF5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600114D")]
			[Address(RVA = "0xFCCFA4", Offset = "0xFCCFA4", VA = "0xFCCFA4")]
			set
			{
			}
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xFCCFF8", Offset = "0xFCCFF8", VA = "0xFCCFF8")]
		private void Start()
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xFCD474", Offset = "0xFCD474", VA = "0xFCD474")]
		private void Update()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xFCD370", Offset = "0xFCD370", VA = "0xFCD370")]
		private void SliderReleased()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xFCD710", Offset = "0xFCD710", VA = "0xFCD710")]
		public void SetGripBegin(float val)
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xFCD7A4", Offset = "0xFCD7A4", VA = "0xFCD7A4")]
		public void SetGripEnd(float val)
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xFCD1E8", Offset = "0xFCD1E8", VA = "0xFCD1E8")]
		protected void ShowHidePanel(bool show)
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xFCD838", Offset = "0xFCD838", VA = "0xFCD838")]
		public UIThrowGrip()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class UIThrowTracker : MonoBehaviour
	{
		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text _distanceText;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text _angleText;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text _speedText;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.UI.Button showHideButton;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.UI.Button clearButton;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Image visibility;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Sprite visibleSprite;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sprite invisibleSprite;

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xFCD89C", Offset = "0xFCD89C", VA = "0xFCD89C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xFCD8BC", Offset = "0xFCD8BC", VA = "0xFCD8BC")]
		public void SetAngle(float angle)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xFCD95C", Offset = "0xFCD95C", VA = "0xFCD95C")]
		public void SetSpeed(float speed)
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xFCD9FC", Offset = "0xFCD9FC", VA = "0xFCD9FC")]
		public void UpdateDistance(float distance)
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xFCDA9C", Offset = "0xFCDA9C", VA = "0xFCDA9C")]
		public void RefreshVisibilityButton(bool showing)
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xFCDAD0", Offset = "0xFCDAD0", VA = "0xFCDAD0")]
		public UIThrowTracker()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	[RequireComponent(typeof(Text))]
	public class UIValueText : MonoBehaviour
	{
		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string _preDecorator;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string _toStringPattern;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _postDecorator;

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xFCDAD8", Offset = "0xFCDAD8", VA = "0xFCDAD8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0xFCDB30", Offset = "0xFCDB30", VA = "0xFCDB30")]
		public void SetValue(float value)
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xFCDB9C", Offset = "0xFCDB9C", VA = "0xFCDB9C")]
		public UIValueText()
		{
		}
	}
}
namespace SkinlessZombie
{
	[Token(Token = "0x20002CB")]
	public class AnimationController : MonoBehaviour
	{
		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator ZombieAnimator;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Dropdown AnimationDropdown;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationItemData currentanimationItemData;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject weaponPrefabObject;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 weaponprefabRot;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform weaponPivot;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightHand;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private List<AnimationItemData> animationItemDatabase;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Object[] animationDatabase;

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xFCDC30", Offset = "0xFCDC30", VA = "0xFCDC30")]
		protected void Awake()
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xFCDC88", Offset = "0xFCDC88", VA = "0xFCDC88")]
		private void Start()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xFCE1B4", Offset = "0xFCE1B4", VA = "0xFCE1B4")]
		private void UpdateDropDown(int selectedIndex)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xFCDFF0", Offset = "0xFCDFF0", VA = "0xFCDFF0")]
		private void CreateDropDownDatabase()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xFCDD4C", Offset = "0xFCDD4C", VA = "0xFCDD4C")]
		private void ListAllAnimationDataClips()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xFCE2A8", Offset = "0xFCE2A8", VA = "0xFCE2A8")]
		public AnimationController()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	[CreateAssetMenu(fileName = "New Animationclip", menuName = "Create new Animationclip")]
	public class AnimationItemData : ScriptableObject
	{
		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationClip animationClip;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject weaponPrefab;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 rotationvalues;

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xFCE330", Offset = "0xFCE330", VA = "0xFCE330")]
		public AnimationItemData()
		{
		}
	}
}
namespace Smooth
{
	[Token(Token = "0x20002CD")]
	public class MsgType
	{
		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static short SmoothSyncFromServerToNonOwners;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public static short SmoothSyncFromOwnerToServer;

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xFCE338", Offset = "0xFCE338", VA = "0xFCE338")]
		public MsgType()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public enum SyncMode
	{
		[Token(Token = "0x4000FCF")]
		XYZ,
		[Token(Token = "0x4000FD0")]
		XY,
		[Token(Token = "0x4000FD1")]
		XZ,
		[Token(Token = "0x4000FD2")]
		YZ,
		[Token(Token = "0x4000FD3")]
		X,
		[Token(Token = "0x4000FD4")]
		Y,
		[Token(Token = "0x4000FD5")]
		Z,
		[Token(Token = "0x4000FD6")]
		NONE
	}
	[Token(Token = "0x20002CF")]
	public class SmoothSyncPUN2 : MonoBehaviourPunCallbacks, IPunObservable, IOnPhotonViewOwnerChange, IPhotonViewCallback
	{
		[Token(Token = "0x20002D0")]
		public enum ExtrapolationMode
		{
			[Token(Token = "0x4001038")]
			None,
			[Token(Token = "0x4001039")]
			Limited,
			[Token(Token = "0x400103A")]
			Unlimited
		}

		[Token(Token = "0x20002D1")]
		public enum WhenToUpdateTransform
		{
			[Token(Token = "0x400103C")]
			Update,
			[Token(Token = "0x400103D")]
			FixedUpdate
		}

		[Token(Token = "0x20002D2")]
		public delegate bool validateStateDelegate(StatePUN2 receivedState, StatePUN2 latestVerifiedState);

		[Token(Token = "0x20002D3")]
		private enum RestState
		{
			[Token(Token = "0x400103F")]
			AT_REST,
			[Token(Token = "0x4001040")]
			JUST_STARTED_MOVING,
			[Token(Token = "0x4001041")]
			MOVING
		}

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float interpolationBackTime;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ExtrapolationMode extrapolationMode;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useExtrapolationTimeLimit;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float extrapolationTimeLimit;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useExtrapolationDistanceLimit;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float extrapolationDistanceLimit;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float sendPositionThreshold;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sendRotationThreshold;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float sendScaleThreshold;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float sendVelocityThreshold;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float sendAngularVelocityThreshold;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float receivedPositionThreshold;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float receivedRotationThreshold;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float snapPositionThreshold;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float snapRotationThreshold;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float snapScaleThreshold;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float positionLerpSpeed;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		public float rotationLerpSpeed;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float scaleLerpSpeed;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 5f)]
		public float timeCorrectionSpeed;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float snapTimeThreshold;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public SyncMode syncPosition;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SyncMode syncRotation;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public SyncMode syncScale;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public SyncMode syncVelocity;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public SyncMode syncAngularVelocity;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool isPositionCompressed;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool isRotationCompressed;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		public bool isScaleCompressed;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		public bool isVelocityCompressed;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool isAngularVelocityCompressed;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		public bool automaticallyResetTime;

		[Token(Token = "0x4000FF8")]
		private const int maxTimePower = 12;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private readonly float maxLocalTime;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly float minTimePrecision;

		[NonSerialized]
		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int localTimeResetIndicator;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool isSmoothingAuthorityChanges;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public WhenToUpdateTransform whenToUpdateTransform;

		[NonSerialized]
		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public validateStateDelegate validateStateMethod;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private StatePUN2 latestValidatedState;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool setVelocityInsteadOfPositionOnNonOwners;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool useLocalTransformOnly;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float maxPositionDifferenceForVelocitySyncing;

		[NonSerialized]
		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public StatePUN2[] stateBuffer;

		[NonSerialized]
		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int stateCount;

		[NonSerialized]
		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Rigidbody rb;

		[NonSerialized]
		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool hasRigidbody;

		[NonSerialized]
		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Rigidbody2D rb2D;

		[NonSerialized]
		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public bool hasRigidbody2D;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool dontEasePosition;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEA")]
		private bool dontEaseRotation;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEB")]
		private bool dontEaseScale;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float firstReceivedMessageZeroTime;

		[NonSerialized]
		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float lastTimeStateWasSent;

		[NonSerialized]
		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 lastPositionWhenStateWasSent;

		[NonSerialized]
		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Quaternion lastRotationWhenStateWasSent;

		[NonSerialized]
		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Vector3 lastScaleWhenStateWasSent;

		[NonSerialized]
		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public Vector3 lastVelocityWhenStateWasSent;

		[NonSerialized]
		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Vector3 lastAngularVelocityWhenStateWasSent;

		[NonSerialized]
		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public GameObject realObjectToSync;

		[NonSerialized]
		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool forceStateSend;

		[NonSerialized]
		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		public bool sendAtPositionalRestMessage;

		[NonSerialized]
		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x142")]
		public bool sendAtRotationalRestMessage;

		[NonSerialized]
		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x143")]
		public bool sendPosition;

		[NonSerialized]
		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public bool sendRotation;

		[NonSerialized]
		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x145")]
		public bool sendScale;

		[NonSerialized]
		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x146")]
		public bool sendVelocity;

		[NonSerialized]
		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x147")]
		public bool sendAngularVelocity;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private StatePUN2 targetTempState;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private NetworkStatePUN2 sendingTempState;

		[NonSerialized]
		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Vector3 latestReceivedVelocity;

		[NonSerialized]
		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public Vector3 latestReceivedAngularVelocity;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float timeSpentExtrapolating;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private bool extrapolatedLastFrame;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Vector3 positionLastAttemptedToSend;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private bool changedPositionLastFrame;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Quaternion rotationLastAttemptedToSend;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private bool changedRotationLastFrame;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private int atRestThresholdCount;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private int samePositionCount;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private int sameRotationCount;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private RestState restStatePosition;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private RestState restStateRotation;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private StatePUN2 latestEndStateUsed;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private bool shouldSendNextPUNUpdate;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private Vector3 latestTeleportedFromPosition;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Quaternion latestTeleportedFromRotation;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private float latestAuthorityChangeTime;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private int previousReceivedOwnerInt;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public int ownerChangeIndicator;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private bool triedToExtrapolateTooFar;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private float lastTimeAttemptedToSend;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private float _ownerTime;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private float lastTimeOwnerTimeWasSet;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public int receivedStatesCounter;

		[Token(Token = "0x170001B5")]
		public float localTime
		{
			[Token(Token = "0x6001167")]
			[Address(RVA = "0xFCE390", Offset = "0xFCE390", VA = "0xFCE390")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001168")]
			[Address(RVA = "0xFCE398", Offset = "0xFCE398", VA = "0xFCE398")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public bool isSyncingXPosition
		{
			[Token(Token = "0x6001193")]
			[Address(RVA = "0xFD1E38", Offset = "0xFD1E38", VA = "0xFD1E38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B7")]
		public bool isSyncingYPosition
		{
			[Token(Token = "0x6001194")]
			[Address(RVA = "0xFD1E60", Offset = "0xFD1E60", VA = "0xFD1E60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B8")]
		public bool isSyncingZPosition
		{
			[Token(Token = "0x6001195")]
			[Address(RVA = "0xFD1E8C", Offset = "0xFD1E8C", VA = "0xFD1E8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B9")]
		public bool isSyncingXRotation
		{
			[Token(Token = "0x6001196")]
			[Address(RVA = "0xFD20D8", Offset = "0xFD20D8", VA = "0xFD20D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BA")]
		public bool isSyncingYRotation
		{
			[Token(Token = "0x6001197")]
			[Address(RVA = "0xFD2100", Offset = "0xFD2100", VA = "0xFD2100")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BB")]
		public bool isSyncingZRotation
		{
			[Token(Token = "0x6001198")]
			[Address(RVA = "0xFD212C", Offset = "0xFD212C", VA = "0xFD212C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BC")]
		public bool isSyncingXScale
		{
			[Token(Token = "0x6001199")]
			[Address(RVA = "0xFD23FC", Offset = "0xFD23FC", VA = "0xFD23FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BD")]
		public bool isSyncingYScale
		{
			[Token(Token = "0x600119A")]
			[Address(RVA = "0xFD2424", Offset = "0xFD2424", VA = "0xFD2424")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BE")]
		public bool isSyncingZScale
		{
			[Token(Token = "0x600119B")]
			[Address(RVA = "0xFD2450", Offset = "0xFD2450", VA = "0xFD2450")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BF")]
		public bool isSyncingXVelocity
		{
			[Token(Token = "0x600119C")]
			[Address(RVA = "0xFD3014", Offset = "0xFD3014", VA = "0xFD3014")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C0")]
		public bool isSyncingYVelocity
		{
			[Token(Token = "0x600119D")]
			[Address(RVA = "0xFD303C", Offset = "0xFD303C", VA = "0xFD303C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C1")]
		public bool isSyncingZVelocity
		{
			[Token(Token = "0x600119E")]
			[Address(RVA = "0xFD3068", Offset = "0xFD3068", VA = "0xFD3068")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C2")]
		public bool isSyncingXAngularVelocity
		{
			[Token(Token = "0x600119F")]
			[Address(RVA = "0xFD3098", Offset = "0xFD3098", VA = "0xFD3098")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C3")]
		public bool isSyncingYAngularVelocity
		{
			[Token(Token = "0x60011A0")]
			[Address(RVA = "0xFD30C0", Offset = "0xFD30C0", VA = "0xFD30C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C4")]
		public bool isSyncingZAngularVelocity
		{
			[Token(Token = "0x60011A1")]
			[Address(RVA = "0xFD30EC", Offset = "0xFD30EC", VA = "0xFD30EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C5")]
		public float approximateNetworkTimeOnOwner
		{
			[Token(Token = "0x60011A3")]
			[Address(RVA = "0xFCFCB0", Offset = "0xFCFCB0", VA = "0xFCFCB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011A4")]
			[Address(RVA = "0xFCFCC8", Offset = "0xFCFCC8", VA = "0xFCFCC8")]
			set
			{
			}
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xFCE3A0", Offset = "0xFCE3A0", VA = "0xFCE3A0")]
		public static bool validateState(StatePUN2 latestReceivedState, StatePUN2 latestValidatedState)
		{
			return default(bool);
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xFCE3A8", Offset = "0xFCE3A8", VA = "0xFCE3A8")]
		public void Awake()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xFCE6FC", Offset = "0xFCE6FC", VA = "0xFCE6FC")]
		private void Update()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xFCE788", Offset = "0xFCE788", VA = "0xFCE788")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xFCE70C", Offset = "0xFCE70C", VA = "0xFCE70C")]
		private void SmoothSyncUpdate()
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xFCF604", Offset = "0xFCF604", VA = "0xFCF604", Slot = "28")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xFCFB40", Offset = "0xFCFB40", VA = "0xFCFB40", Slot = "29")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xFCFC0C", Offset = "0xFCFC0C", VA = "0xFCFC0C")]
		public void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xFCE79C", Offset = "0xFCE79C", VA = "0xFCE79C")]
		public void ResetLocalTime()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xFCFC28", Offset = "0xFCFC28", VA = "0xFCFC28")]
		public void OnRemoteTimeReset()
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xFCFCD8", Offset = "0xFCFCD8", VA = "0xFCFCD8", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xFCFFF8", Offset = "0xFCFFF8", VA = "0xFCFFF8")]
		private void sendState()
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xFD0B20", Offset = "0xFD0B20", VA = "0xFD0B20", Slot = "55")]
		public void OnOwnerChange(Player newOwner, Player previousOwner)
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xFD0C90", Offset = "0xFD0C90", VA = "0xFD0C90")]
		public void checkIfOwnerHasChanged(StatePUN2 newState)
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xFCE9A8", Offset = "0xFCE9A8", VA = "0xFCE9A8")]
		private void applyInterpolationOrExtrapolation()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xFD1058", Offset = "0xFD1058", VA = "0xFD1058")]
		private void interpolate(float interpolationTime)
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xFD1540", Offset = "0xFD1540", VA = "0xFD1540")]
		private bool extrapolate(float interpolationTime)
		{
			return default(bool);
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xFD24D0", Offset = "0xFD24D0", VA = "0xFD24D0")]
		private void shouldTeleport(StatePUN2 start, ref StatePUN2 end, float interpolationTime, ref float t)
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xFCFF58", Offset = "0xFCFF58", VA = "0xFCFF58")]
		public Vector3 getPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xFCFF94", Offset = "0xFCFF94", VA = "0xFCFF94")]
		public Quaternion getRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xFCFFD0", Offset = "0xFCFFD0", VA = "0xFCFFD0")]
		public Vector3 getScale()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xFD1EBC", Offset = "0xFD1EBC", VA = "0xFD1EBC")]
		public void setPosition(Vector3 position, bool isTeleporting)
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xFD215C", Offset = "0xFD215C", VA = "0xFD215C")]
		public void setRotation(Quaternion rotation, bool isTeleporting)
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xFD2480", Offset = "0xFD2480", VA = "0xFD2480")]
		public void setScale(Vector3 scale)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xFD2788", Offset = "0xFD2788", VA = "0xFD2788")]
		private void resetFlags()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xFD03BC", Offset = "0xFD03BC", VA = "0xFD03BC")]
		private bool almostEqual(Vector3 v1, Vector3 v2, float precision)
		{
			return default(bool);
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xFD0D90", Offset = "0xFD0D90", VA = "0xFD0D90")]
		public void addState(StatePUN2 state)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xFD152C", Offset = "0xFD152C", VA = "0xFD152C")]
		public void stopEasing()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xFCFA78", Offset = "0xFCFA78", VA = "0xFCFA78")]
		public void clearBuffer()
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xFD2794", Offset = "0xFD2794", VA = "0xFD2794")]
		[PunRPC]
		public void RpcClearBuffer()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xFD27A8", Offset = "0xFD27A8", VA = "0xFD27A8")]
		public void teleport()
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xFCF764", Offset = "0xFCF764", VA = "0xFCF764")]
		public void teleportOwnedObjectFromOwner()
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xFD27AC", Offset = "0xFD27AC", VA = "0xFD27AC")]
		public void teleportAnyObject(Vector3 newPosition, Quaternion newRotation, Vector3 newScale)
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xFD2A78", Offset = "0xFD2A78", VA = "0xFD2A78")]
		[PunRPC]
		public void RpcNonServerOwnedTeleportFromServer(Vector3 newPosition, Vector3 newRotation, Vector3 newScale)
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xFD2B60", Offset = "0xFD2B60", VA = "0xFD2B60")]
		[PunRPC]
		public void RpcTeleport(Vector3 position, Vector3 rotation, Vector3 scale, float tempOwnerTime)
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xFD2D90", Offset = "0xFD2D90", VA = "0xFD2D90")]
		private void addTeleportState(StatePUN2 teleportState)
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xFCFC1C", Offset = "0xFCFC1C", VA = "0xFCFC1C")]
		public void forceStateSendNextOnPhotonSerializeView()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xFD03EC", Offset = "0xFD03EC", VA = "0xFD03EC")]
		public bool shouldSendPosition()
		{
			return default(bool);
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xFD0508", Offset = "0xFD0508", VA = "0xFD0508")]
		public bool shouldSendRotation()
		{
			return default(bool);
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xFD0600", Offset = "0xFD0600", VA = "0xFD0600")]
		public bool shouldSendScale()
		{
			return default(bool);
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xFD0720", Offset = "0xFD0720", VA = "0xFD0720")]
		public bool shouldSendVelocity()
		{
			return default(bool);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xFD093C", Offset = "0xFD093C", VA = "0xFD093C")]
		public bool shouldSendAngularVelocity()
		{
			return default(bool);
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xFD311C", Offset = "0xFD311C", VA = "0xFD311C", Slot = "54")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xFCE84C", Offset = "0xFCE84C", VA = "0xFCE84C")]
		private void adjustOwnerTime()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xFD5290", Offset = "0xFD5290", VA = "0xFD5290")]
		public SmoothSyncPUN2()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class StatePUN2
	{
		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float ownerTimestamp;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 position;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion rotation;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 scale;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 velocity;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 angularVelocity;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool teleport;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool atPositionalRest;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool atRotationalRest;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float receivedOnServerTimestamp;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 reusableRotationVector;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool serverShouldRelayPosition;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool serverShouldRelayRotation;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool serverShouldRelayScale;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool serverShouldRelayVelocity;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool serverShouldRelayAngularVelocity;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool serverShouldRelayTeleport;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float receivedTimestamp;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int localTimeResetIndicator;

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xFCE664", Offset = "0xFCE664", VA = "0xFCE664")]
		public StatePUN2()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xFD14C0", Offset = "0xFD14C0", VA = "0xFD14C0")]
		public StatePUN2 copyFromState(StatePUN2 state)
		{
			return null;
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xFD262C", Offset = "0xFD262C", VA = "0xFD262C")]
		public static StatePUN2 Lerp(StatePUN2 targetTempState, StatePUN2 start, StatePUN2 end, float t)
		{
			return null;
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xFD0F40", Offset = "0xFD0F40", VA = "0xFD0F40")]
		public void resetTheVariables()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xFD2C4C", Offset = "0xFD2C4C", VA = "0xFD2C4C")]
		public void copyFromSmoothSync(SmoothSyncPUN2 smoothSyncScript)
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class NetworkStatePUN2
	{
		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SmoothSyncPUN2 smoothSync;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StatePUN2 state;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte positionMask;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private byte rotationMask;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private byte scaleMask;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		private byte velocityMask;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private byte angularVelocityMask;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private byte atPositionalRestMask;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		private byte atRotationalRestMask;

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xFCE66C", Offset = "0xFCE66C", VA = "0xFCE66C")]
		public NetworkStatePUN2()
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xFD4298", Offset = "0xFD4298", VA = "0xFD4298")]
		public NetworkStatePUN2(SmoothSyncPUN2 smoothSyncScript)
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xFD0AE8", Offset = "0xFD0AE8", VA = "0xFD0AE8")]
		public void copyFromSmoothSync(SmoothSyncPUN2 smoothSyncScript)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xFD363C", Offset = "0xFD363C", VA = "0xFD363C")]
		public void Serialize(BinaryWriter writer)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xFD4358", Offset = "0xFD4358", VA = "0xFD4358")]
		public void Deserialize(BinaryReader reader, SmoothSyncPUN2 smoothSync)
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xFD5568", Offset = "0xFD5568", VA = "0xFD5568")]
		private byte encodeSyncInformation(bool sendPosition, bool sendRotation, bool sendScale, bool sendVelocity, bool sendAngularVelocity, bool atPositionalRest, bool atRotationalRest)
		{
			return default(byte);
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xFD5698", Offset = "0xFD5698", VA = "0xFD5698")]
		private bool shouldSyncPosition(byte syncInformation)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xFD56A8", Offset = "0xFD56A8", VA = "0xFD56A8")]
		private bool shouldSyncRotation(byte syncInformation)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xFD56B8", Offset = "0xFD56B8", VA = "0xFD56B8")]
		private bool shouldSyncScale(byte syncInformation)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xFD56C8", Offset = "0xFD56C8", VA = "0xFD56C8")]
		private bool shouldSyncVelocity(byte syncInformation)
		{
			return default(bool);
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xFD56D8", Offset = "0xFD56D8", VA = "0xFD56D8")]
		private bool shouldSyncAngularVelocity(byte syncInformation)
		{
			return default(bool);
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xFD56E8", Offset = "0xFD56E8", VA = "0xFD56E8")]
		private bool shouldBeAtPositionalRest(byte syncInformation)
		{
			return default(bool);
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xFD56F8", Offset = "0xFD56F8", VA = "0xFD56F8")]
		private bool shouldBeAtRotationalRest(byte syncInformation)
		{
			return default(bool);
		}
	}
}
namespace System
{
	[Serializable]
	[Token(Token = "0x20002D6")]
	public struct Half : IComparable, IFormattable, IConvertible, IComparable<Half>, IEquatable<Half>
	{
		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public ushort internalValue;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Half Epsilon;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public static readonly Half MaxValue;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly Half MinValue;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public static readonly Half NaN;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Half NegativeInfinity;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public static readonly Half PositiveInfinity;

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xFD57CC", Offset = "0xFD57CC", VA = "0xFD57CC")]
		public Half(float value)
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xFD5918", Offset = "0xFD5918", VA = "0xFD5918")]
		public Half(int value)
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xFD5920", Offset = "0xFD5920", VA = "0xFD5920")]
		public Half(long value)
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xFD5928", Offset = "0xFD5928", VA = "0xFD5928")]
		public Half(double value)
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xFD5930", Offset = "0xFD5930", VA = "0xFD5930")]
		public Half(decimal value)
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xFD59A4", Offset = "0xFD59A4", VA = "0xFD59A4")]
		public Half(uint value)
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xFD59B0", Offset = "0xFD59B0", VA = "0xFD59B0")]
		public Half(ulong value)
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xFD59BC", Offset = "0xFD59BC", VA = "0xFD59BC")]
		public static Half Negate(Half half)
		{
			return default(Half);
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xFD5A74", Offset = "0xFD5A74", VA = "0xFD5A74")]
		public static Half Add(Half half1, Half half2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xFD5B74", Offset = "0xFD5B74", VA = "0xFD5B74")]
		public static Half Subtract(Half half1, Half half2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xFD5C74", Offset = "0xFD5C74", VA = "0xFD5C74")]
		public static Half Multiply(Half half1, Half half2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xFD5D74", Offset = "0xFD5D74", VA = "0xFD5D74")]
		public static Half Divide(Half half1, Half half2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xFD5E74", Offset = "0xFD5E74", VA = "0xFD5E74")]
		public static Half operator +(Half half)
		{
			return default(Half);
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xFD5A18", Offset = "0xFD5A18", VA = "0xFD5A18")]
		public static Half operator -(Half half)
		{
			return default(Half);
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xFD5ED4", Offset = "0xFD5ED4", VA = "0xFD5ED4")]
		public static Half operator ++(Half half)
		{
			return default(Half);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xFD5FBC", Offset = "0xFD5FBC", VA = "0xFD5FBC")]
		public static Half operator --(Half half)
		{
			return default(Half);
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xFD5AE0", Offset = "0xFD5AE0", VA = "0xFD5AE0")]
		public static Half operator +(Half half1, Half half2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xFD5BE0", Offset = "0xFD5BE0", VA = "0xFD5BE0")]
		public static Half operator -(Half half1, Half half2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xFD5CE0", Offset = "0xFD5CE0", VA = "0xFD5CE0")]
		public static Half operator *(Half half1, Half half2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xFD5DE0", Offset = "0xFD5DE0", VA = "0xFD5DE0")]
		public static Half operator /(Half half1, Half half2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xFD6034", Offset = "0xFD6034", VA = "0xFD6034")]
		public static bool operator ==(Half half1, Half half2)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xFD6110", Offset = "0xFD6110", VA = "0xFD6110")]
		public static bool operator !=(Half half1, Half half2)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xFD6120", Offset = "0xFD6120", VA = "0xFD6120")]
		public static bool operator <(Half half1, Half half2)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xFD61A0", Offset = "0xFD61A0", VA = "0xFD61A0")]
		public static bool operator >(Half half1, Half half2)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xFD6220", Offset = "0xFD6220", VA = "0xFD6220")]
		public static bool operator <=(Half half1, Half half2)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xFD62C0", Offset = "0xFD62C0", VA = "0xFD62C0")]
		public static bool operator >=(Half half1, Half half2)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xFD6360", Offset = "0xFD6360", VA = "0xFD6360")]
		public static implicit operator Half(byte value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xFD6384", Offset = "0xFD6384", VA = "0xFD6384")]
		public static implicit operator Half(short value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xFD63A8", Offset = "0xFD63A8", VA = "0xFD63A8")]
		public static implicit operator Half(char value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xFD63CC", Offset = "0xFD63CC", VA = "0xFD63CC")]
		public static implicit operator Half(int value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xFD63EC", Offset = "0xFD63EC", VA = "0xFD63EC")]
		public static implicit operator Half(long value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xFD5FA0", Offset = "0xFD5FA0", VA = "0xFD5FA0")]
		public static explicit operator Half(float value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xFD640C", Offset = "0xFD640C", VA = "0xFD640C")]
		public static explicit operator Half(double value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xFD642C", Offset = "0xFD642C", VA = "0xFD642C")]
		public static explicit operator Half(decimal value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xFD64A8", Offset = "0xFD64A8", VA = "0xFD64A8")]
		public static explicit operator byte(Half value)
		{
			return default(byte);
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xFD650C", Offset = "0xFD650C", VA = "0xFD650C")]
		public static explicit operator char(Half value)
		{
			return default(char);
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xFD6570", Offset = "0xFD6570", VA = "0xFD6570")]
		public static explicit operator short(Half value)
		{
			return default(short);
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xFD65DC", Offset = "0xFD65DC", VA = "0xFD65DC")]
		public static explicit operator int(Half value)
		{
			return default(int);
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xFD664C", Offset = "0xFD664C", VA = "0xFD664C")]
		public static explicit operator long(Half value)
		{
			return default(long);
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xFD5F4C", Offset = "0xFD5F4C", VA = "0xFD5F4C")]
		public static implicit operator float(Half value)
		{
			return default(float);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xFD6780", Offset = "0xFD6780", VA = "0xFD6780")]
		public static implicit operator double(Half value)
		{
			return default(double);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xFD67DC", Offset = "0xFD67DC", VA = "0xFD67DC")]
		public static explicit operator decimal(Half value)
		{
			return default(decimal);
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xFD686C", Offset = "0xFD686C", VA = "0xFD686C")]
		public static implicit operator Half(sbyte value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xFD6890", Offset = "0xFD6890", VA = "0xFD6890")]
		public static implicit operator Half(ushort value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xFD68B4", Offset = "0xFD68B4", VA = "0xFD68B4")]
		public static implicit operator Half(uint value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xFD68D8", Offset = "0xFD68D8", VA = "0xFD68D8")]
		public static implicit operator Half(ulong value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xFD68FC", Offset = "0xFD68FC", VA = "0xFD68FC")]
		public static explicit operator sbyte(Half value)
		{
			return default(sbyte);
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xFD6968", Offset = "0xFD6968", VA = "0xFD6968")]
		public static explicit operator ushort(Half value)
		{
			return default(ushort);
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xFD69CC", Offset = "0xFD69CC", VA = "0xFD69CC")]
		public static explicit operator uint(Half value)
		{
			return default(uint);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xFD6A34", Offset = "0xFD6A34", VA = "0xFD6A34")]
		public static explicit operator ulong(Half value)
		{
			return default(ulong);
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xFD6A9C", Offset = "0xFD6A9C", VA = "0xFD6A9C", Slot = "23")]
		public int CompareTo(Half other)
		{
			return default(int);
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xFD6BA8", Offset = "0xFD6BA8", VA = "0xFD6BA8", Slot = "4")]
		public int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xFD6C6C", Offset = "0xFD6C6C", VA = "0xFD6C6C", Slot = "24")]
		public bool Equals(Half other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xFD6D30", Offset = "0xFD6D30", VA = "0xFD6D30", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xFD6E10", Offset = "0xFD6E10", VA = "0xFD6E10", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xFD6E18", Offset = "0xFD6E18", VA = "0xFD6E18")]
		public TypeCode GetTypeCode()
		{
			return default(TypeCode);
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xFD6E20", Offset = "0xFD6E20", VA = "0xFD6E20")]
		public static byte[] GetBytes(Half value)
		{
			return null;
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xFD6E78", Offset = "0xFD6E78", VA = "0xFD6E78")]
		public static ushort GetBits(Half value)
		{
			return default(ushort);
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xFD6E7C", Offset = "0xFD6E7C", VA = "0xFD6E7C")]
		public static Half ToHalf(byte[] value, int startIndex)
		{
			return default(Half);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xFD6F18", Offset = "0xFD6F18", VA = "0xFD6F18")]
		public static Half ToHalf(ushort bits)
		{
			return default(Half);
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xFD6F20", Offset = "0xFD6F20", VA = "0xFD6F20")]
		public static int Sign(Half value)
		{
			return default(int);
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xFD7058", Offset = "0xFD7058", VA = "0xFD7058")]
		public static Half Abs(Half value)
		{
			return default(Half);
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xFD7108", Offset = "0xFD7108", VA = "0xFD7108")]
		public static Half Max(Half value1, Half value2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xFD717C", Offset = "0xFD717C", VA = "0xFD717C")]
		public static Half Min(Half value1, Half value2)
		{
			return default(Half);
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xFD60B0", Offset = "0xFD60B0", VA = "0xFD60B0")]
		public static bool IsNaN(Half half)
		{
			return default(bool);
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xFD7204", Offset = "0xFD7204", VA = "0xFD7204")]
		public static bool IsInfinity(Half half)
		{
			return default(bool);
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xFD7278", Offset = "0xFD7278", VA = "0xFD7278")]
		public static bool IsNegativeInfinity(Half half)
		{
			return default(bool);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xFD72E4", Offset = "0xFD72E4", VA = "0xFD72E4")]
		public static bool IsPositiveInfinity(Half half)
		{
			return default(bool);
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xFD7350", Offset = "0xFD7350", VA = "0xFD7350")]
		public static Half Parse(string value)
		{
			return default(Half);
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xFD73FC", Offset = "0xFD73FC", VA = "0xFD73FC")]
		public static Half Parse(string value, IFormatProvider provider)
		{
			return default(Half);
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xFD7490", Offset = "0xFD7490", VA = "0xFD7490")]
		public static Half Parse(string value, NumberStyles style)
		{
			return default(Half);
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xFD7554", Offset = "0xFD7554", VA = "0xFD7554")]
		public static Half Parse(string value, NumberStyles style, IFormatProvider provider)
		{
			return default(Half);
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xFD75E8", Offset = "0xFD75E8", VA = "0xFD75E8")]
		public static bool TryParse(string value, out Half result)
		{
			return default(bool);
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xFD7688", Offset = "0xFD7688", VA = "0xFD7688")]
		public static bool TryParse(string value, NumberStyles style, IFormatProvider provider, out Half result)
		{
			return default(bool);
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xFD7740", Offset = "0xFD7740", VA = "0xFD7740", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xFD77E8", Offset = "0xFD77E8", VA = "0xFD77E8")]
		public string ToString(IFormatProvider formatProvider)
		{
			return null;
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xFD7868", Offset = "0xFD7868", VA = "0xFD7868")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xFD7918", Offset = "0xFD7918", VA = "0xFD7918", Slot = "5")]
		public string ToString(string format, IFormatProvider formatProvider)
		{
			return null;
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xFD79A8", Offset = "0xFD79A8", VA = "0xFD79A8", Slot = "17")]
		private float System.IConvertible.ToSingle(IFormatProvider provider)
		{
			return default(float);
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xFD7A00", Offset = "0xFD7A00", VA = "0xFD7A00", Slot = "6")]
		private TypeCode System.IConvertible.GetTypeCode()
		{
			return default(TypeCode);
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xFD7A08", Offset = "0xFD7A08", VA = "0xFD7A08", Slot = "7")]
		private bool System.IConvertible.ToBoolean(IFormatProvider provider)
		{
			return default(bool);
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xFD7A9C", Offset = "0xFD7A9C", VA = "0xFD7A9C", Slot = "10")]
		private byte System.IConvertible.ToByte(IFormatProvider provider)
		{
			return default(byte);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xFD7B30", Offset = "0xFD7B30", VA = "0xFD7B30", Slot = "8")]
		private char System.IConvertible.ToChar(IFormatProvider provider)
		{
			return default(char);
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xFD7BDC", Offset = "0xFD7BDC", VA = "0xFD7BDC", Slot = "20")]
		private DateTime System.IConvertible.ToDateTime(IFormatProvider provider)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xFD7C88", Offset = "0xFD7C88", VA = "0xFD7C88", Slot = "19")]
		private decimal System.IConvertible.ToDecimal(IFormatProvider provider)
		{
			return default(decimal);
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xFD7D1C", Offset = "0xFD7D1C", VA = "0xFD7D1C", Slot = "18")]
		private double System.IConvertible.ToDouble(IFormatProvider provider)
		{
			return default(double);
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xFD7DB0", Offset = "0xFD7DB0", VA = "0xFD7DB0", Slot = "11")]
		private short System.IConvertible.ToInt16(IFormatProvider provider)
		{
			return default(short);
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xFD7E44", Offset = "0xFD7E44", VA = "0xFD7E44", Slot = "13")]
		private int System.IConvertible.ToInt32(IFormatProvider provider)
		{
			return default(int);
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xFD7ED8", Offset = "0xFD7ED8", VA = "0xFD7ED8", Slot = "15")]
		private long System.IConvertible.ToInt64(IFormatProvider provider)
		{
			return default(long);
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xFD7F6C", Offset = "0xFD7F6C", VA = "0xFD7F6C", Slot = "9")]
		private sbyte System.IConvertible.ToSByte(IFormatProvider provider)
		{
			return default(sbyte);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xFD8000", Offset = "0xFD8000", VA = "0xFD8000", Slot = "21")]
		private string System.IConvertible.ToString(IFormatProvider provider)
		{
			return null;
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xFD80CC", Offset = "0xFD80CC", VA = "0xFD80CC", Slot = "22")]
		private object System.IConvertible.ToType(Type conversionType, IFormatProvider provider)
		{
			return null;
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xFD819C", Offset = "0xFD819C", VA = "0xFD819C", Slot = "12")]
		private ushort System.IConvertible.ToUInt16(IFormatProvider provider)
		{
			return default(ushort);
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xFD8230", Offset = "0xFD8230", VA = "0xFD8230", Slot = "14")]
		private uint System.IConvertible.ToUInt32(IFormatProvider provider)
		{
			return default(uint);
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xFD82C4", Offset = "0xFD82C4", VA = "0xFD82C4", Slot = "16")]
		private ulong System.IConvertible.ToUInt64(IFormatProvider provider)
		{
			return default(ulong);
		}
	}
	[Token(Token = "0x20002D7")]
	public static class HalfHelper
	{
		[StructLayout(2)]
		[Token(Token = "0x20002D8")]
		private struct UIntFloat
		{
			[Token(Token = "0x400106B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public uint UIntValue;

			[Token(Token = "0x400106C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float FloatValue;
		}

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint[] mantissaTable;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static uint[] exponentTable;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ushort[] offsetTable;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static ushort[] baseTable;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static sbyte[] shiftTable;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static UIntFloat floatToIntConverter;

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xFD83F0", Offset = "0xFD83F0", VA = "0xFD83F0")]
		private static uint FloatToUInt(float v)
		{
			return default(uint);
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xFD845C", Offset = "0xFD845C", VA = "0xFD845C")]
		private static float UIntToFloat(uint v)
		{
			return default(float);
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xFD84C0", Offset = "0xFD84C0", VA = "0xFD84C0")]
		private static uint ConvertMantissa(int i)
		{
			return default(uint);
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xFD84F0", Offset = "0xFD84F0", VA = "0xFD84F0")]
		private static uint[] GenerateMantissaTable()
		{
			return null;
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xFD8604", Offset = "0xFD8604", VA = "0xFD8604")]
		private static uint[] GenerateExponentTable()
		{
			return null;
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xFD86F4", Offset = "0xFD86F4", VA = "0xFD86F4")]
		private static ushort[] GenerateOffsetTable()
		{
			return null;
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xFD87B8", Offset = "0xFD87B8", VA = "0xFD87B8")]
		private static ushort[] GenerateBaseTable()
		{
			return null;
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xFD88F8", Offset = "0xFD88F8", VA = "0xFD88F8")]
		private static sbyte[] GenerateShiftTable()
		{
			return null;
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xFD66BC", Offset = "0xFD66BC", VA = "0xFD66BC")]
		public static float HalfToSingle(Half half)
		{
			return default(float);
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xFD5834", Offset = "0xFD5834", VA = "0xFD5834")]
		public static Half SingleToHalf(float single)
		{
			return default(Half);
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xFD5708", Offset = "0xFD5708", VA = "0xFD5708")]
		public static float Decompress(ushort compressedFloat)
		{
			return default(float);
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xFD55E0", Offset = "0xFD55E0", VA = "0xFD55E0")]
		public static ushort Compress(float uncompressedFloat)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xFD5E7C", Offset = "0xFD5E7C", VA = "0xFD5E7C")]
		public static Half Negate(Half half)
		{
			return default(Half);
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xFD70B4", Offset = "0xFD70B4", VA = "0xFD70B4")]
		public static Half Abs(Half half)
		{
			return default(Half);
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xFD71F0", Offset = "0xFD71F0", VA = "0xFD71F0")]
		public static bool IsNaN(Half half)
		{
			return default(bool);
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xFD7264", Offset = "0xFD7264", VA = "0xFD7264")]
		public static bool IsInfinity(Half half)
		{
			return default(bool);
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xFD7340", Offset = "0xFD7340", VA = "0xFD7340")]
		public static bool IsPositiveInfinity(Half half)
		{
			return default(bool);
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xFD72D4", Offset = "0xFD72D4", VA = "0xFD72D4")]
		public static bool IsNegativeInfinity(Half half)
		{
			return default(bool);
		}
	}
}
namespace DentedPixel
{
	[Token(Token = "0x20002D9")]
	public class LeanDummy
	{
		[Token(Token = "0x6001230")]
		[Address(RVA = "0xFD8AF8", Offset = "0xFD8AF8", VA = "0xFD8AF8")]
		public LeanDummy()
		{
		}
	}
}
namespace DentedPixel.LTExamples
{
	[Token(Token = "0x20002DA")]
	public class PathBezier : MonoBehaviour
	{
		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] trans;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LTBezierPath cr;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject avatar1;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float iter;

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xFD8B00", Offset = "0xFD8B00", VA = "0xFD8B00")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xFD8D50", Offset = "0xFD8D50", VA = "0xFD8D50")]
		private void Start()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xFD8EE0", Offset = "0xFD8EE0", VA = "0xFD8EE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xFD8F28", Offset = "0xFD8F28", VA = "0xFD8F28")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xFD8F78", Offset = "0xFD8F78", VA = "0xFD8F78")]
		public PathBezier()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class TestingUnitTests : MonoBehaviour
	{
		[Token(Token = "0x20002E0")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass24_0
		{
			[Token(Token = "0x40010A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TestingUnitTests <>4__this;

			[Token(Token = "0x40010A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int pauseCount;

			[Token(Token = "0x40010A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject cubeRound;

			[Token(Token = "0x40010AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 onStartPos;

			[Token(Token = "0x40010AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 onStartPosSpline;

			[Token(Token = "0x40010AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public GameObject cubeSpline;

			[Token(Token = "0x40010AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public GameObject cubeSeq;

			[Token(Token = "0x40010AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public GameObject cubeBounds;

			[Token(Token = "0x40010AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool didPassBounds;

			[Token(Token = "0x40010B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 failPoint;

			[Token(Token = "0x40010B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public int setOnStartNum;

			[Token(Token = "0x40010B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public bool setPosOnUpdate;

			[Token(Token = "0x40010B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public int setPosNum;

			[Token(Token = "0x40010B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public bool hasGroupTweensCheckStarted;

			[Token(Token = "0x40010B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float previousXlt4;

			[Token(Token = "0x40010B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public bool onUpdateWasCalled;

			[Token(Token = "0x40010B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public float start;

			[Token(Token = "0x40010B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public float expectedTime;

			[Token(Token = "0x40010B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public bool didGetCorrectOnUpdate;

			[Token(Token = "0x40010BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Action <>9__13;

			[Token(Token = "0x40010BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Action<Vector3> <>9__14;

			[Token(Token = "0x40010BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public Action <>9__16;

			[Token(Token = "0x40010BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Action<object> <>9__15;

			[Token(Token = "0x6001262")]
			[Address(RVA = "0xFDD014", Offset = "0xFDD014", VA = "0xFDD014")]
			public <>c__DisplayClass24_0()
			{
			}

			[Token(Token = "0x6001263")]
			[Address(RVA = "0xFDD01C", Offset = "0xFDD01C", VA = "0xFDD01C")]
			internal void <timeBasedTesting>b__0()
			{
			}

			[Token(Token = "0x6001264")]
			[Address(RVA = "0xFDD040", Offset = "0xFDD040", VA = "0xFDD040")]
			internal void <timeBasedTesting>b__1()
			{
			}

			[Token(Token = "0x6001265")]
			[Address(RVA = "0xFDD064", Offset = "0xFDD064", VA = "0xFDD064")]
			internal void <timeBasedTesting>b__2(float val)
			{
			}

			[Token(Token = "0x6001266")]
			[Address(RVA = "0xFDD074", Offset = "0xFDD074", VA = "0xFDD074")]
			internal void <timeBasedTesting>b__3()
			{
			}

			[Token(Token = "0x6001267")]
			[Address(RVA = "0xFDD21C", Offset = "0xFDD21C", VA = "0xFDD21C")]
			internal void <timeBasedTesting>b__4()
			{
			}

			[Token(Token = "0x6001268")]
			[Address(RVA = "0xFDD67C", Offset = "0xFDD67C", VA = "0xFDD67C")]
			internal void <timeBasedTesting>b__5()
			{
			}

			[Token(Token = "0x6001269")]
			[Address(RVA = "0xFDD84C", Offset = "0xFDD84C", VA = "0xFDD84C")]
			internal void <timeBasedTesting>b__6(float val)
			{
			}

			[Token(Token = "0x600126A")]
			[Address(RVA = "0xFDD96C", Offset = "0xFDD96C", VA = "0xFDD96C")]
			internal void <timeBasedTesting>b__7()
			{
			}

			[Token(Token = "0x600126B")]
			[Address(RVA = "0xFDDC1C", Offset = "0xFDDC1C", VA = "0xFDDC1C")]
			internal void <timeBasedTesting>b__13()
			{
			}

			[Token(Token = "0x600126C")]
			[Address(RVA = "0xFDDC2C", Offset = "0xFDDC2C", VA = "0xFDDC2C")]
			internal void <timeBasedTesting>b__14(Vector3 newPosition)
			{
			}

			[Token(Token = "0x600126D")]
			[Address(RVA = "0xFDDC74", Offset = "0xFDDC74", VA = "0xFDDC74")]
			internal void <timeBasedTesting>b__15(object param)
			{
			}

			[Token(Token = "0x600126E")]
			[Address(RVA = "0xFDDF20", Offset = "0xFDDF20", VA = "0xFDDF20")]
			internal void <timeBasedTesting>b__16()
			{
			}

			[Token(Token = "0x600126F")]
			[Address(RVA = "0xFDE1B4", Offset = "0xFDE1B4", VA = "0xFDE1B4")]
			internal void <timeBasedTesting>b__8()
			{
			}

			[Token(Token = "0x6001270")]
			[Address(RVA = "0xFDE570", Offset = "0xFDE570", VA = "0xFDE570")]
			internal void <timeBasedTesting>b__9(float val)
			{
			}

			[Token(Token = "0x6001271")]
			[Address(RVA = "0xFDE57C", Offset = "0xFDE57C", VA = "0xFDE57C")]
			internal void <timeBasedTesting>b__10()
			{
			}

			[Token(Token = "0x6001272")]
			[Address(RVA = "0xFDE7F4", Offset = "0xFDE7F4", VA = "0xFDE7F4")]
			internal void <timeBasedTesting>b__11(Vector3 val)
			{
			}

			[Token(Token = "0x6001273")]
			[Address(RVA = "0xFDE830", Offset = "0xFDE830", VA = "0xFDE830")]
			internal void <timeBasedTesting>b__12()
			{
			}
		}

		[Token(Token = "0x20002E1")]
		[CompilerGenerated]
		private sealed class <timeBasedTesting>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TestingUnitTests <>4__this;

			[Token(Token = "0x40010C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass24_0 <>8__1;

			[Token(Token = "0x40010C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <descriptionMatchCount>5__2;

			[Token(Token = "0x170001C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001277")]
				[Address(RVA = "0xFE0A50", Offset = "0xFE0A50", VA = "0xFE0A50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001279")]
				[Address(RVA = "0xFE0A98", Offset = "0xFE0A98", VA = "0xFE0A98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001274")]
			[Address(RVA = "0xFDAD48", Offset = "0xFDAD48", VA = "0xFDAD48")]
			[DebuggerHidden]
			public <timeBasedTesting>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6001275")]
			[Address(RVA = "0xFDE8AC", Offset = "0xFDE8AC", VA = "0xFDE8AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001276")]
			[Address(RVA = "0xFDE8B0", Offset = "0xFDE8B0", VA = "0xFDE8B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001278")]
			[Address(RVA = "0xFE0A58", Offset = "0xFE0A58", VA = "0xFE0A58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002E2")]
		[CompilerGenerated]
		private sealed class <lotsOfCancels>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TestingUnitTests <>4__this;

			[Token(Token = "0x40010C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <cubeCount>5__2;

			[Token(Token = "0x40010C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int[] <tweensA>5__3;

			[Token(Token = "0x40010C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private GameObject[] <aGOs>5__4;

			[Token(Token = "0x40010C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int[] <tweensB>5__5;

			[Token(Token = "0x40010CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private GameObject[] <bGOs>5__6;

			[Token(Token = "0x170001C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600127D")]
				[Address(RVA = "0xFE25F8", Offset = "0xFE25F8", VA = "0xFE25F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600127F")]
				[Address(RVA = "0xFE2640", Offset = "0xFE2640", VA = "0xFE2640", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600127A")]
			[Address(RVA = "0xFE1AA0", Offset = "0xFE1AA0", VA = "0xFE1AA0")]
			[DebuggerHidden]
			public <lotsOfCancels>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x600127B")]
			[Address(RVA = "0xFE1AC8", Offset = "0xFE1AC8", VA = "0xFE1AC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600127C")]
			[Address(RVA = "0xFE1ACC", Offset = "0xFE1ACC", VA = "0xFE1ACC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600127E")]
			[Address(RVA = "0xFE2600", Offset = "0xFE2600", VA = "0xFE2600", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002E3")]
		[CompilerGenerated]
		private sealed class <pauseTimeNow>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TestingUnitTests <>4__this;

			[Token(Token = "0x170001CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001283")]
				[Address(RVA = "0xFE286C", Offset = "0xFE286C", VA = "0xFE286C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001285")]
				[Address(RVA = "0xFE28B4", Offset = "0xFE28B4", VA = "0xFE28B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001280")]
			[Address(RVA = "0xFE2648", Offset = "0xFE2648", VA = "0xFE2648")]
			[DebuggerHidden]
			public <pauseTimeNow>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001281")]
			[Address(RVA = "0xFE2670", Offset = "0xFE2670", VA = "0xFE2670", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001282")]
			[Address(RVA = "0xFE2674", Offset = "0xFE2674", VA = "0xFE2674", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001284")]
			[Address(RVA = "0xFE2874", Offset = "0xFE2874", VA = "0xFE2874", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject cube1;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject cube2;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject cube3;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject cube4;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject cubeAlpha1;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject cubeAlpha2;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool eventGameObjectWasCalled;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool eventGeneralWasCalled;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lt1Id;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LTDescr lt2;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LTDescr lt3;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private LTDescr lt4;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private LTDescr[] groupTweens;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject[] groupGOs;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int groupTweensCnt;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int rotateRepeat;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int rotateRepeatAngle;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject boxNoCollider;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float timeElapsedNormalTimeScale;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float timeElapsedIgnoreTimeScale;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool pauseTweenDidFinish;

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xFD8F80", Offset = "0xFD8F80", VA = "0xFD8F80")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xFD9068", Offset = "0xFD9068", VA = "0xFD9068")]
		private void Start()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xFDAC30", Offset = "0xFDAC30", VA = "0xFDAC30")]
		private GameObject cubeNamed(string name)
		{
			return null;
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xFDACD4", Offset = "0xFDACD4", VA = "0xFDACD4")]
		[IteratorStateMachine(typeof(<timeBasedTesting>d__24))]
		private IEnumerator timeBasedTesting()
		{
			return null;
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xFDAD70", Offset = "0xFDAD70", VA = "0xFDAD70")]
		[IteratorStateMachine(typeof(<lotsOfCancels>d__25))]
		private IEnumerator lotsOfCancels()
		{
			return null;
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xFDADE4", Offset = "0xFDADE4", VA = "0xFDADE4")]
		[IteratorStateMachine(typeof(<pauseTimeNow>d__26))]
		private IEnumerator pauseTimeNow()
		{
			return null;
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xFDAE58", Offset = "0xFDAE58", VA = "0xFDAE58")]
		private void rotateRepeatFinished()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xFDAEB4", Offset = "0xFDAEB4", VA = "0xFDAEB4")]
		private void rotateRepeatAllFinished()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xFDB0C4", Offset = "0xFDB0C4", VA = "0xFDB0C4")]
		private void eventGameObjectCalled(LTEvent e)
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xFDB0D0", Offset = "0xFDB0D0", VA = "0xFDB0D0")]
		private void eventGeneralCalled(LTEvent e)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xFDB0DC", Offset = "0xFDB0DC", VA = "0xFDB0DC")]
		public TestingUnitTests()
		{
		}
	}
}
namespace UnityTemplateProjects
{
	[Token(Token = "0x20002E4")]
	public class SimpleCameraController : MonoBehaviour
	{
		[Token(Token = "0x20002E5")]
		private class CameraState
		{
			[Token(Token = "0x40010D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yaw;

			[Token(Token = "0x40010D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pitch;

			[Token(Token = "0x40010D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float roll;

			[Token(Token = "0x40010D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float x;

			[Token(Token = "0x40010D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float y;

			[Token(Token = "0x40010DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float z;

			[Token(Token = "0x600128A")]
			[Address(RVA = "0xFE2910", Offset = "0xFE2910", VA = "0xFE2910")]
			public void SetFromTransform(Transform t)
			{
			}

			[Token(Token = "0x600128B")]
			[Address(RVA = "0xFE2E68", Offset = "0xFE2E68", VA = "0xFE2E68")]
			public void Translate(Vector3 translation)
			{
			}

			[Token(Token = "0x600128C")]
			[Address(RVA = "0xFE2EE8", Offset = "0xFE2EE8", VA = "0xFE2EE8")]
			public void LerpTowards(CameraState target, float positionLerpPct, float rotationLerpPct)
			{
			}

			[Token(Token = "0x600128D")]
			[Address(RVA = "0xFE2F70", Offset = "0xFE2F70", VA = "0xFE2F70")]
			public void UpdateTransform(Transform t)
			{
			}

			[Token(Token = "0x600128E")]
			[Address(RVA = "0xFE3194", Offset = "0xFE3194", VA = "0xFE3194")]
			public CameraState()
			{
			}
		}

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CameraState m_TargetCameraState;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CameraState m_InterpolatingCameraState;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Movement Settings")]
		[Tooltip("Exponential boost factor on translation, controllable by mouse wheel.")]
		public float boost;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.001f, 1f)]
		[Tooltip("Time it takes to interpolate camera position 99% of the way to the target.")]
		public float positionLerpTime;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Rotation Settings")]
		[Tooltip("X = Change in mouse position.\nY = Multiplicative factor for camera rotation.")]
		public AnimationCurve mouseSensitivityCurve;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time it takes to interpolate camera rotation 99% of the way to the target.")]
		[Range(0.001f, 1f)]
		public float rotationLerpTime;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Whether or not to invert our Y axis for mouse input to rotation.")]
		public bool invertY;

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xFE28BC", Offset = "0xFE28BC", VA = "0xFE28BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xFE2994", Offset = "0xFE2994", VA = "0xFE2994")]
		private Vector3 GetInputTranslationDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xFE2BC4", Offset = "0xFE2BC4", VA = "0xFE2BC4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xFE2FB8", Offset = "0xFE2FB8", VA = "0xFE2FB8")]
		public SimpleCameraController()
		{
		}
	}
}
namespace Dissonance.Integrations.PhotonUnityNetworking2
{
	[Token(Token = "0x20002E6")]
	public class PhotonClient : BaseClient<PhotonServer, PhotonClient, int>, PhotonCommsNetwork.IPhotonPacketCallback
	{
		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly PhotonCommsNetwork _network;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly RaiseEventOptions _sendOptions;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly RaiseEventOptions _sendOptionsP2P;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly List<int> _tmpDestinations;

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xFE319C", Offset = "0xFE319C", VA = "0xFE319C")]
		public PhotonClient([NotNull] PhotonCommsNetwork network)
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xFE32C4", Offset = "0xFE32C4", VA = "0xFE32C4", Slot = "8")]
		public override void Connect()
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xFE34DC", Offset = "0xFE34DC", VA = "0xFE34DC", Slot = "9")]
		public override void Disconnect()
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xFE3600", Offset = "0xFE3600", VA = "0xFE3600", Slot = "11")]
		protected override void ReadMessages()
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xFE3604", Offset = "0xFE3604", VA = "0xFE3604", Slot = "19")]
		public void PacketDelivered(byte eventcode, ArraySegment<byte> data, int senderid)
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xFE36F4", Offset = "0xFE36F4", VA = "0xFE36F4", Slot = "12")]
		protected override void SendReliable(ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xFE3828", Offset = "0xFE3828", VA = "0xFE3828", Slot = "13")]
		protected override void SendUnreliable(ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xFE3850", Offset = "0xFE3850", VA = "0xFE3850")]
		private void SendP2P([NotNull] IList<ClientInfo<int?>> destinations, ArraySegment<byte> packet, bool reliable)
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xFE3BA8", Offset = "0xFE3BA8", VA = "0xFE3BA8", Slot = "14")]
		protected override void SendReliableP2P(List<ClientInfo<int?>> destinations, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xFE3C30", Offset = "0xFE3C30", VA = "0xFE3C30", Slot = "15")]
		protected override void SendUnreliableP2P(List<ClientInfo<int?>> destinations, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xFE3CB8", Offset = "0xFE3CB8", VA = "0xFE3CB8", Slot = "16")]
		protected override void OnServerAssignedSessionId(uint session, ushort id)
		{
		}
	}
	[Token(Token = "0x20002E7")]
	[HelpURL("https://placeholder-software.co.uk/dissonance/docs/Basics/Quick-Start-Photon/")]
	public class PhotonCommsNetwork : BaseCommsNetwork<PhotonServer, PhotonClient, int, Unit, Unit>, IOnEventCallback, IInRoomCallbacks
	{
		[Token(Token = "0x20002E8")]
		internal interface IPhotonDisconnectListener
		{
			[Token(Token = "0x60012AE")]
			void PeerDisconnected([NotNull] Player photonPlayer);
		}

		[Token(Token = "0x20002E9")]
		internal interface IPhotonPacketCallback
		{
			[Token(Token = "0x60012AF")]
			void PacketDelivered(byte eventcode, ArraySegment<byte> data, int senderid);
		}

		[Token(Token = "0x20002EA")]
		private class PunPacketWrapperType
		{
			[Token(Token = "0x40010E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ArraySegment<byte> Data;

			[Token(Token = "0x60012B0")]
			[Address(RVA = "0xFE4F30", Offset = "0xFE4F30", VA = "0xFE4F30")]
			public PunPacketWrapperType()
			{
			}
		}

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public byte EventCodeToServer;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public byte EventCodeToClient;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		public byte SerializationCode;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly ConcurrentPool<PunPacketWrapperType> _packetWrappers;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly ConcurrentPool<byte[]> _byteBuffers;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly List<KeyValuePair<byte, IPhotonPacketCallback>> _packetListeners;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly HashSet<byte> _eventCodes;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly List<IPhotonDisconnectListener> _disconnectListeners;

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xFE3DD8", Offset = "0xFE3DD8", VA = "0xFE3DD8", Slot = "32")]
		protected override PhotonServer CreateServer(Unit details)
		{
			return null;
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xFE3EF0", Offset = "0xFE3EF0", VA = "0xFE3EF0", Slot = "33")]
		protected override PhotonClient CreateClient(Unit details)
		{
			return null;
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xFE3F50", Offset = "0xFE3F50", VA = "0xFE3F50", Slot = "34")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xFE40CC", Offset = "0xFE40CC", VA = "0xFE40CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xFE4124", Offset = "0xFE4124", VA = "0xFE4124", Slot = "36")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xFE41A4", Offset = "0xFE41A4", VA = "0xFE41A4")]
		internal void RegisterDisconnectListener(IPhotonDisconnectListener listener)
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xFE428C", Offset = "0xFE428C", VA = "0xFE428C")]
		internal void UnregisterDisconnectListener(IPhotonDisconnectListener listener)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xFE4348", Offset = "0xFE4348", VA = "0xFE4348", Slot = "38")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xFE434C", Offset = "0xFE434C", VA = "0xFE434C", Slot = "40")]
		private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xFE4350", Offset = "0xFE4350", VA = "0xFE4350", Slot = "41")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xFE4354", Offset = "0xFE4354", VA = "0xFE4354", Slot = "42")]
		private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched([NotNull] Player newMasterClient)
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xFE43F0", Offset = "0xFE43F0", VA = "0xFE43F0", Slot = "39")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom([NotNull] Player otherPlayer)
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xFE44FC", Offset = "0xFE44FC", VA = "0xFE44FC", Slot = "35")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xFE469C", Offset = "0xFE469C", VA = "0xFE469C", Slot = "37")]
		private void Photon.Realtime.IOnEventCallback.OnEvent([NotNull] EventData photonEvent)
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xFE3324", Offset = "0xFE3324", VA = "0xFE3324")]
		internal void RegisterPacketListener(byte eventCode, IPhotonPacketCallback listener)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xFE3538", Offset = "0xFE3538", VA = "0xFE3538")]
		internal void UnregisterPacketListener(IPhotonPacketCallback listener)
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xFE371C", Offset = "0xFE371C", VA = "0xFE371C")]
		internal void Send(ArraySegment<byte> data, byte eventCode, RaiseEventOptions options, bool reliable)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xFE4904", Offset = "0xFE4904", VA = "0xFE4904")]
		[NotNull]
		private object Deserialize([NotNull] StreamBuffer instream, short length)
		{
			return null;
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xFE4A58", Offset = "0xFE4A58", VA = "0xFE4A58")]
		private short Serialize([NotNull] StreamBuffer outstream, [NotNull] object customobject)
		{
			return default(short);
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xFE4BF0", Offset = "0xFE4BF0", VA = "0xFE4BF0")]
		public PhotonCommsNetwork()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class PhotonPlayer : MonoBehaviourPunCallbacks, IDissonancePlayer, IPunInstantiateMagicCallback
	{
		[Token(Token = "0x20002ED")]
		[CompilerGenerated]
		private sealed class <InitializeCoroutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PhotonPlayer <>4__this;

			[Token(Token = "0x40010F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PhotonMessageInfo info;

			[Token(Token = "0x170001D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012CD")]
				[Address(RVA = "0xFE5DB8", Offset = "0xFE5DB8", VA = "0xFE5DB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012CF")]
				[Address(RVA = "0xFE5E00", Offset = "0xFE5E00", VA = "0xFE5E00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012CA")]
			[Address(RVA = "0xFE5654", Offset = "0xFE5654", VA = "0xFE5654")]
			[DebuggerHidden]
			public <InitializeCoroutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60012CB")]
			[Address(RVA = "0xFE5B74", Offset = "0xFE5B74", VA = "0xFE5B74", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012CC")]
			[Address(RVA = "0xFE5B78", Offset = "0xFE5B78", VA = "0xFE5B78", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012CE")]
			[Address(RVA = "0xFE5DC0", Offset = "0xFE5DC0", VA = "0xFE5DC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002EE")]
		[CompilerGenerated]
		private sealed class <StartTrackingCo>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PhotonPlayer <>4__this;

			[Token(Token = "0x170001D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012D3")]
				[Address(RVA = "0xFE5F60", Offset = "0xFE5F60", VA = "0xFE5F60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012D5")]
				[Address(RVA = "0xFE5FA8", Offset = "0xFE5FA8", VA = "0xFE5FA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012D0")]
			[Address(RVA = "0xFE5AA8", Offset = "0xFE5AA8", VA = "0xFE5AA8")]
			[DebuggerHidden]
			public <StartTrackingCo>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x60012D1")]
			[Address(RVA = "0xFE5E08", Offset = "0xFE5E08", VA = "0xFE5E08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012D2")]
			[Address(RVA = "0xFE5E0C", Offset = "0xFE5E0C", VA = "0xFE5E0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012D4")]
			[Address(RVA = "0xFE5F68", Offset = "0xFE5F68", VA = "0xFE5F68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DissonanceComms _comms;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine _startCo;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _transform;

		[Token(Token = "0x170001CC")]
		public bool IsTracking
		{
			[Token(Token = "0x60012B5")]
			[Address(RVA = "0xFE5050", Offset = "0xFE5050", VA = "0xFE5050", Slot = "58")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012B6")]
			[Address(RVA = "0xFE5058", Offset = "0xFE5058", VA = "0xFE5058")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public string PlayerId
		{
			[Token(Token = "0x60012B7")]
			[Address(RVA = "0xFE5064", Offset = "0xFE5064", VA = "0xFE5064", Slot = "54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B8")]
			[Address(RVA = "0xFE506C", Offset = "0xFE506C", VA = "0xFE506C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		private Transform Transform
		{
			[Token(Token = "0x60012B9")]
			[Address(RVA = "0xFE5074", Offset = "0xFE5074", VA = "0xFE5074")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CF")]
		public Vector3 Position
		{
			[Token(Token = "0x60012BA")]
			[Address(RVA = "0xFE5108", Offset = "0xFE5108", VA = "0xFE5108", Slot = "55")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001D0")]
		public Quaternion Rotation
		{
			[Token(Token = "0x60012BB")]
			[Address(RVA = "0xFE5124", Offset = "0xFE5124", VA = "0xFE5124", Slot = "56")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x170001D1")]
		public NetworkPlayerType Type
		{
			[Token(Token = "0x60012BC")]
			[Address(RVA = "0xFE5140", Offset = "0xFE5140", VA = "0xFE5140", Slot = "57")]
			get
			{
				return default(NetworkPlayerType);
			}
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xFE51E4", Offset = "0xFE51E4", VA = "0xFE51E4", Slot = "59")]
		private void Photon.Pun.IPunInstantiateMagicCallback.OnPhotonInstantiate(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xFE550C", Offset = "0xFE550C", VA = "0xFE550C")]
		public void Initialize(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xFE55B8", Offset = "0xFE55B8", VA = "0xFE55B8")]
		[IteratorStateMachine(typeof(<InitializeCoroutine>d__22))]
		private IEnumerator InitializeCoroutine(PhotonMessageInfo info)
		{
			return null;
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xFE567C", Offset = "0xFE567C", VA = "0xFE567C")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xFE5750", Offset = "0xFE5750", VA = "0xFE5750", Slot = "28")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xFE5834", Offset = "0xFE5834", VA = "0xFE5834", Slot = "29")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xFE5988", Offset = "0xFE5988", VA = "0xFE5988")]
		private void CheckMute()
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xFE53BC", Offset = "0xFE53BC", VA = "0xFE53BC")]
		[PunRPC]
		private void SetPlayerName(string playerName)
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xFE577C", Offset = "0xFE577C", VA = "0xFE577C")]
		private void StartTracking()
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xFE5A34", Offset = "0xFE5A34", VA = "0xFE5A34")]
		[IteratorStateMachine(typeof(<StartTrackingCo>d__29))]
		private IEnumerator StartTrackingCo()
		{
			return null;
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xFE585C", Offset = "0xFE585C", VA = "0xFE585C")]
		private void StopTracking()
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xFE5AD0", Offset = "0xFE5AD0", VA = "0xFE5AD0")]
		public PhotonPlayer()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class PhotonServer : BaseServer<PhotonServer, PhotonClient, int>, PhotonCommsNetwork.IPhotonPacketCallback, PhotonCommsNetwork.IPhotonDisconnectListener
	{
		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly PhotonCommsNetwork _network;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly Dictionary<int, RaiseEventOptions> _sendOptions;

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xFE3E38", Offset = "0xFE3E38", VA = "0xFE3E38")]
		public PhotonServer(PhotonCommsNetwork network)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xFE5FB0", Offset = "0xFE5FB0", VA = "0xFE5FB0", Slot = "9")]
		public override void Connect()
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xFE6020", Offset = "0xFE6020", VA = "0xFE6020", Slot = "10")]
		public override void Disconnect()
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xFE608C", Offset = "0xFE608C", VA = "0xFE608C", Slot = "16")]
		protected override void ReadMessages()
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xFE6090", Offset = "0xFE6090", VA = "0xFE6090", Slot = "18")]
		public void PacketDelivered(byte eventcode, ArraySegment<byte> data, int senderid)
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xFE6130", Offset = "0xFE6130", VA = "0xFE6130")]
		private RaiseEventOptions GetOptions(int connection)
		{
			return null;
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xFE6314", Offset = "0xFE6314", VA = "0xFE6314", Slot = "12")]
		protected override void SendReliable(int connection, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xFE6364", Offset = "0xFE6364", VA = "0xFE6364", Slot = "13")]
		protected override void SendUnreliable(int connection, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xFE63B4", Offset = "0xFE63B4", VA = "0xFE63B4", Slot = "19")]
		private void Dissonance.Integrations.PhotonUnityNetworking2.PhotonCommsNetwork.IPhotonDisconnectListener.PeerDisconnected(Player peer)
		{
		}
	}
}
namespace Dissonance.Integrations.PhotonUnityNetworking2.Demo
{
	[Token(Token = "0x20002F0")]
	public class PlayerSpawner : MonoBehaviour
	{
		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UsedImplicitly]
		public GameObject ObjectToSpawn;

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xFE640C", Offset = "0xFE640C", VA = "0xFE640C")]
		[UsedImplicitly]
		private void Start()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xFE65B4", Offset = "0xFE65B4", VA = "0xFE65B4")]
		public PlayerSpawner()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public class Pun2MenuController : MonoBehaviourPunCallbacks, ILobbyCallbacks, IMatchmakingCallbacks
	{
		[Token(Token = "0x20002F2")]
		private enum State
		{
			[Token(Token = "0x4001100")]
			Connecting,
			[Token(Token = "0x4001101")]
			ServerList,
			[Token(Token = "0x4001102")]
			JoiningRoom,
			[Token(Token = "0x4001103")]
			CreatingRoom,
			[Token(Token = "0x4001104")]
			InRoom
		}

		[Token(Token = "0x20002F3")]
		[CompilerGenerated]
		private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Pun2MenuController <>4__this;

			[Token(Token = "0x170001D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012F0")]
				[Address(RVA = "0xFE7974", Offset = "0xFE7974", VA = "0xFE7974", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012F2")]
				[Address(RVA = "0xFE79BC", Offset = "0xFE79BC", VA = "0xFE79BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012ED")]
			[Address(RVA = "0xFE6714", Offset = "0xFE6714", VA = "0xFE6714")]
			[DebuggerHidden]
			public <Start>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60012EE")]
			[Address(RVA = "0xFE783C", Offset = "0xFE783C", VA = "0xFE783C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012EF")]
			[Address(RVA = "0xFE7840", Offset = "0xFE7840", VA = "0xFE7840", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012F1")]
			[Address(RVA = "0xFE797C", Offset = "0xFE797C", VA = "0xFE797C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string _guiCreateNamedRoomName;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<RoomInfo> _rooms;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private State _state;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public string SceneName;

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xFE65BC", Offset = "0xFE65BC", VA = "0xFE65BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xFE66A0", Offset = "0xFE66A0", VA = "0xFE66A0")]
		[IteratorStateMachine(typeof(<Start>d__6))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xFE673C", Offset = "0xFE673C", VA = "0xFE673C", Slot = "28")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xFE67A0", Offset = "0xFE67A0", VA = "0xFE67A0", Slot = "29")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xFE6804", Offset = "0xFE6804", VA = "0xFE6804", Slot = "24")]
		private void Photon.Realtime.ILobbyCallbacks.OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xFE688C", Offset = "0xFE688C", VA = "0xFE688C", Slot = "15")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xFE6928", Offset = "0xFE6928", VA = "0xFE6928", Slot = "14")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xFE69C4", Offset = "0xFE69C4", VA = "0xFE69C4", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xFE6A54", Offset = "0xFE6A54", VA = "0xFE6A54")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xFE75D0", Offset = "0xFE75D0", VA = "0xFE75D0")]
		private void InRoomGUI()
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xFE6DE4", Offset = "0xFE6DE4", VA = "0xFE6DE4")]
		private void ServerListGUI()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xFE7748", Offset = "0xFE7748", VA = "0xFE7748")]
		public Pun2MenuController()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class Pun2PlayerController : MonoBehaviourPunCallbacks, IPunObservable
	{
		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 _correctPlayerPos;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion _correctPlayerRot;

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xFE79C4", Offset = "0xFE79C4", VA = "0xFE79C4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xFE79DC", Offset = "0xFE79DC", VA = "0xFE79DC")]
		private void UpdateControl()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xFE7C44", Offset = "0xFE7C44", VA = "0xFE7C44")]
		private void UpdatePhoton()
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xFE7DD8", Offset = "0xFE7DD8", VA = "0xFE7DD8", Slot = "54")]
		private void Photon.Pun.IPunObservable.OnPhotonSerializeView([NotNull] PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xFE7F40", Offset = "0xFE7F40", VA = "0xFE7F40")]
		public Pun2PlayerController()
		{
		}
	}
}
namespace Dissonance.Integrations.Offline
{
	[Token(Token = "0x20002F5")]
	public class OfflineCommsNetwork : MonoBehaviour, ICommsNetwork
	{
		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _loopbackActive;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _sentStartedSpeakingEvent;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private uint _loopbackSequenceNumber;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<RemoteChannel> _loopbackChannels;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Queue<byte[]> _bufferPool;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Queue<VoicePacket> _loopbackQueue;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _playerJoined;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private CodecSettings? _codecSettings;

		[Token(Token = "0x170001D8")]
		public int LoopbackPacketCount
		{
			[Token(Token = "0x60012F8")]
			[Address(RVA = "0xFE7F48", Offset = "0xFE7F48", VA = "0xFE7F48")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012F9")]
			[Address(RVA = "0xFE7F50", Offset = "0xFE7F50", VA = "0xFE7F50")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D9")]
		public ConnectionStatus Status
		{
			[Token(Token = "0x60012FA")]
			[Address(RVA = "0xFE7F58", Offset = "0xFE7F58", VA = "0xFE7F58", Slot = "4")]
			get
			{
				return default(ConnectionStatus);
			}
		}

		[Token(Token = "0x170001DA")]
		public NetworkMode Mode
		{
			[Token(Token = "0x60012FE")]
			[Address(RVA = "0xFE8258", Offset = "0xFE8258", VA = "0xFE8258", Slot = "8")]
			get
			{
				return default(NetworkMode);
			}
		}

		[Token(Token = "0x1400001B")]
		public event Action<string, CodecSettings> PlayerJoined
		{
			[Token(Token = "0x60012FF")]
			[Address(RVA = "0xFE8260", Offset = "0xFE8260", VA = "0xFE8260", Slot = "9")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001300")]
			[Address(RVA = "0xFE8310", Offset = "0xFE8310", VA = "0xFE8310", Slot = "10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event Action<VoicePacket> VoicePacketReceived
		{
			[Token(Token = "0x6001301")]
			[Address(RVA = "0xFE83C0", Offset = "0xFE83C0", VA = "0xFE83C0", Slot = "13")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001302")]
			[Address(RVA = "0xFE8470", Offset = "0xFE8470", VA = "0xFE8470", Slot = "14")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event Action<string> PlayerStartedSpeaking
		{
			[Token(Token = "0x6001303")]
			[Address(RVA = "0xFE8520", Offset = "0xFE8520", VA = "0xFE8520", Slot = "17")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001304")]
			[Address(RVA = "0xFE85D0", Offset = "0xFE85D0", VA = "0xFE85D0", Slot = "18")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event Action<string> PlayerStoppedSpeaking
		{
			[Token(Token = "0x6001305")]
			[Address(RVA = "0xFE8680", Offset = "0xFE8680", VA = "0xFE8680", Slot = "19")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001306")]
			[Address(RVA = "0xFE8730", Offset = "0xFE8730", VA = "0xFE8730", Slot = "20")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public event Action<NetworkMode> ModeChanged
		{
			[Token(Token = "0x6001307")]
			[Address(RVA = "0xFE87E0", Offset = "0xFE87E0", VA = "0xFE87E0", Slot = "6")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001308")]
			[Address(RVA = "0xFE8890", Offset = "0xFE8890", VA = "0xFE8890", Slot = "7")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000020")]
		public event Action<string> PlayerLeft
		{
			[Token(Token = "0x6001309")]
			[Address(RVA = "0xFE8940", Offset = "0xFE8940", VA = "0xFE8940", Slot = "11")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600130A")]
			[Address(RVA = "0xFE89F0", Offset = "0xFE89F0", VA = "0xFE89F0", Slot = "12")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000021")]
		public event Action<TextMessage> TextPacketReceived
		{
			[Token(Token = "0x600130B")]
			[Address(RVA = "0xFE8AA0", Offset = "0xFE8AA0", VA = "0xFE8AA0", Slot = "15")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600130C")]
			[Address(RVA = "0xFE8B50", Offset = "0xFE8B50", VA = "0xFE8B50", Slot = "16")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public event Action<RoomEvent> PlayerEnteredRoom
		{
			[Token(Token = "0x600130D")]
			[Address(RVA = "0xFE8C00", Offset = "0xFE8C00", VA = "0xFE8C00", Slot = "21")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600130E")]
			[Address(RVA = "0xFE8CB0", Offset = "0xFE8CB0", VA = "0xFE8CB0", Slot = "22")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event Action<RoomEvent> PlayerExitedRoom
		{
			[Token(Token = "0x600130F")]
			[Address(RVA = "0xFE8D60", Offset = "0xFE8D60", VA = "0xFE8D60", Slot = "23")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001310")]
			[Address(RVA = "0xFE8E10", Offset = "0xFE8E10", VA = "0xFE8E10", Slot = "24")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xFE7F60", Offset = "0xFE7F60", VA = "0xFE7F60", Slot = "5")]
		public void Initialize(string playerName, Rooms rooms, PlayerChannels playerChannels, RoomChannels roomChannels, CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xFE81B8", Offset = "0xFE81B8", VA = "0xFE81B8")]
		private void BeginLoopback(string channel, ChannelProperties props)
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xFE81C4", Offset = "0xFE81C4", VA = "0xFE81C4")]
		private void EndLoopback(string channel, ChannelProperties props)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xFE8EC0", Offset = "0xFE8EC0", VA = "0xFE8EC0", Slot = "25")]
		public void SendVoice(ArraySegment<byte> data)
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xFE9044", Offset = "0xFE9044", VA = "0xFE9044", Slot = "26")]
		public void SendText([CanBeNull] string data, ChannelType recipientType, string recipientId)
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xFE9048", Offset = "0xFE9048", VA = "0xFE9048")]
		private void Update()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xFE9070", Offset = "0xFE9070", VA = "0xFE9070")]
		private void JoinFakePlayer()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xFE911C", Offset = "0xFE911C", VA = "0xFE911C")]
		private void PumpLoopback()
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xFE92A4", Offset = "0xFE92A4", VA = "0xFE92A4")]
		public OfflineCommsNetwork()
		{
		}
	}
}
namespace BNG
{
	[Token(Token = "0x20002F6")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(HandPoser))]
	public class AutoPoser : MonoBehaviour
	{
		[Token(Token = "0x20002F7")]
		[CompilerGenerated]
		private sealed class <updateAutoPoseRoutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoPoser <>4__this;

			[Token(Token = "0x170001DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001330")]
				[Address(RVA = "0xFEADD0", Offset = "0xFEADD0", VA = "0xFEADD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001332")]
				[Address(RVA = "0xFEAE18", Offset = "0xFEAE18", VA = "0xFEAE18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600132D")]
			[Address(RVA = "0xFE9B84", Offset = "0xFE9B84", VA = "0xFE9B84")]
			[DebuggerHidden]
			public <updateAutoPoseRoutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x600132E")]
			[Address(RVA = "0xFEAD08", Offset = "0xFEAD08", VA = "0xFEAD08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600132F")]
			[Address(RVA = "0xFEAD0C", Offset = "0xFEAD0C", VA = "0xFEAD0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001331")]
			[Address(RVA = "0xFEADD8", Offset = "0xFEADD8", VA = "0xFEADD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("(Required) A HandPose in the fully open position. AutoPose will lerp each finger joint between OpenHandPose and ClosedHandPose until contact is made at each finger tip.")]
		[Header("Auto Pose Settings")]
		public HandPose OpenHandPose;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Required) A HandPose in the fully closed position. AutoPose will lerp each finger between OpenHandPose and ClosedHandPose until contact is made at each finger tip.")]
		public HandPose ClosedHandPose;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 0.02f)]
		[Header("Finger Tip Collision")]
		[Tooltip("Radius (in meters) of the fingertips to use when checking for collisions during auto-posing. Only used if a FingerTipCollider is not defined. (Default : 0.00875)")]
		public float FingerTipRadius;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider ThumbCollider;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider IndexFingerCollider;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider MiddleFingerCollider;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider RingFingerCollider;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider PinkyFingerCollider;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Continuous Update")]
		[Tooltip("If true the hand will auto pose in Update(). Also works in the editor.")]
		public bool UpdateContinuously;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("(Optional) The HandPose to use when UpdateContinuously = true and no collisions have been detected. If not specified, the hand will make a ClosedHandPose shape when no collisions have been found.")]
		public HandPose IdleHandPose;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LayerMask CollisionLayerMask;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Editor Gizmos")]
		public bool ShowGizmos;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GizmoDisplayType GizmoType;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color GizmoColor;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public HandPoser InspectedPose;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HandPoseDefinition currentPose;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HandPoseDefinition tempPose;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private HandPoseDefinition collisionPose;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _count;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool _thumbHit;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool _indexHit;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool _middleHit;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		private bool _ringHit;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _pinkyHit;

		[Token(Token = "0x170001DB")]
		public HandPoseDefinition CollisionPose
		{
			[Token(Token = "0x6001317")]
			[Address(RVA = "0xFE93D0", Offset = "0xFE93D0", VA = "0xFE93D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DC")]
		public bool CollisionDetected
		{
			[Token(Token = "0x6001318")]
			[Address(RVA = "0xFE93D8", Offset = "0xFE93D8", VA = "0xFE93D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xFE9410", Offset = "0xFE9410", VA = "0xFE9410")]
		private void Start()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xFE94C0", Offset = "0xFE94C0", VA = "0xFE94C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xFE9714", Offset = "0xFE9714", VA = "0xFE9714")]
		private void Update()
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xFE9A90", Offset = "0xFE9A90", VA = "0xFE9A90", Slot = "4")]
		public virtual void UpdateAutoPose(bool lerp)
		{
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xFE9AF0", Offset = "0xFE9AF0", VA = "0xFE9AF0", Slot = "5")]
		public virtual void UpdateAutoPoseOnce()
		{
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xFE9B10", Offset = "0xFE9B10", VA = "0xFE9B10")]
		[IteratorStateMachine(typeof(<updateAutoPoseRoutine>d__33))]
		private IEnumerator updateAutoPoseRoutine()
		{
			return null;
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xFE9838", Offset = "0xFE9838", VA = "0xFE9838")]
		public HandPoseDefinition GetAutoPose()
		{
			return null;
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xFE9BAC", Offset = "0xFE9BAC", VA = "0xFE9BAC")]
		public HandPoseDefinition CopyHandDefinition(HandPoseDefinition ToCopy)
		{
			return null;
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xFEA2C8", Offset = "0xFEA2C8", VA = "0xFEA2C8")]
		public FingerJoint GetJointCopy(FingerJoint ToClone)
		{
			return null;
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xFEA180", Offset = "0xFEA180", VA = "0xFEA180")]
		public List<FingerJoint> GetJointsCopy(List<FingerJoint> ToClone)
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xFE9CDC", Offset = "0xFE9CDC", VA = "0xFE9CDC")]
		public bool GetThumbHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xFE9DC8", Offset = "0xFE9DC8", VA = "0xFE9DC8")]
		public bool GetIndexHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xFE9EB4", Offset = "0xFE9EB4", VA = "0xFE9EB4")]
		public bool GetMiddleHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xFE9FA0", Offset = "0xFE9FA0", VA = "0xFE9FA0")]
		public bool GetRingHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xFEA08C", Offset = "0xFEA08C", VA = "0xFEA08C")]
		public bool GetPinkyHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xFEA5A8", Offset = "0xFEA5A8", VA = "0xFEA5A8", Slot = "6")]
		public virtual bool LoopThroughJoints(List<Transform> fromJoints, List<FingerJoint> toJoints, Vector3 tipPosition, float tipRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xFEA930", Offset = "0xFEA930", VA = "0xFEA930", Slot = "7")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xFEA9B8", Offset = "0xFEA9B8", VA = "0xFEA9B8")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xFEAB98", Offset = "0xFEAB98", VA = "0xFEAB98")]
		public void DrawJointGizmo(FingerTipCollider tipCollider, Vector3 defaultPosition, float radius, GizmoDisplayType gizmoType)
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xFEACC4", Offset = "0xFEACC4", VA = "0xFEACC4")]
		public AutoPoser()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public enum GizmoDisplayType
	{
		[Token(Token = "0x4001138")]
		Wire,
		[Token(Token = "0x4001139")]
		Solid,
		[Token(Token = "0x400113A")]
		None
	}
	[Token(Token = "0x20002F9")]
	public class BoneMapping : MonoBehaviour
	{
		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float Weight;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoneObject[] Fingers;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowGizmos;

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xFEAE20", Offset = "0xFEAE20", VA = "0xFEAE20")]
		private void Update()
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xFEB0C8", Offset = "0xFEB0C8", VA = "0xFEB0C8")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xFEB524", Offset = "0xFEB524", VA = "0xFEB524")]
		public BoneMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FA")]
	public class BoneObject
	{
		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] targetBones;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] destinationBones;

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xFEB53C", Offset = "0xFEB53C", VA = "0xFEB53C")]
		public BoneObject()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class EditorHandle : MonoBehaviour
	{
		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowTransformName;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Radius;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color BaseColor;

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xFEB5BC", Offset = "0xFEB5BC", VA = "0xFEB5BC")]
		public EditorHandle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FC")]
	public class FingerJoint
	{
		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string TransformName;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Vector3 LocalPosition;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Quaternion LocalRotation;

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xFEA35C", Offset = "0xFEA35C", VA = "0xFEA35C")]
		public FingerJoint()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public class FingerTipCollider : MonoBehaviour
	{
		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Radius (in meters) of the fingertip to use when checking for collisions during auto-posing. (Default : 0.00875)")]
		[Range(0f, 0.02f)]
		public float Radius;

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xFEB5DC", Offset = "0xFEB5DC", VA = "0xFEB5DC")]
		public FingerTipCollider()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FE")]
	public class HandPose : ScriptableObject
	{
		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose Name")]
		public string PoseName;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("Joint Definitions")]
		public HandPoseDefinition Joints;

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xFEB5F0", Offset = "0xFEB5F0", VA = "0xFEB5F0")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class HandPoseBlender : MonoBehaviour
	{
		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Run in Update")]
		[Tooltip("If true the HandPoser will be updated in Update by reading ThumbValue, IndexValue, and GripValue")]
		public bool UpdatePose;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Required) Blend from this hand pose to the Pose2 hand pose.")]
		[Header("Blend From / To")]
		public HandPose Pose1;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Required) Blend from the Pose1 hand pose to this hand pose.")]
		public HandPose Pose2;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[Header("Inputs")]
		public float ThumbValue;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float IndexValue;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float MiddleValue;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float RingValue;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float PinkyValue;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float GripValue;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _lastGripValue;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected HandPoser handPoser;

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xFEB5F8", Offset = "0xFEB5F8", VA = "0xFEB5F8")]
		private void Start()
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xFEB650", Offset = "0xFEB650", VA = "0xFEB650")]
		private void Update()
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xFEB668", Offset = "0xFEB668", VA = "0xFEB668", Slot = "4")]
		public virtual void UpdatePoseFromInputs()
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xFEB674", Offset = "0xFEB674", VA = "0xFEB674")]
		public void UpdateThumb(float amount)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xFEB6AC", Offset = "0xFEB6AC", VA = "0xFEB6AC")]
		public void UpdateIndex(float amount)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xFEB6E4", Offset = "0xFEB6E4", VA = "0xFEB6E4")]
		public void UpdateMiddle(float amount)
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xFEB724", Offset = "0xFEB724", VA = "0xFEB724")]
		public void UpdateRing(float amount)
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xFEB75C", Offset = "0xFEB75C", VA = "0xFEB75C")]
		public void UpdatePinky(float amount)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xFEB794", Offset = "0xFEB794", VA = "0xFEB794")]
		public void UpdateGrip(float amount)
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xFEB7D8", Offset = "0xFEB7D8", VA = "0xFEB7D8", Slot = "5")]
		public virtual void DoIdleBlendPose()
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xFEB8B8", Offset = "0xFEB8B8", VA = "0xFEB8B8")]
		public HandPoseBlender()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000300")]
	public class HandPoseDefinition
	{
		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Header("Wrist")]
		public FingerJoint WristJoint;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Thumb")]
		public List<FingerJoint> ThumbJoints;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Index")]
		[SerializeField]
		public List<FingerJoint> IndexJoints;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Header("Middle")]
		public List<FingerJoint> MiddleJoints;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Ring")]
		[SerializeField]
		public List<FingerJoint> RingJoints;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("Pinky")]
		public List<FingerJoint> PinkyJoints;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Other")]
		[SerializeField]
		public List<FingerJoint> OtherJoints;

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xFEA178", Offset = "0xFEA178", VA = "0xFEA178")]
		public HandPoseDefinition()
		{
		}
	}
	[Token(Token = "0x2000301")]
	[ExecuteInEditMode]
	public class HandPoser : MonoBehaviour
	{
		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Path of the directory where handposes should be stored. Tip : Keep these in a 'Resources' directory so you can use Resources.Load().")]
		public string ResourcePath;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string PoseName;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The currently selected hand pose. Change this to automatically update the pose in Update")]
		public HandPose CurrentPose;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Animation Properties")]
		[Tooltip("The speed at which to lerp the bones when changing hand poses")]
		public float AnimationSpeed;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If true the local rotation of each bone will be updated while changing hand poses. This should generally be true if you are adjusting a hand pose.")]
		public bool UpdateJointRotations;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[Tooltip("If true the local position of each bone will be updated while changing hand poses. Typically this will be false as joints only adjust their rotations.")]
		public bool UpdateJointPositions;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[Tooltip("If true the local position of the wrist will be updated. Useful if you need to move the entire hand.")]
		public bool UpdateWristPosition;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform WristJoint;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Transform> ThumbJoints;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Transform> IndexJoints;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Transform> MiddleJoints;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Transform> RingJoints;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Transform> PinkyJoints;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Transform> OtherJoints;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HandPose previousPose;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool doSingleAnimation;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool ContinuousUpdate;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float editorAnimationTime;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float maxEditorAnimationTime;

		[Token(Token = "0x170001DF")]
		public HandPoseDefinition HandPoseJoints
		{
			[Token(Token = "0x6001347")]
			[Address(RVA = "0xFEB8C8", Offset = "0xFEB8C8", VA = "0xFEB8C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xFEB8D4", Offset = "0xFEB8D4", VA = "0xFEB8D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xFEB8F4", Offset = "0xFEB8F4", VA = "0xFEB8F4")]
		private void Update()
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xFEB930", Offset = "0xFEB930", VA = "0xFEB930")]
		public void CheckForPoseChange()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xFEB8E4", Offset = "0xFEB8E4", VA = "0xFEB8E4")]
		public void OnPoseChanged()
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xFEBA84", Offset = "0xFEBA84", VA = "0xFEBA84")]
		public FingerJoint GetWristJoint()
		{
			return null;
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xFEBA94", Offset = "0xFEBA94", VA = "0xFEBA94")]
		public List<FingerJoint> GetThumbJoints()
		{
			return null;
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xFEBAA4", Offset = "0xFEBAA4", VA = "0xFEBAA4")]
		public List<FingerJoint> GetIndexJoints()
		{
			return null;
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xFEBAB4", Offset = "0xFEBAB4", VA = "0xFEBAB4")]
		public List<FingerJoint> GetMiddleJoints()
		{
			return null;
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xFEBAC4", Offset = "0xFEBAC4", VA = "0xFEBAC4")]
		public List<FingerJoint> GetRingJoints()
		{
			return null;
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xFEBAD4", Offset = "0xFEBAD4", VA = "0xFEBAD4")]
		public List<FingerJoint> GetPinkyJoints()
		{
			return null;
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xFEBAE4", Offset = "0xFEBAE4", VA = "0xFEBAE4")]
		public List<FingerJoint> GetOtherJoints()
		{
			return null;
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xFEBAF4", Offset = "0xFEBAF4", VA = "0xFEBAF4")]
		public int GetTotalJointsCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xFEBBE4", Offset = "0xFEBBE4", VA = "0xFEBBE4")]
		public Transform GetTip(List<Transform> transforms)
		{
			return null;
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xFEBC54", Offset = "0xFEBC54", VA = "0xFEBC54")]
		public Transform GetThumbTip()
		{
			return null;
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xFEBC5C", Offset = "0xFEBC5C", VA = "0xFEBC5C")]
		public Transform GetIndexTip()
		{
			return null;
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xFEBC64", Offset = "0xFEBC64", VA = "0xFEBC64")]
		public Transform GetMiddleTip()
		{
			return null;
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xFEBC6C", Offset = "0xFEBC6C", VA = "0xFEBC6C")]
		public Transform GetRingTip()
		{
			return null;
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xFEBC74", Offset = "0xFEBC74", VA = "0xFEBC74")]
		public Transform GetPinkyTip()
		{
			return null;
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xFEA364", Offset = "0xFEA364", VA = "0xFEA364")]
		public static Vector3 GetFingerTipPositionWithOffset(List<Transform> jointTransforms, float tipRadius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xFEBC7C", Offset = "0xFEBC7C", VA = "0xFEBC7C", Slot = "4")]
		public virtual List<FingerJoint> GetJointsFromTransforms(List<Transform> jointTransforms)
		{
			return null;
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xFEBE34", Offset = "0xFEBE34", VA = "0xFEBE34", Slot = "5")]
		public virtual FingerJoint GetJointFromTransform(Transform jointTransform)
		{
			return null;
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xFEBF18", Offset = "0xFEBF18", VA = "0xFEBF18", Slot = "6")]
		public virtual void UpdateHandPose(HandPose handPose, bool lerp)
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xFEBF3C", Offset = "0xFEBF3C", VA = "0xFEBF3C", Slot = "7")]
		public virtual void UpdateHandPose(HandPoseDefinition pose, bool lerp)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xFEC02C", Offset = "0xFEC02C", VA = "0xFEC02C", Slot = "8")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, bool doLerp, bool updatePosition, bool updateRotation)
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xFEC09C", Offset = "0xFEC09C", VA = "0xFEC09C", Slot = "9")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, float lerpAmount, bool updatePosition, bool updateRotation)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xFEC21C", Offset = "0xFEC21C", VA = "0xFEC21C", Slot = "10")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, bool doLerp)
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xFEC274", Offset = "0xFEC274", VA = "0xFEC274", Slot = "11")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, float lerpAmount)
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xFEC45C", Offset = "0xFEC45C", VA = "0xFEC45C", Slot = "12")]
		public virtual HandPoseDefinition GetHandPoseDefinition()
		{
			return null;
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xFEC5B8", Offset = "0xFEC5B8", VA = "0xFEC5B8", Slot = "13")]
		public virtual void SavePoseAsScriptablObject(string poseName)
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xFEC620", Offset = "0xFEC620", VA = "0xFEC620", Slot = "14")]
		public virtual void CreateUniquePose(string poseName)
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xFEC74C", Offset = "0xFEC74C", VA = "0xFEC74C", Slot = "15")]
		public virtual HandPose GetHandPoseScriptableObject()
		{
			return null;
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xFEC754", Offset = "0xFEC754", VA = "0xFEC754", Slot = "16")]
		public virtual void DoPoseUpdate()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xFEC818", Offset = "0xFEC818", VA = "0xFEC818", Slot = "17")]
		public virtual void ResetEditorHandles()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xFEC95C", Offset = "0xFEC95C", VA = "0xFEC95C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xFEC960", Offset = "0xFEC960", VA = "0xFEC960")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class PoseableObject : MonoBehaviour
	{
		[Token(Token = "0x2000303")]
		public enum PoseType
		{
			[Token(Token = "0x4001174")]
			HandPose,
			[Token(Token = "0x4001175")]
			AutoPoseOnce,
			[Token(Token = "0x4001176")]
			AutoPoseContinuous,
			[Token(Token = "0x4001177")]
			Animator,
			[Token(Token = "0x4001178")]
			Other,
			[Token(Token = "0x4001179")]
			None
		}

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose Type")]
		public PoseType poseType;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Hand Pose Properties")]
		[Tooltip("Set this HandPose on the Handposer when PoseType is set to 'HandPose'")]
		public HandPose EquipHandPose;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Auto Pose Properties")]
		[Tooltip("If PoseType = AutoPoseOnce, AutoPose will be run for this many seconds")]
		public float AutoPoseDuration;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Set animator ID to this value if PoseType is set to 'Animator'")]
		[Header("Animator Properties")]
		public int HandPoseID;

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xFECA04", Offset = "0xFECA04", VA = "0xFECA04")]
		public PoseableObject()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class SampleHandController : MonoBehaviour
	{
		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHandedness ControllerSide;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PoseableObject HeldObject;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool wasHoldingObject;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator handAnimator;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HandPoser handPoser;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AutoPoser autoPoser;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HandPoseBlender poseBlender;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.XR.InputDevice controller;

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xFECA18", Offset = "0xFECA18", VA = "0xFECA18")]
		private void Start()
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xFECC24", Offset = "0xFECC24", VA = "0xFECC24", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xFECC30", Offset = "0xFECC30", VA = "0xFECC30", Slot = "5")]
		public virtual void DoHandControllerUpdate()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xFECC8C", Offset = "0xFECC8C", VA = "0xFECC8C", Slot = "6")]
		public virtual void SetCurrentlyHeldObject(GameObject holdObject)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xFECD40", Offset = "0xFECD40", VA = "0xFECD40", Slot = "7")]
		public virtual void ClearCurrentlyHeldObject()
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xFECDD8", Offset = "0xFECDD8", VA = "0xFECDD8", Slot = "8")]
		public virtual void ResetToIdleComponents()
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xFECEBC", Offset = "0xFECEBC", VA = "0xFECEBC", Slot = "9")]
		public virtual void UpdateFingerInputs()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xFED1C8", Offset = "0xFED1C8", VA = "0xFED1C8", Slot = "10")]
		public virtual void DoHeldItemPose()
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xFED33C", Offset = "0xFED33C", VA = "0xFED33C", Slot = "11")]
		public virtual void DisableContinousAutoPose()
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xFED3B0", Offset = "0xFED3B0", VA = "0xFED3B0", Slot = "12")]
		public virtual void DoIdlePose()
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xFED3D0", Offset = "0xFED3D0", VA = "0xFED3D0", Slot = "13")]
		public virtual bool HoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xFED0E8", Offset = "0xFED0E8", VA = "0xFED0E8")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xFED430", Offset = "0xFED430", VA = "0xFED430", Slot = "14")]
		public virtual void UpdateXRDevices()
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xFED0A0", Offset = "0xFED0A0", VA = "0xFED0A0")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage)
		{
			return default(float);
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xFED4C4", Offset = "0xFED4C4", VA = "0xFED4C4")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xFED4F8", Offset = "0xFED4F8", VA = "0xFED4F8", Slot = "15")]
		public virtual UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xFED5C8", Offset = "0xFED5C8", VA = "0xFED5C8", Slot = "16")]
		public virtual UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xFED698", Offset = "0xFED698", VA = "0xFED698", Slot = "17")]
		public virtual bool GetThumbIsNear()
		{
			return default(bool);
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xFED80C", Offset = "0xFED80C", VA = "0xFED80C", Slot = "18")]
		public virtual bool GetIndexIsNear()
		{
			return default(bool);
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xFED8AC", Offset = "0xFED8AC", VA = "0xFED8AC")]
		public SampleHandController()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public enum ControllerHandedness
	{
		[Token(Token = "0x4001184")]
		Left,
		[Token(Token = "0x4001185")]
		Right,
		[Token(Token = "0x4001186")]
		None
	}
	[Token(Token = "0x2000306")]
	public class SavePoseBinding : MonoBehaviour
	{
		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Save Input : ")]
		[Tooltip("If this InputAction returns true, save the current hand pose using 'handPoser.CreateUniquePose(SaveNamePrefix)'")]
		public InputAction SaveInput;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Save name prefix : ")]
		[Tooltip("Prefix of the hand pose file name to use. For example, a prefix of 'HandPose' will save as 'HandPose 1', 'HandPose 2', etc.")]
		public string SaveNamePrefix;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, the SaveInput binding will be shown on the screen gui. Will not show in VR.")]
		[Header("Debug : ")]
		public bool ShowKeybindingToolTip;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HandPoser handPoser;

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xFED954", Offset = "0xFED954", VA = "0xFED954")]
		private void Start()
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xFED9C8", Offset = "0xFED9C8", VA = "0xFED9C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xFEDA8C", Offset = "0xFEDA8C", VA = "0xFEDA8C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xFEDBB4", Offset = "0xFEDBB4", VA = "0xFEDBB4")]
		public SavePoseBinding()
		{
		}
	}
	[Token(Token = "0x2000307")]
	[ExecuteInEditMode]
	public class SkeletonVisualizer : MonoBehaviour
	{
		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float JointRadius;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 5f)]
		public float BoneThickness;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color GizmoColor;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool ShowTransformNames;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool isQuiting;

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xFEDC14", Offset = "0xFEDC14", VA = "0xFEDC14")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xFEDC20", Offset = "0xFEDC20", VA = "0xFEDC20")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xFEDC24", Offset = "0xFEDC24", VA = "0xFEDC24", Slot = "4")]
		public virtual bool IsTipOfBone(Transform fingerJoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xFEDD14", Offset = "0xFEDD14", VA = "0xFEDD14")]
		public void ResetEditorHandles()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xFEDE58", Offset = "0xFEDE58", VA = "0xFEDE58")]
		public SkeletonVisualizer()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class XRTrackedPoseDriver : MonoBehaviour
	{
		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableXRDevice Device;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xFEDE80", Offset = "0xFEDE80", VA = "0xFEDE80", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xFEDED0", Offset = "0xFEDED0", VA = "0xFEDED0", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xFEDF44", Offset = "0xFEDF44", VA = "0xFEDF44", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xFEDFB8", Offset = "0xFEDFB8", VA = "0xFEDFB8", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xFEDFE0", Offset = "0xFEDFE0", VA = "0xFEDFE0", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xFEDFEC", Offset = "0xFEDFEC", VA = "0xFEDFEC", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xFEE2AC", Offset = "0xFEE2AC", VA = "0xFEE2AC", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xFEE6BC", Offset = "0xFEE6BC", VA = "0xFEE6BC", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xFEE3E4", Offset = "0xFEE3E4", VA = "0xFEE3E4")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xFEE03C", Offset = "0xFEE03C", VA = "0xFEE03C")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xFEE470", Offset = "0xFEE470", VA = "0xFEE470")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xFEE4F8", Offset = "0xFEE4F8", VA = "0xFEE4F8")]
		public Vector3 GetControllerLocalPosition(ControllerHandedness handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xFEE5E0", Offset = "0xFEE5E0", VA = "0xFEE5E0")]
		public Quaternion GetControllerLocalRotation(ControllerHandedness handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xFEE10C", Offset = "0xFEE10C", VA = "0xFEE10C")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xFEE1DC", Offset = "0xFEE1DC", VA = "0xFEE1DC")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xFEE6C8", Offset = "0xFEE6C8", VA = "0xFEE6C8")]
		public XRTrackedPoseDriver()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public enum TrackableXRDevice
	{
		[Token(Token = "0x4001199")]
		HMD,
		[Token(Token = "0x400119A")]
		LeftController,
		[Token(Token = "0x400119B")]
		RightController
	}
	[Token(Token = "0x200030A")]
	public class BNGIKPlayerScale : MonoBehaviour
	{
		[Token(Token = "0x200030B")]
		[CompilerGenerated]
		private sealed class <Start>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BNGIKPlayerScale <>4__this;

			[Token(Token = "0x170001E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013B0")]
				[Address(RVA = "0xFEF7E0", Offset = "0xFEF7E0", VA = "0xFEF7E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013B2")]
				[Address(RVA = "0xFEF828", Offset = "0xFEF828", VA = "0xFEF828", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013AD")]
			[Address(RVA = "0xFEEE08", Offset = "0xFEEE08", VA = "0xFEEE08")]
			[DebuggerHidden]
			public <Start>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60013AE")]
			[Address(RVA = "0xFEF6BC", Offset = "0xFEF6BC", VA = "0xFEF6BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013AF")]
			[Address(RVA = "0xFEF6C0", Offset = "0xFEF6C0", VA = "0xFEF6C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013B1")]
			[Address(RVA = "0xFEF7E8", Offset = "0xFEF7E8", VA = "0xFEF7E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200030C")]
		[CompilerGenerated]
		private sealed class <AllowPropertySetting>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BNGIKPlayerScale <>4__this;

			[Token(Token = "0x170001E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013B6")]
				[Address(RVA = "0xFEF8F8", Offset = "0xFEF8F8", VA = "0xFEF8F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013B8")]
				[Address(RVA = "0xFEF940", Offset = "0xFEF940", VA = "0xFEF940", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013B3")]
			[Address(RVA = "0xFEF4E0", Offset = "0xFEF4E0", VA = "0xFEF4E0")]
			[DebuggerHidden]
			public <AllowPropertySetting>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60013B4")]
			[Address(RVA = "0xFEF830", Offset = "0xFEF830", VA = "0xFEF830", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013B5")]
			[Address(RVA = "0xFEF834", Offset = "0xFEF834", VA = "0xFEF834", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013B7")]
			[Address(RVA = "0xFEF900", Offset = "0xFEF900", VA = "0xFEF900", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VRIK ik;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scaleMlp;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ControllerBinding ScalePlayerInput;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool canSetProperty;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject ikInfoObj;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool forceSetIK;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int wrongScaleCounter;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerManager playerManager;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool canScaleCheck;

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xFEE768", Offset = "0xFEE768", VA = "0xFEE768")]
		private void Awake()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xFEE80C", Offset = "0xFEE80C", VA = "0xFEE80C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xFEE978", Offset = "0xFEE978", VA = "0xFEE978")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xFEEAF0", Offset = "0xFEEAF0", VA = "0xFEEAF0")]
		private void HandleHMDMounted()
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xFEEB40", Offset = "0xFEEB40", VA = "0xFEEB40")]
		private void HandleHMDUnmounted()
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xFEEBC8", Offset = "0xFEEBC8", VA = "0xFEEBC8")]
		private void OnRevive()
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xFEEC18", Offset = "0xFEEC18", VA = "0xFEEC18")]
		private void EnableScale()
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xFEEBBC", Offset = "0xFEEBBC", VA = "0xFEEBBC")]
		private void DisableScale()
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xFEEC24", Offset = "0xFEEC24", VA = "0xFEEC24")]
		private void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xFEECDC", Offset = "0xFEECDC", VA = "0xFEECDC")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xFEED94", Offset = "0xFEED94", VA = "0xFEED94")]
		[IteratorStateMachine(typeof(<Start>d__19))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xFEEE30", Offset = "0xFEEE30", VA = "0xFEEE30")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xFEF430", Offset = "0xFEF430", VA = "0xFEF430")]
		public bool Approximately(Vector3 me, Vector3 other, float percentage)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xFEEF48", Offset = "0xFEEF48", VA = "0xFEEF48")]
		private void CheckForCheats()
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xFEF1C4", Offset = "0xFEF1C4", VA = "0xFEF1C4")]
		private void SetIK()
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xFEF46C", Offset = "0xFEF46C", VA = "0xFEF46C")]
		[IteratorStateMachine(typeof(<AllowPropertySetting>d__24))]
		private IEnumerator AllowPropertySetting()
		{
			return null;
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xFEF508", Offset = "0xFEF508", VA = "0xFEF508")]
		private void SyncIK()
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xFEF6A0", Offset = "0xFEF6A0", VA = "0xFEF6A0")]
		public BNGIKPlayerScale()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class FingerMapping : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200030E")]
		public enum Mode
		{
			[Token(Token = "0x40011B1")]
			FromToRotation,
			[Token(Token = "0x40011B2")]
			MatchRotation
		}

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Mode mode;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Finger[] fingers;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Shown for Debug : ")]
		public bool ShowGizmos;

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xFEF948", Offset = "0xFEF948", VA = "0xFEF948")]
		private void Start()
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xFEFAA4", Offset = "0xFEFAA4", VA = "0xFEFAA4")]
		private void AfterVRIK()
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xFEFFB8", Offset = "0xFEFFB8", VA = "0xFEFFB8")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xFF02C4", Offset = "0xFF02C4", VA = "0xFF02C4")]
		public FingerMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030F")]
	public class Finger
	{
		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] avatarBones;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] targetBones;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 avatarForwardAxis;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 avatarUpAxis;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 targetForwardAxis;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 targetUpAxis;

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xFF02DC", Offset = "0xFF02DC", VA = "0xFF02DC")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class IKHandTargetMover : MonoBehaviour
	{
		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber grabber;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandTarget;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 rotationOffset;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 positionOffset;

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xFF0450", Offset = "0xFF0450", VA = "0xFF0450")]
		private void Update()
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xFF0710", Offset = "0xFF0710", VA = "0xFF0710")]
		public IKHandTargetMover()
		{
		}
	}
	[Token(Token = "0x2000311")]
	public class NetworkedGrabbable : Grabbable, IPunObservable
	{
		[Token(Token = "0x2000312")]
		[CompilerGenerated]
		private sealed class <DestroyAfterRelease>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkedGrabbable <>4__this;

			[Token(Token = "0x170001E4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013CA")]
				[Address(RVA = "0xFF1390", Offset = "0xFF1390", VA = "0xFF1390", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013CC")]
				[Address(RVA = "0xFF13D8", Offset = "0xFF13D8", VA = "0xFF13D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013C7")]
			[Address(RVA = "0xFF0888", Offset = "0xFF0888", VA = "0xFF0888")]
			[DebuggerHidden]
			public <DestroyAfterRelease>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x60013C8")]
			[Address(RVA = "0xFF11BC", Offset = "0xFF11BC", VA = "0xFF11BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013C9")]
			[Address(RVA = "0xFF11C0", Offset = "0xFF11C0", VA = "0xFF11C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013CB")]
			[Address(RVA = "0xFF1398", Offset = "0xFF1398", VA = "0xFF1398", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x251")]
		public bool destroyAfterRelease;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x252")]
		public bool wasGrabbed;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x253")]
		public bool wasDropped;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		public bool canPickUpAgain;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private PhotonView view;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Rigidbody rb;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Vector3 _syncStartPosition;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private Vector3 _syncEndPosition;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private Quaternion _syncStartRotation;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private Quaternion _syncEndRotation;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private bool _syncBeingHeld;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		private float _lastSynchronizationTime;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private float _syncDelay;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private float _syncTime;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private bool beingDestroyed;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B1")]
		protected bool requestingOwnerShip;

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xFF0784", Offset = "0xFF0784", VA = "0xFF0784")]
		private void Start()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xFF0814", Offset = "0xFF0814", VA = "0xFF0814")]
		[IteratorStateMachine(typeof(<DestroyAfterRelease>d__16))]
		private IEnumerator DestroyAfterRelease()
		{
			return null;
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xFF08B0", Offset = "0xFF08B0", VA = "0xFF08B0", Slot = "4")]
		public override void Update()
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xFF0CB4", Offset = "0xFF0CB4", VA = "0xFF0CB4", Slot = "51")]
		public virtual void CheckForNullOwner()
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xFF0D80", Offset = "0xFF0D80", VA = "0xFF0D80", Slot = "8")]
		public override bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xFF0EA4", Offset = "0xFF0EA4", VA = "0xFF0EA4", Slot = "50")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xFF10FC", Offset = "0xFF10FC", VA = "0xFF10FC")]
		public NetworkedGrabbable()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class NetworkedRaycastWeapon : RaycastWeapon, IPunObservable
	{
		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private PhotonView photonView;

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xFF13E0", Offset = "0xFF13E0", VA = "0xFF13E0")]
		private void Start()
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xFF1438", Offset = "0xFF1438", VA = "0xFF1438", Slot = "30")]
		public override void Shoot()
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xFF15DC", Offset = "0xFF15DC", VA = "0xFF15DC")]
		[PunRPC]
		private void ShootRPC(bool playEmptySound)
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xFF16D0", Offset = "0xFF16D0", VA = "0xFF16D0", Slot = "43")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xFF16F4", Offset = "0xFF16F4", VA = "0xFF16F4")]
		public NetworkedRaycastWeapon()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class NetworkManager : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x2000315")]
		[CompilerGenerated]
		private sealed class <doLoadLevelWithFade>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkManager <>4__this;

			[Token(Token = "0x40011DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string sceneName;

			[Token(Token = "0x170001E6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013E2")]
				[Address(RVA = "0xFF234C", Offset = "0xFF234C", VA = "0xFF234C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013E4")]
				[Address(RVA = "0xFF2394", Offset = "0xFF2394", VA = "0xFF2394", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013DF")]
			[Address(RVA = "0xFF2108", Offset = "0xFF2108", VA = "0xFF2108")]
			[DebuggerHidden]
			public <doLoadLevelWithFade>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x60013E0")]
			[Address(RVA = "0xFF21E0", Offset = "0xFF21E0", VA = "0xFF21E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013E1")]
			[Address(RVA = "0xFF21E4", Offset = "0xFF21E4", VA = "0xFF21E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013E3")]
			[Address(RVA = "0xFF2354", Offset = "0xFF2354", VA = "0xFF2354", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Maximum number of players per room. If the room is full, a new random one will be created. 0 = No Max.")]
		[SerializeField]
		private byte maxPlayersPerRoom;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("If true, the JoinRoomName will try to be Joined On Start. If false, need to call JoinRoom yourself.")]
		public bool JoinRoomOnStart;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[Tooltip("If true, do not destroy this object when moving to another scene")]
		public bool dontDestroyOnLoad;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string JoinRoomName;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Game Version can be used to separate rooms.")]
		public string GameVersion;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Name of the Player object to spawn. Must be in a /Resources folder.")]
		public string RemotePlayerObjectName;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Optional GUI Text element to output debug information.")]
		public Text DebugText;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject AI;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool spawnAI;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ScreenFader sf;

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xFF16FC", Offset = "0xFF16FC", VA = "0xFF16FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xFF1820", Offset = "0xFF1820", VA = "0xFF1820")]
		private void Start()
		{
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xFF1A04", Offset = "0xFF1A04", VA = "0xFF1A04")]
		private void Update()
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xFF1AF8", Offset = "0xFF1AF8", VA = "0xFF1AF8", Slot = "34")]
		public override void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xFF1C1C", Offset = "0xFF1C1C", VA = "0xFF1C1C", Slot = "44")]
		public override void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xFF1CA8", Offset = "0xFF1CA8", VA = "0xFF1CA8", Slot = "45")]
		public override void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xFF1D84", Offset = "0xFF1D84", VA = "0xFF1D84", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xFF1EA4", Offset = "0xFF1EA4", VA = "0xFF1EA4", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xFF1F4C", Offset = "0xFF1F4C", VA = "0xFF1F4C", Slot = "38")]
		public override void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xFF2058", Offset = "0xFF2058", VA = "0xFF2058")]
		public void LoadScene(string sceneName)
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xFF2078", Offset = "0xFF2078", VA = "0xFF2078")]
		[IteratorStateMachine(typeof(<doLoadLevelWithFade>d__20))]
		private IEnumerator doLoadLevelWithFade(string sceneName)
		{
			return null;
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xFF190C", Offset = "0xFF190C", VA = "0xFF190C")]
		private void LogText(string message)
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xFF2130", Offset = "0xFF2130", VA = "0xFF2130")]
		public NetworkManager()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class NetworkPlayer1 : MonoBehaviourPunCallbacks, IPunObservable, IPunOwnershipCallbacks
	{
		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Transform of the local player's head to track. This will be applied to the Remote Player's Head Transform")]
		public Transform PlayerHeadTransform;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform PlayerLeftHandTransform;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform PlayerRightHandTransform;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Transform of the remote player's head. This will be updated during Update")]
		public Transform RemoteHeadTransform;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _syncHeadStartPosition;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _syncHeadEndPosition;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion _syncHeadStartRotation;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion _syncHeadEndRotation;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Transform of the remote player's left hand / controller. This will be updated during Update")]
		public Transform RemoteLeftHandTransform;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 _syncLHandStartPosition;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 _syncLHandEndPosition;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion _syncLHandStartRotation;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion _syncLHandEndRotation;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Transform of the remote player's right hand / controller. This will be updated during Update")]
		public Transform RemoteRightHandTransform;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 _syncRHandStartPosition;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Vector3 _syncRHandEndPosition;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion _syncRHandStartRotation;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion _syncRHandEndRotation;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public HandController LeftHandController;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public HandController RightHandController;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Animator RemoteLeftHandAnimator;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Animator RemoteRightHandAnimator;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Local Player's Left Grabber. Used to determine which objects are nearby")]
		public Grabber LeftGrabber;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private GrabbablesInTrigger gitLeft;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Local Player's Right Grabber. Used to determine which objects are nearby")]
		public Grabber RightGrabber;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private GrabbablesInTrigger gitRight;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("How fast to animate the fingers on the remote players hands")]
		public float HandAnimationSpeed;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float _syncLeftGripStart;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float _syncRightGripStart;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float _syncLeftPointStart;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float _syncRightPointStart;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float _syncLeftThumbStart;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float _syncRightThumbStart;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private float _syncLeftGripEnd;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float _syncRightGripEnd;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float _syncLeftPointEnd;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float _syncRightPointEnd;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float _syncLeftThumbEnd;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float _syncRightThumbEnd;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float _lastSynchronizationTime;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float _syncDelay;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float _syncTime;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected double lastRequestTime;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected float requestInterval;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Dictionary<int, double> requestedGrabbables;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool disabledObjects;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		private bool _syncLeftHoldingItem;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
		private bool _syncRightHoldingItem;

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xFF239C", Offset = "0xFF239C", VA = "0xFF239C")]
		private void Start()
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xFF2500", Offset = "0xFF2500", VA = "0xFF2500")]
		private void Update()
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xFF2CD0", Offset = "0xFF2CD0", VA = "0xFF2CD0")]
		public void AssignPlayerObjects()
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xFF2E44", Offset = "0xFF2E44", VA = "0xFF2E44")]
		private Transform getChildTransformByName(Transform search, string name)
		{
			return null;
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xFF2A94", Offset = "0xFF2A94", VA = "0xFF2A94")]
		private void toggleObjects(bool enableObjects)
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xFF2A04", Offset = "0xFF2A04", VA = "0xFF2A04")]
		private void checkGrabbablesTransfer()
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xFF2F08", Offset = "0xFF2F08", VA = "0xFF2F08")]
		private void requestOwnerShipForNearbyGrabbables(GrabbablesInTrigger grabbables)
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xFF3290", Offset = "0xFF3290", VA = "0xFF3290", Slot = "58")]
		public virtual bool RecentlyRequested(PhotonView view)
		{
			return default(bool);
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xFF336C", Offset = "0xFF336C", VA = "0xFF336C", Slot = "59")]
		public virtual void RequestGrabbableOwnership(PhotonView view)
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xFF2B20", Offset = "0xFF2B20", VA = "0xFF2B20")]
		private void updateRemotePositionRotation(Transform moveTransform, Vector3 startPosition, Vector3 endPosition, Quaternion syncStartRotation, Quaternion syncEndRotation, float syncValue)
		{
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xFF3464", Offset = "0xFF3464", VA = "0xFF3464", Slot = "54")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xFF3D3C", Offset = "0xFF3D3C", VA = "0xFF3D3C", Slot = "55")]
		public void OnOwnershipRequest(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xFF3E68", Offset = "0xFF3E68", VA = "0xFF3E68", Slot = "56")]
		public void OnOwnershipTransfered(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xFF3E6C", Offset = "0xFF3E6C", VA = "0xFF3E6C", Slot = "57")]
		public void OnOwnershipTransferFailed(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xFF3E70", Offset = "0xFF3E70", VA = "0xFF3E70")]
		public NetworkPlayer1()
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class NetworkPlayer : MonoBehaviourPunCallbacks, IPunObservable, IPunOwnershipCallbacks
	{
		[Token(Token = "0x2000318")]
		[CompilerGenerated]
		private sealed class <TransferTimeout>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400122E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400122F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkPlayer <>4__this;

			[Token(Token = "0x170001E8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001405")]
				[Address(RVA = "0xFF56C8", Offset = "0xFF56C8", VA = "0xFF56C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001407")]
				[Address(RVA = "0xFF5710", Offset = "0xFF5710", VA = "0xFF5710", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001402")]
			[Address(RVA = "0xFF5478", Offset = "0xFF5478", VA = "0xFF5478")]
			[DebuggerHidden]
			public <TransferTimeout>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6001403")]
			[Address(RVA = "0xFF5604", Offset = "0xFF5604", VA = "0xFF5604", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001404")]
			[Address(RVA = "0xFF5608", Offset = "0xFF5608", VA = "0xFF5608", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001406")]
			[Address(RVA = "0xFF56D0", Offset = "0xFF56D0", VA = "0xFF56D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandController LeftHandController;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandController RightHandController;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Animator RemoteLeftHandAnimator;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Animator RemoteRightHandAnimator;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Local Player's Left Grabber. Used to determine which objects are nearby")]
		public Grabber LeftGrabber;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GrabbablesInTrigger gitLeft;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Local Player's Right Grabber. Used to determine which objects are nearby")]
		public Grabber RightGrabber;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabbablesInTrigger gitRight;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("How fast to animate the fingers on the remote players hands")]
		public float HandAnimationSpeed;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _syncLeftGripStart;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _syncRightGripStart;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _syncLeftPointStart;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _syncRightPointStart;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _syncLeftThumbStart;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _syncRightThumbStart;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _syncLeftGripEnd;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float _syncRightGripEnd;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float _syncLeftPointEnd;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float _syncRightPointEnd;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _syncLeftThumbEnd;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _syncRightThumbEnd;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float _lastSynchronizationTime;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _syncDelay;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _syncTime;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected double lastRequestTime;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float requestInterval;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Dictionary<int, double> requestedGrabbables;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool disabledObjects;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool _syncLeftHoldingItem;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		private bool _syncRightHoldingItem;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB")]
		private bool waitForTimeout;

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xFF4044", Offset = "0xFF4044", VA = "0xFF4044")]
		private void Start()
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xFF4180", Offset = "0xFF4180", VA = "0xFF4180")]
		private void Update()
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xFF468C", Offset = "0xFF468C", VA = "0xFF468C")]
		public void AssignPlayerObjects()
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xFF467C", Offset = "0xFF467C", VA = "0xFF467C")]
		private void toggleObjects(bool enableObjects)
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xFF45EC", Offset = "0xFF45EC", VA = "0xFF45EC")]
		private void checkGrabbablesTransfer()
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xFF4714", Offset = "0xFF4714", VA = "0xFF4714")]
		private void requestOwnerShipForNearbyGrabbables(GrabbablesInTrigger grabbables)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xFF4B48", Offset = "0xFF4B48", VA = "0xFF4B48", Slot = "58")]
		public virtual bool RecentlyRequested(PhotonView view)
		{
			return default(bool);
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xFF4C24", Offset = "0xFF4C24", VA = "0xFF4C24", Slot = "59")]
		public virtual void RequestGrabbableOwnership(PhotonView view)
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xFF4D1C", Offset = "0xFF4D1C", VA = "0xFF4D1C", Slot = "54")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xFF52B4", Offset = "0xFF52B4", VA = "0xFF52B4", Slot = "55")]
		public void OnOwnershipRequest(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xFF5404", Offset = "0xFF5404", VA = "0xFF5404")]
		[IteratorStateMachine(typeof(<TransferTimeout>d__41))]
		private IEnumerator TransferTimeout()
		{
			return null;
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xFF54A0", Offset = "0xFF54A0", VA = "0xFF54A0", Slot = "56")]
		public void OnOwnershipTransfered(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xFF5544", Offset = "0xFF5544", VA = "0xFF5544", Slot = "57")]
		public void OnOwnershipTransferFailed(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xFF55E8", Offset = "0xFF55E8", VA = "0xFF55E8")]
		public NetworkPlayer()
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class DemoCube : MonoBehaviour
	{
		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material HighlightMaterial;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material ActiveMaterial;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool active;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool hovering;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material initialMaterial;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer render;

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xFF5718", Offset = "0xFF5718", VA = "0xFF5718")]
		private void Start()
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xFF5798", Offset = "0xFF5798", VA = "0xFF5798")]
		public void SetActive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xFF57F8", Offset = "0xFF57F8", VA = "0xFF57F8")]
		public void SetInactive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xFF5800", Offset = "0xFF5800", VA = "0xFF5800")]
		public void SetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xFF580C", Offset = "0xFF580C", VA = "0xFF580C")]
		public void ResetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xFF57A4", Offset = "0xFF57A4", VA = "0xFF57A4")]
		public void UpdateMaterial()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xFF5814", Offset = "0xFF5814", VA = "0xFF5814")]
		public DemoCube()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text LabelToUpdate;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProjectileLauncher DemoLauncher;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaxLaunchedObjects;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GameObject> launchedObjects;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text JoystickText;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject AmmoObject;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform ItemsHolder;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<Grabbable, PosRot> _initalGrabbables;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody cubeRigid;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody cubeRigid1;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody cubeRigid2;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigid3;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Grabbable> demoClips;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 rotateX;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 rotateY;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rotateZ;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rotateXYX;

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xFF581C", Offset = "0xFF581C", VA = "0xFF581C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xFF5CC8", Offset = "0xFF5CC8", VA = "0xFF5CC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xFF5E08", Offset = "0xFF5E08", VA = "0xFF5E08")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xFF5F58", Offset = "0xFF5F58", VA = "0xFF5F58")]
		public void UpdateJoystickText(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xFF6094", Offset = "0xFF6094", VA = "0xFF6094")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xFF6410", Offset = "0xFF6410", VA = "0xFF6410")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xFF68F8", Offset = "0xFF68F8", VA = "0xFF68F8")]
		public void ShootLauncher()
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xFF5A9C", Offset = "0xFF5A9C", VA = "0xFF5A9C")]
		private void initGravityCubes()
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xFF5CCC", Offset = "0xFF5CCC", VA = "0xFF5CCC")]
		private void rotateGravityCubes()
		{
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xFF6AD4", Offset = "0xFF6AD4", VA = "0xFF6AD4")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x200031B")]
	public class PosRot
	{
		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xFF6B00", Offset = "0xFF6B00", VA = "0xFF6B00")]
		public PosRot()
		{
		}
	}
	[Token(Token = "0x200031C")]
	public class CharacterConstraint : MonoBehaviour
	{
		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BNGPlayerController bngController;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xFF6B08", Offset = "0xFF6B08", VA = "0xFF6B08")]
		private void Awake()
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xFF6BA0", Offset = "0xFF6BA0", VA = "0xFF6BA0")]
		private void Update()
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xFF6BAC", Offset = "0xFF6BAC", VA = "0xFF6BAC", Slot = "4")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xFF6D1C", Offset = "0xFF6D1C", VA = "0xFF6D1C")]
		public CharacterConstraint()
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class CharacterIK : MonoBehaviour
	{
		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowLeftController;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform FollowRightController;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform FollowLeftFoot;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform FollowRightFoot;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform FollowHead;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float FootYPosition;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IKActive;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool IKFeetActive;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool HideHead;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool HideLeftArm;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HideRightArm;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool HideLeftHand;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool HideRightHand;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool HideLegs;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HipsJoint;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterController FollowPlayer;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform headBone;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform leftShoulderJoint;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform rightShoulderJoint;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform leftHandJoint;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform rightHandJoint;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator animator;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float HipOffset;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 hideBoneScale;

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xFF6D24", Offset = "0xFF6D24", VA = "0xFF6D24")]
		private void Start()
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xFF6E48", Offset = "0xFF6E48", VA = "0xFF6E48")]
		private void Update()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xFF72B0", Offset = "0xFF72B0", VA = "0xFF72B0")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xFF76F8", Offset = "0xFF76F8", VA = "0xFF76F8")]
		public CharacterIK()
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class CharacterYOffset : MonoBehaviour
	{
		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask groundLayer;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform raycastTransform;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController characterController;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float raycastDistance;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion spawnRot;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float offsetAdder;

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xFF7724", Offset = "0xFF7724", VA = "0xFF7724")]
		private void Start()
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xFF7810", Offset = "0xFF7810", VA = "0xFF7810")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xFF799C", Offset = "0xFF799C", VA = "0xFF799C")]
		private Vector3 DetectGroundHeight(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xFF7C0C", Offset = "0xFF7C0C", VA = "0xFF7C0C")]
		public CharacterYOffset()
		{
		}
	}
	[Token(Token = "0x200031F")]
	public class Climbable : Grabbable
	{
		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xFF7C54", Offset = "0xFF7C54", VA = "0xFF7C54")]
		private void Start()
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xFF7D68", Offset = "0xFF7D68", VA = "0xFF7D68", Slot = "20")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xFF87A4", Offset = "0xFF87A4", VA = "0xFF87A4", Slot = "28")]
		public override void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xFF888C", Offset = "0xFF888C", VA = "0xFF888C")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class CollisionSound : MonoBehaviour
	{
		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip CollisionAudio;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource audioSource;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float startTime;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider col;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinimumVolume;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaximumVolume;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool RecentlyPlayedSound;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastPlayedSound;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LastRelativeVelocity;

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xFF8934", Offset = "0xFF8934", VA = "0xFF8934")]
		private void Start()
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xFF8A94", Offset = "0xFF8A94", VA = "0xFF8A94")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xFF8E5C", Offset = "0xFF8E5C", VA = "0xFF8E5C")]
		private void resetLastPlayedSound()
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xFF8E64", Offset = "0xFF8E64", VA = "0xFF8E64")]
		public CollisionSound()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class ConstrainLocalPosition : MonoBehaviour
	{
		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ConstrainLocalX;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LocalXMin;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LocalXMax;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConstrainLocalY;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LocalYMin;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMax;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ConstrainLocalZ;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LocalZMin;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float LocalZMax;

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xFF8E78", Offset = "0xFF8E78", VA = "0xFF8E78")]
		private void Update()
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xFF8E7C", Offset = "0xFF8E7C", VA = "0xFF8E7C")]
		private void doConstrain()
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xFF8F78", Offset = "0xFF8F78", VA = "0xFF8F78")]
		public ConstrainLocalPosition()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class Damageable : MonoBehaviour
	{
		[Token(Token = "0x2000323")]
		[CompilerGenerated]
		private sealed class <RespawnRoutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4001293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable <>4__this;

			[Token(Token = "0x170001EA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600143A")]
				[Address(RVA = "0xFF9D1C", Offset = "0xFF9D1C", VA = "0xFF9D1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600143C")]
				[Address(RVA = "0xFF9D64", Offset = "0xFF9D64", VA = "0xFF9D64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001437")]
			[Address(RVA = "0xFF98AC", Offset = "0xFF98AC", VA = "0xFF98AC")]
			[DebuggerHidden]
			public <RespawnRoutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001438")]
			[Address(RVA = "0xFF98FC", Offset = "0xFF98FC", VA = "0xFF98FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001439")]
			[Address(RVA = "0xFF9900", Offset = "0xFF9900", VA = "0xFF9900", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600143B")]
			[Address(RVA = "0xFF9D24", Offset = "0xFF9D24", VA = "0xFF9D24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Health;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _startingHealth;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If specified, this GameObject will be instantiated at this transform's position on death.")]
		public GameObject SpawnOnDeath;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Activate these GameObjects on Death")]
		public List<GameObject> ActivateGameObjectsOnDeath;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Deactivate these GameObjects on Death")]
		public List<GameObject> DeactivateGameObjectsOnDeath;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Deactivate these Colliders on Death")]
		public List<Collider> DeactivateCollidersOnDeath;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Destroy this object on Death? False if need to respawn.")]
		public bool DestroyOnDeath;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If this object is a Grabbable it can be dropped on Death")]
		public bool DropOnDeath;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How long to wait before destroying this objects")]
		public float DestroyDelay;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true the object will be reactivated according to RespawnTime")]
		public bool Respawn;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If Respawn true, this gameObject will reactivate after RespawnTime. In seconds.")]
		public float RespawnTime;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Remove any decals that were parented to this object on death. Useful for clearing unused decals.")]
		public bool RemoveBulletHolesOnDeath;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Optional Event to be called when receiving damage. Takes damage amount as a float parameter.")]
		public FloatEvent onDamaged;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to be called once health is <= 0")]
		public UnityEvent onDestroyed;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional Event to be called once the object has been respawned, if Respawn is true and after RespawnTime")]
		public UnityEvent onRespawn;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool destroyed;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rigid;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool initialWasKinematic;

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xFF8F94", Offset = "0xFF8F94", VA = "0xFF8F94")]
		private void Start()
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xFF9058", Offset = "0xFF9058", VA = "0xFF9058", Slot = "4")]
		public virtual void DealDamage(float damageAmount)
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xFF9108", Offset = "0xFF9108", VA = "0xFF9108", Slot = "5")]
		public virtual void DealDamage(float damageAmount, [Optional] Vector3? hitPosition, [Optional] Vector3? hitNormal, bool reactToHit = true, [Optional] GameObject sender, [Optional] GameObject receiver)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xFF91A4", Offset = "0xFF91A4", VA = "0xFF91A4", Slot = "6")]
		public virtual void DestroyThis()
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xFF9828", Offset = "0xFF9828", VA = "0xFF9828")]
		[IteratorStateMachine(typeof(<RespawnRoutine>d__22))]
		private IEnumerator RespawnRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xFF98D4", Offset = "0xFF98D4", VA = "0xFF98D4")]
		public Damageable()
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class DamageCollider : MonoBehaviour
	{
		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Damage;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody ColliderRigidbody;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinForce;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LastRelativeVelocity;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LastDamageForce;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool TakeCollisionDamage;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float CollisionDamage;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Damageable thisDamageable;

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xFF9D6C", Offset = "0xFF9D6C", VA = "0xFF9D6C")]
		private void Start()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xFF9E3C", Offset = "0xFF9E3C", VA = "0xFF9E3C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xFF9E80", Offset = "0xFF9E80", VA = "0xFF9E80", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xFFA150", Offset = "0xFFA150", VA = "0xFFA150")]
		public DamageCollider()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class DestroyObjectWithDelay : MonoBehaviour
	{
		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DestroySeconds;

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xFFA174", Offset = "0xFFA174", VA = "0xFFA174")]
		private void Start()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xFFA1F0", Offset = "0xFFA1F0", VA = "0xFFA1F0")]
		public DestroyObjectWithDelay()
		{
		}
	}
	[Token(Token = "0x2000326")]
	public class FollowRigidbody : MonoBehaviour
	{
		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTransform;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigid;

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xFFA1F8", Offset = "0xFFA1F8", VA = "0xFFA1F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xFFA250", Offset = "0xFFA250", VA = "0xFFA250")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xFFA290", Offset = "0xFFA290", VA = "0xFFA290")]
		public FollowRigidbody()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class FollowTransform : MonoBehaviour
	{
		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTarget;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool MatchRotation;

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xFFA298", Offset = "0xFFA298", VA = "0xFFA298")]
		private void Update()
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xFFA378", Offset = "0xFFA378", VA = "0xFFA378")]
		public FollowTransform()
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class GrabAction : GrabbableEvents
	{
		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent OnGrabEvent;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable g;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastGrabTime;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float minTimeBetweenGrabs;

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xFFA388", Offset = "0xFFA388", VA = "0xFFA388", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xFFA4D0", Offset = "0xFFA4D0", VA = "0xFFA4D0")]
		public GrabAction()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class GrabbableBezierLine : GrabbableEvents
	{
		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LineRenderer LineToDraw;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int SegmentCount;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float LerpAmount;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float HeightAdjustment;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabber lineToGrabber;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber lineRemoteGrabbing;

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xFFA4E4", Offset = "0xFFA4E4", VA = "0xFFA4E4")]
		private void Start()
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xFFA624", Offset = "0xFFA624", VA = "0xFFA624")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xFFAAB4", Offset = "0xFFAAB4", VA = "0xFFAAB4", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xFFAAE0", Offset = "0xFFAAE0", VA = "0xFFAAE0", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xFFABD8", Offset = "0xFFABD8", VA = "0xFFABD8", Slot = "10")]
		public override void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xFFAC10", Offset = "0xFFAC10", VA = "0xFFAC10", Slot = "12")]
		public override void OnBecomesClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xFFAC4C", Offset = "0xFFAC4C", VA = "0xFFAC4C", Slot = "14")]
		public override void OnNoLongerClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xFFAB1C", Offset = "0xFFAB1C", VA = "0xFFAB1C")]
		public void HighlightItem(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xFFA59C", Offset = "0xFFA59C", VA = "0xFFA59C")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xFFA94C", Offset = "0xFFA94C", VA = "0xFFA94C")]
		public void DrawBezierCurve(Vector3 point0, Vector3 point1, Vector3 point2, LineRenderer lineRenderer)
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xFFAC84", Offset = "0xFFAC84", VA = "0xFFAC84")]
		public GrabbableBezierLine()
		{
		}
	}
	[Token(Token = "0x200032A")]
	public class GrabbableHaptics : GrabbableEvents
	{
		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HapticsOnValidPickup;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HapticsOnValidRemotePickup;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HapticsOnCollision;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HapticsOnGrab;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float VibrateFrequency;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float VibrateAmplitude;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float VibrateDuration;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xFFACA4", Offset = "0xFFACA4", VA = "0xFFACA4", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xFFAD90", Offset = "0xFFAD90", VA = "0xFFAD90", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xFFAD9C", Offset = "0xFFAD9C", VA = "0xFFAD9C", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xFFADAC", Offset = "0xFFADAC", VA = "0xFFADAC", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xFFACF4", Offset = "0xFFACF4", VA = "0xFFACF4")]
		private void doHaptics(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xFFADBC", Offset = "0xFFADBC", VA = "0xFFADBC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xFFAEC4", Offset = "0xFFAEC4", VA = "0xFFAEC4")]
		public GrabbableHaptics()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class GrabbableHighlight : GrabbableEvents
	{
		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xFFAEEC", Offset = "0xFFAEEC", VA = "0xFFAEEC", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xFFAEF4", Offset = "0xFFAEF4", VA = "0xFFAEF4", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xFFAEFC", Offset = "0xFFAEFC", VA = "0xFFAEFC", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xFFAF00", Offset = "0xFFAF00", VA = "0xFFAF00", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xFFAF04", Offset = "0xFFAF04", VA = "0xFFAF04", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xFFAEF8", Offset = "0xFFAEF8", VA = "0xFFAEF8")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xFFAEF0", Offset = "0xFFAEF0", VA = "0xFFAEF0")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xFFAF08", Offset = "0xFFAF08", VA = "0xFFAF08")]
		public GrabbableHighlight()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class GrabbableHighlightMaterial : GrabbableEvents
	{
		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Materials to assign to Renderer when not being highlighted. ")]
		public List<Material> StandardMaterials;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Materials to assign to Renderer when being highlighted")]
		public List<Material> HighlightMaterials;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer Renderer;

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xFFAF18", Offset = "0xFFAF18", VA = "0xFFAF18")]
		private void Start()
		{
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xFFB118", Offset = "0xFFB118", VA = "0xFFB118", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xFFB1CC", Offset = "0xFFB1CC", VA = "0xFFB1CC", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xFFB28C", Offset = "0xFFB28C", VA = "0xFFB28C", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xFFB29C", Offset = "0xFFB29C", VA = "0xFFB29C", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xFFB2AC", Offset = "0xFFB2AC", VA = "0xFFB2AC", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xFFB1DC", Offset = "0xFFB1DC", VA = "0xFFB1DC")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xFFB11C", Offset = "0xFFB11C", VA = "0xFFB11C")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xFFB2BC", Offset = "0xFFB2BC", VA = "0xFFB2BC")]
		public GrabbableHighlightMaterial()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class GrabbableRingHelper : GrabbableEvents
	{
		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RingOnValidPickup;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool RingOnValidRemotePickup;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RingHelperScale;

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xFFB2CC", Offset = "0xFFB2CC", VA = "0xFFB2CC")]
		private void Start()
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xFFB640", Offset = "0xFFB640", VA = "0xFFB640")]
		public GrabbableRingHelper()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class GrabPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x200032F")]
		public enum HandMovement
		{
			[Token(Token = "0x40012CB")]
			Instant,
			[Token(Token = "0x40012CC")]
			Lerp,
			[Token(Token = "0x40012CD")]
			None
		}

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Movement")]
		[Tooltip("How to move the hand to the nearest grab point. If set to 'None', the hand model will remain at the controller.")]
		public HandMovement MoveInStyle;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How to move the hand back to the grabber")]
		public HandMovement MoveOutStyle;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How to fast to move the hand if MovementStyle = 'Lerp' or 'Linear'")]
		public float HandSpeed;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the hand model will continue to move towards the closest grab point. If false, the hand will only move towards the closest grab point once upon entering the trigger.")]
		public bool LiveUpdateNearestGrabPoint;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Grabbable Options")]
		[Tooltip("If specified this Grabbable will be grabbed if the user holds down the grab button while this preview is active")]
		public Grabbable GrabObject;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified this Grabbable must be held for this component to work")]
		public Grabbable OtherGrabbableMustBeHeld;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Grab Points to move towards when the grabber is within the Trigger area.")]
		public List<GrabPoint> GrabPoints;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable dummyGrabbable;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabPoint closestPoint;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber grabberInTrigger;

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xFFB65C", Offset = "0xFFB65C", VA = "0xFFB65C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xFFB9B8", Offset = "0xFFB9B8", VA = "0xFFB9B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xFFBE64", Offset = "0xFFBE64", VA = "0xFFBE64", Slot = "4")]
		public virtual void UpdateGrabPoint(GrabPoint newPoint)
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xFFC004", Offset = "0xFFC004", VA = "0xFFC004")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xFFC270", Offset = "0xFFC270", VA = "0xFFC270")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xFFBE04", Offset = "0xFFBE04", VA = "0xFFBE04")]
		private void setGrabber(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xFFC3B4", Offset = "0xFFC3B4", VA = "0xFFC3B4", Slot = "5")]
		public virtual void ReleaseGrabber()
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xFFC494", Offset = "0xFFC494", VA = "0xFFC494")]
		public GrabPointTrigger()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class LineToTransform : MonoBehaviour
	{
		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ConnectTo;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xFFC4AC", Offset = "0xFFC4AC", VA = "0xFFC4AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xFFC4B0", Offset = "0xFFC4B0", VA = "0xFFC4B0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xFFC4B4", Offset = "0xFFC4B4", VA = "0xFFC4B4")]
		public void UpdateLine()
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xFFC668", Offset = "0xFFC668", VA = "0xFFC668")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xFFC66C", Offset = "0xFFC66C", VA = "0xFFC66C")]
		public LineToTransform()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class LookAtTransform : MonoBehaviour
	{
		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseLerp;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Speed;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseUpdate;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool UseLateUpdate;

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xFFC674", Offset = "0xFFC674", VA = "0xFFC674")]
		private void Update()
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xFFC874", Offset = "0xFFC874", VA = "0xFFC874")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xFFC684", Offset = "0xFFC684", VA = "0xFFC684")]
		private void lookAt()
		{
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xFFC884", Offset = "0xFFC884", VA = "0xFFC884")]
		public LookAtTransform()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public class PlaySoundOnGrab : GrabbableEvents
	{
		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SoundToPlay;

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xFFC8A0", Offset = "0xFFC8A0", VA = "0xFFC8A0", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xFFC968", Offset = "0xFFC968", VA = "0xFFC968")]
		public PlaySoundOnGrab()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class PunctureCollider : MonoBehaviour
	{
		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Minimum distance (in meters) an object must be attached once punctured. Upon initial puncture the object will be inserted this distance from the puncture point.")]
		[Header("Puncture properties : ")]
		public float FRequiredPenetrationForce;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Minimum distance (in meters) an object must be attached once punctured. Upon initial puncture the object will be inserted this distance from the puncture point.")]
		public float MinPenetration;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Minimum distance the object can be penetrated (in meters).")]
		public float MaxPenetration;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How far away the object must be from it's entry point to consider breaking the joint. Set to 0 if you do not want to break the joint based on distance.")]
		public float BreakDistance;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How far away the object must be from it's entry point to consider breaking the joint. Set to 0 if you do not want to break the joint based on distance.")]
		public List<Collider> PunctureColliders;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Shown for Debug : ")]
		[Tooltip("Is the object currently embedded in another object?")]
		public bool HasPunctured;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The object currently embedded in")]
		public GameObject PuncturedObject;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How far (in meters) our object has been embedded into")]
		public float PunctureValue;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float previousPunctureValue;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Collider col;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Collider hitCollilder;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Collider[] ignoreColliders;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigid;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject jointHelper;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody jointHelperRigid;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint jointHelperJoint;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FixedJoint fj;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float yPuncture;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float yPunctureMin;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float yPunctureMax;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float TargetDistance;

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xFFC970", Offset = "0xFFC970", VA = "0xFFC970")]
		private void Start()
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xFFCA50", Offset = "0xFFCA50", VA = "0xFFCA50")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xFFCBC4", Offset = "0xFFCBC4", VA = "0xFFCBC4", Slot = "4")]
		public virtual void UpdatePunctureValue()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xFFCD60", Offset = "0xFFCD60", VA = "0xFFCD60", Slot = "5")]
		public virtual void MovePunctureUp()
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xFFCE10", Offset = "0xFFCE10", VA = "0xFFCE10", Slot = "6")]
		public virtual void MovePunctureDown()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xFFCEC0", Offset = "0xFFCEC0", VA = "0xFFCEC0", Slot = "7")]
		public virtual void CheckBreakDistance()
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xFFD148", Offset = "0xFFD148", VA = "0xFFD148", Slot = "8")]
		public virtual void CheckPunctureRelease()
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xFFD1F0", Offset = "0xFFD1F0", VA = "0xFFD1F0", Slot = "9")]
		public virtual void AdjustJointMass()
		{
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xFFD2F4", Offset = "0xFFD2F4", VA = "0xFFD2F4", Slot = "10")]
		public virtual void ApplyResistanceForce()
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xFFD3F0", Offset = "0xFFD3F0", VA = "0xFFD3F0", Slot = "11")]
		public virtual void DoPuncture(Collider colliderHit, Vector3 connectPosition)
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xFFD7F4", Offset = "0xFFD7F4", VA = "0xFFD7F4")]
		public void SetPenetration(float penetrationAmount)
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xFFCF84", Offset = "0xFFCF84", VA = "0xFFCF84")]
		public void ReleasePuncture()
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xFFD8FC", Offset = "0xFFD8FC", VA = "0xFFD8FC", Slot = "12")]
		public virtual bool CanPunctureObject(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xFFD9C0", Offset = "0xFFD9C0", VA = "0xFFD9C0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xFFDB9C", Offset = "0xFFDB9C", VA = "0xFFDB9C")]
		public PunctureCollider()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class ReturnToSnapZone : MonoBehaviour
	{
		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The SnapZone to return to if not being held")]
		public SnapZone ReturnTo;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How fast to Lerp Towards the SnapZone")]
		public float LerpSpeed;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How long to wait before starting to Lerp the object back towards the SnapZone. In Seconds.")]
		public float ReturnDelay;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentDelay;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool useGravityInitial;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Initiate snap if distance between the Grabbable and SnapZone is <= SnapDistance")]
		public float SnapDistance;

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xFFDBB0", Offset = "0xFFDBB0", VA = "0xFFDBB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xFFDC64", Offset = "0xFFDC64", VA = "0xFFDC64")]
		private void Update()
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xFFDD88", Offset = "0xFFDD88", VA = "0xFFDD88")]
		private void moveToSnapZone()
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xFFE024", Offset = "0xFFE024", VA = "0xFFE024")]
		public ReturnToSnapZone()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class RotateTowards : MonoBehaviour
	{
		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TargetTransform;

		[Token(Token = "0x6001495")]
		[Address(RVA = "0xFFE044", Offset = "0xFFE044", VA = "0xFFE044")]
		private void Update()
		{
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xFFE12C", Offset = "0xFFE12C", VA = "0xFFE12C")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class RotateWithHMD : MonoBehaviour
	{
		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to rotate along with")]
		public Transform FollowTransform;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Character Capsule to  rotate along with")]
		public CharacterController Character;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 Offset;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RotateSpeed;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MovementSmoothing;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 velocity;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true this transform will be parented to the characterController. Set this to true if you want the position and rotation to align with the character controller without delay.")]
		public bool ParentToCharacter;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform originalParent;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform followTransform;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform camTransform;

		[Token(Token = "0x6001497")]
		[Address(RVA = "0xFFE134", Offset = "0xFFE134", VA = "0xFFE134")]
		private void Start()
		{
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xFFE340", Offset = "0xFFE340", VA = "0xFFE340")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xFFE344", Offset = "0xFFE344", VA = "0xFFE344")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xFFE74C", Offset = "0xFFE74C", VA = "0xFFE74C")]
		public RotateWithHMD()
		{
		}
	}
	[Token(Token = "0x2000337")]
	public class ScaleBetweenPoints : MonoBehaviour
	{
		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Begin;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform End;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool DoUpdate;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DoLateUpdate;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool LookAtTarget;

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xFFE7B8", Offset = "0xFFE7B8", VA = "0xFFE7B8")]
		private void Update()
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xFFE9BC", Offset = "0xFFE9BC", VA = "0xFFE9BC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xFFE7C8", Offset = "0xFFE7C8", VA = "0xFFE7C8")]
		private void doScale()
		{
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xFFE9CC", Offset = "0xFFE9CC", VA = "0xFFE9CC")]
		public ScaleBetweenPoints()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class ScreenFader : MonoBehaviour
	{
		[Token(Token = "0x2000339")]
		[CompilerGenerated]
		private sealed class <fadeOutWithDelay>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001310")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001311")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001312")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySeconds;

			[Token(Token = "0x4001313")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x170001EC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014AF")]
				[Address(RVA = "0xFFF610", Offset = "0xFFF610", VA = "0xFFF610", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014B1")]
				[Address(RVA = "0xFFF658", Offset = "0xFFF658", VA = "0xFFF658", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014AC")]
			[Address(RVA = "0xFFF0C4", Offset = "0xFFF0C4", VA = "0xFFF0C4")]
			[DebuggerHidden]
			public <fadeOutWithDelay>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x60014AD")]
			[Address(RVA = "0xFFF54C", Offset = "0xFFF54C", VA = "0xFFF54C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014AE")]
			[Address(RVA = "0xFFF550", Offset = "0xFFF550", VA = "0xFFF550", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014B0")]
			[Address(RVA = "0xFFF618", Offset = "0xFFF618", VA = "0xFFF618", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033A")]
		[CompilerGenerated]
		private sealed class <doFade>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001314")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001315")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float alphaFrom;

			[Token(Token = "0x4001317")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x4001318")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float alphaTo;

			[Token(Token = "0x4001319")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <alpha>5__2;

			[Token(Token = "0x170001EE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014B5")]
				[Address(RVA = "0xFFF80C", Offset = "0xFFF80C", VA = "0xFFF80C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014B7")]
				[Address(RVA = "0xFFF854", Offset = "0xFFF854", VA = "0xFFF854", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014B2")]
			[Address(RVA = "0xFFF384", Offset = "0xFFF384", VA = "0xFFF384")]
			[DebuggerHidden]
			public <doFade>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60014B3")]
			[Address(RVA = "0xFFF660", Offset = "0xFFF660", VA = "0xFFF660", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014B4")]
			[Address(RVA = "0xFFF664", Offset = "0xFFF664", VA = "0xFFF664", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014B6")]
			[Address(RVA = "0xFFF814", Offset = "0xFFF814", VA = "0xFFF814", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Should the screen fade in when a new level is loaded")]
		public bool FadeOnSceneLoaded;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Color of the fade. Alpha will be modified when fading in / out")]
		public Color FadeColor;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to fade in / out")]
		public float FadeInSpeed;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutSpeed;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Wait X seconds before fading scene in")]
		public float SceneFadeInDelay;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject fadeObject;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform fadeObjectRect;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas fadeCanvas;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Image fadeImage;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IEnumerator fadeRoutine;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string faderName;

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xFFE9DC", Offset = "0xFFE9DC", VA = "0xFFE9DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xFFE9E8", Offset = "0xFFE9E8", VA = "0xFFE9E8", Slot = "4")]
		protected virtual void initialize()
		{
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xFFEE14", Offset = "0xFFEE14", VA = "0xFFEE14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xFFEEE8", Offset = "0xFFEEE8", VA = "0xFFEEE8")]
		private void ForceFade()
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xFFEEF4", Offset = "0xFFEEF4", VA = "0xFFEEF4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xFFEF98", Offset = "0xFFEF98", VA = "0xFFEF98")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xFFF040", Offset = "0xFFF040", VA = "0xFFF040")]
		[IteratorStateMachine(typeof(<fadeOutWithDelay>d__18))]
		private IEnumerator fadeOutWithDelay(float delaySeconds)
		{
			return null;
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xFFF0EC", Offset = "0xFFF0EC", VA = "0xFFF0EC", Slot = "5")]
		public virtual void DoFadeIn()
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xFFF240", Offset = "0xFFF240", VA = "0xFFF240", Slot = "6")]
		public virtual void DoFadeOut()
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xFFF2AC", Offset = "0xFFF2AC", VA = "0xFFF2AC", Slot = "7")]
		public virtual void SetFadeLevel(float fadeLevel)
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xFFF1B4", Offset = "0xFFF1B4", VA = "0xFFF1B4")]
		[IteratorStateMachine(typeof(<doFade>d__22))]
		private IEnumerator doFade(float alphaFrom, float alphaTo)
		{
			return null;
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xFFF3AC", Offset = "0xFFF3AC", VA = "0xFFF3AC", Slot = "8")]
		protected virtual void updateImageAlpha(float alphaValue)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xFFF4CC", Offset = "0xFFF4CC", VA = "0xFFF4CC")]
		public ScreenFader()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public class SnapZoneRingHelper : MonoBehaviour
	{
		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SnapZone Snap;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color RestingColor;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color ValidSnapColor;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RestingScale;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float ValidSnapScale;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CanvasScaler ringCanvas;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text ringText;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabbablesInTrigger nearbyGrabbables;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool validSnap;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ScaleSpeed;

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xFFF85C", Offset = "0xFFF85C", VA = "0xFFF85C")]
		private void Start()
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xFFF928", Offset = "0xFFF928", VA = "0xFFF928")]
		private void Update()
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xFFF9FC", Offset = "0xFFF9FC", VA = "0xFFF9FC")]
		private bool checkIsValidSnap()
		{
			return default(bool);
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xFFFAD4", Offset = "0xFFFAD4", VA = "0xFFFAD4")]
		public SnapZoneRingHelper()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class Tooltip : MonoBehaviour
	{
		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 TipOffset;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool UseWorldYAxis;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxViewDistance;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform childTransform;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DrawLineTo;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineToTransform lineTo;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lookAt;

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xFFFB00", Offset = "0xFFFB00", VA = "0xFFFB00")]
		private void Start()
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xFFFC3C", Offset = "0xFFFC3C", VA = "0xFFFC3C")]
		private void Update()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xFFFC48", Offset = "0xFFFC48", VA = "0xFFFC48", Slot = "4")]
		public virtual void UpdateTooltipPosition()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xFFFF90", Offset = "0xFFFF90", VA = "0xFFFF90")]
		public Tooltip()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class VelocityTracker : MonoBehaviour
	{
		[Token(Token = "0x200033E")]
		public enum VelocityTrackingType
		{
			[Token(Token = "0x4001338")]
			Device,
			[Token(Token = "0x4001339")]
			PerFrame
		}

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This setting determines how retrieve the velocity. If 'Device' is selected and ControllerHand is specified, then velocity will be retrieved from the connected physical controller. Otherwise velocity is calculated on a per frame basis.")]
		public VelocityTrackingType trackingType;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If ControllerHand is specified as Left or Right then velocity will attempt to be retrieved from the physical controller. If None, velocity will be calculated per frame.")]
		public ControllerHand controllerHand;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How many frames to use when averaging retrieving velocity using GetAveragedVelocity / GetAveragedAngularVelocity")]
		public float AverageVelocityCount;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 _velocity;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _angularVelocity;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _lastPosition;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion _lastRotation;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Vector3> previousVelocities;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector3> previousAngularVelocities;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float angle;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 axis;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject playSpace;

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xFFFFB8", Offset = "0xFFFFB8", VA = "0xFFFFB8")]
		private void Start()
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x1000010", Offset = "0x1000010", VA = "0x1000010")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x1000070", Offset = "0x1000070", VA = "0x1000070", Slot = "4")]
		public virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0x1000098", Offset = "0x1000098", VA = "0x1000098", Slot = "5")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x10001F4", Offset = "0x10001F4", VA = "0x10001F4", Slot = "6")]
		public virtual void UpdateAngularVelocity()
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x1000420", Offset = "0x1000420", VA = "0x1000420", Slot = "7")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x10005AC", Offset = "0x10005AC", VA = "0x10005AC", Slot = "8")]
		public virtual Vector3 GetAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x10005BC", Offset = "0x10005BC", VA = "0x10005BC", Slot = "9")]
		public virtual Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x10005C8", Offset = "0x10005C8", VA = "0x10005C8", Slot = "10")]
		public virtual Vector3 GetAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x10005D8", Offset = "0x10005D8", VA = "0x10005D8", Slot = "11")]
		public virtual Vector3 GetAveragedVector(List<Vector3> vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0x10006E0", Offset = "0x10006E0", VA = "0x10006E0")]
		public VelocityTracker()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class ArmSwingLocomotion : MonoBehaviour
	{
		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is used to move the character. Will be disabled on Start")]
		public CharacterController characterController;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Speed = Hand Controller Speed * SpeedModifier")]
		public float SpeedModifier;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Direction to move player. Will default to this transform if none provided")]
		public Transform ForwardDirection;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Minimum Velocity to allow movement. Increase this to avoid unwanted movement at slow speeds")]
		public float MinInput;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool MustBeHoldingLeftTrigger;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool MustBeHoldingRightTrigger;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool MustBeHoldingLeftGrip;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public bool MustBeHoldingRightGrip;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool disableMovement;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool disableArmSwing;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float armSpeed;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxSpeed;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float leftVelocity;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float rightVelocity;

		[Token(Token = "0x170001F0")]
		public float VelocitySum
		{
			[Token(Token = "0x60014CB")]
			[Address(RVA = "0x10007A4", Offset = "0x10007A4", VA = "0x10007A4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x10007B0", Offset = "0x10007B0", VA = "0x10007B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x10008A8", Offset = "0x10008A8", VA = "0x10008A8")]
		private void Update()
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x1000B44", Offset = "0x1000B44", VA = "0x1000B44", Slot = "4")]
		public virtual void UpdateMovement()
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x1000C24", Offset = "0x1000C24", VA = "0x1000C24")]
		private float GetSmoothValue(float curSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x10009B4", Offset = "0x10009B4", VA = "0x10009B4")]
		public void UpdateVelocities()
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x1000C68", Offset = "0x1000C68", VA = "0x1000C68", Slot = "5")]
		public virtual bool LeftInputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x1000D24", Offset = "0x1000D24", VA = "0x1000D24", Slot = "6")]
		public virtual bool RightInputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x1000DE0", Offset = "0x1000DE0", VA = "0x1000DE0")]
		public ArmSwingLocomotion()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public enum LocomotionType
	{
		[Token(Token = "0x4001349")]
		Teleport,
		[Token(Token = "0x400134A")]
		SmoothLocomotion,
		[Token(Token = "0x400134B")]
		None
	}
	[Token(Token = "0x2000341")]
	public class BNGPlayerController : MonoBehaviour
	{
		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Camera Options : ")]
		[Tooltip("If true the CharacterController will move along with the HMD, as long as there are no obstacle's in the way")]
		public bool MoveCharacterWithCamera;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If true the CharacterController will rotate it's Y angle to match the HMD's Y angle")]
		public bool RotateCharacterWithCamera;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If true the CharacterController will resize to match the calculated player height (distance from floor to camera)")]
		public bool ResizeCharacterHeightWithCamera;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The TrackingSpace represents your tracking space origin.")]
		[Header("Transform Setup ")]
		public Transform TrackingSpace;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The CameraRig is a Transform that is used to offset the main camera. The main camera should be parented to this.")]
		public Transform CameraRig;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The CenterEyeAnchor is typically the Transform that contains your Main Camera")]
		public Transform CenterEyeAnchor;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is grounded")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How far off the ground the player currently is. 0 = Grounded, 1 = 1 Meter in the air.")]
		public float DistanceFromGround;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("DistanceFromGround will subtract this value when determining distance from ground")]
		public float DistanceFromGroundOffset;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Minimum Height our Player's capsule collider can be (in meters)")]
		[Header("Player Capsule Settings : ")]
		public float MinimumCapsuleHeight;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum Height our Player's capsule collider can be (in meters)")]
		public float MaximumCapsuleHeight;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float LastTeleportTime;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Player Y Offset : ")]
		[Tooltip("Offset the height of the CharacterController by this amount")]
		public float CharacterControllerYOffset;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public float CameraHeight;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true the Camera will be offset by ElevateCameraHeight if no HMD is active or connected. This prevents the camera from falling to the floor and can allow you to use keyboard controls.")]
		[Header("Misc : ")]
		public bool ElevateCameraIfNoHMDPresent;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("How high (in meters) to elevate the player camera if no HMD is present and ElevateCameraIfNoHMDPresent is true. 1.65 = about 5.4' tall. ")]
		public float ElevateCameraHeight;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Minimum Y position our player is allowed to go. Useful for floating point precision and making sure player didn't fall through the map.")]
		public float MinElevation;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float MaxElevation;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float LastPlayerMoveTime;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected CharacterController characterController;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody playerRigid;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected CapsuleCollider playerCapsule;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected PlayerClimbing playerClimbing;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected bool isClimbing;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		protected bool wasClimbing;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public RaycastHit groundHit;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected RaycastHit hit;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform mainCamera;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 _initialPosition;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float SphereColliderRadius;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 moveTest;

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x1000E0C", Offset = "0x1000E0C", VA = "0x1000E0C")]
		private void Start()
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x1001020", Offset = "0x1001020", VA = "0x1001020")]
		private void Update()
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x10012D0", Offset = "0x10012D0", VA = "0x10012D0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x10012F8", Offset = "0x10012F8", VA = "0x10012F8", Slot = "4")]
		public virtual void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x1001508", Offset = "0x1001508", VA = "0x1001508", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x1001B70", Offset = "0x1001B70", VA = "0x1001B70", Slot = "6")]
		public virtual void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0x1001D30", Offset = "0x1001D30", VA = "0x1001D30", Slot = "7")]
		public virtual void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x1001F1C", Offset = "0x1001F1C", VA = "0x1001F1C", Slot = "8")]
		public virtual void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0x10021BC", Offset = "0x10021BC", VA = "0x10021BC", Slot = "9")]
		public virtual void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0x1002238", Offset = "0x1002238", VA = "0x1002238", Slot = "10")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x10024C4", Offset = "0x10024C4", VA = "0x10024C4", Slot = "11")]
		public virtual void CheckRigidbodyCapsuleMove(Vector3 movePosition)
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x1002630", Offset = "0x1002630", VA = "0x1002630", Slot = "12")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x10026CC", Offset = "0x10026CC", VA = "0x10026CC", Slot = "13")]
		public virtual void OnClimbingChange()
		{
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0x10026EC", Offset = "0x10026EC", VA = "0x10026EC")]
		public BNGPlayerController()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class Button : MonoBehaviour
	{
		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Local Y position of the button when it is pushed all the way down. Local Y position will never be less than this.")]
		public float MinLocalY;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The Local Y position of the button when it is not being pushed. Local Y position will never be greater than this.")]
		public float MaxLocalY;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How far away from MinLocalY / MaxLocalY to be considered a click")]
		public float ClickTolerance;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the button can be pressed by physical object by utiizing a Spring Joint. Set to false if you don't need / want physics interactions, or are using this on a moving platform.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Grabber> grabbers;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UITrigger> uiTriggers;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpringJoint joint;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool clickingDown;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip ButtonClick;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ButtonClickUp;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onButtonDown;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onButtonUp;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float ButtonSpeed;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float SpringForce;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 buttonDownPosition;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 buttonUpPosition;

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x1002744", Offset = "0x1002744", VA = "0x1002744")]
		private void Start()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x1002890", Offset = "0x1002890", VA = "0x1002890")]
		private void Update()
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x1002C84", Offset = "0x1002C84", VA = "0x1002C84", Slot = "4")]
		public virtual Vector3 GetButtonUpPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x1002CDC", Offset = "0x1002CDC", VA = "0x1002CDC", Slot = "5")]
		public virtual Vector3 GetButtonDownPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x1002D34", Offset = "0x1002D34", VA = "0x1002D34", Slot = "6")]
		public virtual void OnButtonDown()
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x1002DFC", Offset = "0x1002DFC", VA = "0x1002DFC", Slot = "7")]
		public virtual void OnButtonUp()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x1002EC4", Offset = "0x1002EC4", VA = "0x1002EC4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x10031D8", Offset = "0x10031D8", VA = "0x10031D8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x1003378", Offset = "0x1003378", VA = "0x1003378")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0x1003544", Offset = "0x1003544", VA = "0x1003544")]
		public Button()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class ControllerModelSelector : MonoBehaviour
	{
		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int disableIndex;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isQuitting;

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x1003648", Offset = "0x1003648", VA = "0x1003648")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0x10036EC", Offset = "0x10036EC", VA = "0x10036EC")]
		public void UpdateControllerModel()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x1003808", Offset = "0x1003808", VA = "0x1003808")]
		public void EnableChildController(int childIndex)
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0x1003898", Offset = "0x1003898", VA = "0x1003898")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x1003950", Offset = "0x1003950", VA = "0x1003950")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0x100395C", Offset = "0x100395C", VA = "0x100395C")]
		public ControllerModelSelector()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool BeingHeld;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Grabber> validGrabbers;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<Grabber> heldByGrabbers;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool wasKinematic;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool usedGravity;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected CollisionDetectionMode initialCollisionMode;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RigidbodyInterpolation initialInterpolationMode;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool remoteGrabbing;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Configure which button is used to initiate the grab")]
		[Header("Grab Settings")]
		public GrabButton GrabButton;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("'Inherit' will inherit this setting from the Grabber. 'Hold' requires the user to hold the GrabButton down. 'Toggle' will drop / release the Grabbable on button activation.")]
		public HoldType Grabtype;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Kinematic Physics locks the object in place on the hand / grabber. Physics Joint and Velocity types allow collisions with the environment.")]
		public GrabPhysics GrabPhysics;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Snap to a location or grab anywhere on the object")]
		public GrabType GrabMechanic;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the object to the hand")]
		public float GrabSpeed;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Can the object be picked up from far away. Must be within RemoteGrabber Trigger")]
		[Header("Remote Grab")]
		public bool RemoteGrabbable;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RemoteGrabMovement RemoteGrabMechanic;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Max Distance Object can be Remote Grabbed. Not applicable if RemoteGrabbable is false")]
		public float RemoteGrabDistance;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Multiply controller's velocity times this when throwing")]
		[Header("Throwing")]
		public float ThrowForceMultiplier;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Multiply controller's angular velocity times this when throwing")]
		public float ThrowForceMultiplierAngular;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Drop the item if object's center travels this far from the Grabber's Center (in meters). Set to 0 to disable distance break.")]
		public float BreakDistance;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Enabling this will hide the Transform specified in the Grabber's HandGraphics property")]
		[Header("Hand Options")]
		public bool HideHandGraphics;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[Tooltip("Parent this object to the hands for instantaneous movement. Object will travel 1:1 with the controller but may have trouble detecting fast moving collisions.")]
		public bool ParentToHands;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[Tooltip("If true, the hand model will be attached to the grabbed object. This separates it from a 1:1 match with the controller, but may look more realistic.")]
		public bool ParentHandModel;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		[Tooltip("If true, the hand model will snap to the nearest GrabPoint. Otherwise the hand model will stay with the Grabber.")]
		public bool SnapHandModel;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set to false to disable dropping. If false, will be permanently attached to whatever grabs this.")]
		[Header("Misc")]
		public bool CanBeDropped;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Can this object be snapped to snap zones? Set to false if you never want this to be snappable. Further filtering can be done on the SnapZones")]
		public bool CanBeSnappedToSnapZone;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[Tooltip("If true, the object will always have kinematic disabled when dropped, even if it was initially kinematic.")]
		public bool ForceDisableKinematicOnDrop;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[Tooltip("If true, the object will instantly position / rotate to the grabber instead of using velocity / force. This will only happen if no collisions have recently occurred. When using this method, the Grabbable's Rigidbody willbe instantly rotated / moved, taking in to account the interpolation settings. May clip through objects if moving fast enough.")]
		public bool InstantMovement;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If true, all child colliders will be considered Grabbable. If false, you will need to add the 'GrabbableChild' component to any child colliders that you wish to also be considered grabbable.")]
		public bool MakeChildCollidersGrabbable;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("A hand controller can read this value to determine how to animate when grabbing this object. 'AnimatorID' = specify an Animator ID to be set on the hand animator after grabbing this object. 'HandPose' = use a HandPose scriptable object. 'AutoPoseOnce' = DO an auto pose one time upon grabbing this object. 'AutoPoseContinuous' = Keep running attempting an autopose while grabbing this item.")]
		[Header("Default Hand Pose")]
		public HandPoseType handPoseType;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected HandPoseType initialHandPoseType;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If HandPoseType = 'HandPose', this HandPose object will be applied to the hand on pickup")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected HandPose initialHandPose;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("This HandPose Id will be passed to the Hand Animator when equipped. You can add new hand poses in the HandPoseDefinitions.cs file.")]
		public HandPoseId CustomHandPose;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected HandPoseId initialHandPoseId;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("What to do if another grabber grabs this while equipped.")]
		[Header("Two-Handed Grab Behavior")]
		public OtherGrabBehavior SecondaryGrabBehavior;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedPositionType TwoHandedPosition;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0f, 1f)]
		[Tooltip("How far to lerp between grabber positions. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's position, 1 = use the secondary grabber's position.")]
		public float TwoHandedPostionLerpAmount;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedRotationType TwoHandedRotation;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 1f)]
		[Tooltip("How far to lerp / slerp between grabber rotation. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's rotation, 1 = use the secondary grabber's position.")]
		public float TwoHandedRotationLerpAmount;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("How to repond if you are holding an object with two hands, and then drop the primary grabber. For example, you may want to drop the object, transfer it to the second hand, or do nothing at all.")]
		public TwoHandedDropMechanic TwoHandedDropBehavior;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Which vector to use when TwoHandedRotation = LookAtSecondary. Ex : Horizontal = A rifle type setup where you want to aim down the sites; Vertical = A melee type setup where the object is vertical")]
		public TwoHandedLookDirection TwoHandedLookVector;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How quickly to Lerp towards the SecondaryGrabbable if TwoHandedGrabBehavior = LookAt")]
		public float SecondHandLookSpeed;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("If specified, this object will be used as a secondary grabbable instead of relying on grab points on this object. If 'TwoHandedGrabBehavior' is specified as LookAt, this is the object the grabber will be rotated towards. If 'TwoHandedGrabBehavior' is specified as AveragePositionRotation, this is the object the grabber use to calculate position.")]
		[Header("Secondary Grabbale Object")]
		public Grabbable SecondaryGrabbable;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The Grabbable can only be grabbed if this grabbable is being held. Example : If you only want a weapon part to be grabbable if the weapon itself is being held.")]
		[Header("Grab Restrictions")]
		public Grabbable OtherGrabbableMustBeGrabbed;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("A higher Spring Force will make the Grabbable more rigid")]
		[Header("Physics Joint Settings")]
		public float CollisionSpring;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("How much Slerp Force to apply to the joint when something is in contact with the grabbable")]
		public float CollisionSlerp;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("How to restrict the Configurable Joint's xMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionX;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("How to restrict the Configurable Joint's yMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionY;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("How to restrict the Configurable Joint's zMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionZ;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("Restrict the rotation around the X axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionX;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Restrict the rotation around the Y axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionY;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Restrict the rotation around Z axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionZ;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("If true, the object's velocity will be adjusted to match the grabber. This is in addition to any forces added by the configurable joint.")]
		public bool ApplyCorrectiveForce;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Header("Velocity Grab Settings")]
		public float MoveVelocityForce;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float MoveAngularVelocityForce;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[HideInInspector]
		public float LastGrabTime;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public float LastDropTime;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[HideInInspector]
		public bool AddControllerVelocityOnDrop;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float journeyLength;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Header("Shown for Debug : ")]
		[SerializeField]
		public List<Collider> collisions;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform primaryGrabOffset;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Transform secondaryGrabOffset;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		public GrabPoint ActiveGrabPoint;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		public Vector3 SecondaryLookOffset;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		public Transform SecondaryLookAtTransform;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		public Transform LocalOffsetTransform;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Transform _grabTransform;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Transform _grabTransformSecondary;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Header("Grab Points")]
		[Tooltip("If Grab Mechanic is set to Snap, the closest GrabPoint will be used. Add a SnapPoint Component to a GrabPoint to specify custom hand poses and rotation.")]
		public List<Transform> GrabPoints;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool _canBeMoved;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected Transform originalParent;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected InputBridge input;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected ConfigurableJoint connectedJoint;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Vector3 previousPosition;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		protected float lastItemTeleportTime;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected bool recentlyTeleported;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		[HideInInspector]
		public bool UseCustomInspector;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private BNGPlayerController _player;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected Collider col;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected Rigidbody rigid;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected Grabber flyingTo;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected List<GrabbableEvents> events;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		protected bool didParentHands;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		private bool initiatedFlick;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float flickStartVelocity;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float FlickSpeed;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float lastFlickTime;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public float FlickForce;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private float angle;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Vector3 axis;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Vector3 angularTarget;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3 angularMovement;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private bool subscribedToEvents;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x215")]
		private bool grabbableIsLocked;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Transform _priorParent;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private Quaternion _priorLocalOffsetRotation;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Grabber _priorPrimaryGrabber;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool lockPos;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x249")]
		private bool lockRot;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		private int lockRequests;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private bool quitting;

		[Token(Token = "0x170001F1")]
		public bool BeingHeldWithTwoHands
		{
			[Token(Token = "0x60014F2")]
			[Address(RVA = "0x1003964", Offset = "0x1003964", VA = "0x1003964")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F2")]
		public List<Grabber> HeldByGrabbers
		{
			[Token(Token = "0x60014F3")]
			[Address(RVA = "0x1003A20", Offset = "0x1003A20", VA = "0x1003A20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		public bool RemoteGrabbing
		{
			[Token(Token = "0x60014F4")]
			[Address(RVA = "0x1003A28", Offset = "0x1003A28", VA = "0x1003A28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F4")]
		public Vector3 OriginalScale
		{
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0x1003A30", Offset = "0x1003A30", VA = "0x1003A30")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60014F6")]
			[Address(RVA = "0x1003A40", Offset = "0x1003A40", VA = "0x1003A40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public float lastCollisionSeconds
		{
			[Token(Token = "0x60014F7")]
			[Address(RVA = "0x1003A50", Offset = "0x1003A50", VA = "0x1003A50")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60014F8")]
			[Address(RVA = "0x1003A58", Offset = "0x1003A58", VA = "0x1003A58")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public float lastNoCollisionSeconds
		{
			[Token(Token = "0x60014F9")]
			[Address(RVA = "0x1003A60", Offset = "0x1003A60", VA = "0x1003A60")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60014FA")]
			[Address(RVA = "0x1003A68", Offset = "0x1003A68", VA = "0x1003A68")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public bool RecentlyCollided
		{
			[Token(Token = "0x60014FB")]
			[Address(RVA = "0x1003A70", Offset = "0x1003A70", VA = "0x1003A70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F8")]
		public float requestSpringTime
		{
			[Token(Token = "0x60014FC")]
			[Address(RVA = "0x1003AE8", Offset = "0x1003AE8", VA = "0x1003AE8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60014FD")]
			[Address(RVA = "0x1003AF0", Offset = "0x1003AF0", VA = "0x1003AF0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		private Vector3 grabPosition
		{
			[Token(Token = "0x60014FE")]
			[Address(RVA = "0x1003AF8", Offset = "0x1003AF8", VA = "0x1003AF8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001FA")]
		[HideInInspector]
		public Vector3 GrabPositionOffset
		{
			[Token(Token = "0x60014FF")]
			[Address(RVA = "0xFFB580", Offset = "0xFFB580", VA = "0xFFB580")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001FB")]
		[HideInInspector]
		public Vector3 GrabRotationOffset
		{
			[Token(Token = "0x6001500")]
			[Address(RVA = "0x1003B80", Offset = "0x1003B80", VA = "0x1003B80")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001FC")]
		public Transform grabTransform
		{
			[Token(Token = "0x6001501")]
			[Address(RVA = "0x1003C40", Offset = "0x1003C40", VA = "0x1003C40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FD")]
		public Transform grabTransformSecondary
		{
			[Token(Token = "0x6001502")]
			[Address(RVA = "0x1003D94", Offset = "0x1003D94", VA = "0x1003D94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FE")]
		public bool CanBeMoved
		{
			[Token(Token = "0x6001503")]
			[Address(RVA = "0x1003EFC", Offset = "0x1003EFC", VA = "0x1003EFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FF")]
		protected BNGPlayerController player
		{
			[Token(Token = "0x6001504")]
			[Address(RVA = "0xFF7D58", Offset = "0xFF7D58", VA = "0xFF7D58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000200")]
		public Grabber FlyingToGrabber
		{
			[Token(Token = "0x6001505")]
			[Address(RVA = "0x1003F04", Offset = "0x1003F04", VA = "0x1003F04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000201")]
		public bool DidParentHands
		{
			[Token(Token = "0x6001506")]
			[Address(RVA = "0x1003F0C", Offset = "0x1003F0C", VA = "0x1003F0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0x1003F14", Offset = "0x1003F14", VA = "0x1003F14")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0x100454C", Offset = "0x100454C", VA = "0x100454C", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x10059A8", Offset = "0x10059A8", VA = "0x10059A8", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x1005ADC", Offset = "0x1005ADC", VA = "0x1005ADC", Slot = "6")]
		public virtual Vector3 GetGrabberWithGrabPointOffset(Grabber grabber, Transform grabPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x1005C4C", Offset = "0x1005C4C", VA = "0x1005C4C", Slot = "7")]
		public virtual Quaternion GetGrabberWithOffsetWorldRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x1005320", Offset = "0x1005320", VA = "0x1005320")]
		protected void positionHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0x1005D0C", Offset = "0x1005D0C", VA = "0x1005D0C", Slot = "8")]
		public virtual bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0x1005DE4", Offset = "0x1005DE4", VA = "0x1005DE4", Slot = "9")]
		public virtual void UpdateRemoteGrab()
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0x1005E28", Offset = "0x1005E28", VA = "0x1005E28", Slot = "10")]
		public virtual void CheckRemoteGrabLinear()
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0x1006710", Offset = "0x1006710", VA = "0x1006710", Slot = "11")]
		public virtual void CheckRemoteGrabVelocity()
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0x1007268", Offset = "0x1007268", VA = "0x1007268", Slot = "12")]
		public virtual void InitiateFlick()
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0x100741C", Offset = "0x100741C", VA = "0x100741C")]
		public Vector3 GetVelocityToHitTargetByTime(Vector3 startPosition, Vector3 targetPosition, Vector3 gravityBase, float timeToTarget)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0x10078BC", Offset = "0x10078BC", VA = "0x10078BC", Slot = "13")]
		public virtual void CheckRemoteGrabFlick()
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x10079FC", Offset = "0x10079FC", VA = "0x10079FC", Slot = "14")]
		public virtual void UpdateFixedJoints()
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x1007D64", Offset = "0x1007D64", VA = "0x1007D64", Slot = "15")]
		public virtual void UpdatePhysicsJoints()
		{
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0x10081A8", Offset = "0x10081A8", VA = "0x10081A8")]
		private void setPositionSpring(float spring, float damper)
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0x1008334", Offset = "0x1008334", VA = "0x1008334")]
		private void setSlerpDrive(float slerp, float damper)
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0x100840C", Offset = "0x100840C", VA = "0x100840C", Slot = "16")]
		public virtual Vector3 GetGrabberVector3(Grabber grabber, bool isSecondary)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x1008460", Offset = "0x1008460", VA = "0x1008460", Slot = "17")]
		public virtual Quaternion GetGrabberQuaternion(Grabber grabber, bool isSecondary)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0x1007AA4", Offset = "0x1007AA4", VA = "0x1007AA4")]
		private void moveWithVelocity()
		{
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0x1008648", Offset = "0x1008648", VA = "0x1008648")]
		private void rotateWithVelocity()
		{
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0x10084A0", Offset = "0x10084A0", VA = "0x10084A0")]
		public Vector3 GetGrabbersAveragedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0x1006B60", Offset = "0x1006B60", VA = "0x1006B60")]
		public Quaternion GetGrabbersAveragedRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0x1008B28", Offset = "0x1008B28", VA = "0x1008B28", Slot = "18")]
		public virtual void UpdateKinematicPhysics()
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0x100918C", Offset = "0x100918C", VA = "0x100918C", Slot = "19")]
		public virtual void UpdateVelocityPhysics()
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0x1005068", Offset = "0x1005068", VA = "0x1005068")]
		private void checkParentHands(Grabber g)
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0x1004460", Offset = "0x1004460", VA = "0x1004460")]
		private bool canBeMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0x1005414", Offset = "0x1005414", VA = "0x1005414")]
		private void checkSecondaryLook()
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0x1008FC4", Offset = "0x1008FC4", VA = "0x1008FC4")]
		private void rotateGrabber(bool lerp = false)
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0x10094B4", Offset = "0x10094B4", VA = "0x10094B4")]
		public Transform GetGrabPoint()
		{
			return null;
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xFF7E00", Offset = "0xFF7E00", VA = "0xFF7E00", Slot = "20")]
		public virtual void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0x10095FC", Offset = "0x10095FC", VA = "0x10095FC", Slot = "21")]
		protected virtual void setupConfigJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0x100980C", Offset = "0x100980C", VA = "0x100980C", Slot = "22")]
		protected virtual void setupFixedJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0x100991C", Offset = "0x100991C", VA = "0x100991C", Slot = "23")]
		protected virtual void setupKinematicGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0x1009A2C", Offset = "0x1009A2C", VA = "0x1009A2C", Slot = "24")]
		protected virtual void setupVelocityGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0x1009A78", Offset = "0x1009A78", VA = "0x1009A78", Slot = "25")]
		public virtual void GrabRemoteItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0x1009B84", Offset = "0x1009B84", VA = "0x1009B84", Slot = "26")]
		public virtual void ResetGrabbing()
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0x1009C60", Offset = "0x1009C60", VA = "0x1009C60", Slot = "27")]
		public virtual void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0x10093C4", Offset = "0x10093C4", VA = "0x10093C4")]
		private void clearLookAtTransform()
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0x1004B54", Offset = "0x1004B54", VA = "0x1004B54")]
		private void callEvents(Grabber g)
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xFF8874", Offset = "0xFF8874", VA = "0xFF8874", Slot = "28")]
		public virtual void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0x100A754", Offset = "0x100A754", VA = "0x100A754", Slot = "29")]
		public virtual void DropItem(bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0x100A7A4", Offset = "0x100A7A4", VA = "0x100A7A4")]
		public void ResetScale()
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0x100A450", Offset = "0x100A450", VA = "0x100A450")]
		public void ResetParent()
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0x100A7D4", Offset = "0x100A7D4", VA = "0x100A7D4")]
		public void UpdateOriginalParent(Transform newOriginalParent)
		{
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0x100A7E4", Offset = "0x100A7E4", VA = "0x100A7E4")]
		public void UpdateOriginalParent()
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0x100A818", Offset = "0x100A818", VA = "0x100A818")]
		public ControllerHand GetControllerHand(Grabber g)
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0x100A890", Offset = "0x100A890", VA = "0x100A890", Slot = "30")]
		public virtual Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0x100A9C4", Offset = "0x100A9C4", VA = "0x100A9C4", Slot = "31")]
		public virtual Grabber GetClosestGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0x100AB70", Offset = "0x100AB70", VA = "0x100AB70", Slot = "32")]
		public virtual Transform GetClosestGrabPoint(Grabber grabber)
		{
			return null;
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0x100AEA0", Offset = "0x100AEA0", VA = "0x100AEA0", Slot = "33")]
		public virtual void Release(Vector3 velocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0x100AFE0", Offset = "0x100AFE0", VA = "0x100AFE0", Slot = "34")]
		public virtual bool IsValidCollision(Collision collision)
		{
			return default(bool);
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0x100B018", Offset = "0x100B018", VA = "0x100B018", Slot = "35")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0x100B1B0", Offset = "0x100B1B0", VA = "0x100B1B0", Slot = "36")]
		public virtual void parentHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0x1009714", Offset = "0x1009714", VA = "0x1009714")]
		private void setupConfigJoint(Grabber g)
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0x100A478", Offset = "0x100A478", VA = "0x100A478")]
		private void removeConfigJoint()
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0x10094BC", Offset = "0x10094BC", VA = "0x10094BC")]
		private void addGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0x100A54C", Offset = "0x100A54C", VA = "0x100A54C")]
		private void removeGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0x1006564", Offset = "0x1006564", VA = "0x1006564")]
		private void movePosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0x1006634", Offset = "0x1006634", VA = "0x1006634")]
		private void moveRotation(Quaternion worldRotation)
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0x1008F84", Offset = "0x1008F84", VA = "0x1008F84")]
		protected Vector3 getRemotePosition(Grabber toGrabber)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x1006330", Offset = "0x1006330", VA = "0x1006330")]
		protected Quaternion getRemoteRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0x10049E0", Offset = "0x10049E0", VA = "0x10049E0")]
		private void filterCollisions()
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0x100B2A4", Offset = "0x100B2A4", VA = "0x100B2A4", Slot = "37")]
		public virtual BNGPlayerController GetBNGPlayerController()
		{
			return null;
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0x100B3E0", Offset = "0x100B3E0", VA = "0x100B3E0", Slot = "38")]
		public virtual void RequestSpringTime(float seconds)
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0x100B418", Offset = "0x100B418", VA = "0x100B418", Slot = "39")]
		public virtual void AddValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0x100B558", Offset = "0x100B558", VA = "0x100B558", Slot = "40")]
		public virtual void RemoveValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0x100B5E8", Offset = "0x100B5E8", VA = "0x100B5E8", Slot = "41")]
		public virtual void SubscribeToMoveEvents()
		{
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x100B878", Offset = "0x100B878", VA = "0x100B878", Slot = "42")]
		public virtual void UnsubscribeFromMoveEvents()
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x100BAF4", Offset = "0x100BAF4", VA = "0x100BAF4", Slot = "43")]
		public virtual void LockGrabbable()
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0x100BB10", Offset = "0x100BB10", VA = "0x100BB10", Slot = "44")]
		public virtual void LockGrabbableWithRotation()
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0x100BB2C", Offset = "0x100BB2C", VA = "0x100BB2C", Slot = "45")]
		public virtual void RequestLockGrabbable()
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0x100BCF0", Offset = "0x100BCF0", VA = "0x100BCF0", Slot = "46")]
		public virtual void RequestUnlockGrabbable()
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0x100BD20", Offset = "0x100BD20", VA = "0x100BD20", Slot = "47")]
		public virtual void ResetLockResets()
		{
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0x100BDD8", Offset = "0x100BDD8", VA = "0x100BDD8", Slot = "48")]
		public virtual void LockGrabbable(bool lockPosition, bool lockRotation, bool overridePriorLock)
		{
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0x100C014", Offset = "0x100C014", VA = "0x100C014", Slot = "49")]
		public virtual void UnlockGrabbable()
		{
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0x100C3C0", Offset = "0x100C3C0", VA = "0x100C3C0")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0x100C588", Offset = "0x100C588", VA = "0x100C588")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0x100C6B0", Offset = "0x100C6B0", VA = "0x100C6B0")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0x100C76C", Offset = "0x100C76C", VA = "0x100C76C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0x100C778", Offset = "0x100C778", VA = "0x100C778")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0x100C7A4", Offset = "0x100C7A4", VA = "0x100C7A4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xFF8890", Offset = "0xFF8890", VA = "0xFF8890")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public enum GrabType
	{
		[Token(Token = "0x40013EB")]
		Snap,
		[Token(Token = "0x40013EC")]
		Precise
	}
	[Token(Token = "0x2000346")]
	public enum RemoteGrabMovement
	{
		[Token(Token = "0x40013EE")]
		Linear,
		[Token(Token = "0x40013EF")]
		Velocity,
		[Token(Token = "0x40013F0")]
		Flick
	}
	[Token(Token = "0x2000347")]
	public enum GrabPhysics
	{
		[Token(Token = "0x40013F2")]
		None = 2,
		[Token(Token = "0x40013F3")]
		PhysicsJoint = 0,
		[Token(Token = "0x40013F4")]
		FixedJoint = 3,
		[Token(Token = "0x40013F5")]
		Velocity = 4,
		[Token(Token = "0x40013F6")]
		Kinematic = 1
	}
	[Token(Token = "0x2000348")]
	public enum OtherGrabBehavior
	{
		[Token(Token = "0x40013F8")]
		None,
		[Token(Token = "0x40013F9")]
		SwapHands,
		[Token(Token = "0x40013FA")]
		DualGrab
	}
	[Token(Token = "0x2000349")]
	public enum TwoHandedPositionType
	{
		[Token(Token = "0x40013FC")]
		Lerp,
		[Token(Token = "0x40013FD")]
		None
	}
	[Token(Token = "0x200034A")]
	public enum TwoHandedRotationType
	{
		[Token(Token = "0x40013FF")]
		Lerp,
		[Token(Token = "0x4001400")]
		Slerp,
		[Token(Token = "0x4001401")]
		LookAtSecondary,
		[Token(Token = "0x4001402")]
		None
	}
	[Token(Token = "0x200034B")]
	public enum TwoHandedDropMechanic
	{
		[Token(Token = "0x4001404")]
		Drop,
		[Token(Token = "0x4001405")]
		Transfer,
		[Token(Token = "0x4001406")]
		None
	}
	[Token(Token = "0x200034C")]
	public enum TwoHandedLookDirection
	{
		[Token(Token = "0x4001408")]
		Horizontal,
		[Token(Token = "0x4001409")]
		Vertical
	}
	[Token(Token = "0x200034D")]
	public enum HandPoseType
	{
		[Token(Token = "0x400140B")]
		AnimatorID,
		[Token(Token = "0x400140C")]
		HandPose,
		[Token(Token = "0x400140D")]
		AutoPoseOnce,
		[Token(Token = "0x400140E")]
		AutoPoseContinuous,
		[Token(Token = "0x400140F")]
		None
	}
	[Token(Token = "0x200034E")]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Parent Grabbable Object to be grabbed.")]
		public Grabbable ParentGrabbable;

		[Token(Token = "0x600155A")]
		[Address(RVA = "0x100C8F4", Offset = "0x100C8F4", VA = "0x100C8F4")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x200034F")]
	[RequireComponent(typeof(Grabbable))]
	public abstract class GrabbableEvents : MonoBehaviour
	{
		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Grabbable grab;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Grabber thisGrabber;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected InputBridge input;

		[Token(Token = "0x600155B")]
		[Address(RVA = "0x100C8FC", Offset = "0x100C8FC", VA = "0x100C8FC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0x100CB5C", Offset = "0x100CB5C", VA = "0x100CB5C", Slot = "5")]
		public virtual void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0x100CB64", Offset = "0x100CB64", VA = "0x100CB64", Slot = "6")]
		public virtual void OnRelease()
		{
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0x100CB68", Offset = "0x100CB68", VA = "0x100CB68", Slot = "7")]
		public virtual void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0x100CB6C", Offset = "0x100CB6C", VA = "0x100CB6C", Slot = "8")]
		public virtual void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0x100CB70", Offset = "0x100CB70", VA = "0x100CB70", Slot = "9")]
		public virtual void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0x100CB74", Offset = "0x100CB74", VA = "0x100CB74", Slot = "10")]
		public virtual void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0x100CB78", Offset = "0x100CB78", VA = "0x100CB78", Slot = "11")]
		public virtual void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0x100CB7C", Offset = "0x100CB7C", VA = "0x100CB7C", Slot = "12")]
		public virtual void OnBecomesClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0x100CB80", Offset = "0x100CB80", VA = "0x100CB80", Slot = "13")]
		public virtual void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0x100CB84", Offset = "0x100CB84", VA = "0x100CB84", Slot = "14")]
		public virtual void OnNoLongerClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0x100CB88", Offset = "0x100CB88", VA = "0x100CB88", Slot = "15")]
		public virtual void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0x100CB8C", Offset = "0x100CB8C", VA = "0x100CB8C", Slot = "16")]
		public virtual void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0x100CB90", Offset = "0x100CB90", VA = "0x100CB90", Slot = "17")]
		public virtual void OnTriggerDown()
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0x100CB94", Offset = "0x100CB94", VA = "0x100CB94", Slot = "18")]
		public virtual void OnTriggerUp()
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0x100CB98", Offset = "0x100CB98", VA = "0x100CB98", Slot = "19")]
		public virtual void OnButton1()
		{
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0x100CB9C", Offset = "0x100CB9C", VA = "0x100CB9C", Slot = "20")]
		public virtual void OnButton1Down()
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0x100CBA0", Offset = "0x100CBA0", VA = "0x100CBA0", Slot = "21")]
		public virtual void OnButton1Up()
		{
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0x100CBA4", Offset = "0x100CBA4", VA = "0x100CBA4", Slot = "22")]
		public virtual void OnButton2()
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0x100CBA8", Offset = "0x100CBA8", VA = "0x100CBA8", Slot = "23")]
		public virtual void OnButton2Down()
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0x100CBAC", Offset = "0x100CBAC", VA = "0x100CBAC", Slot = "24")]
		public virtual void OnButton2Up()
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0x100CBB0", Offset = "0x100CBB0", VA = "0x100CBB0", Slot = "25")]
		public virtual void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0x100CBB4", Offset = "0x100CBB4", VA = "0x100CBB4", Slot = "26")]
		public virtual void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0x100CBB8", Offset = "0x100CBB8", VA = "0x100CBB8")]
		protected GrabbableEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000350")]
	public class FloatEvent : UnityEvent<float>
	{
		[Token(Token = "0x6001573")]
		[Address(RVA = "0x100CBC0", Offset = "0x100CBC0", VA = "0x100CBC0")]
		public FloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000351")]
	public class FloatFloatEvent : UnityEvent<float, float>
	{
		[Token(Token = "0x6001574")]
		[Address(RVA = "0x100CC08", Offset = "0x100CC08", VA = "0x100CC08")]
		public FloatFloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000352")]
	public class GrabberEvent : UnityEvent<Grabber>
	{
		[Token(Token = "0x6001575")]
		[Address(RVA = "0x100CC50", Offset = "0x100CC50", VA = "0x100CC50")]
		public GrabberEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000353")]
	public class GrabbableEvent : UnityEvent<Grabbable>
	{
		[Token(Token = "0x6001576")]
		[Address(RVA = "0x100CC98", Offset = "0x100CC98", VA = "0x100CC98")]
		public GrabbableEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000354")]
	public class RaycastHitEvent : UnityEvent<RaycastHit>
	{
		[Token(Token = "0x6001577")]
		[Address(RVA = "0x100CCE0", Offset = "0x100CCE0", VA = "0x100CCE0")]
		public RaycastHitEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000355")]
	public class Vector2Event : UnityEvent<Vector2>
	{
		[Token(Token = "0x6001578")]
		[Address(RVA = "0x100CD28", Offset = "0x100CD28", VA = "0x100CD28")]
		public Vector2Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000356")]
	public class Vector3Event : UnityEvent<Vector3>
	{
		[Token(Token = "0x6001579")]
		[Address(RVA = "0x100CD70", Offset = "0x100CD70", VA = "0x100CD70")]
		public Vector3Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000357")]
	public class PointerEventDataEvent : UnityEvent<PointerEventData>
	{
		[Token(Token = "0x600157A")]
		[Address(RVA = "0x100CDB8", Offset = "0x100CDB8", VA = "0x100CDB8")]
		public PointerEventDataEvent()
		{
		}
	}
	[Token(Token = "0x2000358")]
	public class GrabbablesInTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Collider, Grabbable> NearbyGrabbables;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Collider, Grabbable> ValidGrabbables;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<Collider, Grabbable> ValidRemoteGrabbables;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable ClosestRemoteGrabbable;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public bool FireGrabbableEvents;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If true, Grabbables in the trigger will only be considered valid if no objects are in the way between it and this transform")]
		[Header("Collision Checks")]
		public bool RaycastRemoteGrabbables;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[Tooltip(" If true, Remote Grabbables must not have any collisions between the Main Camera and the Remote Grabbable we are trying to reach. This can help prevent grabbing items through walls or around corners.")]
		public bool RemoteGrabbablesMustBeVisible;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("If RaycastRemoteGrabbables is true, use these layers to detect collisions between the grabber and the potential grabbable object. By Default only looking for collisions on the 'Default' layer")]
		public LayerMask RemoteCollisionLayers;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable _closest;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _lastDistance;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _thisDistance;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Collider, Grabbable> _valids;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Collider, Grabbable> _filtered;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform _eyeTransform;

		[Token(Token = "0x600157B")]
		[Address(RVA = "0x100CE00", Offset = "0x100CE00", VA = "0x100CE00")]
		private void Start()
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0x100CF50", Offset = "0x100CF50", VA = "0x100CF50")]
		private void Update()
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0x100CF68", Offset = "0x100CF68", VA = "0x100CF68")]
		private void updateClosestGrabbable()
		{
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0x100CFEC", Offset = "0x100CFEC", VA = "0x100CFEC")]
		private void updateClosestRemoteGrabbables()
		{
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0x100D2F0", Offset = "0x100D2F0", VA = "0x100D2F0", Slot = "4")]
		public virtual Grabbable GetClosestGrabbable(Dictionary<Collider, Grabbable> grabbables, bool remoteOnly = false, bool raycastCheck = false)
		{
			return null;
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0x100D6FC", Offset = "0x100D6FC", VA = "0x100D6FC", Slot = "5")]
		public virtual bool CheckObjectBetweenGrabbable(Vector3 startingPosition, Grabbable theGrabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0x100D098", Offset = "0x100D098", VA = "0x100D098")]
		public Dictionary<Collider, Grabbable> GetValidGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0x100D8C4", Offset = "0x100D8C4", VA = "0x100D8C4", Slot = "6")]
		protected virtual bool isValidGrabbable(Collider col, Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0x100DB2C", Offset = "0x100DB2C", VA = "0x100DB2C", Slot = "7")]
		public virtual Dictionary<Collider, Grabbable> SanitizeGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0x100DEA8", Offset = "0x100DEA8", VA = "0x100DEA8", Slot = "8")]
		public virtual void AddNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x100DFDC", Offset = "0x100DFDC", VA = "0x100DFDC", Slot = "9")]
		public virtual void RemoveNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x100E0B4", Offset = "0x100E0B4", VA = "0x100E0B4", Slot = "10")]
		public virtual void RemoveNearbyGrabbable(Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0x100E2A4", Offset = "0x100E2A4", VA = "0x100E2A4", Slot = "11")]
		public virtual void AddValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0x100E57C", Offset = "0x100E57C", VA = "0x100E57C", Slot = "12")]
		public virtual void RemoveValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0x100E654", Offset = "0x100E654", VA = "0x100E654")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0x100E7A4", Offset = "0x100E7A4", VA = "0x100E7A4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0x100E8CC", Offset = "0x100E8CC", VA = "0x100E8CC")]
		public GrabbablesInTrigger()
		{
		}
	}
	[Token(Token = "0x2000359")]
	public class GrabbableUnityEvents : GrabbableEvents
	{
		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent onGrab;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onRelease;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onBecomesClosestGrabbable;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onNoLongerClosestGrabbable;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onBecomesClosestRemoteGrabbable;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onNoLongerClosestRemoteGrabbable;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onGrip;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FloatEvent onTrigger;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onButton1;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onButton1Down;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onButton1Up;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UnityEvent onButton2;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent onButton2Down;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent onButton2Up;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent onSnapZoneEnter;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEvent onSnapZoneExit;

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x100E8FC", Offset = "0x100E8FC", VA = "0x100E8FC", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0x100E96C", Offset = "0x100E96C", VA = "0x100E96C", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0x100E980", Offset = "0x100E980", VA = "0x100E980", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0x100E994", Offset = "0x100E994", VA = "0x100E994", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0x100E9A8", Offset = "0x100E9A8", VA = "0x100E9A8", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0x100E9BC", Offset = "0x100E9BC", VA = "0x100E9BC", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0x100E9D0", Offset = "0x100E9D0", VA = "0x100E9D0", Slot = "15")]
		public override void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0x100EA3C", Offset = "0x100EA3C", VA = "0x100EA3C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0x100EAA8", Offset = "0x100EAA8", VA = "0x100EAA8", Slot = "17")]
		public override void OnTriggerDown()
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0x100EABC", Offset = "0x100EABC", VA = "0x100EABC", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0x100EAD0", Offset = "0x100EAD0", VA = "0x100EAD0", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0x100EAE4", Offset = "0x100EAE4", VA = "0x100EAE4", Slot = "20")]
		public override void OnButton1Down()
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0x100EAF8", Offset = "0x100EAF8", VA = "0x100EAF8", Slot = "21")]
		public override void OnButton1Up()
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0x100EB0C", Offset = "0x100EB0C", VA = "0x100EB0C", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0x100EB20", Offset = "0x100EB20", VA = "0x100EB20", Slot = "23")]
		public override void OnButton2Down()
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0x100EB34", Offset = "0x100EB34", VA = "0x100EB34", Slot = "24")]
		public override void OnButton2Up()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x100EB48", Offset = "0x100EB48", VA = "0x100EB48", Slot = "25")]
		public override void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0x100EB5C", Offset = "0x100EB5C", VA = "0x100EB5C", Slot = "26")]
		public override void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0x100EB70", Offset = "0x100EB70", VA = "0x100EB70")]
		public GrabbableUnityEvents()
		{
		}
	}
	[Token(Token = "0x200035A")]
	[RequireComponent(typeof(GrabbablesInTrigger))]
	public class Grabber : MonoBehaviour
	{
		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Which controller side. None if not attached to a controller.")]
		[Header("Hand Side")]
		public ControllerHand HandSide;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Grab Settings")]
		[Tooltip("The default hold type for all Grabbables. A Grabbable can manually override this default.")]
		public HoldType DefaultHoldType;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The default grab button for all Grabbables. A Grabbable can manually override this default.")]
		public GrabButton DefaultGrabButton;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Input Action used to enact grab action.")]
		public InputActionReference GrabAction;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Hold / Release")]
		[Tooltip("0-1 determine how much to consider a grip. Example : 0.75 is holding the grip down 3/4 of the way.")]
		[Range(0f, 1f)]
		public float GripAmount;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How much grip considered to release an object (0-1). Example : 0.75 is holding the grip down 3/4 of the way")]
		[Range(0f, 1f)]
		public float ReleaseGripAmount;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How many seconds to check for grab input while Grip is held down. After grip is held down for this long, grip will need to be repressed in order to pick up an object.")]
		public float GrabCheckSeconds;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float currentGrabTime;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Equip on Start")]
		[Tooltip("Assign a Grabbable here if you want to auto equip it on Start")]
		public Grabbable EquipGrabbableOnStart;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Root transform that holds hands models. We may want to hide these while holding certain objects, or parent this object to the grabbable so they follow the object perfectly.")]
		[Header("Hand Graphics")]
		public Transform HandsGraphics;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform handsGraphicsParent;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 handsGraphicsPosition;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion handsGraphicsRotation;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The Grabbable we are currently holding. Null if not holding anything.")]
		[Header("Shown for Debug :")]
		public Grabbable HeldGrabbable;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Same as holding down grip if set to true. Should not have same value as ForceRelease.")]
		public bool ForceGrab;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Force the release of grip if set to true. Should not have same value as ForceGrab.")]
		public bool ForceRelease;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Time.time when we last dropped a Grabbable")]
		public float LastDropTime;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable previousClosest;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabbable previousClosestRemote;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GrabbablesInTrigger grabsInTrigger;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Grabbable flyingGrabbable;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float flyingTime;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		public Vector3 PreviousPosition;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Transform DummyTransform;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Rigidbody rb;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputBridge input;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public bool FreshGrip;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Called immediately before a Grabbable object is officially grabbed")]
		[Header("Grabber Events")]
		public GrabbableEvent onGrabEvent;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Called immediately after a Grabbable object is grabbed. Use this if you need the Grabbable object to be setup before accessing it")]
		public GrabbableEvent onAfterGrabEvent;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Called immediately before droppping an item")]
		public GrabbableEvent onReleaseEvent;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public VelocityTracker velocityTracker;

		[Token(Token = "0x17000202")]
		public bool HoldingItem
		{
			[Token(Token = "0x600159F")]
			[Address(RVA = "0x100EB78", Offset = "0x100EB78", VA = "0x100EB78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000203")]
		public bool RemoteGrabbingItem
		{
			[Token(Token = "0x60015A0")]
			[Address(RVA = "0x100EBD8", Offset = "0x100EBD8", VA = "0x100EBD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000204")]
		public GrabbablesInTrigger GrabsInTrigger
		{
			[Token(Token = "0x60015A1")]
			[Address(RVA = "0x100EC38", Offset = "0x100EC38", VA = "0x100EC38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000205")]
		public Grabbable RemoteGrabbingGrabbable
		{
			[Token(Token = "0x60015A2")]
			[Address(RVA = "0x100EC40", Offset = "0x100EC40", VA = "0x100EC40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		public Vector3 handsGraphicsGrabberOffset
		{
			[Token(Token = "0x60015A3")]
			[Address(RVA = "0x100EC48", Offset = "0x100EC48", VA = "0x100EC48")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015A4")]
			[Address(RVA = "0x100EC54", Offset = "0x100EC54", VA = "0x100EC54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public Vector3 handsGraphicsGrabberOffsetRotation
		{
			[Token(Token = "0x60015A5")]
			[Address(RVA = "0x100EC60", Offset = "0x100EC60", VA = "0x100EC60")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015A6")]
			[Address(RVA = "0x100EC6C", Offset = "0x100EC6C", VA = "0x100EC6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0x100EC78", Offset = "0x100EC78", VA = "0x100EC78")]
		private void Start()
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0x100F144", Offset = "0x100F144", VA = "0x100F144")]
		private void Update()
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0x100F908", Offset = "0x100F908", VA = "0x100F908", Slot = "4")]
		protected virtual void updateFreshGrabStatus()
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x100F318", Offset = "0x100F318", VA = "0x100F318")]
		private void checkGrabbableEvents()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x100FA5C", Offset = "0x100FA5C", VA = "0x100FA5C", Slot = "5")]
		public virtual bool InputCheckGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0x100FB44", Offset = "0x100FB44", VA = "0x100FB44", Slot = "6")]
		public virtual bool GetInputDownForGrabbable(Grabbable grabObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0x100FCBC", Offset = "0x100FCBC", VA = "0x100FCBC")]
		private HoldType getHoldType(Grabbable grab)
		{
			return default(HoldType);
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0x100FE40", Offset = "0x100FE40", VA = "0x100FE40", Slot = "7")]
		public virtual GrabButton GetGrabButton(Grabbable grab)
		{
			return default(GrabButton);
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x100FA80", Offset = "0x100FA80", VA = "0x100FA80")]
		private Grabbable getClosestOrRemote()
		{
			return null;
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0x100F828", Offset = "0x100F828", VA = "0x100F828")]
		private bool inputCheckRelease()
		{
			return default(bool);
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0x100F97C", Offset = "0x100F97C", VA = "0x100F97C")]
		private float getGrabInput(GrabButton btn)
		{
			return default(float);
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x100FD54", Offset = "0x100FD54", VA = "0x100FD54")]
		private bool getToggleInput(GrabButton btn)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x100FED8", Offset = "0x100FED8", VA = "0x100FED8", Slot = "8")]
		public virtual bool TryGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x1010030", Offset = "0x1010030", VA = "0x1010030", Slot = "9")]
		public virtual void GrabGrabbable(Grabbable item)
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x10101B4", Offset = "0x10101B4", VA = "0x10101B4", Slot = "10")]
		public virtual void DidDrop()
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x10102D8", Offset = "0x10102D8", VA = "0x10102D8", Slot = "11")]
		public virtual void HideHandGraphics()
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x101036C", Offset = "0x101036C", VA = "0x101036C", Slot = "12")]
		public virtual void ResetHandGraphics()
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x1010468", Offset = "0x1010468", VA = "0x1010468", Slot = "13")]
		public virtual void TryRelease()
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x100F274", Offset = "0x100F274", VA = "0x100F274")]
		private void resetFlyingGrabbable()
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x10104FC", Offset = "0x10104FC", VA = "0x10104FC", Slot = "14")]
		public virtual Vector3 GetGrabberAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x101051C", Offset = "0x101051C", VA = "0x101051C", Slot = "15")]
		public virtual Vector3 GetGrabberAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x101053C", Offset = "0x101053C", VA = "0x101053C")]
		public Grabber()
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class GrabPoint : MonoBehaviour
	{
		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Pose")]
		public HandPoseType handPoseType;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If HandPoseType = 'HandPose', this HandPose object will be applied to the hand when this grab point is in use")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If HandPoseType = 'AnimatorID', this id will be set on the hand animator when grabbed. Set to 'Default' to inherit the Grabbable's HandPose. Otherwise this HandPose ID will be used.")]
		public HandPoseId HandPose;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Valid Hands")]
		[Tooltip("Can this Grab Point be used by a left-handed Grabber?")]
		public bool LeftHandIsValid;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Tooltip("Can this Grab Point be used by a right-handed Grabber?")]
		public bool RightHandIsValid;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Parent to")]
		[Tooltip("If specified, the Hand Model will be parented here when snapped")]
		public Transform HandPosition;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Angle Restriction")]
		[Tooltip("GrabPoint is not considered valid if the angle between the GrabPoint and Grabber is greater than this amount")]
		[Range(0f, 360f)]
		public float MaxDegreeDifferenceAllowed;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Finger Blending")]
		[Tooltip("Minimum value Hand Animator will blend to. Example : If IndexBlendMin = 0.4 and Trigger button is not held down, the LayerWeight will be set to 0.4")]
		[Range(0f, 1f)]
		public float IndexBlendMin;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Maximum value Hand Animator will blend to. Example : If IndexBlendMax = 0.6 and Trigger button is held all the way down, the LayerWeight will be set to 0.6")]
		[Range(0f, 1f)]
		public float IndexBlendMax;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		[Tooltip("Minimum value Hand Animator will blend to if thumb control is not being touched.")]
		public float ThumbBlendMin;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum value Hand Animator will blend to if thumb control is being touched.")]
		[Range(0f, 1f)]
		public float ThumbBlendMax;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 previewModelOffsetLeft;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 previewModelOffsetRight;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Editor")]
		[Tooltip("Show a green arc in the Scene view representing MaxDegreeDifferenceAllowed")]
		public bool ShowAngleGizmo;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool offsetFound;

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x1010560", Offset = "0x1010560", VA = "0x1010560")]
		public void UpdatePreviewTransforms()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x10108D4", Offset = "0x10108D4", VA = "0x10108D4")]
		public void UpdateHandPosePreview()
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0x1010A98", Offset = "0x1010A98", VA = "0x1010A98")]
		public void UpdateAutoPoserPreview()
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0x1010D50", Offset = "0x1010D50", VA = "0x1010D50")]
		public void UpdateChildAnimators()
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0x1010ED8", Offset = "0x1010ED8", VA = "0x1010ED8")]
		public GrabPoint()
		{
		}
	}
	[Token(Token = "0x200035C")]
	public class HandModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Child index of the hand model to use if nothing stored in playerprefs or LoadHandSelectionFromPrefs set to false")]
		public int DefaultHandsModel;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the selected hand model will be saved and loaded from player prefs")]
		public bool LoadHandSelectionFromPrefs;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input used to toggle between hands")]
		public ControllerBinding ToggleHandsInput;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options.")]
		public Transform LeftHandGFXHolder;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options")]
		public Transform RightHandGFXHolder;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _selectedHandGFX;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for IK Hands / Body option")]
		public CharacterIK IKBody;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UIPointer uiPoint;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Transform> leftHandModels;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform activatedLeftModel;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Transform> rightHandModels;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform activatedRightModel;

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0x1010F1C", Offset = "0x1010F1C", VA = "0x1010F1C")]
		private void Start()
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0x1011734", Offset = "0x1011734", VA = "0x1011734")]
		private void Update()
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0x1010FB8", Offset = "0x1010FB8", VA = "0x1010FB8")]
		public void CacheHandModels()
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0x10111D0", Offset = "0x10111D0", VA = "0x10111D0")]
		public void ChangeHandsModel(int childIndex, bool save = false)
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0x101176C", Offset = "0x101176C", VA = "0x101176C")]
		public HandModelSelector()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public class HeadCollisionFade : MonoBehaviour
	{
		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScreenFader fader;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeDistance;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float FadeOutDistance;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinFade;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxFade;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeSpeed;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Only fade the screen if the HMD is registering as Active")]
		public bool CheckOnlyIfHMDActive;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool IgnoreHeldGrabbables;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DistanceTransform;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cols;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float currentFade;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastFade;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Collider> collisions;

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0x1011784", Offset = "0x1011784", VA = "0x1011784")]
		private void Start()
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0x1011844", Offset = "0x1011844", VA = "0x1011844")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0x1011AF8", Offset = "0x1011AF8", VA = "0x1011AF8")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0x1011E08", Offset = "0x1011E08", VA = "0x1011E08")]
		private void OnCollisionExit(Collision col)
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0x1011F24", Offset = "0x1011F24", VA = "0x1011F24")]
		public HeadCollisionFade()
		{
		}
	}
	[Token(Token = "0x200035E")]
	public class HeadCollisionMove : MonoBehaviour
	{
		[Token(Token = "0x200035F")]
		[CompilerGenerated]
		private sealed class <PushBackPlayer>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001484")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001485")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001486")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HeadCollisionMove <>4__this;

			[Token(Token = "0x17000208")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015D4")]
				[Address(RVA = "0x10121CC", Offset = "0x10121CC", VA = "0x10121CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000209")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015D6")]
				[Address(RVA = "0x1012214", Offset = "0x1012214", VA = "0x1012214", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015D1")]
			[Address(RVA = "0x1012080", Offset = "0x1012080", VA = "0x1012080")]
			[DebuggerHidden]
			public <PushBackPlayer>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60015D2")]
			[Address(RVA = "0x1012108", Offset = "0x1012108", VA = "0x1012108", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x101210C", Offset = "0x101210C", VA = "0x101210C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015D5")]
			[Address(RVA = "0x10121D4", Offset = "0x10121D4", VA = "0x10121D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enable collision? Set to false if you don't want to enable this")]
		public bool CollisionEnabled;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Only collide against the specified World Tag?")]
		public bool OnlyCollideAgainstWorld;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string worldTag;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject cameraRig;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform centerEyeAnchor;

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0x1011F48", Offset = "0x1011F48", VA = "0x1011F48")]
		private void Start()
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0x1011F4C", Offset = "0x1011F4C", VA = "0x1011F4C")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0x1012024", Offset = "0x1012024", VA = "0x1012024")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0x1011FB0", Offset = "0x1011FB0", VA = "0x1011FB0")]
		[IteratorStateMachine(typeof(<PushBackPlayer>d__8))]
		private IEnumerator PushBackPlayer()
		{
			return null;
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0x10120A8", Offset = "0x10120A8", VA = "0x10120A8")]
		public HeadCollisionMove()
		{
		}
	}
	[Token(Token = "0x2000360")]
	public class HingeHelper : GrabbableEvents
	{
		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Snap Options")]
		[Tooltip("If True the SnapGraphics tranfsorm will have its local Y rotation snapped to the nearest degrees specified in SnapDegrees")]
		public bool SnapToDegrees;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Snap the Y rotation to the nearest")]
		public float SnapDegrees;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Transform of the object to be rotated if SnapToDegrees is true")]
		public Transform SnapGraphics;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Play this sound on snap")]
		public AudioClip SnapSound;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Randomize pitch of SnapSound by this amount")]
		public float RandomizePitch;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Add haptics amount (0-1) to controller if SnapToDegrees is True. Set this to 0 for no Haptics.")]
		public float SnapHaptics;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Text Label (Optional)")]
		public Text LabelToUpdate;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Change Events")]
		public FloatEvent onHingeChange;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onHingeSnapChange;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _lastDegrees;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _lastSnapDegrees;

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0x101221C", Offset = "0x101221C", VA = "0x101221C")]
		private void Start()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0x1012274", Offset = "0x1012274", VA = "0x1012274")]
		private void Update()
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0x1012510", Offset = "0x1012510", VA = "0x1012510")]
		public void OnSnapChange(float yAngle)
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0x10128B4", Offset = "0x10128B4", VA = "0x10128B4", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x10124A4", Offset = "0x10124A4", VA = "0x10124A4")]
		public void OnHingeChange(float hingeAmount)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x1012480", Offset = "0x1012480", VA = "0x1012480")]
		private float getSmoothedValue(float val)
		{
			return default(float);
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x1012960", Offset = "0x1012960", VA = "0x1012960")]
		public HingeHelper()
		{
		}
	}
	[Token(Token = "0x2000361")]
	public enum ControllerHand
	{
		[Token(Token = "0x4001494")]
		Left,
		[Token(Token = "0x4001495")]
		Right,
		[Token(Token = "0x4001496")]
		None
	}
	[Token(Token = "0x2000362")]
	public enum ControllerBinding
	{
		[Token(Token = "0x4001498")]
		None,
		[Token(Token = "0x4001499")]
		AButton,
		[Token(Token = "0x400149A")]
		AButtonDown,
		[Token(Token = "0x400149B")]
		BButton,
		[Token(Token = "0x400149C")]
		BButtonDown,
		[Token(Token = "0x400149D")]
		XButton,
		[Token(Token = "0x400149E")]
		XButtonDown,
		[Token(Token = "0x400149F")]
		YButton,
		[Token(Token = "0x40014A0")]
		YButtonDown,
		[Token(Token = "0x40014A1")]
		LeftTrigger,
		[Token(Token = "0x40014A2")]
		LeftTriggerDown,
		[Token(Token = "0x40014A3")]
		LeftGrip,
		[Token(Token = "0x40014A4")]
		LeftGripDown,
		[Token(Token = "0x40014A5")]
		LeftThumbstick,
		[Token(Token = "0x40014A6")]
		LeftThumbstickDown,
		[Token(Token = "0x40014A7")]
		RightTrigger,
		[Token(Token = "0x40014A8")]
		RightTriggerDown,
		[Token(Token = "0x40014A9")]
		RightGrip,
		[Token(Token = "0x40014AA")]
		RightGripDown,
		[Token(Token = "0x40014AB")]
		RightThumbstick,
		[Token(Token = "0x40014AC")]
		RightThumbstickDown,
		[Token(Token = "0x40014AD")]
		StartButton,
		[Token(Token = "0x40014AE")]
		StartButtonDown,
		[Token(Token = "0x40014AF")]
		BackButton,
		[Token(Token = "0x40014B0")]
		BackButtonDown
	}
	[Token(Token = "0x2000363")]
	public enum GrabbedControllerBinding
	{
		[Token(Token = "0x40014B2")]
		None,
		[Token(Token = "0x40014B3")]
		Button1,
		[Token(Token = "0x40014B4")]
		Button1Down,
		[Token(Token = "0x40014B5")]
		Button2,
		[Token(Token = "0x40014B6")]
		Button2Down,
		[Token(Token = "0x40014B7")]
		Trigger,
		[Token(Token = "0x40014B8")]
		TriggerDown,
		[Token(Token = "0x40014B9")]
		Grip,
		[Token(Token = "0x40014BA")]
		GripDown
	}
	[Token(Token = "0x2000364")]
	public enum InputAxis
	{
		[Token(Token = "0x40014BC")]
		None,
		[Token(Token = "0x40014BD")]
		LeftThumbStickAxis,
		[Token(Token = "0x40014BE")]
		LeftTouchPadAxis,
		[Token(Token = "0x40014BF")]
		RightThumbStickAxis,
		[Token(Token = "0x40014C0")]
		RightTouchPadAxis
	}
	[Token(Token = "0x2000365")]
	public enum ControllerType
	{
		[Token(Token = "0x40014C2")]
		None,
		[Token(Token = "0x40014C3")]
		Unknown,
		[Token(Token = "0x40014C4")]
		OculusTouch,
		[Token(Token = "0x40014C5")]
		Wand,
		[Token(Token = "0x40014C6")]
		Knuckles
	}
	[Token(Token = "0x2000366")]
	public enum HandControl
	{
		[Token(Token = "0x40014C8")]
		LeftGrip,
		[Token(Token = "0x40014C9")]
		RightGrip,
		[Token(Token = "0x40014CA")]
		LeftTrigger,
		[Token(Token = "0x40014CB")]
		RightTrigger,
		[Token(Token = "0x40014CC")]
		None
	}
	[Token(Token = "0x2000367")]
	public enum GrabButton
	{
		[Token(Token = "0x40014CE")]
		Grip,
		[Token(Token = "0x40014CF")]
		Trigger,
		[Token(Token = "0x40014D0")]
		Inherit
	}
	[Token(Token = "0x2000368")]
	public enum HoldType
	{
		[Token(Token = "0x40014D2")]
		HoldDown,
		[Token(Token = "0x40014D3")]
		Toggle,
		[Token(Token = "0x40014D4")]
		Inherit
	}
	[Token(Token = "0x2000369")]
	public enum XRInputSource
	{
		[Token(Token = "0x40014D6")]
		XRInput,
		[Token(Token = "0x40014D7")]
		OVRInput,
		[Token(Token = "0x40014D8")]
		SteamVR,
		[Token(Token = "0x40014D9")]
		Pico,
		[Token(Token = "0x40014DA")]
		UnityInput,
		[Token(Token = "0x40014DB")]
		WebXR,
		[Token(Token = "0x40014DC")]
		None
	}
	[Token(Token = "0x200036A")]
	public enum SDKProvider
	{
		[Token(Token = "0x40014DE")]
		Unknown,
		[Token(Token = "0x40014DF")]
		OculusSDK,
		[Token(Token = "0x40014E0")]
		OpenVR
	}
	[Token(Token = "0x200036B")]
	public class InputBridge : MonoBehaviour
	{
		[Token(Token = "0x200036C")]
		public delegate void InputsUpdatedAction();

		[Token(Token = "0x200036D")]
		public delegate void ControllerFoundAction();

		[Token(Token = "0x200036E")]
		[CompilerGenerated]
		private sealed class <changeOriginModeRoutine>d__178 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001546")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001547")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001548")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputBridge <>4__this;

			[Token(Token = "0x4001549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrackingOriginModeFlags trackingOrigin;

			[Token(Token = "0x17000212")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001631")]
				[Address(RVA = "0x1016B48", Offset = "0x1016B48", VA = "0x1016B48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000213")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001633")]
				[Address(RVA = "0x1016B90", Offset = "0x1016B90", VA = "0x1016B90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600162E")]
			[Address(RVA = "0x1016584", Offset = "0x1016584", VA = "0x1016584")]
			[DebuggerHidden]
			public <changeOriginModeRoutine>d__178(int <>1__state)
			{
			}

			[Token(Token = "0x600162F")]
			[Address(RVA = "0x1016918", Offset = "0x1016918", VA = "0x1016918", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001630")]
			[Address(RVA = "0x101691C", Offset = "0x101691C", VA = "0x101691C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001632")]
			[Address(RVA = "0x1016B50", Offset = "0x1016B50", VA = "0x1016B50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200036F")]
		[CompilerGenerated]
		private sealed class <Vibrate>d__180 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400154A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400154B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400154C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x17000214")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001637")]
				[Address(RVA = "0x1016C48", Offset = "0x1016C48", VA = "0x1016C48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000215")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001639")]
				[Address(RVA = "0x1016C90", Offset = "0x1016C90", VA = "0x1016C90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001634")]
			[Address(RVA = "0x101661C", Offset = "0x101661C", VA = "0x101661C")]
			[DebuggerHidden]
			public <Vibrate>d__180(int <>1__state)
			{
			}

			[Token(Token = "0x6001635")]
			[Address(RVA = "0x1016B98", Offset = "0x1016B98", VA = "0x1016B98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001636")]
			[Address(RVA = "0x1016B9C", Offset = "0x1016B9C", VA = "0x1016B9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001638")]
			[Address(RVA = "0x1016C50", Offset = "0x1016C50", VA = "0x1016C50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputBridge _instance;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input Settings")]
		[SerializeField]
		public XRInputSource InputSource;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Specify an InputActionSet for when using the Unity Input system. These actions will be enabled on load.")]
		[SerializeField]
		public InputActionAsset actionSet;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Set the TrackingOriginModeFlags on device connect. Should typically be set to 'Floor'")]
		[SerializeField]
		[Header("Tracking Origin")]
		public TrackingOriginModeFlags TrackingOrigin;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Thumbstick X must be greater than this amount to be considered valid")]
		[Header("Thumbstick Deadzone")]
		public float ThumbstickDeadzoneX;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Thumbstick Y must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneY;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Grip")]
		public float LeftGrip;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool LeftGripDown;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float RightGrip;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool RightGripDown;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Trigger")]
		public float LeftTrigger;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LeftTriggerNear;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool LeftTriggerUp;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool LeftTriggerDown;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float RightTrigger;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool RightTriggerUp;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RightTriggerDown;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool RightTriggerNear;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool LeftThumbNear;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool RightThumbNear;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Header("Thumbstick")]
		public bool LeftThumbstickDown;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool LeftThumbstickUp;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool RightThumbstickDown;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool RightThumbstickUp;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool LeftThumbstick;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool RightThumbstick;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[Header("Buttons")]
		public bool AButton;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Returns true if the A Button was pressed down this frame but not last")]
		public bool AButtonDown;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool AButtonUp;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool BButton;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		[Tooltip("Returns true if the B Button was pressed down this frame but not last")]
		public bool BButtonDown;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool BButtonUp;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool XButton;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[Tooltip("Returns true if the X Button was pressed down this frame but not last")]
		public bool XButtonDown;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool XButtonUp;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool YButton;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool YButtonDown;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool YButtonUp;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public bool StartButton;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool StartButtonDown;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool BackButton;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool BackButtonDown;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Axis")]
		public Vector2 LeftThumbstickAxis;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector2 RightThumbstickAxis;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector2 LeftTouchPadAxis;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector2 RightTouchPadAxis;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		[Header("Finger Tracking")]
		public float LeftThumbCurl;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float LeftIndexCurl;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float LeftMiddleCurl;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float LeftRingCurl;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float LeftPinkyCurl;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		public float RightThumbCurl;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float RightIndexCurl;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float RightMiddleCurl;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float RightRingCurl;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float RightPinkyCurl;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _downThreshold;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool SteamVRSupport;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Header("HMD / Hardware")]
		public ControllerType ConnectedControllerType;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Is there an HMD present and in use.")]
		public bool HMDActive;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[Tooltip("Returns true if the controller has both a Touchpad and a Joystick. Currently on the Valve Index has both.")]
		public bool SupportsBothTouchPadAndJoystick;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		[Tooltip("Returns true if the controllers support the 'indexTouch' XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsIndexTouch;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		[Tooltip("Returns true if the controllers support the 'ThumbTouch' (or near thumbstick) XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsThumbTouch;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InputAction leftGrip;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputAction leftTrigger;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputAction leftTriggerNear;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private InputAction rightGrip;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InputAction rightTrigger;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private InputAction rightTriggerNear;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputAction leftThumbstick;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private InputAction leftThumbstickDown;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private InputAction leftThumbNear;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private InputAction leftTouchpad;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private InputAction leftTouchpadDown;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private InputAction rightThumbstick;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private InputAction rightThumbstickDown;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private InputAction rightThumbNear;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private InputAction rightTouchpad;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private InputAction rightTouchpadDown;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private InputAction aButton;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private InputAction bButton;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private InputAction xButton;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private InputAction yButton;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private InputAction startButton;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private InputAction backButton;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[HideInInspector]
		public bool ShowInputDebugger;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private UnityEngine.XR.InputDevice primaryLeftController;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private UnityEngine.XR.InputDevice primaryRightController;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private InputFeatureUsage<Vector2> thumbstickAxis;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private InputFeatureUsage<Vector2> thumbstickAxisSecondary;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private InputFeatureUsage<bool> thumbstickAxisClick;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool setTrackingOrigin;

		[Token(Token = "0x1700020A")]
		public static InputBridge Instance
		{
			[Token(Token = "0x60015DE")]
			[Address(RVA = "0x100C994", Offset = "0x100C994", VA = "0x100C994")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020B")]
		public float DownThreshold
		{
			[Token(Token = "0x60015DF")]
			[Address(RVA = "0x101297C", Offset = "0x101297C", VA = "0x101297C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700020C")]
		public SDKProvider LoadedSDK
		{
			[Token(Token = "0x60015E0")]
			[Address(RVA = "0x1012984", Offset = "0x1012984", VA = "0x1012984")]
			[CompilerGenerated]
			get
			{
				return default(SDKProvider);
			}
			[Token(Token = "0x60015E1")]
			[Address(RVA = "0x101298C", Offset = "0x101298C", VA = "0x101298C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public bool IsOculusDevice
		{
			[Token(Token = "0x60015E2")]
			[Address(RVA = "0x1012994", Offset = "0x1012994", VA = "0x1012994")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015E3")]
			[Address(RVA = "0x101299C", Offset = "0x101299C", VA = "0x101299C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public bool IsOculusQuest
		{
			[Token(Token = "0x60015E4")]
			[Address(RVA = "0x10129A8", Offset = "0x10129A8", VA = "0x10129A8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015E5")]
			[Address(RVA = "0x10129B0", Offset = "0x10129B0", VA = "0x10129B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		public bool IsHTCDevice
		{
			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x10129BC", Offset = "0x10129BC", VA = "0x10129BC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x10129C4", Offset = "0x10129C4", VA = "0x10129C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public bool IsPicoDevice
		{
			[Token(Token = "0x60015E8")]
			[Address(RVA = "0x10129D0", Offset = "0x10129D0", VA = "0x10129D0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015E9")]
			[Address(RVA = "0x10129D8", Offset = "0x10129D8", VA = "0x10129D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public bool IsValveIndexController
		{
			[Token(Token = "0x60015EA")]
			[Address(RVA = "0x10129E4", Offset = "0x10129E4", VA = "0x10129E4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015EB")]
			[Address(RVA = "0x10129EC", Offset = "0x10129EC", VA = "0x10129EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000024")]
		public static event InputsUpdatedAction OnInputsUpdated
		{
			[Token(Token = "0x60015EC")]
			[Address(RVA = "0x10129F8", Offset = "0x10129F8", VA = "0x10129F8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60015ED")]
			[Address(RVA = "0x1012AD4", Offset = "0x1012AD4", VA = "0x1012AD4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public static event ControllerFoundAction OnControllerFound
		{
			[Token(Token = "0x60015EE")]
			[Address(RVA = "0x1012BB0", Offset = "0x1012BB0", VA = "0x1012BB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60015EF")]
			[Address(RVA = "0x1012C8C", Offset = "0x1012C8C", VA = "0x1012C8C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0x1012D68", Offset = "0x1012D68", VA = "0x1012D68")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0x10130C8", Offset = "0x10130C8", VA = "0x10130C8")]
		private void Start()
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x1013108", Offset = "0x1013108", VA = "0x1013108")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0x1013208", Offset = "0x1013208", VA = "0x1013208")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0x10132F8", Offset = "0x10132F8", VA = "0x10132F8")]
		private void Update()
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0x1013324", Offset = "0x1013324", VA = "0x1013324", Slot = "4")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0x1013410", Offset = "0x1013410", VA = "0x1013410", Slot = "5")]
		public virtual void UpdateSteamInput()
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0x1013414", Offset = "0x1013414", VA = "0x1013414", Slot = "6")]
		public virtual void UpdateXRInput()
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0x101417C", Offset = "0x101417C", VA = "0x101417C", Slot = "7")]
		public virtual void UpdateUnityInput()
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0x10145C4", Offset = "0x10145C4", VA = "0x10145C4", Slot = "8")]
		public virtual void CreateUnityInputActions()
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0x1014CD4", Offset = "0x1014CD4", VA = "0x1014CD4", Slot = "9")]
		public virtual void EnableActions()
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x10150E8", Offset = "0x10150E8", VA = "0x10150E8", Slot = "10")]
		public virtual void DisableActions()
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0x1014C3C", Offset = "0x1014C3C", VA = "0x1014C3C")]
		public InputAction CreateInputAction(string actionName, string binding, bool valueType)
		{
			return null;
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0x10154FC", Offset = "0x10154FC", VA = "0x10154FC", Slot = "11")]
		public virtual void UpdateOVRInput()
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0x1015570", Offset = "0x1015570", VA = "0x1015570", Slot = "12")]
		public virtual void UpdatePicoInput()
		{
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0x1015574", Offset = "0x1015574", VA = "0x1015574", Slot = "13")]
		public virtual void UpdateDeviceActive()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0x101409C", Offset = "0x101409C", VA = "0x101409C")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0x1015714", Offset = "0x1015714", VA = "0x1015714")]
		public bool GetControllerBindingValue(ControllerBinding val)
		{
			return default(bool);
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0x101585C", Offset = "0x101585C", VA = "0x101585C")]
		public bool GetGrabbedControllerBinding(GrabbedControllerBinding val, ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0x1015974", Offset = "0x1015974", VA = "0x1015974")]
		public Vector2 GetInputAxisValue(InputAxis val)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0x1014034", Offset = "0x1014034", VA = "0x1014034")]
		private Vector2 ApplyDeadZones(Vector2 pos, float deadZoneX, float deadZoneY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0x1015A10", Offset = "0x1015A10", VA = "0x1015A10")]
		private void onDeviceChanged(UnityEngine.XR.InputDevice inputDevice)
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0x1012F1C", Offset = "0x1012F1C", VA = "0x1012F1C")]
		private void setDeviceProperties()
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0x1015A38", Offset = "0x1015A38", VA = "0x1015A38", Slot = "14")]
		public virtual bool GetSupportsXRInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0x1015A58", Offset = "0x1015A58", VA = "0x1015A58", Slot = "15")]
		public virtual bool GetSupportsIndexTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0x1015A60", Offset = "0x1015A60", VA = "0x1015A60", Slot = "16")]
		public virtual SDKProvider GetLoadedSDK()
		{
			return default(SDKProvider);
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0x1015B08", Offset = "0x1015B08", VA = "0x1015B08", Slot = "17")]
		public virtual bool GetSupportsThumbTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0x1015B10", Offset = "0x1015B10", VA = "0x1015B10", Slot = "18")]
		public virtual bool GetIsOculusDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0x1015BCC", Offset = "0x1015BCC", VA = "0x1015BCC", Slot = "19")]
		public virtual bool GetIsOculusQuest()
		{
			return default(bool);
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0x1015CD4", Offset = "0x1015CD4", VA = "0x1015CD4", Slot = "20")]
		public virtual bool GetIsHTCDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0x1015D64", Offset = "0x1015D64", VA = "0x1015D64", Slot = "21")]
		public virtual bool GetIsPicoDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0x1015644", Offset = "0x1015644", VA = "0x1015644")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0x1015DD8", Offset = "0x1015DD8", VA = "0x1015DD8")]
		public string GetHMDName()
		{
			return null;
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0x1015E00", Offset = "0x1015E00", VA = "0x1015E00")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0x1015E8C", Offset = "0x1015E8C", VA = "0x1015E8C")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0x1013E2C", Offset = "0x1013E2C", VA = "0x1013E2C")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0x1013EFC", Offset = "0x1013EFC", VA = "0x1013EFC")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0x1015F14", Offset = "0x1015F14", VA = "0x1015F14")]
		public Vector3 GetControllerLocalPosition(ControllerHand handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0x1015FFC", Offset = "0x1015FFC", VA = "0x1015FFC")]
		public Quaternion GetControllerLocalRotation(ControllerHand handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0x10160D8", Offset = "0x10160D8", VA = "0x10160D8", Slot = "22")]
		public virtual ControllerType GetControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0x101610C", Offset = "0x101610C", VA = "0x101610C")]
		public Vector3 GetControllerVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0x10161E8", Offset = "0x10161E8", VA = "0x10161E8")]
		public Vector3 GetControllerAngularVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0x1016288", Offset = "0x1016288", VA = "0x1016288", Slot = "23")]
		public virtual string GetControllerName()
		{
			return null;
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0x10163E0", Offset = "0x10163E0", VA = "0x10163E0", Slot = "24")]
		public virtual bool GetIsValveIndexController()
		{
			return default(bool);
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x1014054", Offset = "0x1014054", VA = "0x1014054")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage, bool clamp = true)
		{
			return default(float);
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0x1013FCC", Offset = "0x1013FCC", VA = "0x1013FCC")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0x1014000", Offset = "0x1014000", VA = "0x1014000")]
		private Vector2 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector2> usage)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0x10161AC", Offset = "0x10161AC", VA = "0x10161AC")]
		private Vector3 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector3> usage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x10164E0", Offset = "0x10164E0", VA = "0x10164E0", Slot = "25")]
		public virtual void SetTrackingOriginMode(TrackingOriginModeFlags trackingOrigin)
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0x1016500", Offset = "0x1016500", VA = "0x1016500")]
		[IteratorStateMachine(typeof(<changeOriginModeRoutine>d__178))]
		private IEnumerator changeOriginModeRoutine(TrackingOriginModeFlags trackingOrigin)
		{
			return null;
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0x10126C8", Offset = "0x10126C8", VA = "0x10126C8")]
		public void VibrateController(float frequency, float amplitude, float duration, ControllerHand hand)
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0x10165AC", Offset = "0x10165AC", VA = "0x10165AC")]
		[IteratorStateMachine(typeof(<Vibrate>d__180))]
		private IEnumerator Vibrate(float frequency, float amplitude, float duration, ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0x1016644", Offset = "0x1016644", VA = "0x1016644")]
		public InputBridge()
		{
		}
	}
	[Token(Token = "0x2000370")]
	public class JoystickControl : MonoBehaviour
	{
		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		[Header("Deadzone")]
		public float DeadZone;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinDegrees;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxDegrees;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LeverPercentageX;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LeverPercentageY;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 LeverVector;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool KinematicWhileInactive;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabbable grab;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rb;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float angleX;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleY;

		[Token(Token = "0x600163A")]
		[Address(RVA = "0x1016C98", Offset = "0x1016C98", VA = "0x1016C98")]
		private void Start()
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0x1016D28", Offset = "0x1016D28", VA = "0x1016D28")]
		private void Update()
		{
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0x1017534", Offset = "0x1017534", VA = "0x1017534")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0x1017050", Offset = "0x1017050", VA = "0x1017050")]
		private void doJoystickLook()
		{
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0x10175E0", Offset = "0x10175E0", VA = "0x10175E0", Slot = "4")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0x1017654", Offset = "0x1017654", VA = "0x1017654", Slot = "5")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0x10176C8", Offset = "0x10176C8", VA = "0x10176C8")]
		public JoystickControl()
		{
		}
	}
	[Token(Token = "0x2000371")]
	public class JoystickVehicleControl : MonoBehaviour
	{
		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Grab Object")]
		public Grabbable JoystickGrabbable;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Set to True to Lerp towards the held hand. Set to False for Instant movement")]
		[Header("Movement Speed")]
		public bool UseSmoothLook;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Hinge X")]
		public Transform HingeXTransform;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinXAngle;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MaxXAngle;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Hinge Y")]
		public Transform HingeYTransform;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinYAngle;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxYAngle;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How fast to return to center if nothing is holding the Joystick. Set to 0 if you do not wish to Return to Center")]
		[Header("Return To Center")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		[Header("Deadzone")]
		public float DeadZone;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Shown for Debug : ")]
		public float LeverPercentageX;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float LeverPercentageY;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector2 LeverVector;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleX;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float angleY;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion originalRot;

		[Token(Token = "0x6001641")]
		[Address(RVA = "0x10176F4", Offset = "0x10176F4", VA = "0x10176F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0x1017CB0", Offset = "0x1017CB0", VA = "0x1017CB0", Slot = "4")]
		public virtual void CallJoystickEvents()
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0x1017DEC", Offset = "0x1017DEC", VA = "0x1017DEC", Slot = "5")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0x1017E60", Offset = "0x1017E60", VA = "0x1017E60", Slot = "6")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0x1017ED4", Offset = "0x1017ED4", VA = "0x1017ED4")]
		public JoystickVehicleControl()
		{
		}
	}
	[Token(Token = "0x2000372")]
	public class Lever : MonoBehaviour
	{
		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotation Limits")]
		[Tooltip("Minimum X value in Local Euler Angles")]
		public float MinimumXRotation;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum X value in Local Euler Angles")]
		public float MaximumXRotation;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Initial Rotation")]
		public float InitialXRotation;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Audio")]
		public AudioClip SwitchOnSound;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SwitchOffSound;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
		[Header("Tolerance")]
		public float SwitchTolerance;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Smooth Look")]
		[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Moving Platform Support")]
		[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Header("Return to Center (Must be Kinematic)")]
		[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
		public bool ReturnToCenter;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How fast to return to center if not being held")]
		public float ReturnLookSpeed;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Snap Settings")]
		[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
		public bool SnapToGrabber;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[Header("Misc")]
		[Tooltip("If true, the Lever will be dropped once switched on or off")]
		public bool DropLeverOnActivation;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Shown for Debug")]
		[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
		public float LeverPercentage;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Called when lever was up, but is now in the down position")]
		public UnityEvent onLeverDown;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called when lever was down, but is now in the up position")]
		public UnityEvent onLeverUp;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Called if the lever changes position at all")]
		public FloatEvent onLeverChange;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabbable grab;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rb;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource audioSource;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool switchedOn;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HingeJoint hingedJoint;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _lastLocalAngle;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion initialOffset;

		[Token(Token = "0x6001646")]
		[Address(RVA = "0x1017F50", Offset = "0x1017F50", VA = "0x1017F50")]
		private void Start()
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0x1018168", Offset = "0x1018168", VA = "0x1018168")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0x1018198", Offset = "0x1018198", VA = "0x1018198")]
		private void Update()
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0x10183E4", Offset = "0x10183E4", VA = "0x10183E4", Slot = "4")]
		public virtual float GetAnglePercentage(float currentAngle)
		{
			return default(float);
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0x1018584", Offset = "0x1018584", VA = "0x1018584")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0x1018588", Offset = "0x1018588", VA = "0x1018588")]
		private void doLeverLook()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0x1018AFC", Offset = "0x1018AFC", VA = "0x1018AFC", Slot = "5")]
		public virtual void SetLeverAngle(float angle)
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0x1018B48", Offset = "0x1018B48", VA = "0x1018B48", Slot = "6")]
		public virtual void OnLeverChange(float percentage)
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0x1018BB4", Offset = "0x1018BB4", VA = "0x1018BB4", Slot = "7")]
		public virtual void OnLeverDown()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0x1018CB0", Offset = "0x1018CB0", VA = "0x1018CB0", Slot = "8")]
		public virtual void OnLeverUp()
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0x1018DB0", Offset = "0x1018DB0", VA = "0x1018DB0")]
		public Lever()
		{
		}
	}
	[Token(Token = "0x2000373")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Default locomotion to use if nothing stored in playerprefs. 0 = Teleport. 1 = SmoothLocomotion")]
		[Header("Locomotion Type")]
		public LocomotionType DefaultLocomotion;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private LocomotionType selectedLocomotion;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, locomotion type will be saved and loaded from player prefs")]
		[Header("Save / Loading")]
		public bool LoadLocomotionFromPrefs;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		public List<ControllerBinding> locomotionToggleInput;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The action used to toggle locomotion type")]
		public InputActionReference LocomotionToggleAction;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BNGPlayerController player;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerTeleport teleport;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool actionToggle;

		[Token(Token = "0x17000216")]
		public LocomotionType SelectedLocomotion
		{
			[Token(Token = "0x6001651")]
			[Address(RVA = "0x1018E3C", Offset = "0x1018E3C", VA = "0x1018E3C")]
			get
			{
				return default(LocomotionType);
			}
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0x1018E44", Offset = "0x1018E44", VA = "0x1018E44")]
		private void Start()
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0x1018F98", Offset = "0x1018F98", VA = "0x1018F98")]
		private void Update()
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0x1018FC4", Offset = "0x1018FC4", VA = "0x1018FC4", Slot = "4")]
		public virtual void CheckControllerToggleInput()
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0x10190C4", Offset = "0x10190C4", VA = "0x10190C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0x10191C4", Offset = "0x10191C4", VA = "0x10191C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0x10192C4", Offset = "0x10192C4", VA = "0x10192C4")]
		public void OnLocomotionToggle(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0x10190A0", Offset = "0x10190A0", VA = "0x10190A0")]
		public void LocomotionToggle()
		{
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0x10192D0", Offset = "0x10192D0", VA = "0x10192D0")]
		public void UpdateTeleportStatus()
		{
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0x1018F20", Offset = "0x1018F20", VA = "0x1018F20")]
		public void ChangeLocomotion(LocomotionType locomotionType, bool save)
		{
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0x10192FC", Offset = "0x10192FC", VA = "0x10192FC")]
		public void ChangeLocomotionType(LocomotionType loc)
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0x1019428", Offset = "0x1019428", VA = "0x1019428")]
		private void toggleTeleport(bool enabled)
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0x1019464", Offset = "0x1019464", VA = "0x1019464")]
		private void toggleSmoothLocomotion(bool enabled)
		{
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0x1019518", Offset = "0x1019518", VA = "0x1019518")]
		public void ToggleLocomotionType()
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0x1019528", Offset = "0x1019528", VA = "0x1019528")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x2000374")]
	public class PlayerClimbing : MonoBehaviour
	{
		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Climbing Transforms")]
		public Transform LeftControllerTransform;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RightControllerTransform;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Set the player's capsule collider height to this amount while climbing. This can allow you to shorten the capsule collider a bit, making it easier to navigate over ledges.")]
		[Header("Capsule Settings")]
		public float ClimbingCapsuleHeight;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Set the player's capsule collider capsule center to this amount while climbing.")]
		public float ClimbingCapsuleCenter;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Haptics")]
		public bool ApplyHapticsOnGrab;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Frequency of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateFrequency;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Amplitute of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateAmplitude;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Duration of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateDuration;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Grabber> climbers;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool wasGrippingClimbable;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody playerRigid;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool _checkedRigidPlayer;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool _isRigidPlayer;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[Header("Shown for Debug : ")]
		public bool GrippingClimbable;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 moveDirection;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 previousLeftControllerPosition;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 previousRightControllerPosition;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 controllerMoveAmount;

		[Token(Token = "0x17000217")]
		public bool IsRigidbodyPlayer
		{
			[Token(Token = "0x6001660")]
			[Address(RVA = "0x101961C", Offset = "0x101961C", VA = "0x101961C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0x10196C8", Offset = "0x10196C8", VA = "0x10196C8")]
		public void Start()
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0x1019814", Offset = "0x1019814", VA = "0x1019814")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0x10198E8", Offset = "0x10198E8", VA = "0x10198E8", Slot = "4")]
		public virtual void AddClimber(Climbable climbable, Grabber grab)
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0x1019C60", Offset = "0x1019C60", VA = "0x1019C60", Slot = "5")]
		public virtual void RemoveClimber(Grabber grab)
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0x1019D70", Offset = "0x1019D70", VA = "0x1019D70", Slot = "6")]
		public virtual bool GrippingAtLeastOneClimbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0x1019EC8", Offset = "0x1019EC8", VA = "0x1019EC8", Slot = "7")]
		protected virtual void checkClimbing()
		{
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0x101A44C", Offset = "0x101A44C", VA = "0x101A44C")]
		private void DoPhysicalClimbing()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0x101A2CC", Offset = "0x101A2CC", VA = "0x101A2CC")]
		private void onGrabbedClimbable()
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0x101A388", Offset = "0x101A388", VA = "0x101A388")]
		private void onReleasedClimbable()
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0x101A7FC", Offset = "0x101A7FC", VA = "0x101A7FC")]
		public PlayerClimbing()
		{
		}
	}
	[Token(Token = "0x2000375")]
	public class PlayerGravity : MonoBehaviour
	{
		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will apply gravity to the CharacterController component, or RigidBody if no CC is present.")]
		public bool GravityEnabled;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of Gravity to apply to the CharacterController or Rigidbody. Default is 'Physics.gravity'.")]
		public Vector3 Gravity;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController characterController;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody playerRigidbody;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _movementY;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _initialGravityModifier;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _validRigidBody;

		[Token(Token = "0x600166B")]
		[Address(RVA = "0x101A884", Offset = "0x101A884", VA = "0x101A884")]
		private void Start()
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0x101A9A4", Offset = "0x101A9A4", VA = "0x101A9A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0x101AB1C", Offset = "0x101AB1C", VA = "0x101AB1C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0x101A784", Offset = "0x101A784", VA = "0x101A784")]
		public void ToggleGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0x101ABF4", Offset = "0x101ABF4", VA = "0x101ABF4")]
		public PlayerGravity()
		{
		}
	}
	[Token(Token = "0x2000376")]
	public class PlayerMovingPlatformSupport : MonoBehaviour
	{
		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is on a moving platform")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected RaycastHit groundHit;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _initialCharacterParent;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float DistanceFromGround;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MovingPlatform CurrentPlatform;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wasOnPlatform;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool requiresReparent;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject _lastHitObject;

		[Token(Token = "0x6001670")]
		[Address(RVA = "0x101AC24", Offset = "0x101AC24", VA = "0x101AC24")]
		private void Start()
		{
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0x101ACE0", Offset = "0x101ACE0", VA = "0x101ACE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0x101ACEC", Offset = "0x101ACEC", VA = "0x101ACEC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0x101ACF8", Offset = "0x101ACF8", VA = "0x101ACF8", Slot = "4")]
		public virtual void CheckMovingPlatform()
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0x101B08C", Offset = "0x101B08C", VA = "0x101B08C", Slot = "5")]
		public virtual void UpdateCurrentPlatform()
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0x101B190", Offset = "0x101B190", VA = "0x101B190", Slot = "6")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0x101B584", Offset = "0x101B584", VA = "0x101B584")]
		public PlayerMovingPlatformSupport()
		{
		}
	}
	[Token(Token = "0x2000377")]
	public enum RotationMechanic
	{
		[Token(Token = "0x40015BB")]
		Snap,
		[Token(Token = "0x40015BC")]
		Smooth
	}
	[Token(Token = "0x2000378")]
	public class PlayerRotation : MonoBehaviour
	{
		[Token(Token = "0x2000379")]
		public delegate void OnBeforeRotateAction();

		[Token(Token = "0x200037A")]
		public delegate void OnAfterRotateAction();

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input")]
		[Tooltip("Set to false to skip Update")]
		public bool AllowInput;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Used to determine whether to turn left / right. This can be an X Axis on the thumbstick, for example. -1 to snap left, 1 to snap right.")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Unity Input Action used to rotate the player")]
		public InputActionReference RotateAction;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Smooth / Snap Turning")]
		[Tooltip("Snap rotation will rotate a fixed amount of degrees on turn. Smooth will linearly rotate the player.")]
		public RotationMechanic RotationType;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Snap Turn Settings")]
		[Tooltip("How many degrees to rotate if RotationType is set to 'Snap'")]
		public float SnapRotationAmount;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SnapInputAmount;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How fast to rotate the player if RotationType is set to 'Smooth'")]
		[Header("Smooth Turn Settings")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SmoothTurnMinInput;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float recentSnapTurnTime;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float rotationAmount;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float xAxis;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float previousXInput;

		[Token(Token = "0x14000026")]
		public static event OnBeforeRotateAction OnBeforeRotate
		{
			[Token(Token = "0x6001677")]
			[Address(RVA = "0x101B58C", Offset = "0x101B58C", VA = "0x101B58C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001678")]
			[Address(RVA = "0x101B644", Offset = "0x101B644", VA = "0x101B644")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public static event OnAfterRotateAction OnAfterRotate
		{
			[Token(Token = "0x6001679")]
			[Address(RVA = "0x101B6FC", Offset = "0x101B6FC", VA = "0x101B6FC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600167A")]
			[Address(RVA = "0x101B7B8", Offset = "0x101B7B8", VA = "0x101B7B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x101B874", Offset = "0x101B874", VA = "0x101B874")]
		private void Update()
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0x101B8D0", Offset = "0x101B8D0", VA = "0x101B8D0", Slot = "4")]
		public virtual float GetAxisInput()
		{
			return default(float);
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0x101BA60", Offset = "0x101BA60", VA = "0x101BA60", Slot = "5")]
		public virtual void DoSnapRotation(float xInput)
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0x101BC3C", Offset = "0x101BC3C", VA = "0x101BC3C", Slot = "6")]
		public virtual bool RecentlySnapTurned()
		{
			return default(bool);
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0x101BC6C", Offset = "0x101BC6C", VA = "0x101BC6C", Slot = "7")]
		public virtual void DoSmoothRotation(float xInput)
		{
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0x101BD68", Offset = "0x101BD68", VA = "0x101BD68")]
		public PlayerRotation()
		{
		}
	}
	[Token(Token = "0x200037B")]
	public enum TeleportControls
	{
		[Token(Token = "0x40015CC")]
		ThumbstickRotate,
		[Token(Token = "0x40015CD")]
		ThumbstickDown,
		[Token(Token = "0x40015CE")]
		BButton,
		[Token(Token = "0x40015CF")]
		None
	}
	[Token(Token = "0x200037C")]
	public class PlayerTeleport : MonoBehaviour
	{
		[Token(Token = "0x200037D")]
		public delegate void OnBeforeTeleportFadeAction();

		[Token(Token = "0x200037E")]
		public delegate void OnBeforeTeleportAction();

		[Token(Token = "0x200037F")]
		public delegate void OnAfterTeleportAction();

		[Token(Token = "0x2000380")]
		[CompilerGenerated]
		private sealed class <doTeleport>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001606")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerTeleport <>4__this;

			[Token(Token = "0x4001607")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 playerDestination;

			[Token(Token = "0x4001608")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool rotatePlayer;

			[Token(Token = "0x4001609")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion playerRotation;

			[Token(Token = "0x1700021B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016BA")]
				[Address(RVA = "0x1020134", Offset = "0x1020134", VA = "0x1020134", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016BC")]
				[Address(RVA = "0x102017C", Offset = "0x102017C", VA = "0x102017C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016B7")]
			[Address(RVA = "0x101FD28", Offset = "0x101FD28", VA = "0x101FD28")]
			[DebuggerHidden]
			public <doTeleport>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x60016B8")]
			[Address(RVA = "0x101FD50", Offset = "0x101FD50", VA = "0x101FD50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016B9")]
			[Address(RVA = "0x101FD54", Offset = "0x101FD54", VA = "0x101FD54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016BB")]
			[Address(RVA = "0x102013C", Offset = "0x102013C", VA = "0x102013C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The LineRenderer to use when showing a teleport preview")]
		[Header("Colors")]
		public LineRenderer TeleportLine;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If a Valid Teleport destination is found, color of 'TeleportLine' will be updated to this.")]
		public Color ValidTeleport;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If a Valid Teleport destination is not found, color of 'TeleportLine' will be updated to this.")]
		public Color InvalidTeleport;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Hand Side")]
		[Tooltip("Whether the Teleport should initiate from the left or right controller. This affects input and where the teleport line should begin from.")]
		public ControllerHand HandSide;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Transform Definitions")]
		[Tooltip("Where the Teleport Line should begin if using the left ControllerHand")]
		public Transform TeleportBeginTransform;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where the Teleport Line should begin if using the right ControllerHand")]
		public Transform TeleportBeginTransformAlt;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Transform indicating where Player should be placed on teleport.")]
		public Transform TeleportDestination;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The TeleportDestination if we are hitting one. Null if not.")]
		[HideInInspector]
		public TeleportDestination DestinationObject;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("GameObject to move around when initiating a teleport.")]
		public GameObject TeleportMarker;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Transform indicating direction Player will rotate to on teleport.")]
		public Transform DirectionIndicator;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Teleport Physics")]
		public float MaxRange;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("More segments means a smoother line, at the cost of performance.")]
		public int SegmentCount;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How much velocity to apply when calculating a parabola. Set to a very high number for a straight line.")]
		public float SimulationVelocity;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Scale of each segment used when calculating parabola")]
		public float SegmentScale;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Layers")]
		[Tooltip("Raycast layers to use when determining collision")]
		public LayerMask CollisionLayers;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Raycast layers to use when determining if the collided object is a valid teleport. If it is not valid then the line will be red and unable to teleport.")]
		public LayerMask ValidLayers;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Controls")]
		[Tooltip("Method used to initiate a teleport. If these don't fit your needs you can override the KeyDownForTeleport() and KeyUpFromTeleport() methods.")]
		public TeleportControls ControlType;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Unity Input Action used to initiate Teleport")]
		public InputActionReference InitiateTeleportAction;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("If true the user can rotate the teleport marker before initiating a teleport.")]
		public bool AllowTeleportRotation;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool _reachThumbThreshold;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[Tooltip("If true the teleport marker will always be the same rotation as the player")]
		public bool ForceStraightArrow;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Header("Slope")]
		[Tooltip("Max Angle / Slope the teleport marker can be to be considered a valid teleport.")]
		public float MaxSlope;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Offset the player's Y position from TeleportDestination")]
		[Header("Offset")]
		public float TeleportYOffset;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("Use ScreenFader on teleportation if true.")]
		[Header("Screen Fade")]
		public bool FadeScreenOnTeleport;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("If FadeScreenOnTeleport = true, fade the screen at this speed.")]
		public float TeleportFadeSpeed;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Seconds to wait before initiating teleport. Useful if you want to fade the screen  before teleporting.")]
		public float TeleportDelay;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Physics Material")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issued.")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController controller;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody playerRigid;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputBridge input;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform cameraRig;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ScreenFader fader;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool aimingTeleport;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool validTeleport;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		protected bool teleportationEnabled;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int _invalidFrames;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _initialLineWidth;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool setVariables;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Collider _hitObject;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 _hitVector;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float _hitAngle;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RaycastHit hit;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3[] segments;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3 segVelocity;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float segTime;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int segCount;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private bool isDestination;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Vector2 teleportAxis;

		[Token(Token = "0x17000218")]
		private Transform teleportTransform
		{
			[Token(Token = "0x6001689")]
			[Address(RVA = "0x101C08C", Offset = "0x101C08C", VA = "0x101C08C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		private Vector2 handedThumbstickAxis
		{
			[Token(Token = "0x600168A")]
			[Address(RVA = "0x101C0A8", Offset = "0x101C0A8", VA = "0x101C0A8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x1700021A")]
		public bool AimingTeleport
		{
			[Token(Token = "0x600168B")]
			[Address(RVA = "0x101C0E8", Offset = "0x101C0E8", VA = "0x101C0E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000028")]
		public static event OnBeforeTeleportFadeAction OnBeforeTeleportFade
		{
			[Token(Token = "0x600168C")]
			[Address(RVA = "0x101C0F0", Offset = "0x101C0F0", VA = "0x101C0F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600168D")]
			[Address(RVA = "0x101C1A8", Offset = "0x101C1A8", VA = "0x101C1A8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public static event OnBeforeTeleportAction OnBeforeTeleport
		{
			[Token(Token = "0x600168E")]
			[Address(RVA = "0x101C260", Offset = "0x101C260", VA = "0x101C260")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600168F")]
			[Address(RVA = "0x101C31C", Offset = "0x101C31C", VA = "0x101C31C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public static event OnAfterTeleportAction OnAfterTeleport
		{
			[Token(Token = "0x6001690")]
			[Address(RVA = "0x101C3D8", Offset = "0x101C3D8", VA = "0x101C3D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001691")]
			[Address(RVA = "0x101C494", Offset = "0x101C494", VA = "0x101C494")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x101C550", Offset = "0x101C550", VA = "0x101C550")]
		private void Start()
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x101C8C4", Offset = "0x101C8C4", VA = "0x101C8C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x101C554", Offset = "0x101C554", VA = "0x101C554")]
		private void setupVariables()
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0x101C9AC", Offset = "0x101C9AC", VA = "0x101C9AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x101CA38", Offset = "0x101CA38", VA = "0x101CA38")]
		public void DoCheckTeleport()
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0x101CB3C", Offset = "0x101CB3C", VA = "0x101CB3C")]
		public void TryOrHideTeleport()
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0x10194F8", Offset = "0x10194F8", VA = "0x10194F8")]
		public void EnableTeleportation()
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0x1019504", Offset = "0x1019504", VA = "0x1019504")]
		public void DisableTeleportation()
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x101CB58", Offset = "0x101CB58", VA = "0x101CB58", Slot = "4")]
		protected virtual void calculateParabola()
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x101D5F4", Offset = "0x101D5F4", VA = "0x101D5F4", Slot = "5")]
		protected virtual bool teleportClear()
		{
			return default(bool);
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x101D85C", Offset = "0x101D85C", VA = "0x101D85C", Slot = "6")]
		protected virtual void hideTeleport()
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0x101D8B0", Offset = "0x101D8B0", VA = "0x101D8B0", Slot = "7")]
		protected virtual void updateTeleport()
		{
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x101D908", Offset = "0x101D908", VA = "0x101D908", Slot = "8")]
		protected virtual void rotateMarker()
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0x101DC84", Offset = "0x101DC84", VA = "0x101DC84", Slot = "9")]
		protected virtual void tryTeleport()
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0x101DF4C", Offset = "0x101DF4C", VA = "0x101DF4C", Slot = "10")]
		public virtual void BeforeTeleportFade()
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0x101E014", Offset = "0x101E014", VA = "0x101E014", Slot = "11")]
		public virtual void BeforeTeleport()
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0x101E0DC", Offset = "0x101E0DC", VA = "0x101E0DC", Slot = "12")]
		public virtual void AfterTeleport()
		{
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0x101DE78", Offset = "0x101DE78", VA = "0x101DE78")]
		[IteratorStateMachine(typeof(<doTeleport>d__83))]
		private IEnumerator doTeleport(Vector3 playerDestination, Quaternion playerRotation, bool rotatePlayer)
		{
			return null;
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0x101E1D8", Offset = "0x101E1D8", VA = "0x101E1D8")]
		public void TeleportPlayer(Vector3 destination, Quaternion rotation)
		{
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0x101E1FC", Offset = "0x101E1FC", VA = "0x101E1FC")]
		public void TeleportPlayerCustom(Vector3 destination, Quaternion rotation)
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0x101E3F4", Offset = "0x101E3F4", VA = "0x101E3F4")]
		public void TeleportPlayerToTransform(Transform destination)
		{
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0x101E490", Offset = "0x101E490", VA = "0x101E490", Slot = "13")]
		public virtual bool KeyDownForTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0x101E760", Offset = "0x101E760", VA = "0x101E760", Slot = "14")]
		public virtual bool KeyUpFromTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0x101E850", Offset = "0x101E850", VA = "0x101E850")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0x101E95C", Offset = "0x101E95C", VA = "0x101E95C")]
		public PlayerTeleport()
		{
		}
	}
	[Token(Token = "0x2000381")]
	public class PointerEvents : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Maximium Distance")]
		[Tooltip("Maximum Distance this object can be from the UIPointer to be considered valid and receive events")]
		public float MaxDistance;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Enable Events")]
		[Tooltip("If True then the Unity Events below will be sent. Set to False if you need to disable sending pointer events.")]
		public bool Enabled;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Unity Events : ")]
		public PointerEventDataEvent OnPointerClickEvent;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PointerEventDataEvent OnPointerEnterEvent;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PointerEventDataEvent OnPointerExitEvent;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PointerEventDataEvent OnPointerDownEvent;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PointerEventDataEvent OnPointerUpEvent;

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x1020184", Offset = "0x1020184", VA = "0x1020184", Slot = "9")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x1020200", Offset = "0x1020200", VA = "0x1020200", Slot = "10")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x102027C", Offset = "0x102027C", VA = "0x102027C", Slot = "11")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0x10202DC", Offset = "0x10202DC", VA = "0x10202DC", Slot = "12")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x1020358", Offset = "0x1020358", VA = "0x1020358", Slot = "13")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x10203B8", Offset = "0x10203B8", VA = "0x10203B8", Slot = "14")]
		public virtual bool DistanceExceeded(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x10203D8", Offset = "0x10203D8", VA = "0x10203D8")]
		public PointerEvents()
		{
		}
	}
	[Token(Token = "0x2000382")]
	public enum RemoteGrabType
	{
		[Token(Token = "0x4001612")]
		Trigger,
		[Token(Token = "0x4001613")]
		Raycast,
		[Token(Token = "0x4001614")]
		Spherecast
	}
	[Token(Token = "0x2000383")]
	public class RemoteGrabber : MonoBehaviour
	{
		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RemoteGrabType PhysicsCheckType;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If PhysicsCheckType = Trigger and this is true, an additonal raycast check will occur to check for obstacles in the way")]
		public bool TriggerRequiresRaycast;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float RaycastLength;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SphereCastLength;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float SphereCastRadius;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask RemoteGrabLayers;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabbablesInTrigger ParentGrabber;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider _lastColliderHit;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool ShowGizmos;

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x10203F0", Offset = "0x10203F0", VA = "0x10203F0")]
		private void Start()
		{
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x1020518", Offset = "0x1020518", VA = "0x1020518", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x1020740", Offset = "0x1020740", VA = "0x1020740")]
		private void ObjectHit(Collider colliderHit)
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x10208BC", Offset = "0x10208BC", VA = "0x10208BC")]
		public void RemovePreviousHitObject()
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0x10209F4", Offset = "0x10209F4", VA = "0x10209F4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x1020BC4", Offset = "0x1020BC4", VA = "0x1020BC4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0x1020D74", Offset = "0x1020D74", VA = "0x1020D74")]
		public RemoteGrabber()
		{
		}
	}
	[Token(Token = "0x2000384")]
	public class Slider : MonoBehaviour
	{
		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _slidePercentage;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatEvent onSliderChange;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastSliderPercentage;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float slideRangeLow;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float slideRangeHigh;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float slideRange;

		[Token(Token = "0x1700021D")]
		public float SlidePercentage
		{
			[Token(Token = "0x60016CB")]
			[Address(RVA = "0x1020DC4", Offset = "0x1020DC4", VA = "0x1020DC4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0x1020DCC", Offset = "0x1020DCC", VA = "0x1020DCC")]
		private void Start()
		{
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0x1020ED4", Offset = "0x1020ED4", VA = "0x1020ED4")]
		private void Update()
		{
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0x1020F54", Offset = "0x1020F54", VA = "0x1020F54", Slot = "4")]
		public virtual void OnSliderChange(float percentage)
		{
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0x1020FC0", Offset = "0x1020FC0", VA = "0x1020FC0")]
		public Slider()
		{
		}
	}
	[Token(Token = "0x2000385")]
	public enum MovementVector
	{
		[Token(Token = "0x4001625")]
		HMD,
		[Token(Token = "0x4001626")]
		Controller
	}
	[Token(Token = "0x2000386")]
	public class SmoothLocomotion : MonoBehaviour
	{
		[Token(Token = "0x2000387")]
		public delegate void OnBeforeMoveAction();

		[Token(Token = "0x2000388")]
		public delegate void OnAfterMoveAction();

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerControllerType ControllerType;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("CharacterController Settings : ")]
		public float MovementSpeed;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Rigidbody Settings : ")]
		[Tooltip("How much force to apply to the rigidbody when the player is grounded")]
		public float MovementForce;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Maximium velocity of the player's rigidbody in X, Z. Used to constrain max speed movement.")]
		public float MaxHorizontalVelocity;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Maximium velocity of the player's rigidbody on the Y axis. Used to constrain max vertical movement, such as jumping and falling.")]
		public float MaxVerticalVelocity;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How far up from the characters feet is considered a step. Anything below this will be considered grounded.")]
		public float StepHeight;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximium angle a slope can be to be considered grounded. Negated if contact distance from the player's feet is less than StepHeight.")]
		public float MaxSlopeAngle;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Physics Material to apply to the sphere collider while moving. Use this to dynamically adjust friction and bounciness.")]
		public PhysicMaterial MovementMaterial;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issues. Use this to slow t he player down, or allow them to slide across surfaces.")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How much drag to apply to the player while moving")]
		public float MovementDrag;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("How much drag to apply to the player while standing still. Used to slow down the player or prevent from sliding down a hill.")]
		public float StaticDrag;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much drag to apply to the player when in the air / not grounded.")]
		public float AirDrag;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Forward Direction : ")]
		[Tooltip("(Optional) If specified, this transform's forward direction will determine the movement direction ")]
		public Transform ForwardDirection;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Input : ")]
		[Tooltip("Set to false if you do not want to respond to input commands. (For example, if paused or in a menu)")]
		public bool AllowInput;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Header("Input : ")]
		[Tooltip("Set to false if you do not want SmoothLocomotion to update movement at all.")]
		public bool UpdateMovement;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Used to determine which direction to move. Example : Left Thumbstick Axis or Touchpad. ")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Input Action used to affect movement")]
		public InputActionReference MoveAction;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, movement events will only be sent if the Application has focus (Or Play window, if running in the Unity Editor)")]
		public bool RequireAppFocus;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Sprint : ")]
		public float SprintSpeed;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The key(s) to use to initiate sprint. You can also override the SprintKeyDown() function to determine your sprint criteria.")]
		public List<ControllerBinding> SprintInput;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Unity Input Action used to enable sprinting")]
		public InputActionReference SprintAction;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Strafe : ")]
		public float StrafeSpeed;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float StrafeSprintSpeed;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Amount of 'force' to apply to the player during Jump")]
		[Header("Jump : ")]
		public float JumpForce;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The key(s) to use to initiate a jump. You can also override the CheckJump() function to determine your jump criteria.")]
		public List<ControllerBinding> JumpInput;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Unity Input Action used to initiate a jump")]
		public InputActionReference JumpAction;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Air Control : ")]
		[Tooltip("Can the player move when not grounded? Set to true if you want to be able to move the joysticks and have the player respond to input even when not grounded.")]
		public bool AirControl;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How fast the player can move in the air if AirControl = true. Example : 0.5 = Player will move at half the speed of MovementSpeed")]
		public float AirControlSpeed;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController characterController;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SphereCollider playerSphere;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float movementX;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float movementY;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float movementZ;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _verticalSpeed;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ArmSwingLocomotion armSwingLocomotion;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 additionalMovement;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool playerInitialized;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float lastJumpTime;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float lastMoveTime;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float Magnitude;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Header("Shown for Debug : ")]
		public int GroundContacts;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float SurfaceAngle;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float SurfaceHeight;

		[Token(Token = "0x1400002B")]
		public static event OnBeforeMoveAction OnBeforeMove
		{
			[Token(Token = "0x60016D0")]
			[Address(RVA = "0x1020FD4", Offset = "0x1020FD4", VA = "0x1020FD4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60016D1")]
			[Address(RVA = "0x102108C", Offset = "0x102108C", VA = "0x102108C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public static event OnAfterMoveAction OnAfterMove
		{
			[Token(Token = "0x60016D2")]
			[Address(RVA = "0x1021144", Offset = "0x1021144", VA = "0x1021144")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60016D3")]
			[Address(RVA = "0x1021200", Offset = "0x1021200", VA = "0x1021200")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x10212BC", Offset = "0x10212BC", VA = "0x10212BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x1021314", Offset = "0x1021314", VA = "0x1021314", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x102135C", Offset = "0x102135C", VA = "0x102135C", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x1021394", Offset = "0x1021394", VA = "0x1021394", Slot = "6")]
		public virtual void CheckControllerReferences()
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x102156C", Offset = "0x102156C", VA = "0x102156C", Slot = "7")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x10216CC", Offset = "0x10216CC", VA = "0x10216CC", Slot = "8")]
		public virtual void DoRigidBodyJump()
		{
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x1021760", Offset = "0x1021760", VA = "0x1021760", Slot = "9")]
		public virtual Vector2 GetMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x1021BA4", Offset = "0x1021BA4", VA = "0x1021BA4", Slot = "10")]
		public virtual void MoveCharacter()
		{
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0x1021DAC", Offset = "0x1021DAC", VA = "0x1021DAC", Slot = "11")]
		public virtual void MoveRigidCharacter(Vector3 moveTo)
		{
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0x1021DB0", Offset = "0x1021DB0", VA = "0x1021DB0", Slot = "12")]
		public virtual void MoveRigidCharacter()
		{
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x1022268", Offset = "0x1022268", VA = "0x1022268", Slot = "13")]
		public virtual void MoveCharacter(Vector3 motion)
		{
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x1022534", Offset = "0x1022534", VA = "0x1022534", Slot = "14")]
		public virtual bool CheckJump()
		{
			return default(bool);
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0x10226B4", Offset = "0x10226B4", VA = "0x10226B4", Slot = "15")]
		public virtual bool CheckSprint()
		{
			return default(bool);
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0x1022824", Offset = "0x1022824", VA = "0x1022824", Slot = "16")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0x10228B8", Offset = "0x10228B8", VA = "0x10228B8", Slot = "17")]
		public virtual void SetupCharacterController()
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x1022A84", Offset = "0x1022A84", VA = "0x1022A84", Slot = "18")]
		public virtual void SetupRigidbodyPlayer()
		{
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x1022D18", Offset = "0x1022D18", VA = "0x1022D18", Slot = "19")]
		public virtual void EnableMovement()
		{
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x1022D24", Offset = "0x1022D24", VA = "0x1022D24", Slot = "20")]
		public virtual void DisableMovement()
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x1022D2C", Offset = "0x1022D2C", VA = "0x1022D2C")]
		private void OnCollisionStay(Collision collisionInfo)
		{
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0x1023044", Offset = "0x1023044", VA = "0x1023044")]
		public SmoothLocomotion()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public enum PlayerControllerType
	{
		[Token(Token = "0x4001657")]
		CharacterController,
		[Token(Token = "0x4001658")]
		Rigidbody
	}
	[Token(Token = "0x200038A")]
	public class SnapZone : MonoBehaviour
	{
		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The currently held item. Set this in the editor to equip on Start().")]
		[Header("Starting / Held Item")]
		public Grabbable HeldItem;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("TSet this in the editor to equip on Start().")]
		public Grabbable StartingItem;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Options")]
		[Tooltip("If false, Item will Move back to inventory space if player drops it.")]
		public bool CanDropItem;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanSwapItem;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanRemoveItem;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Multiply Item Scale times this when in snap zone.")]
		public float ScaleItem;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _scaleTo;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool DisableColliders;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true the item inside the SnapZone will be duplicated, instead of removed, from the SnapZone.")]
		public bool DuplicateItemOnGrab;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Only snap if Grabbable was dropped maximum of X seconds ago")]
		public float MaxDropTime;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float LastSnapTime;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Filtering")]
		[Tooltip("If not empty, can only snap objects if transform name contains one of these strings")]
		public List<string> OnlyAllowNames;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Do not allow snapping if transform contains one of these names")]
		public List<string> ExcludeTransformNames;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Audio")]
		public AudioClip SoundOnSnap;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip SoundOnUnsnap;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Events")]
		public GrabbableEvent OnSnapEvent;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GrabbableEvent OnDetachEvent;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GrabbablesInTrigger gZone;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody heldItemRigid;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool heldItemWasKinematic;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable trackedItem;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private SnapZoneOffset offset;

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0x1023514", Offset = "0x1023514", VA = "0x1023514")]
		private void Start()
		{
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0x1023690", Offset = "0x1023690", VA = "0x1023690")]
		private void Update()
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x1023A34", Offset = "0x1023A34", VA = "0x1023A34")]
		private Grabbable getClosestGrabbable()
		{
			return null;
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x1024084", Offset = "0x1024084", VA = "0x1024084", Slot = "4")]
		public virtual void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0x1023F78", Offset = "0x1023F78", VA = "0x1023F78")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0x1024668", Offset = "0x1024668", VA = "0x1024668", Slot = "5")]
		public virtual void GrabEquipped(Grabber grabber)
		{
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0x10249AC", Offset = "0x10249AC", VA = "0x10249AC", Slot = "6")]
		public virtual bool CanBeRemoved()
		{
			return default(bool);
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x1024A08", Offset = "0x1024A08", VA = "0x1024A08", Slot = "7")]
		public virtual void ReleaseAll()
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x1024E14", Offset = "0x1024E14", VA = "0x1024E14")]
		public SnapZone()
		{
		}
	}
	[Token(Token = "0x200038B")]
	public class SnapZoneOffset : MonoBehaviour
	{
		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 LocalPositionOffset;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 LocalRotationOffset;

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x1024EC4", Offset = "0x1024EC4", VA = "0x1024EC4")]
		public SnapZoneOffset()
		{
		}
	}
	[Token(Token = "0x200038C")]
	public class SnapZoneScale : MonoBehaviour
	{
		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Local Scale (x, y and z) of Grabbable when inside the SnapZone")]
		public float Scale;

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0x1024ECC", Offset = "0x1024ECC", VA = "0x1024ECC")]
		public SnapZoneScale()
		{
		}
	}
	[Token(Token = "0x200038D")]
	public class SteeringWheel : GrabbableEvents
	{
		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Rotation Limits")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be < -360. Ex : -450")]
		public float MinAngle;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be > 360. Ex : 450")]
		public float MaxAngle;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Transform to rotate on its Z axis.")]
		[Header("Rotation Object")]
		public Transform RotatorObject;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast to move the wheel towards the target angle. 0 = Instant.")]
		[Header("Rotation Speed")]
		public float RotationSpeed;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("IF true both hands will effect the rotation of the steering wheel while grabbed with both hands. Set to false if you only want one hand to control the rotation.")]
		[Header("Two-Handed Option")]
		public bool AllowTwoHanded;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Header("Return to Center")]
		public bool ReturnToCenter;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Debug Options")]
		public Text DebugText;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Called if the SteeringWheel changes angle. Returns the current angle in degrees, clamped between MinAngle / MaxAngle")]
		[Header("Events")]
		public FloatEvent onAngleChange;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called every frame. Returns the current current rotation between -1, 1")]
		public FloatEvent onValueChange;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Editor Option")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Vector3 rotatePosition;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 previousPrimaryPosition;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 previousSecondaryPosition;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float targetAngle;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float previousTargetAngle;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float smoothedAngle;

		[Token(Token = "0x1700021E")]
		public float Angle
		{
			[Token(Token = "0x60016FB")]
			[Address(RVA = "0x1024EDC", Offset = "0x1024EDC", VA = "0x1024EDC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700021F")]
		public float RawAngle
		{
			[Token(Token = "0x60016FC")]
			[Address(RVA = "0x1024EF8", Offset = "0x1024EF8", VA = "0x1024EF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000220")]
		public float ScaleValue
		{
			[Token(Token = "0x60016FD")]
			[Address(RVA = "0x1024F00", Offset = "0x1024F00", VA = "0x1024F00")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000221")]
		public float ScaleValueInverted
		{
			[Token(Token = "0x60016FE")]
			[Address(RVA = "0x1024F28", Offset = "0x1024F28", VA = "0x1024F28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000222")]
		public float AngleInverted
		{
			[Token(Token = "0x60016FF")]
			[Address(RVA = "0x1024F60", Offset = "0x1024F60", VA = "0x1024F60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000223")]
		public Grabber PrimaryGrabber
		{
			[Token(Token = "0x6001700")]
			[Address(RVA = "0x1024F80", Offset = "0x1024F80", VA = "0x1024F80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000224")]
		public Grabber SecondaryGrabber
		{
			[Token(Token = "0x6001701")]
			[Address(RVA = "0x1025028", Offset = "0x1025028", VA = "0x1025028")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0x10250CC", Offset = "0x10250CC", VA = "0x10250CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0x1025184", Offset = "0x1025184", VA = "0x1025184", Slot = "27")]
		public virtual void UpdateAngleCalculations()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0x1025424", Offset = "0x1025424", VA = "0x1025424")]
		public float GetRelativeAngle(Vector3 position1, Vector3 position2)
		{
			return default(float);
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0x1025560", Offset = "0x1025560", VA = "0x1025560", Slot = "28")]
		public virtual void ApplyAngleToSteeringWheel(float angle)
		{
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0x1025588", Offset = "0x1025588", VA = "0x1025588", Slot = "29")]
		public virtual void UpdatePreviewText()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x1025704", Offset = "0x1025704", VA = "0x1025704", Slot = "30")]
		public virtual void CallEvents()
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0x10257A0", Offset = "0x10257A0", VA = "0x10257A0", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0x10258A8", Offset = "0x10258A8", VA = "0x10258A8", Slot = "31")]
		public virtual void ReturnToCenterAngle()
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0x1024F84", Offset = "0x1024F84", VA = "0x1024F84")]
		public Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x102502C", Offset = "0x102502C", VA = "0x102502C")]
		public Grabber GetSecondaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x1025960", Offset = "0x1025960", VA = "0x1025960", Slot = "32")]
		public virtual void UpdatePreviousAngle(float angle)
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0x1025968", Offset = "0x1025968", VA = "0x1025968", Slot = "33")]
		public virtual float GetScaledValue(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0x1025988", Offset = "0x1025988", VA = "0x1025988")]
		public SteeringWheel()
		{
		}
	}
	[Token(Token = "0x200038E")]
	public class TrackedDevice : MonoBehaviour
	{
		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableDevice Device;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x10259B0", Offset = "0x10259B0", VA = "0x10259B0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x1025A00", Offset = "0x1025A00", VA = "0x1025A00", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x1025A74", Offset = "0x1025A74", VA = "0x1025A74", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x1025AE8", Offset = "0x1025AE8", VA = "0x1025AE8", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0x1025B10", Offset = "0x1025B10", VA = "0x1025B10", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x1025B1C", Offset = "0x1025B1C", VA = "0x1025B1C", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x1025C00", Offset = "0x1025C00", VA = "0x1025C00", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x1025DF8", Offset = "0x1025DF8", VA = "0x1025DF8", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0x1025E04", Offset = "0x1025E04", VA = "0x1025E04")]
		public TrackedDevice()
		{
		}
	}
	[Token(Token = "0x200038F")]
	public enum TrackableDevice
	{
		[Token(Token = "0x400168C")]
		HMD,
		[Token(Token = "0x400168D")]
		LeftController,
		[Token(Token = "0x400168E")]
		RightController
	}
	[Token(Token = "0x2000390")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x2000391")]
		[CompilerGenerated]
		private sealed class <QueueDestroy>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400169A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400169B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400169C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x17000225")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001724")]
				[Address(RVA = "0x1027010", Offset = "0x1027010", VA = "0x1027010", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000226")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001726")]
				[Address(RVA = "0x1027058", Offset = "0x1027058", VA = "0x1027058", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001721")]
			[Address(RVA = "0x10263D8", Offset = "0x10263D8", VA = "0x10263D8")]
			[DebuggerHidden]
			public <QueueDestroy>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001722")]
			[Address(RVA = "0x1026E94", Offset = "0x1026E94", VA = "0x1026E94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001723")]
			[Address(RVA = "0x1026E98", Offset = "0x1026E98", VA = "0x1026E98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001725")]
			[Address(RVA = "0x1027018", Offset = "0x1027018", VA = "0x1027018", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000392")]
		[CompilerGenerated]
		private sealed class <ReEnableCollider>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400169D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400169E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400169F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x40016A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <waitFrames>5__2;

			[Token(Token = "0x40016A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <x>5__3;

			[Token(Token = "0x17000227")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600172A")]
				[Address(RVA = "0x1027140", Offset = "0x1027140", VA = "0x1027140", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000228")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600172C")]
				[Address(RVA = "0x1027188", Offset = "0x1027188", VA = "0x1027188", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001727")]
			[Address(RVA = "0x1026400", Offset = "0x1026400", VA = "0x1026400")]
			[DebuggerHidden]
			public <ReEnableCollider>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001728")]
			[Address(RVA = "0x1027060", Offset = "0x1027060", VA = "0x1027060", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001729")]
			[Address(RVA = "0x1027064", Offset = "0x1027064", VA = "0x1027064", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600172B")]
			[Address(RVA = "0x1027148", Offset = "0x1027148", VA = "0x1027148", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Grabbable grab;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Flying;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ZVel;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider ShaftCollider;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource impactSound;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float flightTime;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float destroyTime;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine queueDestroy;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Projectile ProjectileObject;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float arrowDamage;

		[Token(Token = "0x6001718")]
		[Address(RVA = "0x1025E0C", Offset = "0x1025E0C", VA = "0x1025E0C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x1025FBC", Offset = "0x1025FBC", VA = "0x1025FBC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0x10261F0", Offset = "0x10261F0", VA = "0x10261F0")]
		public void ShootArrow(Vector3 shotForce)
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0x1026364", Offset = "0x1026364", VA = "0x1026364")]
		[IteratorStateMachine(typeof(<QueueDestroy>d__14))]
		private IEnumerator QueueDestroy()
		{
			return null;
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0x10262F0", Offset = "0x10262F0", VA = "0x10262F0")]
		[IteratorStateMachine(typeof(<ReEnableCollider>d__15))]
		private IEnumerator ReEnableCollider()
		{
			return null;
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0x1026428", Offset = "0x1026428", VA = "0x1026428")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0x1026944", Offset = "0x1026944", VA = "0x1026944")]
		private void tryStickArrow(Collision collision)
		{
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0x1026D74", Offset = "0x1026D74", VA = "0x1026D74")]
		private void playSoundInterval(float fromSeconds, float toSeconds)
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0x1026E84", Offset = "0x1026E84", VA = "0x1026E84")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x2000393")]
	public class ArrowGrabArea : MonoBehaviour
	{
		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Bow theBow;

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x1027190", Offset = "0x1027190", VA = "0x1027190")]
		private void Start()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0x1027204", Offset = "0x1027204", VA = "0x1027204")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x102758C", Offset = "0x102758C", VA = "0x102758C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x10276AC", Offset = "0x10276AC", VA = "0x10276AC")]
		public ArrowGrabArea()
		{
		}
	}
	[Token(Token = "0x2000394")]
	public class AutoGrabGrabbable : GrabbableEvents
	{
		[Token(Token = "0x6001731")]
		[Address(RVA = "0x10276B4", Offset = "0x10276B4", VA = "0x10276B4", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0x10276DC", Offset = "0x10276DC", VA = "0x10276DC")]
		public AutoGrabGrabbable()
		{
		}
	}
	[Token(Token = "0x2000395")]
	public class Bow : GrabbableEvents
	{
		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("")]
		[Header("Bow Settings")]
		public float BowForce;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If True the BowModel Transform will align itself with the grabber holding the arrow")]
		public bool AlignBowToArrow;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If AlignBowToArrow is true this transform will align itself with the grabber holding the arrow")]
		public Transform BowModel;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Arrow will rotate around this if bow is held in left hand or ArrowRestLeftHanded is null")]
		[Header("Arrow Settings")]
		public Transform ArrowRest;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool CanGrabArrowFromKnock;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the prefab used to create an arrow. Must be in a /Resources/ directory.")]
		public string ArrowPrefabName;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Arrow will rotate around this if bow is being held in right hand")]
		public Transform ArrowRestLeftHanded;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform ArrowKnock;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Arrow Positioning")]
		public bool IgnoreXPosition;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool IgnoreYPosition;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AllowNegativeZ;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[Header("Arrow Grabbing")]
		public bool CanGrabArrow;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Grabber ClosestGrabber;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Arrow GrabbedArrow;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable arrowGrabbable;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Grabber arrowGrabber;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Vector3 LastValidPosition;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("String Settings")]
		public float MaxStringDistance;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float StringDistance;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float _lastDrawPercent;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _lastDrawHaptic;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _lastDrawHapticTime;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool playedDrawSound;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 initialKnockPosition;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool holdingArrow;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Grabbable bowGrabbable;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Debug Text")]
		public Text PercentageUI;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<DrawDefinition> drawDefs;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioSource audioSource;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 BowUp;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float AlignBowSpeed;

		[Token(Token = "0x17000229")]
		public float DrawPercent
		{
			[Token(Token = "0x6001733")]
			[Address(RVA = "0x10276E4", Offset = "0x10276E4", VA = "0x10276E4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001734")]
			[Address(RVA = "0x10276EC", Offset = "0x10276EC", VA = "0x10276EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x10276F4", Offset = "0x10276F4", VA = "0x10276F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x1027C9C", Offset = "0x1027C9C", VA = "0x1027C9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0x10285D4", Offset = "0x10285D4", VA = "0x10285D4")]
		private Transform getArrowRest()
		{
			return null;
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x102854C", Offset = "0x102854C", VA = "0x102854C")]
		private bool canGrabArrowFromKnock()
		{
			return default(bool);
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0x1028944", Offset = "0x1028944", VA = "0x1028944")]
		private float getGrabArrowInput()
		{
			return default(float);
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x1028A78", Offset = "0x1028A78", VA = "0x1028A78")]
		private float getGripInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0x1028A38", Offset = "0x1028A38", VA = "0x1028A38")]
		private float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x10286C0", Offset = "0x10286C0", VA = "0x10286C0")]
		private void setKnockPosition()
		{
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0x10288F0", Offset = "0x10288F0", VA = "0x10288F0")]
		private void checkDrawSound()
		{
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0x1028068", Offset = "0x1028068", VA = "0x1028068")]
		private void updateDrawDistance()
		{
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0x1028224", Offset = "0x1028224", VA = "0x1028224")]
		private void checkBowHaptics()
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x102849C", Offset = "0x102849C", VA = "0x102849C")]
		private void resetStringPosition()
		{
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0x1028AD0", Offset = "0x1028AD0", VA = "0x1028AD0", Slot = "27")]
		protected virtual void alignArrow()
		{
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0x1028BF8", Offset = "0x1028BF8", VA = "0x1028BF8", Slot = "28")]
		protected virtual void alignBow()
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x1028F78", Offset = "0x1028F78", VA = "0x1028F78", Slot = "29")]
		public virtual void ResetBowAlignment()
		{
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x10273B0", Offset = "0x10273B0", VA = "0x10273B0")]
		public void GrabArrow(Arrow arrow)
		{
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0x1028380", Offset = "0x1028380", VA = "0x1028380")]
		public void ReleaseArrow()
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0x1029098", Offset = "0x1029098", VA = "0x1029098", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0x1029054", Offset = "0x1029054", VA = "0x1029054")]
		private void resetArrowValues()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0x10290BC", Offset = "0x10290BC", VA = "0x10290BC")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x1028AB8", Offset = "0x1028AB8", VA = "0x1028AB8")]
		private void playBowDraw()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x1029038", Offset = "0x1029038", VA = "0x1029038")]
		private void playBowRelease()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x10291F0", Offset = "0x10291F0", VA = "0x10291F0")]
		public Bow()
		{
		}
	}
	[Token(Token = "0x2000396")]
	public class DrawDefinition
	{
		[Token(Token = "0x1700022A")]
		public float DrawPercentage
		{
			[Token(Token = "0x600174D")]
			[Address(RVA = "0x10292E8", Offset = "0x10292E8", VA = "0x10292E8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600174E")]
			[Address(RVA = "0x10292F0", Offset = "0x10292F0", VA = "0x10292F0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public float HapticAmplitude
		{
			[Token(Token = "0x600174F")]
			[Address(RVA = "0x10292F8", Offset = "0x10292F8", VA = "0x10292F8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001750")]
			[Address(RVA = "0x1029300", Offset = "0x1029300", VA = "0x1029300")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public float HapticFrequency
		{
			[Token(Token = "0x6001751")]
			[Address(RVA = "0x1029308", Offset = "0x1029308", VA = "0x1029308")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001752")]
			[Address(RVA = "0x1029310", Offset = "0x1029310", VA = "0x1029310")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0x1027C94", Offset = "0x1027C94", VA = "0x1027C94")]
		public DrawDefinition()
		{
		}
	}
	[Token(Token = "0x2000397")]
	public class BowArm : MonoBehaviour
	{
		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bow BowItem;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BowPercentStart;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotateDegrees;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion _startRotation;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion _endRotation;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool RotateX;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool RotateZ;

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x1029318", Offset = "0x1029318", VA = "0x1029318")]
		private void Start()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x1029454", Offset = "0x1029454", VA = "0x1029454")]
		private void Update()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x102962C", Offset = "0x102962C", VA = "0x102962C")]
		public BowArm()
		{
		}
	}
	[Token(Token = "0x2000398")]
	public class BulletHole : MonoBehaviour
	{
		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BulletHoleDecal;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxScale;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MinScale;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool RandomYRotation;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DestroyTime;

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x1029650", Offset = "0x1029650", VA = "0x1029650")]
		private void Start()
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x1029814", Offset = "0x1029814", VA = "0x1029814")]
		public void TryAttachTo(Collider col)
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x1029940", Offset = "0x1029940", VA = "0x1029940")]
		private bool transformIsEqualScale(Transform theTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x10299B0", Offset = "0x10299B0", VA = "0x10299B0")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x1029A3C", Offset = "0x1029A3C", VA = "0x1029A3C")]
		public BulletHole()
		{
		}
	}
	[Token(Token = "0x2000399")]
	public class CalibratePlayerHeight : MonoBehaviour
	{
		[Token(Token = "0x200039A")]
		[CompilerGenerated]
		private sealed class <setupInitialOffset>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalibratePlayerHeight <>4__this;

			[Token(Token = "0x1700022D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001769")]
				[Address(RVA = "0x1029EA0", Offset = "0x1029EA0", VA = "0x1029EA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600176B")]
				[Address(RVA = "0x1029EE8", Offset = "0x1029EE8", VA = "0x1029EE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001766")]
			[Address(RVA = "0x1029D8C", Offset = "0x1029D8C", VA = "0x1029D8C")]
			[DebuggerHidden]
			public <setupInitialOffset>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001767")]
			[Address(RVA = "0x1029DD8", Offset = "0x1029DD8", VA = "0x1029DD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001768")]
			[Address(RVA = "0x1029DDC", Offset = "0x1029DDC", VA = "0x1029DDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600176A")]
			[Address(RVA = "0x1029EA8", Offset = "0x1029EA8", VA = "0x1029EA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Desired height of the player in meters. The player's presence in vr will be adjusted based on their physical height. 1.65 meters = 5.41 feet")]
		public float DesiredPlayerHeight;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Adjust the CharacterControllerYOffset property of this playerController. If not specified one will be found using GetComponentInChildren()")]
		public BNGPlayerController PlayerController;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Startup")]
		[Tooltip("If true, the player's virtual height will be adjusted to match DesiredPlayerHeight on Start()")]
		public bool CalibrateOnStart;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Input :")]
		[Tooltip("If specified, pressing this button / action will activate the calibration")]
		public InputAction CalibrateHeightAction;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _initialOffset;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool CheckPlayerHeightConstant;

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x1029A60", Offset = "0x1029A60", VA = "0x1029A60")]
		private void Start()
		{
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x1029C1C", Offset = "0x1029C1C", VA = "0x1029C1C")]
		public void CalibrateHeight()
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x1029C60", Offset = "0x1029C60", VA = "0x1029C60")]
		public void CalibrateHeightOnIkScale()
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x1029C24", Offset = "0x1029C24", VA = "0x1029C24")]
		public void CalibrateHeight(float calibrateHeight)
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0x1029CF0", Offset = "0x1029CF0", VA = "0x1029CF0")]
		public void ResetPlayerHeight()
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x1029C74", Offset = "0x1029C74", VA = "0x1029C74")]
		public float GetCurrentPlayerHeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0x1029D14", Offset = "0x1029D14", VA = "0x1029D14", Slot = "4")]
		public virtual void SetInitialOffset()
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x1029BA8", Offset = "0x1029BA8", VA = "0x1029BA8")]
		[IteratorStateMachine(typeof(<setupInitialOffset>d__13))]
		private IEnumerator setupInitialOffset()
		{
			return null;
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0x1029DB4", Offset = "0x1029DB4", VA = "0x1029DB4")]
		public CalibratePlayerHeight()
		{
		}
	}
	[Token(Token = "0x200039B")]
	public class CustomCenterOfMass : MonoBehaviour
	{
		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Local coordinates to use as center of mass if 'CenterOfMassTransform' is not specified.")]
		[Header("Define Center of Mass")]
		public Vector3 CenterOfMass;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Use this Transform's local position for the center of mass if specified.")]
		public Transform CenterOfMassTransform;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Debug Options")]
		[Tooltip("If true a red sphere will in the editor show where the center of mass will be positioned")]
		public bool ShowGizmo;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x600176C")]
		[Address(RVA = "0x1029EF0", Offset = "0x1029EF0", VA = "0x1029EF0")]
		private void Start()
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0x1029F68", Offset = "0x1029F68", VA = "0x1029F68", Slot = "4")]
		public virtual void SetCenterOfMass(Vector3 center)
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0x102A018", Offset = "0x102A018", VA = "0x102A018", Slot = "5")]
		protected virtual Vector3 getThisCenterOfMass()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0x102A0A0", Offset = "0x102A0A0", VA = "0x102A0A0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0x102A1CC", Offset = "0x102A1CC", VA = "0x102A1CC")]
		public CustomCenterOfMass()
		{
		}
	}
	[Token(Token = "0x200039C")]
	public class DrawerSound : MonoBehaviour
	{
		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DrawerOpenSound;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DrawerOpenValue;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip DrawerCloseSound;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DrawerCloseValue;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool playedOpenSound;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool playedCloseSound;

		[Token(Token = "0x6001771")]
		[Address(RVA = "0x102A234", Offset = "0x102A234", VA = "0x102A234")]
		public void OnDrawerUpdate(float drawerValue)
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0x102A3C4", Offset = "0x102A3C4", VA = "0x102A3C4")]
		public DrawerSound()
		{
		}
	}
	[Token(Token = "0x200039D")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x200039E")]
		[CompilerGenerated]
		private sealed class <explosionRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Explosive <>4__this;

			[Token(Token = "0x1700022F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600177B")]
				[Address(RVA = "0x102A9E8", Offset = "0x102A9E8", VA = "0x102A9E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000230")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600177D")]
				[Address(RVA = "0x102AA30", Offset = "0x102AA30", VA = "0x102AA30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001778")]
			[Address(RVA = "0x102A470", Offset = "0x102A470", VA = "0x102A470")]
			[DebuggerHidden]
			public <explosionRoutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001779")]
			[Address(RVA = "0x102A5E0", Offset = "0x102A5E0", VA = "0x102A5E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600177A")]
			[Address(RVA = "0x102A5E4", Offset = "0x102A5E4", VA = "0x102A5E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600177C")]
			[Address(RVA = "0x102A9F0", Offset = "0x102A9F0", VA = "0x102A9F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200039F")]
		[CompilerGenerated]
		private sealed class <dealDelayedDamaged>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x40016F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable damageable;

			[Token(Token = "0x40016F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Explosive <>4__this;

			[Token(Token = "0x17000231")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001781")]
				[Address(RVA = "0x102AB08", Offset = "0x102AB08", VA = "0x102AB08", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000232")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001783")]
				[Address(RVA = "0x102AB50", Offset = "0x102AB50", VA = "0x102AB50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600177E")]
			[Address(RVA = "0x102A538", Offset = "0x102A538", VA = "0x102A538")]
			[DebuggerHidden]
			public <dealDelayedDamaged>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600177F")]
			[Address(RVA = "0x102AA38", Offset = "0x102AA38", VA = "0x102AA38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001780")]
			[Address(RVA = "0x102AA3C", Offset = "0x102AA3C", VA = "0x102AA3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001782")]
			[Address(RVA = "0x102AB10", Offset = "0x102AB10", VA = "0x102AB10", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Explosion Settings : ")]
		[Tooltip("Objects within this radius will have damage and force applied to it")]
		public float ExplosionRadius;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Apply damage to an item if it has a Damageable component attached. ")]
		public float ExplosionDamage;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If an object has a Rigidbody and is within ExplosionRadius, it will have this amount of ExplosionForce added to it")]
		public float ExplosionForce;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Add an UpwardsModifier to AddExplosionForce. Use this to make objects fly more up into the air, instead of just outwardly.")]
		public float ExplosiveUpwardsModifier;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowExplosionRadius;

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x102A3DC", Offset = "0x102A3DC", VA = "0x102A3DC", Slot = "4")]
		public virtual void DoExplosion()
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x102A3FC", Offset = "0x102A3FC", VA = "0x102A3FC")]
		[IteratorStateMachine(typeof(<explosionRoutine>d__6))]
		private IEnumerator explosionRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x102A498", Offset = "0x102A498", VA = "0x102A498")]
		[IteratorStateMachine(typeof(<dealDelayedDamaged>d__7))]
		private IEnumerator dealDelayedDamaged(Damageable damageable, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x102A560", Offset = "0x102A560", VA = "0x102A560")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0x102A5C4", Offset = "0x102A5C4", VA = "0x102A5C4")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x6001784")]
		[Address(RVA = "0x102AB58", Offset = "0x102AB58", VA = "0x102AB58")]
		public static bool GetDown(this ControllerBinding binding)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A1")]
	public class Flashlight : GrabbableEvents
	{
		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Light SpotLight;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LightSwitch;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalSwitchPosition;

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x102ABC0", Offset = "0x102ABC0", VA = "0x102ABC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0x102ABF8", Offset = "0x102ABF8", VA = "0x102ABF8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x102AC60", Offset = "0x102AC60", VA = "0x102AC60", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x102ACA8", Offset = "0x102ACA8", VA = "0x102ACA8")]
		public Flashlight()
		{
		}
	}
	[Token(Token = "0x20003A2")]
	public class FPSText : MonoBehaviour
	{
		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float deltaTime;

		[Token(Token = "0x6001789")]
		[Address(RVA = "0x102ACB0", Offset = "0x102ACB0", VA = "0x102ACB0")]
		private void Start()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0x102AD08", Offset = "0x102AD08", VA = "0x102AD08")]
		private void Update()
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x102ADF0", Offset = "0x102ADF0", VA = "0x102ADF0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x102AEB4", Offset = "0x102AEB4", VA = "0x102AEB4")]
		public FPSText()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public class GrappleShot : GrabbableEvents
	{
		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Range")]
		public float MaxRange;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("(CharacterController Player Only) How much movement speed to apply to the CharacterController to move towards the grapple")]
		[Header("CharacterController Grapple Settings")]
		public float GrappleReelForce;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("currentGrappleDistance must be greater than this to reel in")]
		public float MinReelDistance;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Rigidbody Grapple Settings")]
		[Tooltip("(Rigidbody Player Only) How much force to apply to the player to move towards the grapple")]
		public float GrappleForce;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Rigidbody Player Only) Type of ForceMode to use to move the player towards the grapple point. ForceMode. ForceMode.Acceleration will let you preserve momentum and Swing Around. Use lower number for Acceleration (ex : 3). ForceMode.Velocity will immediately alter your player's velocity, resulting in a smooth but linear movement. Use higher numbers (ex : 200).")]
		public ForceMode GrappleForceMode;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Raycast Layers")]
		public LayerMask GrappleLayers;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Component definitions")]
		public Transform MuzzleTransform;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HitTargetPrefab;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LineRenderer GrappleLine;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer HelperLine;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip GrappleShotSound;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool grappling;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool wasGrappling;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CharacterController characterController;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody playerRigid;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioSource audioSource;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Shown for Debug :")]
		public float currentGrappleDistance;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool validTargetFound;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool isDynamic;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody grappleTargetRigid;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Collider grappleTargetCollider;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform grappleTargetParent;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool requireRelease;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool climbing;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Climbable ClimbHelper;

		[Token(Token = "0x600178D")]
		[Address(RVA = "0x102AEBC", Offset = "0x102AEBC", VA = "0x102AEBC")]
		private void Start()
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0x102B0C0", Offset = "0x102B0C0", VA = "0x102B0C0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0x102B7F8", Offset = "0x102B7F8", VA = "0x102B7F8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0x102B874", Offset = "0x102B874", VA = "0x102B874")]
		private void updateGrappleDistance()
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0x102C148", Offset = "0x102C148", VA = "0x102C148", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0x102C150", Offset = "0x102C150", VA = "0x102C150", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0x102BF94", Offset = "0x102BF94", VA = "0x102BF94")]
		private void onReleaseGrapple()
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x102B138", Offset = "0x102B138", VA = "0x102B138")]
		private void drawGrappleHelper()
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x102B6C0", Offset = "0x102B6C0", VA = "0x102B6C0")]
		private void drawGrappleLine()
		{
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x102B748", Offset = "0x102B748", VA = "0x102B748")]
		private void hideGrappleLine()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x102C200", Offset = "0x102C200", VA = "0x102C200")]
		private void showGrappleHelper(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0x102B5AC", Offset = "0x102B5AC", VA = "0x102B5AC")]
		private void hideGrappleHelper()
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x102B950", Offset = "0x102B950", VA = "0x102B950")]
		private void reelInGrapple(float triggerValue)
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0x102BEB0", Offset = "0x102BEB0", VA = "0x102BEB0")]
		private void shootGrapple()
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0x102C3CC", Offset = "0x102C3CC", VA = "0x102C3CC")]
		private void dropGrapple()
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0x102C16C", Offset = "0x102C16C", VA = "0x102C16C")]
		private void changeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x102C3D8", Offset = "0x102C3D8", VA = "0x102C3D8")]
		public GrappleShot()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public class HandJet : GrabbableEvents
	{
		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Movement Speed to apply if using a CharacterController, or Force to apply if using a Rigidbody controller.")]
		public float JetForce;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Enabled while jetting")]
		public ParticleSystem JetFX;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true the player will float in the air when not jetting. (Works for Rigidbody player only)")]
		public bool DisableGravityWhileHeld;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterController characterController;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody playerRigid;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 moveDirection;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 addRigidForce;

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x102C3F4", Offset = "0x102C3F4", VA = "0x102C3F4")]
		private void Start()
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x102C5C0", Offset = "0x102C5C0", VA = "0x102C5C0", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0x102C9C8", Offset = "0x102C9C8", VA = "0x102C9C8")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x102CB04", Offset = "0x102CB04", VA = "0x102CB04", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x102CB18", Offset = "0x102CB18", VA = "0x102CB18")]
		public void ChangeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x102CBAC", Offset = "0x102CBAC", VA = "0x102CBAC", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x102C604", Offset = "0x102C604", VA = "0x102C604")]
		private void doJet(float triggerValue)
		{
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0x102C8C0", Offset = "0x102C8C0", VA = "0x102C8C0")]
		private void stopJet()
		{
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0x102CBD8", Offset = "0x102CBD8", VA = "0x102CBD8", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x102CBF4", Offset = "0x102CBF4", VA = "0x102CBF4")]
		public HandJet()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	public class HandModelSwitcher : MonoBehaviour
	{
		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int HandModelId;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandModelSelector hms;

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0x102CC0C", Offset = "0x102CC0C", VA = "0x102CC0C")]
		private void Start()
		{
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0x102CD24", Offset = "0x102CD24", VA = "0x102CD24")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0x102CDE8", Offset = "0x102CDE8", VA = "0x102CDE8")]
		public HandModelSwitcher()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public class IKDummy : MonoBehaviour
	{
		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ThisEyeBone;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform PlayerTransform;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform HeadFollow;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform RightHandFollow;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LeftHandFollow;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 HandRotationOffset;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator animator;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform headBone;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform leftHandDummy;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightHandDummy;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform leftHandOnPlayer;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform rightHandOnPlayer;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lookatDummy;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 localPos;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion localRot;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform cam;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 leftHandLocalPos;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 rightHandLocalPos;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion leftHandLocalRot;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion rightHandLocalRot;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 LeftHandsOffset;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 RightHandsOffset;

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0x102CDF8", Offset = "0x102CDF8", VA = "0x102CDF8")]
		private void Start()
		{
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0x102D0F4", Offset = "0x102D0F4", VA = "0x102D0F4")]
		public Transform SetParentAndLocalPosRot(string transformName, Transform parentToSet)
		{
			return null;
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0x102D20C", Offset = "0x102D20C", VA = "0x102D20C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x102D4CC", Offset = "0x102D4CC", VA = "0x102D4CC")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0x102D7F8", Offset = "0x102D7F8", VA = "0x102D7F8")]
		public IKDummy()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxRange;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform LaserEnd;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Active;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer line;

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0x102D880", Offset = "0x102D880", VA = "0x102D880")]
		private void Start()
		{
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x102D8D8", Offset = "0x102D8D8", VA = "0x102D8D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x102DBFC", Offset = "0x102DBFC", VA = "0x102DBFC")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public class LaserSword : GrabbableEvents
	{
		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grabbable;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform BladeTransform;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform RaycastTransform;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask LaserCollision;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem CollisionParticle;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool BladeEnabled;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool SaberSwitchOn;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float LaserLength;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float LaserActivateSpeed;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource CollisionAudio;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool Colliding;

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x102DC14", Offset = "0x102DC14", VA = "0x102DC14")]
		private void Start()
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x102DCD8", Offset = "0x102DCD8", VA = "0x102DCD8")]
		private void Update()
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x102E258", Offset = "0x102E258", VA = "0x102E258", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0x102DEC8", Offset = "0x102DEC8", VA = "0x102DEC8")]
		private void checkCollision()
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x102E274", Offset = "0x102E274", VA = "0x102E274")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x102E39C", Offset = "0x102E39C", VA = "0x102E39C")]
		public LaserSword()
		{
		}
	}
	[Token(Token = "0x20003A9")]
	public class LiquidWobble : MonoBehaviour
	{
		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer rend;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPos;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 velocity;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 lastRot;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 angularVelocity;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaxWobble;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float WobbleSpeed;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Recovery;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float wobbleAmountX;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float wobbleAmountZ;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float wobbleAmountToAddX;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float wobbleAmountToAddZ;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulse;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float time;

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x102E3B0", Offset = "0x102E3B0", VA = "0x102E3B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x102E408", Offset = "0x102E408", VA = "0x102E408")]
		private void Update()
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0x102E6B8", Offset = "0x102E6B8", VA = "0x102E6B8")]
		public LiquidWobble()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	public class Marker : GrabbableEvents
	{
		[Token(Token = "0x20003AB")]
		[CompilerGenerated]
		private sealed class <WriteRoutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001764")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001765")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001766")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Marker <>4__this;

			[Token(Token = "0x17000233")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017C6")]
				[Address(RVA = "0x102F2BC", Offset = "0x102F2BC", VA = "0x102F2BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000234")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017C8")]
				[Address(RVA = "0x102F304", Offset = "0x102F304", VA = "0x102F304", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017C3")]
			[Address(RVA = "0x102E7F4", Offset = "0x102E7F4", VA = "0x102E7F4")]
			[DebuggerHidden]
			public <WriteRoutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x60017C4")]
			[Address(RVA = "0x102EFB4", Offset = "0x102EFB4", VA = "0x102EFB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017C5")]
			[Address(RVA = "0x102EFB8", Offset = "0x102EFB8", VA = "0x102EFB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017C7")]
			[Address(RVA = "0x102F2C4", Offset = "0x102F2C4", VA = "0x102F2C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material DrawMaterial;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color DrawColor;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float LineWidth;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform RaycastStart;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask DrawingLayers;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float RaycastLength;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MinDrawDistance;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ReuseTolerance;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool IsNewDraw;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 lastDrawPoint;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LineRenderer LineRenderer;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform root;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTransform;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine drawRoutine;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastLineWidth;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int renderLifeTime;

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0x102E6DC", Offset = "0x102E6DC", VA = "0x102E6DC", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x102E7AC", Offset = "0x102E7AC", VA = "0x102E7AC", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x102E738", Offset = "0x102E738", VA = "0x102E738")]
		[IteratorStateMachine(typeof(<WriteRoutine>d__18))]
		private IEnumerator WriteRoutine()
		{
			return null;
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0x102E81C", Offset = "0x102E81C", VA = "0x102E81C")]
		private void InitDraw(Vector3 position, Quaternion rotation, float lineWidth, Color lineColor)
		{
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x102E990", Offset = "0x102E990", VA = "0x102E990")]
		private Vector3 DrawPoint(Vector3 lastDrawPoint, Vector3 endPosition, float lineWidth, Color lineColor, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0x102EEC4", Offset = "0x102EEC4", VA = "0x102EEC4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x102EF7C", Offset = "0x102EF7C", VA = "0x102EF7C")]
		public Marker()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public class MoveToWaypoint : MonoBehaviour
	{
		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Waypoint Destination;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MovementSpeed;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ReachedDestination;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Delay in seconds to way before starting movement towards Destination")]
		public float StartDelay;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool reachedDelay;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float delayedTime;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 previousPosition;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 PositionDifference;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool MoveInUpdate;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool MoveInFixedUpdate;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x102F30C", Offset = "0x102F30C", VA = "0x102F30C")]
		private void Start()
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x102F37C", Offset = "0x102F37C", VA = "0x102F37C")]
		private void Update()
		{
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x102F804", Offset = "0x102F804", VA = "0x102F804")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x102F434", Offset = "0x102F434", VA = "0x102F434")]
		private void movePlatform(float timeDelta)
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x102F830", Offset = "0x102F830", VA = "0x102F830")]
		private void resetDelayStatus()
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x102F83C", Offset = "0x102F83C", VA = "0x102F83C")]
		public MoveToWaypoint()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	public class MovingPlatform : MonoBehaviour
	{
		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If set to ParentToPlatform the CharacterController will be parented to any MovingPlatform object below it each frame. If set to PositionDifference the movement will be read from the PositionDifference property of the MoveToWaypoint object below it. ")]
		public MovingPlatformMethod MovementMethod;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public Vector3 PositionDelta;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Quaternion RotationDelta;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Quaternion previousRotation;

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x102F85C", Offset = "0x102F85C", VA = "0x102F85C")]
		protected void Update()
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x102F9A4", Offset = "0x102F9A4", VA = "0x102F9A4")]
		public MovingPlatform()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public enum MovingPlatformMethod
	{
		[Token(Token = "0x4001779")]
		ParentToPlatform,
		[Token(Token = "0x400177A")]
		PositionDifference
	}
	[Token(Token = "0x20003AF")]
	public class PlayerScaler : MonoBehaviour
	{
		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> ScaleObjects;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Scale;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scaleSpeed;

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x102F9AC", Offset = "0x102F9AC", VA = "0x102F9AC")]
		private void Update()
		{
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x102FBE4", Offset = "0x102FBE4", VA = "0x102FBE4")]
		public PlayerScaler()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class ProjectileLauncher : MonoBehaviour
	{
		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectileObject;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ProjectileForce;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip LaunchSound;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem LaunchParticles;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _initialProjectileForce;

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0x102FBF8", Offset = "0x102FBF8", VA = "0x102FBF8")]
		private void Start()
		{
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x102FC04", Offset = "0x102FC04", VA = "0x102FC04")]
		public GameObject ShootProjectile(float projectileForce)
		{
			return null;
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x102FEB0", Offset = "0x102FEB0", VA = "0x102FEB0")]
		public void ShootProjectile()
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0x102FEB8", Offset = "0x102FEB8", VA = "0x102FEB8")]
		public void SetForce(float force)
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0x102FEC0", Offset = "0x102FEC0", VA = "0x102FEC0")]
		public float GetInitialProjectileForce()
		{
			return default(float);
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x102FEC8", Offset = "0x102FEC8", VA = "0x102FEC8")]
		public ProjectileLauncher()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public class SceneLoader : MonoBehaviour
	{
		[Token(Token = "0x20003B2")]
		[CompilerGenerated]
		private sealed class <FadeThenLoadScene>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001789")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400178A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400178B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneLoader <>4__this;

			[Token(Token = "0x17000235")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017DF")]
				[Address(RVA = "0x1030248", Offset = "0x1030248", VA = "0x1030248", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000236")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017E1")]
				[Address(RVA = "0x1030290", Offset = "0x1030290", VA = "0x1030290", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017DC")]
			[Address(RVA = "0x102FFFC", Offset = "0x102FFFC", VA = "0x102FFFC")]
			[DebuggerHidden]
			public <FadeThenLoadScene>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60017DD")]
			[Address(RVA = "0x1030094", Offset = "0x1030094", VA = "0x1030094", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017DE")]
			[Address(RVA = "0x1030098", Offset = "0x1030098", VA = "0x1030098", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017E0")]
			[Address(RVA = "0x1030250", Offset = "0x1030250", VA = "0x1030250", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Unity 'LoadSceneMode' method of loading the scene (In most cases should be 'Single'). ")]
		public LoadSceneMode loadSceneMode;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the ScreenFader component will fade the screen to black before loading a level.")]
		public bool UseSceenFader;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Wait this long in seconds before attempting to load the scene. Useful if you need to fade the screen out before attempting to load the level.")]
		public float ScreenFadeTime;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ScreenFader sf;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string _loadSceneName;

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x102FED8", Offset = "0x102FED8", VA = "0x102FED8")]
		public void LoadScene(string SceneName)
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x102FF88", Offset = "0x102FF88", VA = "0x102FF88")]
		[IteratorStateMachine(typeof(<FadeThenLoadScene>d__6))]
		public IEnumerator FadeThenLoadScene()
		{
			return null;
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0x1030024", Offset = "0x1030024", VA = "0x1030024")]
		public SceneLoader()
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public class SlidingDoorMover : MonoBehaviour
	{
		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DoorSpeed;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float OpenXValue;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float targetXPosition;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float smoothedPosition;

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0x1030298", Offset = "0x1030298", VA = "0x1030298")]
		private void Update()
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0x103030C", Offset = "0x103030C", VA = "0x103030C")]
		public void SetTargetPosition(float targetValue)
		{
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0x103031C", Offset = "0x103031C", VA = "0x103031C")]
		public SlidingDoorMover()
		{
		}
	}
	[Token(Token = "0x20003B4")]
	public class TimeController : MonoBehaviour
	{
		[Token(Token = "0x20003B5")]
		[CompilerGenerated]
		private sealed class <resumeTimeRoutine>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400179D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400179E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400179F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TimeController <>4__this;

			[Token(Token = "0x17000238")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017F0")]
				[Address(RVA = "0x10308EC", Offset = "0x10308EC", VA = "0x10308EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000239")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017F2")]
				[Address(RVA = "0x1030934", Offset = "0x1030934", VA = "0x1030934", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017ED")]
			[Address(RVA = "0x1030738", Offset = "0x1030738", VA = "0x1030738")]
			[DebuggerHidden]
			public <resumeTimeRoutine>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x60017EE")]
			[Address(RVA = "0x103077C", Offset = "0x103077C", VA = "0x103077C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017EF")]
			[Address(RVA = "0x1030780", Offset = "0x1030780", VA = "0x1030780", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017F1")]
			[Address(RVA = "0x10308F4", Offset = "0x10308F4", VA = "0x10308F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Timescale to slow down to if slow down key is pressed")]
		public float SlowTimeScale;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, Y Button will always slow time. Useful for debugging. Otherwise call SlowTime / ResumeTime yourself")]
		public bool YKeySlowsTime;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input Action used to initiate slow time")]
		public InputActionReference SlowTimeAction;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Play this clip when starting to slow time")]
		public AudioClip SlowTimeClip;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Play this clip when ending slow mo")]
		public AudioClip SpeedupTimeClip;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, will set Time.fixedDeltaTime to the device refresh rate")]
		public bool SetFixedDelta;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("If true, will check for input in Update to slow down time. If false you'll need to call SlowTime() / ResumeTime() manually from script")]
		public bool CheckInput;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool _slowingTime;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		private bool routineRunning;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float originalFixedDelta;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioSource audioSource;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ForceTimeScale;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IEnumerator resumeRoutine;

		[Token(Token = "0x17000237")]
		public bool TimeSlowing
		{
			[Token(Token = "0x60017E5")]
			[Address(RVA = "0x1030330", Offset = "0x1030330", VA = "0x1030330")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x1030338", Offset = "0x1030338", VA = "0x1030338")]
		private void Start()
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x10303CC", Offset = "0x10303CC", VA = "0x10303CC")]
		private void Update()
		{
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x10305D0", Offset = "0x10305D0", VA = "0x10305D0", Slot = "4")]
		public virtual bool SlowTimeInputDown()
		{
			return default(bool);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x1030414", Offset = "0x1030414", VA = "0x1030414")]
		public void SlowTime()
		{
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x103055C", Offset = "0x103055C", VA = "0x103055C")]
		public void ResumeTime()
		{
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x10306C4", Offset = "0x10306C4", VA = "0x10306C4")]
		[IteratorStateMachine(typeof(<resumeTimeRoutine>d__20))]
		private IEnumerator resumeTimeRoutine()
		{
			return null;
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x1030760", Offset = "0x1030760", VA = "0x1030760")]
		public TimeController()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class ToggleActiveOnInputAction : MonoBehaviour
	{
		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputActionReference InputAction;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ToggleObject;

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x103093C", Offset = "0x103093C", VA = "0x103093C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x10309DC", Offset = "0x10309DC", VA = "0x10309DC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x1030A7C", Offset = "0x1030A7C", VA = "0x1030A7C")]
		public void ToggleActive(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x1030B14", Offset = "0x1030B14", VA = "0x1030B14")]
		public ToggleActiveOnInputAction()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class VehicleController : MonoBehaviour
	{
		[Token(Token = "0x20003B8")]
		[CompilerGenerated]
		private sealed class <crankEngine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VehicleController <>4__this;

			[Token(Token = "0x1700023A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600180F")]
				[Address(RVA = "0x1031A04", Offset = "0x1031A04", VA = "0x1031A04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001811")]
				[Address(RVA = "0x1031A4C", Offset = "0x1031A4C", VA = "0x1031A4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600180C")]
			[Address(RVA = "0x1030DB8", Offset = "0x1030DB8", VA = "0x1030DB8")]
			[DebuggerHidden]
			public <crankEngine>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x600180D")]
			[Address(RVA = "0x10317F8", Offset = "0x10317F8", VA = "0x10317F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600180E")]
			[Address(RVA = "0x10317FC", Offset = "0x10317FC", VA = "0x10317FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001810")]
			[Address(RVA = "0x1031A0C", Offset = "0x1031A0C", VA = "0x1031A0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Engine Properties")]
		public float MotorTorque;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxSpeed;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxSteeringAngle;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Steering Grabbable")]
		[Tooltip("If true and SteeringGrabbable is being held, the right / left trigger will act as input for acceleration / defceleration.")]
		public bool CheckTriggerInput;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable SteeringGrabbable;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Engine Status")]
		[Tooltip("Is the Engine on and ready for input. If false, engine will need to be started first.")]
		public bool EngineOn;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long it takes to start the engine")]
		public float CrankTime;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Speedometer")]
		[Tooltip("Output the current speed to this label if specified")]
		public Text SpeedLabel;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Audio Setup")]
		public AudioSource EngineAudio;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Sound to play / loop when EngineOn = true. Pitch will be altered according to speed.")]
		public AudioClip IdleSound;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If specified this clip will play before the engine is turned on. Clip to play when starting the Engine.")]
		public AudioClip CrankSound;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip CollisionSound;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public float SteeringAngle;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public float MotorInput;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float CurrentSpeed;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Wheel Configuration")]
		public List<WheelObject> Wheels;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 initialPosition;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody rb;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool wasHoldingSteering;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool isHoldingSteering;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool crankingEngine;

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x1030B1C", Offset = "0x1030B1C", VA = "0x1030B1C")]
		private void Start()
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x1030B9C", Offset = "0x1030B9C", VA = "0x1030B9C")]
		private void Update()
		{
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x1030D08", Offset = "0x1030D08", VA = "0x1030D08", Slot = "4")]
		public virtual void CrankEngine()
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x1030D44", Offset = "0x1030D44", VA = "0x1030D44")]
		[IteratorStateMachine(typeof(<crankEngine>d__24))]
		private IEnumerator crankEngine()
		{
			return null;
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x1030DE0", Offset = "0x1030DE0", VA = "0x1030DE0", Slot = "5")]
		public virtual void CheckOutOfBounds()
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x1030E3C", Offset = "0x1030E3C", VA = "0x1030E3C", Slot = "6")]
		public virtual void GetTorqueInputFromTriggers()
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x1030EF8", Offset = "0x1030EF8", VA = "0x1030EF8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x1031090", Offset = "0x1031090", VA = "0x1031090", Slot = "7")]
		public virtual void UpdateWheelTorque()
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x1031198", Offset = "0x1031198", VA = "0x1031198", Slot = "8")]
		public virtual void SetSteeringAngle(float steeringAngle)
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x10311A0", Offset = "0x10311A0", VA = "0x10311A0", Slot = "9")]
		public virtual void SetSteeringAngleInverted(float steeringAngle)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x10311AC", Offset = "0x10311AC", VA = "0x10311AC", Slot = "10")]
		public virtual void SetSteeringAngle(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x10311B4", Offset = "0x10311B4", VA = "0x10311B4", Slot = "11")]
		public virtual void SetSteeringAngleInverted(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x10311C0", Offset = "0x10311C0", VA = "0x10311C0", Slot = "12")]
		public virtual void SetMotorTorqueInput(float input)
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0x10311C8", Offset = "0x10311C8", VA = "0x10311C8", Slot = "13")]
		public virtual void SetMotorTorqueInputInverted(float input)
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x10311D4", Offset = "0x10311D4", VA = "0x10311D4", Slot = "14")]
		public virtual void SetMotorTorqueInput(Vector2 input)
		{
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x10311DC", Offset = "0x10311DC", VA = "0x10311DC", Slot = "15")]
		public virtual void SetMotorTorqueInputInverted(Vector2 input)
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x10311E8", Offset = "0x10311E8", VA = "0x10311E8", Slot = "16")]
		public virtual void UpdateWheelVisuals(WheelObject wheel)
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x10312CC", Offset = "0x10312CC", VA = "0x10312CC", Slot = "17")]
		public virtual void UpdateEngineAudio()
		{
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x1031380", Offset = "0x1031380", VA = "0x1031380")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x1030FB0", Offset = "0x1030FB0", VA = "0x1030FB0")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x10317C8", Offset = "0x10317C8", VA = "0x10317C8")]
		public VehicleController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B9")]
	public class WheelObject
	{
		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WheelCollider Wheel;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform WheelVisual;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ApplyTorque;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ApplySteering;

		[Token(Token = "0x6001812")]
		[Address(RVA = "0x1031A54", Offset = "0x1031A54", VA = "0x1031A54")]
		public WheelObject()
		{
		}
	}
	[Token(Token = "0x20003BA")]
	public class VREmulator : MonoBehaviour
	{
		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Enable / Disable : ")]
		[Tooltip("Use Emulator if true and HMDIsActive is false")]
		public bool EmulatorEnabled;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Set to false if you want to use in standalone builds as well as the editor")]
		public bool EditorOnly;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If true the game window must have focus for the emulator to be active")]
		public bool RequireGameFocus;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Input : ")]
		[SerializeField]
		[Tooltip("Action set used specifically to mimic or supplement a vr setup")]
		public InputActionAsset EmulatorActionSet;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Player Teleportation")]
		[Tooltip("Will set the PlayerTeleport component's ForceStraightArrow = true while the emulator is active.")]
		public bool ForceStraightTeleportRotation;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Header("Move Player Up / Down")]
		[Tooltip("If true, move the player eye offset up / down whenever PlayerUpAction / PlayerDownAction is called.")]
		public bool AllowUpDownControls;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Unity Input Action used to move the player up")]
		public InputActionReference PlayerUpAction;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Input Action used to move the player down")]
		public InputActionReference PlayerDownAction;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Minimum height in meters the player can shrink to when using the PlayerDownAction")]
		public float MinPlayerHeight;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Maximum height in meters the player can grow to when using the PlayerUpAction")]
		public float MaxPlayerHeight;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Head Look")]
		[Tooltip("Unity Input Action used to lock the camera in game mode to look around")]
		public InputActionReference LockCameraAction;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Unity Input Action used to lock the camera in game mode to look around")]
		public InputActionReference CameraLookAction;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Multiply the CameraLookAction by this amount")]
		public float CameraLookSensitivityX;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Multiply the CameraLookAction by this amount")]
		public float CameraLookSensitivityY;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Minimum local Eulers degrees the camera can rotate")]
		public float MinimumCameraY;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Minimum local Eulers degrees the camera can rotate")]
		public float MaximumCameraY;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Unity Input Action used to mimic holding the Left Grip")]
		[Header("Controller Emulation")]
		public InputActionReference LeftGripAction;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Unity Input Action used to mimic holding the Left Trigger")]
		public InputActionReference LeftTriggerAction;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Unity Input Action used to mimic having your thumb near a button")]
		public InputActionReference LeftThumbNearAction;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Unity Input Action used to move mimic holding the Right Grip")]
		public InputActionReference RightGripAction;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Unity Input Action used to move mimic holding the Right Grip")]
		public InputActionReference RightTriggerAction;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Unity Input Action used to mimic having your thumb near a button")]
		public InputActionReference RightThumbNearAction;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float mouseRotationX;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float mouseRotationY;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform mainCameraTransform;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform leftControllerTranform;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform rightControllerTranform;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform leftHandAnchor;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform rightHandAnchor;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private BNGPlayerController player;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private PlayerTeleport playerTeleport;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool didFirstActivate;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Grabber grabberLeft;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Grabber grabberRight;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _originalPlayerYOffset;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Header("Shown for Debug : ")]
		public bool HMDIsActive;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Vector3 LeftControllerPosition;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public Vector3 RightControllerPosition;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool priorStraightSetting;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float prevVal;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool isQuitting;

		[Token(Token = "0x6001813")]
		[Address(RVA = "0x1031A5C", Offset = "0x1031A5C", VA = "0x1031A5C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x1031E78", Offset = "0x1031E78", VA = "0x1031E78")]
		public void OnBeforeRender()
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x1031F04", Offset = "0x1031F04", VA = "0x1031F04")]
		private void onFirstActivate()
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x1031F28", Offset = "0x1031F28", VA = "0x1031F28")]
		private void Update()
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0x10324D4", Offset = "0x10324D4", VA = "0x10324D4", Slot = "4")]
		public virtual bool HasRequiredFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0x1032020", Offset = "0x1032020", VA = "0x1032020")]
		public void CheckHeadControls()
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0x10324F4", Offset = "0x10324F4", VA = "0x10324F4")]
		public void UpdateInputs()
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x1032278", Offset = "0x1032278", VA = "0x1032278")]
		public void CheckPlayerControls()
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0x1032DEC", Offset = "0x1032DEC", VA = "0x1032DEC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0x1032DF0", Offset = "0x1032DF0", VA = "0x1032DF0", Slot = "5")]
		public virtual void UpdateControllerPositions()
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0x1032B78", Offset = "0x1032B78", VA = "0x1032B78")]
		private void checkGrabbers()
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x1032F0C", Offset = "0x1032F0C", VA = "0x1032F0C", Slot = "6")]
		public virtual void ResetHands()
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0x1033078", Offset = "0x1033078", VA = "0x1033078", Slot = "7")]
		public virtual void ResetAll()
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x103318C", Offset = "0x103318C", VA = "0x103318C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x1033688", Offset = "0x1033688", VA = "0x1033688")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x1033B9C", Offset = "0x1033B9C", VA = "0x1033B9C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x1033BA8", Offset = "0x1033BA8", VA = "0x1033BA8")]
		public VREmulator()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Waypoint Destination;

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x1033C00", Offset = "0x1033C00", VA = "0x1033C00")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0x1033D58", Offset = "0x1033D58", VA = "0x1033D58")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	public class Zipline : GrabbableEvents
	{
		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ZiplineStart;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ZiplineEnd;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ZiplineSpeed;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool UseLinearMovement;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastMoveTime;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool movingForward;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x6001826")]
		[Address(RVA = "0x1033D60", Offset = "0x1033D60", VA = "0x1033D60")]
		private void Start()
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0x1033E2C", Offset = "0x1033E2C", VA = "0x1033E2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0x1033EF4", Offset = "0x1033EF4", VA = "0x1033EF4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0x103400C", Offset = "0x103400C", VA = "0x103400C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x1034344", Offset = "0x1034344", VA = "0x1034344", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0x103437C", Offset = "0x103437C", VA = "0x103437C", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x1034060", Offset = "0x1034060", VA = "0x1034060")]
		private void moveTowards(Vector3 pos, bool forwardDirection)
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x10343B4", Offset = "0x10343B4", VA = "0x10343B4")]
		public Zipline()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	public class ControllerOffsetHelper : MonoBehaviour
	{
		[Token(Token = "0x20003BE")]
		[CompilerGenerated]
		private sealed class <checkForController>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerOffsetHelper <>4__this;

			[Token(Token = "0x1700023C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001839")]
				[Address(RVA = "0x1034DC0", Offset = "0x1034DC0", VA = "0x1034DC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600183B")]
				[Address(RVA = "0x1034E08", Offset = "0x1034E08", VA = "0x1034E08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001836")]
			[Address(RVA = "0x10344EC", Offset = "0x10344EC", VA = "0x10344EC")]
			[DebuggerHidden]
			public <checkForController>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001837")]
			[Address(RVA = "0x1034CB0", Offset = "0x1034CB0", VA = "0x1034CB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001838")]
			[Address(RVA = "0x1034CB4", Offset = "0x1034CB4", VA = "0x1034CB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600183A")]
			[Address(RVA = "0x1034DC8", Offset = "0x1034DC8", VA = "0x1034DC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHand ControllerHand;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Shown for Debug :")]
		[Tooltip("The model of controller found")]
		[SerializeField]
		private string thisControllerModel;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ControllerOffset thisOffset;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The position offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetPosition;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The rotation offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetRotation;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<ControllerOffset> ControllerOffsets;

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x10343D8", Offset = "0x10343D8", VA = "0x10343D8")]
		private void Start()
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x1034478", Offset = "0x1034478", VA = "0x1034478")]
		[IteratorStateMachine(typeof(<checkForController>d__7))]
		private IEnumerator checkForController()
		{
			return null;
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x1034514", Offset = "0x1034514", VA = "0x1034514", Slot = "4")]
		public virtual void OnControllerFound()
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x1034638", Offset = "0x1034638", VA = "0x1034638", Slot = "5")]
		public virtual ControllerOffset GetControllerOffset(string controllerName)
		{
			return null;
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0x1034738", Offset = "0x1034738", VA = "0x1034738", Slot = "6")]
		public virtual void DefineControllerOffsets()
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0x1034BD8", Offset = "0x1034BD8", VA = "0x1034BD8", Slot = "7")]
		public virtual ControllerOffset GetOpenXROffset()
		{
			return null;
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0x1034C7C", Offset = "0x1034C7C", VA = "0x1034C7C")]
		public ControllerOffsetHelper()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	public class ControllerOffset
	{
		[Token(Token = "0x1700023E")]
		public string ControllerName
		{
			[Token(Token = "0x600183C")]
			[Address(RVA = "0x1034E10", Offset = "0x1034E10", VA = "0x1034E10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600183D")]
			[Address(RVA = "0x1034E18", Offset = "0x1034E18", VA = "0x1034E18")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public Vector3 LeftControllerPositionOffset
		{
			[Token(Token = "0x600183E")]
			[Address(RVA = "0x1034E20", Offset = "0x1034E20", VA = "0x1034E20")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600183F")]
			[Address(RVA = "0x1034E2C", Offset = "0x1034E2C", VA = "0x1034E2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public Vector3 RightControllerPositionOffset
		{
			[Token(Token = "0x6001840")]
			[Address(RVA = "0x1034E38", Offset = "0x1034E38", VA = "0x1034E38")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001841")]
			[Address(RVA = "0x1034E44", Offset = "0x1034E44", VA = "0x1034E44")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public Vector3 LeftControllerRotationOffset
		{
			[Token(Token = "0x6001842")]
			[Address(RVA = "0x1034E50", Offset = "0x1034E50", VA = "0x1034E50")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001843")]
			[Address(RVA = "0x1034E5C", Offset = "0x1034E5C", VA = "0x1034E5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public Vector3 RightControlleRotationOffset
		{
			[Token(Token = "0x6001844")]
			[Address(RVA = "0x1034E68", Offset = "0x1034E68", VA = "0x1034E68")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001845")]
			[Address(RVA = "0x1034E74", Offset = "0x1034E74", VA = "0x1034E74")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0x1034BD0", Offset = "0x1034BD0", VA = "0x1034BD0")]
		public ControllerOffset()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public class DetachableLimb : MonoBehaviour
	{
		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ShrinkBone;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ReplaceGrabbableWith;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject EnableOnDetach;

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x1034E80", Offset = "0x1034E80", VA = "0x1034E80")]
		public void DoDismemberment(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x1035130", Offset = "0x1035130", VA = "0x1035130")]
		public void ReverseDismemberment()
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x1035250", Offset = "0x1035250", VA = "0x1035250")]
		public DetachableLimb()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public class DoorHelper : MonoBehaviour
	{
		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DoorOpenSound;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip DoorCloseSound;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Does the handle need to be turned in order to open the door from the closed position?")]
		public bool RequireHandleTurnToOpen;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool handleLocked;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform HandleFollower;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float DegreesTurned;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float DegreesTurnToOpen;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform DoorLockTransform;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float initialLockPosition;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HingeJoint hinge;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool playedOpenSound;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool readyToPlayCloseSound;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float AngularVelocitySnapDoor;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float angle;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float AngularVelocity;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true the door will not respond to user input")]
		public bool DoorIsLocked;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lockPos;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 currentRotation;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float moveLockAmount;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float rotateAngles;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float ratio;

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x1035258", Offset = "0x1035258", VA = "0x1035258")]
		private void Start()
		{
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x103534C", Offset = "0x103534C", VA = "0x103534C")]
		private void Update()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x10357B4", Offset = "0x10357B4", VA = "0x10357B4")]
		public DoorHelper()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	public class GrabberArea : MonoBehaviour
	{
		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber InArea;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Grabber> grabbersInArea;

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x10357D4", Offset = "0x10357D4", VA = "0x10357D4")]
		private void Update()
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0x10357F4", Offset = "0x10357F4", VA = "0x10357F4")]
		public Grabber GetOpenGrabber()
		{
			return null;
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0x1035984", Offset = "0x1035984", VA = "0x1035984")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x1035B28", Offset = "0x1035B28", VA = "0x1035B28")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x1035C1C", Offset = "0x1035C1C", VA = "0x1035C1C")]
		public GrabberArea()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public class HandCollision : MonoBehaviour
	{
		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandController HandControl;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber HandGrabber;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool EnableHandCollision;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool EnableCollisionOnPoint;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool EnableCollisionOnFist;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool EnableCollisionOnAllPoses;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool EnableCollisionDuringGrab;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float PointAmount;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GripAmount;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool MakingFist;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Collider> handColliders;

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x1035C24", Offset = "0x1035C24", VA = "0x1035C24")]
		private void Start()
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x1035DA0", Offset = "0x1035DA0", VA = "0x1035DA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x10360A4", Offset = "0x10360A4", VA = "0x10360A4")]
		public HandCollision()
		{
		}
	}
	[Token(Token = "0x20003C4")]
	public class HandController : MonoBehaviour
	{
		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("HandController parent will be set to this on Start if specified")]
		public Transform HandAnchor;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, this transform will be parented to HandAnchor and it's position / rotation set to 0,0,0.")]
		public bool ResetHandAnchorPosition;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator HandAnimator;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) If specified, this HandPoser can be used when setting poses retrieved from a grabbed Grabbable.")]
		public HandPoser handPoser;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) If specified, this AutoPoser component can be used when if set on the Grabbable, or if AutoPose is set to true")]
		public AutoPoser autoPoser;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HandPoseBlender poseBlender;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How to handle the hand when nothing is being grabbed / idle. Ex : Can use an Animator to control the hand via blending, a HandPoser to control via blend states, AutoPoser to continually auto pose while nothing is being held, or 'None' if you want to handle the idle state yourself.")]
		public HandPoserType IdlePoseType;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true, the idle hand pose will be determined by the connected Valve Index Controller's finger tracking. Requires the SteamVR SDK. Make sure IdlePoseType is set to 'HandPoser'")]
		public bool UseIndexFingerTracking;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the Layer Animations")]
		public float HandAnimationSpeed;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check the state of this grabber to determine animation state. If null, a child Grabber component will be used.")]
		public Grabber grabber;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Shown for Debug : ")]
		public float GripAmount;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _prevGrip;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float PointAmount;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _prevPoint;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float ThumbAmount;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _prevThumb;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _thumbIsNear;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool _indexIsNear;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _triggerValue;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float _gripValue;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int PoseId;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ControllerOffsetHelper offset;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputBridge input;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody rigid;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform offsetTransform;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject PreviousHeldObject;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool DoUpdateAnimationStates;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool DoUpdateHandPoser;

		[Token(Token = "0x17000243")]
		private Vector3 offsetPosition
		{
			[Token(Token = "0x6001855")]
			[Address(RVA = "0x10360BC", Offset = "0x10360BC", VA = "0x10360BC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000244")]
		private Vector3 offsetRotation
		{
			[Token(Token = "0x6001856")]
			[Address(RVA = "0x1036180", Offset = "0x1036180", VA = "0x1036180")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x1036244", Offset = "0x1036244", VA = "0x1036244")]
		private void Start()
		{
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x10365A8", Offset = "0x10365A8", VA = "0x10365A8")]
		public void Update()
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x10365FC", Offset = "0x10365FC", VA = "0x10365FC", Slot = "4")]
		public virtual void UpdateHeldObjectState()
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x103665C", Offset = "0x103665C", VA = "0x103665C", Slot = "5")]
		public virtual void UpdateIdleState()
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x10366A8", Offset = "0x10366A8", VA = "0x10366A8", Slot = "6")]
		public virtual bool HoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x1036750", Offset = "0x1036750", VA = "0x1036750", Slot = "7")]
		public virtual void CheckForGrabChange()
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x10368B4", Offset = "0x10368B4", VA = "0x10368B4", Slot = "8")]
		public virtual void OnGrabChange(GameObject newlyHeldObject)
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x1036A58", Offset = "0x1036A58", VA = "0x1036A58", Slot = "9")]
		public virtual void OnGrabDrop()
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x1036AE4", Offset = "0x1036AE4", VA = "0x1036AE4", Slot = "10")]
		public virtual void SetHandAnimator()
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x1036BB8", Offset = "0x1036BB8", VA = "0x1036BB8", Slot = "11")]
		public virtual void UpdateFromInputs()
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x1036DA8", Offset = "0x1036DA8", VA = "0x1036DA8", Slot = "12")]
		public virtual void UpdateAnimimationStates()
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x10371A8", Offset = "0x10371A8", VA = "0x10371A8")]
		private void setAnimatorBlend(float min, float max, float input, int animationLayer)
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x10371D0", Offset = "0x10371D0", VA = "0x10371D0", Slot = "13")]
		public virtual bool IsAnimatorGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x10372B8", Offset = "0x10372B8", VA = "0x10372B8", Slot = "14")]
		public virtual void UpdateHandPoser()
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x10374E8", Offset = "0x10374E8", VA = "0x10374E8", Slot = "15")]
		public virtual bool IsHandPoserGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x10375D0", Offset = "0x10375D0", VA = "0x10375D0", Slot = "16")]
		public virtual void UpdateHandPoserIdleState()
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x1037778", Offset = "0x1037778", VA = "0x1037778", Slot = "17")]
		public virtual void UpdateIndexFingerBlending()
		{
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0x103777C", Offset = "0x103777C", VA = "0x103777C", Slot = "18")]
		public virtual bool SetupPoseBlender()
		{
			return default(bool);
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x10379D4", Offset = "0x10379D4", VA = "0x10379D4", Slot = "19")]
		public virtual HandPose GetDefaultOpenPose()
		{
			return null;
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0x1037A2C", Offset = "0x1037A2C", VA = "0x1037A2C", Slot = "20")]
		public virtual HandPose GetDefaultClosedPose()
		{
			return null;
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x1037A84", Offset = "0x1037A84", VA = "0x1037A84", Slot = "21")]
		public virtual void EnableHandPoser()
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x1037B08", Offset = "0x1037B08", VA = "0x1037B08", Slot = "22")]
		public virtual void EnableAutoPoser(bool continuous)
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x1037CA4", Offset = "0x1037CA4", VA = "0x1037CA4", Slot = "23")]
		public virtual void DisablePoseBlender()
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x1037D1C", Offset = "0x1037D1C", VA = "0x1037D1C", Slot = "24")]
		public virtual void DisableAutoPoser()
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x1037D94", Offset = "0x1037D94", VA = "0x1037D94", Slot = "25")]
		public virtual bool IsAutoPoserGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0x1037E80", Offset = "0x1037E80", VA = "0x1037E80", Slot = "26")]
		public virtual void EnableHandAnimator()
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x1037F58", Offset = "0x1037F58", VA = "0x1037F58", Slot = "27")]
		public virtual void DisableHandAnimator()
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0x1037FF4", Offset = "0x1037FF4", VA = "0x1037FF4", Slot = "28")]
		public virtual void OnGrabberGrabbed(Grabbable grabbed)
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0x10380F0", Offset = "0x10380F0", VA = "0x10380F0", Slot = "29")]
		public virtual void UpdateCurrentHandPose()
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0x1038198", Offset = "0x1038198", VA = "0x1038198", Slot = "30")]
		public virtual void OnGrabberReleased(Grabbable released)
		{
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0x10381A4", Offset = "0x10381A4", VA = "0x10381A4")]
		public HandController()
		{
		}
	}
	[Token(Token = "0x20003C5")]
	public enum HandPoserType
	{
		[Token(Token = "0x4001841")]
		HandPoser,
		[Token(Token = "0x4001842")]
		Animator,
		[Token(Token = "0x4001843")]
		AutoPoser,
		[Token(Token = "0x4001844")]
		None
	}
	[Token(Token = "0x20003C6")]
	public class HandleGFXHelper : MonoBehaviour
	{
		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable HandleGrabbable;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMin;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LocalYMax;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 initialRot;

		[Token(Token = "0x6001876")]
		[Address(RVA = "0x10381C8", Offset = "0x10381C8", VA = "0x10381C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0x10381F8", Offset = "0x10381F8", VA = "0x10381F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0x1038484", Offset = "0x1038484", VA = "0x1038484")]
		public HandleGFXHelper()
		{
		}
	}
	[Token(Token = "0x20003C7")]
	public class HandleHelper : MonoBehaviour
	{
		[Token(Token = "0x20003C8")]
		[CompilerGenerated]
		private sealed class <doRelease>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandleHelper <>4__this;

			[Token(Token = "0x17000245")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001881")]
				[Address(RVA = "0x1038B5C", Offset = "0x1038B5C", VA = "0x1038B5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000246")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001883")]
				[Address(RVA = "0x1038BA4", Offset = "0x1038BA4", VA = "0x1038BA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600187E")]
			[Address(RVA = "0x1038A6C", Offset = "0x1038A6C", VA = "0x1038A6C")]
			[DebuggerHidden]
			public <doRelease>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x600187F")]
			[Address(RVA = "0x1038A9C", Offset = "0x1038A9C", VA = "0x1038A9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001880")]
			[Address(RVA = "0x1038AA0", Offset = "0x1038AA0", VA = "0x1038AA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001882")]
			[Address(RVA = "0x1038B64", Offset = "0x1038B64", VA = "0x1038B64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ParentRigid;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandleTransform;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable thisGrab;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool didRelease;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider col;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastAngularVelocity;

		[Token(Token = "0x6001879")]
		[Address(RVA = "0x10384A0", Offset = "0x10384A0", VA = "0x10384A0")]
		private void Start()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x1038648", Offset = "0x1038648", VA = "0x1038648")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0x1038A38", Offset = "0x1038A38", VA = "0x1038A38")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0x10389C4", Offset = "0x10389C4", VA = "0x10389C4")]
		[IteratorStateMachine(typeof(<doRelease>d__10))]
		private IEnumerator doRelease()
		{
			return null;
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0x1038A94", Offset = "0x1038A94", VA = "0x1038A94")]
		public HandleHelper()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	public class HandPhysics : MonoBehaviour
	{
		[Token(Token = "0x20003CA")]
		[CompilerGenerated]
		private sealed class <UnignoreAllCollisions>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400186C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400186D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400186E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandPhysics <>4__this;

			[Token(Token = "0x400186F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Grabbable <thisGrabbable>5__2;

			[Token(Token = "0x17000248")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600189F")]
				[Address(RVA = "0x103AD9C", Offset = "0x103AD9C", VA = "0x103AD9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000249")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018A1")]
				[Address(RVA = "0x103ADE4", Offset = "0x103ADE4", VA = "0x103ADE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600189C")]
			[Address(RVA = "0x1039FF4", Offset = "0x1039FF4", VA = "0x1039FF4")]
			[DebuggerHidden]
			public <UnignoreAllCollisions>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x600189D")]
			[Address(RVA = "0x103ACB8", Offset = "0x103ACB8", VA = "0x103ACB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600189E")]
			[Address(RVA = "0x103ACBC", Offset = "0x103ACBC", VA = "0x103ACBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018A0")]
			[Address(RVA = "0x103ADA4", Offset = "0x103ADA4", VA = "0x103ADA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is the object our physical hand should try to follow / match. Should typically be an object on the controller Transform")]
		public Transform AttachTo;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Amount of Velocity to apply to hands when trying to reach anchor point")]
		public float HandVelocity;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, Hand COlliders will be disabled while grabbing an object")]
		public bool DisableHandCollidersOnGrab;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If the hand exceeds this distance from it's origin it will snap back to the original position. Specified in meters.")]
		public float SnapBackDistance;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the Grabber to use when this hand is active.")]
		public Grabber ThisGrabber;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Disable this Grabber when this hand is active. (Optional)")]
		public Grabber DisableGrabber;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("This is the RemoteGrabber to use when this hand is active.")]
		public RemoteGrabber ThisRemoteGrabber;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Disable this RemoteGrabber when this hand is active. (Optional)")]
		public RemoteGrabber DisableRemoteGrabber;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Assign Hand Colliders this material if provided")]
		public PhysicMaterial ColliderMaterial;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform HandModel;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform HandModelOffset;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Collider> handColliders;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable heldGrabbable;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Collider> collisions;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer line;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 localHandOffset;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 localHandOffsetRotation;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool wasHoldingObject;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Grabbable remoteIgnoredGrabbable;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _priorParent;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x17000247")]
		public bool HoldingObject
		{
			[Token(Token = "0x6001884")]
			[Address(RVA = "0x1038BAC", Offset = "0x1038BAC", VA = "0x1038BAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x1038C50", Offset = "0x1038C50", VA = "0x1038C50")]
		private void Start()
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x1039204", Offset = "0x1039204", VA = "0x1039204")]
		private void Update()
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x10399F0", Offset = "0x10399F0", VA = "0x10399F0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0x1038F7C", Offset = "0x1038F7C", VA = "0x1038F7C")]
		private void initHandColliders()
		{
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0x1039724", Offset = "0x1039724", VA = "0x1039724")]
		private void checkRemoteCollision()
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0x1039558", Offset = "0x1039558", VA = "0x1039558")]
		private void drawDistanceLine()
		{
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0x10398C4", Offset = "0x10398C4", VA = "0x10398C4")]
		private void checkBreakDistance()
		{
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0x103938C", Offset = "0x103938C", VA = "0x103938C")]
		private void updateHandGraphics()
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0x1039F80", Offset = "0x1039F80", VA = "0x1039F80")]
		[IteratorStateMachine(typeof(<UnignoreAllCollisions>d__31))]
		private IEnumerator UnignoreAllCollisions()
		{
			return null;
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0x1039E68", Offset = "0x1039E68", VA = "0x1039E68")]
		public void IgnoreGrabbableCollisions(Grabbable grab, bool ignorePhysics)
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0x103A01C", Offset = "0x103A01C", VA = "0x103A01C")]
		public void DisableHandColliders()
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x103A12C", Offset = "0x103A12C", VA = "0x103A12C")]
		public void EnableHandColliders()
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0x103A23C", Offset = "0x103A23C", VA = "0x103A23C", Slot = "4")]
		public virtual void OnGrabbedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0x103A288", Offset = "0x103A288", VA = "0x103A288", Slot = "5")]
		public virtual void LockLocalPosition()
		{
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0x103A2D8", Offset = "0x103A2D8", VA = "0x103A2D8", Slot = "6")]
		public virtual void UnlockLocalPosition()
		{
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0x103A300", Offset = "0x103A300", VA = "0x103A300", Slot = "7")]
		public virtual void OnReleasedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0x103A3AC", Offset = "0x103A3AC", VA = "0x103A3AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0x103A640", Offset = "0x103A640", VA = "0x103A640", Slot = "8")]
		public virtual void LockOffset()
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0x103A68C", Offset = "0x103A68C", VA = "0x103A68C", Slot = "9")]
		public virtual void UnlockOffset()
		{
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0x103A7B8", Offset = "0x103A7B8", VA = "0x103A7B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x103AA70", Offset = "0x103AA70", VA = "0x103AA70")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0x103AC0C", Offset = "0x103AC0C", VA = "0x103AC0C")]
		public bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0x103AC14", Offset = "0x103AC14", VA = "0x103AC14")]
		public HandPhysics()
		{
		}
	}
	[Token(Token = "0x20003CB")]
	public class HandRepresentationHelper : MonoBehaviour
	{
		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The GameObject to be shown or hidden depending on Distance from OtherHandTransform")]
		public Transform HandToToggle;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The other Hand Transform used to calculate distance")]
		public Transform OtherHandTransform;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Distance required to show this Transform in meters")]
		public float DistanceToShow;

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x103ADEC", Offset = "0x103ADEC", VA = "0x103ADEC")]
		private void Update()
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x103AEE0", Offset = "0x103AEE0", VA = "0x103AEE0")]
		public HandRepresentationHelper()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public class IgnoreColliders : MonoBehaviour
	{
		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> CollidersToIgnore;

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x103AEF4", Offset = "0x103AEF4", VA = "0x103AEF4")]
		private void Start()
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x103B0C8", Offset = "0x103B0C8", VA = "0x103B0C8")]
		public IgnoreColliders()
		{
		}
	}
	[Token(Token = "0x20003CD")]
	public class InvalidTeleportArea : MonoBehaviour
	{
		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x103B0D0", Offset = "0x103B0D0", VA = "0x103B0D0")]
		public InvalidTeleportArea()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public class JointBreaker : MonoBehaviour
	{
		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float BreakDistance;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float JointDistance;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool DestroyJointOnBreak;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrabberEvent OnBreakEvent;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint theJoint;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 startPos;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool brokeJoint;

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x103B0D8", Offset = "0x103B0D8", VA = "0x103B0D8")]
		private void Start()
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x103B154", Offset = "0x103B154", VA = "0x103B154")]
		private void Update()
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x103B240", Offset = "0x103B240", VA = "0x103B240")]
		public void BreakJoint()
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x103B3B0", Offset = "0x103B3B0", VA = "0x103B3B0")]
		public JointBreaker()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	public class JointHelper : MonoBehaviour
	{
		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialPosition;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialRotation;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 initialScale;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 currentScale;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x103B3C8", Offset = "0x103B3C8", VA = "0x103B3C8")]
		private void Start()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x103B438", Offset = "0x103B438", VA = "0x103B438")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x103B618", Offset = "0x103B618", VA = "0x103B618")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x103B61C", Offset = "0x103B61C", VA = "0x103B61C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x103B620", Offset = "0x103B620", VA = "0x103B620")]
		public JointHelper()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	public class RagdollHelper : MonoBehaviour
	{
		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Collider> colliders;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider playerCol;

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x103B638", Offset = "0x103B638", VA = "0x103B638")]
		private void Start()
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x103B84C", Offset = "0x103B84C", VA = "0x103B84C")]
		public RagdollHelper()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	public class RingHelper : MonoBehaviour
	{
		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Grabbable Object to Observe")]
		public Grabbable grabbable;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Optional) If specified, the ring helper will only be valid if this Grabpoint is the nearest on the the grabbable object")]
		public GrabPoint Grabpoint;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Default Color of the ring")]
		public Color RingColor;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Color to use if selected by primary controller")]
		public Color RingSelectedColor;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Color to use if selected by secondary controller")]
		public Color RingSecondarySelectedColor;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float ringSizeInRange;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float ringSizeGrabbable;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Don't show grab rings if left and right controllers / grabbers are  holding something")]
		public bool HideIfHandsAreFull;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("How fast to lerp the opacity if being hidden / shown")]
		public float RingFadeSpeed;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Canvas canvas;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text text;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CanvasScaler scaler;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabber leftGrabber;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabber rightGrabber;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabber closestGrabber;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool handsFull;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _initalOpacity;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _currentOpacity;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform mainCam;

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x103B854", Offset = "0x103B854", VA = "0x103B854")]
		private void Start()
		{
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x103BA58", Offset = "0x103BA58", VA = "0x103BA58")]
		private void Update()
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x103C058", Offset = "0x103C058", VA = "0x103C058", Slot = "4")]
		public virtual void AssignCamera()
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x103C14C", Offset = "0x103C14C", VA = "0x103C14C", Slot = "5")]
		public virtual void AssignGrabbers()
		{
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x103BF4C", Offset = "0x103BF4C", VA = "0x103BF4C")]
		private Color getSelectedColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x103C29C", Offset = "0x103C29C", VA = "0x103C29C")]
		public RingHelper()
		{
		}
	}
	[Token(Token = "0x20003D2")]
	public class ScaleMaterialHelper : MonoBehaviour
	{
		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer ren;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 Tiling;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 Offset;

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x103C2D4", Offset = "0x103C2D4", VA = "0x103C2D4")]
		private void Start()
		{
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x103C334", Offset = "0x103C334", VA = "0x103C334")]
		private void updateTexture()
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x103C424", Offset = "0x103C424", VA = "0x103C424")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x103C44C", Offset = "0x103C44C", VA = "0x103C44C")]
		public ScaleMaterialHelper()
		{
		}
	}
	[Token(Token = "0x20003D3")]
	public class StaticBatch : MonoBehaviour
	{
		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material CombineMaterial;

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x103C45C", Offset = "0x103C45C", VA = "0x103C45C")]
		private void Start()
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x103CB14", Offset = "0x103CB14", VA = "0x103CB14")]
		public StaticBatch()
		{
		}
	}
	[Token(Token = "0x20003D4")]
	public class TeleportDestination : MonoBehaviour
	{
		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Where the player will be teleported to")]
		public Transform DestinationTransform;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Snap player to this rotation?")]
		public bool ForcePlayerRotation;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Called when a player uses the teleporter to enter this destination.")]
		public UnityEvent OnPlayerTeleported;

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x103CB1C", Offset = "0x103CB1C", VA = "0x103CB1C")]
		public TeleportDestination()
		{
		}
	}
	[Token(Token = "0x20003D5")]
	public class TeleportPlayerOnEnter : MonoBehaviour
	{
		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TeleportDestination;

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x103CB24", Offset = "0x103CB24", VA = "0x103CB24")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x103CC58", Offset = "0x103CC58", VA = "0x103CC58")]
		public TeleportPlayerOnEnter()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public class UITrigger : MonoBehaviour
	{
		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x103CC60", Offset = "0x103CC60", VA = "0x103CC60")]
		public UITrigger()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	public class VRIFGrabpointUpdater : MonoBehaviour
	{
		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Right Hand Model")]
		[Tooltip("This is the local position of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetRightPosition;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This is the local position of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetRightPosition;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the local rotation of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetRightRotation;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("This is the local rotation of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetRightRotation;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Left Hand Model")]
		[Tooltip("This is the local position of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetLeftPosition;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("This is the local position of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetLeftPosition;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This is the local rotation of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetLeftRotation;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("This is the local rotation of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetLeftRotation;

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x103CC68", Offset = "0x103CC68", VA = "0x103CC68")]
		private void Start()
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x103CC6C", Offset = "0x103CC6C", VA = "0x103CC6C")]
		public void ApplyGrabPointUpdate()
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x103CFD8", Offset = "0x103CFD8", VA = "0x103CFD8")]
		public VRIFGrabpointUpdater()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	public class UIButtonCollider : MonoBehaviour
	{
		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, this button can be held down and the button's click event will be fired repeatedly. If false, the button's click event will only be called once per trigger enter")]
		[Header("Hold Button Down Option")]
		public bool CanBeHeldDown;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of time that must first pass before continuing to fire the button's click event. This value is used once. The 'HoldDownDelay' value is then used for each subsequent delay. ")]
		public float InitialHoldDownDelay;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of time that must pass in-between click events while the button is held down. ")]
		public float HoldDownDelay;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, this transform will be animated down on the Z axis by the PressedInZValue amount.")]
		[Header("Animate Key")]
		public bool AnimateKey;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If AnimateKey is true, this transform will be animated down on the Z axis by this amount.")]
		public float PressedInZValue;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to Lerp the key in")]
		public float PressInSpeed;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.UI.Button uiButton;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int itemsInTrigger;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool readyForDownEvent;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int clickCount;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float lastPressTime;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected BoxCollider boxCollider;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float colliderInitialCenterZ;

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x103D028", Offset = "0x103D028", VA = "0x103D028")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x103D110", Offset = "0x103D110", VA = "0x103D110")]
		private void Update()
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x103D5BC", Offset = "0x103D5BC", VA = "0x103D5BC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x103D660", Offset = "0x103D660", VA = "0x103D660")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x103D704", Offset = "0x103D704", VA = "0x103D704")]
		public UIButtonCollider()
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public class UICanvasGroup : MonoBehaviour
	{
		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> CanvasObjects;

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x103D734", Offset = "0x103D734", VA = "0x103D734")]
		public void ActivateCanvas(int CanvasIndex)
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x103D830", Offset = "0x103D830", VA = "0x103D830")]
		public UICanvasGroup()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	public class UIPointer : MonoBehaviour
	{
		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The controller side this pointer is on")]
		public ControllerHand ControllerSide;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true this object will update the VRUISystem's Left or Right Transform property")]
		public bool AutoUpdateUITransforms;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject cursor;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject _cursor;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If true the cursor and LineRenderer will be Hidden. Otherwise it will still be show at a fixed length")]
		public bool HidePointerIfNoObjectsFound;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long the line / cursor should extend if no objects are found to point at")]
		public float FixedPointerLength;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true the cursor object will scale based on how far away the pointer is from the origin. A cursor far away will have a larger cusor than one up close.")]
		public bool CursorScaling;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Minimum scale of the Cursor object if CursorScaling is enabled")]
		public float CursorMinScale;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float CursorMaxScale;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _cursorInitialLocalScale;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Example : 0.5 = Line Goes Half Way. 1 = Line reaches end.")]
		public float LineDistanceModifier;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRUISystem uiSystem;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PointerEvents selectedPointerEvents;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PointerEventData data;

		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("LineRenderer to use when showing a valid UI Canvas. Leave null to attempt a GetComponent<> on this object.")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x103D838", Offset = "0x103D838", VA = "0x103D838")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x103DBB0", Offset = "0x103DBB0", VA = "0x103DBB0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x103DBB4", Offset = "0x103DBB4", VA = "0x103DBB4")]
		private void updateUITransforms()
		{
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x103DC44", Offset = "0x103DC44", VA = "0x103DC44")]
		public void Update()
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x103DC50", Offset = "0x103DC50", VA = "0x103DC50", Slot = "4")]
		public virtual void UpdatePointer()
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x103E224", Offset = "0x103E224", VA = "0x103E224", Slot = "5")]
		public virtual void HidePointer()
		{
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x103E39C", Offset = "0x103E39C", VA = "0x103E39C")]
		public UIPointer()
		{
		}
	}
	[Token(Token = "0x20003DB")]
	[RequireComponent(typeof(GraphicRaycaster))]
	[RequireComponent(typeof(Canvas))]
	public class VRCanvas : MonoBehaviour
	{
		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x103E3D8", Offset = "0x103E3D8", VA = "0x103E3D8")]
		private void Start()
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x103E448", Offset = "0x103E448", VA = "0x103E448")]
		public VRCanvas()
		{
		}
	}
	[Token(Token = "0x20003DC")]
	public class VRKeyboard : MonoBehaviour
	{
		[Token(Token = "0x20003DD")]
		[CompilerGenerated]
		private sealed class <IncreaseInputFieldCareteRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRKeyboard <>4__this;

			[Token(Token = "0x1700024A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018E3")]
				[Address(RVA = "0x103ED40", Offset = "0x103ED40", VA = "0x103ED40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018E5")]
				[Address(RVA = "0x103ED88", Offset = "0x103ED88", VA = "0x103ED88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018E0")]
			[Address(RVA = "0x103EC04", Offset = "0x103EC04", VA = "0x103EC04")]
			[DebuggerHidden]
			public <IncreaseInputFieldCareteRoutine>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60018E1")]
			[Address(RVA = "0x103EC64", Offset = "0x103EC64", VA = "0x103EC64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018E2")]
			[Address(RVA = "0x103EC68", Offset = "0x103EC68", VA = "0x103EC68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018E4")]
			[Address(RVA = "0x103ED48", Offset = "0x103ED48", VA = "0x103ED48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003DE")]
		[CompilerGenerated]
		private sealed class <DecreaseInputFieldCareteRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRKeyboard <>4__this;

			[Token(Token = "0x1700024C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018E9")]
				[Address(RVA = "0x103EE6C", Offset = "0x103EE6C", VA = "0x103EE6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018EB")]
				[Address(RVA = "0x103EEB4", Offset = "0x103EEB4", VA = "0x103EEB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018E6")]
			[Address(RVA = "0x103EC2C", Offset = "0x103EC2C", VA = "0x103EC2C")]
			[DebuggerHidden]
			public <DecreaseInputFieldCareteRoutine>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x103ED90", Offset = "0x103ED90", VA = "0x103ED90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018E8")]
			[Address(RVA = "0x103ED94", Offset = "0x103ED94", VA = "0x103ED94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018EA")]
			[Address(RVA = "0x103EE74", Offset = "0x103EE74", VA = "0x103EE74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputField AttachedInputField;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseShift;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Sound FX")]
		public AudioClip KeyPressSound;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<VRKeyboardKey> KeyboardKeys;

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x103E450", Offset = "0x103E450", VA = "0x103E450")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0x103E4D4", Offset = "0x103E4D4", VA = "0x103E4D4")]
		public void PressKey(string key)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0x103E5B8", Offset = "0x103E5B8", VA = "0x103E5B8")]
		public void UpdateInputField(string key)
		{
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0x103EA68", Offset = "0x103EA68", VA = "0x103EA68", Slot = "4")]
		public virtual void PlayClickSound()
		{
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0x103EA48", Offset = "0x103EA48", VA = "0x103EA48")]
		public void MoveCaretUp()
		{
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0x103E880", Offset = "0x103E880", VA = "0x103E880")]
		public void MoveCaretBack()
		{
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x103E8A0", Offset = "0x103E8A0", VA = "0x103E8A0")]
		public void ToggleShift()
		{
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x103EB1C", Offset = "0x103EB1C", VA = "0x103EB1C")]
		[IteratorStateMachine(typeof(<IncreaseInputFieldCareteRoutine>d__11))]
		private IEnumerator IncreaseInputFieldCareteRoutine()
		{
			return null;
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0x103EB90", Offset = "0x103EB90", VA = "0x103EB90")]
		[IteratorStateMachine(typeof(<DecreaseInputFieldCareteRoutine>d__12))]
		private IEnumerator DecreaseInputFieldCareteRoutine()
		{
			return null;
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0x103EC54", Offset = "0x103EC54", VA = "0x103EC54")]
		public void AttachToInputField(InputField inputField)
		{
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0x103EC5C", Offset = "0x103EC5C", VA = "0x103EC5C")]
		public VRKeyboard()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	public class VRKeyboardKey : MonoBehaviour
	{
		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.UI.Button thisButton;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text thisButtonText;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRKeyboard vrKeyboard;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Keycode;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string KeycodeShift;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool UseShiftKey;

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0x103EEBC", Offset = "0x103EEBC", VA = "0x103EEBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0x103F018", Offset = "0x103F018", VA = "0x103F018", Slot = "4")]
		public virtual void ToggleShift()
		{
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x103F0E0", Offset = "0x103F0E0", VA = "0x103F0E0", Slot = "5")]
		public virtual void OnKeyHit()
		{
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0x103F128", Offset = "0x103F128", VA = "0x103F128", Slot = "6")]
		public virtual void OnKeyHit(string key)
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x103F22C", Offset = "0x103F22C", VA = "0x103F22C")]
		public VRKeyboardKey()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public class VRTextInput : MonoBehaviour
	{
		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField thisInputField;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool AttachToVRKeyboard;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ActivateKeyboardOnSelect;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool DeactivateKeyboardOnDeselect;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRKeyboard AttachedKeyboard;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFocused;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool wasFocused;

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x103F234", Offset = "0x103F234", VA = "0x103F234")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x103F320", Offset = "0x103F320", VA = "0x103F320")]
		private void Update()
		{
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x103F3E0", Offset = "0x103F3E0", VA = "0x103F3E0")]
		public void OnInputSelect()
		{
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0x103F4B0", Offset = "0x103F4B0", VA = "0x103F4B0")]
		public void OnInputDeselect()
		{
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0x103F56C", Offset = "0x103F56C", VA = "0x103F56C")]
		private void Reset()
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x103F680", Offset = "0x103F680", VA = "0x103F680")]
		public VRTextInput()
		{
		}
	}
	[Token(Token = "0x20003E1")]
	public class VRUISystem : BaseInputModule
	{
		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("XR Controller Options : ")]
		[Tooltip("This setting determines if LeftPointerTransform or RightPointerTransform will be used as a forward vector for World Space UI events")]
		public ControllerHand SelectedHand;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A transform on the left controller to use when raycasting for world space UI events")]
		public Transform LeftPointerTransform;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A transform on the right controller to use when raycasting for world space UI events")]
		public Transform RightPointerTransform;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Controller Binding to use for input down, up, etc.")]
		public List<ControllerBinding> ControllerInput;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Unity Input Action used to simulate a click or touch event")]
		public InputActionReference UIInputAction;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true a PhysicsRaycaster component will be added to the UI camera, allowing physical objects to use IPointer events such as OnPointClick, OnPointEnter, etc.")]
		public bool AddPhysicsRaycaster;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public LayerMask PhysicsRaycasterEventMask;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If true the Right Thumbstick will send scroll events to the UI")]
		public bool RightThumbstickScroll;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Shown for Debug : ")]
		public GameObject PressingObject;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject DraggingObject;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject ReleasingObject;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera cameraCaster;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject _initialPressObject;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _lastInputDown;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool inputDown;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUISystem _instance;

		[Token(Token = "0x1700024E")]
		public PointerEventData EventData
		{
			[Token(Token = "0x60018F7")]
			[Address(RVA = "0x103F690", Offset = "0x103F690", VA = "0x103F690")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018F8")]
			[Address(RVA = "0x103F698", Offset = "0x103F698", VA = "0x103F698")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public static VRUISystem Instance
		{
			[Token(Token = "0x60018F9")]
			[Address(RVA = "0x103D9B0", Offset = "0x103D9B0", VA = "0x103D9B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x103F6A0", Offset = "0x103F6A0", VA = "0x103F6A0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0x103F6B0", Offset = "0x103F6B0", VA = "0x103F6B0", Slot = "27")]
		protected virtual void initEventSystem()
		{
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x103F7AC", Offset = "0x103F7AC", VA = "0x103F7AC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x103F7D8", Offset = "0x103F7D8", VA = "0x103F7D8")]
		private void init()
		{
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x103F960", Offset = "0x103F960", VA = "0x103F960", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x103F964", Offset = "0x103F964", VA = "0x103F964")]
		public void DoProcess()
		{
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x103FD30", Offset = "0x103FD30", VA = "0x103FD30", Slot = "28")]
		public virtual bool InputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x103FEA8", Offset = "0x103FEA8", VA = "0x103FEA8", Slot = "29")]
		public virtual bool CameraCasterReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x103FF40", Offset = "0x103FF40", VA = "0x103FF40", Slot = "30")]
		public virtual void PressDown()
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x104017C", Offset = "0x104017C", VA = "0x104017C", Slot = "31")]
		public virtual void Press()
		{
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x1040358", Offset = "0x1040358", VA = "0x1040358", Slot = "32")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x10405B4", Offset = "0x10405B4", VA = "0x10405B4", Slot = "33")]
		public virtual void ClearAll()
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x1040630", Offset = "0x1040630", VA = "0x1040630", Slot = "34")]
		public virtual void SetPressingObject(GameObject pressing)
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x104066C", Offset = "0x104066C", VA = "0x104066C", Slot = "35")]
		public virtual void SetDraggingObject(GameObject dragging)
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x10406A8", Offset = "0x10406A8", VA = "0x10406A8", Slot = "36")]
		public virtual void SetReleasingObject(GameObject releasing)
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x10406B0", Offset = "0x10406B0", VA = "0x10406B0", Slot = "37")]
		public virtual void AssignCameraToAllCanvases(Camera cam)
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x1040784", Offset = "0x1040784", VA = "0x1040784", Slot = "38")]
		public virtual void AddCanvas(Canvas canvas)
		{
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x1040798", Offset = "0x1040798", VA = "0x1040798", Slot = "39")]
		public virtual void AddCanvasToCamera(Canvas canvas, Camera cam)
		{
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0x104082C", Offset = "0x104082C", VA = "0x104082C", Slot = "40")]
		public virtual void UpdateControllerHand(ControllerHand hand)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x10409D4", Offset = "0x10409D4", VA = "0x10409D4")]
		public VRUISystem()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public class DestroyIfPlayMode : MonoBehaviour
	{
		[Token(Token = "0x600190E")]
		[Address(RVA = "0x1040ADC", Offset = "0x1040ADC", VA = "0x1040ADC")]
		private void Start()
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0x1040B8C", Offset = "0x1040B8C", VA = "0x1040B8C")]
		public DestroyIfPlayMode()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class VRUtils : MonoBehaviour
	{
		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUtils _instance;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LogTextColor;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color WarnTextColor;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color ErrTextColor;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform DebugTextHolder;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float MaxTextEntries;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string LastDebugMsg;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int lastDebugMsgCount;

		[Token(Token = "0x17000250")]
		public static VRUtils Instance
		{
			[Token(Token = "0x6001910")]
			[Address(RVA = "0x103149C", Offset = "0x103149C", VA = "0x103149C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0x1040B94", Offset = "0x1040B94", VA = "0x1040B94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x1040C90", Offset = "0x1040C90", VA = "0x1040C90")]
		public void Log(string msg)
		{
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0x10411E8", Offset = "0x10411E8", VA = "0x10411E8")]
		public void Warn(string msg)
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x1041278", Offset = "0x1041278", VA = "0x1041278")]
		public void Error(string msg)
		{
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0x1040D20", Offset = "0x1040D20", VA = "0x1040D20")]
		public void VRDebugLog(string msg, Color logColor)
		{
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x1041308", Offset = "0x1041308", VA = "0x1041308")]
		public void CullDebugPanel()
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0x1031610", Offset = "0x1031610", VA = "0x1031610")]
		public AudioSource PlaySpatialClipAt(AudioClip clip, Vector3 pos, float volume, float spatialBlend = 1f, float randomizePitch = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0x10413D0", Offset = "0x10413D0", VA = "0x10413D0")]
		private float getRandomizedPitch(float randomAmount)
		{
			return default(float);
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x1041414", Offset = "0x1041414", VA = "0x1041414")]
		public VRUtils()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public class AmmoDispenser : MonoBehaviour
	{
		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber LeftGrabber;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber RightGrabber;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject AmmoDispenserObject;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject PistolClip;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ShotgunShell;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject RifleClip;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int CurrentPistolClips;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int CurrentRifleClips;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int CurrentShotgunShells;

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x1041448", Offset = "0x1041448", VA = "0x1041448")]
		private void Update()
		{
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x10414BC", Offset = "0x10414BC", VA = "0x10414BC")]
		private bool grabberHasWeapon(Grabber g)
		{
			return default(bool);
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x10415F8", Offset = "0x10415F8", VA = "0x10415F8")]
		public GameObject GetAmmo()
		{
			return null;
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x1041920", Offset = "0x1041920", VA = "0x1041920")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x1041BC0", Offset = "0x1041BC0", VA = "0x1041BC0", Slot = "4")]
		public virtual void AddAmmo(string AmmoName)
		{
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x1041C9C", Offset = "0x1041C9C", VA = "0x1041C9C")]
		public AmmoDispenser()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	public class AmmoDisplay : MonoBehaviour
	{
		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text AmmoLabel;

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x1041CB4", Offset = "0x1041CB4", VA = "0x1041CB4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x1041D98", Offset = "0x1041D98", VA = "0x1041D98")]
		public AmmoDisplay()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	public class Bullet : MonoBehaviour
	{
		[Token(Token = "0x6001922")]
		[Address(RVA = "0x1041DA0", Offset = "0x1041DA0", VA = "0x1041DA0")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x20003E7")]
	public class BulletInsert : MonoBehaviour
	{
		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string AcceptBulletName;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip InsertSound;

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x1041DA8", Offset = "0x1041DA8", VA = "0x1041DA8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x1041FF0", Offset = "0x1041FF0", VA = "0x1041FF0")]
		public BulletInsert()
		{
		}
	}
	[Token(Token = "0x20003E8")]
	public class MagazineSlide : MonoBehaviour
	{
		[Token(Token = "0x20003E9")]
		[CompilerGenerated]
		private sealed class <EjectMagRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400191A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400191B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400191C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grabbable ejectedMag;

			[Token(Token = "0x400191D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagazineSlide <>4__this;

			[Token(Token = "0x17000251")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001935")]
				[Address(RVA = "0x1044420", Offset = "0x1044420", VA = "0x1044420", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000252")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001937")]
				[Address(RVA = "0x1044468", Offset = "0x1044468", VA = "0x1044468", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001932")]
			[Address(RVA = "0x1044170", Offset = "0x1044170", VA = "0x1044170")]
			[DebuggerHidden]
			public <EjectMagRoutine>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6001933")]
			[Address(RVA = "0x1044198", Offset = "0x1044198", VA = "0x1044198", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001934")]
			[Address(RVA = "0x104419C", Offset = "0x104419C", VA = "0x104419C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001936")]
			[Address(RVA = "0x1044428", Offset = "0x1044428", VA = "0x1044428", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Clip transform name must contain this to be considered valid")]
		public string AcceptableMagazineName;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable AttachedWeapon;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ClipSnapDistance;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ClipUnsnapDistance;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float EjectForce;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable HeldMagazine;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider HeldCollider;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MagazineDistance;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool magazineInPlace;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool lockedInPlace;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ClipAttachSound;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip ClipDetachSound;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrabberArea grabClipArea;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lastEjectTime;

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x1042048", Offset = "0x1042048", VA = "0x1042048")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x10421B8", Offset = "0x10421B8", VA = "0x10421B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x10427A0", Offset = "0x10427A0", VA = "0x10427A0")]
		private bool recentlyEjected()
		{
			return default(bool);
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x1042750", Offset = "0x1042750", VA = "0x1042750")]
		private void moveMagazine(Vector3 localPosition)
		{
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x104258C", Offset = "0x104258C", VA = "0x104258C")]
		public void CheckGrabClipInput()
		{
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x10427D0", Offset = "0x10427D0", VA = "0x10427D0")]
		private void attachMagazine()
		{
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x1042A80", Offset = "0x1042A80", VA = "0x1042A80")]
		private Grabbable detachMagazine()
		{
			return null;
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x1042E20", Offset = "0x1042E20", VA = "0x1042E20")]
		public void EjectMagazine()
		{
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x1042E64", Offset = "0x1042E64", VA = "0x1042E64")]
		[IteratorStateMachine(typeof(<EjectMagRoutine>d__23))]
		private IEnumerator EjectMagRoutine(Grabbable ejectedMag)
		{
			return null;
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x1042D54", Offset = "0x1042D54", VA = "0x1042D54")]
		public void OnGrabClipArea(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0x1042EF4", Offset = "0x1042EF4", VA = "0x1042EF4", Slot = "4")]
		public virtual void AttachGrabbableMagazine(Grabbable mag, Collider magCollider)
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x1042FE8", Offset = "0x1042FE8", VA = "0x1042FE8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x1043104", Offset = "0x1043104", VA = "0x1043104")]
		public MagazineSlide()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class Projectile : MonoBehaviour
	{
		[Token(Token = "0x20003EB")]
		[CompilerGenerated]
		private sealed class <CheckForRaycast>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001926")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001927")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001928")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Projectile <>4__this;

			[Token(Token = "0x17000253")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001942")]
				[Address(RVA = "0x1044DAC", Offset = "0x1044DAC", VA = "0x1044DAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000254")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001944")]
				[Address(RVA = "0x1044DF4", Offset = "0x1044DF4", VA = "0x1044DF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600193F")]
			[Address(RVA = "0x1044C80", Offset = "0x1044C80", VA = "0x1044C80")]
			[DebuggerHidden]
			public <CheckForRaycast>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001940")]
			[Address(RVA = "0x1044CC8", Offset = "0x1044CC8", VA = "0x1044CC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001941")]
			[Address(RVA = "0x1044CCC", Offset = "0x1044CCC", VA = "0x1044CCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001943")]
			[Address(RVA = "0x1044DB4", Offset = "0x1044DB4", VA = "0x1044DB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _checkRaycast;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Damage;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AddRigidForce;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool StickToObject;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MinForceHit;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Event called when the projectile damages something")]
		public UnityEvent onDealtDamageEvent;

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x1044470", Offset = "0x1044470", VA = "0x1044470")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x104447C", Offset = "0x104447C", VA = "0x104447C", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x1044804", Offset = "0x1044804", VA = "0x1044804", Slot = "5")]
		public virtual void DoHitFX(Vector3 pos, Quaternion rot, Collider col)
		{
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x10449E8", Offset = "0x10449E8", VA = "0x10449E8", Slot = "6")]
		public virtual void MarkAsRaycastBullet()
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x1044A84", Offset = "0x1044A84", VA = "0x1044A84", Slot = "7")]
		public virtual void DoRayCastProjectile()
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x1044A10", Offset = "0x1044A10", VA = "0x1044A10")]
		[IteratorStateMachine(typeof(<CheckForRaycast>d__13))]
		private IEnumerator CheckForRaycast()
		{
			return null;
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x1044CA8", Offset = "0x1044CA8", VA = "0x1044CA8")]
		public Projectile()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public class RaycastWeapon : GrabbableEvents
	{
		[Token(Token = "0x20003ED")]
		[CompilerGenerated]
		private sealed class <doMuzzleFlash>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400195E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400195F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x17000255")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001960")]
				[Address(RVA = "0x1046BC0", Offset = "0x1046BC0", VA = "0x1046BC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000256")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001962")]
				[Address(RVA = "0x1046C08", Offset = "0x1046C08", VA = "0x1046C08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600195D")]
			[Address(RVA = "0x1046708", Offset = "0x1046708", VA = "0x1046708")]
			[DebuggerHidden]
			public <doMuzzleFlash>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x600195E")]
			[Address(RVA = "0x1046A88", Offset = "0x1046A88", VA = "0x1046A88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600195F")]
			[Address(RVA = "0x1046A8C", Offset = "0x1046A8C", VA = "0x1046A8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001961")]
			[Address(RVA = "0x1046BC8", Offset = "0x1046BC8", VA = "0x1046BC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003EE")]
		[CompilerGenerated]
		private sealed class <animateSlideAndEject>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001961")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001962")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001963")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x4001964")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <frames>5__2;

			[Token(Token = "0x4001965")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <slideEndReached>5__3;

			[Token(Token = "0x4001966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <slideDestination>5__4;

			[Token(Token = "0x4001967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <slideBeginningReached>5__5;

			[Token(Token = "0x17000257")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001966")]
				[Address(RVA = "0x104736C", Offset = "0x104736C", VA = "0x104736C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000258")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001968")]
				[Address(RVA = "0x10473B4", Offset = "0x10473B4", VA = "0x10473B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001963")]
			[Address(RVA = "0x10467A4", Offset = "0x10467A4", VA = "0x10467A4")]
			[DebuggerHidden]
			public <animateSlideAndEject>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x6001964")]
			[Address(RVA = "0x1046C10", Offset = "0x1046C10", VA = "0x1046C10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001965")]
			[Address(RVA = "0x1046C14", Offset = "0x1046C14", VA = "0x1046C14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001967")]
			[Address(RVA = "0x1047374", Offset = "0x1047374", VA = "0x1047374", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("General : ")]
		public float MaxRange;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Damage;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Semi requires user to press trigger repeatedly, Auto to hold down")]
		public FiringType FiringMethod;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ReloadType ReloadMethod;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Ex : 0.2 = 5 Shots per second")]
		public float FiringRate;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastShotTime;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Amount of force to apply to a Rigidbody once damaged")]
		public float BulletImpactForce;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Current Internal Ammo if you are keeping track of ammo yourself. Firing will deduct from this number. Reloading will cause this to equal MaxInternalAmmo.")]
		public float InternalAmmo;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Maximum amount of internal ammo this weapon can hold. Does not account for attached clips.  For example, a shotgun has internal ammo")]
		public float MaxInternalAmmo;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Set true to automatically chamber a new round on fire. False to require charging. Example : Bolt-Action Rifle does not auto chamber. ")]
		public bool AutoChamberRounds;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Tooltip("Does it matter if rounds are chambered or not. Does the user have to charge weapon as soon as ammo is inserted")]
		public bool MustChamberRounds;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		[Tooltip("If true a projectile will always be used instead of a raycast")]
		[Header("Projectile Settings : ")]
		public bool AlwaysFireProjectile;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		[Tooltip("If true the ProjectilePrefab will be instantiated during slowmo instead of using a raycast.")]
		public bool FireProjectileInSlowMo;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How fast to fire the weapon during slowmo. Keep in mind this is affected by Time.timeScale")]
		public float SlowMoRateOfFire;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Amount of force to apply to Projectile")]
		public float ShotForce;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Amount of force to apply to the BulletCasingPrefab object")]
		public float BulletCasingForce;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Recoil : ")]
		[Tooltip("How much force to apply to the tip of the barrel")]
		public Vector3 RecoilForce;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Time in seconds to allow the gun to be springy")]
		public float RecoilDuration;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody weaponRigid;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Raycast Options : ")]
		public LayerMask ValidLayers;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Weapon Setup : ")]
		[Tooltip("Transform of trigger to animate rotation of")]
		public Transform TriggerTransform;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Animate this back on fire")]
		public Transform SlideTransform;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Where our raycast or projectile will start from.")]
		public Transform MuzzlePointTransform;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Where to eject a bullet casing (optional)")]
		public Transform EjectPointTransform;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Transform of Chambered Bullet inside the weapon. Hide this when no bullet is chambered. (Optional)")]
		public Transform ChamberedBullet;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Make this active on fire. Randomize scale / rotation")]
		public GameObject MuzzleFlashObject;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Eject this at EjectPointTransform (optional)")]
		public GameObject BulletCasingPrefab;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("If time is slowed this object will be instantiated at muzzle point instead of using a raycast")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Hit Effects spawned at point of impact")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Play this sound on shoot")]
		public AudioClip GunShotSound;

		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		[Tooltip("Volume to play the GunShotSound clip at. Range 0-1")]
		public float GunShotVolume;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Play this sound if no ammo and user presses trigger")]
		public AudioClip EmptySound;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Volume to play the EmptySound clip at. Range 0-1")]
		[Range(0f, 1f)]
		public float EmptySoundVolume;

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Header("Slide Configuration : ")]
		[Tooltip("How far back to move the slide on fire")]
		public float SlideDistance;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Should the slide be forced back if we shoot the last bullet")]
		public bool ForceSlideBackOnLastShot;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("How fast to move back the slide on fire. Default : 1")]
		public float slideSpeed;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float minSlideDistance;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Header("Inputs : ")]
		[Tooltip("Controller Input used to eject clip")]
		public List<GrabbedControllerBinding> EjectInput;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Controller Input used to release the charging mechanism.")]
		public List<GrabbedControllerBinding> ReleaseSlideInput;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Controller Input used to release reload the weapon if ReloadMethod = InternalAmmo.")]
		public List<GrabbedControllerBinding> ReloadInput;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("Shown for Debug : ")]
		[Tooltip("Is there currently a bullet chambered and ready to be fired")]
		public bool BulletInChamber;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		[Tooltip("Is there currently a bullet chambered and that must be ejected")]
		public bool EmptyBulletInChamber;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Header("Events")]
		[Tooltip("Unity Event called when Shoot() method is successfully called")]
		public UnityEvent onShootEvent;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Unity Event called when something attaches ammo to the weapon")]
		public UnityEvent onAttachedAmmoEvent;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Unity Event called when something detaches ammo from the weapon")]
		public UnityEvent onDetachedAmmoEvent;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("Unity Event called when the charging handle is successfully pulled back on the weapon")]
		public UnityEvent onWeaponChargedEvent;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Tooltip("Unity Event called when weapon damaged something")]
		public FloatEvent onDealtDamageEvent;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("Passes along Raycast Hit info whenever a Raycast hit is successfully detected. Use this to display fx, add force, etc.")]
		public RaycastHitEvent onRaycastHitEvent;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected bool slideForcedBack;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected WeaponSlide ws;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected bool readyToShoot;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		protected bool playedEmptySound;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected IEnumerator shotRoutine;

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x1044DFC", Offset = "0x1044DFC", VA = "0x1044DFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x1044F94", Offset = "0x1044F94", VA = "0x1044F94", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x10450D0", Offset = "0x10450D0", VA = "0x10450D0")]
		private void checkSlideInput()
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x10451D8", Offset = "0x10451D8", VA = "0x10451D8")]
		private void checkEjectInput()
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x10452E0", Offset = "0x10452E0", VA = "0x10452E0", Slot = "27")]
		public virtual void CheckReloadInput()
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x10453F4", Offset = "0x10453F4", VA = "0x10453F4", Slot = "28")]
		public virtual void UnlockSlide()
		{
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x104547C", Offset = "0x104547C", VA = "0x104547C", Slot = "29")]
		public virtual void EjectMagazine()
		{
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0x1045530", Offset = "0x1045530", VA = "0x1045530", Slot = "30")]
		public virtual void Shoot()
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x1045B40", Offset = "0x1045B40", VA = "0x1045B40", Slot = "31")]
		public virtual void ApplyRecoil()
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x1045CB8", Offset = "0x1045CB8", VA = "0x1045CB8", Slot = "32")]
		public virtual void OnRaycastHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x1046000", Offset = "0x1046000", VA = "0x1046000", Slot = "33")]
		public virtual void ApplyParticleFX(Vector3 position, Quaternion rotation, Collider attachTo)
		{
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x1046160", Offset = "0x1046160", VA = "0x1046160", Slot = "34")]
		public virtual void OnAttachedAmmo()
		{
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x1046188", Offset = "0x1046188", VA = "0x1046188", Slot = "35")]
		public virtual void OnDetachedAmmo()
		{
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0x10461B0", Offset = "0x10461B0", VA = "0x10461B0", Slot = "36")]
		public virtual int GetBulletCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x1046244", Offset = "0x1046244", VA = "0x1046244", Slot = "37")]
		public virtual void RemoveBullet()
		{
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0x1046348", Offset = "0x1046348", VA = "0x1046348", Slot = "38")]
		public virtual void Reload()
		{
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x1044EE8", Offset = "0x1044EE8", VA = "0x1044EE8")]
		private void updateChamberedBullet()
		{
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x1045AF4", Offset = "0x1045AF4", VA = "0x1045AF4")]
		private void chamberRound()
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x1046354", Offset = "0x1046354", VA = "0x1046354")]
		private void randomizeMuzzleFlashScaleRotation()
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x104643C", Offset = "0x104643C", VA = "0x104643C", Slot = "39")]
		public virtual void OnWeaponCharged(bool allowCasingEject)
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x10464F0", Offset = "0x10464F0", VA = "0x10464F0", Slot = "40")]
		protected virtual void ejectCasing()
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x1046694", Offset = "0x1046694", VA = "0x1046694", Slot = "41")]
		[IteratorStateMachine(typeof(<doMuzzleFlash>d__74))]
		protected virtual IEnumerator doMuzzleFlash()
		{
			return null;
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x1046730", Offset = "0x1046730", VA = "0x1046730", Slot = "42")]
		[IteratorStateMachine(typeof(<animateSlideAndEject>d__75))]
		protected virtual IEnumerator animateSlideAndEject()
		{
			return null;
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x10467CC", Offset = "0x10467CC", VA = "0x10467CC")]
		public RaycastWeapon()
		{
		}
	}
	[Token(Token = "0x20003EF")]
	public enum FiringType
	{
		[Token(Token = "0x4001969")]
		Semi,
		[Token(Token = "0x400196A")]
		Automatic
	}
	[Token(Token = "0x20003F0")]
	public enum ReloadType
	{
		[Token(Token = "0x400196C")]
		InfiniteAmmo,
		[Token(Token = "0x400196D")]
		ManualClip,
		[Token(Token = "0x400196E")]
		InternalAmmo
	}
	[Token(Token = "0x20003F1")]
	public class WeaponSlide : MonoBehaviour
	{
		[Token(Token = "0x20003F2")]
		[CompilerGenerated]
		private sealed class <UnlockSlideRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400197F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WeaponSlide <>4__this;

			[Token(Token = "0x17000259")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600197A")]
				[Address(RVA = "0x1047FA0", Offset = "0x1047FA0", VA = "0x1047FA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600197C")]
				[Address(RVA = "0x1047FE8", Offset = "0x1047FE8", VA = "0x1047FE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001977")]
			[Address(RVA = "0x1047E9C", Offset = "0x1047E9C", VA = "0x1047E9C")]
			[DebuggerHidden]
			public <UnlockSlideRoutine>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6001978")]
			[Address(RVA = "0x1047EE4", Offset = "0x1047EE4", VA = "0x1047EE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001979")]
			[Address(RVA = "0x1047EE8", Offset = "0x1047EE8", VA = "0x1047EE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600197B")]
			[Address(RVA = "0x1047FA8", Offset = "0x1047FA8", VA = "0x1047FA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MinLocalZ;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxLocalZ;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool slidingBack;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool LockedBack;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SlideReleaseSound;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip LockedBackSound;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ZeroMassWhenNotHeld;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable parentGrabbable;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 initialLocalPos;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float initialMass;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _lockPosition;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool lockSlidePosition;

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x10473BC", Offset = "0x10473BC", VA = "0x10473BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x10475BC", Offset = "0x10475BC", VA = "0x10475BC", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x1047674", Offset = "0x1047674", VA = "0x1047674", Slot = "5")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x104772C", Offset = "0x104772C", VA = "0x104772C")]
		private void Update()
		{
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x10479E4", Offset = "0x10479E4", VA = "0x10479E4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x1047AC0", Offset = "0x1047AC0", VA = "0x1047AC0", Slot = "6")]
		public virtual void LockBack()
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x1047B58", Offset = "0x1047B58", VA = "0x1047B58", Slot = "7")]
		public virtual void UnlockBack()
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x10478C4", Offset = "0x10478C4", VA = "0x10478C4")]
		private void onSlideBack()
		{
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x104798C", Offset = "0x104798C", VA = "0x104798C")]
		private void onSlideForward()
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x1047D94", Offset = "0x1047D94", VA = "0x1047D94", Slot = "8")]
		public virtual void LockSlidePosition()
		{
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x1047DF8", Offset = "0x1047DF8", VA = "0x1047DF8", Slot = "9")]
		public virtual void UnlockSlidePosition()
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x1047E28", Offset = "0x1047E28", VA = "0x1047E28")]
		[IteratorStateMachine(typeof(<UnlockSlideRoutine>d__27))]
		public IEnumerator UnlockSlideRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x1047C60", Offset = "0x1047C60", VA = "0x1047C60")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x1047EC4", Offset = "0x1047EC4", VA = "0x1047EC4")]
		public WeaponSlide()
		{
		}
	}
}
