using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using Crosstales.BWF.Data;
using Crosstales.BWF.Filter;
using Crosstales.BWF.Model;
using Crosstales.BWF.Model.Enum;
using Crosstales.BWF.Provider;
using Crosstales.Common.Model.Enum;
using Crosstales.Common.Util;
using DarkTonic.MasterAudio;
using ES3Internal;
using ES3Types;
using Il2CppDummyDll;
using RootMotion.FinalIK;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x200000B")]
public class SimpleBWFExample : MonoBehaviour
{
	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField Input;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text Output;

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xE1A114", Offset = "0xE1A114", VA = "0xE1A114")]
	private void Start()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xE1A170", Offset = "0xE1A170", VA = "0xE1A170")]
	public void Replace()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xE1A2B8", Offset = "0xE1A2B8", VA = "0xE1A2B8")]
	public SimpleBWFExample()
	{
	}
}
[Token(Token = "0x200000C")]
public static class AudioClipOptimizer
{
	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Dictionary<int, string> AudioClipNameByInstanceId;

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xE1A2C0", Offset = "0xE1A2C0", VA = "0xE1A2C0")]
	public static string CachedName(this AudioClip clip)
	{
		return null;
	}
}
[Token(Token = "0x200000D")]
[AudioScriptOrder(-10)]
public class ListenerFollower : MonoBehaviour
{
	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform _transToFollow;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _goToFollow;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _go;

	[Token(Token = "0x17000013")]
	public GameObject GameObj
	{
		[Token(Token = "0x6000040")]
		[Address(RVA = "0xE1A768", Offset = "0xE1A768", VA = "0xE1A768")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000014")]
	public Transform Trans
	{
		[Token(Token = "0x6000041")]
		[Address(RVA = "0xE1A6D4", Offset = "0xE1A6D4", VA = "0xE1A6D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xE1A49C", Offset = "0xE1A49C", VA = "0xE1A49C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xE1A4A0", Offset = "0xE1A4A0", VA = "0xE1A4A0")]
	public void StartFollowing(Transform transToFollow, float trigRadius)
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xE1A4E4", Offset = "0xE1A4E4", VA = "0xE1A4E4")]
	public void ManualUpdate()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xE1A59C", Offset = "0xE1A59C", VA = "0xE1A59C")]
	private void BatchOcclusionRaycasts()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xE1A7FC", Offset = "0xE1A7FC", VA = "0xE1A7FC")]
	public ListenerFollower()
	{
	}
}
[Token(Token = "0x200000E")]
public static class OculusAudioHelper
{
	[Token(Token = "0x6000043")]
	[Address(RVA = "0xE1A804", Offset = "0xE1A804", VA = "0xE1A804")]
	public static bool DarkTonicOculusAudioPackageInstalled()
	{
		return default(bool);
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xE1A80C", Offset = "0xE1A80C", VA = "0xE1A80C")]
	public static void AddOculusAudioSourceToVariation(SoundGroupVariation variation)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xE1A810", Offset = "0xE1A810", VA = "0xE1A810")]
	public static void AddOculusAudioSourceToAllVariations()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xE1A814", Offset = "0xE1A814", VA = "0xE1A814")]
	public static void RemoveOculusAudioSourceFromAllVariations()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xE1A818", Offset = "0xE1A818", VA = "0xE1A818")]
	public static void CopyOculusAudioSource(DynamicGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xE1A81C", Offset = "0xE1A81C", VA = "0xE1A81C")]
	public static void CopyOculusAudioSource(DynamicGroupVariation sourceVariation, SoundGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xE1A820", Offset = "0xE1A820", VA = "0xE1A820")]
	public static void CopyOculusAudioSource(SoundGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}
}
[Token(Token = "0x200000F")]
public static class ResonanceAudioHelper
{
	[Token(Token = "0x17000015")]
	public static bool ResonanceAudioOptionExists
	{
		[Token(Token = "0x600004A")]
		[Address(RVA = "0xE1A824", Offset = "0xE1A824", VA = "0xE1A824")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xE1A82C", Offset = "0xE1A82C", VA = "0xE1A82C")]
	public static bool DarkTonicResonanceAudioPackageInstalled()
	{
		return default(bool);
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xE1A834", Offset = "0xE1A834", VA = "0xE1A834")]
	public static void AddResonanceAudioSourceToVariation(SoundGroupVariation variation)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xE1A838", Offset = "0xE1A838", VA = "0xE1A838")]
	public static void AddResonanceAudioSourceToAllVariations()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xE1A83C", Offset = "0xE1A83C", VA = "0xE1A83C")]
	public static void RemoveResonanceAudioSourceFromAllVariations()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xE1A840", Offset = "0xE1A840", VA = "0xE1A840")]
	public static void CopyResonanceAudioSource(DynamicGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xE1A844", Offset = "0xE1A844", VA = "0xE1A844")]
	public static void CopyResonanceAudioSource(DynamicGroupVariation sourceVariation, SoundGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xE1A848", Offset = "0xE1A848", VA = "0xE1A848")]
	public static void CopyResonanceAudioSource(SoundGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}
}
[Token(Token = "0x2000010")]
public class TransformFollower : MonoBehaviour
{
	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This is for diagnostic purposes only. Do not change or assign this field.")]
	public Transform RuntimeFollowingTransform;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _goToFollow;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _go;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string _soundType;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string _variationName;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _willFollowSource;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool _isInsideTrigger;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool _hasPlayedSound;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _playVolume;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _positionAtClosestColliderPoint;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private MasterAudio.AmbientSoundExitMode _exitMode;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _exitFadeTime;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private MasterAudio.AmbientSoundReEnterMode _reEnterMode;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _reEnterFadeTime;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 _lastListenerPos;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private PlaySoundResult playingVariation;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PlaySoundResult fadingVariation;

	[Token(Token = "0x17000016")]
	public GameObject GameObj
	{
		[Token(Token = "0x600005A")]
		[Address(RVA = "0xE1AD88", Offset = "0xE1AD88", VA = "0xE1AD88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000017")]
	public Transform Trans
	{
		[Token(Token = "0x600005B")]
		[Address(RVA = "0xE1B2E0", Offset = "0xE1B2E0", VA = "0xE1B2E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xE1A84C", Offset = "0xE1A84C", VA = "0xE1A84C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xE1A878", Offset = "0xE1A878", VA = "0xE1A878")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xE1AA30", Offset = "0xE1AA30", VA = "0xE1AA30")]
	public void StartFollowing(Transform transToFollow, string soundType, string variationName, float volume, float trigRadius, bool willFollowSource, bool positionAtClosestColliderPoint, bool useTopCollider, bool useChildColliders, MasterAudio.AmbientSoundExitMode exitMode, float exitFadeTime, MasterAudio.AmbientSoundReEnterMode reEnterMode, float reEnterFadeTime)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xE1AD10", Offset = "0xE1AD10", VA = "0xE1AD10")]
	private void StopFollowing()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xE1AE1C", Offset = "0xE1AE1C", VA = "0xE1AE1C")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xE1B1FC", Offset = "0xE1B1FC", VA = "0xE1B1FC")]
	public void ManualUpdate()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xE1AC9C", Offset = "0xE1AC9C", VA = "0xE1AC9C")]
	public bool RecalcClosestColliderPosition(bool forceRecalc = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xE1A8D8", Offset = "0xE1A8D8", VA = "0xE1A8D8")]
	private void PerformTriggerExit()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xE1B374", Offset = "0xE1B374", VA = "0xE1B374")]
	public TransformFollower()
	{
	}
}
[Token(Token = "0x2000011")]
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field)]
public class ES3Serializable : Attribute
{
	[Token(Token = "0x600005D")]
	[Address(RVA = "0xE1B38C", Offset = "0xE1B38C", VA = "0xE1B38C")]
	public ES3Serializable()
	{
	}
}
[Token(Token = "0x2000012")]
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field)]
public class ES3NonSerializable : Attribute
{
	[Token(Token = "0x600005E")]
	[Address(RVA = "0xE1B394", Offset = "0xE1B394", VA = "0xE1B394")]
	public ES3NonSerializable()
	{
	}
}
[Token(Token = "0x2000013")]
public class ES3AutoSave : MonoBehaviour, ISerializationCallbackReceiver
{
	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool saveLayer;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool saveTag;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool saveName;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool saveHideFlags;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool saveActive;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool saveChildren;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	private bool isQuitting;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<UnityEngine.Component> componentsToSave;

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xE1B39C", Offset = "0xE1B39C", VA = "0xE1B39C")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xE1B3A8", Offset = "0xE1B3A8", VA = "0xE1B3A8")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xE1B728", Offset = "0xE1B728", VA = "0xE1B728")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xE1B734", Offset = "0xE1B734", VA = "0xE1B734")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xE1B7F0", Offset = "0xE1B7F0", VA = "0xE1B7F0", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xE1B7F4", Offset = "0xE1B7F4", VA = "0xE1B7F4", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xE1B8FC", Offset = "0xE1B8FC", VA = "0xE1B8FC")]
	public ES3AutoSave()
	{
	}
}
[Token(Token = "0x2000015")]
public class ES3AutoSaveMgr : MonoBehaviour
{
	[Token(Token = "0x2000016")]
	public enum LoadEvent
	{
		[Token(Token = "0x400003D")]
		None,
		[Token(Token = "0x400003E")]
		Awake,
		[Token(Token = "0x400003F")]
		Start
	}

	[Token(Token = "0x2000017")]
	public enum SaveEvent
	{
		[Token(Token = "0x4000041")]
		None,
		[Token(Token = "0x4000042")]
		OnApplicationQuit,
		[Token(Token = "0x4000043")]
		OnApplicationPause
	}

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ES3AutoSaveMgr _current;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string key;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SaveEvent saveEvent;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LoadEvent loadEvent;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ES3SerializableSettings settings;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HashSet<ES3AutoSave> autoSaves;

	[Token(Token = "0x17000018")]
	public static ES3AutoSaveMgr Current
	{
		[Token(Token = "0x6000069")]
		[Address(RVA = "0xE1B44C", Offset = "0xE1B44C", VA = "0xE1B44C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000019")]
	public static ES3AutoSaveMgr Instance
	{
		[Token(Token = "0x600006A")]
		[Address(RVA = "0xE1BAEC", Offset = "0xE1BAEC", VA = "0xE1BAEC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xE1BAF0", Offset = "0xE1BAF0", VA = "0xE1BAF0")]
	public void Save()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xE1C2B8", Offset = "0xE1C2B8", VA = "0xE1C2B8")]
	public void Load()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xE1C3D4", Offset = "0xE1C3D4", VA = "0xE1C3D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xE1C3E8", Offset = "0xE1C3E8", VA = "0xE1C3E8")]
	public void Awake()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xE1C560", Offset = "0xE1C560", VA = "0xE1C560")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xE1C574", Offset = "0xE1C574", VA = "0xE1C574")]
	private void OnApplicationPause(bool paused)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xE1B67C", Offset = "0xE1B67C", VA = "0xE1B67C")]
	public static void AddAutoSave(ES3AutoSave autoSave)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xE1B744", Offset = "0xE1B744", VA = "0xE1B744")]
	public static void RemoveAutoSave(ES3AutoSave autoSave)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xE1C414", Offset = "0xE1C414", VA = "0xE1C414")]
	public void GetAutoSaves()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xE1C5DC", Offset = "0xE1C5DC", VA = "0xE1C5DC")]
	public ES3AutoSaveMgr()
	{
	}
}
[Token(Token = "0x2000018")]
public class ES3
{
	[Token(Token = "0x2000019")]
	public enum Location
	{
		[Token(Token = "0x4000045")]
		File,
		[Token(Token = "0x4000046")]
		PlayerPrefs,
		[Token(Token = "0x4000047")]
		InternalMS,
		[Token(Token = "0x4000048")]
		Resources,
		[Token(Token = "0x4000049")]
		Cache
	}

	[Token(Token = "0x200001A")]
	public enum Directory
	{
		[Token(Token = "0x400004B")]
		PersistentDataPath,
		[Token(Token = "0x400004C")]
		DataPath
	}

	[Token(Token = "0x200001B")]
	public enum EncryptionType
	{
		[Token(Token = "0x400004E")]
		None,
		[Token(Token = "0x400004F")]
		AES
	}

	[Token(Token = "0x200001C")]
	public enum CompressionType
	{
		[Token(Token = "0x4000051")]
		None,
		[Token(Token = "0x4000052")]
		Gzip
	}

	[Token(Token = "0x200001D")]
	public enum Format
	{
		[Token(Token = "0x4000054")]
		JSON
	}

	[Token(Token = "0x200001E")]
	public enum ReferenceMode
	{
		[Token(Token = "0x4000056")]
		ByRef,
		[Token(Token = "0x4000057")]
		ByValue,
		[Token(Token = "0x4000058")]
		ByRefAndValue
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xE1C758", Offset = "0xE1C758", VA = "0xE1C758")]
	public static void Save(string key, object value)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xE1C838", Offset = "0xE1C838", VA = "0xE1C838")]
	public static void Save(string key, object value, string filePath)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xE1C8CC", Offset = "0xE1C8CC", VA = "0xE1C8CC")]
	public static void Save(string key, object value, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xE1C96C", Offset = "0xE1C96C", VA = "0xE1C96C")]
	public static void Save(string key, object value, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000079")]
	public static void Save<T>(string key, T value)
	{
	}

	[Token(Token = "0x600007A")]
	public static void Save<T>(string key, T value, string filePath)
	{
	}

	[Token(Token = "0x600007B")]
	public static void Save<T>(string key, T value, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007C")]
	public static void Save<T>(string key, T value, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xE1C9CC", Offset = "0xE1C9CC", VA = "0xE1C9CC")]
	public static void SaveRaw(byte[] bytes)
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xE1CC80", Offset = "0xE1CC80", VA = "0xE1CC80")]
	public static void SaveRaw(byte[] bytes, string filePath)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xE1CCF4", Offset = "0xE1CCF4", VA = "0xE1CCF4")]
	public static void SaveRaw(byte[] bytes, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xE1CA30", Offset = "0xE1CA30", VA = "0xE1CA30")]
	public static void SaveRaw(byte[] bytes, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xE1D340", Offset = "0xE1D340", VA = "0xE1D340")]
	public static void SaveRaw(string str)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xE1D3DC", Offset = "0xE1D3DC", VA = "0xE1D3DC")]
	public static void SaveRaw(string str, string filePath)
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xE1D450", Offset = "0xE1D450", VA = "0xE1D450")]
	public static void SaveRaw(string str, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xE1D3A4", Offset = "0xE1D3A4", VA = "0xE1D3A4")]
	public static void SaveRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xE1D4C8", Offset = "0xE1D4C8", VA = "0xE1D4C8")]
	public static void AppendRaw(byte[] bytes)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xE1D764", Offset = "0xE1D764", VA = "0xE1D764")]
	public static void AppendRaw(byte[] bytes, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xE1D52C", Offset = "0xE1D52C", VA = "0xE1D52C")]
	public static void AppendRaw(byte[] bytes, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xE1D858", Offset = "0xE1D858", VA = "0xE1D858")]
	public static void AppendRaw(string str)
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xE1DB18", Offset = "0xE1DB18", VA = "0xE1DB18")]
	public static void AppendRaw(string str, string filePath)
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xE1DB8C", Offset = "0xE1DB8C", VA = "0xE1DB8C")]
	public static void AppendRaw(string str, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xE1D8BC", Offset = "0xE1D8BC", VA = "0xE1D8BC")]
	public static void AppendRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xE1DC04", Offset = "0xE1DC04", VA = "0xE1DC04")]
	public static void SaveImage(Texture2D texture, string imagePath)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xE1DC88", Offset = "0xE1DC88", VA = "0xE1DC88")]
	public static void SaveImage(Texture2D texture, string imagePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xE1DC7C", Offset = "0xE1DC7C", VA = "0xE1DC7C")]
	public static void SaveImage(Texture2D texture, ES3Settings settings)
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xE1DEA4", Offset = "0xE1DEA4", VA = "0xE1DEA4")]
	public static void SaveImage(Texture2D texture, int quality, string imagePath)
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xE1DF1C", Offset = "0xE1DF1C", VA = "0xE1DF1C")]
	public static void SaveImage(Texture2D texture, int quality, string imagePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xE1DD04", Offset = "0xE1DD04", VA = "0xE1DD04")]
	public static void SaveImage(Texture2D texture, int quality, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xE1DFA4", Offset = "0xE1DFA4", VA = "0xE1DFA4")]
	public static object Load(string key)
	{
		return null;
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xE1E020", Offset = "0xE1E020", VA = "0xE1E020")]
	public static object Load(string key, string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xE1E0AC", Offset = "0xE1E0AC", VA = "0xE1E0AC")]
	public static object Load(string key, string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xE1E13C", Offset = "0xE1E13C", VA = "0xE1E13C")]
	public static object Load(string key, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xE1E194", Offset = "0xE1E194", VA = "0xE1E194")]
	public static object Load(string key, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xE1E220", Offset = "0xE1E220", VA = "0xE1E220")]
	public static object Load(string key, string filePath, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xE1E2B4", Offset = "0xE1E2B4", VA = "0xE1E2B4")]
	public static object Load(string key, string filePath, object defaultValue, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xE1E354", Offset = "0xE1E354", VA = "0xE1E354")]
	public static object Load(string key, object defaultValue, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600009A")]
	public static T Load<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x600009B")]
	public static T Load<T>(string key, string filePath)
	{
		return (T)null;
	}

	[Token(Token = "0x600009C")]
	public static T Load<T>(string key, string filePath, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x600009D")]
	public static T Load<T>(string key, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x600009E")]
	public static T Load<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x600009F")]
	public static T Load<T>(string key, string filePath, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x60000A0")]
	public static T Load<T>(string key, string filePath, T defaultValue, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x60000A1")]
	public static T Load<T>(string key, T defaultValue, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x60000A2")]
	public static void LoadInto<T>(string key, object obj) where T : class
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xE1E3B4", Offset = "0xE1E3B4", VA = "0xE1E3B4")]
	public static void LoadInto(string key, string filePath, object obj)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xE1E448", Offset = "0xE1E448", VA = "0xE1E448")]
	public static void LoadInto(string key, string filePath, object obj, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xE1E4E8", Offset = "0xE1E4E8", VA = "0xE1E4E8")]
	public static void LoadInto(string key, object obj, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000A6")]
	public static void LoadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x60000A7")]
	public static void LoadInto<T>(string key, string filePath, T obj) where T : class
	{
	}

	[Token(Token = "0x60000A8")]
	public static void LoadInto<T>(string key, string filePath, T obj, ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x60000A9")]
	public static void LoadInto<T>(string key, T obj, ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xE1E548", Offset = "0xE1E548", VA = "0xE1E548")]
	public static string LoadString(string key, string defaultValue, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xE1E5AC", Offset = "0xE1E5AC", VA = "0xE1E5AC")]
	public static string LoadString(string key, string defaultValue, [Optional] string filePath, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xE1E61C", Offset = "0xE1E61C", VA = "0xE1E61C")]
	public static byte[] LoadRawBytes()
	{
		return null;
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xE1EBBC", Offset = "0xE1EBBC", VA = "0xE1EBBC")]
	public static byte[] LoadRawBytes(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xE1EC20", Offset = "0xE1EC20", VA = "0xE1EC20")]
	public static byte[] LoadRawBytes(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xE1E678", Offset = "0xE1E678", VA = "0xE1E678")]
	public static byte[] LoadRawBytes(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xE1ED28", Offset = "0xE1ED28", VA = "0xE1ED28")]
	public static string LoadRawString()
	{
		return null;
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xE1EDC4", Offset = "0xE1EDC4", VA = "0xE1EDC4")]
	public static string LoadRawString(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xE1EE28", Offset = "0xE1EE28", VA = "0xE1EE28")]
	public static string LoadRawString(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xE1ED84", Offset = "0xE1ED84", VA = "0xE1ED84")]
	public static string LoadRawString(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xE1EE98", Offset = "0xE1EE98", VA = "0xE1EE98")]
	public static Texture2D LoadImage(string imagePath)
	{
		return null;
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xE1EF10", Offset = "0xE1EF10", VA = "0xE1EF10")]
	public static Texture2D LoadImage(string imagePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xE1EF00", Offset = "0xE1EF00", VA = "0xE1EF00")]
	public static Texture2D LoadImage(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xE1EF84", Offset = "0xE1EF84", VA = "0xE1EF84")]
	public static Texture2D LoadImage(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xE1EFFC", Offset = "0xE1EFFC", VA = "0xE1EFFC")]
	public static AudioClip LoadAudio(string audioFilePath, AudioType audioType)
	{
		return null;
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xE1F070", Offset = "0xE1F070", VA = "0xE1F070")]
	public static AudioClip LoadAudio(string audioFilePath, AudioType audioType, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000BA")]
	public static byte[] Serialize<T>(T value, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xE1F820", Offset = "0xE1F820", VA = "0xE1F820")]
	internal static byte[] Serialize(object value, ES3Type type, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000BC")]
	public static T Deserialize<T>(byte[] bytes, [Optional] ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xE1FE40", Offset = "0xE1FE40", VA = "0xE1FE40")]
	internal static object Deserialize(ES3Type type, byte[] bytes, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000BE")]
	public static void DeserializeInto<T>(byte[] bytes, T obj, [Optional] ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x60000BF")]
	public static void DeserializeInto<T>(ES3Type type, byte[] bytes, T obj, [Optional] ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xE2036C", Offset = "0xE2036C", VA = "0xE2036C")]
	public static byte[] EncryptBytes(byte[] bytes, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xE20544", Offset = "0xE20544", VA = "0xE20544")]
	public static byte[] DecryptBytes(byte[] bytes, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xE2061C", Offset = "0xE2061C", VA = "0xE2061C")]
	public static string EncryptString(string str, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xE206DC", Offset = "0xE206DC", VA = "0xE206DC")]
	public static string DecryptString(string str, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xE2079C", Offset = "0xE2079C", VA = "0xE2079C")]
	public static byte[] CompressBytes(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xE20AF8", Offset = "0xE20AF8", VA = "0xE20AF8")]
	public static byte[] DecompressBytes(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xE20F70", Offset = "0xE20F70", VA = "0xE20F70")]
	public static string CompressString(string str)
	{
		return null;
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xE21020", Offset = "0xE21020", VA = "0xE21020")]
	public static string DecompressString(string str)
	{
		return null;
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xE210D0", Offset = "0xE210D0", VA = "0xE210D0")]
	public static void DeleteFile()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xE2127C", Offset = "0xE2127C", VA = "0xE2127C")]
	public static void DeleteFile(string filePath)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xE212E0", Offset = "0xE212E0", VA = "0xE212E0")]
	public static void DeleteFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xE2112C", Offset = "0xE2112C", VA = "0xE2112C")]
	public static void DeleteFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xE213D4", Offset = "0xE213D4", VA = "0xE213D4")]
	public static void CopyFile(string oldFilePath, string newFilePath)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xE21848", Offset = "0xE21848", VA = "0xE21848")]
	public static void CopyFile(string oldFilePath, string newFilePath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xE21464", Offset = "0xE21464", VA = "0xE21464")]
	public static void CopyFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xE21CBC", Offset = "0xE21CBC", VA = "0xE21CBC")]
	public static void RenameFile(string oldFilePath, string newFilePath)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xE22148", Offset = "0xE22148", VA = "0xE22148")]
	public static void RenameFile(string oldFilePath, string newFilePath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xE21D4C", Offset = "0xE21D4C", VA = "0xE21D4C")]
	public static void RenameFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xE221E8", Offset = "0xE221E8", VA = "0xE221E8")]
	public static void CopyDirectory(string oldDirectoryPath, string newDirectoryPath)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xE22520", Offset = "0xE22520", VA = "0xE22520")]
	public static void CopyDirectory(string oldDirectoryPath, string newDirectoryPath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xE22278", Offset = "0xE22278", VA = "0xE22278")]
	public static void CopyDirectory(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xE228C4", Offset = "0xE228C4", VA = "0xE228C4")]
	public static void RenameDirectory(string oldDirectoryPath, string newDirectoryPath)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xE22AE4", Offset = "0xE22AE4", VA = "0xE22AE4")]
	public static void RenameDirectory(string oldDirectoryPath, string newDirectoryPath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xE22954", Offset = "0xE22954", VA = "0xE22954")]
	public static void RenameDirectory(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xE22B84", Offset = "0xE22B84", VA = "0xE22B84")]
	public static void DeleteDirectory(string directoryPath)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xE22D10", Offset = "0xE22D10", VA = "0xE22D10")]
	public static void DeleteDirectory(string directoryPath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xE22BE8", Offset = "0xE22BE8", VA = "0xE22BE8")]
	public static void DeleteDirectory(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xE22D80", Offset = "0xE22D80", VA = "0xE22D80")]
	public static void DeleteKey(string key)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xE22DE4", Offset = "0xE22DE4", VA = "0xE22DE4")]
	public static void DeleteKey(string key, string filePath)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xE22E58", Offset = "0xE22E58", VA = "0xE22E58")]
	public static void DeleteKey(string key, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xE1BFFC", Offset = "0xE1BFFC", VA = "0xE1BFFC")]
	public static void DeleteKey(string key, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xE22F90", Offset = "0xE22F90", VA = "0xE22F90")]
	public static bool KeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xE231D0", Offset = "0xE231D0", VA = "0xE231D0")]
	public static bool KeyExists(string key, string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xE23244", Offset = "0xE23244", VA = "0xE23244")]
	public static bool KeyExists(string key, string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xE22FF4", Offset = "0xE22FF4", VA = "0xE22FF4")]
	public static bool KeyExists(string key, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xE23410", Offset = "0xE23410", VA = "0xE23410")]
	public static bool FileExists()
	{
		return default(bool);
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xE2346C", Offset = "0xE2346C", VA = "0xE2346C")]
	public static bool FileExists(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xE234D0", Offset = "0xE234D0", VA = "0xE234D0")]
	public static bool FileExists(string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xE1BE4C", Offset = "0xE1BE4C", VA = "0xE1BE4C")]
	public static bool FileExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xE235C4", Offset = "0xE235C4", VA = "0xE235C4")]
	public static bool DirectoryExists(string folderPath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xE23628", Offset = "0xE23628", VA = "0xE23628")]
	public static bool DirectoryExists(string folderPath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xE225C0", Offset = "0xE225C0", VA = "0xE225C0")]
	public static bool DirectoryExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xE23698", Offset = "0xE23698", VA = "0xE23698")]
	public static string[] GetKeys()
	{
		return null;
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xE23C60", Offset = "0xE23C60", VA = "0xE23C60")]
	public static string[] GetKeys(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xE23CC4", Offset = "0xE23CC4", VA = "0xE23CC4")]
	public static string[] GetKeys(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xE236F4", Offset = "0xE236F4", VA = "0xE236F4")]
	public static string[] GetKeys(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xE23F0C", Offset = "0xE23F0C", VA = "0xE23F0C")]
	public static string[] GetFiles()
	{
		return null;
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xE23FA0", Offset = "0xE23FA0", VA = "0xE23FA0")]
	public static string[] GetFiles(string directoryPath)
	{
		return null;
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xE24004", Offset = "0xE24004", VA = "0xE24004")]
	public static string[] GetFiles(string directoryPath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xE226EC", Offset = "0xE226EC", VA = "0xE226EC")]
	public static string[] GetFiles(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xE24108", Offset = "0xE24108", VA = "0xE24108")]
	public static string[] GetDirectories()
	{
		return null;
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xE24164", Offset = "0xE24164", VA = "0xE24164")]
	public static string[] GetDirectories(string directoryPath)
	{
		return null;
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xE241C8", Offset = "0xE241C8", VA = "0xE241C8")]
	public static string[] GetDirectories(string directoryPath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xE227F8", Offset = "0xE227F8", VA = "0xE227F8")]
	public static string[] GetDirectories(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xE24238", Offset = "0xE24238", VA = "0xE24238")]
	public static void CreateBackup()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xE2432C", Offset = "0xE2432C", VA = "0xE2432C")]
	public static void CreateBackup(string filePath)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xE24390", Offset = "0xE24390", VA = "0xE24390")]
	public static void CreateBackup(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xE24294", Offset = "0xE24294", VA = "0xE24294")]
	public static void CreateBackup(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xE24400", Offset = "0xE24400", VA = "0xE24400")]
	public static bool RestoreBackup(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xE24518", Offset = "0xE24518", VA = "0xE24518")]
	public static bool RestoreBackup(string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xE24464", Offset = "0xE24464", VA = "0xE24464")]
	public static bool RestoreBackup(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xE24588", Offset = "0xE24588", VA = "0xE24588")]
	public static DateTime GetTimestamp()
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xE24770", Offset = "0xE24770", VA = "0xE24770")]
	public static DateTime GetTimestamp(string filePath)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xE247D4", Offset = "0xE247D4", VA = "0xE247D4")]
	public static DateTime GetTimestamp(string filePath, ES3Settings settings)
	{
		return default(DateTime);
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xE245E4", Offset = "0xE245E4", VA = "0xE245E4")]
	public static DateTime GetTimestamp(ES3Settings settings)
	{
		return default(DateTime);
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xE2492C", Offset = "0xE2492C", VA = "0xE2492C")]
	public static void StoreCachedFile()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xE24BC4", Offset = "0xE24BC4", VA = "0xE24BC4")]
	public static void StoreCachedFile(string filePath)
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xE24C28", Offset = "0xE24C28", VA = "0xE24C28")]
	public static void StoreCachedFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xE1C264", Offset = "0xE1C264", VA = "0xE1C264")]
	public static void StoreCachedFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xE24C98", Offset = "0xE24C98", VA = "0xE24C98")]
	public static void CacheFile()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xE24CF4", Offset = "0xE24CF4", VA = "0xE24CF4")]
	public static void CacheFile(string filePath)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xE24D58", Offset = "0xE24D58", VA = "0xE24D58")]
	public static void CacheFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xE1BFA8", Offset = "0xE1BFA8", VA = "0xE1BFA8")]
	public static void CacheFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xE24F60", Offset = "0xE24F60", VA = "0xE24F60")]
	public static void Init()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xE24FD8", Offset = "0xE24FD8", VA = "0xE24FD8")]
	public ES3()
	{
	}
}
[Token(Token = "0x200001F")]
public class ES3File
{
	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static Dictionary<string, ES3File> cachedFiles;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, ES3Data> cache;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool syncWithFile;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DateTime timestamp;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xE24FE0", Offset = "0xE24FE0", VA = "0xE24FE0")]
	public ES3File()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xE25588", Offset = "0xE25588", VA = "0xE25588")]
	public ES3File(string filePath)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xE25600", Offset = "0xE25600", VA = "0xE25600")]
	public ES3File(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xE2567C", Offset = "0xE2567C", VA = "0xE2567C")]
	public ES3File(ES3Settings settings)
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xE25684", Offset = "0xE25684", VA = "0xE25684")]
	public ES3File(bool syncWithFile)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xE256F8", Offset = "0xE256F8", VA = "0xE256F8")]
	public ES3File(string filePath, bool syncWithFile)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xE25774", Offset = "0xE25774", VA = "0xE25774")]
	public ES3File(string filePath, ES3Settings settings, bool syncWithFile)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xE25048", Offset = "0xE25048", VA = "0xE25048")]
	public ES3File(ES3Settings settings, bool syncWithFile)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xE258DC", Offset = "0xE258DC", VA = "0xE258DC")]
	public ES3File(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xE25A04", Offset = "0xE25A04", VA = "0xE25A04")]
	public void Sync()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xE25DF8", Offset = "0xE25DF8", VA = "0xE25DF8")]
	public void Sync(string filePath, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xE25A0C", Offset = "0xE25A0C", VA = "0xE25A0C")]
	public void Sync([Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xE25EC0", Offset = "0xE25EC0", VA = "0xE25EC0")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xE25F10", Offset = "0xE25F10", VA = "0xE25F10")]
	public string[] GetKeys()
	{
		return null;
	}

	[Token(Token = "0x6000119")]
	public void Save<T>(string key, T value)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xE1CE84", Offset = "0xE1CE84", VA = "0xE1CE84")]
	public void SaveRaw(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xE1D7DC", Offset = "0xE1D7DC", VA = "0xE1D7DC")]
	public void AppendRaw(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xE260B4", Offset = "0xE260B4", VA = "0xE260B4")]
	public object Load(string key)
	{
		return null;
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xE2610C", Offset = "0xE2610C", VA = "0xE2610C")]
	public object Load(string key, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x600011E")]
	public T Load<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x600011F")]
	public T Load<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000120")]
	public void LoadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xE1EC90", Offset = "0xE1EC90", VA = "0xE1EC90")]
	public byte[] LoadRawBytes()
	{
		return null;
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xE266F4", Offset = "0xE266F4", VA = "0xE266F4")]
	public string LoadRawString()
	{
		return null;
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xE2616C", Offset = "0xE2616C", VA = "0xE2616C")]
	internal byte[] GetBytes([Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xE2679C", Offset = "0xE2679C", VA = "0xE2679C")]
	public void DeleteKey(string key)
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xE267F4", Offset = "0xE267F4", VA = "0xE267F4")]
	public bool KeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xE2684C", Offset = "0xE2684C", VA = "0xE2684C")]
	public int Size()
	{
		return default(int);
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xE269AC", Offset = "0xE269AC", VA = "0xE269AC")]
	public Type GetKeyType(string key)
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xE1CD6C", Offset = "0xE1CD6C", VA = "0xE1CD6C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static ES3File GetOrCreateCachedFile(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xE24DC8", Offset = "0xE24DC8", VA = "0xE24DC8")]
	internal static void CacheFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xE2497C", Offset = "0xE2497C", VA = "0xE2497C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void Store([Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xE21350", Offset = "0xE21350", VA = "0xE21350")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void RemoveCachedFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xE218E8", Offset = "0xE218E8", VA = "0xE218E8")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void CopyCachedFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xE22ED0", Offset = "0xE22ED0", VA = "0xE22ED0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void DeleteKey(string key, ES3Settings settings)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xE232BC", Offset = "0xE232BC", VA = "0xE232BC")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static bool KeyExists(string key, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xE23540", Offset = "0xE23540", VA = "0xE23540")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static bool FileExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xE23D34", Offset = "0xE23D34", VA = "0xE23D34")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static string[] GetKeys(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xE24074", Offset = "0xE24074", VA = "0xE24074")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static string[] GetFiles()
	{
		return null;
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xE24844", Offset = "0xE24844", VA = "0xE24844")]
	internal static DateTime GetTimestamp(ES3Settings settings)
	{
		return default(DateTime);
	}
}
[Token(Token = "0x2000020")]
public class ES3InspectorInfo : MonoBehaviour
{
	[Token(Token = "0x6000134")]
	[Address(RVA = "0xE26CF4", Offset = "0xE26CF4", VA = "0xE26CF4")]
	public ES3InspectorInfo()
	{
	}
}
[Token(Token = "0x2000021")]
public class ES3ReferenceMgr : ES3ReferenceMgrBase
{
	[Token(Token = "0x6000135")]
	[Address(RVA = "0xE26CFC", Offset = "0xE26CFC", VA = "0xE26CFC")]
	public ES3ReferenceMgr()
	{
	}
}
[Token(Token = "0x2000022")]
public class ES3Spreadsheet
{
	[Token(Token = "0x2000023")]
	protected struct Index
	{
		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int col;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int row;

		[Token(Token = "0x600014D")]
		[Address(RVA = "0xE27024", Offset = "0xE27024", VA = "0xE27024")]
		public Index(int col, int row)
		{
		}
	}

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int cols;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int rows;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Index, string> cells;

	[Token(Token = "0x4000061")]
	private const string QUOTE = "\"";

	[Token(Token = "0x4000062")]
	private const char QUOTE_CHAR = '"';

	[Token(Token = "0x4000063")]
	private const char COMMA_CHAR = ',';

	[Token(Token = "0x4000064")]
	private const char NEWLINE_CHAR = '\n';

	[Token(Token = "0x4000065")]
	private const string ESCAPED_QUOTE = "\"\"";

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static char[] CHARS_TO_ESCAPE;

	[Token(Token = "0x1700001A")]
	public int ColumnCount
	{
		[Token(Token = "0x6000136")]
		[Address(RVA = "0xE26D54", Offset = "0xE26D54", VA = "0xE26D54")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700001B")]
	public int RowCount
	{
		[Token(Token = "0x6000137")]
		[Address(RVA = "0xE26D5C", Offset = "0xE26D5C", VA = "0xE26D5C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xE26D64", Offset = "0xE26D64", VA = "0xE26D64")]
	public void SetCell(int col, int row, object value)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xE26F88", Offset = "0xE26F88", VA = "0xE26F88")]
	private void SetCellString(int col, int row, string value)
	{
	}

	[Token(Token = "0x600013A")]
	public T GetCell<T>(int col, int row)
	{
		return (T)null;
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xE2702C", Offset = "0xE2702C", VA = "0xE2702C")]
	public object GetCell(Type type, int col, int row)
	{
		return null;
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xE27434", Offset = "0xE27434", VA = "0xE27434")]
	public void Load(string filePath)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xE274E0", Offset = "0xE274E0", VA = "0xE274E0")]
	public void Load(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xE274B8", Offset = "0xE274B8", VA = "0xE274B8")]
	public void Load(ES3Settings settings)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xE27850", Offset = "0xE27850", VA = "0xE27850")]
	public void LoadRaw(string str)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xE27928", Offset = "0xE27928", VA = "0xE27928")]
	public void LoadRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xE27568", Offset = "0xE27568", VA = "0xE27568")]
	private void Load(Stream stream, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xE279C8", Offset = "0xE279C8", VA = "0xE279C8")]
	public void Save(string filePath)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xE27DA4", Offset = "0xE27DA4", VA = "0xE27DA4")]
	public void Save(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xE27E20", Offset = "0xE27E20", VA = "0xE27E20")]
	public void Save(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xE27E28", Offset = "0xE27E28", VA = "0xE27E28")]
	public void Save(string filePath, bool append)
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xE27EA4", Offset = "0xE27EA4", VA = "0xE27EA4")]
	public void Save(string filePath, ES3Settings settings, bool append)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xE27A40", Offset = "0xE27A40", VA = "0xE27A40")]
	public void Save(ES3Settings settings, bool append)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xE28108", Offset = "0xE28108", VA = "0xE28108")]
	private static string Escape(string str, bool isAlreadyWrappedInQuotes = false)
	{
		return null;
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xE28230", Offset = "0xE28230", VA = "0xE28230")]
	private static string Unescape(string str)
	{
		return null;
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xE27F2C", Offset = "0xE27F2C", VA = "0xE27F2C")]
	private string[,] ToArray()
	{
		return null;
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xE28304", Offset = "0xE28304", VA = "0xE28304")]
	public ES3Spreadsheet()
	{
	}
}
[Token(Token = "0x2000024")]
public abstract class ES3Reader : IDisposable
{
	[Token(Token = "0x2000025")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3ReaderPropertyEnumerator
	{
		[Token(Token = "0x2000026")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400006D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400006E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400006F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3ReaderPropertyEnumerator <>4__this;

			[Token(Token = "0x1700001E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000191")]
				[Address(RVA = "0xE28DE0", Offset = "0xE28DE0", VA = "0xE28DE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700001F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000193")]
				[Address(RVA = "0xE28E28", Offset = "0xE28E28", VA = "0xE28E28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600018E")]
			[Address(RVA = "0xE28D04", Offset = "0xE28D04", VA = "0xE28D04")]
			[DebuggerHidden]
			public <GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600018F")]
			[Address(RVA = "0xE28D2C", Offset = "0xE28D2C", VA = "0xE28D2C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000190")]
			[Address(RVA = "0xE28D30", Offset = "0xE28D30", VA = "0xE28D30", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000192")]
			[Address(RVA = "0xE28DE8", Offset = "0xE28DE8", VA = "0xE28DE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Reader reader;

		[Token(Token = "0x600018C")]
		[Address(RVA = "0xE285AC", Offset = "0xE285AC", VA = "0xE285AC")]
		public ES3ReaderPropertyEnumerator(ES3Reader reader)
		{
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0xE23E98", Offset = "0xE23E98", VA = "0xE23E98")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__2))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000027")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3ReaderRawEnumerator
	{
		[Token(Token = "0x2000028")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3ReaderRawEnumerator <>4__this;

			[Token(Token = "0x17000020")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000199")]
				[Address(RVA = "0xE29020", Offset = "0xE29020", VA = "0xE29020", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000021")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600019B")]
				[Address(RVA = "0xE29068", Offset = "0xE29068", VA = "0xE29068", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000196")]
			[Address(RVA = "0xE28E30", Offset = "0xE28E30", VA = "0xE28E30")]
			[DebuggerHidden]
			public <GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000197")]
			[Address(RVA = "0xE28E58", Offset = "0xE28E58", VA = "0xE28E58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000198")]
			[Address(RVA = "0xE28E5C", Offset = "0xE28E5C", VA = "0xE28E5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600019A")]
			[Address(RVA = "0xE29028", Offset = "0xE29028", VA = "0xE29028", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Reader reader;

		[Token(Token = "0x6000194")]
		[Address(RVA = "0xE2864C", Offset = "0xE2864C", VA = "0xE2864C")]
		public ES3ReaderRawEnumerator(ES3Reader reader)
		{
		}

		[Token(Token = "0x6000195")]
		[Address(RVA = "0xE25868", Offset = "0xE25868", VA = "0xE25868")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__2))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected int serializationDepth;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal string overridePropertiesName;

	[Token(Token = "0x1700001C")]
	public virtual ES3ReaderPropertyEnumerator Properties
	{
		[Token(Token = "0x6000171")]
		[Address(RVA = "0xE2853C", Offset = "0xE2853C", VA = "0xE2853C", Slot = "39")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001D")]
	internal virtual ES3ReaderRawEnumerator RawEnumerator
	{
		[Token(Token = "0x6000172")]
		[Address(RVA = "0xE285DC", Offset = "0xE285DC", VA = "0xE285DC", Slot = "40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600014E")]
	internal abstract int Read_int();

	[Token(Token = "0x600014F")]
	internal abstract float Read_float();

	[Token(Token = "0x6000150")]
	internal abstract bool Read_bool();

	[Token(Token = "0x6000151")]
	internal abstract char Read_char();

	[Token(Token = "0x6000152")]
	internal abstract decimal Read_decimal();

	[Token(Token = "0x6000153")]
	internal abstract double Read_double();

	[Token(Token = "0x6000154")]
	internal abstract long Read_long();

	[Token(Token = "0x6000155")]
	internal abstract ulong Read_ulong();

	[Token(Token = "0x6000156")]
	internal abstract byte Read_byte();

	[Token(Token = "0x6000157")]
	internal abstract sbyte Read_sbyte();

	[Token(Token = "0x6000158")]
	internal abstract short Read_short();

	[Token(Token = "0x6000159")]
	internal abstract ushort Read_ushort();

	[Token(Token = "0x600015A")]
	internal abstract uint Read_uint();

	[Token(Token = "0x600015B")]
	internal abstract string Read_string();

	[Token(Token = "0x600015C")]
	internal abstract byte[] Read_byteArray();

	[Token(Token = "0x600015D")]
	internal abstract long Read_ref();

	[Token(Token = "0x600015E")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public abstract string ReadPropertyName();

	[Token(Token = "0x600015F")]
	protected abstract Type ReadKeyPrefix(bool ignore = false);

	[Token(Token = "0x6000160")]
	protected abstract void ReadKeySuffix();

	[Token(Token = "0x6000161")]
	internal abstract byte[] ReadElement(bool skip = false);

	[Token(Token = "0x6000162")]
	public abstract void Dispose();

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xE2842C", Offset = "0xE2842C", VA = "0xE2842C", Slot = "26")]
	internal virtual bool Goto(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xE284E8", Offset = "0xE284E8", VA = "0xE284E8", Slot = "27")]
	internal virtual bool StartReadObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xE284FC", Offset = "0xE284FC", VA = "0xE284FC", Slot = "28")]
	internal virtual void EndReadObject()
	{
	}

	[Token(Token = "0x6000166")]
	internal abstract bool StartReadDictionary();

	[Token(Token = "0x6000167")]
	internal abstract void EndReadDictionary();

	[Token(Token = "0x6000168")]
	internal abstract bool StartReadDictionaryKey();

	[Token(Token = "0x6000169")]
	internal abstract void EndReadDictionaryKey();

	[Token(Token = "0x600016A")]
	internal abstract void StartReadDictionaryValue();

	[Token(Token = "0x600016B")]
	internal abstract bool EndReadDictionaryValue();

	[Token(Token = "0x600016C")]
	internal abstract bool StartReadCollection();

	[Token(Token = "0x600016D")]
	internal abstract void EndReadCollection();

	[Token(Token = "0x600016E")]
	internal abstract bool StartReadCollectionItem();

	[Token(Token = "0x600016F")]
	internal abstract bool EndReadCollectionItem();

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xE2850C", Offset = "0xE2850C", VA = "0xE2850C")]
	internal ES3Reader(ES3Settings settings, bool readHeaderAndFooter = true)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xE2867C", Offset = "0xE2867C", VA = "0xE2867C", Slot = "41")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Skip()
	{
	}

	[Token(Token = "0x6000174")]
	public virtual T Read<T>()
	{
		return (T)null;
	}

	[Token(Token = "0x6000175")]
	public virtual void ReadInto<T>(object obj)
	{
	}

	[Token(Token = "0x6000176")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public T ReadProperty<T>()
	{
		return (T)null;
	}

	[Token(Token = "0x6000177")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public T ReadProperty<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xE28690", Offset = "0xE28690", VA = "0xE28690")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public long ReadRefProperty()
	{
		return default(long);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xE286C0", Offset = "0xE286C0", VA = "0xE286C0")]
	internal Type ReadType()
	{
		return null;
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xE28794", Offset = "0xE28794", VA = "0xE28794")]
	public object SetPrivateProperty(string name, object value, object objectContainingProperty)
	{
		return null;
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xE28934", Offset = "0xE28934", VA = "0xE28934")]
	public object SetPrivateField(string name, object value, object objectContainingField)
	{
		return null;
	}

	[Token(Token = "0x600017C")]
	public virtual T Read<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x600017D")]
	public virtual T Read<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x600017E")]
	public virtual void ReadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x600017F")]
	protected virtual void ReadObject<T>(object obj, ES3Type type)
	{
	}

	[Token(Token = "0x6000180")]
	protected virtual T ReadObject<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000181")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual T Read<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000182")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void ReadInto<T>(object obj, ES3Type type)
	{
	}

	[Token(Token = "0x6000183")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal Type ReadTypeFromHeader<T>()
	{
		return null;
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xE28AD4", Offset = "0xE28AD4", VA = "0xE28AD4")]
	public static ES3Reader Create()
	{
		return null;
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xE28B30", Offset = "0xE28B30", VA = "0xE28B30")]
	public static ES3Reader Create(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xE28B94", Offset = "0xE28B94", VA = "0xE28B94")]
	public static ES3Reader Create(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xE23378", Offset = "0xE23378", VA = "0xE23378")]
	public static ES3Reader Create(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xE28C04", Offset = "0xE28C04", VA = "0xE28C04")]
	public static ES3Reader Create(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xE25FDC", Offset = "0xE25FDC", VA = "0xE25FDC")]
	public static ES3Reader Create(byte[] bytes, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xE28C68", Offset = "0xE28C68", VA = "0xE28C68")]
	internal static ES3Reader Create(Stream stream, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xE202DC", Offset = "0xE202DC", VA = "0xE202DC")]
	internal static ES3Reader Create(Stream stream, ES3Settings settings, bool readHeaderAndFooter)
	{
		return null;
	}
}
[Token(Token = "0x2000029")]
public class ES3XMLReader
{
	[Token(Token = "0x600019C")]
	[Address(RVA = "0xE29070", Offset = "0xE29070", VA = "0xE29070")]
	public ES3XMLReader()
	{
	}
}
[Token(Token = "0x200002A")]
public class ES3Defaults : ScriptableObject
{
	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public ES3SerializableSettings settings;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool addMgrToSceneAutomatically;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool autoUpdateReferences;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool addAllPrefabsToManager;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool logDebugInfo;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool logWarnings;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool logErrors;

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xE29078", Offset = "0xE29078", VA = "0xE29078")]
	public ES3Defaults()
	{
	}
}
[Token(Token = "0x200002B")]
public class ES3Settings : ICloneable
{
	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ES3Settings _defaults;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ES3Defaults _defaultSettingsScriptableObject;

	[Token(Token = "0x400007D")]
	private const string defaultSettingsPath = "ES3/ES3Defaults";

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static ES3Settings _unencryptedUncompressedSettings;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly string[] resourcesExtensions;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private ES3.Location _location;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string path;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ES3.EncryptionType encryptionType;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ES3.CompressionType compressionType;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string encryptionPassword;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ES3.Directory directory;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ES3.Format format;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool prettyPrint;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int bufferSize;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Encoding encoding;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool saveChildren;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public bool typeChecking;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public bool safeReflection;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3.ReferenceMode memberReferenceMode;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3.ReferenceMode referenceMode;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public int serializationDepthLimit;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public string[] assemblyNames;

	[Token(Token = "0x17000022")]
	public static ES3Defaults defaultSettingsScriptableObject
	{
		[Token(Token = "0x600019E")]
		[Address(RVA = "0xE2914C", Offset = "0xE2914C", VA = "0xE2914C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000023")]
	public static ES3Settings defaultSettings
	{
		[Token(Token = "0x600019F")]
		[Address(RVA = "0xE20444", Offset = "0xE20444", VA = "0xE20444")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000024")]
	internal static ES3Settings unencryptedUncompressedSettings
	{
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xE2925C", Offset = "0xE2925C", VA = "0xE2925C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000025")]
	public ES3.Location location
	{
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0xE1BE08", Offset = "0xE1BE08", VA = "0xE1BE08")]
		get
		{
			return default(ES3.Location);
		}
		[Token(Token = "0x60001A2")]
		[Address(RVA = "0xE29408", Offset = "0xE29408", VA = "0xE29408")]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public string FullPath
	{
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0xE1F4BC", Offset = "0xE1F4BC", VA = "0xE1F4BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xE1C7E4", Offset = "0xE1C7E4", VA = "0xE1C7E4")]
	public ES3Settings([Optional] string path, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xE297AC", Offset = "0xE297AC", VA = "0xE297AC")]
	public ES3Settings(string path, params Enum[] enums)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xE26A9C", Offset = "0xE26A9C", VA = "0xE26A9C")]
	public ES3Settings(params Enum[] enums)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xE297EC", Offset = "0xE297EC", VA = "0xE297EC")]
	public ES3Settings(ES3.EncryptionType encryptionType, string encryptionPassword)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xE29824", Offset = "0xE29824", VA = "0xE29824")]
	public ES3Settings(string path, ES3.EncryptionType encryptionType, string encryptionPassword, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xE294B0", Offset = "0xE294B0", VA = "0xE294B0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3Settings(bool applyDefaults)
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xE29410", Offset = "0xE29410", VA = "0xE29410")]
	private static bool IsAbsolute(string path)
	{
		return default(bool);
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xE257FC", Offset = "0xE257FC", VA = "0xE257FC", Slot = "4")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public object Clone()
	{
		return null;
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xE296F0", Offset = "0xE296F0", VA = "0xE296F0")]
	private void CopyInto(ES3Settings newSettings)
	{
	}
}
[Serializable]
[Token(Token = "0x200002C")]
[EditorBrowsable(EditorBrowsableState.Never)]
public class ES3SerializableSettings : ES3Settings
{
	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xE290F4", Offset = "0xE290F4", VA = "0xE290F4")]
	public ES3SerializableSettings()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xE29C4C", Offset = "0xE29C4C", VA = "0xE29C4C")]
	public ES3SerializableSettings(bool applyDefaults)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xE29CB0", Offset = "0xE29CB0", VA = "0xE29CB0")]
	public ES3SerializableSettings(string path)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xE1C6EC", Offset = "0xE1C6EC", VA = "0xE1C6EC")]
	public ES3SerializableSettings(string path, ES3.Location location)
	{
	}
}
[Token(Token = "0x200002D")]
public class ES3Ref
{
	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long id;

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xE29D24", Offset = "0xE29D24", VA = "0xE29D24")]
	public ES3Ref(long id)
	{
	}
}
[Token(Token = "0x200002E")]
public class ES3Cloud : ES3WebClass
{
	[Token(Token = "0x200002F")]
	[CompilerGenerated]
	private sealed class <Sync>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x1700002B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F9")]
			[Address(RVA = "0xE2C748", Offset = "0xE2C748", VA = "0xE2C748", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001FB")]
			[Address(RVA = "0xE2C790", Offset = "0xE2C790", VA = "0xE2C790", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xE2A4F4", Offset = "0xE2A4F4", VA = "0xE2A4F4")]
		[DebuggerHidden]
		public <Sync>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xE2C600", Offset = "0xE2C600", VA = "0xE2C600", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xE2C604", Offset = "0xE2C604", VA = "0xE2C604", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xE2C750", Offset = "0xE2C750", VA = "0xE2C750", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000030")]
	[CompilerGenerated]
	private sealed class <UploadFile>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public long fileTimestamp;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string user;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string password;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte[] bytes;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000200")]
			[Address(RVA = "0xE2CB74", Offset = "0xE2CB74", VA = "0xE2CB74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000202")]
			[Address(RVA = "0xE2CBBC", Offset = "0xE2CBBC", VA = "0xE2CBBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xE2AE14", Offset = "0xE2AE14", VA = "0xE2AE14")]
		[DebuggerHidden]
		public <UploadFile>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xE2C798", Offset = "0xE2C798", VA = "0xE2C798", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0xE2C7B4", Offset = "0xE2C7B4", VA = "0xE2C7B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xE2CAC4", Offset = "0xE2CAC4", VA = "0xE2CAC4")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0xE2CB7C", Offset = "0xE2CB7C", VA = "0xE2CB7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000031")]
	[CompilerGenerated]
	private sealed class <DownloadFile>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3File es3File;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long timestamp;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000207")]
			[Address(RVA = "0xE2D054", Offset = "0xE2D054", VA = "0xE2D054", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000209")]
			[Address(RVA = "0xE2D09C", Offset = "0xE2D09C", VA = "0xE2D09C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0xE2B4A8", Offset = "0xE2B4A8", VA = "0xE2B4A8")]
		[DebuggerHidden]
		public <DownloadFile>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0xE2CBC4", Offset = "0xE2CBC4", VA = "0xE2CBC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0xE2CBE0", Offset = "0xE2CBE0", VA = "0xE2CBE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0xE2CFA4", Offset = "0xE2CFA4", VA = "0xE2CFA4")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0xE2D05C", Offset = "0xE2D05C", VA = "0xE2D05C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000032")]
	[CompilerGenerated]
	private sealed class <DownloadFile>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long timestamp;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600020E")]
			[Address(RVA = "0xE2D4F0", Offset = "0xE2D4F0", VA = "0xE2D4F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000210")]
			[Address(RVA = "0xE2D538", Offset = "0xE2D538", VA = "0xE2D538", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0xE2B4D0", Offset = "0xE2B4D0", VA = "0xE2B4D0")]
		[DebuggerHidden]
		public <DownloadFile>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0xE2D0A4", Offset = "0xE2D0A4", VA = "0xE2D0A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0xE2D0C0", Offset = "0xE2D0C0", VA = "0xE2D0C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0xE2D440", Offset = "0xE2D440", VA = "0xE2D440")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0xE2D4F8", Offset = "0xE2D4F8", VA = "0xE2D4F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000033")]
	[CompilerGenerated]
	private sealed class <DeleteFile>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000215")]
			[Address(RVA = "0xE2D880", Offset = "0xE2D880", VA = "0xE2D880", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000217")]
			[Address(RVA = "0xE2D8C8", Offset = "0xE2D8C8", VA = "0xE2D8C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0xE2B9AC", Offset = "0xE2B9AC", VA = "0xE2B9AC")]
		[DebuggerHidden]
		public <DeleteFile>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0xE2D540", Offset = "0xE2D540", VA = "0xE2D540", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0xE2D55C", Offset = "0xE2D55C", VA = "0xE2D55C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0xE2D7D0", Offset = "0xE2D7D0", VA = "0xE2D7D0")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0xE2D888", Offset = "0xE2D888", VA = "0xE2D888", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000034")]
	[CompilerGenerated]
	private sealed class <RenameFile>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Settings newSettings;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string user;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string password;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600021C")]
			[Address(RVA = "0xE2DC50", Offset = "0xE2DC50", VA = "0xE2DC50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600021E")]
			[Address(RVA = "0xE2DC98", Offset = "0xE2DC98", VA = "0xE2DC98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0xE2BF0C", Offset = "0xE2BF0C", VA = "0xE2BF0C")]
		[DebuggerHidden]
		public <RenameFile>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0xE2D8D0", Offset = "0xE2D8D0", VA = "0xE2D8D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0xE2D8EC", Offset = "0xE2D8EC", VA = "0xE2D8EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0xE2DBA0", Offset = "0xE2DBA0", VA = "0xE2DBA0")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0xE2DC58", Offset = "0xE2DC58", VA = "0xE2DC58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000035")]
	[CompilerGenerated]
	private sealed class <DownloadFilenames>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string user;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string password;

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000037")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000223")]
			[Address(RVA = "0xE2E02C", Offset = "0xE2E02C", VA = "0xE2E02C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000225")]
			[Address(RVA = "0xE2E074", Offset = "0xE2E074", VA = "0xE2E074", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0xE2BFD8", Offset = "0xE2BFD8", VA = "0xE2BFD8")]
		[DebuggerHidden]
		public <DownloadFilenames>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0xE2DCA0", Offset = "0xE2DCA0", VA = "0xE2DCA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0xE2DCBC", Offset = "0xE2DCBC", VA = "0xE2DCBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0xE2DF7C", Offset = "0xE2DF7C", VA = "0xE2DF7C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0xE2E034", Offset = "0xE2E034", VA = "0xE2E034", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000036")]
	[CompilerGenerated]
	private sealed class <SearchFilenames>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string user;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string password;

		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string searchPattern;

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000039")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600022A")]
			[Address(RVA = "0xE2E450", Offset = "0xE2E450", VA = "0xE2E450", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600022C")]
			[Address(RVA = "0xE2E498", Offset = "0xE2E498", VA = "0xE2E498", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0xE2C0C0", Offset = "0xE2C0C0", VA = "0xE2C0C0")]
		[DebuggerHidden]
		public <SearchFilenames>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0xE2E07C", Offset = "0xE2E07C", VA = "0xE2E07C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0xE2E098", Offset = "0xE2E098", VA = "0xE2E098", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xE2E3A0", Offset = "0xE2E3A0", VA = "0xE2E3A0")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0xE2E458", Offset = "0xE2E458", VA = "0xE2E458", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000037")]
	[CompilerGenerated]
	private sealed class <DownloadTimestamp>d__70 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700003B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000231")]
			[Address(RVA = "0xE2E82C", Offset = "0xE2E82C", VA = "0xE2E82C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000233")]
			[Address(RVA = "0xE2E874", Offset = "0xE2E874", VA = "0xE2E874", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0xE2C59C", Offset = "0xE2C59C", VA = "0xE2C59C")]
		[DebuggerHidden]
		public <DownloadTimestamp>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0xE2E4A0", Offset = "0xE2E4A0", VA = "0xE2E4A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0xE2E4BC", Offset = "0xE2E4BC", VA = "0xE2E4BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0xE2E77C", Offset = "0xE2E77C", VA = "0xE2E77C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0xE2E834", Offset = "0xE2E834", VA = "0xE2E834", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int timeout;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Encoding encoding;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private byte[] _data;

	[Token(Token = "0x17000027")]
	public byte[] data
	{
		[Token(Token = "0x60001B5")]
		[Address(RVA = "0xE29E00", Offset = "0xE29E00", VA = "0xE29E00")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000028")]
	public string text
	{
		[Token(Token = "0x60001B6")]
		[Address(RVA = "0xE29E08", Offset = "0xE29E08", VA = "0xE29E08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000029")]
	public string[] filenames
	{
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0xE29E40", Offset = "0xE29E40", VA = "0xE29E40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002A")]
	public DateTime timestamp
	{
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0xE29F04", Offset = "0xE29F04", VA = "0xE29F04")]
		get
		{
			return default(DateTime);
		}
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xE29D4C", Offset = "0xE29D4C", VA = "0xE29D4C")]
	public ES3Cloud(string url, string apiKey)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xE29D9C", Offset = "0xE29D9C", VA = "0xE29D9C")]
	public ES3Cloud(string url, string apiKey, int timeout)
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xE2A040", Offset = "0xE2A040", VA = "0xE2A040")]
	public IEnumerator Sync()
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xE2A180", Offset = "0xE2A180", VA = "0xE2A180")]
	public IEnumerator Sync(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xE2A210", Offset = "0xE2A210", VA = "0xE2A210")]
	public IEnumerator Sync(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xE2A2A4", Offset = "0xE2A2A4", VA = "0xE2A2A4")]
	public IEnumerator Sync(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xE2A330", Offset = "0xE2A330", VA = "0xE2A330")]
	public IEnumerator Sync(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xE2A3C4", Offset = "0xE2A3C4", VA = "0xE2A3C4")]
	public IEnumerator Sync(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xE2A464", Offset = "0xE2A464", VA = "0xE2A464")]
	public IEnumerator Sync(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xE2A0C0", Offset = "0xE2A0C0", VA = "0xE2A0C0")]
	[IteratorStateMachine(typeof(<Sync>d__20))]
	private IEnumerator Sync(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xE2A51C", Offset = "0xE2A51C", VA = "0xE2A51C")]
	public IEnumerator UploadFile()
	{
		return null;
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xE2A5F4", Offset = "0xE2A5F4", VA = "0xE2A5F4")]
	public IEnumerator UploadFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xE2A694", Offset = "0xE2A694", VA = "0xE2A694")]
	public IEnumerator UploadFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xE2A738", Offset = "0xE2A738", VA = "0xE2A738")]
	public IEnumerator UploadFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xE2A7D0", Offset = "0xE2A7D0", VA = "0xE2A7D0")]
	public IEnumerator UploadFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xE2A874", Offset = "0xE2A874", VA = "0xE2A874")]
	public IEnumerator UploadFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xE2A924", Offset = "0xE2A924", VA = "0xE2A924")]
	public IEnumerator UploadFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xE2A9C0", Offset = "0xE2A9C0", VA = "0xE2A9C0")]
	public IEnumerator UploadFile(ES3File es3File)
	{
		return null;
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xE2AC54", Offset = "0xE2AC54", VA = "0xE2AC54")]
	public IEnumerator UploadFile(ES3File es3File, string user)
	{
		return null;
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xE2AD10", Offset = "0xE2AD10", VA = "0xE2AD10")]
	public IEnumerator UploadFile(ES3File es3File, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xE2A5AC", Offset = "0xE2A5AC", VA = "0xE2A5AC")]
	public IEnumerator UploadFile(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xE2ADBC", Offset = "0xE2ADBC", VA = "0xE2ADBC")]
	public IEnumerator UploadFile(byte[] bytes, ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xE2AB70", Offset = "0xE2AB70", VA = "0xE2AB70")]
	[IteratorStateMachine(typeof(<UploadFile>d__33))]
	private IEnumerator UploadFile(byte[] bytes, ES3Settings settings, string user, string password, long fileTimestamp)
	{
		return null;
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xE2AE3C", Offset = "0xE2AE3C", VA = "0xE2AE3C")]
	public IEnumerator DownloadFile()
	{
		return null;
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xE2AF88", Offset = "0xE2AF88", VA = "0xE2AF88")]
	public IEnumerator DownloadFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xE2B01C", Offset = "0xE2B01C", VA = "0xE2B01C")]
	public IEnumerator DownloadFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xE2B0B4", Offset = "0xE2B0B4", VA = "0xE2B0B4")]
	public IEnumerator DownloadFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xE2B144", Offset = "0xE2B144", VA = "0xE2B144")]
	public IEnumerator DownloadFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xE2B1DC", Offset = "0xE2B1DC", VA = "0xE2B1DC")]
	public IEnumerator DownloadFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xE2B280", Offset = "0xE2B280", VA = "0xE2B280")]
	public IEnumerator DownloadFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xE2B314", Offset = "0xE2B314", VA = "0xE2B314")]
	public IEnumerator DownloadFile(ES3File es3File)
	{
		return null;
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xE2B43C", Offset = "0xE2B43C", VA = "0xE2B43C")]
	public IEnumerator DownloadFile(ES3File es3File, string user)
	{
		return null;
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xE2B4A0", Offset = "0xE2B4A0", VA = "0xE2B4A0")]
	public IEnumerator DownloadFile(ES3File es3File, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xE2B374", Offset = "0xE2B374", VA = "0xE2B374")]
	[IteratorStateMachine(typeof(<DownloadFile>d__44))]
	private IEnumerator DownloadFile(ES3File es3File, string user, string password, long timestamp)
	{
		return null;
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xE2AEC0", Offset = "0xE2AEC0", VA = "0xE2AEC0")]
	[IteratorStateMachine(typeof(<DownloadFile>d__45))]
	private IEnumerator DownloadFile(ES3Settings settings, string user, string password, long timestamp)
	{
		return null;
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xE2B4F8", Offset = "0xE2B4F8", VA = "0xE2B4F8")]
	public IEnumerator DeleteFile()
	{
		return null;
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xE2B638", Offset = "0xE2B638", VA = "0xE2B638")]
	public IEnumerator DeleteFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xE2B6C8", Offset = "0xE2B6C8", VA = "0xE2B6C8")]
	public IEnumerator DeleteFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xE2B75C", Offset = "0xE2B75C", VA = "0xE2B75C")]
	public IEnumerator DeleteFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xE2B7E8", Offset = "0xE2B7E8", VA = "0xE2B7E8")]
	public IEnumerator DeleteFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xE2B87C", Offset = "0xE2B87C", VA = "0xE2B87C")]
	public IEnumerator DeleteFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xE2B91C", Offset = "0xE2B91C", VA = "0xE2B91C")]
	public IEnumerator DeleteFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xE2B578", Offset = "0xE2B578", VA = "0xE2B578")]
	[IteratorStateMachine(typeof(<DeleteFile>d__53))]
	private IEnumerator DeleteFile(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xE2B9D4", Offset = "0xE2B9D4", VA = "0xE2B9D4")]
	public IEnumerator RenameFile(string filePath, string newFilePath)
	{
		return null;
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xE2BB5C", Offset = "0xE2BB5C", VA = "0xE2BB5C")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xE2BC1C", Offset = "0xE2BC1C", VA = "0xE2BC1C")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xE2BCCC", Offset = "0xE2BCCC", VA = "0xE2BCCC")]
	public IEnumerator RenameFile(string filePath, string newFilePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xE2BD8C", Offset = "0xE2BD8C", VA = "0xE2BD8C")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xE2BE50", Offset = "0xE2BE50", VA = "0xE2BE50")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xE2BA88", Offset = "0xE2BA88", VA = "0xE2BA88")]
	[IteratorStateMachine(typeof(<RenameFile>d__60))]
	private IEnumerator RenameFile(ES3Settings settings, ES3Settings newSettings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xE2BF34", Offset = "0xE2BF34", VA = "0xE2BF34")]
	[IteratorStateMachine(typeof(<DownloadFilenames>d__61))]
	public IEnumerator DownloadFilenames(string user = "", string password = "")
	{
		return null;
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xE2C000", Offset = "0xE2C000", VA = "0xE2C000")]
	[IteratorStateMachine(typeof(<SearchFilenames>d__62))]
	public IEnumerator SearchFilenames(string searchPattern, string user = "", string password = "")
	{
		return null;
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xE2C0E8", Offset = "0xE2C0E8", VA = "0xE2C0E8")]
	public IEnumerator DownloadTimestamp()
	{
		return null;
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xE2C228", Offset = "0xE2C228", VA = "0xE2C228")]
	public IEnumerator DownloadTimestamp(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xE2C2B8", Offset = "0xE2C2B8", VA = "0xE2C2B8")]
	public IEnumerator DownloadTimestamp(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xE2C34C", Offset = "0xE2C34C", VA = "0xE2C34C")]
	public IEnumerator DownloadTimestamp(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xE2C3D8", Offset = "0xE2C3D8", VA = "0xE2C3D8")]
	public IEnumerator DownloadTimestamp(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xE2C46C", Offset = "0xE2C46C", VA = "0xE2C46C")]
	public IEnumerator DownloadTimestamp(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xE2C50C", Offset = "0xE2C50C", VA = "0xE2C50C")]
	public IEnumerator DownloadTimestamp(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xE2C168", Offset = "0xE2C168", VA = "0xE2C168")]
	[IteratorStateMachine(typeof(<DownloadTimestamp>d__70))]
	private IEnumerator DownloadTimestamp(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xE2AA78", Offset = "0xE2AA78", VA = "0xE2AA78")]
	private long DateTimeToUnixTimestamp(DateTime dt)
	{
		return default(long);
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xE2C5C4", Offset = "0xE2C5C4", VA = "0xE2C5C4")]
	private long GetFileTimestamp(ES3Settings settings)
	{
		return default(long);
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xE2C5DC", Offset = "0xE2C5DC", VA = "0xE2C5DC", Slot = "4")]
	protected override void Reset()
	{
	}
}
[Token(Token = "0x2000038")]
public abstract class ES3Writer : IDisposable
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected HashSet<string> keysToDelete;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal bool writeHeaderAndFooter;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	internal bool overwriteKeys;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected int serializationDepth;

	[Token(Token = "0x6000234")]
	internal abstract void WriteNull();

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xE2E87C", Offset = "0xE2E87C", VA = "0xE2E87C", Slot = "6")]
	internal virtual void StartWriteFile()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xE2E88C", Offset = "0xE2E88C", VA = "0xE2E88C", Slot = "7")]
	internal virtual void EndWriteFile()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xE2E89C", Offset = "0xE2E89C", VA = "0xE2E89C", Slot = "8")]
	internal virtual void StartWriteObject(string name)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xE2E8AC", Offset = "0xE2E8AC", VA = "0xE2E8AC", Slot = "9")]
	internal virtual void EndWriteObject(string name)
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xE2E8BC", Offset = "0xE2E8BC", VA = "0xE2E8BC", Slot = "10")]
	internal virtual void StartWriteProperty(string name)
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xE2E984", Offset = "0xE2E984", VA = "0xE2E984", Slot = "11")]
	internal virtual void EndWriteProperty(string name)
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xE2E988", Offset = "0xE2E988", VA = "0xE2E988", Slot = "12")]
	internal virtual void StartWriteCollection()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xE2E998", Offset = "0xE2E998", VA = "0xE2E998", Slot = "13")]
	internal virtual void EndWriteCollection()
	{
	}

	[Token(Token = "0x600023D")]
	internal abstract void StartWriteCollectionItem(int index);

	[Token(Token = "0x600023E")]
	internal abstract void EndWriteCollectionItem(int index);

	[Token(Token = "0x600023F")]
	internal abstract void StartWriteDictionary();

	[Token(Token = "0x6000240")]
	internal abstract void EndWriteDictionary();

	[Token(Token = "0x6000241")]
	internal abstract void StartWriteDictionaryKey(int index);

	[Token(Token = "0x6000242")]
	internal abstract void EndWriteDictionaryKey(int index);

	[Token(Token = "0x6000243")]
	internal abstract void StartWriteDictionaryValue(int index);

	[Token(Token = "0x6000244")]
	internal abstract void EndWriteDictionaryValue(int index);

	[Token(Token = "0x6000245")]
	public abstract void Dispose();

	[Token(Token = "0x6000246")]
	internal abstract void WriteRawProperty(string name, byte[] bytes);

	[Token(Token = "0x6000247")]
	internal abstract void WritePrimitive(int value);

	[Token(Token = "0x6000248")]
	internal abstract void WritePrimitive(float value);

	[Token(Token = "0x6000249")]
	internal abstract void WritePrimitive(bool value);

	[Token(Token = "0x600024A")]
	internal abstract void WritePrimitive(decimal value);

	[Token(Token = "0x600024B")]
	internal abstract void WritePrimitive(double value);

	[Token(Token = "0x600024C")]
	internal abstract void WritePrimitive(long value);

	[Token(Token = "0x600024D")]
	internal abstract void WritePrimitive(ulong value);

	[Token(Token = "0x600024E")]
	internal abstract void WritePrimitive(uint value);

	[Token(Token = "0x600024F")]
	internal abstract void WritePrimitive(byte value);

	[Token(Token = "0x6000250")]
	internal abstract void WritePrimitive(sbyte value);

	[Token(Token = "0x6000251")]
	internal abstract void WritePrimitive(short value);

	[Token(Token = "0x6000252")]
	internal abstract void WritePrimitive(ushort value);

	[Token(Token = "0x6000253")]
	internal abstract void WritePrimitive(char value);

	[Token(Token = "0x6000254")]
	internal abstract void WritePrimitive(string value);

	[Token(Token = "0x6000255")]
	internal abstract void WritePrimitive(byte[] value);

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xE2E9A8", Offset = "0xE2E9A8", VA = "0xE2E9A8")]
	protected ES3Writer(ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys)
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xE2EA7C", Offset = "0xE2EA7C", VA = "0xE2EA7C", Slot = "39")]
	internal virtual void Write(string key, Type type, byte[] value)
	{
	}

	[Token(Token = "0x6000258")]
	public virtual void Write<T>(string key, object value)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xE2EBF8", Offset = "0xE2EBF8", VA = "0xE2EBF8", Slot = "41")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(Type type, string key, object value)
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xE2ED28", Offset = "0xE2ED28", VA = "0xE2ED28", Slot = "42")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(object value, ES3.ReferenceMode memberReferenceMode = ES3.ReferenceMode.ByRef)
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xE2EDE8", Offset = "0xE2EDE8", VA = "0xE2EDE8", Slot = "43")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(object value, ES3Type type, ES3.ReferenceMode memberReferenceMode = ES3.ReferenceMode.ByRef)
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xE2F3E0", Offset = "0xE2F3E0", VA = "0xE2F3E0", Slot = "44")]
	internal virtual void WriteRef(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xE2F548", Offset = "0xE2F548", VA = "0xE2F548", Slot = "45")]
	public virtual void WriteProperty(string name, object value)
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xE2F570", Offset = "0xE2F570", VA = "0xE2F570", Slot = "46")]
	public virtual void WriteProperty(string name, object value, ES3.ReferenceMode memberReferenceMode)
	{
	}

	[Token(Token = "0x600025F")]
	public virtual void WriteProperty<T>(string name, object value)
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xE2F6A0", Offset = "0xE2F6A0", VA = "0xE2F6A0", Slot = "48")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WriteProperty(string name, object value, ES3Type type)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xE2F6C8", Offset = "0xE2F6C8", VA = "0xE2F6C8", Slot = "49")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WriteProperty(string name, object value, ES3Type type, ES3.ReferenceMode memberReferenceMode)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xE2F754", Offset = "0xE2F754", VA = "0xE2F754", Slot = "50")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WritePropertyByRef(string name, UnityEngine.Object value)
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xE2F860", Offset = "0xE2F860", VA = "0xE2F860")]
	public void WritePrivateProperty(string name, object objectContainingProperty)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xE2FA64", Offset = "0xE2FA64", VA = "0xE2FA64")]
	public void WritePrivateField(string name, object objectContainingField)
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xE2FC68", Offset = "0xE2FC68", VA = "0xE2FC68")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateProperty(string name, object objectContainingProperty, ES3Type type)
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xE2FE24", Offset = "0xE2FE24", VA = "0xE2FE24")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateField(string name, object objectContainingField, ES3Type type)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xE2FFE0", Offset = "0xE2FFE0", VA = "0xE2FFE0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivatePropertyByRef(string name, object objectContainingProperty)
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xE301E0", Offset = "0xE301E0", VA = "0xE301E0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateFieldByRef(string name, object objectContainingField)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xE2EB64", Offset = "0xE2EB64", VA = "0xE2EB64")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WriteType(Type type)
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xE303E0", Offset = "0xE303E0", VA = "0xE303E0")]
	public static ES3Writer Create(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xE22F80", Offset = "0xE22F80", VA = "0xE22F80")]
	public static ES3Writer Create(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xE25E70", Offset = "0xE25E70", VA = "0xE25E70")]
	internal static ES3Writer Create(ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys, bool append)
	{
		return null;
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xE1FCC8", Offset = "0xE1FCC8", VA = "0xE1FCC8")]
	internal static ES3Writer Create(Stream stream, ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys)
	{
		return null;
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xE2F5F4", Offset = "0xE2F5F4", VA = "0xE2F5F4")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	protected bool SerializationDepthLimitExceeded()
	{
		return default(bool);
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xE3045C", Offset = "0xE3045C", VA = "0xE3045C", Slot = "51")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void MarkKeyForDeletion(string key)
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xE304B4", Offset = "0xE304B4", VA = "0xE304B4")]
	protected void Merge()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xE3061C", Offset = "0xE3061C", VA = "0xE3061C")]
	protected void Merge(ES3Reader reader)
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xE30984", Offset = "0xE30984", VA = "0xE30984", Slot = "52")]
	public virtual void Save()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xE30998", Offset = "0xE30998", VA = "0xE30998", Slot = "53")]
	public virtual void Save(bool overwriteKeys)
	{
	}
}
[Token(Token = "0x2000039")]
public class ES3XMLWriter
{
	[Token(Token = "0x6000274")]
	[Address(RVA = "0xE30A5C", Offset = "0xE30A5C", VA = "0xE30A5C")]
	public ES3XMLWriter()
	{
	}
}
namespace RootMotion
{
	[Token(Token = "0x200003A")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page3.html")]
	[AddComponentMenu("Scripts/RootMotion/Baker")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200003B")]
		public enum Mode
		{
			[Token(Token = "0x40000EF")]
			AnimationClips,
			[Token(Token = "0x40000F0")]
			AnimationStates,
			[Token(Token = "0x40000F1")]
			PlayableDirector,
			[Token(Token = "0x40000F2")]
			Realtime
		}

		[Token(Token = "0x200003C")]
		public delegate void BakerDelegate(AnimationClip clip, float time);

		[Serializable]
		[Token(Token = "0x200003D")]
		public class ClipSettings
		{
			[Serializable]
			[Token(Token = "0x200003E")]
			public enum BasedUponRotation
			{
				[Token(Token = "0x4000100")]
				Original,
				[Token(Token = "0x4000101")]
				BodyOrientation
			}

			[Serializable]
			[Token(Token = "0x200003F")]
			public enum BasedUponY
			{
				[Token(Token = "0x4000103")]
				Original,
				[Token(Token = "0x4000104")]
				CenterOfMass,
				[Token(Token = "0x4000105")]
				Feet
			}

			[Serializable]
			[Token(Token = "0x2000040")]
			public enum BasedUponXZ
			{
				[Token(Token = "0x4000107")]
				Original,
				[Token(Token = "0x4000108")]
				CenterOfMass
			}

			[Token(Token = "0x40000F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool loopTime;

			[Token(Token = "0x40000F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool loopBlend;

			[Token(Token = "0x40000F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float cycleOffset;

			[Token(Token = "0x40000F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool loopBlendOrientation;

			[Token(Token = "0x40000F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public BasedUponRotation basedUponRotation;

			[Token(Token = "0x40000F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float orientationOffsetY;

			[Token(Token = "0x40000F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool loopBlendPositionY;

			[Token(Token = "0x40000FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BasedUponY basedUponY;

			[Token(Token = "0x40000FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float level;

			[Token(Token = "0x40000FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool loopBlendPositionXZ;

			[Token(Token = "0x40000FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public BasedUponXZ basedUponXZ;

			[Token(Token = "0x40000FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool mirror;

			[Token(Token = "0x600028C")]
			[Address(RVA = "0xE30E70", Offset = "0xE30E70", VA = "0xE30E70")]
			public ClipSettings()
			{
			}
		}

		[Token(Token = "0x40000DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(1f, 90f)]
		[Tooltip("In AnimationClips, AnimationStates or PlayableDirector mode - the frame rate at which the animation clip will be sampled. In Realtime mode - the frame rate at which the pose will be sampled. With the latter, the frame rate is not guaranteed if the player is not able to reach it.")]
		public int frameRate;

		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 0.1f)]
		[Tooltip("Maximum allowed error for keyframe reduction.")]
		public float keyReductionError;

		[Token(Token = "0x40000DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("AnimationClips mode can be used to bake a batch of AnimationClips directly without the need of setting up an AnimatorController. AnimationStates mode is useful for when you need to set up a more complex rig with layers and AvatarMasks in Mecanim. PlayableDirector mode bakes a Timeline. Realtime mode is for continuous baking of gameplay, ragdoll phsysics or PuppetMaster dynamics.")]
		public Mode mode;

		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("AnimationClips to bake.")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x40000E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The name of the AnimationStates to bake (must be on the base layer) in the Animator above (Right-click on this component header and select 'Find Animation States' to have Baker fill those in automatically, required that state names match with the names of the clips used in them).")]
		public string[] animationStates;

		[Token(Token = "0x40000E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The folder to save the baked AnimationClips to.")]
		public string saveToFolder;

		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("String that will be added to each clip or animation state name for the saved clip. For example if your animation state/clip names were 'Idle' and 'Walk', then with '_Baked' as Append Name, the Baker will create 'Idle_Baked' and 'Walk_Baked' animation clips.")]
		public string appendName;

		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Name of the created AnimationClip file.")]
		public string saveName;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BakerDelegate OnStartClip;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public BakerDelegate OnUpdateClip;

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If enabled, baked clips will have the same AnimationClipSettings as the clips used for baking. If disabled, clip settings from below will be applied to all the baked clips.")]
		public bool inheritClipSettings;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("AnimationClipSettings applied to the baked animation clip.")]
		public ClipSettings clipSettings;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected bool addLoopFrame;

		[Token(Token = "0x1700003D")]
		public bool isBaking
		{
			[Token(Token = "0x6000279")]
			[Address(RVA = "0xE30B74", Offset = "0xE30B74", VA = "0xE30B74")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600027A")]
			[Address(RVA = "0xE30B7C", Offset = "0xE30B7C", VA = "0xE30B7C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700003E")]
		public float bakingProgress
		{
			[Token(Token = "0x600027B")]
			[Address(RVA = "0xE30B88", Offset = "0xE30B88", VA = "0xE30B88")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600027C")]
			[Address(RVA = "0xE30B90", Offset = "0xE30B90", VA = "0xE30B90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700003F")]
		protected float clipLength
		{
			[Token(Token = "0x6000282")]
			[Address(RVA = "0xE30B98", Offset = "0xE30B98", VA = "0xE30B98")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000283")]
			[Address(RVA = "0xE30BA0", Offset = "0xE30BA0", VA = "0xE30BA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0xE30A64", Offset = "0xE30A64", VA = "0xE30A64")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0xE30AA8", Offset = "0xE30AA8", VA = "0xE30AA8")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0xE30AEC", Offset = "0xE30AEC", VA = "0xE30AEC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0xE30B30", Offset = "0xE30B30", VA = "0xE30B30")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600027D")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x600027E")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x600027F")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x6000280")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x6000281")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x6000284")]
		[Address(RVA = "0xE30BA8", Offset = "0xE30BA8", VA = "0xE30BA8")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0xE30BAC", Offset = "0xE30BAC", VA = "0xE30BAC")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0xE30BB0", Offset = "0xE30BB0", VA = "0xE30BB0")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0xE30BB4", Offset = "0xE30BB4", VA = "0xE30BB4")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x2000041")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[Tooltip("If true, produced AnimationClips will be marked as Legacy and usable with the Legacy animation system.")]
		public bool markAsLegacy;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Root Transform of the hierarchy to bake.")]
		public Transform root;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Root Node used for root motion.")]
		public Transform rootNode;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("List of Transforms to ignore, rotation curves will not be baked for these Transforms.")]
		public Transform[] ignoreList;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("LocalPosition curves will be baked for these Transforms only. If you are baking a character, the pelvis bone should be added to this array.")]
		public Transform[] bakePositionList;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BakerTransform[] children;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BakerTransform rootChild;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int rootChildIndex;

		[Token(Token = "0x600028D")]
		[Address(RVA = "0xE30E78", Offset = "0xE30E78", VA = "0xE30E78")]
		private void Awake()
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0xE312BC", Offset = "0xE312BC", VA = "0xE312BC", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0xE312C4", Offset = "0xE312C4", VA = "0xE312C4", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xE31500", Offset = "0xE31500", VA = "0xE31500", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xE31764", Offset = "0xE31764", VA = "0xE31764", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0xE31A7C", Offset = "0xE31A7C", VA = "0xE31A7C", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xE310A4", Offset = "0xE310A4", VA = "0xE310A4")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xE3115C", Offset = "0xE3115C", VA = "0xE3115C")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0xE31CDC", Offset = "0xE31CDC", VA = "0xE31CDC")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x2000042")]
	public class TQ
	{
		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x6000296")]
		[Address(RVA = "0xE31D44", Offset = "0xE31D44", VA = "0xE31D44")]
		public TQ()
		{
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0xE31D4C", Offset = "0xE31D4C", VA = "0xE31D4C")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000043")]
	public class AvatarUtility
	{
		[Token(Token = "0x6000298")]
		[Address(RVA = "0xE31DB0", Offset = "0xE31DB0", VA = "0xE31DB0")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xE3200C", Offset = "0xE3200C", VA = "0xE3200C")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xE3267C", Offset = "0xE3267C", VA = "0xE3267C")]
		public static TQ WorldSpaceIKGoalToBone(TQ goalTQ, Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return null;
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xE32B44", Offset = "0xE32B44", VA = "0xE32B44")]
		public static TQ GetWorldSpaceIKGoal(BakerHumanoidQT ikQT, BakerHumanoidQT rootQT, float time, float humanScale)
		{
			return null;
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xE31FEC", Offset = "0xE31FEC", VA = "0xE31FEC")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xE32D30", Offset = "0xE32D30", VA = "0xE32D30")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x2000044")]
	public static class BakerUtilities
	{
		[Token(Token = "0x600029E")]
		[Address(RVA = "0xE32D38", Offset = "0xE32D38", VA = "0xE32D38")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0xE32D70", Offset = "0xE32D70", VA = "0xE32D70")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xE33134", Offset = "0xE33134", VA = "0xE33134")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xE33314", Offset = "0xE33314", VA = "0xE33314")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xE33318", Offset = "0xE33318", VA = "0xE33318")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000045")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x4000120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x4000122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x4000123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x4000124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0xE334AC", Offset = "0xE334AC", VA = "0xE334AC")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xE33810", Offset = "0xE33810", VA = "0xE33810")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xE339F8", Offset = "0xE339F8", VA = "0xE339F8")]
		public Quaternion EvaluateRotation(float time)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0xE33A88", Offset = "0xE33A88", VA = "0xE33A88")]
		public Vector3 EvaluatePosition(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0xE32C68", Offset = "0xE32C68", VA = "0xE32C68")]
		public TQ Evaluate(float time)
		{
			return null;
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xE33AFC", Offset = "0xE33AFC", VA = "0xE33AFC")]
		public void GetCurvesFromClip(AnimationClip clip, Animator animator)
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xE33678", Offset = "0xE33678", VA = "0xE33678")]
		public void Reset()
		{
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xE33B00", Offset = "0xE33B00", VA = "0xE33B00")]
		public void SetIKKeyframes(float time, Avatar avatar, Transform root, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xE33E90", Offset = "0xE33E90", VA = "0xE33E90")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xE33F80", Offset = "0xE33F80", VA = "0xE33F80")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xE34064", Offset = "0xE34064", VA = "0xE34064")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xE340CC", Offset = "0xE340CC", VA = "0xE340CC")]
		public void SetRootLoopFrame(float time)
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xE33FE8", Offset = "0xE33FE8", VA = "0xE33FE8")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xE340D0", Offset = "0xE340D0", VA = "0xE340D0")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xE34178", Offset = "0xE34178", VA = "0xE34178")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000046")]
	public class BakerMuscle
	{
		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xE34464", Offset = "0xE34464", VA = "0xE34464")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xE344D4", Offset = "0xE344D4", VA = "0xE344D4")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xE34F70", Offset = "0xE34F70", VA = "0xE34F70")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xE35018", Offset = "0xE35018", VA = "0xE35018")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xE34F08", Offset = "0xE34F08", VA = "0xE34F08")]
		public void Reset()
		{
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xE3510C", Offset = "0xE3510C", VA = "0xE3510C")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xE35148", Offset = "0xE35148", VA = "0xE35148")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000047")]
	public class BakerTransform
	{
		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xE31214", Offset = "0xE31214", VA = "0xE31214")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xE314EC", Offset = "0xE314EC", VA = "0xE314EC")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xE317C8", Offset = "0xE317C8", VA = "0xE317C8")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xE35150", Offset = "0xE35150", VA = "0xE35150")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xE31394", Offset = "0xE31394", VA = "0xE31394")]
		public void Reset()
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xE353D8", Offset = "0xE353D8", VA = "0xE353D8")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xE31AE8", Offset = "0xE31AE8", VA = "0xE31AE8")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xE3156C", Offset = "0xE3156C", VA = "0xE3156C")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000048")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[Tooltip("Should the hand IK curves be added to the animation? Disable this if the original hand positions are not important when using the clip on another character via Humanoid retargeting.")]
		public bool bakeHandIK;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 0.1f)]
		[Tooltip("Max keyframe reduction error for the Root.Q/T, LeftFoot IK and RightFoot IK channels. Having a larger error value for 'Key Reduction Error' and a smaller one for this enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public float IKKeyReductionError;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Frame rate divider for the muscle curves. If you have 'Frame Rate' set to 30, and this value set to 3, the muscle curves will be baked at 10 fps. Only the Root Q/T and Hand and Foot IK curves will be baked at 30. This enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		[Range(1f, 9f)]
		public int muscleFrameRateDiv;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float[] muscles;

		[Token(Token = "0x400013F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private HumanPose pose;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private HumanPoseHandler handler;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 bodyPosition;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Quaternion bodyRotation;

		[Token(Token = "0x4000143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int mN;

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xE35440", Offset = "0xE35440", VA = "0xE35440")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0xE359A0", Offset = "0xE359A0", VA = "0xE359A0", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xE359BC", Offset = "0xE359BC", VA = "0xE359BC", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xE35A94", Offset = "0xE35A94", VA = "0xE35A94", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xE35B50", Offset = "0xE35B50", VA = "0xE35B50", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xE35CF0", Offset = "0xE35CF0", VA = "0xE35CF0", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xE36014", Offset = "0xE36014", VA = "0xE36014")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xE360F4", Offset = "0xE360F4", VA = "0xE360F4")]
		public HumanoidBaker()
		{
		}
	}
	[Token(Token = "0x2000049")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200004A")]
		public enum UpdateMode
		{
			[Token(Token = "0x400016C")]
			Update,
			[Token(Token = "0x400016D")]
			FixedUpdate,
			[Token(Token = "0x400016E")]
			LateUpdate,
			[Token(Token = "0x400016F")]
			FixedLateUpdate
		}

		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Header("Position")]
		public bool smoothFollow;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 offset;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Rotation")]
		public float rotationSensitivity;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Distance")]
		public float distance;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Blocking")]
		public LayerMask blockingLayers;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float blockingOriginOffset;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 1f)]
		public float blockedOffset;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 targetDistance;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 position;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion rotation;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 smoothPosition;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastUp;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x17000040")]
		public float x
		{
			[Token(Token = "0x60002C9")]
			[Address(RVA = "0xE361A4", Offset = "0xE361A4", VA = "0xE361A4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002CA")]
			[Address(RVA = "0xE361AC", Offset = "0xE361AC", VA = "0xE361AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000041")]
		public float y
		{
			[Token(Token = "0x60002CB")]
			[Address(RVA = "0xE361B4", Offset = "0xE361B4", VA = "0xE361B4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002CC")]
			[Address(RVA = "0xE361BC", Offset = "0xE361BC", VA = "0xE361BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000042")]
		public float distanceTarget
		{
			[Token(Token = "0x60002CD")]
			[Address(RVA = "0xE361C4", Offset = "0xE361C4", VA = "0xE361C4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002CE")]
			[Address(RVA = "0xE361CC", Offset = "0xE361CC", VA = "0xE361CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000043")]
		private float zoomAdd
		{
			[Token(Token = "0x60002D8")]
			[Address(RVA = "0xE36C34", Offset = "0xE36C34", VA = "0xE36C34")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xE361D4", Offset = "0xE361D4", VA = "0xE361D4")]
		public void SetAngles(Quaternion rotation)
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0xE3620C", Offset = "0xE3620C", VA = "0xE3620C")]
		public void SetAngles(float yaw, float pitch)
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xE36214", Offset = "0xE36214", VA = "0xE36214", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xE3634C", Offset = "0xE3634C", VA = "0xE3634C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xE36394", Offset = "0xE36394", VA = "0xE36394", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xE363EC", Offset = "0xE363EC", VA = "0xE363EC", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xE36444", Offset = "0xE36444", VA = "0xE36444")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xE36378", Offset = "0xE36378", VA = "0xE36378")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0xE365D0", Offset = "0xE365D0", VA = "0xE365D0")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0xE36BF8", Offset = "0xE36BF8", VA = "0xE36BF8")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xE36CA0", Offset = "0xE36CA0", VA = "0xE36CA0")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x200004B")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xE36D68", Offset = "0xE36D68", VA = "0xE36D68")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xE36D94", Offset = "0xE36D94", VA = "0xE36D94")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xE36FB8", Offset = "0xE36FB8", VA = "0xE36FB8")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xE36FF4", Offset = "0xE36FF4", VA = "0xE36FF4")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200004C")]
	public enum Axis
	{
		[Token(Token = "0x4000176")]
		X,
		[Token(Token = "0x4000177")]
		Y,
		[Token(Token = "0x4000178")]
		Z
	}
	[Token(Token = "0x200004D")]
	public class AxisTools
	{
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xE37010", Offset = "0xE37010", VA = "0xE37010")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xE370F0", Offset = "0xE370F0", VA = "0xE370F0")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xE37128", Offset = "0xE37128", VA = "0xE37128")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xE37270", Offset = "0xE37270", VA = "0xE37270")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0xE37224", Offset = "0xE37224", VA = "0xE37224")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xE3736C", Offset = "0xE3736C", VA = "0xE3736C")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xE373B0", Offset = "0xE373B0", VA = "0xE373B0")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xE37670", Offset = "0xE37670", VA = "0xE37670")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200004E")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x200004F")]
		public class LimbOrientation
		{
			[Token(Token = "0x400017D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x400017E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x400017F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x60002EA")]
			[Address(RVA = "0xE379A4", Offset = "0xE379A4", VA = "0xE379A4")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x17000044")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x60002E8")]
			[Address(RVA = "0xE376EC", Offset = "0xE376EC", VA = "0xE376EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000045")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x60002E9")]
			[Address(RVA = "0xE37A18", Offset = "0xE37A18", VA = "0xE37A18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xE37678", Offset = "0xE37678", VA = "0xE37678")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x2000050")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x2000051")]
		public enum BoneType
		{
			[Token(Token = "0x4000193")]
			Unassigned,
			[Token(Token = "0x4000194")]
			Spine,
			[Token(Token = "0x4000195")]
			Head,
			[Token(Token = "0x4000196")]
			Arm,
			[Token(Token = "0x4000197")]
			Leg,
			[Token(Token = "0x4000198")]
			Tail,
			[Token(Token = "0x4000199")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x2000052")]
		public enum BoneSide
		{
			[Token(Token = "0x400019B")]
			Center,
			[Token(Token = "0x400019C")]
			Left,
			[Token(Token = "0x400019D")]
			Right
		}

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0xE37CD0", Offset = "0xE37CD0", VA = "0xE37CD0")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0xE37F9C", Offset = "0xE37F9C", VA = "0xE37F9C")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0xE381D8", Offset = "0xE381D8", VA = "0xE381D8")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xE3824C", Offset = "0xE3824C", VA = "0xE3824C")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xE382E0", Offset = "0xE382E0", VA = "0xE382E0")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xE37E84", Offset = "0xE37E84", VA = "0xE37E84")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xE38150", Offset = "0xE38150", VA = "0xE38150")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xE38A18", Offset = "0xE38A18", VA = "0xE38A18")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xE38870", Offset = "0xE38870", VA = "0xE38870")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xE38944", Offset = "0xE38944", VA = "0xE38944")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xE384C8", Offset = "0xE384C8", VA = "0xE384C8")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0xE38564", Offset = "0xE38564", VA = "0xE38564")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0xE38600", Offset = "0xE38600", VA = "0xE38600")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xE3869C", Offset = "0xE3869C", VA = "0xE3869C")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xE38738", Offset = "0xE38738", VA = "0xE38738")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0xE387D4", Offset = "0xE387D4", VA = "0xE387D4")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xE38C00", Offset = "0xE38C00", VA = "0xE38C00")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xE383F4", Offset = "0xE383F4", VA = "0xE383F4")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0xE38B7C", Offset = "0xE38B7C", VA = "0xE38B7C")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xE38C60", Offset = "0xE38C60", VA = "0xE38C60")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xE38D20", Offset = "0xE38D20", VA = "0xE38D20")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0xE38B08", Offset = "0xE38B08", VA = "0xE38B08")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0xE38A98", Offset = "0xE38A98", VA = "0xE38A98")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000053")]
	public class BipedReferences
	{
		[Token(Token = "0x2000054")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x40001AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x40001B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000048")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x600031C")]
				[Address(RVA = "0xE3F7D8", Offset = "0xE3F7D8", VA = "0xE3F7D8")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x600031B")]
			[Address(RVA = "0xE3F7C4", Offset = "0xE3F7C4", VA = "0xE3F7C4")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x17000046")]
		public virtual bool isFilled
		{
			[Token(Token = "0x6000303")]
			[Address(RVA = "0xE3BB10", Offset = "0xE3BB10", VA = "0xE3BB10", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000047")]
		public bool isEmpty
		{
			[Token(Token = "0x6000304")]
			[Address(RVA = "0xE3BE6C", Offset = "0xE3BE6C", VA = "0xE3BE6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0xE3BE7C", Offset = "0xE3BE7C", VA = "0xE3BE7C", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0xE3C208", Offset = "0xE3C208", VA = "0xE3C208", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xE3C598", Offset = "0xE3C598", VA = "0xE3C598")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xE3CCBC", Offset = "0xE3CCBC", VA = "0xE3CCBC")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xE3C82C", Offset = "0xE3C82C", VA = "0xE3C82C")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xE3D53C", Offset = "0xE3D53C", VA = "0xE3D53C")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xE3D628", Offset = "0xE3D628", VA = "0xE3D628")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0xE3E144", Offset = "0xE3E144", VA = "0xE3E144")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0xE3DF50", Offset = "0xE3DF50", VA = "0xE3DF50")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0xE3DCF0", Offset = "0xE3DCF0", VA = "0xE3DCF0")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0xE3D6C4", Offset = "0xE3D6C4", VA = "0xE3D6C4")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0xE3E044", Offset = "0xE3E044", VA = "0xE3E044")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0xE3E224", Offset = "0xE3E224", VA = "0xE3E224")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0xE3EDCC", Offset = "0xE3EDCC", VA = "0xE3EDCC")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0xE3E874", Offset = "0xE3E874", VA = "0xE3E874")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000314")]
		[Address(RVA = "0xE3F118", Offset = "0xE3F118", VA = "0xE3F118")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0xE3EBD4", Offset = "0xE3EBD4", VA = "0xE3EBD4")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0xE3F120", Offset = "0xE3F120", VA = "0xE3F120")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0xE3F128", Offset = "0xE3F128", VA = "0xE3F128")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0xE3F2E8", Offset = "0xE3F2E8", VA = "0xE3F2E8")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0xE3F75C", Offset = "0xE3F75C", VA = "0xE3F75C")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0xE3C7AC", Offset = "0xE3C7AC", VA = "0xE3C7AC")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x2000055")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x600031D")]
		[Address(RVA = "0xE3F7E0", Offset = "0xE3F7E0", VA = "0xE3F7E0")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x2000056")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x600031E")]
		[Address(RVA = "0xE3F7E8", Offset = "0xE3F7E8", VA = "0xE3F7E8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0xE3F8E0", Offset = "0xE3F8E0", VA = "0xE3F8E0")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x2000057")]
	public class Hierarchy
	{
		[Token(Token = "0x6000320")]
		[Address(RVA = "0xE3F6D8", Offset = "0xE3F6D8", VA = "0xE3F6D8")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0xE3F5CC", Offset = "0xE3F5CC", VA = "0xE3F5CC")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0xE3D828", Offset = "0xE3D828", VA = "0xE3D828")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0xE3DE40", Offset = "0xE3DE40", VA = "0xE3DE40")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0xE3DAA8", Offset = "0xE3DAA8", VA = "0xE3DAA8")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0xE3F8F0", Offset = "0xE3F8F0", VA = "0xE3F8F0")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0xE3D958", Offset = "0xE3D958", VA = "0xE3D958")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0xE3F9E4", Offset = "0xE3F9E4", VA = "0xE3F9E4")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0xE3FD50", Offset = "0xE3FD50", VA = "0xE3FD50")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xE3FB48", Offset = "0xE3FB48", VA = "0xE3FB48")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0xE3FED8", Offset = "0xE3FED8", VA = "0xE3FED8")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x2000058")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xE3FEE0", Offset = "0xE3FEE0", VA = "0xE3FEE0")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0xE3FF68", Offset = "0xE3FF68", VA = "0xE3FF68")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000059")]
	public enum InterpolationMode
	{
		[Token(Token = "0x40001B7")]
		None,
		[Token(Token = "0x40001B8")]
		InOutCubic,
		[Token(Token = "0x40001B9")]
		InOutQuintic,
		[Token(Token = "0x40001BA")]
		InOutSine,
		[Token(Token = "0x40001BB")]
		InQuintic,
		[Token(Token = "0x40001BC")]
		InQuartic,
		[Token(Token = "0x40001BD")]
		InCubic,
		[Token(Token = "0x40001BE")]
		InQuadratic,
		[Token(Token = "0x40001BF")]
		InElastic,
		[Token(Token = "0x40001C0")]
		InElasticSmall,
		[Token(Token = "0x40001C1")]
		InElasticBig,
		[Token(Token = "0x40001C2")]
		InSine,
		[Token(Token = "0x40001C3")]
		InBack,
		[Token(Token = "0x40001C4")]
		OutQuintic,
		[Token(Token = "0x40001C5")]
		OutQuartic,
		[Token(Token = "0x40001C6")]
		OutCubic,
		[Token(Token = "0x40001C7")]
		OutInCubic,
		[Token(Token = "0x40001C8")]
		OutInQuartic,
		[Token(Token = "0x40001C9")]
		OutElastic,
		[Token(Token = "0x40001CA")]
		OutElasticSmall,
		[Token(Token = "0x40001CB")]
		OutElasticBig,
		[Token(Token = "0x40001CC")]
		OutSine,
		[Token(Token = "0x40001CD")]
		OutBack,
		[Token(Token = "0x40001CE")]
		OutBackCubic,
		[Token(Token = "0x40001CF")]
		OutBackQuartic,
		[Token(Token = "0x40001D0")]
		BackInCubic,
		[Token(Token = "0x40001D1")]
		BackInQuartic
	}
	[Token(Token = "0x200005A")]
	public class Interp
	{
		[Token(Token = "0x600032D")]
		[Address(RVA = "0xE3FFF4", Offset = "0xE3FFF4", VA = "0xE3FFF4")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0xE4097C", Offset = "0xE4097C", VA = "0xE4097C")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0xE409EC", Offset = "0xE409EC", VA = "0xE409EC")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0xE403F4", Offset = "0xE403F4", VA = "0xE403F4")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0xE40400", Offset = "0xE40400", VA = "0xE40400")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0xE40424", Offset = "0xE40424", VA = "0xE40424")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0xE40460", Offset = "0xE40460", VA = "0xE40460")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0xE40478", Offset = "0xE40478", VA = "0xE40478")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0xE4048C", Offset = "0xE4048C", VA = "0xE4048C")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0xE404A0", Offset = "0xE404A0", VA = "0xE404A0")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0xE404B0", Offset = "0xE404B0", VA = "0xE404B0")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0xE404F8", Offset = "0xE404F8", VA = "0xE404F8")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0xE40530", Offset = "0xE40530", VA = "0xE40530")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0xE40558", Offset = "0xE40558", VA = "0xE40558")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0xE40A5C", Offset = "0xE40A5C", VA = "0xE40A5C")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xE4058C", Offset = "0xE4058C", VA = "0xE4058C")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0xE405B4", Offset = "0xE405B4", VA = "0xE405B4")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0xE405E4", Offset = "0xE405E4", VA = "0xE405E4")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0xE40618", Offset = "0xE40618", VA = "0xE40618")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0xE4065C", Offset = "0xE4065C", VA = "0xE4065C")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0xE406C0", Offset = "0xE406C0", VA = "0xE406C0")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0xE40724", Offset = "0xE40724", VA = "0xE40724")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0xE40778", Offset = "0xE40778", VA = "0xE40778")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0xE407CC", Offset = "0xE407CC", VA = "0xE407CC")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0xE40804", Offset = "0xE40804", VA = "0xE40804")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0xE40838", Offset = "0xE40838", VA = "0xE40838")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0xE40A90", Offset = "0xE40A90", VA = "0xE40A90")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0xE4087C", Offset = "0xE4087C", VA = "0xE4087C")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0xE4090C", Offset = "0xE4090C", VA = "0xE4090C")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0xE4093C", Offset = "0xE4093C", VA = "0xE4093C")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xE40B20", Offset = "0xE40B20", VA = "0xE40B20")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x200005B")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x600034C")]
		[Address(RVA = "0xE40B28", Offset = "0xE40B28", VA = "0xE40B28")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xE40B74", Offset = "0xE40B74", VA = "0xE40B74")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0xE40C30", Offset = "0xE40C30", VA = "0xE40C30")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0xE40B88", Offset = "0xE40B88", VA = "0xE40B88")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0xE40C44", Offset = "0xE40C44", VA = "0xE40C44")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0xE40CD4", Offset = "0xE40CD4", VA = "0xE40CD4")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0xE40CFC", Offset = "0xE40CFC", VA = "0xE40CFC")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0xE40D48", Offset = "0xE40D48", VA = "0xE40D48")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0xE40DB0", Offset = "0xE40DB0", VA = "0xE40DB0")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0xE40F0C", Offset = "0xE40F0C", VA = "0xE40F0C")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0xE41044", Offset = "0xE41044", VA = "0xE41044")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0xE4109C", Offset = "0xE4109C", VA = "0xE4109C")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x200005C")]
	public abstract class LazySingleton<T> : MonoBehaviour where T : LazySingleton<T>
	{
		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000049")]
		public static bool hasInstance
		{
			[Token(Token = "0x6000358")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004A")]
		public static T instance
		{
			[Token(Token = "0x6000359")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600035A")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600035B")]
		protected LazySingleton()
		{
		}
	}
	[Token(Token = "0x200005D")]
	public enum ShowIfMode
	{
		[Token(Token = "0x40001D4")]
		Disabled,
		[Token(Token = "0x40001D5")]
		Hidden
	}
	[Token(Token = "0x200005E")]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)]
	public class ShowIfAttribute : PropertyAttribute
	{
		[Token(Token = "0x1700004B")]
		public string propName
		{
			[Token(Token = "0x600035C")]
			[Address(RVA = "0xE410C0", Offset = "0xE410C0", VA = "0xE410C0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600035D")]
			[Address(RVA = "0xE410C8", Offset = "0xE410C8", VA = "0xE410C8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		public object propValue
		{
			[Token(Token = "0x600035E")]
			[Address(RVA = "0xE410D0", Offset = "0xE410D0", VA = "0xE410D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600035F")]
			[Address(RVA = "0xE410D8", Offset = "0xE410D8", VA = "0xE410D8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public object otherPropValue
		{
			[Token(Token = "0x6000360")]
			[Address(RVA = "0xE410E0", Offset = "0xE410E0", VA = "0xE410E0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000361")]
			[Address(RVA = "0xE410E8", Offset = "0xE410E8", VA = "0xE410E8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public bool indent
		{
			[Token(Token = "0x6000362")]
			[Address(RVA = "0xE410F0", Offset = "0xE410F0", VA = "0xE410F0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000363")]
			[Address(RVA = "0xE410F8", Offset = "0xE410F8", VA = "0xE410F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		public ShowIfMode mode
		{
			[Token(Token = "0x6000364")]
			[Address(RVA = "0xE41104", Offset = "0xE41104", VA = "0xE41104")]
			[CompilerGenerated]
			get
			{
				return default(ShowIfMode);
			}
			[Token(Token = "0x6000365")]
			[Address(RVA = "0xE4110C", Offset = "0xE4110C", VA = "0xE4110C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0xE41114", Offset = "0xE41114", VA = "0xE41114")]
		public ShowIfAttribute(string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x200005F")]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)]
	public class ShowRangeIfAttribute : ShowIfAttribute
	{
		[Token(Token = "0x17000050")]
		public float min
		{
			[Token(Token = "0x6000367")]
			[Address(RVA = "0xE41194", Offset = "0xE41194", VA = "0xE41194")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000368")]
			[Address(RVA = "0xE4119C", Offset = "0xE4119C", VA = "0xE4119C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public float max
		{
			[Token(Token = "0x6000369")]
			[Address(RVA = "0xE411A4", Offset = "0xE411A4", VA = "0xE411A4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600036A")]
			[Address(RVA = "0xE411AC", Offset = "0xE411AC", VA = "0xE411AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0xE411B4", Offset = "0xE411B4", VA = "0xE411B4")]
		public ShowRangeIfAttribute(float min, float max, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x2000060")]
	public class ShowLargeHeaderIf : ShowIfAttribute
	{
		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string name;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string color;

		[Token(Token = "0x600036C")]
		[Address(RVA = "0xE411E0", Offset = "0xE411E0", VA = "0xE411E0")]
		public ShowLargeHeaderIf(string name, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0xE4129C", Offset = "0xE4129C", VA = "0xE4129C")]
		public ShowLargeHeaderIf(string name, string color, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x2000061")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x600036E")]
		[Address(RVA = "0xE41364", Offset = "0xE41364", VA = "0xE41364")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0xE413EC", Offset = "0xE413EC", VA = "0xE413EC")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000062")]
	public static class QuaTools
	{
		[Token(Token = "0x6000370")]
		[Address(RVA = "0xE41478", Offset = "0xE41478", VA = "0xE41478")]
		public static float GetYaw(Quaternion space, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xE414D0", Offset = "0xE414D0", VA = "0xE414D0")]
		public static float GetPitch(Quaternion space, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0xE41600", Offset = "0xE41600", VA = "0xE41600")]
		public static float GetBank(Quaternion space, Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0xE41780", Offset = "0xE41780", VA = "0xE41780")]
		public static float GetYaw(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0xE4185C", Offset = "0xE4185C", VA = "0xE4185C")]
		public static float GetPitch(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0xE41938", Offset = "0xE41938", VA = "0xE41938")]
		public static float GetBank(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0xE41B50", Offset = "0xE41B50", VA = "0xE41B50")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0xE41B9C", Offset = "0xE41B9C", VA = "0xE41B9C")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xE41BE8", Offset = "0xE41BE8", VA = "0xE41BE8")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0xE41CEC", Offset = "0xE41CEC", VA = "0xE41CEC")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0xE41DF0", Offset = "0xE41DF0", VA = "0xE41DF0")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0xE41F04", Offset = "0xE41F04", VA = "0xE41F04")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0xE41FAC", Offset = "0xE41FAC", VA = "0xE41FAC")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0xE420B8", Offset = "0xE420B8", VA = "0xE420B8")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0xE42220", Offset = "0xE42220", VA = "0xE42220")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xE42404", Offset = "0xE42404", VA = "0xE42404")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xE424D4", Offset = "0xE424D4", VA = "0xE424D4")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetAxis1, Vector3 targetAxis2, Vector3 axis1, Vector3 axis2)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xE42658", Offset = "0xE42658", VA = "0xE42658")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0xE42764", Offset = "0xE42764", VA = "0xE42764")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0xE427BC", Offset = "0xE427BC", VA = "0xE427BC")]
		public static Quaternion MirrorYZ(Quaternion r, Quaternion space)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0xE429E0", Offset = "0xE429E0", VA = "0xE429E0")]
		public static Quaternion MirrorYZ(Quaternion r)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000063")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000052")]
		public static T instance
		{
			[Token(Token = "0x6000385")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000386")]
		public static void Clear()
		{
		}

		[Token(Token = "0x6000387")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000388")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000064")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will fix all the Transforms used by the solver to their initial state in each Update. This prevents potential problems with unanimated bones and animator culling with a small cost of performance. Not recommended for CCD and FABRIK solvers.")]
		public bool fixTransforms;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000053")]
		private bool animatePhysics
		{
			[Token(Token = "0x600038F")]
			[Address(RVA = "0xE42C04", Offset = "0xE42C04", VA = "0xE42C04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000054")]
		private bool isAnimated
		{
			[Token(Token = "0x6000393")]
			[Address(RVA = "0xE42F00", Offset = "0xE42F00", VA = "0xE42F00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0xE42AE8", Offset = "0xE42AE8", VA = "0xE42AE8")]
		public void Disable()
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xE42B7C", Offset = "0xE42B7C", VA = "0xE42B7C", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xE42B80", Offset = "0xE42B80", VA = "0xE42B80", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xE42B84", Offset = "0xE42B84", VA = "0xE42B84", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xE42B88", Offset = "0xE42B88", VA = "0xE42B88")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xE42C00", Offset = "0xE42C00", VA = "0xE42C00")]
		private void Start()
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xE42BB0", Offset = "0xE42BB0", VA = "0xE42BB0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xE42EC4", Offset = "0xE42EC4", VA = "0xE42EC4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xE42CD0", Offset = "0xE42CD0", VA = "0xE42CD0")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0xE42F98", Offset = "0xE42F98", VA = "0xE42F98")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0xE42FE4", Offset = "0xE42FE4", VA = "0xE42FE4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0xE43030", Offset = "0xE43030", VA = "0xE43030")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0xE43068", Offset = "0xE43068", VA = "0xE43068")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000065")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x6000398")]
		[Address(RVA = "0xE43078", Offset = "0xE43078", VA = "0xE43078")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0xE4312C", Offset = "0xE4312C", VA = "0xE4312C")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0xE431E0", Offset = "0xE431E0", VA = "0xE431E0")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0xE43294", Offset = "0xE43294", VA = "0xE43294")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000066")]
	public static class V2Tools
	{
		[Token(Token = "0x600039C")]
		[Address(RVA = "0xE4329C", Offset = "0xE4329C", VA = "0xE4329C")]
		public static Vector2 XZ(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xE432A4", Offset = "0xE432A4", VA = "0xE432A4")]
		public static float DeltaAngle(Vector2 dir1, Vector2 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0xE43334", Offset = "0xE43334", VA = "0xE43334")]
		public static float DeltaAngleXZ(Vector3 dir1, Vector3 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xE433C8", Offset = "0xE433C8", VA = "0xE433C8")]
		public static bool LineCircleIntersect(Vector2 p1, Vector2 p2, Vector2 c, float r)
		{
			return default(bool);
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xE43478", Offset = "0xE43478", VA = "0xE43478")]
		public static bool RayCircleIntersect(Vector2 p1, Vector2 dir, Vector2 c, float r)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000067")]
	public static class V3Tools
	{
		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xE434D4", Offset = "0xE434D4", VA = "0xE434D4")]
		public static float GetYaw(Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xE434F4", Offset = "0xE434F4", VA = "0xE434F4")]
		public static float GetPitch(Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xE435C8", Offset = "0xE435C8", VA = "0xE435C8")]
		public static float GetBank(Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xE43680", Offset = "0xE43680", VA = "0xE43680")]
		public static float GetYaw(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0xE436DC", Offset = "0xE436DC", VA = "0xE436DC")]
		public static float GetPitch(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xE43738", Offset = "0xE43738", VA = "0xE43738")]
		public static float GetBank(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0xE43850", Offset = "0xE43850", VA = "0xE43850")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xE438AC", Offset = "0xE438AC", VA = "0xE438AC")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xE438E4", Offset = "0xE438E4", VA = "0xE438E4")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xE43AB4", Offset = "0xE43AB4", VA = "0xE43AB4")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0xE43CB8", Offset = "0xE43CB8", VA = "0xE43CB8")]
		public static Vector3 Flatten(Vector3 v, Vector3 normal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xE43E30", Offset = "0xE43E30", VA = "0xE43E30")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0xE44060", Offset = "0xE44060", VA = "0xE44060")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0xE442B0", Offset = "0xE442B0", VA = "0xE442B0")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0xE44508", Offset = "0xE44508", VA = "0xE44508")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xE446B4", Offset = "0xE446B4", VA = "0xE446B4")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0xE448AC", Offset = "0xE448AC", VA = "0xE448AC")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xE44928", Offset = "0xE44928", VA = "0xE44928")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0xE449B8", Offset = "0xE449B8", VA = "0xE449B8")]
		public static Vector3 InverseTransformPoint(Vector3 tPos, Quaternion tRot, Vector3 tScale, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xE44A50", Offset = "0xE44A50", VA = "0xE44A50")]
		public static Vector3 TransformPoint(Vector3 tPos, Quaternion tRot, Vector3 tScale, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0xE44A40", Offset = "0xE44A40", VA = "0xE44A40")]
		public static Vector3 Div(Vector3 v1, Vector3 v2)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000068")]
	public static class Warning
	{
		[Token(Token = "0x2000069")]
		public delegate void Logger(string message);

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0xE44ACC", Offset = "0xE44ACC", VA = "0xE44ACC")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0xE3D488", Offset = "0xE3D488", VA = "0xE3D488")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x200006A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Biped IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page4.html")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xE44C88", Offset = "0xE44C88", VA = "0xE44C88")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0xE44CCC", Offset = "0xE44CCC", VA = "0xE44CCC")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0xE44D10", Offset = "0xE44D10", VA = "0xE44D10")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xE44D54", Offset = "0xE44D54", VA = "0xE44D54")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0xE44D98", Offset = "0xE44D98", VA = "0xE44D98")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xE44E30", Offset = "0xE44E30", VA = "0xE44E30")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0xE44E4C", Offset = "0xE44E4C", VA = "0xE44E4C")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0xE44E78", Offset = "0xE44E78", VA = "0xE44E78")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0xE44EA4", Offset = "0xE44EA4", VA = "0xE44EA4")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0xE44EE0", Offset = "0xE44EE0", VA = "0xE44EE0")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0xE44F20", Offset = "0xE44F20", VA = "0xE44F20")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0xE44F40", Offset = "0xE44F40", VA = "0xE44F40")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0xE44F60", Offset = "0xE44F60", VA = "0xE44F60")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xE44F84", Offset = "0xE44F84", VA = "0xE44F84")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0xE44FAC", Offset = "0xE44FAC", VA = "0xE44FAC")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0xE44FD4", Offset = "0xE44FD4", VA = "0xE44FD4")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0xE44DB4", Offset = "0xE44DB4", VA = "0xE44DB4")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xE44FF8", Offset = "0xE44FF8", VA = "0xE44FF8")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0xE45004", Offset = "0xE45004", VA = "0xE45004")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0xE45010", Offset = "0xE45010", VA = "0xE45010")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0xE452C4", Offset = "0xE452C4", VA = "0xE452C4", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0xE45360", Offset = "0xE45360", VA = "0xE45360", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xE45684", Offset = "0xE45684", VA = "0xE45684", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0xE45AF0", Offset = "0xE45AF0", VA = "0xE45AF0")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0xE45B14", Offset = "0xE45B14", VA = "0xE45B14")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006B")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x17000055")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x60003D5")]
			[Address(RVA = "0xE4514C", Offset = "0xE4514C", VA = "0xE4514C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x60003D6")]
			[Address(RVA = "0xE45DB0", Offset = "0xE45DB0", VA = "0xE45DB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xE45510", Offset = "0xE45510", VA = "0xE45510")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0xE45BC4", Offset = "0xE45BC4", VA = "0xE45BC4")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006C")]
	public abstract class Constraint
	{
		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000057")]
		public bool isValid
		{
			[Token(Token = "0x60003D9")]
			[Address(RVA = "0xE45FD8", Offset = "0xE45FD8", VA = "0xE45FD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003DA")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0xE46038", Offset = "0xE46038", VA = "0xE46038")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006D")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0xE46040", Offset = "0xE46040", VA = "0xE46040", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0xE460D8", Offset = "0xE460D8", VA = "0xE460D8")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xE460E0", Offset = "0xE460E0", VA = "0xE460E0")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006E")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x17000058")]
		private bool positionChanged
		{
			[Token(Token = "0x60003E2")]
			[Address(RVA = "0xE46214", Offset = "0xE46214", VA = "0xE46214")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0xE46110", Offset = "0xE46110", VA = "0xE46110", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0xE46270", Offset = "0xE46270", VA = "0xE46270")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0xE46278", Offset = "0xE46278", VA = "0xE46278")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006F")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xE462A8", Offset = "0xE462A8", VA = "0xE462A8", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xE46324", Offset = "0xE46324", VA = "0xE46324")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0xE4632C", Offset = "0xE4632C", VA = "0xE4632C")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000070")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x17000059")]
		private bool rotationChanged
		{
			[Token(Token = "0x60003E9")]
			[Address(RVA = "0xE46460", Offset = "0xE46460", VA = "0xE46460")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0xE4635C", Offset = "0xE4635C", VA = "0xE4635C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0xE464B8", Offset = "0xE464B8", VA = "0xE464B8")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0xE464C0", Offset = "0xE464C0", VA = "0xE464C0")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000071")]
	public class Constraints
	{
		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0xE464F0", Offset = "0xE464F0", VA = "0xE464F0")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0xE45630", Offset = "0xE45630", VA = "0xE45630")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xE457F8", Offset = "0xE457F8", VA = "0xE457F8")]
		public void Update()
		{
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0xE45FD0", Offset = "0xE45FD0", VA = "0xE45FD0")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000072")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x2000073")]
		public enum DOF
		{
			[Token(Token = "0x400021F")]
			One,
			[Token(Token = "0x4000220")]
			Three
		}

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Master Weight for the finger.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The weight of rotating the finger tip and bending the finger to the target.")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Rotational degrees of freedom. When set to 'One' the fingers will be able to be rotated only around a single axis. When 3, all 3 axes are free to rotate around.")]
		public DOF rotationDOF;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If enabled, keeps bone1 twist angle fixed relative to bone2.")]
		public bool fixBone1Twist;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The first bone of the finger.")]
		public Transform bone1;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The second bone of the finger.")]
		public Transform bone2;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The (optional) third bone of the finger. This can be ignored for thumbs.")]
		public Transform bone3;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The fingertip object. If your character doesn't have tip bones, you can create an empty GameObject and parent it to the last bone in the finger. Place it to the tip of the finger.")]
		public Transform tip;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The IK target (optional, can use IKPosition and IKRotation directly).")]
		public Transform target;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 defaultBendNormal;

		[Token(Token = "0x1700005A")]
		public bool initiated
		{
			[Token(Token = "0x60003EE")]
			[Address(RVA = "0xE46550", Offset = "0xE46550", VA = "0xE46550")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003EF")]
			[Address(RVA = "0xE46558", Offset = "0xE46558", VA = "0xE46558")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x60003F0")]
			[Address(RVA = "0xE46564", Offset = "0xE46564", VA = "0xE46564")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60003F1")]
			[Address(RVA = "0xE46584", Offset = "0xE46584", VA = "0xE46584")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x60003F2")]
			[Address(RVA = "0xE465A4", Offset = "0xE465A4", VA = "0xE465A4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60003F3")]
			[Address(RVA = "0xE465C4", Offset = "0xE465C4", VA = "0xE465C4")]
			set
			{
			}
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0xE465E4", Offset = "0xE465E4", VA = "0xE465E4")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0xE466DC", Offset = "0xE466DC", VA = "0xE466DC")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0xE46D60", Offset = "0xE46D60", VA = "0xE46D60")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0xE46E2C", Offset = "0xE46E2C", VA = "0xE46E2C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xE46EE4", Offset = "0xE46EE4", VA = "0xE46EE4")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0xE47484", Offset = "0xE47484", VA = "0xE47484")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000074")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[Tooltip("The master weight for all fingers.")]
		public float weight;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x1700005D")]
		public bool initiated
		{
			[Token(Token = "0x60003FA")]
			[Address(RVA = "0xE47494", Offset = "0xE47494", VA = "0xE47494")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003FB")]
			[Address(RVA = "0xE4749C", Offset = "0xE4749C", VA = "0xE4749C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0xE474A8", Offset = "0xE474A8", VA = "0xE474A8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0xE4751C", Offset = "0xE4751C", VA = "0xE4751C")]
		[ContextMenu("Auto-detect")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0xE47894", Offset = "0xE47894", VA = "0xE47894")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0xE47A4C", Offset = "0xE47A4C", VA = "0xE47A4C")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0xE477A4", Offset = "0xE477A4", VA = "0xE477A4")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0xE47BC8", Offset = "0xE47BC8", VA = "0xE47BC8", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0xE47C70", Offset = "0xE47C70", VA = "0xE47C70")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0xE47CD4", Offset = "0xE47CD4", VA = "0xE47CD4")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0xE47D3C", Offset = "0xE47D3C", VA = "0xE47D3C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0xE47D98", Offset = "0xE47D98", VA = "0xE47D98", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0xE47D9C", Offset = "0xE47D9C", VA = "0xE47D9C", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0xE47DB0", Offset = "0xE47DB0", VA = "0xE47DB0")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x2000075")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000076")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("The master weight. Use this to fade in/out the grounding effect.")]
		public float weight;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Grounding solver. Not to confuse with IK solvers.")]
		public Grounding solver;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GrounderDelegate OnPostIK;

		[Token(Token = "0x1700005E")]
		public bool initiated
		{
			[Token(Token = "0x6000409")]
			[Address(RVA = "0xE47E24", Offset = "0xE47E24", VA = "0xE47E24")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600040A")]
			[Address(RVA = "0xE47E2C", Offset = "0xE47E2C", VA = "0xE47E2C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000408")]
		public abstract void ResetPosition();

		[Token(Token = "0x600040B")]
		[Address(RVA = "0xE47E38", Offset = "0xE47E38", VA = "0xE47E38")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0xE480E8", Offset = "0xE480E8", VA = "0xE480E8")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0xE47EFC", Offset = "0xE47EFC", VA = "0xE47EFC")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0xE4810C", Offset = "0xE4810C", VA = "0xE4810C")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600040F")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000410")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000411")]
		[Address(RVA = "0xE48280", Offset = "0xE48280", VA = "0xE48280")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000077")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Biped")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The BipedIK componet.")]
		public BipedIK ik;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion[] footRotations;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float lastWeight;

		[Token(Token = "0x6000416")]
		[Address(RVA = "0xE48408", Offset = "0xE48408", VA = "0xE48408", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0xE4844C", Offset = "0xE4844C", VA = "0xE4844C", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0xE48490", Offset = "0xE48490", VA = "0xE48490", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0xE484FC", Offset = "0xE484FC", VA = "0xE484FC")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0xE4859C", Offset = "0xE4859C", VA = "0xE4859C")]
		private void Update()
		{
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0xE485F0", Offset = "0xE485F0", VA = "0xE485F0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0xE48950", Offset = "0xE48950", VA = "0xE48950")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0xE48990", Offset = "0xE48990", VA = "0xE48990")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0xE48E10", Offset = "0xE48E10", VA = "0xE48E10")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0xE48ED0", Offset = "0xE48ED0", VA = "0xE48ED0")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0xE490CC", Offset = "0xE490CC", VA = "0xE490CC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0xE492A4", Offset = "0xE492A4", VA = "0xE492A4")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000078")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Full Body Biped")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000079")]
		public class SpineEffector
		{
			[Token(Token = "0x400023A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the effector.")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x400023B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The weight of horizontal bend offset towards the slope.")]
			public float horizontalWeight;

			[Token(Token = "0x400023C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The vertical bend offset weight.")]
			public float verticalWeight;

			[Token(Token = "0x6000431")]
			[Address(RVA = "0xE4A144", Offset = "0xE4A144", VA = "0xE4A144")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x6000432")]
			[Address(RVA = "0xE4A154", Offset = "0xE4A154", VA = "0xE4A154")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Reference to the FBBIK componet.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SpineEffector[] spine;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] feet;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool firstSolve;

		[Token(Token = "0x6000422")]
		[Address(RVA = "0xE49348", Offset = "0xE49348", VA = "0xE49348")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0xE4938C", Offset = "0xE4938C", VA = "0xE4938C", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0xE493D0", Offset = "0xE493D0", VA = "0xE493D0", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0xE49414", Offset = "0xE49414", VA = "0xE49414", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0xE49480", Offset = "0xE49480", VA = "0xE49480")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0xE49508", Offset = "0xE49508", VA = "0xE49508")]
		private void Update()
		{
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0xE4984C", Offset = "0xE4984C", VA = "0xE4984C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0xE49858", Offset = "0xE49858", VA = "0xE49858")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0xE49564", Offset = "0xE49564", VA = "0xE49564")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0xE49864", Offset = "0xE49864", VA = "0xE49864")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0xE49BD8", Offset = "0xE49BD8", VA = "0xE49BD8")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0xE49D5C", Offset = "0xE49D5C", VA = "0xE49D5C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0xE49EBC", Offset = "0xE49EBC", VA = "0xE49EBC")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0xE49ED8", Offset = "0xE49ED8", VA = "0xE49ED8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0xE4A0A0", Offset = "0xE4A0A0", VA = "0xE4A0A0")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x200007A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IK[] legs;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The pelvis transform. Common ancestor of all the legs.")]
		public Transform pelvis;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The weight of rotating the character root to the ground normal (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The speed of rotating the character root to the ground normal (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The maximum angle of root rotation (range: 0 - 90).")]
		public float maxRootRotationAngle;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform[] feet;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int solvedFeet;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool solved;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float lastWeight;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xE4A198", Offset = "0xE4A198", VA = "0xE4A198", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0xE4A1DC", Offset = "0xE4A1DC", VA = "0xE4A1DC", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xE4A220", Offset = "0xE4A220", VA = "0xE4A220", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0xE4A414", Offset = "0xE4A414", VA = "0xE4A414")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xE4A630", Offset = "0xE4A630", VA = "0xE4A630")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0xE4A710", Offset = "0xE4A710", VA = "0xE4A710")]
		private void Update()
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xE4AC88", Offset = "0xE4AC88", VA = "0xE4AC88")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0xE4B144", Offset = "0xE4B144", VA = "0xE4B144")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xE4B2F4", Offset = "0xE4B2F4", VA = "0xE4B2F4")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0xE4B67C", Offset = "0xE4B67C", VA = "0xE4B67C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0xE4B880", Offset = "0xE4B880", VA = "0xE4B880")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0xE4BAA8", Offset = "0xE4BAA8", VA = "0xE4BAA8")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x200007B")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Quadruped")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x200007C")]
		public struct Foot
		{
			[Token(Token = "0x4000268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4000269")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x400026A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x400026B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6000451")]
			[Address(RVA = "0xEDBCE4", Offset = "0xEDBCE4", VA = "0xEDBCE4")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The Grounding solver for the forelegs.")]
		public Grounding forelegSolver;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The weight of rotating the character root to the ground angle (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The maximum angle of rotating the quadruped downwards (going downhill, range: -90 - 0).")]
		[Range(-90f, 0f)]
		public float minRootRotation;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum angle of rotating the quadruped upwards (going uphill, range: 0 - 90).")]
		[Range(0f, 90f)]
		public float maxRootRotation;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The speed of interpolating the character root rotation (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum IK offset for the legs (range: 0 - inf).")]
		public float maxLegOffset;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The maximum IK offset for the forelegs (range: 0 - inf).")]
		public float maxForeLegOffset;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		[Tooltip("The weight of maintaining the head's rotation as it was before solving the Grounding (range: 0 - 1).")]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The pelvis transform. Common ancestor of both legs and the spine.")]
		public Transform pelvis;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The last bone in the spine that is the common parent for both forelegs.")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The head (optional, if you intend to maintain its rotation).")]
		public Transform head;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] legs;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IK[] forelegs;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Foot[] feet;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int solvedFeet;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private bool solved;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float angle;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform forefeetRoot;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Quaternion headRotation;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float lastWeight;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x600043F")]
		[Address(RVA = "0xE4BB4C", Offset = "0xE4BB4C", VA = "0xE4BB4C", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0xE4BB90", Offset = "0xE4BB90", VA = "0xE4BB90", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0xE4BBD4", Offset = "0xE4BBD4", VA = "0xE4BBD4", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0xE4BD58", Offset = "0xE4BD58", VA = "0xE4BD58")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xE4BE5C", Offset = "0xE4BE5C", VA = "0xE4BE5C")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xE4C050", Offset = "0xE4C050", VA = "0xE4C050")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0xE4C0B4", Offset = "0xE4C0B4", VA = "0xE4C0B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0xE4C10C", Offset = "0xE4C10C", VA = "0xE4C10C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xE4C460", Offset = "0xE4C460", VA = "0xE4C460")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0xE4C800", Offset = "0xE4C800", VA = "0xE4C800")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xE4C890", Offset = "0xE4C890", VA = "0xE4C890")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0xE4CCE0", Offset = "0xE4CCE0", VA = "0xE4CCE0")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xE4D3AC", Offset = "0xE4D3AC", VA = "0xE4D3AC")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0xE4D664", Offset = "0xE4D664", VA = "0xE4D664")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0xE4D798", Offset = "0xE4D798", VA = "0xE4D798")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0xE4DA90", Offset = "0xE4DA90", VA = "0xE4DA90")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0xE4DAC0", Offset = "0xE4DAC0", VA = "0xE4DAC0")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0xE4DCE0", Offset = "0xE4DCE0", VA = "0xE4DCE0")]
		public GrounderQuadruped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007D")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x200007E")]
		public enum Quality
		{
			[Token(Token = "0x4000288")]
			Fastest,
			[Token(Token = "0x4000289")]
			Simple,
			[Token(Token = "0x400028A")]
			Best
		}

		[Token(Token = "0x200007F")]
		public delegate bool OnRaycastDelegate(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x2000080")]
		public delegate bool OnCapsuleCastDelegate(Vector3 point1, Vector3 point2, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x2000081")]
		public delegate bool OnSphereCastDelegate(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x2000082")]
		public class Leg
		{
			[Token(Token = "0x400028D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4000293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x4000296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x4000297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x4000298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x4000299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x400029A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x400029B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x400029C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x400029D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x400029E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x400029F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x17000067")]
			public bool isGrounded
			{
				[Token(Token = "0x6000476")]
				[Address(RVA = "0xEDE358", Offset = "0xEDE358", VA = "0xEDE358")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000477")]
				[Address(RVA = "0xEDE360", Offset = "0xEDE360", VA = "0xEDE360")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000068")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x6000478")]
				[Address(RVA = "0xEDE36C", Offset = "0xEDE36C", VA = "0xEDE36C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000479")]
				[Address(RVA = "0xEDE378", Offset = "0xEDE378", VA = "0xEDE378")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000069")]
			public bool initiated
			{
				[Token(Token = "0x600047A")]
				[Address(RVA = "0xEDE384", Offset = "0xEDE384", VA = "0xEDE384")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600047B")]
				[Address(RVA = "0xEDE38C", Offset = "0xEDE38C", VA = "0xEDE38C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700006A")]
			public float heightFromGround
			{
				[Token(Token = "0x600047C")]
				[Address(RVA = "0xEDE398", Offset = "0xEDE398", VA = "0xEDE398")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600047D")]
				[Address(RVA = "0xEDE3A0", Offset = "0xEDE3A0", VA = "0xEDE3A0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700006B")]
			public Vector3 velocity
			{
				[Token(Token = "0x600047E")]
				[Address(RVA = "0xEDE3A8", Offset = "0xEDE3A8", VA = "0xEDE3A8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600047F")]
				[Address(RVA = "0xEDE3B4", Offset = "0xEDE3B4", VA = "0xEDE3B4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700006C")]
			public Transform transform
			{
				[Token(Token = "0x6000480")]
				[Address(RVA = "0xEDE3C0", Offset = "0xEDE3C0", VA = "0xEDE3C0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000481")]
				[Address(RVA = "0xEDE3C8", Offset = "0xEDE3C8", VA = "0xEDE3C8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700006D")]
			public float IKOffset
			{
				[Token(Token = "0x6000482")]
				[Address(RVA = "0xEDE3D0", Offset = "0xEDE3D0", VA = "0xEDE3D0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000483")]
				[Address(RVA = "0xEDE3D8", Offset = "0xEDE3D8", VA = "0xEDE3D8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700006E")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x6000484")]
				[Address(RVA = "0xEDE3E0", Offset = "0xEDE3E0", VA = "0xEDE3E0")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000485")]
				[Address(RVA = "0xEDE3F8", Offset = "0xEDE3F8", VA = "0xEDE3F8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700006F")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6000486")]
				[Address(RVA = "0xEDE418", Offset = "0xEDE418", VA = "0xEDE418")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000487")]
				[Address(RVA = "0xEDE430", Offset = "0xEDE430", VA = "0xEDE430")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000070")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x6000488")]
				[Address(RVA = "0xEDE450", Offset = "0xEDE450", VA = "0xEDE450")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x17000071")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x600048E")]
				[Address(RVA = "0xEDED0C", Offset = "0xEDED0C", VA = "0xEDED0C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000072")]
			private float rootYOffset
			{
				[Token(Token = "0x6000497")]
				[Address(RVA = "0xEDEE5C", Offset = "0xEDEE5C", VA = "0xEDEE5C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000489")]
			[Address(RVA = "0xEDE498", Offset = "0xEDE498", VA = "0xEDE498")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x600048A")]
			[Address(RVA = "0xEDC564", Offset = "0xEDC564", VA = "0xEDC564")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x600048B")]
			[Address(RVA = "0xEDE4AC", Offset = "0xEDE4AC", VA = "0xEDE4AC")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x600048C")]
			[Address(RVA = "0xEDD668", Offset = "0xEDD668", VA = "0xEDD668")]
			public void Reset()
			{
			}

			[Token(Token = "0x600048D")]
			[Address(RVA = "0xEDC878", Offset = "0xEDC878", VA = "0xEDC878")]
			public void Process()
			{
			}

			[Token(Token = "0x600048F")]
			[Address(RVA = "0xEDE938", Offset = "0xEDE938", VA = "0xEDE938")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000490")]
			[Address(RVA = "0xEDE4EC", Offset = "0xEDE4EC", VA = "0xEDE4EC")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000491")]
			[Address(RVA = "0xEDEDA0", Offset = "0xEDEDA0", VA = "0xEDEDA0")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000492")]
			[Address(RVA = "0xEDE7A0", Offset = "0xEDE7A0", VA = "0xEDE7A0")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x6000493")]
			[Address(RVA = "0xEDE820", Offset = "0xEDE820", VA = "0xEDE820")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6000494")]
			[Address(RVA = "0xEDEE0C", Offset = "0xEDEE0C", VA = "0xEDEE0C")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6000495")]
			[Address(RVA = "0xEDED40", Offset = "0xEDED40", VA = "0xEDED40")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6000496")]
			[Address(RVA = "0xEDEEE8", Offset = "0xEDEEE8", VA = "0xEDEEE8")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000498")]
			[Address(RVA = "0xEDC4C4", Offset = "0xEDC4C4", VA = "0xEDC4C4")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x2000083")]
		public class Pelvis
		{
			[Token(Token = "0x40002A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x40002A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x40002A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x40002A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x40002A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x17000073")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x6000499")]
				[Address(RVA = "0xEDF098", Offset = "0xEDF098", VA = "0xEDF098")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600049A")]
				[Address(RVA = "0xEDF0A4", Offset = "0xEDF0A4", VA = "0xEDF0A4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000074")]
			public float heightOffset
			{
				[Token(Token = "0x600049B")]
				[Address(RVA = "0xEDF0B0", Offset = "0xEDF0B0", VA = "0xEDF0B0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600049C")]
				[Address(RVA = "0xEDF0B8", Offset = "0xEDF0B8", VA = "0xEDF0B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600049D")]
			[Address(RVA = "0xEDC63C", Offset = "0xEDC63C", VA = "0xEDC63C")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x600049E")]
			[Address(RVA = "0xEDD5D4", Offset = "0xEDD5D4", VA = "0xEDD5D4")]
			public void Reset()
			{
			}

			[Token(Token = "0x600049F")]
			[Address(RVA = "0xEDF0C0", Offset = "0xEDF0C0", VA = "0xEDF0C0")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x60004A0")]
			[Address(RVA = "0xEDD1F8", Offset = "0xEDD1F8", VA = "0xEDD1F8")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x60004A1")]
			[Address(RVA = "0xEDC55C", Offset = "0xEDC55C", VA = "0xEDC55C")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Layers to ground the character to. Make sure to exclude the layer of the character controller.")]
		public LayerMask layers;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Max step height. Maximum vertical distance of Grounding from the root of the character.")]
		public float maxStep;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The height offset of the root.")]
		public float heightOffset;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The speed of moving the feet up/down.")]
		public float footSpeed;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("CapsuleCast radius. Should match approximately with the size of the feet.")]
		public float footRadius;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		[Tooltip("Offset of the foot center along character forward axis.")]
		public float footCenterOffset;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Amount of velocity based prediction of the foot positions.")]
		public float prediction;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Weight of rotating the feet to the ground normal offset.")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Speed of slerping the feet to their grounded rotations.")]
		public float footRotationSpeed;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Max Foot Rotation Angle. Max angular offset from the foot's rotation.")]
		[Range(0f, 90f)]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, solver will rotate with the character root so the character can be grounded for example to spherical planets. For performance reasons leave this off unless needed.")]
		public bool rotateSolver;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The speed of moving the character up/down.")]
		public float pelvisSpeed;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for smoothing out vertical pelvis movement (range 0 - 1).")]
		[Range(0f, 1f)]
		public float pelvisDamper;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of lowering the pelvis to the lowest foot.")]
		public float lowerPelvisWeight;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of lifting the pelvis to the highest foot. This is useful when you don't want the feet to go too high relative to the body when crouching.")]
		public float liftPelvisWeight;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The radius of the spherecast from the root that determines whether the character root is grounded.")]
		public float rootSphereCastRadius;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If false, keeps the foot that is over a ledge at the root level. If true, lowers the overstepping foot and body by the 'Max Step' value.")]
		public bool overstepFallsDown;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The raycasting quality. Fastest is a single raycast per foot, Simple is three raycasts, Best is one raycast and a capsule cast per foot.")]
		public Quality quality;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public OnRaycastDelegate Raycast;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public OnCapsuleCastDelegate CapsuleCast;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public OnSphereCastDelegate SphereCast;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool initiated;

		[Token(Token = "0x1700005F")]
		public Leg[] legs
		{
			[Token(Token = "0x6000452")]
			[Address(RVA = "0xEDBD44", Offset = "0xEDBD44", VA = "0xEDBD44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000453")]
			[Address(RVA = "0xEDBD4C", Offset = "0xEDBD4C", VA = "0xEDBD4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public Pelvis pelvis
		{
			[Token(Token = "0x6000454")]
			[Address(RVA = "0xEDBD54", Offset = "0xEDBD54", VA = "0xEDBD54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000455")]
			[Address(RVA = "0xEDBD5C", Offset = "0xEDBD5C", VA = "0xEDBD5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public bool isGrounded
		{
			[Token(Token = "0x6000456")]
			[Address(RVA = "0xEDBD64", Offset = "0xEDBD64", VA = "0xEDBD64")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000457")]
			[Address(RVA = "0xEDBD6C", Offset = "0xEDBD6C", VA = "0xEDBD6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000062")]
		public Transform root
		{
			[Token(Token = "0x6000458")]
			[Address(RVA = "0xEDBD78", Offset = "0xEDBD78", VA = "0xEDBD78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000459")]
			[Address(RVA = "0xEDBD80", Offset = "0xEDBD80", VA = "0xEDBD80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x600045A")]
			[Address(RVA = "0xEDBD88", Offset = "0xEDBD88", VA = "0xEDBD88")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x600045B")]
			[Address(RVA = "0xEDBDA0", Offset = "0xEDBDA0", VA = "0xEDBDA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public bool rootGrounded
		{
			[Token(Token = "0x600045C")]
			[Address(RVA = "0xEDBDC0", Offset = "0xEDBDC0", VA = "0xEDBDC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000065")]
		public Vector3 up
		{
			[Token(Token = "0x6000464")]
			[Address(RVA = "0xEDC090", Offset = "0xEDC090", VA = "0xEDC090")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000066")]
		private bool useRootRotation
		{
			[Token(Token = "0x6000467")]
			[Address(RVA = "0xEDD6FC", Offset = "0xEDD6FC", VA = "0xEDD6FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xEDBE08", Offset = "0xEDBE08", VA = "0xEDBE08")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xEDC0F8", Offset = "0xEDC0F8", VA = "0xEDC0F8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0xEDC200", Offset = "0xEDC200", VA = "0xEDC200")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0xEDC660", Offset = "0xEDC660", VA = "0xEDC660")]
		public void Update()
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0xEDD3E4", Offset = "0xEDD3E4", VA = "0xEDD3E4")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xEDD55C", Offset = "0xEDD55C", VA = "0xEDD55C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0xEDC860", Offset = "0xEDC860", VA = "0xEDC860")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0xEDD7B0", Offset = "0xEDD7B0", VA = "0xEDD7B0")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0xEDD834", Offset = "0xEDD834", VA = "0xEDD834")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0xEDD988", Offset = "0xEDD988", VA = "0xEDD988")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0xEDD9F8", Offset = "0xEDD9F8", VA = "0xEDD9F8")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000084")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Aim IK")]
	[HelpURL("https://www.youtube.com/watch?v=wT8fViZpLmQ&index=3&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class AimIK : IK
	{
		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xEDF114", Offset = "0xEDF114", VA = "0xEDF114", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xEDF158", Offset = "0xEDF158", VA = "0xEDF158", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xEDF19C", Offset = "0xEDF19C", VA = "0xEDF19C")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xEDF1E0", Offset = "0xEDF1E0", VA = "0xEDF1E0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xEDF224", Offset = "0xEDF224", VA = "0xEDF224")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xEDF268", Offset = "0xEDF268", VA = "0xEDF268", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xEDF270", Offset = "0xEDF270", VA = "0xEDF270")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000085")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Arm IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page2.html")]
	public class ArmIK : IK
	{
		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xEDF2EC", Offset = "0xEDF2EC", VA = "0xEDF2EC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xEDF330", Offset = "0xEDF330", VA = "0xEDF330", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xEDF374", Offset = "0xEDF374", VA = "0xEDF374")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0xEDF3B8", Offset = "0xEDF3B8", VA = "0xEDF3B8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0xEDF3FC", Offset = "0xEDF3FC", VA = "0xEDF3FC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0xEDF404", Offset = "0xEDF404", VA = "0xEDF404")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x2000086")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/CCD IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page5.html")]
	public class CCDIK : IK
	{
		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xEDF478", Offset = "0xEDF478", VA = "0xEDF478", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xEDF4BC", Offset = "0xEDF4BC", VA = "0xEDF4BC", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xEDF500", Offset = "0xEDF500", VA = "0xEDF500")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xEDF544", Offset = "0xEDF544", VA = "0xEDF544")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xEDF588", Offset = "0xEDF588", VA = "0xEDF588", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xEDF590", Offset = "0xEDF590", VA = "0xEDF590")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000087")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page6.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK")]
	public class FABRIK : IK
	{
		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xEDF604", Offset = "0xEDF604", VA = "0xEDF604", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xEDF648", Offset = "0xEDF648", VA = "0xEDF648", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xEDF68C", Offset = "0xEDF68C", VA = "0xEDF68C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xEDF6D0", Offset = "0xEDF6D0", VA = "0xEDF6D0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xEDF714", Offset = "0xEDF714", VA = "0xEDF714", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xEDF71C", Offset = "0xEDF71C", VA = "0xEDF71C")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000088")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK Root")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page7.html")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xEDF790", Offset = "0xEDF790", VA = "0xEDF790", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xEDF7D4", Offset = "0xEDF7D4", VA = "0xEDF7D4", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xEDF818", Offset = "0xEDF818", VA = "0xEDF818")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xEDF85C", Offset = "0xEDF85C", VA = "0xEDF85C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xEDF8A0", Offset = "0xEDF8A0", VA = "0xEDF8A0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xEDF8A8", Offset = "0xEDF8A8", VA = "0xEDF8A8")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000089")]
	[HelpURL("https://www.youtube.com/watch?v=7__IafZGwvI&index=1&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Full Body Biped IK")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0xEDF91C", Offset = "0xEDF91C", VA = "0xEDF91C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xEDF960", Offset = "0xEDF960", VA = "0xEDF960", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xEDF9A4", Offset = "0xEDF9A4", VA = "0xEDF9A4")]
		[ContextMenu("TUTORIAL VIDEO (SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xEDF9E8", Offset = "0xEDF9E8", VA = "0xEDF9E8")]
		[ContextMenu("TUTORIAL VIDEO (INSPECTOR)")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xEDFA2C", Offset = "0xEDFA2C", VA = "0xEDFA2C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0xEDFA70", Offset = "0xEDFA70", VA = "0xEDFA70")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xEDFAB4", Offset = "0xEDFAB4", VA = "0xEDFAB4")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xEDFAF4", Offset = "0xEDFAF4", VA = "0xEDFAF4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xEDFAFC", Offset = "0xEDFAFC", VA = "0xEDFAFC")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xEDFCCC", Offset = "0xEDFCCC", VA = "0xEDFCCC")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xEE0188", Offset = "0xEE0188", VA = "0xEE0188")]
		[ContextMenu("Reinitiate")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xEE01A8", Offset = "0xEE01A8", VA = "0xEE01A8")]
		[ContextMenu("Auto-detect References")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xEE0298", Offset = "0xEE0298", VA = "0xEE0298")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x200008A")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x60004CE")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xEE0348", Offset = "0xEE0348", VA = "0xEE0348", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xEE03C0", Offset = "0xEE03C0", VA = "0xEE03C0", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xEE0430", Offset = "0xEE0430", VA = "0xEE0430", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60004D2")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x60004D3")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xEDF2E4", Offset = "0xEDF2E4", VA = "0xEDF2E4")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x200008B")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The IK components, assign in the order in which you wish to update them.")]
		public IK[] IKComponents;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Optional. Assign it if you are using 'Animate Physics' as the Update Mode.")]
		public Animator animator;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x17000075")]
		private bool animatePhysics
		{
			[Token(Token = "0x60004D5")]
			[Address(RVA = "0xEE0480", Offset = "0xEE0480", VA = "0xEE0480")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xEE050C", Offset = "0xEE050C", VA = "0xEE050C")]
		private void Start()
		{
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xEE0570", Offset = "0xEE0570", VA = "0xEE0570")]
		private void Update()
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xEE0610", Offset = "0xEE0610", VA = "0xEE0610")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xEE063C", Offset = "0xEE063C", VA = "0xEE063C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xEE0594", Offset = "0xEE0594", VA = "0xEE0594")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xEE06C0", Offset = "0xEE06C0", VA = "0xEE06C0")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x200008C")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Leg IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	public class LegIK : IK
	{
		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xEE06C8", Offset = "0xEE06C8", VA = "0xEE06C8", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xEE070C", Offset = "0xEE070C", VA = "0xEE070C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xEE0750", Offset = "0xEE0750", VA = "0xEE0750")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xEE0794", Offset = "0xEE0794", VA = "0xEE0794")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xEE07D8", Offset = "0xEE07D8", VA = "0xEE07D8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xEE07E0", Offset = "0xEE07E0", VA = "0xEE07E0")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x200008D")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Limb IK")]
	public class LimbIK : IK
	{
		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xEE0854", Offset = "0xEE0854", VA = "0xEE0854", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xEE0898", Offset = "0xEE0898", VA = "0xEE0898", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xEE08DC", Offset = "0xEE08DC", VA = "0xEE08DC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0xEE0920", Offset = "0xEE0920", VA = "0xEE0920")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0xEE0964", Offset = "0xEE0964", VA = "0xEE0964", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xEE096C", Offset = "0xEE096C", VA = "0xEE096C")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x200008E")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page13.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Look At IK")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xEE09E0", Offset = "0xEE09E0", VA = "0xEE09E0", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xEE0A24", Offset = "0xEE0A24", VA = "0xEE0A24", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xEE0A68", Offset = "0xEE0A68", VA = "0xEE0A68")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xEE0AAC", Offset = "0xEE0AAC", VA = "0xEE0AAC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xEE0AF0", Offset = "0xEE0AF0", VA = "0xEE0AF0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xEE0AF8", Offset = "0xEE0AF8", VA = "0xEE0AF8")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x200008F")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page15.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Trigonometric IK")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xEE0B6C", Offset = "0xEE0B6C", VA = "0xEE0B6C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xEE0BB0", Offset = "0xEE0BB0", VA = "0xEE0BB0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xEE0BF4", Offset = "0xEE0BF4", VA = "0xEE0BF4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xEE0C38", Offset = "0xEE0C38", VA = "0xEE0C38")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xEE0C7C", Offset = "0xEE0C7C", VA = "0xEE0C7C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xEE0C84", Offset = "0xEE0C84", VA = "0xEE0C84")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x2000090")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/VR IK")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x2000091")]
		public class References
		{
			[Token(Token = "0x40002B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x40002B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[LargeHeader("Spine")]
			public Transform pelvis;

			[Token(Token = "0x40002B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x40002BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Optional")]
			public Transform chest;

			[Token(Token = "0x40002BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Optional")]
			public Transform neck;

			[Token(Token = "0x40002BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x40002BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[LargeHeader("Left Arm")]
			[Tooltip("Optional")]
			public Transform leftShoulder;

			[Token(Token = "0x40002BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform leftUpperArm;

			[Token(Token = "0x40002BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform leftForearm;

			[Token(Token = "0x40002C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform leftHand;

			[Token(Token = "0x40002C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[LargeHeader("Right Arm")]
			[Tooltip("Optional")]
			public Transform rightShoulder;

			[Token(Token = "0x40002C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform rightUpperArm;

			[Token(Token = "0x40002C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform rightForearm;

			[Token(Token = "0x40002C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("VRIK also supports armless characters.If you do not wish to use arms, leave all arm references empty.")]
			public Transform rightHand;

			[Token(Token = "0x40002C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[LargeHeader("Left Leg")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftThigh;

			[Token(Token = "0x40002C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftCalf;

			[Token(Token = "0x40002C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftFoot;

			[Token(Token = "0x40002C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Optional")]
			public Transform leftToes;

			[Token(Token = "0x40002C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[LargeHeader("Right Leg")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightThigh;

			[Token(Token = "0x40002CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightCalf;

			[Token(Token = "0x40002CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightFoot;

			[Token(Token = "0x40002CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[Tooltip("Optional")]
			public Transform rightToes;

			[Token(Token = "0x17000076")]
			public bool isFilled
			{
				[Token(Token = "0x6000500")]
				[Address(RVA = "0xEE16D4", Offset = "0xEE16D4", VA = "0xEE16D4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000077")]
			public bool isEmpty
			{
				[Token(Token = "0x6000501")]
				[Address(RVA = "0xEE1318", Offset = "0xEE1318", VA = "0xEE1318")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60004FD")]
			[Address(RVA = "0xEE1E10", Offset = "0xEE1E10", VA = "0xEE1E10")]
			public References()
			{
			}

			[Token(Token = "0x60004FE")]
			[Address(RVA = "0xEE1E18", Offset = "0xEE1E18", VA = "0xEE1E18")]
			public References(BipedReferences b)
			{
			}

			[Token(Token = "0x60004FF")]
			[Address(RVA = "0xEE2008", Offset = "0xEE2008", VA = "0xEE2008")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x6000502")]
			[Address(RVA = "0xEE0DE0", Offset = "0xEE0DE0", VA = "0xEE0DE0")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[ContextMenuItem("Auto-detect References", "AutoDetectReferences")]
		[Tooltip("Bone mapping. Right-click on the component header and select 'Auto-detect References' of fill in manually if not a Humanoid character. Chest, neck, shoulder and toe bones are optional. VRIK also supports legless characters. If you do not wish to use legs, leave all leg references empty.")]
		public References references;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRIK solver.")]
		public IKSolverVR solver;

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xEE0CF8", Offset = "0xEE0CF8", VA = "0xEE0CF8", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xEE0D3C", Offset = "0xEE0D3C", VA = "0xEE0D3C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xEE0D80", Offset = "0xEE0D80", VA = "0xEE0D80")]
		[ContextMenu("TUTORIAL VIDEO (STEAMVR SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xEE0DC4", Offset = "0xEE0DC4", VA = "0xEE0DC4")]
		[ContextMenu("Auto-detect References")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xEE127C", Offset = "0xEE127C", VA = "0xEE127C")]
		[ContextMenu("Guess Hand Orientations")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xEE12A4", Offset = "0xEE12A4", VA = "0xEE12A4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xEE12AC", Offset = "0xEE12AC", VA = "0xEE12AC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xEE1BD0", Offset = "0xEE1BD0", VA = "0xEE1BD0", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xEE1D60", Offset = "0xEE1D60", VA = "0xEE1D60")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000092")]
	public class FABRIKChain
	{
		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6000503")]
		[Address(RVA = "0xEE254C", Offset = "0xEE254C", VA = "0xEE254C")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0xEE261C", Offset = "0xEE261C", VA = "0xEE261C")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0xEE263C", Offset = "0xEE263C", VA = "0xEE263C")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0xEE2890", Offset = "0xEE2890", VA = "0xEE2890")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0xEE26FC", Offset = "0xEE26FC", VA = "0xEE26FC")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xEE2974", Offset = "0xEE2974", VA = "0xEE2974")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x2000093")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xEE29E0", Offset = "0xEE29E0", VA = "0xEE29E0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xEE2E90", Offset = "0xEE2E90", VA = "0xEE2E90")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0xEE3024", Offset = "0xEE3024", VA = "0xEE3024")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0xEE3150", Offset = "0xEE3150", VA = "0xEE3150")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x2000094")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000095")]
		public class BendBone
		{
			[Token(Token = "0x4000307")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Assign spine and/or neck bones.")]
			public Transform transform;

			[Token(Token = "0x4000308")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight of rotating this bone.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x4000309")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x600051B")]
			[Address(RVA = "0xEE6408", Offset = "0xEE6408", VA = "0xEE6408")]
			public BendBone()
			{
			}

			[Token(Token = "0x600051C")]
			[Address(RVA = "0xEE6468", Offset = "0xEE6468", VA = "0xEE6468")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x600051D")]
			[Address(RVA = "0xEE3A48", Offset = "0xEE3A48", VA = "0xEE3A48")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x600051E")]
			[Address(RVA = "0xEE3E18", Offset = "0xEE3E18", VA = "0xEE3E18")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the FBBIK component.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[LargeHeader("Position")]
		[Tooltip("Master weight for positioning the head.")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The weight of moving the body along with the head")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The weight of moving the thighs along with the head")]
		[Range(0f, 1f)]
		public float thighWeight;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If false, hands will not pull the head away if they are too far. Disabling this will improve performance significantly.")]
		public bool handsPullBody;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[LargeHeader("Rotation")]
		[Tooltip("The weight of rotating the head bone after solving")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Clamping the rotation of the body")]
		[Range(0f, 1f)]
		public float bodyClampWeight;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Clamping the rotation of the head")]
		[Range(0f, 1f)]
		public float headClampWeight;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The master weight of bending/twisting the spine to the rotation of the head effector. This is similar to CCD, but uses the rotation of the head effector not the position.")]
		[Range(0f, 1f)]
		public float bendWeight;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The bones to use for bending.")]
		public BendBone[] bendBones;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		[LargeHeader("CCD")]
		[Tooltip("Optional. The master weight of the CCD (Cyclic Coordinate Descent) IK effect that bends the spine towards the head effector before FBBIK solves.")]
		public float CCDWeight;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of rolling the bones in towards the target")]
		[Range(0f, 1f)]
		public float roll;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Smoothing the CCD effect.")]
		[Range(0f, 1000f)]
		public float damper;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Bones to use for the CCD pass. Assign spine and/or neck bones.")]
		public Transform[] CCDBones;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[LargeHeader("Stretching")]
		[Range(0f, 1f)]
		[Tooltip("Stretching the spine/neck to help reach the target. This is useful for making sure the head stays locked relative to the VR headset. NB! Stretching is done after FBBIK has solved so if you have the hand effectors pinned and spine bones included in the 'Stretch Bones', the hands might become offset from their target positions.")]
		public float postStretchWeight;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Stretch magnitude limit.")]
		public float maxStretch;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If > 0, dampers the stretching effect.")]
		public float stretchDamper;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If true, will fix head position to this Transform no matter what. Good for making sure the head will not budge away from the VR headset")]
		public bool fixHead;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Bones to use for stretching. The more bones you add, the less noticable the effect.")]
		public Transform[] stretchBones;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[LargeHeader("Chest Direction")]
		public Vector3 chestDirection;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float chestDirectionWeight;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x600050D")]
		[Address(RVA = "0xEE3158", Offset = "0xEE3158", VA = "0xEE3158")]
		private void Start()
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0xEE3598", Offset = "0xEE3598", VA = "0xEE3598")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0xEE3A74", Offset = "0xEE3A74", VA = "0xEE3A74")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0xEE3E40", Offset = "0xEE3E40", VA = "0xEE3E40")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0xEE473C", Offset = "0xEE473C", VA = "0xEE473C")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0xEE4B34", Offset = "0xEE4B34", VA = "0xEE4B34")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0xEE4F44", Offset = "0xEE4F44", VA = "0xEE4F44")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xEE58BC", Offset = "0xEE58BC", VA = "0xEE58BC")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0xEE4480", Offset = "0xEE4480", VA = "0xEE4480")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0xEE5AF8", Offset = "0xEE5AF8", VA = "0xEE5AF8")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0xEE57DC", Offset = "0xEE57DC", VA = "0xEE57DC")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0xEE56DC", Offset = "0xEE56DC", VA = "0xEE56DC")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0xEE5E58", Offset = "0xEE5E58", VA = "0xEE5E58")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0xEE61F4", Offset = "0xEE61F4", VA = "0xEE61F4")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000096")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x2000097")]
		public class ChildConstraint
		{
			[Token(Token = "0x4000321")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4000322")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4000323")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x4000324")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4000327")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4000328")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4000329")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x400032A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x17000078")]
			public float nominalDistance
			{
				[Token(Token = "0x6000533")]
				[Address(RVA = "0xEE9570", Offset = "0xEE9570", VA = "0xEE9570")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000534")]
				[Address(RVA = "0xEE9578", Offset = "0xEE9578", VA = "0xEE9578")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000079")]
			public bool isRigid
			{
				[Token(Token = "0x6000535")]
				[Address(RVA = "0xEE9580", Offset = "0xEE9580", VA = "0xEE9580")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000536")]
				[Address(RVA = "0xEE9588", Offset = "0xEE9588", VA = "0xEE9588")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000537")]
			[Address(RVA = "0xEE9594", Offset = "0xEE9594", VA = "0xEE9594")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x6000538")]
			[Address(RVA = "0xEE7244", Offset = "0xEE7244", VA = "0xEE7244")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000539")]
			[Address(RVA = "0xEE7928", Offset = "0xEE7928", VA = "0xEE7928")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x600053A")]
			[Address(RVA = "0xEE9334", Offset = "0xEE9334", VA = "0xEE9334")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000098")]
		public enum Smoothing
		{
			[Token(Token = "0x400032C")]
			None,
			[Token(Token = "0x400032D")]
			Exponential,
			[Token(Token = "0x400032E")]
			Cubic
		}

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float push;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(-1f, 1f)]
		public float pushParent;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float reach;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x4000320")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x600051F")]
		[Address(RVA = "0xEE64F0", Offset = "0xEE64F0", VA = "0xEE64F0")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0xEE6688", Offset = "0xEE6688", VA = "0xEE6688")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0xEE67F8", Offset = "0xEE67F8", VA = "0xEE67F8")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0xEE6928", Offset = "0xEE6928", VA = "0xEE6928")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0xEE69E4", Offset = "0xEE69E4", VA = "0xEE69E4")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0xEE6B00", Offset = "0xEE6B00", VA = "0xEE6B00")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0xEE7544", Offset = "0xEE7544", VA = "0xEE7544")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0xEE6C7C", Offset = "0xEE6C7C", VA = "0xEE6C7C")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0xEE7B0C", Offset = "0xEE7B0C", VA = "0xEE7B0C")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0xEE7DA0", Offset = "0xEE7DA0", VA = "0xEE7DA0")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0xEE8070", Offset = "0xEE8070", VA = "0xEE8070")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0xEE8A38", Offset = "0xEE8A38", VA = "0xEE8A38")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0xEE8F30", Offset = "0xEE8F30", VA = "0xEE8F30")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0xEE9130", Offset = "0xEE9130", VA = "0xEE9130")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0xEE8E1C", Offset = "0xEE8E1C", VA = "0xEE8E1C")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0xEE88D8", Offset = "0xEE88D8", VA = "0xEE88D8")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0xEE8DB8", Offset = "0xEE8DB8", VA = "0xEE8DB8")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xEE920C", Offset = "0xEE920C", VA = "0xEE920C")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xEE8CE4", Offset = "0xEE8CE4", VA = "0xEE8CE4")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xEE9034", Offset = "0xEE9034", VA = "0xEE9034")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000099")]
	public class IKConstraintBend
	{
		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x1700007A")]
		public bool initiated
		{
			[Token(Token = "0x600053C")]
			[Address(RVA = "0xEE97C8", Offset = "0xEE97C8", VA = "0xEE97C8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600053D")]
			[Address(RVA = "0xEE97D0", Offset = "0xEE97D0", VA = "0xEE97D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0xEE95F0", Offset = "0xEE95F0", VA = "0xEE95F0")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0xEE661C", Offset = "0xEE661C", VA = "0xEE661C")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xEE97DC", Offset = "0xEE97DC", VA = "0xEE97DC")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0xEE7298", Offset = "0xEE7298", VA = "0xEE7298")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0xEE72DC", Offset = "0xEE72DC", VA = "0xEE72DC")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0xEE99B8", Offset = "0xEE99B8", VA = "0xEE99B8")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0xEE9D0C", Offset = "0xEE9D0C", VA = "0xEE9D0C")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0xEE82A8", Offset = "0xEE82A8", VA = "0xEE82A8")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0xEE9870", Offset = "0xEE9870", VA = "0xEE9870")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0xEE9914", Offset = "0xEE9914", VA = "0xEE9914")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200009A")]
	public class IKEffector
	{
		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x1700007B")]
		public bool isEndEffector
		{
			[Token(Token = "0x6000548")]
			[Address(RVA = "0xEEA0D4", Offset = "0xEEA0D4", VA = "0xEEA0D4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000549")]
			[Address(RVA = "0xEEA0DC", Offset = "0xEEA0DC", VA = "0xEEA0DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0xEE5DFC", Offset = "0xEE5DFC", VA = "0xEE5DFC")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0xEEA0E8", Offset = "0xEEA0E8", VA = "0xEEA0E8")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0xEEA16C", Offset = "0xEEA16C", VA = "0xEEA16C")]
		public IKEffector()
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0xEEA33C", Offset = "0xEEA33C", VA = "0xEEA33C")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xEEA548", Offset = "0xEEA548", VA = "0xEEA548")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xEEA850", Offset = "0xEEA850", VA = "0xEEA850")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xEEAB28", Offset = "0xEEAB28", VA = "0xEEAB28")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xEEAC48", Offset = "0xEEAC48", VA = "0xEEAC48")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xEEACE4", Offset = "0xEEACE4", VA = "0xEEACE4")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xEEB398", Offset = "0xEEB398", VA = "0xEEB398")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0xEEB3F0", Offset = "0xEEB3F0", VA = "0xEEB3F0")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xEEB5C4", Offset = "0xEEB5C4", VA = "0xEEB5C4")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0xEEB820", Offset = "0xEEB820", VA = "0xEEB820")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200009B")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x200009C")]
		public class BoneMap
		{
			[Token(Token = "0x4000361")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000362")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4000363")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000364")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000365")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000367")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000368")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x400036A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x400036B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x400036C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x400036D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x400036E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x400036F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4000370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4000371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4000372")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4000373")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4000374")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4000375")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4000376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x1700007C")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x600055C")]
				[Address(RVA = "0xEEBD90", Offset = "0xEEBD90", VA = "0xEEBD90")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700007D")]
			public bool isNodeBone
			{
				[Token(Token = "0x600055F")]
				[Address(RVA = "0xEEBE48", Offset = "0xEEBE48", VA = "0xEEBE48")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700007E")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x6000573")]
				[Address(RVA = "0xEEC234", Offset = "0xEEC234", VA = "0xEEC234")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x600055B")]
			[Address(RVA = "0xEEBD4C", Offset = "0xEEBD4C", VA = "0xEEBD4C")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x600055D")]
			[Address(RVA = "0xEEBDC0", Offset = "0xEEBDC0", VA = "0xEEBDC0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x600055E")]
			[Address(RVA = "0xEEBE04", Offset = "0xEEBE04", VA = "0xEEBE04")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x6000560")]
			[Address(RVA = "0xEEBE58", Offset = "0xEEBE58", VA = "0xEEBE58")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x6000561")]
			[Address(RVA = "0xEEBF2C", Offset = "0xEEBF2C", VA = "0xEEBF2C")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x6000562")]
			[Address(RVA = "0xEEBF34", Offset = "0xEEBF34", VA = "0xEEBF34")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x6000563")]
			[Address(RVA = "0xEEC000", Offset = "0xEEC000", VA = "0xEEC000")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x6000564")]
			[Address(RVA = "0xEEC06C", Offset = "0xEEC06C", VA = "0xEEC06C")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x6000565")]
			[Address(RVA = "0xEEC124", Offset = "0xEEC124", VA = "0xEEC124")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x6000566")]
			[Address(RVA = "0xEEC39C", Offset = "0xEEC39C", VA = "0xEEC39C")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x6000567")]
			[Address(RVA = "0xEEC3C8", Offset = "0xEEC3C8", VA = "0xEEC3C8")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x6000568")]
			[Address(RVA = "0xEEC3F4", Offset = "0xEEC3F4", VA = "0xEEC3F4")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x6000569")]
			[Address(RVA = "0xEEC41C", Offset = "0xEEC41C", VA = "0xEEC41C")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x600056A")]
			[Address(RVA = "0xEEC4E0", Offset = "0xEEC4E0", VA = "0xEEC4E0")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600056B")]
			[Address(RVA = "0xEEC674", Offset = "0xEEC674", VA = "0xEEC674")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x600056C")]
			[Address(RVA = "0xEEC698", Offset = "0xEEC698", VA = "0xEEC698")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x600056D")]
			[Address(RVA = "0xEEC7B8", Offset = "0xEEC7B8", VA = "0xEEC7B8")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x600056E")]
			[Address(RVA = "0xEEC81C", Offset = "0xEEC81C", VA = "0xEEC81C")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x600056F")]
			[Address(RVA = "0xEEC99C", Offset = "0xEEC99C", VA = "0xEEC99C")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x6000570")]
			[Address(RVA = "0xEECB1C", Offset = "0xEECB1C", VA = "0xEECB1C")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x6000571")]
			[Address(RVA = "0xEECB98", Offset = "0xEECB98", VA = "0xEECB98")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000572")]
			[Address(RVA = "0xEEC558", Offset = "0xEEC558", VA = "0xEEC558")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000574")]
			[Address(RVA = "0xEECCC0", Offset = "0xEECCC0", VA = "0xEECCC0")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0xEEBADC", Offset = "0xEEBADC", VA = "0xEEBADC", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0xEEBAE4", Offset = "0xEEBAE4", VA = "0xEEBAE4", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0xEEBAE8", Offset = "0xEEBAE8", VA = "0xEEBAE8")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0xEEBC30", Offset = "0xEEBC30", VA = "0xEEBC30")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0xEEBD44", Offset = "0xEEBD44", VA = "0xEEBD44")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009D")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x6000575")]
		[Address(RVA = "0xEECCDC", Offset = "0xEECCDC", VA = "0xEECCDC", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0xEECD84", Offset = "0xEECD84", VA = "0xEECD84")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0xEECE14", Offset = "0xEECE14", VA = "0xEECE14")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0xEECEC0", Offset = "0xEECEC0", VA = "0xEECEC0")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0xEECED8", Offset = "0xEECED8", VA = "0xEECED8")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0xEECEF4", Offset = "0xEECEF4", VA = "0xEECEF4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0xEECF9C", Offset = "0xEECF9C", VA = "0xEECF9C")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0xEECFB4", Offset = "0xEECFB4", VA = "0xEECFB4")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009E")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x200009F")]
		public enum BoneMapType
		{
			[Token(Token = "0x4000386")]
			Parent,
			[Token(Token = "0x4000387")]
			Bone1,
			[Token(Token = "0x4000388")]
			Bone2,
			[Token(Token = "0x4000389")]
			Bone3
		}

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x600057D")]
		[Address(RVA = "0xEECFD8", Offset = "0xEECFD8", VA = "0xEECFD8", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0xEED04C", Offset = "0xEED04C", VA = "0xEED04C")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0xEED114", Offset = "0xEED114", VA = "0xEED114")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0xEED3CC", Offset = "0xEED3CC", VA = "0xEED3CC")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0xEED518", Offset = "0xEED518", VA = "0xEED518")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0xEED69C", Offset = "0xEED69C", VA = "0xEED69C")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0xEED6FC", Offset = "0xEED6FC", VA = "0xEED6FC")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0xEED794", Offset = "0xEED794", VA = "0xEED794")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0xEED83C", Offset = "0xEED83C", VA = "0xEED83C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xEEDAF0", Offset = "0xEEDAF0", VA = "0xEEDAF0")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xEEDB50", Offset = "0xEEDB50", VA = "0xEEDB50")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A0")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 3f)]
		public int iterations;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float twistWeight;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xEEDC98", Offset = "0xEEDC98", VA = "0xEEDC98", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xEEDFC4", Offset = "0xEEDFC4", VA = "0xEEDFC4")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xEEE13C", Offset = "0xEEE13C", VA = "0xEEE13C")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xEEE2F4", Offset = "0xEEE2F4", VA = "0xEEE2F4")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xEEE368", Offset = "0xEEE368", VA = "0xEEE368")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xEEE3C4", Offset = "0xEEE3C4", VA = "0xEEE3C4")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xEEE43C", Offset = "0xEEE43C", VA = "0xEEE43C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xEEEAB4", Offset = "0xEEEAB4", VA = "0xEEEAB4")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xEEEAEC", Offset = "0xEEEAEC", VA = "0xEEEAEC")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xEEED50", Offset = "0xEEED50", VA = "0xEEED50")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xEEF078", Offset = "0xEEF078", VA = "0xEEF078")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xEEF158", Offset = "0xEEF158", VA = "0xEEF158")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xEEF20C", Offset = "0xEEF20C", VA = "0xEEF20C")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A1")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000A2")]
		public class Point
		{
			[Token(Token = "0x40003A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x40003A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x40003A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x40003A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x40003A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x40003A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x60005AB")]
			[Address(RVA = "0xEEFAF0", Offset = "0xEEFAF0", VA = "0xEEFAF0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60005AC")]
			[Address(RVA = "0xEEFB34", Offset = "0xEEFB34", VA = "0xEEFB34")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x60005AD")]
			[Address(RVA = "0xEEFC14", Offset = "0xEEFC14", VA = "0xEEFC14")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x60005AE")]
			[Address(RVA = "0xEEFC40", Offset = "0xEEFC40", VA = "0xEEFC40")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x60005AF")]
			[Address(RVA = "0xEEFC6C", Offset = "0xEEFC6C", VA = "0xEEFC6C")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x60005B0")]
			[Address(RVA = "0xEEFCB0", Offset = "0xEEFCB0", VA = "0xEEFCB0")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x60005B1")]
			[Address(RVA = "0xEEFCF4", Offset = "0xEEFCF4", VA = "0xEEFCF4")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A3")]
		public class Bone : Point
		{
			[Token(Token = "0x40003A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x40003A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x40003AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x40003AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x40003AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x17000080")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x60005B2")]
				[Address(RVA = "0xEEFD54", Offset = "0xEEFD54", VA = "0xEEFD54")]
				get
				{
					return null;
				}
				[Token(Token = "0x60005B3")]
				[Address(RVA = "0xEEFE44", Offset = "0xEEFE44", VA = "0xEEFE44")]
				set
				{
				}
			}

			[Token(Token = "0x60005B4")]
			[Address(RVA = "0xEEFEC8", Offset = "0xEEFEC8", VA = "0xEEFEC8")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60005B5")]
			[Address(RVA = "0xEF0134", Offset = "0xEF0134", VA = "0xEF0134")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60005B6")]
			[Address(RVA = "0xEF03F0", Offset = "0xEF03F0", VA = "0xEF03F0")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60005B7")]
			[Address(RVA = "0xEF05E4", Offset = "0xEF05E4", VA = "0xEF05E4")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x60005B8")]
			[Address(RVA = "0xEF060C", Offset = "0xEF060C", VA = "0xEF060C")]
			public Bone()
			{
			}

			[Token(Token = "0x60005B9")]
			[Address(RVA = "0xEF0678", Offset = "0xEF0678", VA = "0xEF0678")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x60005BA")]
			[Address(RVA = "0xEF06F8", Offset = "0xEF06F8", VA = "0xEF06F8")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A4")]
		public class Node : Point
		{
			[Token(Token = "0x40003AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x40003AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x40003AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x40003B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x60005BB")]
			[Address(RVA = "0xEF078C", Offset = "0xEF078C", VA = "0xEF078C")]
			public Node()
			{
			}

			[Token(Token = "0x60005BC")]
			[Address(RVA = "0xEF0790", Offset = "0xEF0790", VA = "0xEF0790")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x60005BD")]
			[Address(RVA = "0xEF07BC", Offset = "0xEF07BC", VA = "0xEF07BC")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x20000A5")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x20000A6")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public bool executedInEditor;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The positional or the master weight of the solver.")]
		public float IKPositionWeight;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		protected Transform root;

		[Token(Token = "0x1700007F")]
		public bool initiated
		{
			[Token(Token = "0x600059E")]
			[Address(RVA = "0xEEF6FC", Offset = "0xEEF6FC", VA = "0xEEF6FC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600059F")]
			[Address(RVA = "0xEEF704", Offset = "0xEEF704", VA = "0xEEF704")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0xEEF450", Offset = "0xEEF450", VA = "0xEEF450")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000596")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xEEF4C4", Offset = "0xEEF4C4", VA = "0xEEF4C4")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xEEF648", Offset = "0xEEF648", VA = "0xEEF648")]
		public void Update()
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xEEF6B8", Offset = "0xEEF6B8", VA = "0xEEF6B8", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xEEF6C4", Offset = "0xEEF6C4", VA = "0xEEF6C4")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xEEF6D0", Offset = "0xEEF6D0", VA = "0xEEF6D0")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xEEF6D8", Offset = "0xEEF6D8", VA = "0xEEF6D8")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0xEEF6F4", Offset = "0xEEF6F4", VA = "0xEEF6F4")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x60005A0")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x60005A1")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x60005A2")]
		public abstract void FixTransforms();

		[Token(Token = "0x60005A3")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x60005A4")]
		protected abstract void OnInitiate();

		[Token(Token = "0x60005A5")]
		protected abstract void OnUpdate();

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0xEEF710", Offset = "0xEEF710", VA = "0xEEF710")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0xEEF728", Offset = "0xEEF728", VA = "0xEEF728")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xEEF84C", Offset = "0xEEF84C", VA = "0xEEF84C")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xEEF8E4", Offset = "0xEEF8E4", VA = "0xEEF8E4")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xEEFAD8", Offset = "0xEEFAD8", VA = "0xEEFAD8")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A7")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x17000081")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x60005C7")]
			[Address(RVA = "0xEF0BB8", Offset = "0xEF0BB8", VA = "0xEF0BB8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000082")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x60005C8")]
			[Address(RVA = "0xEF0BE8", Offset = "0xEF0BE8", VA = "0xEF0BE8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000083")]
		protected override int minBones
		{
			[Token(Token = "0x60005CB")]
			[Address(RVA = "0xEF1838", Offset = "0xEF1838", VA = "0xEF1838", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000084")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x60005CF")]
			[Address(RVA = "0xEF1D78", Offset = "0xEF1D78", VA = "0xEF1D78", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xEF0A80", Offset = "0xEF0A80", VA = "0xEF0A80")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xEF0C18", Offset = "0xEF0C18", VA = "0xEF0C18", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xEF0EA4", Offset = "0xEF0EA4", VA = "0xEF0EA4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0xEF1790", Offset = "0xEF1790", VA = "0xEF1790")]
		private void Solve()
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xEF142C", Offset = "0xEF142C", VA = "0xEF142C")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xEF1840", Offset = "0xEF1840", VA = "0xEF1840")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xEF1DD8", Offset = "0xEF1DD8", VA = "0xEF1DD8")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A8")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xEF1EF8", Offset = "0xEF1EF8", VA = "0xEF1EF8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0xEF229C", Offset = "0xEF229C", VA = "0xEF229C")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0xEF234C", Offset = "0xEF234C", VA = "0xEF234C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0xEF24CC", Offset = "0xEF24CC", VA = "0xEF24CC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0xEF262C", Offset = "0xEF262C", VA = "0xEF262C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0xEF266C", Offset = "0xEF266C", VA = "0xEF266C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xEF26BC", Offset = "0xEF26BC", VA = "0xEF26BC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xEF2A1C", Offset = "0xEF2A1C", VA = "0xEF2A1C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xEF2A3C", Offset = "0xEF2A3C", VA = "0xEF2A3C")]
		private void Solve()
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xEF2714", Offset = "0xEF2714", VA = "0xEF2714")]
		private void Read()
		{
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xEF2AA4", Offset = "0xEF2AA4", VA = "0xEF2AA4")]
		private void Write()
		{
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xEF2C1C", Offset = "0xEF2C1C", VA = "0xEF2C1C")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A9")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xEF2E10", Offset = "0xEF2E10", VA = "0xEF2E10")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0xEF2E80", Offset = "0xEF2E80", VA = "0xEF2E80", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0xEF3374", Offset = "0xEF3374", VA = "0xEF3374", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0xEF3A48", Offset = "0xEF3A48", VA = "0xEF3A48")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0xEF40D8", Offset = "0xEF40D8", VA = "0xEF40D8")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AA")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x17000085")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x60005E7")]
			[Address(RVA = "0xEF50C0", Offset = "0xEF50C0", VA = "0xEF50C0", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0xEF40DC", Offset = "0xEF40DC", VA = "0xEF40DC")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0xEF46BC", Offset = "0xEF46BC", VA = "0xEF46BC")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xEF47EC", Offset = "0xEF47EC", VA = "0xEF47EC", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0xEF4874", Offset = "0xEF4874", VA = "0xEF4874", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0xEF4D88", Offset = "0xEF4D88", VA = "0xEF4D88", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xEF50C8", Offset = "0xEF50C8", VA = "0xEF50C8")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xEF41B4", Offset = "0xEF41B4", VA = "0xEF41B4")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xEF47A4", Offset = "0xEF47A4", VA = "0xEF47A4")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0xEF5078", Offset = "0xEF5078", VA = "0xEF5078")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0xEF4550", Offset = "0xEF4550", VA = "0xEF4550")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0xEF5774", Offset = "0xEF5774", VA = "0xEF5774")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xEF57DC", Offset = "0xEF57DC", VA = "0xEF57DC")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xEF58AC", Offset = "0xEF58AC", VA = "0xEF58AC")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xEF5974", Offset = "0xEF5974", VA = "0xEF5974")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xEF4B00", Offset = "0xEF4B00", VA = "0xEF4B00")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xEF4C44", Offset = "0xEF4C44", VA = "0xEF4C44")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xEF5A64", Offset = "0xEF5A64", VA = "0xEF5A64")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xEF5364", Offset = "0xEF5364", VA = "0xEF5364")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xEF4794", Offset = "0xEF4794", VA = "0xEF4794")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xEF60D4", Offset = "0xEF60D4", VA = "0xEF60D4")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xEF5C24", Offset = "0xEF5C24", VA = "0xEF5C24")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xEF51E4", Offset = "0xEF51E4", VA = "0xEF51E4")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xEF52B4", Offset = "0xEF52B4", VA = "0xEF52B4")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xEF618C", Offset = "0xEF618C", VA = "0xEF618C")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AB")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float rootPin;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xEF6224", Offset = "0xEF6224", VA = "0xEF6224", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xEF68E8", Offset = "0xEF68E8", VA = "0xEF68E8", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xEF6974", Offset = "0xEF6974", VA = "0xEF6974", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xEF6A08", Offset = "0xEF6A08", VA = "0xEF6A08", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xEF6B00", Offset = "0xEF6B00", VA = "0xEF6B00")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xEF6B90", Offset = "0xEF6B90", VA = "0xEF6B90", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0xEF6F90", Offset = "0xEF6F90", VA = "0xEF6F90", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0xEF7188", Offset = "0xEF7188", VA = "0xEF7188", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0xEF7030", Offset = "0xEF7030", VA = "0xEF7030")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0xEF6D68", Offset = "0xEF6D68", VA = "0xEF6D68")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0xEF720C", Offset = "0xEF720C", VA = "0xEF720C")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AC")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x6000606")]
		[Address(RVA = "0xEF7288", Offset = "0xEF7288", VA = "0xEF7288")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0xEF7364", Offset = "0xEF7364", VA = "0xEF7364")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xEF73AC", Offset = "0xEF73AC", VA = "0xEF73AC")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0xEF74C0", Offset = "0xEF74C0", VA = "0xEF74C0")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xEF7510", Offset = "0xEF7510", VA = "0xEF7510")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xEF7584", Offset = "0xEF7584", VA = "0xEF7584", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xEF7724", Offset = "0xEF7724", VA = "0xEF7724", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0xEF7880", Offset = "0xEF7880", VA = "0xEF7880", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xEF7A84", Offset = "0xEF7A84", VA = "0xEF7A84", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xEF7B58", Offset = "0xEF7B58", VA = "0xEF7B58", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0xEF7C40", Offset = "0xEF7C40", VA = "0xEF7C40", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xEF7DA0", Offset = "0xEF7DA0", VA = "0xEF7DA0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0xEF7F3C", Offset = "0xEF7F3C", VA = "0xEF7F3C", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0xEF8174", Offset = "0xEF8174", VA = "0xEF8174", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0xEF8454", Offset = "0xEF8454", VA = "0xEF8454", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xEF848C", Offset = "0xEF848C", VA = "0xEF848C", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xEF8570", Offset = "0xEF8570", VA = "0xEF8570")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AD")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x40003E3")]
		Body,
		[Token(Token = "0x40003E4")]
		LeftShoulder,
		[Token(Token = "0x40003E5")]
		RightShoulder,
		[Token(Token = "0x40003E6")]
		LeftThigh,
		[Token(Token = "0x40003E7")]
		RightThigh,
		[Token(Token = "0x40003E8")]
		LeftHand,
		[Token(Token = "0x40003E9")]
		RightHand,
		[Token(Token = "0x40003EA")]
		LeftFoot,
		[Token(Token = "0x40003EB")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x20000AE")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x40003ED")]
		LeftArm,
		[Token(Token = "0x40003EE")]
		RightArm,
		[Token(Token = "0x40003EF")]
		LeftLeg,
		[Token(Token = "0x40003F0")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x20000AF")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		public float spineStiffness;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(-1f, 1f)]
		public float pullBodyVertical;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-1f, 1f)]
		public float pullBodyHorizontal;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x17000086")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x6000617")]
			[Address(RVA = "0xEF86C8", Offset = "0xEF86C8", VA = "0xEF86C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x6000618")]
			[Address(RVA = "0xEF8808", Offset = "0xEF8808", VA = "0xEF8808")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x6000619")]
			[Address(RVA = "0xEF8810", Offset = "0xEF8810", VA = "0xEF8810")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x600061A")]
			[Address(RVA = "0xEF8818", Offset = "0xEF8818", VA = "0xEF8818")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x600061B")]
			[Address(RVA = "0xEF8820", Offset = "0xEF8820", VA = "0xEF8820")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008B")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x600061C")]
			[Address(RVA = "0xEF8828", Offset = "0xEF8828", VA = "0xEF8828")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008C")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x600061D")]
			[Address(RVA = "0xEF8830", Offset = "0xEF8830", VA = "0xEF8830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008D")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x600061E")]
			[Address(RVA = "0xEF8838", Offset = "0xEF8838", VA = "0xEF8838")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x600061F")]
			[Address(RVA = "0xEF8840", Offset = "0xEF8840", VA = "0xEF8840")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x6000620")]
			[Address(RVA = "0xEF8848", Offset = "0xEF8848", VA = "0xEF8848")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x6000621")]
			[Address(RVA = "0xEF8874", Offset = "0xEF8874", VA = "0xEF8874")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x6000622")]
			[Address(RVA = "0xEF88A0", Offset = "0xEF88A0", VA = "0xEF88A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000092")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x6000623")]
			[Address(RVA = "0xEF88CC", Offset = "0xEF88CC", VA = "0xEF88CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000093")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x6000624")]
			[Address(RVA = "0xEF88F8", Offset = "0xEF88F8", VA = "0xEF88F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x6000625")]
			[Address(RVA = "0xEF8920", Offset = "0xEF8920", VA = "0xEF8920")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x6000626")]
			[Address(RVA = "0xEF894C", Offset = "0xEF894C", VA = "0xEF894C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x6000627")]
			[Address(RVA = "0xEF8978", Offset = "0xEF8978", VA = "0xEF8978")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x6000628")]
			[Address(RVA = "0xEF89A4", Offset = "0xEF89A4", VA = "0xEF89A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x6000638")]
			[Address(RVA = "0xEFABDC", Offset = "0xEFABDC", VA = "0xEFABDC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000639")]
			[Address(RVA = "0xEFABE8", Offset = "0xEFABE8", VA = "0xEFABE8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xEF89CC", Offset = "0xEF89CC", VA = "0xEF89CC")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xEF8ACC", Offset = "0xEF8ACC", VA = "0xEF8ACC")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0xEF8A1C", Offset = "0xEF8A1C", VA = "0xEF8A1C")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0xEF8B44", Offset = "0xEF8B44", VA = "0xEF8B44")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0xEF86D0", Offset = "0xEF86D0", VA = "0xEF86D0")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0xEF8C0C", Offset = "0xEF8C0C", VA = "0xEF8C0C")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0xEF8CBC", Offset = "0xEF8CBC", VA = "0xEF8CBC")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xEF8D68", Offset = "0xEF8D68", VA = "0xEF8D68")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xEF8E14", Offset = "0xEF8E14", VA = "0xEF8E14")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xEF8E1C", Offset = "0xEF8E1C", VA = "0xEF8E1C")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xEF8E44", Offset = "0xEF8E44", VA = "0xEF8E44")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xEF8F04", Offset = "0xEF8F04", VA = "0xEF8F04", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xEF9098", Offset = "0xEF9098", VA = "0xEF9098")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xEFA4D4", Offset = "0xEFA4D4", VA = "0xEFA4D4")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0xEFAA84", Offset = "0xEFAA84", VA = "0xEFAA84")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0xEFAAE0", Offset = "0xEFAAE0", VA = "0xEFAAE0")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0xEFA924", Offset = "0xEFA924", VA = "0xEFA924")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xEFA9D4", Offset = "0xEFA9D4", VA = "0xEFA9D4")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xEFABF4", Offset = "0xEFABF4", VA = "0xEFABF4")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0xEFACB8", Offset = "0xEFACB8", VA = "0xEFACB8", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0xEFAD88", Offset = "0xEFAD88", VA = "0xEFAD88")]
		private void PullBody()
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0xEFAEA4", Offset = "0xEFAEA4", VA = "0xEFAEA4")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0xEFB034", Offset = "0xEFB034", VA = "0xEFB034")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0xEFB1AC", Offset = "0xEFB1AC", VA = "0xEFB1AC", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0xEFB40C", Offset = "0xEFB40C", VA = "0xEFB40C", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0xEFB484", Offset = "0xEFB484", VA = "0xEFB484")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B0")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x17000099")]
		protected virtual int minBones
		{
			[Token(Token = "0x600064C")]
			[Address(RVA = "0xEFBD0C", Offset = "0xEFBD0C", VA = "0xEFBD0C", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700009A")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x600064D")]
			[Address(RVA = "0xEFBD14", Offset = "0xEFBD14", VA = "0xEFBD14", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009B")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x600064E")]
			[Address(RVA = "0xEFBD1C", Offset = "0xEFBD1C", VA = "0xEFBD1C", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009C")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x6000652")]
			[Address(RVA = "0xEFBD2C", Offset = "0xEFBD2C", VA = "0xEFBD2C", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700009D")]
		protected float positionOffset
		{
			[Token(Token = "0x6000653")]
			[Address(RVA = "0xEF3A00", Offset = "0xEF3A00", VA = "0xEF3A00")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0xEFB490", Offset = "0xEFB490", VA = "0xEFB490")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0xEFB638", Offset = "0xEFB638", VA = "0xEFB638")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0xEFB784", Offset = "0xEFB784", VA = "0xEFB784", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xEFB7E0", Offset = "0xEFB7E0", VA = "0xEFB7E0", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xEFB850", Offset = "0xEFB850", VA = "0xEFB850", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0xEFBC28", Offset = "0xEFBC28", VA = "0xEFBC28", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0xEFBC30", Offset = "0xEFBC30", VA = "0xEFBC30", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0xEFBD24", Offset = "0xEFBD24", VA = "0xEFBD24", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0xEFBD28", Offset = "0xEFBD28", VA = "0xEFBD28", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0xEF2EEC", Offset = "0xEF2EEC", VA = "0xEF2EEC")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xEF3654", Offset = "0xEF3654", VA = "0xEF3654")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xEFBDE8", Offset = "0xEFBDE8", VA = "0xEFBDE8")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0xEF1E78", Offset = "0xEF1E78", VA = "0xEF1E78")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B1")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xEFC07C", Offset = "0xEFC07C", VA = "0xEFC07C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0xEFC420", Offset = "0xEFC420", VA = "0xEFC420")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0xEFC4D0", Offset = "0xEFC4D0", VA = "0xEFC4D0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0xEFC650", Offset = "0xEFC650", VA = "0xEFC650", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0xEFC7B0", Offset = "0xEFC7B0", VA = "0xEFC7B0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0xEFC7F0", Offset = "0xEFC7F0", VA = "0xEFC7F0", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xEFC840", Offset = "0xEFC840", VA = "0xEFC840", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xEFCBA0", Offset = "0xEFCBA0", VA = "0xEFCBA0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0xEFCBC0", Offset = "0xEFCBC0", VA = "0xEFCBC0")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0xEFC898", Offset = "0xEFC898", VA = "0xEFC898")]
		private void Read()
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0xEFCC50", Offset = "0xEFCC50", VA = "0xEFCC50")]
		private void Write()
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0xEFCDC8", Offset = "0xEFCDC8", VA = "0xEFCDC8")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B2")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x20000B3")]
		public enum BendModifier
		{
			[Token(Token = "0x400041B")]
			Animation,
			[Token(Token = "0x400041C")]
			Target,
			[Token(Token = "0x400041D")]
			Parent,
			[Token(Token = "0x400041E")]
			Arm,
			[Token(Token = "0x400041F")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x20000B4")]
		public struct AxisDirection
		{
			[Token(Token = "0x4000420")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x4000421")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x4000422")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x600066D")]
			[Address(RVA = "0xEFE3D8", Offset = "0xEFE3D8", VA = "0xEFE3D8")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float bendModifierWeight;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x1700009E")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x600066A")]
			[Address(RVA = "0xEFE3BC", Offset = "0xEFE3BC", VA = "0xEFE3BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xEFCFBC", Offset = "0xEFCFBC", VA = "0xEFCFBC")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0xEFD000", Offset = "0xEFD000", VA = "0xEFD000")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xEFD040", Offset = "0xEFD040", VA = "0xEFD040", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0xEFD580", Offset = "0xEFD580", VA = "0xEFD580", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xEFE0A0", Offset = "0xEFE0A0", VA = "0xEFE0A0", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0xEFE148", Offset = "0xEFE148", VA = "0xEFE148")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0xEFE324", Offset = "0xEFE324", VA = "0xEFE324")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0xEFD394", Offset = "0xEFD394", VA = "0xEFD394")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0xEFD63C", Offset = "0xEFD63C", VA = "0xEFD63C")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20000B5")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000B6")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x4000434")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x170000A5")]
			public Vector3 forward
			{
				[Token(Token = "0x600068D")]
				[Address(RVA = "0xF0024C", Offset = "0xF0024C", VA = "0xF0024C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000689")]
			[Address(RVA = "0xF00908", Offset = "0xF00908", VA = "0xF00908")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x600068A")]
			[Address(RVA = "0xEFF36C", Offset = "0xEFF36C", VA = "0xEFF36C")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x600068B")]
			[Address(RVA = "0xEFF65C", Offset = "0xEFF65C", VA = "0xEFF65C")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x600068C")]
			[Address(RVA = "0xF00594", Offset = "0xF00594", VA = "0xF00594")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float headWeight;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float eyesWeight;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 1f)]
		public float clampWeightHead;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float clampWeightEyes;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool isDirty;

		[Token(Token = "0x1700009F")]
		protected bool spineIsValid
		{
			[Token(Token = "0x600067D")]
			[Address(RVA = "0xEFEAFC", Offset = "0xEFEAFC", VA = "0xEFEAFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A0")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x600067E")]
			[Address(RVA = "0xEFECA4", Offset = "0xEFECA4", VA = "0xEFECA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A1")]
		protected bool headIsValid
		{
			[Token(Token = "0x6000680")]
			[Address(RVA = "0xEFEBC8", Offset = "0xEFEBC8", VA = "0xEFEBC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A2")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x6000681")]
			[Address(RVA = "0xEFECC8", Offset = "0xEFECC8", VA = "0xEFECC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A3")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x6000683")]
			[Address(RVA = "0xEFEBD8", Offset = "0xEFEBD8", VA = "0xEFEBD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A4")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x6000684")]
			[Address(RVA = "0xEFED34", Offset = "0xEFED34", VA = "0xEFED34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0xEFE574", Offset = "0xEFE574", VA = "0xEFE574")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0xEFE590", Offset = "0xEFE590", VA = "0xEFE590")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0xEFE5BC", Offset = "0xEFE5BC", VA = "0xEFE5BC")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0xEFE5F4", Offset = "0xEFE5F4", VA = "0xEFE5F4")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0xEFE63C", Offset = "0xEFE63C", VA = "0xEFE63C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0xEFE694", Offset = "0xEFE694", VA = "0xEFE694")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0xEFE704", Offset = "0xEFE704", VA = "0xEFE704", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0xEFE810", Offset = "0xEFE810", VA = "0xEFE810")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0xEFE81C", Offset = "0xEFE81C", VA = "0xEFE81C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0xEFE940", Offset = "0xEFE940", VA = "0xEFE940", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0xEFED58", Offset = "0xEFED58", VA = "0xEFED58", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0xEFEFAC", Offset = "0xEFEFAC", VA = "0xEFEFAC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0xEFF10C", Offset = "0xEFF10C", VA = "0xEFF10C")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0xEFF398", Offset = "0xEFF398", VA = "0xEFF398", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0xEFF748", Offset = "0xEFF748", VA = "0xEFF748", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0xEFF80C", Offset = "0xEFF80C", VA = "0xEFF80C")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0xEFFA28", Offset = "0xEFFA28", VA = "0xEFFA28")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0xEFFD70", Offset = "0xEFFD70", VA = "0xEFFD70")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0xF0027C", Offset = "0xF0027C", VA = "0xF0027C")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xEFF1CC", Offset = "0xEFF1CC", VA = "0xEFF1CC")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xF0069C", Offset = "0xF0069C", VA = "0xF0069C")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B7")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000B8")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x400043E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x400043F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x60006A5")]
			[Address(RVA = "0xF033F8", Offset = "0xF033F8", VA = "0xF033F8")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x60006A6")]
			[Address(RVA = "0xF034E8", Offset = "0xF034E8", VA = "0xF034E8")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60006A7")]
			[Address(RVA = "0xF03578", Offset = "0xF03578", VA = "0xF03578")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006A8")]
			[Address(RVA = "0xF035A8", Offset = "0xF035A8", VA = "0xF035A8")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x600068E")]
		[Address(RVA = "0xF0090C", Offset = "0xF0090C", VA = "0xF0090C")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xF00AA0", Offset = "0xF00AA0", VA = "0xF00AA0")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xF00C20", Offset = "0xF00C20", VA = "0xF00C20")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xF00C2C", Offset = "0xF00C2C", VA = "0xF00C2C")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xF00C48", Offset = "0xF00C48", VA = "0xF00C48")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xF00C54", Offset = "0xF00C54", VA = "0xF00C54")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xF00C5C", Offset = "0xF00C5C", VA = "0xF00C5C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xF00D6C", Offset = "0xF00D6C", VA = "0xF00D6C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xF00E64", Offset = "0xF00E64", VA = "0xF00E64", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xF00E98", Offset = "0xF00E98", VA = "0xF00E98", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0xF00EDC", Offset = "0xF00EDC", VA = "0xF00EDC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xF012B0", Offset = "0xF012B0", VA = "0xF012B0")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xF01328", Offset = "0xF01328", VA = "0xF01328")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0xF0181C", Offset = "0xF0181C", VA = "0xF0181C")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xF01974", Offset = "0xF01974", VA = "0xF01974", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0xF01B28", Offset = "0xF01B28", VA = "0xF01B28")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xF01AA0", Offset = "0xF01AA0", VA = "0xF01AA0")]
		public void InitiateBones()
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xF01C18", Offset = "0xF01C18", VA = "0xF01C18", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xF023EC", Offset = "0xF023EC", VA = "0xF023EC", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xF023F0", Offset = "0xF023F0", VA = "0xF023F0", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xF023F4", Offset = "0xF023F4", VA = "0xF023F4", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xF0222C", Offset = "0xF0222C", VA = "0xF0222C")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xEFE1CC", Offset = "0xEFE1CC", VA = "0xEFE1CC")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B9")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000BA")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20000BB")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4000486")]
				YawPitch,
				[Token(Token = "0x4000487")]
				FromTo
			}

			[Token(Token = "0x4000468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The hand target. This should not be the hand controller itself, but a child GameObject parented to it so you could adjust its position/rotation to match the orientation of the hand bone. The best practice for setup would be to move the hand controller to the avatar's hand as it it was held by the avatar, duplicate the avatar's hand bone and parent it to the hand controller. Then assign the duplicate to this slot.")]
			[LargeHeader("Hand")]
			public Transform target;

			[Token(Token = "0x4000469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Positional weight of the hand target. Note that if you have nulled the target, the hand will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x400046A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the hand target. Note that if you have nulled the target, the hand will still be rotated to the last rotation of the target until you set this value to 0.")]
			public float rotationWeight;

			[Token(Token = "0x400046B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("The weight of shoulder rotation")]
			[LargeHeader("Shoulder")]
			[Range(0f, 1f)]
			public float shoulderRotationWeight;

			[Token(Token = "0x400046C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Different techniques for shoulder bone rotation.")]
			[ShowIf("shoulderRotationWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x400046D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("The weight of twisting the shoulders backwards when arms are lifted up.")]
			[ShowRangeIf(0f, 1f, "shoulderRotationWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			public float shoulderTwistWeight;

			[Token(Token = "0x400046E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Tweak this value to adjust shoulder rotation around the yaw (up) axis.")]
			[ShowIf("shoulderRotationWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			public float shoulderYawOffset;

			[Token(Token = "0x400046F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Tweak this value to adjust shoulder rotation around the pitch (forward) axis.")]
			[ShowIf("shoulderRotationWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			public float shoulderPitchOffset;

			[Token(Token = "0x4000470")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[LargeHeader("Bending")]
			[Tooltip("The elbow will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4000471")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("If greater than 0, will bend the elbow towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x4000472")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Angular offset of the elbow bending direction.")]
			[Range(-180f, 180f)]
			public float swivelOffset;

			[Token(Token = "0x4000473")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4000474")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000475")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Range(0.01f, 2f)]
			[Tooltip("Use this to make the arm shorter/longer. Works by displacement of hand and forearm localPosition.")]
			[LargeHeader("Stretching")]
			public float armLengthMlp;

			[Token(Token = "0x4000476")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[Tooltip("'Time' represents (target distance / arm length) and 'value' represents the amount of stretching. So value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right by the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000477")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000478")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000479")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x400047A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x400047D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool hasShoulder;

			[Token(Token = "0x400047E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x400047F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4000480")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Quaternion chestRotation;

			[Token(Token = "0x4000481")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
			private Vector3 chestForward;

			[Token(Token = "0x4000482")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			private Vector3 chestUp;

			[Token(Token = "0x4000483")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4000484")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x170000A8")]
			public Vector3 position
			{
				[Token(Token = "0x60006C7")]
				[Address(RVA = "0xF0C3C4", Offset = "0xF0C3C4", VA = "0xF0C3C4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60006C8")]
				[Address(RVA = "0xF0C3D0", Offset = "0xF0C3D0", VA = "0xF0C3D0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000A9")]
			public Quaternion rotation
			{
				[Token(Token = "0x60006C9")]
				[Address(RVA = "0xF0C3DC", Offset = "0xF0C3DC", VA = "0xF0C3DC")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60006CA")]
				[Address(RVA = "0xF0C3E8", Offset = "0xF0C3E8", VA = "0xF0C3E8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000AA")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x60006CB")]
				[Address(RVA = "0xF0C3F4", Offset = "0xF0C3F4", VA = "0xF0C3F4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AB")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x60006CC")]
				[Address(RVA = "0xF0C41C", Offset = "0xF0C41C", VA = "0xF0C41C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AC")]
			private VirtualBone forearm
			{
				[Token(Token = "0x60006CD")]
				[Address(RVA = "0xF0C450", Offset = "0xF0C450", VA = "0xF0C450")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AD")]
			private VirtualBone hand
			{
				[Token(Token = "0x60006CE")]
				[Address(RVA = "0xF0C490", Offset = "0xF0C490", VA = "0xF0C490")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006CF")]
			[Address(RVA = "0xF0C4D0", Offset = "0xF0C4D0", VA = "0xF0C4D0", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60006D0")]
			[Address(RVA = "0xF0CE30", Offset = "0xF0CE30", VA = "0xF0CE30", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x60006D1")]
			[Address(RVA = "0xF0D0DC", Offset = "0xF0D0DC", VA = "0xF0D0DC", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x60006D2")]
			[Address(RVA = "0xF0D100", Offset = "0xF0D100", VA = "0xF0D100")]
			private void Stretching()
			{
			}

			[Token(Token = "0x60006D3")]
			[Address(RVA = "0xF09EB8", Offset = "0xF09EB8", VA = "0xF09EB8")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x60006D4")]
			[Address(RVA = "0xF0DB34", Offset = "0xF0DB34", VA = "0xF0DB34", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60006D5")]
			[Address(RVA = "0xF0DB8C", Offset = "0xF0DB8C", VA = "0xF0DB8C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60006D6")]
			[Address(RVA = "0xF0D450", Offset = "0xF0D450", VA = "0xF0D450")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x60006D7")]
			[Address(RVA = "0xF0D4D0", Offset = "0xF0D4D0", VA = "0xF0D4D0")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006D8")]
			[Address(RVA = "0xF0DD98", Offset = "0xF0DD98", VA = "0xF0DD98")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x60006D9")]
			[Address(RVA = "0xF0BFBC", Offset = "0xF0BFBC", VA = "0xF0BFBC")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000BC")]
		public abstract class BodyPart
		{
			[Token(Token = "0x400048A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x400048B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x400048C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x400048D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x400048E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x400048F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x170000AE")]
			public float sqrMag
			{
				[Token(Token = "0x60006DF")]
				[Address(RVA = "0xF0DF54", Offset = "0xF0DF54", VA = "0xF0DF54")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60006E0")]
				[Address(RVA = "0xF0DF5C", Offset = "0xF0DF5C", VA = "0xF0DF5C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000AF")]
			public float mag
			{
				[Token(Token = "0x60006E1")]
				[Address(RVA = "0xF0DF64", Offset = "0xF0DF64", VA = "0xF0DF64")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60006E2")]
				[Address(RVA = "0xF0DF6C", Offset = "0xF0DF6C", VA = "0xF0DF6C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60006DA")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x60006DB")]
			public abstract void PreSolve(float scale);

			[Token(Token = "0x60006DC")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x60006DD")]
			public abstract void ApplyOffsets(float scale);

			[Token(Token = "0x60006DE")]
			public abstract void ResetOffsets();

			[Token(Token = "0x60006E3")]
			[Address(RVA = "0xF0DF74", Offset = "0xF0DF74", VA = "0xF0DF74")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x60006E4")]
			[Address(RVA = "0xF06FF4", Offset = "0xF06FF4", VA = "0xF06FF4")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60006E5")]
			[Address(RVA = "0xF0DF7C", Offset = "0xF0DF7C", VA = "0xF0DF7C")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x60006E6")]
			[Address(RVA = "0xF0E004", Offset = "0xF0E004", VA = "0xF0E004")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x60006E7")]
			[Address(RVA = "0xF0E09C", Offset = "0xF0E09C", VA = "0xF0E09C")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006E8")]
			[Address(RVA = "0xF09AFC", Offset = "0xF09AFC", VA = "0xF09AFC")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x60006E9")]
			[Address(RVA = "0xF0D9CC", Offset = "0xF0D9CC", VA = "0xF0D9CC")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x60006EA")]
			[Address(RVA = "0xF0E0E4", Offset = "0xF0E0E4", VA = "0xF0E0E4")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x60006EB")]
			[Address(RVA = "0xF0E208", Offset = "0xF0E208", VA = "0xF0E208")]
			public void Visualize()
			{
			}

			[Token(Token = "0x60006EC")]
			[Address(RVA = "0xF0DEB0", Offset = "0xF0DEB0", VA = "0xF0DEB0")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000BD")]
		public class Footstep
		{
			[Token(Token = "0x4000490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4000491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4000492")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4000493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4000494")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4000495")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4000496")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
			public bool relaxFlag;

			[Token(Token = "0x4000498")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4000499")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x400049A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x400049B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x400049C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x400049D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x400049E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x170000B0")]
			public bool isStepping
			{
				[Token(Token = "0x60006ED")]
				[Address(RVA = "0xF0E21C", Offset = "0xF0E21C", VA = "0xF0E21C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000B1")]
			public float stepProgress
			{
				[Token(Token = "0x60006EE")]
				[Address(RVA = "0xF0E230", Offset = "0xF0E230", VA = "0xF0E230")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60006EF")]
				[Address(RVA = "0xF0E238", Offset = "0xF0E238", VA = "0xF0E238")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60006F0")]
			[Address(RVA = "0xF0E240", Offset = "0xF0E240", VA = "0xF0E240")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x60006F1")]
			[Address(RVA = "0xF0E404", Offset = "0xF0E404", VA = "0xF0E404")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x60006F2")]
			[Address(RVA = "0xF0E44C", Offset = "0xF0E44C", VA = "0xF0E44C")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x60006F3")]
			[Address(RVA = "0xF0E690", Offset = "0xF0E690", VA = "0xF0E690")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed, float deltaTime)
			{
			}

			[Token(Token = "0x60006F4")]
			[Address(RVA = "0xF0E830", Offset = "0xF0E830", VA = "0xF0E830")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed, float deltaTime)
			{
			}

			[Token(Token = "0x60006F5")]
			[Address(RVA = "0xF0EA28", Offset = "0xF0EA28", VA = "0xF0EA28")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep, float deltaTime)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000BE")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x400049F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[LargeHeader("Foot/Toe")]
			[Tooltip("The foot/toe target. This should not be the foot tracker itself, but a child GameObject parented to it so you could adjust its position/rotation to match the orientation of the foot/toe bone. If a toe bone is assigned in the References, the solver will match the toe bone to this target. If no toe bone assigned, foot bone will be used instead.")]
			public Transform target;

			[Token(Token = "0x40004A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Positional weight of the toe/foot target. Note that if you have nulled the target, the foot will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x40004A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Rotational weight of the toe/foot target. Note that if you have nulled the target, the foot will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x40004A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("The knee will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			[LargeHeader("Bending")]
			public Transform bendGoal;

			[Token(Token = "0x40004A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			[Tooltip("If greater than 0, will bend the knee towards the 'Bend Goal' Transform.")]
			public float bendGoalWeight;

			[Token(Token = "0x40004A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Angular offset of knee bending direction.")]
			[Range(-180f, 180f)]
			public float swivelOffset;

			[Token(Token = "0x40004A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If 0, the bend plane will be locked to the rotation of the pelvis and rotating the foot will have no effect on the knee direction. If 1, to the target rotation of the leg so that the knee will bend towards the forward axis of the foot. Values in between will be slerped between the two.")]
			[Range(0f, 1f)]
			public float bendToTargetWeight;

			[Token(Token = "0x40004A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[LargeHeader("Stretching")]
			[Tooltip("Use this to make the leg shorter/longer. Works by displacement of foot and calf localPosition.")]
			[Range(0.01f, 2f)]
			public float legLengthMlp;

			[Token(Token = "0x40004A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Evaluates stretching of the leg by target distance relative to leg length. Value at time 1 represents stretching amount at the point where distance to the target is equal to leg length. Value at time 1 represents stretching amount at the point where distance to the target is double the leg length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce knee snapping (start stretching the arm slightly before target distance reaches leg length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x40004A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x40004A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x40004AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40004AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x40004AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x40004B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x40004B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x40004B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x40004B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x40004B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x170000B2")]
			public Vector3 position
			{
				[Token(Token = "0x60006F6")]
				[Address(RVA = "0xF0EB98", Offset = "0xF0EB98", VA = "0xF0EB98")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60006F7")]
				[Address(RVA = "0xF0EBA4", Offset = "0xF0EBA4", VA = "0xF0EBA4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000B3")]
			public Quaternion rotation
			{
				[Token(Token = "0x60006F8")]
				[Address(RVA = "0xF0EBB0", Offset = "0xF0EBB0", VA = "0xF0EBB0")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60006F9")]
				[Address(RVA = "0xF0EBBC", Offset = "0xF0EBBC", VA = "0xF0EBBC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000B4")]
			public bool hasToes
			{
				[Token(Token = "0x60006FA")]
				[Address(RVA = "0xF0EBC8", Offset = "0xF0EBC8", VA = "0xF0EBC8")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60006FB")]
				[Address(RVA = "0xF0EBD0", Offset = "0xF0EBD0", VA = "0xF0EBD0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000B5")]
			public VirtualBone thigh
			{
				[Token(Token = "0x60006FC")]
				[Address(RVA = "0xF0EBDC", Offset = "0xF0EBDC", VA = "0xF0EBDC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B6")]
			private VirtualBone calf
			{
				[Token(Token = "0x60006FD")]
				[Address(RVA = "0xF0EC04", Offset = "0xF0EC04", VA = "0xF0EC04")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B7")]
			private VirtualBone foot
			{
				[Token(Token = "0x60006FE")]
				[Address(RVA = "0xF0EC30", Offset = "0xF0EC30", VA = "0xF0EC30")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B8")]
			private VirtualBone toes
			{
				[Token(Token = "0x60006FF")]
				[Address(RVA = "0xF0EC5C", Offset = "0xF0EC5C", VA = "0xF0EC5C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B9")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6000700")]
				[Address(RVA = "0xF08B94", Offset = "0xF08B94", VA = "0xF08B94")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000BA")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6000701")]
				[Address(RVA = "0xF0EC88", Offset = "0xF0EC88", VA = "0xF0EC88")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000702")]
				[Address(RVA = "0xF0EC94", Offset = "0xF0EC94", VA = "0xF0EC94")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000BB")]
			public Vector3 bendNormalRelToPelvis
			{
				[Token(Token = "0x6000703")]
				[Address(RVA = "0xF0ECA0", Offset = "0xF0ECA0", VA = "0xF0ECA0")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000704")]
				[Address(RVA = "0xF0ECB0", Offset = "0xF0ECB0", VA = "0xF0ECB0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170000BC")]
			public Vector3 bendNormalRelToTarget
			{
				[Token(Token = "0x6000705")]
				[Address(RVA = "0xF0ECC0", Offset = "0xF0ECC0", VA = "0xF0ECC0")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000706")]
				[Address(RVA = "0xF0ECD0", Offset = "0xF0ECD0", VA = "0xF0ECD0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x6000707")]
			[Address(RVA = "0xF0ECE0", Offset = "0xF0ECE0", VA = "0xF0ECE0", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000708")]
			[Address(RVA = "0xF0F290", Offset = "0xF0F290", VA = "0xF0F290", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x6000709")]
			[Address(RVA = "0xF0FAC0", Offset = "0xF0FAC0", VA = "0xF0FAC0", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x600070A")]
			[Address(RVA = "0xF0FA70", Offset = "0xF0FA70", VA = "0xF0FA70")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x600070B")]
			[Address(RVA = "0xF0F824", Offset = "0xF0F824", VA = "0xF0F824")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x600070C")]
			[Address(RVA = "0xF09C24", Offset = "0xF09C24", VA = "0xF09C24")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x600070D")]
			[Address(RVA = "0xF10334", Offset = "0xF10334", VA = "0xF10334")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x600070E")]
			[Address(RVA = "0xF0FF9C", Offset = "0xF0FF9C", VA = "0xF0FF9C")]
			private void Stretching()
			{
			}

			[Token(Token = "0x600070F")]
			[Address(RVA = "0xF1078C", Offset = "0xF1078C", VA = "0xF1078C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000710")]
			[Address(RVA = "0xF10994", Offset = "0xF10994", VA = "0xF10994", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000711")]
			[Address(RVA = "0xF0C168", Offset = "0xF0C168", VA = "0xF0C168")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000BF")]
		public class Locomotion
		{
			[Serializable]
			[Token(Token = "0x20000C0")]
			public enum Mode
			{
				[Token(Token = "0x4000500")]
				Procedural,
				[Token(Token = "0x4000501")]
				Animated
			}

			[Token(Token = "0x40004BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Procedural (legacy) or animated locomotion.")]
			public Mode mode;

			[Token(Token = "0x40004BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Used for blending in/out of procedural/animated locomotion.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x40004BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[ShowIf("mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Start moving (horizontal distance to HMD + HMD velocity) threshold.")]
			public float moveThreshold;

			[Token(Token = "0x40004BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			[ShowLargeHeaderIf("Animation", "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			private byte animationHeader;

			[Token(Token = "0x40004BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Minimum locomotion animation speed.")]
			[ShowRangeIf(0.1f, 1f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float minAnimationSpeed;

			[Token(Token = "0x40004BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Maximum locomotion animation speed.")]
			[ShowRangeIf(1f, 10f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float maxAnimationSpeed;

			[Token(Token = "0x40004C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Smoothing time for Vector3.SmoothDamping 'VRIK_Horizontal' and 'VRIK_Vertical' parameters. Larger values make animation smoother, but less responsive.")]
			[ShowRangeIf(0.05f, 0.2f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float animationSmoothTime;

			[Token(Token = "0x40004C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[ShowLargeHeaderIf("Root Position", "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[SerializeField]
			private byte rootPositionHeader;

			[Token(Token = "0x40004C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("X and Z standing offset from the horizontal position of the HMD.")]
			[ShowIf("mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public Vector2 standOffset;

			[Token(Token = "0x40004C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[ShowRangeIf(0f, 50f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Lerp root towards the horizontal position of the HMD with this speed while moving.")]
			public float rootLerpSpeedWhileMoving;

			[Token(Token = "0x40004C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[Tooltip("Lerp root towards the horizontal position of the HMD with this speed while in transition from locomotion to idle state.")]
			[ShowRangeIf(0f, 50f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			public float rootLerpSpeedWhileStopping;

			[Token(Token = "0x40004C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[ShowRangeIf(0f, 50f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Lerp root towards the horizontal position of the HMD with this speed while turning on spot.")]
			public float rootLerpSpeedWhileTurning;

			[Token(Token = "0x40004C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[ShowIf("mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Max horizontal distance from the root to the HMD.")]
			public float maxRootOffset;

			[Token(Token = "0x40004C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[SerializeField]
			[ShowLargeHeaderIf("Root Rotation", "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			private byte rootRotationHeader;

			[Token(Token = "0x40004C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[ShowRangeIf(0f, 180f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Max root angle from head forward while moving (ik.solver.spine.maxRootAngle).")]
			public float maxRootAngleMoving;

			[Token(Token = "0x40004C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[ShowRangeIf(0f, 180f, "mode", Mode.Animated, null, false, ShowIfMode.Hidden)]
			[Tooltip("Max root angle from head forward while standing (ik.solver.spine.maxRootAngle.")]
			public float maxRootAngleStanding;

			[Token(Token = "0x40004CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[HideInInspector]
			[SerializeField]
			public float stepLengthMlp;

			[Token(Token = "0x40004CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Animator animator;

			[Token(Token = "0x40004CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3 velocityLocal;

			[Token(Token = "0x40004CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private Vector3 velocityLocalV;

			[Token(Token = "0x40004CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Vector3 lastCorrection;

			[Token(Token = "0x40004CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 lastHeadTargetPos;

			[Token(Token = "0x40004D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Vector3 lastSpeedRootPos;

			[Token(Token = "0x40004D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private Vector3 lastEndRootPos;

			[Token(Token = "0x40004D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float rootLerpSpeed;

			[Token(Token = "0x40004D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private float rootVelocityV;

			[Token(Token = "0x40004D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private float animSpeed;

			[Token(Token = "0x40004D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private float animSpeedV;

			[Token(Token = "0x40004D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float stopMoveTimer;

			[Token(Token = "0x40004D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float turn;

			[Token(Token = "0x40004D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private float maxRootAngleV;

			[Token(Token = "0x40004D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private float currentAnimationSmoothTime;

			[Token(Token = "0x40004DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private bool isMoving;

			[Token(Token = "0x40004DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
			private bool firstFrame;

			[Token(Token = "0x40004DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static int VRIK_Horizontal;

			[Token(Token = "0x40004DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private static int VRIK_Vertical;

			[Token(Token = "0x40004DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static int VRIK_IsMoving;

			[Token(Token = "0x40004DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private static int VRIK_Speed;

			[Token(Token = "0x40004E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private static int VRIK_Turn;

			[Token(Token = "0x40004E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private static bool isHashed;

			[Token(Token = "0x40004E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private float lastVelLocalMag;

			[Token(Token = "0x40004E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[Tooltip("Tries to maintain this distance between the legs.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float footDistance;

			[Token(Token = "0x40004E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("Makes a step only if step target position is at least this far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past the 'Angle Threshold'.")]
			public float stepThreshold;

			[Token(Token = "0x40004E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[Tooltip("Makes a step only if step target position is at least 'Step Threshold' far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past this value.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float angleThreshold;

			[Token(Token = "0x40004E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("Multiplies angle of the center of mass - center of pressure vector. Larger value makes the character step sooner if losing balance.")]
			public float comAngleMlp;

			[Token(Token = "0x40004E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[Tooltip("Maximum magnitude of head/hand target velocity used in prediction.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float maxVelocity;

			[Token(Token = "0x40004E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("The amount of head/hand target velocity prediction.")]
			public float velocityFactor;

			[Token(Token = "0x40004E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			[ShowRangeIf(0.9f, 1f, "mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("How much can a leg be extended before it is forced to step to another position? 1 means fully stretched.")]
			public float maxLegStretch;

			[Token(Token = "0x40004EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[Tooltip("The speed of lerping the root of the character towards the horizontal mid-point of the footsteps.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float rootSpeed;

			[Token(Token = "0x40004EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("The speed of moving a foot to the next position.")]
			public float stepSpeed;

			[Token(Token = "0x40004EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("The height of the foot by normalized step progress (0 - 1).")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x40004ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			[Tooltip("Reduce this value if locomotion makes the head bob too much.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float maxBodyYOffset;

			[Token(Token = "0x40004EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("The height offset of the heel by normalized step progress (0 - 1).")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x40004EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			[ShowRangeIf(0f, 180f, "mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("Rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle.")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x40004F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			[Tooltip("The speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x40004F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			[Tooltip("Interpolation mode of the step.")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x40004F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[Tooltip("Offset for the approximated center of mass.")]
			[ShowIf("mode", Mode.Procedural, null, false, ShowIfMode.Hidden)]
			public Vector3 offset;

			[Token(Token = "0x40004F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x40004F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x40004F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x40004F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x40004F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			[SerializeField]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x40004F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			[HideInInspector]
			[SerializeField]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x40004FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			private Footstep[] footsteps;

			[Token(Token = "0x40004FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
			private Vector3 lastComPosition;

			[Token(Token = "0x40004FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
			private Vector3 comVelocity;

			[Token(Token = "0x40004FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
			private int leftFootIndex;

			[Token(Token = "0x40004FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private int rightFootIndex;

			[Token(Token = "0x170000BD")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x600071D")]
				[Address(RVA = "0xF11750", Offset = "0xF11750", VA = "0xF11750")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600071E")]
				[Address(RVA = "0xF11760", Offset = "0xF11760", VA = "0xF11760")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000BE")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6000725")]
				[Address(RVA = "0xF11B78", Offset = "0xF11B78", VA = "0xF11B78")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000BF")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6000726")]
				[Address(RVA = "0xF11BAC", Offset = "0xF11BAC", VA = "0xF11BAC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000C0")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6000727")]
				[Address(RVA = "0xF11BE4", Offset = "0xF11BE4", VA = "0xF11BE4")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x170000C1")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6000728")]
				[Address(RVA = "0xF11C18", Offset = "0xF11C18", VA = "0xF11C18")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000712")]
			[Address(RVA = "0xF070B4", Offset = "0xF070B4", VA = "0xF070B4")]
			public void Initiate(Animator animator, Vector3[] positions, Quaternion[] rotations, bool hasToes, float scale)
			{
			}

			[Token(Token = "0x6000713")]
			[Address(RVA = "0xF04B34", Offset = "0xF04B34", VA = "0xF04B34")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000714")]
			[Address(RVA = "0xF11068", Offset = "0xF11068", VA = "0xF11068")]
			public void Relax()
			{
			}

			[Token(Token = "0x6000715")]
			[Address(RVA = "0xF042B8", Offset = "0xF042B8", VA = "0xF042B8")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000716")]
			[Address(RVA = "0xF04278", Offset = "0xF04278", VA = "0xF04278")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6000717")]
			[Address(RVA = "0xF10DA0", Offset = "0xF10DA0", VA = "0xF10DA0")]
			public void Initiate_Animated(Animator animator, Vector3[] positions)
			{
			}

			[Token(Token = "0x6000718")]
			[Address(RVA = "0xF11698", Offset = "0xF11698", VA = "0xF11698")]
			private void ResetParams(Vector3[] positions)
			{
			}

			[Token(Token = "0x6000719")]
			[Address(RVA = "0xF08BC8", Offset = "0xF08BC8", VA = "0xF08BC8")]
			public void Reset_Animated(Vector3[] positions)
			{
			}

			[Token(Token = "0x600071A")]
			[Address(RVA = "0xF11488", Offset = "0xF11488", VA = "0xF11488")]
			private void AddDeltaRotation_Animated(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x600071B")]
			[Address(RVA = "0xF11648", Offset = "0xF11648", VA = "0xF11648")]
			private void AddDeltaPosition_Animated(Vector3 delta)
			{
			}

			[Token(Token = "0x600071C")]
			[Address(RVA = "0xF08E10", Offset = "0xF08E10", VA = "0xF08E10")]
			public void Solve_Animated(IKSolverVR solver, float scale, float deltaTime)
			{
			}

			[Token(Token = "0x600071F")]
			[Address(RVA = "0xF10A74", Offset = "0xF10A74", VA = "0xF10A74")]
			private void Initiate_Procedural(Vector3[] positions, Quaternion[] rotations, bool hasToes, float scale)
			{
			}

			[Token(Token = "0x6000720")]
			[Address(RVA = "0xF10E7C", Offset = "0xF10E7C", VA = "0xF10E7C")]
			private void Reset_Procedural(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000721")]
			[Address(RVA = "0xF1106C", Offset = "0xF1106C", VA = "0xF1106C")]
			private void Relax_Procedural()
			{
			}

			[Token(Token = "0x6000722")]
			[Address(RVA = "0xF110B8", Offset = "0xF110B8", VA = "0xF110B8")]
			private void AddDeltaRotation_Procedural(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000723")]
			[Address(RVA = "0xF11590", Offset = "0xF11590", VA = "0xF11590")]
			private void AddDeltaPosition_Procedural(Vector3 delta)
			{
			}

			[Token(Token = "0x6000724")]
			[Address(RVA = "0xF07710", Offset = "0xF07710", VA = "0xF07710")]
			public void Solve_Procedural(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset, float scale, float deltaTime)
			{
			}

			[Token(Token = "0x6000729")]
			[Address(RVA = "0xF117A4", Offset = "0xF117A4", VA = "0xF117A4")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x600072A")]
			[Address(RVA = "0xF1195C", Offset = "0xF1195C", VA = "0xF1195C")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x600072B")]
			[Address(RVA = "0xF119C8", Offset = "0xF119C8", VA = "0xF119C8")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x600072C")]
			[Address(RVA = "0xF0C250", Offset = "0xF0C250", VA = "0xF0C250")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000C1")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4000502")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The head target. This should not be the camera Transform itself, but a child GameObject parented to it so you could adjust its position/rotation  to match the orientation of the head bone. The best practice for setup would be to move the camera to the avatar's eyes, duplicate the avatar's head bone and parent it to the camera. Then assign the duplicate to this slot.")]
			[LargeHeader("Head")]
			public Transform headTarget;

			[Token(Token = "0x4000503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Positional weight of the head target. Note that if you have nulled the headTarget, the head will still be pulled to the last position of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x4000504")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Rotational weight of the head target. Note that if you have nulled the headTarget, the head will still be rotated to the last rotation of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4000505")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Clamps head rotation. Value of 0.5 allows 90 degrees of rotation for the head relative to the headTarget. Value of 0 allows 180 degrees and value of 1 means head rotation will be locked to the target.")]
			[Range(0f, 1f)]
			public float headClampWeight;

			[Token(Token = "0x4000506")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Minimum height of the head from the root of the character.")]
			public float minHeadHeight;

			[Token(Token = "0x4000507")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			[Tooltip("Allows for more natural locomotion animation for 3rd person networked avatars by inheriting vertical head bob motion from the animation while head target height is close to head bone height.")]
			public float useAnimatedHeadHeightWeight;

			[Token(Token = "0x4000508")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[ShowIf("useAnimatedHeadHeightWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			[Tooltip("If abs(head target height - head bone height) < this value, will use head bone height as head target Y.")]
			public float useAnimatedHeadHeightRange;

			[Token(Token = "0x4000509")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[ShowIf("useAnimatedHeadHeightWeight", 0f, float.PositiveInfinity, false, ShowIfMode.Hidden)]
			[Tooltip("Falloff range for the 'Use Animated Head Height Range' effect above. If head target height from head bone height is greater than useAnimatedHeadHeightRange + animatedHeadHeightBlend, then the head will be vertically locked to the head target again.")]
			public float animatedHeadHeightBlend;

			[Token(Token = "0x400050A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("The pelvis target (optional), useful for seated rigs or if you had an additional tracker on the backpack or belt are. The best practice for setup would be to duplicate the avatar's pelvis bone and parenting it to the pelvis tracker. Then assign the duplicate to this slot.")]
			[LargeHeader("Pelvis")]
			public Transform pelvisTarget;

			[Token(Token = "0x400050B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Positional weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be pulled to the last position of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x400050C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be rotated to the last rotation of the pelvisTarget until you set this value to 0.")]
			public float pelvisRotationWeight;

			[Token(Token = "0x400050D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("How much will the pelvis maintain its animated position?")]
			[Range(0f, 1f)]
			public float maintainPelvisPosition;

			[Token(Token = "0x400050E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[LargeHeader("Chest")]
			[Tooltip("If 'Chest Goal Weight' is greater than 0, the chest will be turned towards this Transform.")]
			public Transform chestGoal;

			[Token(Token = "0x400050F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Weight of turning the chest towards the 'Chest Goal'.")]
			[Range(0f, 1f)]
			public float chestGoalWeight;

			[Token(Token = "0x4000510")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Tooltip("Clamps chest rotation. Value of 0.5 allows 90 degrees of rotation for the chest relative to the head. Value of 0 allows 180 degrees and value of 1 means the chest will be locked relative to the head.")]
			[Range(0f, 1f)]
			public float chestClampWeight;

			[Token(Token = "0x4000511")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Range(0f, 1f)]
			[Tooltip("The amount of rotation applied to the chest based on hand positions.")]
			public float rotateChestByHands;

			[Token(Token = "0x4000512")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[LargeHeader("Spine")]
			[Range(0f, 1f)]
			[Tooltip("Determines how much the body will follow the position of the head.")]
			public float bodyPosStiffness;

			[Token(Token = "0x4000513")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[Range(0f, 1f)]
			[Tooltip("Determines how much the body will follow the rotation of the head.")]
			public float bodyRotStiffness;

			[Token(Token = "0x4000514")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[Range(0f, 1f)]
			[FormerlySerializedAs("chestRotationWeight")]
			[Tooltip("Determines how much the chest will rotate to the rotation of the head.")]
			public float neckStiffness;

			[Token(Token = "0x4000515")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[Tooltip("Moves the body horizontally along -character.forward axis by that value when the player is crouching.")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x4000516")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[Range(0f, 180f)]
			[Tooltip("Will automatically rotate the root of the character if the head target has turned past this angle.")]
			[LargeHeader("Root Rotation")]
			public float maxRootAngle;

			[Token(Token = "0x4000517")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[Tooltip("Angular offset for root heading. Adjust this value to turn the root relative to the HMD around the vertical axis. Usefulf for fighting or shooting games where you would sometimes want the avatar to stand at an angled stance.")]
			[Range(-180f, 180f)]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x4000518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4000519")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x400051A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x400051B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x400051C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x400051D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400051E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400051F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000520")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000521")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000522")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000523")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4000524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			[HideInInspector]
			internal Vector3 headPosition;

			[Token(Token = "0x4000527")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
			private Quaternion headRotation;

			[Token(Token = "0x4000528")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x4000529")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x400052A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x400052B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x400052C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x400052D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x400052E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x400052F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int pelvisIndex;

			[Token(Token = "0x4000530")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int spineIndex;

			[Token(Token = "0x4000531")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int chestIndex;

			[Token(Token = "0x4000532")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private int neckIndex;

			[Token(Token = "0x4000533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private int headIndex;

			[Token(Token = "0x4000534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float length;

			[Token(Token = "0x4000535")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private bool hasChest;

			[Token(Token = "0x4000536")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x219")]
			private bool hasNeck;

			[Token(Token = "0x4000537")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21A")]
			private bool hasLegs;

			[Token(Token = "0x4000538")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private float headHeight;

			[Token(Token = "0x4000539")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
			private float sizeMlp;

			[Token(Token = "0x400053A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
			private Vector3 chestForward;

			[Token(Token = "0x170000C2")]
			internal VirtualBone pelvis
			{
				[Token(Token = "0x600072D")]
				[Address(RVA = "0xF04B5C", Offset = "0xF04B5C", VA = "0xF04B5C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C3")]
			internal VirtualBone firstSpineBone
			{
				[Token(Token = "0x600072E")]
				[Address(RVA = "0xF11C50", Offset = "0xF11C50", VA = "0xF11C50")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C4")]
			internal VirtualBone chest
			{
				[Token(Token = "0x600072F")]
				[Address(RVA = "0xF09E70", Offset = "0xF09E70", VA = "0xF09E70")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C5")]
			internal VirtualBone head
			{
				[Token(Token = "0x6000730")]
				[Address(RVA = "0xF11770", Offset = "0xF11770", VA = "0xF11770")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C6")]
			private VirtualBone neck
			{
				[Token(Token = "0x6000731")]
				[Address(RVA = "0xF11C84", Offset = "0xF11C84", VA = "0xF11C84")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C7")]
			internal Quaternion anchorRotation
			{
				[Token(Token = "0x6000732")]
				[Address(RVA = "0xF11CB8", Offset = "0xF11CB8", VA = "0xF11CB8")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000733")]
				[Address(RVA = "0xF11CCC", Offset = "0xF11CCC", VA = "0xF11CCC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000C8")]
			internal Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x6000734")]
				[Address(RVA = "0xF11CE0", Offset = "0xF11CE0", VA = "0xF11CE0")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000735")]
				[Address(RVA = "0xF11CF4", Offset = "0xF11CF4", VA = "0xF11CF4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000736")]
			[Address(RVA = "0xF11D08", Offset = "0xF11D08", VA = "0xF11D08", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000737")]
			[Address(RVA = "0xF12964", Offset = "0xF12964", VA = "0xF12964", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x6000738")]
			[Address(RVA = "0xF12D70", Offset = "0xF12D70", VA = "0xF12D70", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6000739")]
			[Address(RVA = "0xF13514", Offset = "0xF13514", VA = "0xF13514")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x600073A")]
			[Address(RVA = "0xF070F4", Offset = "0xF070F4", VA = "0xF070F4")]
			public void Solve(Animator animator, VirtualBone rootBone, Leg[] legs, Arm[] arms, float scale)
			{
			}

			[Token(Token = "0x600073B")]
			[Address(RVA = "0xF13F8C", Offset = "0xF13F8C", VA = "0xF13F8C")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x600073C")]
			[Address(RVA = "0xF14668", Offset = "0xF14668", VA = "0xF14668")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x600073D")]
			[Address(RVA = "0xF14884", Offset = "0xF14884", VA = "0xF14884", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x600073E")]
			[Address(RVA = "0xF14A54", Offset = "0xF14A54", VA = "0xF14A54", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x600073F")]
			[Address(RVA = "0xF13774", Offset = "0xF13774", VA = "0xF13774")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6000740")]
			[Address(RVA = "0xF09A24", Offset = "0xF09A24", VA = "0xF09A24")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x6000741")]
			[Address(RVA = "0xF13B6C", Offset = "0xF13B6C", VA = "0xF13B6C")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation, float scale)
			{
			}

			[Token(Token = "0x6000742")]
			[Address(RVA = "0xF14B28", Offset = "0xF14B28", VA = "0xF14B28")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000743")]
			[Address(RVA = "0xF14468", Offset = "0xF14468", VA = "0xF14468")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000744")]
			[Address(RVA = "0xF141F4", Offset = "0xF141F4", VA = "0xF141F4")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000745")]
			[Address(RVA = "0xF0BE8C", Offset = "0xF0BE8C", VA = "0xF0BE8C")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000C2")]
		public enum PositionOffset
		{
			[Token(Token = "0x400053C")]
			Pelvis,
			[Token(Token = "0x400053D")]
			Chest,
			[Token(Token = "0x400053E")]
			Head,
			[Token(Token = "0x400053F")]
			LeftHand,
			[Token(Token = "0x4000540")]
			RightHand,
			[Token(Token = "0x4000541")]
			LeftFoot,
			[Token(Token = "0x4000542")]
			RightFoot,
			[Token(Token = "0x4000543")]
			LeftHeel,
			[Token(Token = "0x4000544")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20000C3")]
		public enum RotationOffset
		{
			[Token(Token = "0x4000546")]
			Pelvis,
			[Token(Token = "0x4000547")]
			Chest,
			[Token(Token = "0x4000548")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20000C4")]
		public class VirtualBone
		{
			[Token(Token = "0x4000549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x400054A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x400054B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x400054C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x400054D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x400054E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x400054F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x6000746")]
			[Address(RVA = "0xF14DCC", Offset = "0xF14DCC", VA = "0xF14DCC")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000747")]
			[Address(RVA = "0xF14E3C", Offset = "0xF14E3C", VA = "0xF14E3C")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000748")]
			[Address(RVA = "0xF14E5C", Offset = "0xF14E5C", VA = "0xF14E5C")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000749")]
			[Address(RVA = "0xF1505C", Offset = "0xF1505C", VA = "0xF1505C")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x600074A")]
			[Address(RVA = "0xF151BC", Offset = "0xF151BC", VA = "0xF151BC")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x600074B")]
			[Address(RVA = "0xF1532C", Offset = "0xF1532C", VA = "0xF1532C")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x600074C")]
			[Address(RVA = "0xF154D4", Offset = "0xF154D4", VA = "0xF154D4")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x600074D")]
			[Address(RVA = "0xF1565C", Offset = "0xF1565C", VA = "0xF1565C")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x600074E")]
			[Address(RVA = "0xF15700", Offset = "0xF15700", VA = "0xF15700")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x600074F")]
			[Address(RVA = "0xF15AE4", Offset = "0xF15AE4", VA = "0xF15AE4")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000750")]
			[Address(RVA = "0xF15C3C", Offset = "0xF15C3C", VA = "0xF15C3C")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x6000751")]
			[Address(RVA = "0xF16008", Offset = "0xF16008", VA = "0xF16008")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000752")]
			[Address(RVA = "0xF1611C", Offset = "0xF1611C", VA = "0xF1611C")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool hasChest;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool hasNeck;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool hasShoulders;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		private bool hasToes;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool hasLegs;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool hasArms;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3[] readPositions;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion[] readRotations;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 rootV;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int supportLegIndex;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int lastLOD;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float lastLocomotionWeight;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Range(0f, 2f)]
		[Tooltip("LOD 0: Full quality solving. LOD 1: Shoulder solving, stretching plant feet disabled, spine solving quality reduced. This provides about 30% of performance gain. LOD 2: Culled, but updating root position and rotation if locomotion is enabled.")]
		public int LOD;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("Scale of the character. Value of 1 means normal adult human size.")]
		public float scale;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("If true, will keep the toes planted even if head target is out of reach, so this can cause the camera to exit the head if it is too high for the model to reach. Enabling this increases the cost of the solver as the legs will have to be solved multiple times.")]
		public bool plantFeet;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The spine solver.")]
		public Spine spine;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The left arm solver.")]
		public Arm leftArm;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The right arm solver.")]
		public Arm rightArm;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The left leg solver.")]
		public Leg leftLeg;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("The right leg solver.")]
		public Leg rightLeg;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Procedural leg shuffling for stationary VR games. Not designed for roomscale and thumbstick locomotion. For those it would be better to use a strafing locomotion blend tree to make the character follow the horizontal direction towards the HMD by root motion or script.")]
		public Locomotion locomotion;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Leg[] legs;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Arm[] arms;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 headPosition;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Vector3 debugPos2;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3 debugPos3;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private Vector3 debugPos4;

		[Token(Token = "0x170000A6")]
		public Animator animator
		{
			[Token(Token = "0x60006A9")]
			[Address(RVA = "0xF035B0", Offset = "0xF035B0", VA = "0xF035B0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006AA")]
			[Address(RVA = "0xF035B8", Offset = "0xF035B8", VA = "0xF035B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x60006C2")]
			[Address(RVA = "0xF0BB98", Offset = "0xF0BB98", VA = "0xF0BB98")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006C3")]
			[Address(RVA = "0xF0BBA0", Offset = "0xF0BBA0", VA = "0xF0BBA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xF035C0", Offset = "0xF035C0", VA = "0xF035C0")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xF03A8C", Offset = "0xF03A8C", VA = "0xF03A8C")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xF03920", Offset = "0xF03920", VA = "0xF03920")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xF03EA0", Offset = "0xF03EA0", VA = "0xF03EA0")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xF03FE8", Offset = "0xF03FE8", VA = "0xF03FE8")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xF04028", Offset = "0xF04028", VA = "0xF04028")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xF0414C", Offset = "0xF0414C", VA = "0xF0414C")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xF04328", Offset = "0xF04328", VA = "0xF04328")]
		public void Reset()
		{
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xF04B90", Offset = "0xF04B90", VA = "0xF04B90", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xF04CE4", Offset = "0xF04CE4", VA = "0xF04CE4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xF04ED0", Offset = "0xF04ED0", VA = "0xF04ED0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0xF04F40", Offset = "0xF04F40", VA = "0xF04F40", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xF04FB0", Offset = "0xF04FB0", VA = "0xF04FB0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xF051B8", Offset = "0xF051B8", VA = "0xF051B8")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0xF03D8C", Offset = "0xF03D8C", VA = "0xF03D8C")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xF04450", Offset = "0xF04450", VA = "0xF04450")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xF05428", Offset = "0xF05428", VA = "0xF05428", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xF0546C", Offset = "0xF0546C", VA = "0xF0546C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xF06B2C", Offset = "0xF06B2C", VA = "0xF06B2C")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xF045A0", Offset = "0xF045A0", VA = "0xF045A0")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, bool hasArms)
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xF05894", Offset = "0xF05894", VA = "0xF05894")]
		private void Solve()
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xF06F80", Offset = "0xF06F80", VA = "0xF06F80")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xF06FBC", Offset = "0xF06FBC", VA = "0xF06FBC")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xF069E8", Offset = "0xF069E8", VA = "0xF069E8")]
		private void Write()
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xF0B4C8", Offset = "0xF0B4C8", VA = "0xF0B4C8")]
		private Vector3 GetPelvisOffset(float deltaTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xF0BBA8", Offset = "0xF0BBA8", VA = "0xF0BBA8")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If using multiple solvers, add them in inverse hierarchical order - first forearm roll bone, then forearm bone and upper arm bone.")]
		public TwistSolver[] twistSolvers;

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xF162D0", Offset = "0xF162D0", VA = "0xF162D0")]
		public void Start()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xF16A0C", Offset = "0xF16A0C", VA = "0xF16A0C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xF16B78", Offset = "0xF16B78", VA = "0xF16B78")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xF1710C", Offset = "0xF1710C", VA = "0xF1710C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xF171BC", Offset = "0xF171BC", VA = "0xF171BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xF172F4", Offset = "0xF172F4", VA = "0xF172F4")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C6")]
	public class TwistSolver
	{
		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The transform that this solver operates on.")]
		public Transform transform;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is the forearm roll bone, the parent should be the forearm bone. If null, will be found automatically.")]
		public Transform parent;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If this is the forearm roll bone, the child should be the hand bone. If null, will attempt to find automatically. Assign the hand manually if the hand bone is not a child of the roll bone.")]
		public Transform[] children;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The weight of relaxing the twist of this Transform")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If 0.5, this Transform will be twisted half way from parent to child. If 1, the twist angle will be locked to the child and will rotate with along with it.")]
		[Range(0f, 1f)]
		public float parentChildCrossfade;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(-180f, 180f)]
		[Tooltip("Rotation offset around the twist axis.")]
		public float twistAngleOffset;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 twistAxis;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 axis;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion[] childRotations;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool inititated;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultChildLocalRotations;

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xF17358", Offset = "0xF17358", VA = "0xF17358")]
		public TwistSolver()
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xF164B8", Offset = "0xF164B8", VA = "0xF164B8")]
		public void Initiate()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xF16ACC", Offset = "0xF16ACC", VA = "0xF16ACC")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xF16C28", Offset = "0xF16C28", VA = "0xF16C28")]
		public void Relax()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C7")]
	public class InteractionEffector
	{
		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x170000C9")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x600075D")]
			[Address(RVA = "0xF17488", Offset = "0xF17488", VA = "0xF17488")]
			[CompilerGenerated]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x600075E")]
			[Address(RVA = "0xF17490", Offset = "0xF17490", VA = "0xF17490")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public bool isPaused
		{
			[Token(Token = "0x600075F")]
			[Address(RVA = "0xF17498", Offset = "0xF17498", VA = "0xF17498")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000760")]
			[Address(RVA = "0xF174A0", Offset = "0xF174A0", VA = "0xF174A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0xF174AC", Offset = "0xF174AC", VA = "0xF174AC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000762")]
			[Address(RVA = "0xF174B4", Offset = "0xF174B4", VA = "0xF174B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public bool inInteraction
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0xF174BC", Offset = "0xF174BC", VA = "0xF174BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CD")]
		public float progress
		{
			[Token(Token = "0x600076D")]
			[Address(RVA = "0xF19E3C", Offset = "0xF19E3C", VA = "0xF19E3C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xF1751C", Offset = "0xF1751C", VA = "0xF1751C")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xF175B8", Offset = "0xF175B8", VA = "0xF175B8")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xF17670", Offset = "0xF17670", VA = "0xF17670")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xF177DC", Offset = "0xF177DC", VA = "0xF177DC")]
		public bool ResetToDefaults(float speed, float deltaTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xF17BB4", Offset = "0xF17BB4", VA = "0xF17BB4")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xF17CD4", Offset = "0xF17CD4", VA = "0xF17CD4")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xF17D28", Offset = "0xF17D28", VA = "0xF17D28")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xF17F74", Offset = "0xF17F74", VA = "0xF17F74")]
		public bool Start(InteractionObject interactionObject, InteractionTarget interactionTarget, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xF18AE8", Offset = "0xF18AE8", VA = "0xF18AE8")]
		public void Update(Transform root, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xF19630", Offset = "0xF19630", VA = "0xF19630")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xF19850", Offset = "0xF19850", VA = "0xF19850")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xF19D24", Offset = "0xF19D24", VA = "0xF19D24")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xF1A03C", Offset = "0xF1A03C", VA = "0xF1A03C")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C8")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("(Optional) reference to the LookAtIK component that will be used to make the character look at the objects that it is interacting with.")]
		public LookAtIK ik;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Interpolation speed of the LookAtIK target.")]
		public float lerpSpeed;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Interpolation speed of the LookAtIK weight.")]
		public float weightSpeed;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xF1A304", Offset = "0xF1A304", VA = "0xF1A304")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xF1A420", Offset = "0xF1A420", VA = "0xF1A420")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xF1A4B8", Offset = "0xF1A4B8", VA = "0xF1A4B8")]
		public void Update()
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xF1A6C0", Offset = "0xF1A6C0", VA = "0xF1A6C0")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xF1A768", Offset = "0xF1A768", VA = "0xF1A768")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xF1A814", Offset = "0xF1A814", VA = "0xF1A814")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20000C9")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Object")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000CA")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The time of the event since interaction start.")]
			public float time;

			[Token(Token = "0x4000596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("If true, the interaction will be paused on this event. The interaction can be resumed by InteractionSystem.ResumeInteraction() or InteractionSystem.ResumeAll;")]
			public bool pause;

			[Token(Token = "0x4000597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[Tooltip("If true, the object will be parented to the effector bone on this event. Note that picking up like this can be done by only a single effector at a time. If you wish to pick up an object with both hands, see the Interaction PickUp2Handed demo scene.")]
			public bool pickUp;

			[Token(Token = "0x4000598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The animations called on this event.")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000599")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The messages sent on this event using GameObject.SendMessage().")]
			public Message[] messages;

			[Token(Token = "0x400059A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The UnityEvent to invoke on this event.")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6000794")]
			[Address(RVA = "0xF19E6C", Offset = "0xF19E6C", VA = "0xF19E6C")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x6000795")]
			[Address(RVA = "0xF1B75C", Offset = "0xF1B75C", VA = "0xF1B75C")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000CB")]
		public class Message
		{
			[Token(Token = "0x400059B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The name of the function called.")]
			public string function;

			[Token(Token = "0x400059C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The recipient game object.")]
			public GameObject recipient;

			[Token(Token = "0x400059D")]
			private const string empty = "";

			[Token(Token = "0x6000796")]
			[Address(RVA = "0xF1B664", Offset = "0xF1B664", VA = "0xF1B664")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x6000797")]
			[Address(RVA = "0xF1B764", Offset = "0xF1B764", VA = "0xF1B764")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000CC")]
		public class AnimatorEvent
		{
			[Token(Token = "0x400059E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Animator component that will receive the AnimatorEvents.")]
			public Animator animator;

			[Token(Token = "0x400059F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Animation component that will receive the AnimatorEvents (Legacy).")]
			public Animation animation;

			[Token(Token = "0x40005A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The name of the animation state.")]
			public string animationState;

			[Token(Token = "0x40005A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The crossfading time.")]
			public float crossfadeTime;

			[Token(Token = "0x40005A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The layer of the animation state (if using Legacy, the animation state will be forced to this layer).")]
			public int layer;

			[Token(Token = "0x40005A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Should the animation always start from 0 normalized time?")]
			public bool resetNormalizedTime;

			[Token(Token = "0x40005A4")]
			private const string empty = "";

			[Token(Token = "0x6000798")]
			[Address(RVA = "0xF1B588", Offset = "0xF1B588", VA = "0xF1B588")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6000799")]
			[Address(RVA = "0xF1B76C", Offset = "0xF1B76C", VA = "0xF1B76C")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x600079A")]
			[Address(RVA = "0xF1B81C", Offset = "0xF1B81C", VA = "0xF1B81C")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x600079B")]
			[Address(RVA = "0xF1B8F4", Offset = "0xF1B8F4", VA = "0xF1B8F4")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000CD")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20000CE")]
			public enum Type
			{
				[Token(Token = "0x40005A8")]
				PositionWeight,
				[Token(Token = "0x40005A9")]
				RotationWeight,
				[Token(Token = "0x40005AA")]
				PositionOffsetX,
				[Token(Token = "0x40005AB")]
				PositionOffsetY,
				[Token(Token = "0x40005AC")]
				PositionOffsetZ,
				[Token(Token = "0x40005AD")]
				Pull,
				[Token(Token = "0x40005AE")]
				Reach,
				[Token(Token = "0x40005AF")]
				RotateBoneWeight,
				[Token(Token = "0x40005B0")]
				Push,
				[Token(Token = "0x40005B1")]
				PushParent,
				[Token(Token = "0x40005B2")]
				PoserWeight,
				[Token(Token = "0x40005B3")]
				BendGoalWeight
			}

			[Token(Token = "0x40005A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the curve (InteractionObject.WeightCurve.Type).")]
			public Type type;

			[Token(Token = "0x40005A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x600079C")]
			[Address(RVA = "0xF1AEC0", Offset = "0xF1AEC0", VA = "0xF1AEC0")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x600079D")]
			[Address(RVA = "0xF1B908", Offset = "0xF1B908", VA = "0xF1B908")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000CF")]
		public class Multiplier
		{
			[Token(Token = "0x40005B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type to multiply.")]
			public WeightCurve.Type curve;

			[Token(Token = "0x40005B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x40005B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The resulting value will be applied to this channel.")]
			public WeightCurve.Type result;

			[Token(Token = "0x600079E")]
			[Address(RVA = "0xF1B494", Offset = "0xF1B494", VA = "0xF1B494")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x600079F")]
			[Address(RVA = "0xF1B910", Offset = "0xF1B910", VA = "0xF1B910")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the Interaction System has a 'Look At' LookAtIK component assigned, will use it to make the character look at the specified Transform. If unassigned, will look at this GameObject.")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The root Transform of the InteractionTargets. If null, will use this GameObject. GetComponentsInChildren<InteractionTarget>() will be used at initiation to find all InteractionTargets associated with this InteractionObject.")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If assigned, all PositionOffset channels will be applied in the rotation space of this Transform. If not, they will be in the rotation space of the character.")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000CE")]
		public float length
		{
			[Token(Token = "0x6000780")]
			[Address(RVA = "0xF1AA48", Offset = "0xF1AA48", VA = "0xF1AA48")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000781")]
			[Address(RVA = "0xF1AA50", Offset = "0xF1AA50", VA = "0xF1AA50")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x6000782")]
			[Address(RVA = "0xF1AA58", Offset = "0xF1AA58", VA = "0xF1AA58")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000783")]
			[Address(RVA = "0xF1AA60", Offset = "0xF1AA60", VA = "0xF1AA60")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x6000785")]
			[Address(RVA = "0xF1AC20", Offset = "0xF1AC20", VA = "0xF1AC20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D1")]
		public Transform targetsRoot
		{
			[Token(Token = "0x600078D")]
			[Address(RVA = "0xF19F30", Offset = "0xF19F30", VA = "0xF19F30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0xF1A828", Offset = "0xF1A828", VA = "0xF1A828")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xF1A86C", Offset = "0xF1A86C", VA = "0xF1A86C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0xF1A8B0", Offset = "0xF1A8B0", VA = "0xF1A8B0")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xF1A8F4", Offset = "0xF1A8F4", VA = "0xF1A8F4")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0xF1A938", Offset = "0xF1A938", VA = "0xF1A938")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xF1A97C", Offset = "0xF1A97C", VA = "0xF1A97C")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xF1A9C0", Offset = "0xF1A9C0", VA = "0xF1A9C0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xF1AA04", Offset = "0xF1AA04", VA = "0xF1AA04")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xF1AA68", Offset = "0xF1AA68", VA = "0xF1AA68")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xF1ACA0", Offset = "0xF1ACA0", VA = "0xF1ACA0")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xF1840C", Offset = "0xF1840C", VA = "0xF1840C")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xF1ADF0", Offset = "0xF1ADF0", VA = "0xF1ADF0")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xF17E40", Offset = "0xF17E40", VA = "0xF17E40")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xF18404", Offset = "0xF18404", VA = "0xF18404")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xF19228", Offset = "0xF19228", VA = "0xF19228")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xF19B18", Offset = "0xF19B18", VA = "0xF19B18")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xF1B4C4", Offset = "0xF1B4C4", VA = "0xF1B4C4")]
		private void Start()
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xF1AEDC", Offset = "0xF1AEDC", VA = "0xF1AEDC")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xF1ADF8", Offset = "0xF1ADF8", VA = "0xF1ADF8")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xF1B438", Offset = "0xF1B438", VA = "0xF1B438")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xF1B4C8", Offset = "0xF1B4C8", VA = "0xF1B4C8")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xF1B524", Offset = "0xF1B524", VA = "0xF1B524")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x20000D0")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction System")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20000D1")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20000D2")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If not empty, only the targets with the specified tag will be used by this Interaction System.")]
		public string targetTag;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The fade in time of the interaction.")]
		public float fadeInTime;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The master speed for all interactions.")]
		public float speed;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If > 0, lerps all the FBBIK channels used by the Interaction System back to their default or initial values when not in interaction.")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Triggering")]
		[Tooltip("The collider that registers OnTriggerEnter and OnTriggerExit events with InteractionTriggers.")]
		[FormerlySerializedAs("collider")]
		public Collider characterCollider;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Will be used by Interaction Triggers that need the camera's position. Assign the first person view character camera.")]
		[FormerlySerializedAs("camera")]
		public Transform FPSCamera;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The layers that will be raycasted from the camera (along camera.forward). All InteractionTrigger look at target colliders should be included.")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Max distance of raycasting from the camera.")]
		public float camRaycastDistance;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Space(10f)]
		[Tooltip("Reference to the FBBIK component.")]
		[SerializeField]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Handles looking at the interactions.")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float lastTime;

		[Token(Token = "0x170000D2")]
		public bool inInteraction
		{
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0xF1BB40", Offset = "0xF1BB40", VA = "0xF1BB40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D3")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x60007C3")]
			[Address(RVA = "0xF1D6F0", Offset = "0xF1D6F0", VA = "0xF1D6F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007C4")]
			[Address(RVA = "0xF1D6F8", Offset = "0xF1D6F8", VA = "0xF1D6F8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x60007C5")]
			[Address(RVA = "0xF1D700", Offset = "0xF1D700", VA = "0xF1D700")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007C6")]
			[Address(RVA = "0xF1D708", Offset = "0xF1D708", VA = "0xF1D708")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public bool initiated
		{
			[Token(Token = "0x60007C7")]
			[Address(RVA = "0xF1D710", Offset = "0xF1D710", VA = "0xF1D710")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007C8")]
			[Address(RVA = "0xF1D718", Offset = "0xF1D718", VA = "0xF1D718")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xF1B920", Offset = "0xF1B920", VA = "0xF1B920")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xF1B964", Offset = "0xF1B964", VA = "0xF1B964")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xF1B9A8", Offset = "0xF1B9A8", VA = "0xF1B9A8")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xF1B9EC", Offset = "0xF1B9EC", VA = "0xF1B9EC")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xF1BA30", Offset = "0xF1BA30", VA = "0xF1BA30")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xF1BA74", Offset = "0xF1BA74", VA = "0xF1BA74")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xF1BAB8", Offset = "0xF1BAB8", VA = "0xF1BAB8")]
		[ContextMenu("Support")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xF1BAFC", Offset = "0xF1BAFC", VA = "0xF1BAFC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xF1BCB8", Offset = "0xF1BCB8", VA = "0xF1BCB8")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xF1BD70", Offset = "0xF1BD70", VA = "0xF1BD70")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xF1BE28", Offset = "0xF1BE28", VA = "0xF1BE28")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xF1BEC0", Offset = "0xF1BEC0", VA = "0xF1BEC0")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xF1BFA4", Offset = "0xF1BFA4", VA = "0xF1BFA4")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xF1C09C", Offset = "0xF1C09C", VA = "0xF1C09C")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionTarget target, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xF1C1A4", Offset = "0xF1C1A4", VA = "0xF1C1A4")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xF1C228", Offset = "0xF1C228", VA = "0xF1C228")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xF1C2AC", Offset = "0xF1C2AC", VA = "0xF1C2AC")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xF1C330", Offset = "0xF1C330", VA = "0xF1C330")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xF1C398", Offset = "0xF1C398", VA = "0xF1C398")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xF1C400", Offset = "0xF1C400", VA = "0xF1C400")]
		public void StopAll()
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xF1C45C", Offset = "0xF1C45C", VA = "0xF1C45C")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xF1C4DC", Offset = "0xF1C4DC", VA = "0xF1C4DC")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xF1C584", Offset = "0xF1C584", VA = "0xF1C584")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xF1C654", Offset = "0xF1C654", VA = "0xF1C654")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xF1C8E4", Offset = "0xF1C8E4", VA = "0xF1C8E4")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xF1CAB8", Offset = "0xF1CAB8", VA = "0xF1CAB8")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xF1CD28", Offset = "0xF1CD28", VA = "0xF1CD28")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xF1CFB4", Offset = "0xF1CFB4", VA = "0xF1CFB4")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xF1CFEC", Offset = "0xF1CFEC", VA = "0xF1CFEC")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xF1D04C", Offset = "0xF1D04C", VA = "0xF1D04C")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xF1D178", Offset = "0xF1D178", VA = "0xF1D178")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xF1D35C", Offset = "0xF1D35C", VA = "0xF1D35C")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xF1D5D0", Offset = "0xF1D5D0", VA = "0xF1D5D0")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xF1CE10", Offset = "0xF1CE10", VA = "0xF1CE10")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xF1D724", Offset = "0xF1D724", VA = "0xF1D724")]
		public void Start()
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xF1E048", Offset = "0xF1E048", VA = "0xF1E048")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xF1E068", Offset = "0xF1E068", VA = "0xF1E068")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xF1E084", Offset = "0xF1E084", VA = "0xF1E084")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xF1E0A0", Offset = "0xF1E0A0", VA = "0xF1E0A0")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xF1E0F4", Offset = "0xF1E0F4", VA = "0xF1E0F4")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xF1E278", Offset = "0xF1E278", VA = "0xF1E278")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xF1E374", Offset = "0xF1E374", VA = "0xF1E374")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xF1E6D0", Offset = "0xF1E6D0", VA = "0xF1E6D0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xF1E7E8", Offset = "0xF1E7E8", VA = "0xF1E7E8")]
		public void Update()
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xF1EAAC", Offset = "0xF1EAAC", VA = "0xF1EAAC")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xF1DDE8", Offset = "0xF1DDE8", VA = "0xF1DDE8")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xF1EBDC", Offset = "0xF1EBDC", VA = "0xF1EBDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xF1EBF8", Offset = "0xF1EBF8", VA = "0xF1EBF8")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xF1ED34", Offset = "0xF1ED34", VA = "0xF1ED34")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xF1EDBC", Offset = "0xF1EDBC", VA = "0xF1EDBC")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xF1EE7C", Offset = "0xF1EE7C", VA = "0xF1EE7C")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xF1EE94", Offset = "0xF1EE94", VA = "0xF1EE94")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xF1BBD8", Offset = "0xF1BBD8", VA = "0xF1BBD8")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xF1C7D0", Offset = "0xF1C7D0", VA = "0xF1C7D0")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xF1F30C", Offset = "0xF1F30C", VA = "0xF1F30C")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Target")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000D4")]
		public enum RotationMode
		{
			[Token(Token = "0x40005DD")]
			TwoDOF,
			[Token(Token = "0x40005DE")]
			ThreeDOF
		}

		[Serializable]
		[Token(Token = "0x20000D5")]
		public class Multiplier
		{
			[Token(Token = "0x40005DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type (InteractionObject.WeightCurve.Type).")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x40005E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x60007F2")]
			[Address(RVA = "0xF1FC28", Offset = "0xF1FC28", VA = "0xF1FC28")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The type of the FBBIK effector.")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("InteractionObject weight curve multipliers for this effector target.")]
		public Multiplier[] multipliers;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The interaction speed multiplier for this effector. This can be used to make interactions faster/slower for specific effectors.")]
		public float interactionSpeedMlp;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The pivot to twist/swing this interaction target about. For symmetric objects that can be interacted with from a certain angular range.")]
		public Transform pivot;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("2 or 3 degrees of freedom to match this InteractionTarget's rotation to the effector bone rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The axis of twisting the interaction target (blue line).")]
		public Vector3 twistAxis;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of twisting the interaction target towards the effector bone in the start of the interaction.")]
		public float twistWeight;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of swinging the interaction target towards the effector bone in the start of the interaction. Swing is defined as a 3-DOF rotation around any axis, while twist is only around the twist axis.")]
		public float swingWeight;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The weight of rotating this InteractionTarget to the effector bone in the start of the interaction (and during if 'Rotate Once' is disabled")]
		[Range(0f, 1f)]
		public float threeDOFWeight;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true, will twist/swing around the pivot only once at the start of the interaction. If false, will continue rotating throuout the whole interaction.")]
		public bool rotateOnce;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastPivot;

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xF1F994", Offset = "0xF1F994", VA = "0xF1F994")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xF1F9D8", Offset = "0xF1F9D8", VA = "0xF1F9D8")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xF1FA1C", Offset = "0xF1FA1C", VA = "0xF1FA1C")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xF1FA60", Offset = "0xF1FA60", VA = "0xF1FA60")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xF1FAA4", Offset = "0xF1FAA4", VA = "0xF1FAA4")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xF1FAE8", Offset = "0xF1FAE8", VA = "0xF1FAE8")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xF1FB2C", Offset = "0xF1FB2C", VA = "0xF1FB2C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xF1FB70", Offset = "0xF1FB70", VA = "0xF1FB70")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xF1AE5C", Offset = "0xF1AE5C", VA = "0xF1AE5C")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xF19FB0", Offset = "0xF19FB0", VA = "0xF19FB0")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xF184A0", Offset = "0xF184A0", VA = "0xF184A0")]
		public void RotateTo(Transform bone)
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xF1FBB4", Offset = "0xF1FBB4", VA = "0xF1FBB4")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x20000D6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Trigger")]
	[HelpURL("https://www.youtube.com/watch?v=-TDZpNjt2mk&index=15&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000D7")]
		public class CharacterPosition
		{
			[Token(Token = "0x40005E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("If false, will not care where the character stands, as long as it is in contact with the trigger collider.")]
			public bool use;

			[Token(Token = "0x40005E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The offset of the character's position relative to the trigger in XZ plane. Y position of the character is unlimited as long as it is contact with the collider.")]
			public Vector2 offset;

			[Token(Token = "0x40005E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(-180f, 180f)]
			[Tooltip("Angle offset from the default forward direction.")]
			public float angleOffset;

			[Token(Token = "0x40005E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max angular offset of the character's forward from the direction of this trigger.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x40005E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max offset of the character's position from this range's center.")]
			public float radius;

			[Token(Token = "0x40005E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("If true, will rotate the trigger around its Y axis relative to the position of the character, so the object can be interacted with from all sides.")]
			public bool orbit;

			[Token(Token = "0x40005E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object. For example a gun will be able to be picked up from the same direction relative to the barrel no matter which side the gun is resting on.")]
			public bool fixYAxis;

			[Token(Token = "0x170000D6")]
			public Vector3 offset3D
			{
				[Token(Token = "0x60007FA")]
				[Address(RVA = "0xF1FE98", Offset = "0xF1FE98", VA = "0xF1FE98")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000D7")]
			public Vector3 direction3D
			{
				[Token(Token = "0x60007FB")]
				[Address(RVA = "0xF1FEA4", Offset = "0xF1FEA4", VA = "0xF1FEA4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x60007FC")]
			[Address(RVA = "0xF1FF64", Offset = "0xF1FF64", VA = "0xF1FF64")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x60007FD")]
			[Address(RVA = "0xF206C8", Offset = "0xF206C8", VA = "0xF206C8")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000D8")]
		public class CameraPosition
		{
			[Token(Token = "0x40005E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("What the camera should be looking at to trigger the interaction? If null, this camera position will not be used.")]
			public Collider lookAtTarget;

			[Token(Token = "0x40005EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The direction from the lookAtTarget towards the camera (in lookAtTarget's space).")]
			public Vector3 direction;

			[Token(Token = "0x40005EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max distance from the lookAtTarget to the camera.")]
			public float maxDistance;

			[Token(Token = "0x40005EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Max angle between the direction and the direction towards the camera.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x40005ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object.")]
			public bool fixYAxis;

			[Token(Token = "0x60007FE")]
			[Address(RVA = "0xF206DC", Offset = "0xF206DC", VA = "0xF206DC")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60007FF")]
			[Address(RVA = "0xF20854", Offset = "0xF20854", VA = "0xF20854")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000800")]
			[Address(RVA = "0xF20B5C", Offset = "0xF20B5C", VA = "0xF20B5C")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000D9")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20000DA")]
			public class Interaction
			{
				[Token(Token = "0x40005F3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The InteractionObject to interact with.")]
				public InteractionObject interactionObject;

				[Token(Token = "0x40005F4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("The effectors to interact with.")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x6000803")]
				[Address(RVA = "0xF20BE0", Offset = "0xF20BE0", VA = "0xF20BE0")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x40005EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x40005EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public bool show;

			[Token(Token = "0x40005F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The range for the character's position and rotation.")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x40005F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The range for the character camera's position and rotation.")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x40005F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Definitions of the interactions associated with this range.")]
			public Interaction[] interactions;

			[Token(Token = "0x6000801")]
			[Address(RVA = "0xF1FD84", Offset = "0xF1FD84", VA = "0xF1FD84")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6000802")]
			[Address(RVA = "0xF20BD0", Offset = "0xF20BD0", VA = "0xF20BD0")]
			public Range()
			{
			}
		}

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The valid ranges of the character's and/or its camera's position for triggering interaction when the character is in contact with the collider of this trigger.")]
		public Range[] ranges;

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xF1FC30", Offset = "0xF1FC30", VA = "0xF1FC30")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xF1FC74", Offset = "0xF1FC74", VA = "0xF1FC74")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xF1FCB8", Offset = "0xF1FCB8", VA = "0xF1FCB8")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xF1FCFC", Offset = "0xF1FCFC", VA = "0xF1FCFC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xF1FD40", Offset = "0xF1FD40", VA = "0xF1FD40")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xF1E51C", Offset = "0xF1E51C", VA = "0xF1E51C")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xF1FE34", Offset = "0xF1FE34", VA = "0xF1FE34")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20000DC")]
		public class Map
		{
			[Token(Token = "0x40005F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x40005F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x40005F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x40005F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x600080B")]
			[Address(RVA = "0xF20EE0", Offset = "0xF20EE0", VA = "0xF20EE0")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x600080C")]
			[Address(RVA = "0xF21238", Offset = "0xF21238", VA = "0xF21238")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x600080D")]
			[Address(RVA = "0xF211F8", Offset = "0xF211F8", VA = "0xF211F8")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x600080E")]
			[Address(RVA = "0xF2107C", Offset = "0xF2107C", VA = "0xF2107C")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xF20BE8", Offset = "0xF20BE8", VA = "0xF20BE8", Slot = "7")]
		[ContextMenu("Auto-Mapping")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xF20F88", Offset = "0xF20F88", VA = "0xF20F88", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xF20F8C", Offset = "0xF20F8C", VA = "0xF20F8C", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xF2119C", Offset = "0xF2119C", VA = "0xF2119C", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xF20F2C", Offset = "0xF20F2C", VA = "0xF20F2C")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xF20E4C", Offset = "0xF20E4C", VA = "0xF20E4C")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xF2127C", Offset = "0xF2127C", VA = "0xF2127C")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x20000DD")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xF2129C", Offset = "0xF2129C", VA = "0xF2129C", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xF2136C", Offset = "0xF2136C", VA = "0xF2136C", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xF21544", Offset = "0xF21544", VA = "0xF21544", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xF2162C", Offset = "0xF2162C", VA = "0xF2162C", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xF213CC", Offset = "0xF213CC", VA = "0xF213CC")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xF2195C", Offset = "0xF2195C", VA = "0xF2195C")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float localRotationWeight;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float localPositionWeight;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x6000815")]
		public abstract void AutoMapping();

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xF2196C", Offset = "0xF2196C", VA = "0xF2196C")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x6000817")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6000818")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6000819")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xF21978", Offset = "0xF21978", VA = "0xF21978", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xF219BC", Offset = "0xF219BC", VA = "0xF219BC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xF219E8", Offset = "0xF219E8", VA = "0xF219E8", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xF2128C", Offset = "0xF2128C", VA = "0xF2128C")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x20000DF")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20000E0")]
		public class Rigidbone
		{
			[Token(Token = "0x4000614")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4000615")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000616")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4000617")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4000618")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4000619")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x400061A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x400061B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x400061C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x400061D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x400061E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6000830")]
			[Address(RVA = "0xF22058", Offset = "0xF22058", VA = "0xF22058")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6000831")]
			[Address(RVA = "0xF22C04", Offset = "0xF22C04", VA = "0xF22C04")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6000832")]
			[Address(RVA = "0xF229C4", Offset = "0xF229C4", VA = "0xF229C4")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20000E1")]
		public class Child
		{
			[Token(Token = "0x400061F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4000620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4000621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6000833")]
			[Address(RVA = "0xF22200", Offset = "0xF22200", VA = "0xF22200")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6000834")]
			[Address(RVA = "0xF22D1C", Offset = "0xF22D1C", VA = "0xF22D1C")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6000835")]
			[Address(RVA = "0xF22CD8", Offset = "0xF22CD8", VA = "0xF22CD8")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20000E2")]
		[CompilerGenerated]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000623")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x170000DA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000839")]
				[Address(RVA = "0xF23288", Offset = "0xF23288", VA = "0xF23288", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600083B")]
				[Address(RVA = "0xF232D0", Offset = "0xF232D0", VA = "0xF232D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000836")]
			[Address(RVA = "0xF2226C", Offset = "0xF2226C", VA = "0xF2226C")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000837")]
			[Address(RVA = "0xF23098", Offset = "0xF23098", VA = "0xF23098", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000838")]
			[Address(RVA = "0xF2309C", Offset = "0xF2309C", VA = "0xF2309C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600083A")]
			[Address(RVA = "0xF23290", Offset = "0xF23290", VA = "0xF23290", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If you have multiple IK components, then this should be the one that solves last each frame.")]
		public IK ik;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How long does it take to blend from ragdoll to animation?")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, IK can be used on top of physical ragdoll simulation.")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much velocity transfer from animation to ragdoll?")]
		public float applyVelocity;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How much angular velocity to transfer from animation to ragdoll?")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000D8")]
		private bool isRagdoll
		{
			[Token(Token = "0x6000829")]
			[Address(RVA = "0xF21A2C", Offset = "0xF21A2C", VA = "0xF21A2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D9")]
		private bool ikUsed
		{
			[Token(Token = "0x600082B")]
			[Address(RVA = "0xF225F8", Offset = "0xF225F8", VA = "0xF225F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xF21A00", Offset = "0xF21A00", VA = "0xF21A00")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xF21A90", Offset = "0xF21A90", VA = "0xF21A90")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xF21BA8", Offset = "0xF21BA8", VA = "0xF21BA8")]
		public void Start()
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xF21B34", Offset = "0xF21B34", VA = "0xF21B34")]
		[IteratorStateMachine(typeof(<DisableRagdollSmooth>d__21))]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xF22294", Offset = "0xF22294", VA = "0xF22294")]
		private void Update()
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xF224BC", Offset = "0xF224BC", VA = "0xF224BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xF2255C", Offset = "0xF2255C", VA = "0xF2255C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xF2274C", Offset = "0xF2274C", VA = "0xF2274C")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0xF225CC", Offset = "0xF225CC", VA = "0xF225CC")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0xF22718", Offset = "0xF22718", VA = "0xF22718")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0xF227CC", Offset = "0xF227CC", VA = "0xF227CC")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0xF22770", Offset = "0xF22770", VA = "0xF22770")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0xF21AD8", Offset = "0xF21AD8", VA = "0xF21AD8")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xF224F0", Offset = "0xF224F0", VA = "0xF224F0")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xF22E2C", Offset = "0xF22E2C", VA = "0xF22E2C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xF22F64", Offset = "0xF22F64", VA = "0xF22F64")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x20000E3")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000DC")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x6000841")]
			[Address(RVA = "0xF2373C", Offset = "0xF2373C", VA = "0xF2373C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000DD")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x6000842")]
			[Address(RVA = "0xF23748", Offset = "0xF23748", VA = "0xF23748")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000DE")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x6000843")]
			[Address(RVA = "0xF23778", Offset = "0xF23778", VA = "0xF23778")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000844")]
			[Address(RVA = "0xF23780", Offset = "0xF23780", VA = "0xF23780")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xF232D8", Offset = "0xF232D8", VA = "0xF232D8")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xF23314", Offset = "0xF23314", VA = "0xF23314")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xF2332C", Offset = "0xF2332C", VA = "0xF2332C")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xF236AC", Offset = "0xF236AC", VA = "0xF236AC")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xF23710", Offset = "0xF23710", VA = "0xF23710")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000845")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xF235B0", Offset = "0xF235B0", VA = "0xF235B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0xF2378C", Offset = "0xF2378C", VA = "0xF2378C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0xF23790", Offset = "0xF23790", VA = "0xF23790")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xF237B8", Offset = "0xF237B8", VA = "0xF237B8")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xF2388C", Offset = "0xF2388C", VA = "0xF2388C")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xF23AE4", Offset = "0xF23AE4", VA = "0xF23AE4")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xF23C38", Offset = "0xF23C38", VA = "0xF23C38")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Angle")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float limit;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xF23C98", Offset = "0xF23C98", VA = "0xF23C98")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xF23CDC", Offset = "0xF23CDC", VA = "0xF23CDC")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xF23D20", Offset = "0xF23D20", VA = "0xF23D20")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xF23D64", Offset = "0xF23D64", VA = "0xF23D64")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xF23DA8", Offset = "0xF23DA8", VA = "0xF23DA8", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xF23DE0", Offset = "0xF23DE0", VA = "0xF23DE0")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xF24104", Offset = "0xF24104", VA = "0xF24104")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x20000E5")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Hinge")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastAngle;

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xF24114", Offset = "0xF24114", VA = "0xF24114")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xF24158", Offset = "0xF24158", VA = "0xF24158")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xF2419C", Offset = "0xF2419C", VA = "0xF2419C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xF241E0", Offset = "0xF241E0", VA = "0xF241E0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xF24224", Offset = "0xF24224", VA = "0xF24224", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xF24228", Offset = "0xF24228", VA = "0xF24228")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xF24448", Offset = "0xF24448", VA = "0xF24448")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x20000E6")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Polygonal")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20000E7")]
		public class ReachCone
		{
			[Token(Token = "0x4000637")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4000638")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4000639")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x400063A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x170000DF")]
			public Vector3 o
			{
				[Token(Token = "0x600086B")]
				[Address(RVA = "0xF262F4", Offset = "0xF262F4", VA = "0xF262F4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000E0")]
			public Vector3 a
			{
				[Token(Token = "0x600086C")]
				[Address(RVA = "0xF26320", Offset = "0xF26320", VA = "0xF26320")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000E1")]
			public Vector3 b
			{
				[Token(Token = "0x600086D")]
				[Address(RVA = "0xF26350", Offset = "0xF26350", VA = "0xF26350")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000E2")]
			public Vector3 c
			{
				[Token(Token = "0x600086E")]
				[Address(RVA = "0xF26380", Offset = "0xF26380", VA = "0xF26380")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000E3")]
			public bool isValid
			{
				[Token(Token = "0x6000870")]
				[Address(RVA = "0xF2581C", Offset = "0xF2581C", VA = "0xF2581C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600086F")]
			[Address(RVA = "0xF25CC0", Offset = "0xF25CC0", VA = "0xF25CC0")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6000871")]
			[Address(RVA = "0xF25E38", Offset = "0xF25E38", VA = "0xF25E38")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E8")]
		public class LimitPoint
		{
			[Token(Token = "0x400063B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x400063C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6000872")]
			[Address(RVA = "0xF2582C", Offset = "0xF2582C", VA = "0xF2582C")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 3f)]
		public int smoothIterations;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xF24460", Offset = "0xF24460", VA = "0xF24460")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xF244A4", Offset = "0xF244A4", VA = "0xF244A4")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xF244E8", Offset = "0xF244E8", VA = "0xF244E8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xF2452C", Offset = "0xF2452C", VA = "0xF2452C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xF24570", Offset = "0xF24570", VA = "0xF24570")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xF24C54", Offset = "0xF24C54", VA = "0xF24C54", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xF24CDC", Offset = "0xF24CDC", VA = "0xF24CDC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xF25328", Offset = "0xF25328", VA = "0xF25328")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xF24608", Offset = "0xF24608", VA = "0xF24608")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0xF25890", Offset = "0xF25890", VA = "0xF25890")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0xF260AC", Offset = "0xF260AC", VA = "0xF260AC")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xF260F4", Offset = "0xF260F4", VA = "0xF260F4")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0xF26154", Offset = "0xF26154", VA = "0xF26154")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xF25084", Offset = "0xF25084", VA = "0xF25084")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xF261C0", Offset = "0xF261C0", VA = "0xF261C0")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0xF2628C", Offset = "0xF2628C", VA = "0xF2628C")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x20000E9")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Spline")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xF263B0", Offset = "0xF263B0", VA = "0xF263B0")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0xF263F4", Offset = "0xF263F4", VA = "0xF263F4")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0xF26438", Offset = "0xF26438", VA = "0xF26438")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0xF2647C", Offset = "0xF2647C", VA = "0xF2647C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0xF264C0", Offset = "0xF264C0", VA = "0xF264C0")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xF264DC", Offset = "0xF264DC", VA = "0xF264DC", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xF26514", Offset = "0xF26514", VA = "0xF26514")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0xF268C0", Offset = "0xF268C0", VA = "0xF268C0")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x20000EA")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20000EB")]
		[CompilerGenerated]
		private sealed class <TurnToTarget>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400065E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400065F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x170000E5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000885")]
				[Address(RVA = "0xF278C4", Offset = "0xF278C4", VA = "0xF278C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000887")]
				[Address(RVA = "0xF2790C", Offset = "0xF2790C", VA = "0xF2790C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000882")]
			[Address(RVA = "0xF276C4", Offset = "0xF276C4", VA = "0xF276C4")]
			[DebuggerHidden]
			public <TurnToTarget>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6000883")]
			[Address(RVA = "0xF277D0", Offset = "0xF277D0", VA = "0xF277D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000884")]
			[Address(RVA = "0xF277D4", Offset = "0xF277D4", VA = "0xF277D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000886")]
			[Address(RVA = "0xF278CC", Offset = "0xF278CC", VA = "0xF278CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK ik;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Master weight of the IK solver.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Target Smoothing")]
		[Tooltip("The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.")]
		public Transform target;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The time it takes to blend in/out of AimIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Smoothing time for turning towards the yaw and pitch of the target using Mathf.SmoothDampAngle. Value of 0 means smooth damping is disabled.")]
		public float smoothDampTime;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The position of the pivot that the aim target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.")]
		public Vector3 offset;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.")]
		[Header("RootRotation")]
		[Range(0f, 180f)]
		public float maxRootAngle;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If enabled, aligns the root forward to target direction after 'Max Root Angle' has been exceeded.")]
		public bool turnToTarget;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The time of turning towards the target direction if 'Max Root Angle has been exceeded and 'Turn To Target' is enabled.")]
		public float turnToTargetTime;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Header("Mode")]
		[Tooltip("If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. 'Use Animated Aim Direction' must be enabled for this property to work.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTarget;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float switchWeight;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float switchWeightV;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float weightV;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 dir;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		private bool turningToTarget;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float turnToTargetMlp;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float turnToTargetMlpV;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float yawV;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float pitchV;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float dirMagV;

		[Token(Token = "0x170000E4")]
		private Vector3 pivot
		{
			[Token(Token = "0x600087D")]
			[Address(RVA = "0xF2694C", Offset = "0xF2694C", VA = "0xF2694C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xF268CC", Offset = "0xF268CC", VA = "0xF268CC")]
		private void Start()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xF269D0", Offset = "0xF269D0", VA = "0xF269D0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0xF27228", Offset = "0xF27228", VA = "0xF27228")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xF273AC", Offset = "0xF273AC", VA = "0xF273AC")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xF27650", Offset = "0xF27650", VA = "0xF27650")]
		[IteratorStateMachine(typeof(<TurnToTarget>d__37))]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xF276EC", Offset = "0xF276EC", VA = "0xF276EC")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20000EC")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000ED")]
		public class Pose
		{
			[Token(Token = "0x4000663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4000664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4000665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4000666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4000667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4000668")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x600088B")]
			[Address(RVA = "0xF279E4", Offset = "0xF279E4", VA = "0xF279E4")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x600088C")]
			[Address(RVA = "0xF27F60", Offset = "0xF27F60", VA = "0xF27F60")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x600088D")]
			[Address(RVA = "0xF27F68", Offset = "0xF27F68", VA = "0xF27F68")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xF27914", Offset = "0xF27914", VA = "0xF27914")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xF27E94", Offset = "0xF27E94", VA = "0xF27E94")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xF27EF4", Offset = "0xF27EF4", VA = "0xF27EF4")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000EF")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20000F0")]
			public class EffectorLink
			{
				[Token(Token = "0x4000673")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000674")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000893")]
				[Address(RVA = "0xF283F8", Offset = "0xF283F8", VA = "0xF283F8")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400066A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform that's motion we are reading.")]
			public Transform transform;

			[Token(Token = "0x400066B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Amplify the 'transform's' position relative to this Transform.")]
			public Transform relativeTo;

			[Token(Token = "0x400066C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x400066D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Amplification magnitude along the up axis of the character.")]
			public float verticalWeight;

			[Token(Token = "0x400066E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Amplification magnitude along the horizontal axes of the character.")]
			public float horizontalWeight;

			[Token(Token = "0x400066F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Speed of the amplifier. 0 means instant.")]
			public float speed;

			[Token(Token = "0x4000670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4000671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4000672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x6000890")]
			[Address(RVA = "0xF280C0", Offset = "0xF280C0", VA = "0xF280C0")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x6000891")]
			[Address(RVA = "0xF283D0", Offset = "0xF283D0", VA = "0xF283D0")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000892")]
			[Address(RVA = "0xF283E0", Offset = "0xF283E0", VA = "0xF283E0")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The amplified bodies.")]
		public Body[] bodies;

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xF27F84", Offset = "0xF27F84", VA = "0xF27F84", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xF280B8", Offset = "0xF280B8", VA = "0xF280B8")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed of tilting")]
		public float tiltSpeed;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Sensitivity of tilting")]
		public float tiltSensitivity;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseLeft;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseRight;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xF28400", Offset = "0xF28400", VA = "0xF28400", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xF28468", Offset = "0xF28468", VA = "0xF28468", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xF28728", Offset = "0xF28728", VA = "0xF28728")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20000F2")]
	public class CCDBendGoal : MonoBehaviour
	{
		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CCDIK ik;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xF28754", Offset = "0xF28754", VA = "0xF28754")]
		private void Start()
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0xF28834", Offset = "0xF28834", VA = "0xF28834")]
		private void BeforeIK()
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xF28AC8", Offset = "0xF28AC8", VA = "0xF28AC8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xF28BF4", Offset = "0xF28BF4", VA = "0xF28BF4")]
		public CCDBendGoal()
		{
		}
	}
	[Token(Token = "0x20000F3")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If slot assigned, will update Animator before IK.")]
		public Animator animator;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Create/Final IK/Editor IK Pose")]
		public EditorIKPose defaultPose;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Transform[] bones;

		[Token(Token = "0x170000E7")]
		public IK ik
		{
			[Token(Token = "0x600089B")]
			[Address(RVA = "0xF28C04", Offset = "0xF28C04", VA = "0xF28C04")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600089C")]
			[Address(RVA = "0xF28C0C", Offset = "0xF28C0C", VA = "0xF28C0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xF28C14", Offset = "0xF28C14", VA = "0xF28C14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xF28DB4", Offset = "0xF28DB4", VA = "0xF28DB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xF29010", Offset = "0xF29010", VA = "0xF29010")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xF2914C", Offset = "0xF2914C", VA = "0xF2914C")]
		public void StoreDefaultPose()
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xF2932C", Offset = "0xF2932C", VA = "0xF2932C")]
		public bool Initiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xF29540", Offset = "0xF29540", VA = "0xF29540")]
		public void Update()
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xF297C4", Offset = "0xF297C4", VA = "0xF297C4")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20000F4")]
	[CreateAssetMenu(fileName = "Editor IK Pose", menuName = "Final IK/Editor IK Pose", order = 1)]
	public class EditorIKPose : ScriptableObject
	{
		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] localPositions;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion[] localRotations;

		[Token(Token = "0x170000E8")]
		public bool poseStored
		{
			[Token(Token = "0x60008A4")]
			[Address(RVA = "0xF28E90", Offset = "0xF28E90", VA = "0xF28E90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xF291C8", Offset = "0xF291C8", VA = "0xF291C8")]
		public void Store(Transform[] T)
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xF28EB4", Offset = "0xF28EB4", VA = "0xF28EB4")]
		public bool Restore(Transform[] T)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xF29828", Offset = "0xF29828", VA = "0xF29828")]
		public EditorIKPose()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000F6")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x400068B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float length;

			[Token(Token = "0x400068C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float crossFadeSpeed;

			[Token(Token = "0x400068D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float lastTime;

			[Token(Token = "0x170000EA")]
			public bool inProgress
			{
				[Token(Token = "0x60008AC")]
				[Address(RVA = "0xF29960", Offset = "0xF29960", VA = "0xF29960")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000EB")]
			protected float crossFader
			{
				[Token(Token = "0x60008AD")]
				[Address(RVA = "0xF29D48", Offset = "0xF29D48", VA = "0xF29D48")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008AE")]
				[Address(RVA = "0xF29D50", Offset = "0xF29D50", VA = "0xF29D50")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000EC")]
			protected float timer
			{
				[Token(Token = "0x60008AF")]
				[Address(RVA = "0xF29D58", Offset = "0xF29D58", VA = "0xF29D58")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008B0")]
				[Address(RVA = "0xF29D60", Offset = "0xF29D60", VA = "0xF29D60")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000ED")]
			protected Vector3 force
			{
				[Token(Token = "0x60008B1")]
				[Address(RVA = "0xF29D68", Offset = "0xF29D68", VA = "0xF29D68")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60008B2")]
				[Address(RVA = "0xF29D74", Offset = "0xF29D74", VA = "0xF29D74")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60008B3")]
			[Address(RVA = "0xF29D80", Offset = "0xF29D80", VA = "0xF29D80", Slot = "4")]
			public virtual void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x60008B4")]
			[Address(RVA = "0xF29A34", Offset = "0xF29A34", VA = "0xF29A34")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60008B5")]
			protected abstract float GetLength();

			[Token(Token = "0x60008B6")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x60008B7")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x60008B8")]
			[Address(RVA = "0xF29E8C", Offset = "0xF29E8C", VA = "0xF29E8C")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000F7")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20000F8")]
			public class EffectorLink
			{
				[Token(Token = "0x4000691")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000692")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4000693")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000694")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x60008BD")]
				[Address(RVA = "0xF2A1C0", Offset = "0xF2A1C0", VA = "0xF2A1C0")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x60008BE")]
				[Address(RVA = "0xF2A01C", Offset = "0xF2A01C", VA = "0xF2A01C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x60008BF")]
				[Address(RVA = "0xF2A270", Offset = "0xF2A270", VA = "0xF2A270")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400068E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x400068F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4000690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this offset to the FBBIK effectors")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x60008B9")]
			[Address(RVA = "0xF29EA0", Offset = "0xF29EA0", VA = "0xF29EA0", Slot = "5")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x60008BA")]
			[Address(RVA = "0xF29FBC", Offset = "0xF29FBC", VA = "0xF29FBC", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60008BB")]
			[Address(RVA = "0xF2A030", Offset = "0xF2A030", VA = "0xF2A030", Slot = "7")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60008BC")]
			[Address(RVA = "0xF2A25C", Offset = "0xF2A25C", VA = "0xF2A25C")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000F9")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20000FA")]
			public class BoneLink
			{
				[Token(Token = "0x4000699")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public Transform bone;

				[Token(Token = "0x400069A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Range(0f, 1f)]
				[Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x400069B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x400069C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x60008C5")]
				[Address(RVA = "0xF2A5A8", Offset = "0xF2A5A8", VA = "0xF2A5A8")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x60008C6")]
				[Address(RVA = "0xF2A4DC", Offset = "0xF2A4DC", VA = "0xF2A4DC")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x60008C7")]
				[Address(RVA = "0xF2A748", Offset = "0xF2A748", VA = "0xF2A748")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000695")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The angle to rotate the bone around its rigidbody's world center of mass")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000696")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Linking this hit point to bone(s)")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000697")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Rigidbody rigidbody;

			[Token(Token = "0x4000698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3 comAxis;

			[Token(Token = "0x60008C0")]
			[Address(RVA = "0xF2A278", Offset = "0xF2A278", VA = "0xF2A278", Slot = "4")]
			public override void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x60008C1")]
			[Address(RVA = "0xF2A3F8", Offset = "0xF2A3F8", VA = "0xF2A3F8", Slot = "5")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x60008C2")]
			[Address(RVA = "0xF2A484", Offset = "0xF2A484", VA = "0xF2A484", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60008C3")]
			[Address(RVA = "0xF2A4E8", Offset = "0xF2A4E8", VA = "0xF2A4E8", Slot = "7")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60008C4")]
			[Address(RVA = "0xF2A734", Offset = "0xF2A734", VA = "0xF2A734")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x170000E9")]
		public bool inProgress
		{
			[Token(Token = "0x60008A8")]
			[Address(RVA = "0xF298C4", Offset = "0xF298C4", VA = "0xF298C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xF29974", Offset = "0xF29974", VA = "0xF29974", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xF29B0C", Offset = "0xF29B0C", VA = "0xF29B0C")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xF29D38", Offset = "0xF29D38", VA = "0xF29D38")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x20000FB")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20000FC")]
		public abstract class Offset
		{
			[Token(Token = "0x40006A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x40006A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x40006A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x40006A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float length;

			[Token(Token = "0x40006A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float crossFadeSpeed;

			[Token(Token = "0x40006A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float lastTime;

			[Token(Token = "0x170000EE")]
			protected float crossFader
			{
				[Token(Token = "0x60008CB")]
				[Address(RVA = "0xF2AB98", Offset = "0xF2AB98", VA = "0xF2AB98")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008CC")]
				[Address(RVA = "0xF2ABA0", Offset = "0xF2ABA0", VA = "0xF2ABA0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000EF")]
			protected float timer
			{
				[Token(Token = "0x60008CD")]
				[Address(RVA = "0xF2ABA8", Offset = "0xF2ABA8", VA = "0xF2ABA8")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008CE")]
				[Address(RVA = "0xF2ABB0", Offset = "0xF2ABB0", VA = "0xF2ABB0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F0")]
			protected Vector3 force
			{
				[Token(Token = "0x60008CF")]
				[Address(RVA = "0xF2ABB8", Offset = "0xF2ABB8", VA = "0xF2ABB8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60008D0")]
				[Address(RVA = "0xF2ABC4", Offset = "0xF2ABC4", VA = "0xF2ABC4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60008D1")]
			[Address(RVA = "0xF2ABD0", Offset = "0xF2ABD0", VA = "0xF2ABD0", Slot = "4")]
			public virtual void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x60008D2")]
			[Address(RVA = "0xF2A864", Offset = "0xF2A864", VA = "0xF2A864")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60008D3")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x60008D4")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x60008D5")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x60008D6")]
			[Address(RVA = "0xF2ACE4", Offset = "0xF2ACE4", VA = "0xF2ACE4")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FD")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20000FE")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x40006AC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x40006AD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x40006AE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x40006AF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x60008DB")]
				[Address(RVA = "0xF2B0C8", Offset = "0xF2B0C8", VA = "0xF2B0C8")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x60008DC")]
				[Address(RVA = "0xF2AEEC", Offset = "0xF2AEEC", VA = "0xF2AEEC")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x60008DD")]
				[Address(RVA = "0xF2B15C", Offset = "0xF2B15C", VA = "0xF2B15C")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x40006A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public int forceDirCurveIndex;

			[Token(Token = "0x40006AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public int upDirCurveIndex;

			[Token(Token = "0x40006AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Linking this offset to the VRIK position offsets")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x60008D7")]
			[Address(RVA = "0xF2ACF8", Offset = "0xF2ACF8", VA = "0xF2ACF8", Slot = "5")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x60008D8")]
			[Address(RVA = "0xF2AE8C", Offset = "0xF2AE8C", VA = "0xF2AE8C", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60008D9")]
			[Address(RVA = "0xF2AF00", Offset = "0xF2AF00", VA = "0xF2AF00", Slot = "7")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60008DA")]
			[Address(RVA = "0xF2B140", Offset = "0xF2B140", VA = "0xF2B140")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FF")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000100")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x40006B4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x40006B5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Range(0f, 1f)]
				[Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x40006B6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x40006B7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x60008E3")]
				[Address(RVA = "0xF2B650", Offset = "0xF2B650", VA = "0xF2B650")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x60008E4")]
				[Address(RVA = "0xF2B41C", Offset = "0xF2B41C", VA = "0xF2B41C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x60008E5")]
				[Address(RVA = "0xF2B76C", Offset = "0xF2B76C", VA = "0xF2B76C")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("The angle to rotate the bone around its rigidbody's world center of mass")]
			public int curveIndex;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("Linking this hit point to bone(s)")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x40006B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Rigidbody rigidbody;

			[Token(Token = "0x40006B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Vector3 comAxis;

			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xF2B164", Offset = "0xF2B164", VA = "0xF2B164", Slot = "4")]
			public override void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x60008DF")]
			[Address(RVA = "0xF2B2EC", Offset = "0xF2B2EC", VA = "0xF2B2EC", Slot = "5")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x60008E0")]
			[Address(RVA = "0xF2B3C4", Offset = "0xF2B3C4", VA = "0xF2B3C4", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xF2B428", Offset = "0xF2B428", VA = "0xF2B428", Slot = "7")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60008E2")]
			[Address(RVA = "0xF2B758", Offset = "0xF2B758", VA = "0xF2B758")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xF2A7AC", Offset = "0xF2A7AC", VA = "0xF2A7AC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xF2A944", Offset = "0xF2A944", VA = "0xF2A944")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xF2AB78", Offset = "0xF2AB78", VA = "0xF2AB78")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x2000101")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000102")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000103")]
			public class EffectorLink
			{
				[Token(Token = "0x40006C5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40006C6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x60008EC")]
				[Address(RVA = "0xF2BD34", Offset = "0xF2BD34", VA = "0xF2BD34")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40006BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform to follow, can be any bone of the character")]
			public Transform transform;

			[Token(Token = "0x40006BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x40006BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The speed to follow the Transform")]
			public float speed;

			[Token(Token = "0x40006BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The acceleration, smaller values means lazyer following")]
			public float acceleration;

			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 1f)]
			[Tooltip("Matching target velocity")]
			public float matchVelocity;

			[Token(Token = "0x40006BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("gravity applied to the Body")]
			public float gravity;

			[Token(Token = "0x40006C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x40006C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x40006C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x40006C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x40006C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x60008E9")]
			[Address(RVA = "0xF2B83C", Offset = "0xF2B83C", VA = "0xF2B83C")]
			public void Reset()
			{
			}

			[Token(Token = "0x60008EA")]
			[Address(RVA = "0xF2B9BC", Offset = "0xF2B9BC", VA = "0xF2B9BC")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x60008EB")]
			[Address(RVA = "0xF2BD18", Offset = "0xF2BD18", VA = "0xF2BD18")]
			public Body()
			{
			}
		}

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The array of Bodies")]
		public Body[] bodies;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The array of OffsetLimits")]
		public OffsetLimits[] limits;

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xF2B7D0", Offset = "0xF2B7D0", VA = "0xF2B7D0")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xF2B918", Offset = "0xF2B918", VA = "0xF2B918", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xF2BD08", Offset = "0xF2BD08", VA = "0xF2BD08")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The target to look at. Do not use the Target transform that is assigned to LookAtIK. Set to null if you wish to stop looking.")]
		[Header("Target Smoothing")]
		public Transform target;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The time it takes to blend in/out of LookAtIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The position of the pivot that the look at target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum distance of looking from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the look direction.")]
		[Range(0f, 180f)]
		[Header("RootRotation")]
		public float maxRootAngle;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x170000F1")]
		private Vector3 pivot
		{
			[Token(Token = "0x60008EF")]
			[Address(RVA = "0xF2BDA4", Offset = "0xF2BDA4", VA = "0xF2BDA4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xF2BD3C", Offset = "0xF2BD3C", VA = "0xF2BD3C")]
		private void Start()
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xF2BE28", Offset = "0xF2BE28", VA = "0xF2BE28")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xF2C330", Offset = "0xF2C330", VA = "0xF2C330")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xF2C4B4", Offset = "0xF2C4B4", VA = "0xF2C4B4")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xF2C700", Offset = "0xF2C700", VA = "0xF2C700")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x2000105")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000106")]
		public class OffsetLimits
		{
			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The effector type (this is just an enum)")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Spring force, if zero then this is a hard limit, if not, offset can exceed the limit.")]
			public float spring;

			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool x;

			[Token(Token = "0x40006E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool y;

			[Token(Token = "0x40006E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool z;

			[Token(Token = "0x40006E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The limits")]
			public float minX;

			[Token(Token = "0x40006E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The limits")]
			public float maxX;

			[Token(Token = "0x40006E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The limits")]
			public float minY;

			[Token(Token = "0x40006E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The limits")]
			public float maxY;

			[Token(Token = "0x40006E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The limits")]
			public float minZ;

			[Token(Token = "0x40006E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The limits")]
			public float maxZ;

			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xF2C908", Offset = "0xF2C908", VA = "0xF2C908")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x60008FC")]
			[Address(RVA = "0xF2CB98", Offset = "0xF2CB98", VA = "0xF2CB98")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x60008FD")]
			[Address(RVA = "0xF2CC08", Offset = "0xF2CC08", VA = "0xF2CC08")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xF2CC50", Offset = "0xF2CC50", VA = "0xF2CC50")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x2000107")]
		[CompilerGenerated]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x170000F3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000902")]
				[Address(RVA = "0xF2CDCC", Offset = "0xF2CDCC", VA = "0xF2CDCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000904")]
				[Address(RVA = "0xF2CE14", Offset = "0xF2CE14", VA = "0xF2CE14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008FF")]
			[Address(RVA = "0xF2C80C", Offset = "0xF2C80C", VA = "0xF2C80C")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000900")]
			[Address(RVA = "0xF2CC58", Offset = "0xF2CC58", VA = "0xF2CC58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000901")]
			[Address(RVA = "0xF2CC5C", Offset = "0xF2CC5C", VA = "0xF2CC5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000903")]
			[Address(RVA = "0xF2CDD4", Offset = "0xF2CDD4", VA = "0xF2CDD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the FBBIK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x170000F2")]
		protected float deltaTime
		{
			[Token(Token = "0x60008F3")]
			[Address(RVA = "0xF28654", Offset = "0xF28654", VA = "0xF28654")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60008F4")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xF28448", Offset = "0xF28448", VA = "0xF28448", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xF2C798", Offset = "0xF2C798", VA = "0xF2C798")]
		[IteratorStateMachine(typeof(<Initiate>d__8))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xF2C834", Offset = "0xF2C834", VA = "0xF2C834")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xF2BC60", Offset = "0xF2BC60", VA = "0xF2BC60")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xF2CA6C", Offset = "0xF2CA6C", VA = "0xF2CA6C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xF28744", Offset = "0xF28744", VA = "0xF28744")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x2000108")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x2000109")]
		[CompilerGenerated]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x170000F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600090F")]
				[Address(RVA = "0xF2D26C", Offset = "0xF2D26C", VA = "0xF2D26C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000911")]
				[Address(RVA = "0xF2D2B4", Offset = "0xF2D2B4", VA = "0xF2D2B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600090C")]
			[Address(RVA = "0xF2CED0", Offset = "0xF2CED0", VA = "0xF2CED0")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600090D")]
			[Address(RVA = "0xF2D0F8", Offset = "0xF2D0F8", VA = "0xF2D0F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600090E")]
			[Address(RVA = "0xF2D0FC", Offset = "0xF2D0FC", VA = "0xF2D0FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000910")]
			[Address(RVA = "0xF2D274", Offset = "0xF2D274", VA = "0xF2D274", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the VRIK component")]
		public VRIK ik;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x170000F5")]
		protected float deltaTime
		{
			[Token(Token = "0x6000905")]
			[Address(RVA = "0xF2CE1C", Offset = "0xF2CE1C", VA = "0xF2CE1C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000906")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xF2CE3C", Offset = "0xF2CE3C", VA = "0xF2CE3C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xF2CE5C", Offset = "0xF2CE5C", VA = "0xF2CE5C")]
		[IteratorStateMachine(typeof(<Initiate>d__7))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xF2CEF8", Offset = "0xF2CEF8", VA = "0xF2CEF8")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xF2CFCC", Offset = "0xF2CFCC", VA = "0xF2CFCC", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xF2AB88", Offset = "0xF2AB88", VA = "0xF2AB88")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x200010A")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200010B")]
		public class EffectorLink
		{
			[Token(Token = "0x40006F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40006F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x40006F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x40006F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x6000915")]
			[Address(RVA = "0xF2D2BC", Offset = "0xF2D2BC", VA = "0xF2D2BC")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000916")]
			[Address(RVA = "0xF2D614", Offset = "0xF2D614", VA = "0xF2D614")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xF28674", Offset = "0xF28674", VA = "0xF28674")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xF2D50C", Offset = "0xF2D50C", VA = "0xF2D50C")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xF2D5B0", Offset = "0xF2D5B0", VA = "0xF2D5B0")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x200010C")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200010D")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x200010E")]
			public class EffectorLink
			{
				[Token(Token = "0x4000702")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Effector to apply the offset to.")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000703")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Multiplier of the offset value, can be negative.")]
				public float weight;

				[Token(Token = "0x600091D")]
				[Address(RVA = "0xF2DC68", Offset = "0xF2DC68", VA = "0xF2DC68")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40006F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Bones to start the raycast from. Multiple raycasts can be used by assigning more than 1 bone.")]
			public Transform[] raycastFrom;

			[Token(Token = "0x40006F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Transform to raycast towards. Usually the body part that you want to keep from penetrating.")]
			public Transform raycastTo;

			[Token(Token = "0x40006FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0f, 1f)]
			[Tooltip("If 0, will use simple raycasting, if > 0, will use sphere casting (better, but slower).")]
			public float raycastRadius;

			[Token(Token = "0x40006FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this to FBBIK effectors.")]
			public EffectorLink[] effectors;

			[Token(Token = "0x40006FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The time of smooth interpolation of the offset value to avoid penetration.")]
			public float smoothTimeIn;

			[Token(Token = "0x40006FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The time of smooth interpolation of the offset value blending out of penetration avoidance.")]
			public float smoothTimeOut;

			[Token(Token = "0x40006FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Layers to keep penetrating from.")]
			public LayerMask layers;

			[Token(Token = "0x40006FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x4000700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x4000701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x6000919")]
			[Address(RVA = "0xF2D68C", Offset = "0xF2D68C", VA = "0xF2D68C")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600091A")]
			[Address(RVA = "0xF2D82C", Offset = "0xF2D82C", VA = "0xF2D82C")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600091B")]
			[Address(RVA = "0xF2D934", Offset = "0xF2D934", VA = "0xF2D934")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600091C")]
			[Address(RVA = "0xF2DC54", Offset = "0xF2DC54", VA = "0xF2DC54")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Definitions of penetration avoidances.")]
		public Avoider[] avoiders;

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xF2D61C", Offset = "0xF2D61C", VA = "0xF2D61C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xF2D81C", Offset = "0xF2D81C", VA = "0xF2D81C")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000110")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x2000111")]
			public class EffectorLink
			{
				[Token(Token = "0x4000722")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000723")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x600092D")]
				[Address(RVA = "0xF2F148", Offset = "0xF2F148", VA = "0xF2F148")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400071C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Offset vector for the associated effector when doing recoil.")]
			public Vector3 offset;

			[Token(Token = "0x400071D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("When firing before the last recoil has faded, how much of the current recoil offset will be maintained?")]
			[Range(0f, 1f)]
			public float additivity;

			[Token(Token = "0x400071E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max additive recoil for automatic fire.")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x400071F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this recoil offset to FBBIK effectors.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4000721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x600092A")]
			[Address(RVA = "0xF2DE0C", Offset = "0xF2DE0C", VA = "0xF2DE0C")]
			public void Start()
			{
			}

			[Token(Token = "0x600092B")]
			[Address(RVA = "0xF2E9C8", Offset = "0xF2E9C8", VA = "0xF2E9C8")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x600092C")]
			[Address(RVA = "0xF2F134", Offset = "0xF2F134", VA = "0xF2F134")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000112")]
		public enum Handedness
		{
			[Token(Token = "0x4000725")]
			Right,
			[Token(Token = "0x4000726")]
			Left
		}

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the AimIK component. Optional, only used to getting the aiming direction.")]
		public AimIK aimIK;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Optional head AimIK solver. This solver should only use neck and head bones and have the head as Aim Transform")]
		public AimIK headIK;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Set this true if you are using IKExecutionOrder.cs or a custom script to force AimIK solve after FBBIK.")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Which hand is holding the weapon?")]
		public Handedness handedness;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Check for 2-handed weapons.")]
		public bool twoHanded;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Weight curve for the recoil offsets. Recoil procedure is as long as this curve.")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How much is the magnitude randomized each time Recoil is called?")]
		public float magnitudeRandom;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("How much is the rotation randomized each time Recoil is called?")]
		public Vector3 rotationRandom;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Rotating the primary hand bone for the recoil (in local space).")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Time of blending in another recoil when doing automatic fire.")]
		public float blendTime;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("FBBIK effector position offsets for the recoil (in aiming direction space).")]
		[Space(10f)]
		public RecoilOffset[] offsets;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float magnitudeMlp;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float endTime;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion handRotation;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion randomRotation;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float length;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private bool initiated;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float blendWeight;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float w;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool handRotationsSet;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x170000F8")]
		public bool isFinished
		{
			[Token(Token = "0x600091E")]
			[Address(RVA = "0xF2DC70", Offset = "0xF2DC70", VA = "0xF2DC70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F9")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6000924")]
			[Address(RVA = "0xF2EBCC", Offset = "0xF2EBCC", VA = "0xF2EBCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6000925")]
			[Address(RVA = "0xF2EC08", Offset = "0xF2EC08", VA = "0xF2EC08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FB")]
		private Transform primaryHand
		{
			[Token(Token = "0x6000926")]
			[Address(RVA = "0xF2EB94", Offset = "0xF2EB94", VA = "0xF2EB94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FC")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6000927")]
			[Address(RVA = "0xF2EBB0", Offset = "0xF2EBB0", VA = "0xF2EBB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xF2DC94", Offset = "0xF2DC94", VA = "0xF2DC94")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xF2DCC0", Offset = "0xF2DCC0", VA = "0xF2DCC0")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xF2DEE0", Offset = "0xF2DEE0", VA = "0xF2DEE0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xF2EC44", Offset = "0xF2EC44", VA = "0xF2EC44")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xF2EDCC", Offset = "0xF2EDCC", VA = "0xF2EDCC")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xF2EEA4", Offset = "0xF2EEA4", VA = "0xF2EEA4", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xF2F0A8", Offset = "0xF2F0A8", VA = "0xF2F0A8")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Weight of shoulder rotation")]
		public float weight;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The greater the offset, the sooner the shoulder will start rotating")]
		public float offset;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xF2F150", Offset = "0xF2F150", VA = "0xF2F150")]
		private void Start()
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xF2F264", Offset = "0xF2F264", VA = "0xF2F264")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xF2F340", Offset = "0xF2F340", VA = "0xF2F340")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xF2F744", Offset = "0xF2F744", VA = "0xF2F744")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xF2F778", Offset = "0xF2F778", VA = "0xF2F778")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xF2F8A4", Offset = "0xF2F8A4", VA = "0xF2F8A4")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x2000114")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x2000115")]
		public class Settings
		{
			[Token(Token = "0x400072B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Multiplies character scale")]
			public float scaleMlp;

			[Token(Token = "0x400072C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Local axis of the HMD facing forward.")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x400072D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Local axis of the HMD facing up.")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x400072E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Local axis of the hand trackers pointing from the wrist towards the palm.")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x400072F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Local axis of the hand trackers pointing in the direction of the surface normal of the back of the hand.")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x4000730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("Local axis of the foot trackers towards the player's forward direction.")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x4000731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Local axis of the foot tracker towards the up direction.")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x4000732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Space(10f)]
			[Tooltip("Offset of the head bone from the HMD in (headTrackerForward, headTrackerUp) space relative to the head tracker.")]
			public Vector3 headOffset;

			[Token(Token = "0x4000733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Offset of the hand bones from the hand trackers in (handTrackerForward, handTrackerUp) space relative to the hand trackers.")]
			public Vector3 handOffset;

			[Token(Token = "0x4000734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Forward offset of the foot bones from the foot trackers.")]
			public float footForwardOffset;

			[Token(Token = "0x4000735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Inward offset of the foot bones from the foot trackers.")]
			public float footInwardOffset;

			[Token(Token = "0x4000736")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Used for adjusting foot heading relative to the foot trackers.")]
			[Range(-180f, 180f)]
			public float footHeadingOffset;

			[Token(Token = "0x4000737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000943")]
			[Address(RVA = "0xF33A94", Offset = "0xF33A94", VA = "0xF33A94")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000116")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x2000117")]
			public class Target
			{
				[Token(Token = "0x4000745")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x4000746")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x4000747")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x6000945")]
				[Address(RVA = "0xF315F8", Offset = "0xF315F8", VA = "0xF315F8")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x6000946")]
				[Address(RVA = "0xF32058", Offset = "0xF32058", VA = "0xF32058")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4000739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x400073A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x400073B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x400073C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x400073E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x4000741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x4000742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x4000743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000944")]
			[Address(RVA = "0xF30CFC", Offset = "0xF30CFC", VA = "0xF30CFC")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xF2F8B8", Offset = "0xF2F8B8", VA = "0xF2F8B8")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, Settings settings)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xF2F8D0", Offset = "0xF2F8D0", VA = "0xF2F8D0")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, float scaleMlp)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xF2F9F8", Offset = "0xF2F9F8", VA = "0xF2F9F8")]
		private static void CalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xF2F918", Offset = "0xF2F918", VA = "0xF2F918")]
		private static void CalibrateScale(VRIK ik, float scaleMlp = 1f)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xF2FA10", Offset = "0xF2FA10", VA = "0xF2FA10")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xF30D04", Offset = "0xF30D04", VA = "0xF30D04")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xF316AC", Offset = "0xF316AC", VA = "0xF316AC")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xF320B4", Offset = "0xF320B4", VA = "0xF320B4")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xF324E4", Offset = "0xF324E4", VA = "0xF324E4")]
		public static CalibrationData Calibrate(VRIK ik, Transform centerEyeAnchor, Transform leftHandAnchor, Transform rightHandAnchor, Vector3 centerEyePositionOffset, Vector3 centerEyeRotationOffset, Vector3 handPositionOffset, Vector3 handRotationOffset, float scaleMlp = 1f)
		{
			return null;
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xF32718", Offset = "0xF32718", VA = "0xF32718")]
		public static void CalibrateHead(VRIK ik, Transform centerEyeAnchor, Vector3 anchorPositionOffset, Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xF32EC4", Offset = "0xF32EC4", VA = "0xF32EC4")]
		public static void CalibrateBody(VRIK ik, Transform pelvisTracker, Vector3 trackerPositionOffset, Vector3 trackerRotationOffset)
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xF32CAC", Offset = "0xF32CAC", VA = "0xF32CAC")]
		public static void CalibrateHands(VRIK ik, Transform leftHandAnchor, Transform rightHandAnchor, Vector3 anchorPositionOffset, Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xF33178", Offset = "0xF33178", VA = "0xF33178")]
		private static void CalibrateHand(VRIK ik, Transform anchor, Vector3 positionOffset, Vector3 rotationOffset, bool isLeft)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xF33668", Offset = "0xF33668", VA = "0xF33668")]
		public static Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xF3374C", Offset = "0xF3374C", VA = "0xF3374C")]
		public static Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000118")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xF33C28", Offset = "0xF33C28", VA = "0xF33C28")]
		private void Start()
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xF33C80", Offset = "0xF33C80", VA = "0xF33C80")]
		private void Update()
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xF33CA8", Offset = "0xF33CA8", VA = "0xF33CA8")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xF33DC8", Offset = "0xF33DC8", VA = "0xF33DC8")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x2000119")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x170000FD")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x600094B")]
			[Address(RVA = "0xF33DE0", Offset = "0xF33DE0", VA = "0xF33DE0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600094C")]
			[Address(RVA = "0xF33DEC", Offset = "0xF33DEC", VA = "0xF33DEC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xF33DF8", Offset = "0xF33DF8", VA = "0xF33DF8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xF313E4", Offset = "0xF313E4", VA = "0xF313E4")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xF32344", Offset = "0xF32344", VA = "0xF32344")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xF33F14", Offset = "0xF33F14", VA = "0xF33F14")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xF342DC", Offset = "0xF342DC", VA = "0xF342DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xF34408", Offset = "0xF34408", VA = "0xF34408")]
		public VRIKRootController()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x200011A")]
	public class FKOffset : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200011B")]
		public class Offset
		{
			[Token(Token = "0x4000753")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x4000754")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x4000755")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 rotationOffset;

			[Token(Token = "0x4000756")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x6000957")]
			[Address(RVA = "0xF344CC", Offset = "0xF344CC", VA = "0xF344CC")]
			public void Apply(Animator animator)
			{
			}

			[Token(Token = "0x6000958")]
			[Address(RVA = "0xF34748", Offset = "0xF34748", VA = "0xF34748")]
			public Offset()
			{
			}
		}

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Offset[] offsets;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xF34410", Offset = "0xF34410", VA = "0xF34410")]
		private void Start()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xF34468", Offset = "0xF34468", VA = "0xF34468")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xF3467C", Offset = "0xF3467C", VA = "0xF3467C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xF34740", Offset = "0xF34740", VA = "0xF34740")]
		public FKOffset()
		{
		}
	}
	[Token(Token = "0x200011C")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xF34750", Offset = "0xF34750", VA = "0xF34750")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xF347D0", Offset = "0xF347D0", VA = "0xF347D0")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x200011D")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The direction in which the weapon is aimed in animation (in character space). Tweak this value to adjust the aiming.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xF347D8", Offset = "0xF347D8", VA = "0xF347D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xF34844", Offset = "0xF34844", VA = "0xF34844")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class SecondHandOnGun : MonoBehaviour
	{
		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aim;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbIK leftArmIK;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHand;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightHand;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GrounderFBBIK grounder;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 leftHandPositionOffset;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 leftHandRotationOffset;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 leftHandPosRelToRight;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion leftHandRotRelToRight;

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xF348A4", Offset = "0xF348A4", VA = "0xF348A4")]
		private void Start()
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xF3495C", Offset = "0xF3495C", VA = "0xF3495C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xF34C88", Offset = "0xF34C88", VA = "0xF34C88")]
		public SecondHandOnGun()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("AimPoser is a tool that returns an animation name based on direction.")]
		public AimPoser aimPoser;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK aim;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Reference to the LookAt component (only used for the head in this instance).")]
		public LookAtIK lookAt;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component.")]
		public Animator animator;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time of cross-fading from pose to pose.")]
		public float crossfadeTime;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Will keep the aim target at a distance.")]
		public float minAimDistance;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xF34C90", Offset = "0xF34C90", VA = "0xF34C90")]
		private void Start()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xF34CC8", Offset = "0xF34CC8", VA = "0xF34CC8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xF34D74", Offset = "0xF34D74", VA = "0xF34D74")]
		private void Pose()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xF34EDC", Offset = "0xF34EDC", VA = "0xF34EDC")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xF35098", Offset = "0xF35098", VA = "0xF35098")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xF35128", Offset = "0xF35128", VA = "0xF35128")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x2000120")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xF3513C", Offset = "0xF3513C", VA = "0xF3513C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xF352A8", Offset = "0xF352A8", VA = "0xF352A8")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xF354A4", Offset = "0xF354A4", VA = "0xF354A4")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LargeHeader("References")]
		public Animator animator;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[LargeHeader("Look At")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float lookAtWeight;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float lookAtBodyWeight;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float lookAtHeadWeight;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float lookAtEyesWeight;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float lookAtClampWeight;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float lookAtClampWeightHead;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[LargeHeader("Foot")]
		public Transform footTargetBiped;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float footPositionWeight;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[LargeHeader("Hand")]
		public Transform handTargetBiped;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float handPositionWeight;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float handRotationWeight;

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xF354D4", Offset = "0xF354D4", VA = "0xF354D4")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xF35900", Offset = "0xF35900", VA = "0xF35900")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x2000122")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sine;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private RaycastHit rootHit;

		[Token(Token = "0x170000FE")]
		public Vector3 velocity
		{
			[Token(Token = "0x600096B")]
			[Address(RVA = "0xF35920", Offset = "0xF35920", VA = "0xF35920")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600096C")]
			[Address(RVA = "0xF3592C", Offset = "0xF3592C", VA = "0xF3592C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xF35938", Offset = "0xF35938", VA = "0xF35938")]
		private void Start()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xF35968", Offset = "0xF35968", VA = "0xF35968")]
		private void Update()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xF362EC", Offset = "0xF362EC", VA = "0xF362EC")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xF36068", Offset = "0xF36068", VA = "0xF36068")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xF363FC", Offset = "0xF363FC", VA = "0xF363FC")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x2000123")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x170000FF")]
		public Vector3 inputVector
		{
			[Token(Token = "0x6000972")]
			[Address(RVA = "0xF36428", Offset = "0xF36428", VA = "0xF36428")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xF364A8", Offset = "0xF364A8", VA = "0xF364A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xF367EC", Offset = "0xF367EC", VA = "0xF367EC")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000125")]
		[CompilerGenerated]
		private sealed class <Step>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40007B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40007B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40007B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x40007B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x40007B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x17000102")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000983")]
				[Address(RVA = "0xF37844", Offset = "0xF37844", VA = "0xF37844", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000103")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000985")]
				[Address(RVA = "0xF3788C", Offset = "0xF3788C", VA = "0xF3788C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000980")]
			[Address(RVA = "0xF374DC", Offset = "0xF374DC", VA = "0xF374DC")]
			[DebuggerHidden]
			public <Step>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000981")]
			[Address(RVA = "0xF37594", Offset = "0xF37594", VA = "0xF37594", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000982")]
			[Address(RVA = "0xF37598", Offset = "0xF37598", VA = "0xF37598", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000984")]
			[Address(RVA = "0xF3784C", Offset = "0xF3784C", VA = "0xF3784C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform foot;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 footUpAxis;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationSpeed;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ParticleSystem sand;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IK ik;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float stepProgress;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastStepTime;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 defaultPosition;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit hit;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastFootLocalRotation;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 smoothHitNormal;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 lastStepPosition;

		[Token(Token = "0x17000100")]
		public bool isStepping
		{
			[Token(Token = "0x6000975")]
			[Address(RVA = "0xF36800", Offset = "0xF36800", VA = "0xF36800")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000101")]
		public Vector3 position
		{
			[Token(Token = "0x6000976")]
			[Address(RVA = "0xF363CC", Offset = "0xF363CC", VA = "0xF363CC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000977")]
			[Address(RVA = "0xF36814", Offset = "0xF36814", VA = "0xF36814")]
			set
			{
			}
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xF36860", Offset = "0xF36860", VA = "0xF36860")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xF36AE0", Offset = "0xF36AE0", VA = "0xF36AE0")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xF36CB8", Offset = "0xF36CB8", VA = "0xF36CB8")]
		private void Start()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xF36EDC", Offset = "0xF36EDC", VA = "0xF36EDC")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xF3713C", Offset = "0xF3713C", VA = "0xF3713C")]
		private void UpdatePosition(float distance)
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xF372A4", Offset = "0xF372A4", VA = "0xF372A4")]
		private void Update()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xF36E2C", Offset = "0xF36E2C", VA = "0xF36E2C")]
		[IteratorStateMachine(typeof(<Step>d__33))]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xF37504", Offset = "0xF37504", VA = "0xF37504")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x2000126")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xF37894", Offset = "0xF37894", VA = "0xF37894")]
		private void Start()
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xF37970", Offset = "0xF37970", VA = "0xF37970")]
		private void Update()
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xF37BE4", Offset = "0xF37BE4", VA = "0xF37BE4")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x2000127")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000128")]
		public struct Warp
		{
			[Token(Token = "0x40007BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Layer of the 'Animation State' in the Animator.")]
			public int animationLayer;

			[Token(Token = "0x40007BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Name of the state in the Animator to warp.")]
			public string animationState;

			[Token(Token = "0x40007C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Warping weight by normalized time of the animation state.")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x40007C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Animated point to warp from. This should be in character space so keep this Transform parented to the root of the character.")]
			public Transform warpFrom;

			[Token(Token = "0x40007C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("World space point to warp to.")]
			public Transform warpTo;

			[Token(Token = "0x40007C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Which FBBIK effector to use?")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x2000129")]
		public enum EffectorMode
		{
			[Token(Token = "0x40007C5")]
			PositionOffset,
			[Token(Token = "0x40007C6")]
			Position
		}

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component to use")]
		public Animator animator;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Using effector.positionOffset or effector.position with effector.positionWeight? The former will enable you to use effector.position for other things, the latter will weigh in the effectors, hence using Reach and Pull in the process.")]
		public EffectorMode effectorMode;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The array of warps, can have multiple simultaneous warps.")]
		[Space(10f)]
		public Warp[] warps;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xF37BEC", Offset = "0xF37BEC", VA = "0xF37BEC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xF37C18", Offset = "0xF37C18", VA = "0xF37C18")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xF37E30", Offset = "0xF37E30", VA = "0xF37E30", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xF380E8", Offset = "0xF380E8", VA = "0xF380E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xF3817C", Offset = "0xF3817C", VA = "0xF3817C")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x200012A")]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xF3818C", Offset = "0xF3818C", VA = "0xF3818C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xF381E4", Offset = "0xF381E4", VA = "0xF381E4")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xF383EC", Offset = "0xF383EC", VA = "0xF383EC", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xF38614", Offset = "0xF38614", VA = "0xF38614")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200012B")]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float headLookWeight;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xF38628", Offset = "0xF38628", VA = "0xF38628", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xF387FC", Offset = "0xF387FC", VA = "0xF387FC", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xF3886C", Offset = "0xF3886C", VA = "0xF3886C")]
		private void Read()
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xF389A4", Offset = "0xF389A4", VA = "0xF389A4")]
		private void AimIK()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xF38A00", Offset = "0xF38A00", VA = "0xF38A00")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xF39068", Offset = "0xF39068", VA = "0xF39068")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xF38E7C", Offset = "0xF38E7C", VA = "0xF38E7C")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xF3930C", Offset = "0xF3930C", VA = "0xF3930C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xF39438", Offset = "0xF39438", VA = "0xF39438")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x200012C")]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xF39454", Offset = "0xF39454", VA = "0xF39454", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xF3953C", Offset = "0xF3953C", VA = "0xF3953C", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xF39890", Offset = "0xF39890", VA = "0xF39890")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xF39980", Offset = "0xF39980", VA = "0xF39980")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraController cam;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x17000104")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0xF39C28", Offset = "0xF39C28", VA = "0xF39C28")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000105")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x60009A2")]
			[Address(RVA = "0xF39CA8", Offset = "0xF39CA8", VA = "0xF39CA8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xF399C8", Offset = "0xF399C8", VA = "0xF399C8")]
		private void Start()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xF39A38", Offset = "0xF39A38", VA = "0xF39A38")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xF39D28", Offset = "0xF39D28", VA = "0xF39D28")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200012E")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xF39D30", Offset = "0xF39D30", VA = "0xF39D30", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xF3A18C", Offset = "0xF3A18C", VA = "0xF3A18C")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x200012F")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xF3A194", Offset = "0xF3A194", VA = "0xF3A194")]
		private void Start()
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xF3A24C", Offset = "0xF3A24C", VA = "0xF3A24C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xF3A6A8", Offset = "0xF3A6A8", VA = "0xF3A6A8")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xF3A748", Offset = "0xF3A748", VA = "0xF3A748")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x2000130")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000131")]
		public class Limb
		{
			[Token(Token = "0x40007FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x40007FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x40007FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x60009AE")]
			[Address(RVA = "0xF3A8DC", Offset = "0xF3A8DC", VA = "0xF3A8DC")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x60009AF")]
			[Address(RVA = "0xF3AA00", Offset = "0xF3AA00", VA = "0xF3AA00")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xF3A7B8", Offset = "0xF3A7B8", VA = "0xF3A7B8")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xF3A954", Offset = "0xF3A954", VA = "0xF3A954")]
		private void Start()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xF3A9EC", Offset = "0xF3A9EC", VA = "0xF3A9EC")]
		private void Update()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xF3A9F0", Offset = "0xF3A9F0", VA = "0xF3A9F0")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x2000132")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xF3AA10", Offset = "0xF3AA10", VA = "0xF3AA10")]
		private void Start()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xF3AA78", Offset = "0xF3AA78", VA = "0xF3AA78")]
		private void Update()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xF3AB4C", Offset = "0xF3AB4C", VA = "0xF3AB4C")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The target we want to hit")]
		public Transform target;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The pin Transform is used to reference the exact hit point in the animation (used by AimIK to aim the upper body to follow the target).In Legacy and Generic modes you can just create and position a reference point in your animating software and include it in the FBX. Then in Unity if you added a GameObject with the exact same name under the character's root, it would be animated to the required position.In Humanoid mode however, Mecanim loses track of any Transform that does not belong to the avatar, so in this case the pin point has to be manually set inside the Unity Editor.")]
		public Transform pin;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Full Body Biped IK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Aim IK component. Aim IK is ust used for following the target slightly with the body.")]
		public AimIK aim;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The effector type of the punching hand")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Weight of aiming the body to follow the target")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xF3AB54", Offset = "0xF3AB54", VA = "0xF3AB54")]
		private void Start()
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xF3ABAC", Offset = "0xF3ABAC", VA = "0xF3ABAC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xF3AD44", Offset = "0xF3AD44", VA = "0xF3AD44")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x2000134")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xF3AD4C", Offset = "0xF3AD4C", VA = "0xF3AD4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xF3AE2C", Offset = "0xF3AE2C", VA = "0xF3AE2C")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xF3AEB8", Offset = "0xF3AEB8", VA = "0xF3AEB8")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xF3B38C", Offset = "0xF3B38C", VA = "0xF3B38C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xF3B4B8", Offset = "0xF3B4B8", VA = "0xF3B4B8")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x2000135")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float aimWeight;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float sightWeight;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 180f)]
		public float maxAngle;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 aimOffset;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool animatePhysics;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform gun;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform gunTarget;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AimIK gunAim;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AimIK headAim;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CameraControllerFPS cam;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Recoil recoil;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1f)]
		public float cameraRecoilWeight;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 gunTargetDefaultLocalRotation;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool updateFrame;

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xF3B4C0", Offset = "0xF3B4C0", VA = "0xF3B4C0")]
		private void Start()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xF3B65C", Offset = "0xF3B65C", VA = "0xF3B65C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xF3B668", Offset = "0xF3B668", VA = "0xF3B668")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xF3B928", Offset = "0xF3B928", VA = "0xF3B928")]
		private void Aiming()
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xF3BBC4", Offset = "0xF3BBC4", VA = "0xF3BBC4")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xF3B72C", Offset = "0xF3B72C", VA = "0xF3B72C")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xF3C87C", Offset = "0xF3C87C", VA = "0xF3C87C")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x2000136")]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float walkSpeed;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xF3C89C", Offset = "0xF3C89C", VA = "0xF3C89C")]
		private void Start()
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xF3C92C", Offset = "0xF3C92C", VA = "0xF3C92C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xF3CA28", Offset = "0xF3CA28", VA = "0xF3CA28")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xF3CAD4", Offset = "0xF3CAD4", VA = "0xF3CAD4")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReaction hitReaction;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xF3CAE4", Offset = "0xF3CAE4", VA = "0xF3CAE4")]
		private void Update()
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xF3CC34", Offset = "0xF3CC34", VA = "0xF3CC34")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xF3CD98", Offset = "0xF3CD98", VA = "0xF3CD98")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x2000138")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xF3CDA8", Offset = "0xF3CDA8", VA = "0xF3CDA8")]
		private void Start()
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xF3CF74", Offset = "0xF3CF74", VA = "0xF3CF74")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xF3D384", Offset = "0xF3D384", VA = "0xF3D384")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xF3D394", Offset = "0xF3D394", VA = "0xF3D394")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xF3D47C", Offset = "0xF3D47C", VA = "0xF3D47C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xF3D568", Offset = "0xF3D568", VA = "0xF3D568")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x200013A")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xF3D570", Offset = "0xF3D570", VA = "0xF3D570")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xF3DA70", Offset = "0xF3DA70", VA = "0xF3DA70")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x200013B")]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object to interact to")]
		public InteractionObject interactionObject;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The effectors to interact with")]
		public FullBodyBipedEffector[] effectors;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xF3DA78", Offset = "0xF3DA78", VA = "0xF3DA78")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xF3DAD0", Offset = "0xF3DAD0", VA = "0xF3DAD0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xF3DD7C", Offset = "0xF3DD7C", VA = "0xF3DD7C")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200013D")]
		public class Partner
		{
			[Token(Token = "0x400083F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x4000840")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x4000841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x4000842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x4000843")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x4000844")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x4000845")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x4000846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x4000847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x4000848")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x4000849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x17000106")]
			private Transform neck
			{
				[Token(Token = "0x60009D9")]
				[Address(RVA = "0xF3E588", Offset = "0xF3E588", VA = "0xF3E588")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009D7")]
			[Address(RVA = "0xF3DDAC", Offset = "0xF3DDAC", VA = "0xF3DDAC")]
			public void Initiate()
			{
			}

			[Token(Token = "0x60009D8")]
			[Address(RVA = "0xF3DE28", Offset = "0xF3DE28", VA = "0xF3DE28")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x60009DA")]
			[Address(RVA = "0xF3E420", Offset = "0xF3E420", VA = "0xF3E420")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x60009DB")]
			[Address(RVA = "0xF3E5D4", Offset = "0xF3E5D4", VA = "0xF3E5D4")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xF3DD84", Offset = "0xF3DD84", VA = "0xF3DD84")]
		private void Start()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xF3DDCC", Offset = "0xF3DDCC", VA = "0xF3DDCC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xF3E410", Offset = "0xF3E410", VA = "0xF3E410")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x200013E")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200013F")]
		public enum Mode
		{
			[Token(Token = "0x4000852")]
			Position,
			[Token(Token = "0x4000853")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x2000140")]
		public class Absorber
		{
			[Token(Token = "0x4000854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of effector (hand, foot, shoulder...) - this is just an enum")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000855")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("How much should motion be absorbed on this effector")]
			public float weight;

			[Token(Token = "0x4000856")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 position;

			[Token(Token = "0x4000857")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x4000858")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x60009E2")]
			[Address(RVA = "0xF3E760", Offset = "0xF3E760", VA = "0xF3E760")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x60009E3")]
			[Address(RVA = "0xF3E948", Offset = "0xF3E948", VA = "0xF3E948")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x60009E4")]
			[Address(RVA = "0xF3E96C", Offset = "0xF3E96C", VA = "0xF3E96C")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x60009E5")]
			[Address(RVA = "0xF3EA7C", Offset = "0xF3EA7C", VA = "0xF3EA7C")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x60009E6")]
			[Address(RVA = "0xF3EC34", Offset = "0xF3EC34", VA = "0xF3EC34")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Use either effector position, position weight, rotation, rotationWeight or positionOffset and rotating the bone directly.")]
		public Mode mode;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Array containing the absorbers")]
		public Absorber[] absorbers;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Weight falloff curve (how fast will the effect reduce after impact)")]
		public AnimationCurve falloff;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast will the impact fade away. (if 1, effect lasts for 1 second)")]
		public float falloffSpeed;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xF3E5E8", Offset = "0xF3E5E8", VA = "0xF3E5E8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xF3E6E0", Offset = "0xF3E6E0", VA = "0xF3E6E0")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xF3E83C", Offset = "0xF3E83C", VA = "0xF3E83C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xF3EA00", Offset = "0xF3EA00", VA = "0xF3EA00")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xF3EAEC", Offset = "0xF3EAEC", VA = "0xF3EAEC", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xF3EC24", Offset = "0xF3EC24", VA = "0xF3EC24")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x2000141")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xF3EC94", Offset = "0xF3EC94", VA = "0xF3EC94")]
		private void Start()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xF3ED0C", Offset = "0xF3ED0C", VA = "0xF3ED0C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xF3EDDC", Offset = "0xF3EDDC", VA = "0xF3EDDC")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xF3EF24", Offset = "0xF3EF24", VA = "0xF3EF24")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x2000142")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000143")]
		public class EffectorLink
		{
			[Token(Token = "0x4000865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x4000867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x60009EF")]
			[Address(RVA = "0xF3F4AC", Offset = "0xF3F4AC", VA = "0xF3F4AC")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Optional. Assign the bone Transform that is closest to this OffsetEffector to be able to call OffsetEffector.Anchor() in LateUpdate to match its position and rotation to animation.")]
		public Transform anchor;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 posRelToAnchor;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion rotRelToAnchor;

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xF3EF38", Offset = "0xF3EF38", VA = "0xF3EF38", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xF3F180", Offset = "0xF3F180", VA = "0xF3F180", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xF3F2F8", Offset = "0xF3F2F8", VA = "0xF3F2F8")]
		public void Anchor()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xF3F454", Offset = "0xF3F454", VA = "0xF3F454")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x2000144")]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("The master weight of this script.")]
		public float weight;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplier for the distance of the root to the target.")]
		public float hangingDistanceMlp;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[Tooltip("Where does the root of the character land when weight is blended out?")]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How is the root of the character rotated when weight is blended out?")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform target;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform leftHandTarget;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightHandTarget;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftFootTarget;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform rightFootTarget;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform pelvisTarget;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform bodyTarget;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform headTarget;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 pelvisDownAxis;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xF3F4BC", Offset = "0xF3F4BC", VA = "0xF3F4BC")]
		private void Start()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xF3F7D0", Offset = "0xF3F7D0", VA = "0xF3F7D0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xF3FFCC", Offset = "0xF3FFCC", VA = "0xF3FFCC")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x2000145")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int GUIspace;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x17000107")]
		private bool holding
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0xF403C4", Offset = "0xF403C4", VA = "0xF403C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000108")]
		private bool holdingLeft
		{
			[Token(Token = "0x60009FB")]
			[Address(RVA = "0xF40494", Offset = "0xF40494", VA = "0xF40494")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000109")]
		private bool holdingRight
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0xF403EC", Offset = "0xF403EC", VA = "0xF403EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xF40038", Offset = "0xF40038", VA = "0xF40038")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009F4")]
		protected abstract void RotatePivot();

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xF4053C", Offset = "0xF4053C", VA = "0xF4053C")]
		private void Start()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xF4072C", Offset = "0xF4072C", VA = "0xF4072C")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xF4089C", Offset = "0xF4089C", VA = "0xF4089C")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xF4096C", Offset = "0xF4096C", VA = "0xF4096C")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xF40A98", Offset = "0xF40A98", VA = "0xF40A98")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xF40C18", Offset = "0xF40C18", VA = "0xF40C18")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xF40E54", Offset = "0xF40E54", VA = "0xF40E54")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x2000146")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xF40E68", Offset = "0xF40E68", VA = "0xF40E68", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xF41048", Offset = "0xF41048", VA = "0xF41048")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x2000147")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xF4105C", Offset = "0xF4105C", VA = "0xF4105C", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xF41170", Offset = "0xF41170", VA = "0xF41170")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x2000148")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xF41184", Offset = "0xF41184", VA = "0xF41184")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xF4121C", Offset = "0xF4121C", VA = "0xF4121C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xF41334", Offset = "0xF41334", VA = "0xF41334")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xF4133C", Offset = "0xF4133C", VA = "0xF4133C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xF41394", Offset = "0xF41394", VA = "0xF41394")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xF413E0", Offset = "0xF413E0", VA = "0xF413E0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xF41478", Offset = "0xF41478", VA = "0xF41478")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x200014B")]
		[CompilerGenerated]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400088D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400088E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400088F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x4000890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x1700010A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A11")]
				[Address(RVA = "0xF41808", Offset = "0xF41808", VA = "0xF41808", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A13")]
				[Address(RVA = "0xF41850", Offset = "0xF41850", VA = "0xF41850", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A0E")]
			[Address(RVA = "0xF41624", Offset = "0xF41624", VA = "0xF41624")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000A0F")]
			[Address(RVA = "0xF4165C", Offset = "0xF4165C", VA = "0xF4165C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A10")]
			[Address(RVA = "0xF41660", Offset = "0xF41660", VA = "0xF41660", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A12")]
			[Address(RVA = "0xF41810", Offset = "0xF41810", VA = "0xF41810", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xF41488", Offset = "0xF41488", VA = "0xF41488")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xF4154C", Offset = "0xF4154C", VA = "0xF4154C")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xF415A0", Offset = "0xF415A0", VA = "0xF415A0")]
		[IteratorStateMachine(typeof(<ResetObject>d__7))]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xF4164C", Offset = "0xF4164C", VA = "0xF4164C")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x200014D")]
		[CompilerGenerated]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x1700010C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A1A")]
				[Address(RVA = "0xF41AF4", Offset = "0xF41AF4", VA = "0xF41AF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A1C")]
				[Address(RVA = "0xF41B3C", Offset = "0xF41B3C", VA = "0xF41B3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A17")]
			[Address(RVA = "0xF41980", Offset = "0xF41980", VA = "0xF41980")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000A18")]
			[Address(RVA = "0xF419B0", Offset = "0xF419B0", VA = "0xF419B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A19")]
			[Address(RVA = "0xF419B4", Offset = "0xF419B4", VA = "0xF419B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0xF41AFC", Offset = "0xF41AFC", VA = "0xF41AFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xF41858", Offset = "0xF41858", VA = "0xF41858")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xF4190C", Offset = "0xF4190C", VA = "0xF4190C")]
		[IteratorStateMachine(typeof(<ResetDelayed>d__4))]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xF419A8", Offset = "0xF419A8", VA = "0xF419A8")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200014F")]
		public class EffectorLink
		{
			[Token(Token = "0x4000899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x400089A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x400089B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x400089C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x400089D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x400089E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x400089F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float distanceMlp;

			[Token(Token = "0x40008A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public LayerMask touchLayers;

			[Token(Token = "0x40008A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float lerpSpeed;

			[Token(Token = "0x40008A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float minSwitchTime;

			[Token(Token = "0x40008A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float releaseDistance;

			[Token(Token = "0x40008A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool sliding;

			[Token(Token = "0x40008A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x40008A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float raycastDistance;

			[Token(Token = "0x40008A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private bool inTouch;

			[Token(Token = "0x40008A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private RaycastHit hit;

			[Token(Token = "0x40008A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private Vector3 targetPosition;

			[Token(Token = "0x40008AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private Quaternion targetRotation;

			[Token(Token = "0x40008AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private bool initiated;

			[Token(Token = "0x40008AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float nextSwitchTime;

			[Token(Token = "0x40008AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private float speedF;

			[Token(Token = "0x6000A21")]
			[Address(RVA = "0xF41BA8", Offset = "0xF41BA8", VA = "0xF41BA8")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000A22")]
			[Address(RVA = "0xF4277C", Offset = "0xF4277C", VA = "0xF4277C")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6000A23")]
			[Address(RVA = "0xF41FB0", Offset = "0xF41FB0", VA = "0xF41FB0")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000A24")]
			[Address(RVA = "0xF42864", Offset = "0xF42864", VA = "0xF42864")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000A25")]
			[Address(RVA = "0xF42948", Offset = "0xF42948", VA = "0xF42948")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000A26")]
			[Address(RVA = "0xF429D4", Offset = "0xF429D4", VA = "0xF429D4")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000A27")]
			[Address(RVA = "0xF42A5C", Offset = "0xF42A5C", VA = "0xF42A5C")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000A28")]
			[Address(RVA = "0xF42568", Offset = "0xF42568", VA = "0xF42568")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000A29")]
			[Address(RVA = "0xF42AE4", Offset = "0xF42AE4", VA = "0xF42AE4")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xF41B44", Offset = "0xF41B44", VA = "0xF41B44")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xF41F50", Offset = "0xF41F50", VA = "0xF41F50")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xF424B8", Offset = "0xF424B8", VA = "0xF424B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xF42774", Offset = "0xF42774", VA = "0xF42774")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x2000150")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to transfer motion to.")]
		public Transform to;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The amount of motion to transfer.")]
		public float transferMotion;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xF42B20", Offset = "0xF42B20", VA = "0xF42B20")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xF42B50", Offset = "0xF42B50", VA = "0xF42B50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xF42C00", Offset = "0xF42C00", VA = "0xF42C00")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The left hand target parented to the right hand.")]
		public Transform leftHandTarget;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Left hand poser (poses fingers to match the left hand target).")]
		public Poser leftHandPoser;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[Tooltip("The weight of pinning the left hand to the prop.")]
		public float leftHandWeight;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xF42C14", Offset = "0xF42C14", VA = "0xF42C14")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xF42DE4", Offset = "0xF42DE4", VA = "0xF42DE4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xF430DC", Offset = "0xF430DC", VA = "0xF430DC")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xF4327C", Offset = "0xF4327C", VA = "0xF4327C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xF433A8", Offset = "0xF433A8", VA = "0xF433A8")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x2000152")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterThirdPerson character;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool disableInputInInteraction;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xF433BC", Offset = "0xF433BC", VA = "0xF433BC", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xF43814", Offset = "0xF43814", VA = "0xF43814")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xF439DC", Offset = "0xF439DC", VA = "0xF439DC")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x2000153")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xF43A10", Offset = "0xF43A10", VA = "0xF43A10")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xF43C18", Offset = "0xF43C18", VA = "0xF43C18")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xF43C84", Offset = "0xF43C84", VA = "0xF43C84")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x2000154")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x2000155")]
		[CompilerGenerated]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x1700010E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A41")]
				[Address(RVA = "0xF443F4", Offset = "0xF443F4", VA = "0xF443F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A43")]
				[Address(RVA = "0xF4443C", Offset = "0xF4443C", VA = "0xF4443C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A3E")]
			[Address(RVA = "0xF4407C", Offset = "0xF4407C", VA = "0xF4407C")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000A3F")]
			[Address(RVA = "0xF4426C", Offset = "0xF4426C", VA = "0xF4426C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A40")]
			[Address(RVA = "0xF44270", Offset = "0xF44270", VA = "0xF44270", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A42")]
			[Address(RVA = "0xF443FC", Offset = "0xF443FC", VA = "0xF443FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xF43C8C", Offset = "0xF43C8C", VA = "0xF43C8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xF43DC8", Offset = "0xF43DC8", VA = "0xF43DC8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xF43D54", Offset = "0xF43D54", VA = "0xF43D54")]
		[IteratorStateMachine(typeof(<SwitchRotation>d__14))]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xF440A4", Offset = "0xF440A4", VA = "0xF440A4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xF4417C", Offset = "0xF4417C", VA = "0xF4417C")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xF44250", Offset = "0xF44250", VA = "0xF44250")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x2000156")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xF44444", Offset = "0xF44444", VA = "0xF44444")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xF444AC", Offset = "0xF444AC", VA = "0xF444AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xF44558", Offset = "0xF44558", VA = "0xF44558")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000158")]
		public class Part
		{
			[Token(Token = "0x40008D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x40008D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x6000A49")]
			[Address(RVA = "0xF445CC", Offset = "0xF445CC", VA = "0xF445CC")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x6000A4A")]
			[Address(RVA = "0xF44708", Offset = "0xF44708", VA = "0xF44708")]
			public Part()
			{
			}
		}

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xF44568", Offset = "0xF44568", VA = "0xF44568")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xF44700", Offset = "0xF44700", VA = "0xF44700")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x2000159")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionVRIK hitReaction;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xF44710", Offset = "0xF44710", VA = "0xF44710")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xF44860", Offset = "0xF44860", VA = "0xF44860")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xF449C4", Offset = "0xF449C4", VA = "0xF449C4")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x200015A")]
	public class VRController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200015B")]
		public enum InputMode
		{
			[Token(Token = "0x40008DF")]
			Input,
			[Token(Token = "0x40008E0")]
			WASDOnly
		}

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputMode inputMode;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRIK ik;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float walkSpeed;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float runSpeed;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float walkForwardSpeedMlp;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float runForwardSpeedMlp;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 smoothInput;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 smoothInputV;

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xF449D4", Offset = "0xF449D4", VA = "0xF449D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xF44BC8", Offset = "0xF44BC8", VA = "0xF44BC8")]
		private Vector3 GetInput()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xF44F10", Offset = "0xF44F10", VA = "0xF44F10")]
		public VRController()
		{
		}
	}
	[Token(Token = "0x200015C")]
	public class VRIKCalibrationBasic : MonoBehaviour
	{
		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The VRIK component.")]
		public VRIK ik;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Head")]
		[Tooltip("HMD.")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Position offset of the camera from the head bone (root space).")]
		public Vector3 headAnchorPositionOffset;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Rotation offset of the camera from the head bone (root space).")]
		public Vector3 headAnchorRotationOffset;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Hands")]
		[Tooltip("Left Hand Controller")]
		public Transform leftHandAnchor;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Right Hand Controller")]
		public Transform rightHandAnchor;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Position offset of the hand controller from the hand bone (controller space).")]
		public Vector3 handAnchorPositionOffset;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Rotation offset of the hand controller from the hand bone (controller space).")]
		public Vector3 handAnchorRotationOffset;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Scale")]
		[Tooltip("Multiplies the scale of the root.")]
		public float scaleMlp;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xF44F24", Offset = "0xF44F24", VA = "0xF44F24")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xF450B8", Offset = "0xF450B8", VA = "0xF450B8")]
		public VRIKCalibrationBasic()
		{
		}
	}
	[Token(Token = "0x200015D")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the VRIK component on the avatar.")]
		public VRIK ik;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The settings for VRIK calibration.")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The HMD.")]
		public Transform headTracker;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) A tracker placed anywhere on the body of the player, preferrably close to the pelvis, on the belt area.")]
		public Transform bodyTracker;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's left hand.")]
		public Transform leftHandTracker;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's right hand.")]
		public Transform rightHandTracker;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's left leg.")]
		public Transform leftFootTracker;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's right leg.")]
		public Transform rightFootTracker;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xF45134", Offset = "0xF45134", VA = "0xF45134")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xF45298", Offset = "0xF45298", VA = "0xF45298")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x200015E")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xF4530C", Offset = "0xF4530C", VA = "0xF4530C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xF4535C", Offset = "0xF4535C", VA = "0xF4535C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xF45534", Offset = "0xF45534", VA = "0xF45534")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x200015F")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 lastPosition;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xF4558C", Offset = "0xF4558C", VA = "0xF4558C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xF45ABC", Offset = "0xF45ABC", VA = "0xF45ABC")]
		public VRIKPlatformController()
		{
		}
	}
	[Token(Token = "0x2000160")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 localPosition;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x17000110")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x6000A5B")]
			[Address(RVA = "0xF45B38", Offset = "0xF45B38", VA = "0xF45B38", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xF45B18", Offset = "0xF45B18", VA = "0xF45B18", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xF45B40", Offset = "0xF45B40", VA = "0xF45B40")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xF45BA0", Offset = "0xF45BA0", VA = "0xF45BA0", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xF39880", Offset = "0xF39880", VA = "0xF39880", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xF45F90", Offset = "0xF45F90", VA = "0xF45F90", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xF45D24", Offset = "0xF45D24", VA = "0xF45D24")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xF45FA0", Offset = "0xF45FA0", VA = "0xF45FA0")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float pivotOffset;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve moveSpeed;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xF45FB8", Offset = "0xF45FB8", VA = "0xF45FB8", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xF46018", Offset = "0xF46018", VA = "0xF46018", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xF460A8", Offset = "0xF460A8", VA = "0xF460A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xF461CC", Offset = "0xF461CC", VA = "0xF461CC")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0.1f, 3f)]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 lastForward;

		[Token(Token = "0x4000910")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x4000911")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float jumpLeg;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastJump;

		[Token(Token = "0x17000111")]
		public override bool animationGrounded
		{
			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xF46200", Offset = "0xF46200", VA = "0xF46200", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xF394B4", Offset = "0xF394B4", VA = "0xF394B4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xF461E4", Offset = "0xF461E4", VA = "0xF461E4", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xF462F4", Offset = "0xF462F4", VA = "0xF462F4", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xF466E4", Offset = "0xF466E4", VA = "0xF466E4")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xF399A4", Offset = "0xF399A4", VA = "0xF399A4")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Base Parameters")]
		[Tooltip("If specified, will use the direction from the character to this Transform as the gravity vector instead of Physics.gravity. Physics.gravity.magnitude will be used as the magnitude of the gravity vector.")]
		public Transform gravityTarget;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Multiplies gravity applied to the character even if 'Individual Gravity' is unchecked.")]
		public float gravityMultiplier;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float airborneThreshold;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float slopeStartAngle;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slopeEndAngle;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spherecastRadius;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask groundLayers;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x400091F")]
		protected const float half = 0.5f;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x6000A6C")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xF46928", Offset = "0xF46928", VA = "0xF46928")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xF46B14", Offset = "0xF46B14", VA = "0xF46B14", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xF46D40", Offset = "0xF46D40", VA = "0xF46D40", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xF46EE0", Offset = "0xF46EE0", VA = "0xF46EE0")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xF46F40", Offset = "0xF46F40", VA = "0xF46F40")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xF470A4", Offset = "0xF470A4", VA = "0xF470A4")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xF472A8", Offset = "0xF472A8", VA = "0xF472A8")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xF472CC", Offset = "0xF472CC", VA = "0xF472CC")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xF472F0", Offset = "0xF472F0", VA = "0xF472F0")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xF4743C", Offset = "0xF4743C", VA = "0xF4743C")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x2000164")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x2000165")]
		public enum MoveMode
		{
			[Token(Token = "0x400095E")]
			Directional,
			[Token(Token = "0x400095F")]
			Strafe
		}

		[Token(Token = "0x2000166")]
		public struct AnimState
		{
			[Token(Token = "0x4000960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x4000961")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4000962")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x4000963")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x4000964")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x4000965")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;

			[Token(Token = "0x4000966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool doubleJump;
		}

		[Token(Token = "0x2000167")]
		[CompilerGenerated]
		private sealed class <JumpSmooth>d__79 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000968")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000969")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CharacterThirdPerson <>4__this;

			[Token(Token = "0x400096A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 jumpVelocity;

			[Token(Token = "0x400096B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <steps>5__2;

			[Token(Token = "0x400096C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <stepsToTake>5__3;

			[Token(Token = "0x17000114")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A8E")]
				[Address(RVA = "0xF49F58", Offset = "0xF49F58", VA = "0xF49F58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000115")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A90")]
				[Address(RVA = "0xF49FA0", Offset = "0xF49FA0", VA = "0xF49FA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0xF49D18", Offset = "0xF49D18", VA = "0xF49D18")]
			[DebuggerHidden]
			public <JumpSmooth>d__79(int <>1__state)
			{
			}

			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0xF49E54", Offset = "0xF49E54", VA = "0xF49E54", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0xF49E58", Offset = "0xF49E58", VA = "0xF49E58", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0xF49F60", Offset = "0xF49F60", VA = "0xF49F60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("References")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Movement")]
		public MoveMode moveMode;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Rotation")]
		public bool lookInCameraDirection;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Jumping and Falling")]
		public bool smoothJump;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airSpeed;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float airControl;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpPower;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool doubleJumpEnabled;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float doubleJumpPowerMlp;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Wall Running")]
		public LayerMask wallRunLayers;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunMaxLength;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Header("Crouching")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public AnimState animState;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected Vector3 moveDirection;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Animator animator;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 normal;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 platformVelocity;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private RaycastHit hit;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float jumpLeg;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float jumpEndTime;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float forwardMlp;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float groundDistance;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastAirTime;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float stickyForce;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 wallNormal;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float wallRunWeight;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float lastWallRunWeight;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private float fixedDeltaTime;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool fixedFrame;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float wallRunEndTime;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Vector3 gravity;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float velocityY;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private bool doubleJumped;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		private bool jumpReleased;

		[Token(Token = "0x17000112")]
		public bool fullRootMotion
		{
			[Token(Token = "0x6000A77")]
			[Address(RVA = "0xF4745C", Offset = "0xF4745C", VA = "0xF4745C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0xF47464", Offset = "0xF47464", VA = "0xF47464")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public bool onGround
		{
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0xF47470", Offset = "0xF47470", VA = "0xF47470")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xF47478", Offset = "0xF47478", VA = "0xF47478")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xF47484", Offset = "0xF47484", VA = "0xF47484", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xF47670", Offset = "0xF47670", VA = "0xF47670")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xF476F4", Offset = "0xF476F4", VA = "0xF476F4", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xF47808", Offset = "0xF47808", VA = "0xF47808")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xF4889C", Offset = "0xF4889C", VA = "0xF4889C", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xF48D2C", Offset = "0xF48D2C", VA = "0xF48D2C", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xF47EFC", Offset = "0xF47EFC", VA = "0xF47EFC")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xF48E04", Offset = "0xF48E04", VA = "0xF48E04")]
		private void WallRun()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xF4948C", Offset = "0xF4948C", VA = "0xF4948C")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xF48928", Offset = "0xF48928", VA = "0xF48928")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xF49584", Offset = "0xF49584", VA = "0xF49584", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xF49A04", Offset = "0xF49A04", VA = "0xF49A04")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xF49B2C", Offset = "0xF49B2C", VA = "0xF49B2C", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xF49C80", Offset = "0xF49C80", VA = "0xF49C80")]
		[IteratorStateMachine(typeof(<JumpSmooth>d__79))]
		private IEnumerator JumpSmooth(Vector3 jumpVelocity)
		{
			return null;
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xF48330", Offset = "0xF48330", VA = "0xF48330")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xF49D40", Offset = "0xF49D40", VA = "0xF49D40")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000168")]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000169")]
		public enum RotationMode
		{
			[Token(Token = "0x400097B")]
			Smooth,
			[Token(Token = "0x400097C")]
			Linear
		}

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The component that updates the camera.")]
		public CameraController cameraController;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Acceleration of movement.")]
		public float accelerationTime;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Turning speed.")]
		public float turnTime;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, will run on left shift, if not will walk on left shift.")]
		public bool walkByDefault;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Smooth or linear rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Procedural motion speed (if not using root motion).")]
		public float moveSpeed;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x17000116")]
		public bool isGrounded
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0xF49FA8", Offset = "0xF49FA8", VA = "0xF49FA8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A92")]
			[Address(RVA = "0xF49FB0", Offset = "0xF49FB0", VA = "0xF49FB0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xF49FBC", Offset = "0xF49FBC", VA = "0xF49FBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xF4A064", Offset = "0xF4A064", VA = "0xF4A064")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xF4A67C", Offset = "0xF4A67C", VA = "0xF4A67C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xF4A0AC", Offset = "0xF4A0AC", VA = "0xF4A0AC")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xF4A414", Offset = "0xF4A414", VA = "0xF4A414")]
		private void Move()
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xF4A6AC", Offset = "0xF4A6AC", VA = "0xF4A6AC")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xF4A744", Offset = "0xF4A744", VA = "0xF4A744")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xF4A7C4", Offset = "0xF4A7C4", VA = "0xF4A7C4")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x200016A")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Navigator navigator;

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xF4A7EC", Offset = "0xF4A7EC", VA = "0xF4A7EC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xF4A934", Offset = "0xF4A934", VA = "0xF4A934", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xF4AFAC", Offset = "0xF4AFAC", VA = "0xF4AFAC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xF4B198", Offset = "0xF4B198", VA = "0xF4B198")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x200016B")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x200016C")]
		public struct State
		{
			[Token(Token = "0x4000986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x4000987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x4000988")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4000989")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x400098A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xF4A828", Offset = "0xF4A828", VA = "0xF4A828", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xF434D0", Offset = "0xF434D0", VA = "0xF434D0", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xF43A00", Offset = "0xF43A00", VA = "0xF43A00")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x200016D")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xF4B1B4", Offset = "0xF4B1B4", VA = "0xF4B1B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xF4B1EC", Offset = "0xF4B1EC", VA = "0xF4B1EC")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x200016E")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode[] keyCodes;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mouse0;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool mouse1;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoTimeScale;

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xF4B1F4", Offset = "0xF4B1F4", VA = "0xF4B1F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xF4B21C", Offset = "0xF4B21C", VA = "0xF4B21C")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xF4B2C0", Offset = "0xF4B2C0", VA = "0xF4B2C0")]
		public SlowMo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016F")]
	public class Navigator
	{
		[Token(Token = "0x2000170")]
		public enum State
		{
			[Token(Token = "0x400099E")]
			Idle,
			[Token(Token = "0x400099F")]
			Seeking,
			[Token(Token = "0x40009A0")]
			OnPath
		}

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Should this Navigator be actively seeking a path.")]
		public bool activeTargetSeeking;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Increase this value if the character starts running in a circle, not able to reach the corner because of a too large turning radius.")]
		public float cornerRadius;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Recalculate path if target position has moved by this distance from the position it was at when the path was originally calculated")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Sample within this distance from sourcePosition.")]
		public float maxSampleDistance;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Interval of updating the path")]
		public float nextPathInterval;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x17000117")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0xF4B2D4", Offset = "0xF4B2D4", VA = "0xF4B2D4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0xF4B2E0", Offset = "0xF4B2E0", VA = "0xF4B2E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public State state
		{
			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0xF4B2EC", Offset = "0xF4B2EC", VA = "0xF4B2EC")]
			[CompilerGenerated]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0xF4B2F4", Offset = "0xF4B2F4", VA = "0xF4B2F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xF4A85C", Offset = "0xF4A85C", VA = "0xF4A85C")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xF4AB54", Offset = "0xF4AB54", VA = "0xF4AB54")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xF4B3D4", Offset = "0xF4B3D4", VA = "0xF4B3D4")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xF4B438", Offset = "0xF4B438", VA = "0xF4B438")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xF4B2FC", Offset = "0xF4B2FC", VA = "0xF4B2FC")]
		private void Stop()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xF4B358", Offset = "0xF4B358", VA = "0xF4B358")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xF4AFD4", Offset = "0xF4AFD4", VA = "0xF4AFD4")]
		public void Visualize()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xF4B56C", Offset = "0xF4B56C", VA = "0xF4B56C")]
		public Navigator()
		{
		}
	}
}
namespace RelationsInspector.Backend.AutoBackend
{
	[Token(Token = "0x2000171")]
	[AttributeUsage(AttributeTargets.Class)]
	public class AutoBackendAttribute : Attribute
	{
		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xF4C5DC", Offset = "0xF4C5DC", VA = "0xF4C5DC")]
		public AutoBackendAttribute()
		{
		}
	}
	[Token(Token = "0x2000172")]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public class RelatedAttribute : Attribute
	{
		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xF4C5E4", Offset = "0xF4C5E4", VA = "0xF4C5E4")]
		public RelatedAttribute()
		{
		}
	}
	[Token(Token = "0x2000173")]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public class RelatingAttribute : Attribute
	{
		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xF4C5EC", Offset = "0xF4C5EC", VA = "0xF4C5EC")]
		public RelatingAttribute()
		{
		}
	}
}
namespace ES3Types
{
	[Token(Token = "0x2000174")]
	[Preserve]
	public class ES3Type_ES3Prefab : ES3Type
	{
		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xF4C5F4", Offset = "0xF4C5F4", VA = "0xF4C5F4")]
		public ES3Type_ES3Prefab()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xF4C768", Offset = "0xF4C768", VA = "0xF4C768", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AB8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000175")]
	public class ES3Type_ES3PrefabInternal : ES3Type
	{
		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xF4C76C", Offset = "0xF4C76C", VA = "0xF4C76C")]
		public ES3Type_ES3PrefabInternal()
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xF4C830", Offset = "0xF4C830", VA = "0xF4C830", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000ABB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000ABC")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class ES32DArrayType : ES3CollectionType
	{
		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xF4C9B4", Offset = "0xF4C9B4", VA = "0xF4C9B4")]
		public ES32DArrayType(Type type)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xF4CAA4", Offset = "0xF4CAA4", VA = "0xF4CAA4", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode unityObjectType)
		{
		}

		[Token(Token = "0x6000AC0")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xF4CCC0", Offset = "0xF4CCC0", VA = "0xF4CCC0", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AC2")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xF4CF14", Offset = "0xF4CF14", VA = "0xF4CF14", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class ES33DArrayType : ES3CollectionType
	{
		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xF4D1F8", Offset = "0xF4D1F8", VA = "0xF4D1F8")]
		public ES33DArrayType(Type type)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xF4D1FC", Offset = "0xF4D1FC", VA = "0xF4D1FC", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000AC6")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xF4D4A8", Offset = "0xF4D4A8", VA = "0xF4D4A8", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AC8")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xF4D7BC", Offset = "0xF4D7BC", VA = "0xF4D7BC", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000178")]
	[Preserve]
	public class ES3ArrayType : ES3CollectionType
	{
		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xF4DB38", Offset = "0xF4DB38", VA = "0xF4DB38")]
		public ES3ArrayType(Type type)
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xF4DB3C", Offset = "0xF4DB3C", VA = "0xF4DB3C")]
		public ES3ArrayType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xF4DBAC", Offset = "0xF4DBAC", VA = "0xF4DBAC", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xF4DD28", Offset = "0xF4DD28", VA = "0xF4DD28", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000ACE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000ACF")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xF4DF84", Offset = "0xF4DF84", VA = "0xF4DF84", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000179")]
	[Preserve]
	public abstract class ES3CollectionType : ES3Type
	{
		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type elementType;

		[Token(Token = "0x6000AD1")]
		public abstract object Read(ES3Reader reader);

		[Token(Token = "0x6000AD2")]
		public abstract void ReadInto(ES3Reader reader, object obj);

		[Token(Token = "0x6000AD3")]
		public abstract void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode);

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xF4C9B8", Offset = "0xF4C9B8", VA = "0xF4C9B8")]
		public ES3CollectionType(Type type)
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xF4DB74", Offset = "0xF4DB74", VA = "0xF4DB74")]
		public ES3CollectionType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xF4E5C8", Offset = "0xF4E5C8", VA = "0xF4E5C8", Slot = "4")]
		[Preserve]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000AD7")]
		protected virtual bool ReadICollection<T>(ES3Reader reader, ICollection<T> collection, ES3Type elementType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD8")]
		protected virtual void ReadICollectionInto<T>(ES3Reader reader, ICollection<T> collection, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xF4E5D8", Offset = "0xF4E5D8", VA = "0xF4E5D8", Slot = "12")]
		[Preserve]
		protected virtual void ReadICollectionInto(ES3Reader reader, ICollection collection, ES3Type elementType)
		{
		}
	}
	[Token(Token = "0x200017A")]
	[Preserve]
	public class ES3DictionaryType : ES3Type
	{
		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type keyType;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ES3Type valueType;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ES3Reflection.ES3ReflectedMethod readMethod;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected ES3Reflection.ES3ReflectedMethod readIntoMethod;

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xF4EB44", Offset = "0xF4EB44", VA = "0xF4EB44")]
		public ES3DictionaryType(Type type)
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xF4EC68", Offset = "0xF4EC68", VA = "0xF4EC68")]
		public ES3DictionaryType(Type type, ES3Type keyType, ES3Type valueType)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xF4ECC4", Offset = "0xF4ECC4", VA = "0xF4ECC4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xF4ECE4", Offset = "0xF4ECE4", VA = "0xF4ECE4")]
		public void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000ADE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000ADF")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xF4F12C", Offset = "0xF4F12C", VA = "0xF4F12C")]
		public object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xF4F364", Offset = "0xF4F364", VA = "0xF4F364")]
		public void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200017B")]
	[Preserve]
	public class ES3HashSetType : ES3CollectionType
	{
		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xF4F6CC", Offset = "0xF4F6CC", VA = "0xF4F6CC")]
		public ES3HashSetType(Type type)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xF4F6D0", Offset = "0xF4F6D0", VA = "0xF4F6D0", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000AE4")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xF4FD2C", Offset = "0xF4FD2C", VA = "0xF4FD2C", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AE6")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xF4FFFC", Offset = "0xF4FFFC", VA = "0xF4FFFC", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200017C")]
	[Preserve]
	public class ES3ListType : ES3CollectionType
	{
		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xF5004C", Offset = "0xF5004C", VA = "0xF5004C")]
		public ES3ListType(Type type)
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xF50050", Offset = "0xF50050", VA = "0xF50050")]
		public ES3ListType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xF50088", Offset = "0xF50088", VA = "0xF50088", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000AEB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AEC")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xF504B8", Offset = "0xF504B8", VA = "0xF504B8", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xF50698", Offset = "0xF50698", VA = "0xF50698", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200017D")]
	[Preserve]
	public class ES3NativeArrayType : ES3CollectionType
	{
		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xF50C50", Offset = "0xF50C50", VA = "0xF50C50")]
		public ES3NativeArrayType(Type type)
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xF50C54", Offset = "0xF50C54", VA = "0xF50C54")]
		public ES3NativeArrayType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xF50C8C", Offset = "0xF50C8C", VA = "0xF50C8C", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xF51080", Offset = "0xF51080", VA = "0xF51080", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AF3")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AF4")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xF5142C", Offset = "0xF5142C", VA = "0xF5142C", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xF511D0", Offset = "0xF511D0", VA = "0xF511D0")]
		private Array ReadAsArray(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200017F")]
	[Preserve]
	public class ES3QueueType : ES3CollectionType
	{
		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xF51744", Offset = "0xF51744", VA = "0xF51744")]
		public ES3QueueType(Type type)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xF51748", Offset = "0xF51748", VA = "0xF51748", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000AFC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AFD")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xF51B54", Offset = "0xF51B54", VA = "0xF51B54", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xF51E24", Offset = "0xF51E24", VA = "0xF51E24", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000180")]
	[Preserve]
	public class ES3StackType : ES3CollectionType
	{
		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xF523B8", Offset = "0xF523B8", VA = "0xF523B8")]
		public ES3StackType(Type type)
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xF523BC", Offset = "0xF523BC", VA = "0xF523BC", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000B02")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B03")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xF527C8", Offset = "0xF527C8", VA = "0xF527C8", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xF52BEC", Offset = "0xF52BEC", VA = "0xF52BEC", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000182")]
	[Preserve]
	public class ES3TupleType : ES3Type
	{
		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type[] es3Types;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Type[] types;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ES3Reflection.ES3ReflectedMethod readMethod;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected ES3Reflection.ES3ReflectedMethod readIntoMethod;

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xF53220", Offset = "0xF53220", VA = "0xF53220")]
		public ES3TupleType(Type type)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xF533E0", Offset = "0xF533E0", VA = "0xF533E0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xF53400", Offset = "0xF53400", VA = "0xF53400")]
		public void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6000B0C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000183")]
	[Preserve]
	public abstract class ES3ComponentType : ES3UnityObjectType
	{
		[Token(Token = "0x40009B0")]
		protected const string gameObjectPropertyName = "goID";

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xF535B8", Offset = "0xF535B8", VA = "0xF535B8")]
		public ES3ComponentType(Type type)
		{
		}

		[Token(Token = "0x6000B0E")]
		protected abstract void WriteComponent(object obj, ES3Writer writer);

		[Token(Token = "0x6000B0F")]
		protected abstract void ReadComponent<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xF535F8", Offset = "0xF535F8", VA = "0xF535F8", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B11")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B12")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B13")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xF53874", Offset = "0xF53874", VA = "0xF53874")]
		private static UnityEngine.Component GetOrAddComponent(GameObject go, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xF53918", Offset = "0xF53918", VA = "0xF53918")]
		public static UnityEngine.Component CreateComponent(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000184")]
	[Preserve]
	public abstract class ES3ObjectType : ES3Type
	{
		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xF53A14", Offset = "0xF53A14", VA = "0xF53A14")]
		public ES3ObjectType(Type type)
		{
		}

		[Token(Token = "0x6000B17")]
		protected abstract void WriteObject(object obj, ES3Writer writer);

		[Token(Token = "0x6000B18")]
		protected abstract object ReadObject<T>(ES3Reader reader);

		[Token(Token = "0x6000B19")]
		protected virtual void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xF53A18", Offset = "0xF53A18", VA = "0xF53A18", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B1B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B1C")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000185")]
	[Preserve]
	public abstract class ES3ScriptableObjectType : ES3UnityObjectType
	{
		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xF53CC8", Offset = "0xF53CC8", VA = "0xF53CC8")]
		public ES3ScriptableObjectType(Type type)
		{
		}

		[Token(Token = "0x6000B1E")]
		protected abstract void WriteScriptableObject(object obj, ES3Writer writer);

		[Token(Token = "0x6000B1F")]
		protected abstract void ReadScriptableObject<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xF53CE8", Offset = "0xF53CE8", VA = "0xF53CE8", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B21")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B22")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B23")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000186")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Preserve]
	public abstract class ES3Type
	{
		[Token(Token = "0x40009B1")]
		public const string typeFieldName = "__type";

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Member[] members;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isPrimitive;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isValueType;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool isCollection;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool isDictionary;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isTuple;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isEnum;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isES3TypeUnityObject;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool isReflectedType;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isUnsupported;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int priority;

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xF4C6A8", Offset = "0xF4C6A8", VA = "0xF4C6A8")]
		protected ES3Type(Type type)
		{
		}

		[Token(Token = "0x6000B25")]
		public abstract void Write(object obj, ES3Writer writer);

		[Token(Token = "0x6000B26")]
		public abstract object Read<T>(ES3Reader reader);

		[Token(Token = "0x6000B27")]
		public virtual void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xF53BC8", Offset = "0xF53BC8", VA = "0xF53BC8")]
		protected bool WriteUsingDerivedType(object obj, ES3Writer writer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B29")]
		protected void ReadUsingDerivedType<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xF53E68", Offset = "0xF53E68", VA = "0xF53E68")]
		internal string ReadPropertyName(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xF53EB4", Offset = "0xF53EB4", VA = "0xF53EB4")]
		protected void WriteProperties(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xF53FF4", Offset = "0xF53FF4", VA = "0xF53FF4")]
		protected object ReadProperties(ES3Reader reader, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xF53FE8", Offset = "0xF53FE8", VA = "0xF53FE8")]
		protected void GetMembers(bool safe)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xF55B64", Offset = "0xF55B64", VA = "0xF55B64")]
		protected void GetMembers(bool safe, string[] memberNames)
		{
		}
	}
	[Token(Token = "0x2000187")]
	[AttributeUsage(AttributeTargets.Class)]
	public class ES3PropertiesAttribute : Attribute
	{
		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string[] members;

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xF55D04", Offset = "0xF55D04", VA = "0xF55D04")]
		public ES3PropertiesAttribute(params string[] members)
		{
		}
	}
	[Token(Token = "0x2000188")]
	[Preserve]
	public abstract class ES3UnityObjectType : ES3ObjectType
	{
		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xF535D8", Offset = "0xF535D8", VA = "0xF535D8")]
		public ES3UnityObjectType(Type type)
		{
		}

		[Token(Token = "0x6000B31")]
		protected abstract void WriteUnityObject(object obj, ES3Writer writer);

		[Token(Token = "0x6000B32")]
		protected abstract void ReadUnityObject<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6000B33")]
		protected abstract object ReadUnityObject<T>(ES3Reader reader);

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xF55D34", Offset = "0xF55D34", VA = "0xF55D34", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xF55D48", Offset = "0xF55D48", VA = "0xF55D48", Slot = "13")]
		public virtual void WriteObject(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
		}

		[Token(Token = "0x6000B36")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000B37")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xF55FB0", Offset = "0xF55FB0", VA = "0xF55FB0")]
		protected bool WriteUsingDerivedType(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000189")]
	[ES3Properties(new string[] { "bytes" })]
	[Preserve]
	public class ES3Type_BigInteger : ES3Type
	{
		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xF5610C", Offset = "0xF5610C", VA = "0xF5610C")]
		public ES3Type_BigInteger()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xF561C0", Offset = "0xF561C0", VA = "0xF561C0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B3B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200018A")]
	public class ES3Type_BigIntegerArray : ES3ArrayType
	{
		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xF562A4", Offset = "0xF562A4", VA = "0xF562A4")]
		public ES3Type_BigIntegerArray()
		{
		}
	}
	[Token(Token = "0x200018B")]
	[Preserve]
	public class ES3Type_bool : ES3Type
	{
		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xF56390", Offset = "0xF56390", VA = "0xF56390")]
		public ES3Type_bool()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xF5644C", Offset = "0xF5644C", VA = "0xF5644C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B3F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200018C")]
	public class ES3Type_boolArray : ES3ArrayType
	{
		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xF564D4", Offset = "0xF564D4", VA = "0xF564D4")]
		public ES3Type_boolArray()
		{
		}
	}
	[Token(Token = "0x200018D")]
	[Preserve]
	public class ES3Type_byte : ES3Type
	{
		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xF565C0", Offset = "0xF565C0", VA = "0xF565C0")]
		public ES3Type_byte()
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xF5667C", Offset = "0xF5667C", VA = "0xF5667C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B43")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200018E")]
	[Preserve]
	public class ES3Type_byteArray : ES3Type
	{
		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xF56704", Offset = "0xF56704", VA = "0xF56704")]
		public ES3Type_byteArray()
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xF567C0", Offset = "0xF567C0", VA = "0xF567C0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B46")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200018F")]
	[Preserve]
	public class ES3Type_char : ES3Type
	{
		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xF56848", Offset = "0xF56848", VA = "0xF56848")]
		public ES3Type_char()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xF56904", Offset = "0xF56904", VA = "0xF56904", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B49")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000190")]
	public class ES3Type_charArray : ES3ArrayType
	{
		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xF5698C", Offset = "0xF5698C", VA = "0xF5698C")]
		public ES3Type_charArray()
		{
		}
	}
	[Token(Token = "0x2000191")]
	[Preserve]
	public class ES3Type_DateTime : ES3Type
	{
		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xF56A78", Offset = "0xF56A78", VA = "0xF56A78")]
		public ES3Type_DateTime()
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xF56B2C", Offset = "0xF56B2C", VA = "0xF56B2C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B4D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000192")]
	public class ES3Type_DateTimeArray : ES3ArrayType
	{
		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xF56C3C", Offset = "0xF56C3C", VA = "0xF56C3C")]
		public ES3Type_DateTimeArray()
		{
		}
	}
	[Token(Token = "0x2000193")]
	[Preserve]
	public class ES3Type_decimal : ES3Type
	{
		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xF56D28", Offset = "0xF56D28", VA = "0xF56D28")]
		public ES3Type_decimal()
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xF56DE4", Offset = "0xF56DE4", VA = "0xF56DE4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B51")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000194")]
	public class ES3Type_decimalArray : ES3ArrayType
	{
		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xF56E6C", Offset = "0xF56E6C", VA = "0xF56E6C")]
		public ES3Type_decimalArray()
		{
		}
	}
	[Token(Token = "0x2000195")]
	[Preserve]
	public class ES3Type_double : ES3Type
	{
		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xF56F58", Offset = "0xF56F58", VA = "0xF56F58")]
		public ES3Type_double()
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xF57014", Offset = "0xF57014", VA = "0xF57014", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B55")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000196")]
	public class ES3Type_doubleArray : ES3ArrayType
	{
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xF5709C", Offset = "0xF5709C", VA = "0xF5709C")]
		public ES3Type_doubleArray()
		{
		}
	}
	[Token(Token = "0x2000197")]
	[Preserve]
	public class ES3Type_enum : ES3Type
	{
		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Type underlyingType;

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xF57188", Offset = "0xF57188", VA = "0xF57188")]
		public ES3Type_enum(Type type)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xF57244", Offset = "0xF57244", VA = "0xF57244", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B59")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000198")]
	[Preserve]
	public class ES3Type_ES3Ref : ES3Type
	{
		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xF57CC0", Offset = "0xF57CC0", VA = "0xF57CC0")]
		public ES3Type_ES3Ref()
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xF57D8C", Offset = "0xF57D8C", VA = "0xF57D8C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B5C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000199")]
	public class ES3Type_ES3RefArray : ES3ArrayType
	{
		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xF57EA4", Offset = "0xF57EA4", VA = "0xF57EA4")]
		public ES3Type_ES3RefArray()
		{
		}
	}
	[Token(Token = "0x200019A")]
	public class ES3Type_ES3RefDictionary : ES3DictionaryType
	{
		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xF58028", Offset = "0xF58028", VA = "0xF58028")]
		public ES3Type_ES3RefDictionary()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[Preserve]
	public class ES3Type_float : ES3Type
	{
		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xF58194", Offset = "0xF58194", VA = "0xF58194")]
		public ES3Type_float()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xF58250", Offset = "0xF58250", VA = "0xF58250", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B64")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200019C")]
	public class ES3Type_floatArray : ES3ArrayType
	{
		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xF582D8", Offset = "0xF582D8", VA = "0xF582D8")]
		public ES3Type_floatArray()
		{
		}
	}
	[Token(Token = "0x200019D")]
	[Preserve]
	public class ES3Type_int : ES3Type
	{
		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xF583C4", Offset = "0xF583C4", VA = "0xF583C4")]
		public ES3Type_int()
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xF58480", Offset = "0xF58480", VA = "0xF58480", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B68")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200019E")]
	public class ES3Type_intArray : ES3ArrayType
	{
		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xF58508", Offset = "0xF58508", VA = "0xF58508")]
		public ES3Type_intArray()
		{
		}
	}
	[Token(Token = "0x200019F")]
	[Preserve]
	public class ES3Type_IntPtr : ES3Type
	{
		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xF585F4", Offset = "0xF585F4", VA = "0xF585F4")]
		public ES3Type_IntPtr()
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xF586B0", Offset = "0xF586B0", VA = "0xF586B0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B6C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A0")]
	public class ES3Type_IntPtrArray : ES3ArrayType
	{
		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xF58744", Offset = "0xF58744", VA = "0xF58744")]
		public ES3Type_IntPtrArray()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	[Preserve]
	public class ES3Type_long : ES3Type
	{
		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xF58830", Offset = "0xF58830", VA = "0xF58830")]
		public ES3Type_long()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xF588EC", Offset = "0xF588EC", VA = "0xF588EC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B70")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A2")]
	public class ES3Type_longArray : ES3ArrayType
	{
		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xF58974", Offset = "0xF58974", VA = "0xF58974")]
		public ES3Type_longArray()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	[Preserve]
	public class ES3Type_sbyte : ES3Type
	{
		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xF58A60", Offset = "0xF58A60", VA = "0xF58A60")]
		public ES3Type_sbyte()
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xF58B1C", Offset = "0xF58B1C", VA = "0xF58B1C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B74")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A4")]
	public class ES3Type_sbyteArray : ES3ArrayType
	{
		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xF58BA4", Offset = "0xF58BA4", VA = "0xF58BA4")]
		public ES3Type_sbyteArray()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	[Preserve]
	public class ES3Type_short : ES3Type
	{
		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xF58C90", Offset = "0xF58C90", VA = "0xF58C90")]
		public ES3Type_short()
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xF58D4C", Offset = "0xF58D4C", VA = "0xF58D4C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B78")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A6")]
	public class ES3Type_shortArray : ES3ArrayType
	{
		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xF58DD4", Offset = "0xF58DD4", VA = "0xF58DD4")]
		public ES3Type_shortArray()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	[Preserve]
	public class ES3Type_string : ES3Type
	{
		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xF58EC0", Offset = "0xF58EC0", VA = "0xF58EC0")]
		public ES3Type_string()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xF58F7C", Offset = "0xF58F7C", VA = "0xF58F7C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B7C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A8")]
	public class ES3Type_StringArray : ES3ArrayType
	{
		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xF58FF8", Offset = "0xF58FF8", VA = "0xF58FF8")]
		public ES3Type_StringArray()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	[Preserve]
	public class ES3Type_uint : ES3Type
	{
		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xF590E4", Offset = "0xF590E4", VA = "0xF590E4")]
		public ES3Type_uint()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xF591A0", Offset = "0xF591A0", VA = "0xF591A0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B80")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001AA")]
	public class ES3Type_uintArray : ES3ArrayType
	{
		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xF59228", Offset = "0xF59228", VA = "0xF59228")]
		public ES3Type_uintArray()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	[Preserve]
	public class ES3Type_UIntPtr : ES3Type
	{
		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xF59314", Offset = "0xF59314", VA = "0xF59314")]
		public ES3Type_UIntPtr()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xF593D0", Offset = "0xF593D0", VA = "0xF593D0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B84")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001AC")]
	public class ES3Type_UIntPtrArray : ES3ArrayType
	{
		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xF59458", Offset = "0xF59458", VA = "0xF59458")]
		public ES3Type_UIntPtrArray()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	[Preserve]
	public class ES3Type_ulong : ES3Type
	{
		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xF59544", Offset = "0xF59544", VA = "0xF59544")]
		public ES3Type_ulong()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xF59600", Offset = "0xF59600", VA = "0xF59600", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B88")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001AE")]
	public class ES3Type_ulongArray : ES3ArrayType
	{
		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xF59688", Offset = "0xF59688", VA = "0xF59688")]
		public ES3Type_ulongArray()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	[Preserve]
	public class ES3Type_ushort : ES3Type
	{
		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xF59774", Offset = "0xF59774", VA = "0xF59774")]
		public ES3Type_ushort()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xF59830", Offset = "0xF59830", VA = "0xF59830", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B8C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B0")]
	public class ES3Type_ushortArray : ES3ArrayType
	{
		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xF598B8", Offset = "0xF598B8", VA = "0xF598B8")]
		public ES3Type_ushortArray()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	[Preserve]
	internal class ES3ReflectedComponentType : ES3ComponentType
	{
		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xF599A4", Offset = "0xF599A4", VA = "0xF599A4")]
		public ES3ReflectedComponentType(Type type)
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xF599D0", Offset = "0xF599D0", VA = "0xF599D0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B90")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B2")]
	[Preserve]
	internal class ES3ReflectedObjectType : ES3ObjectType
	{
		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xF599D4", Offset = "0xF599D4", VA = "0xF599D4")]
		public ES3ReflectedObjectType(Type type)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xF599FC", Offset = "0xF599FC", VA = "0xF599FC", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B93")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B94")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B3")]
	[Preserve]
	internal class ES3ReflectedScriptableObjectType : ES3ScriptableObjectType
	{
		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xF59A00", Offset = "0xF59A00", VA = "0xF59A00")]
		public ES3ReflectedScriptableObjectType(Type type)
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xF59A2C", Offset = "0xF59A2C", VA = "0xF59A2C", Slot = "14")]
		protected override void WriteScriptableObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B97")]
		protected override void ReadScriptableObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B4")]
	[Preserve]
	internal class ES3ReflectedType : ES3Type
	{
		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xF59A30", Offset = "0xF59A30", VA = "0xF59A30")]
		public ES3ReflectedType(Type type)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xF59A4C", Offset = "0xF59A4C", VA = "0xF59A4C")]
		public ES3ReflectedType(Type type, string[] members)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xF59A80", Offset = "0xF59A80", VA = "0xF59A80", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B9B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B5")]
	[Preserve]
	internal class ES3ReflectedUnityObjectType : ES3UnityObjectType
	{
		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xF59E04", Offset = "0xF59E04", VA = "0xF59E04")]
		public ES3ReflectedUnityObjectType(Type type)
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xF59E30", Offset = "0xF59E30", VA = "0xF59E30", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000B9F")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BA0")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[Preserve]
	internal class ES3ReflectedValueType : ES3Type
	{
		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xF59E34", Offset = "0xF59E34", VA = "0xF59E34")]
		public ES3ReflectedValueType(Type type)
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xF59E5C", Offset = "0xF59E5C", VA = "0xF59E5C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BA3")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BA4")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B7")]
	[Preserve]
	[ES3Properties(new string[] { "center", "size", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	public class ES3Type_BoxCollider : ES3ComponentType
	{
		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xF59E60", Offset = "0xF59E60", VA = "0xF59E60")]
		public ES3Type_BoxCollider()
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xF59F20", Offset = "0xF59F20", VA = "0xF59F20", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BA7")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B8")]
	[Preserve]
	[ES3Properties(new string[] { "size", "density", "isTrigger", "usedByEffector", "offset", "sharedMaterial", "enabled" })]
	public class ES3Type_BoxCollider2D : ES3ComponentType
	{
		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xF5A1D8", Offset = "0xF5A1D8", VA = "0xF5A1D8")]
		public ES3Type_BoxCollider2D()
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xF5A298", Offset = "0xF5A298", VA = "0xF5A298", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BAA")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001B9")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"fieldOfView", "nearClipPlane", "farClipPlane", "renderingPath", "allowHDR", "orthographicSize", "orthographic", "opaqueSortMode", "transparencySortMode", "depth",
		"aspect", "cullingMask", "eventMask", "backgroundColor", "rect", "pixelRect", "worldToCameraMatrix", "projectionMatrix", "nonJitteredProjectionMatrix", "useJitteredProjectionMatrixForTransparentRendering",
		"clearFlags", "stereoSeparation", "stereoConvergence", "cameraType", "stereoTargetEye", "targetDisplay", "useOcclusionCulling", "cullingMatrix", "layerCullSpherical", "depthTextureMode",
		"clearStencilAfterLightingPass", "enabled", "hideFlags"
	})]
	public class ES3Type_Camera : ES3ComponentType
	{
		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xF5A5E0", Offset = "0xF5A5E0", VA = "0xF5A5E0")]
		public ES3Type_Camera()
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xF5A6A0", Offset = "0xF5A6A0", VA = "0xF5A6A0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BAD")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001BA")]
	[Preserve]
	[ES3Properties(new string[] { "center", "radius", "height", "direction", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	public class ES3Type_CapsuleCollider : ES3ComponentType
	{
		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xF5B23C", Offset = "0xF5B23C", VA = "0xF5B23C")]
		public ES3Type_CapsuleCollider()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xF5B2FC", Offset = "0xF5B2FC", VA = "0xF5B2FC", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BB0")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001BB")]
	[Preserve]
	public class ES3Type_EventSystem : ES3ComponentType
	{
		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xF5B704", Offset = "0xF5B704", VA = "0xF5B704")]
		public ES3Type_EventSystem()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xF5B7C4", Offset = "0xF5B7C4", VA = "0xF5B7C4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BB3")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001BC")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"sprite", "overrideSprite", "type", "preserveAspect", "fillCenter", "fillMethod", "fillAmount", "fillClockwise", "fillOrigin", "alphaHitTestMinimumThreshold",
		"useSpriteMesh", "pixelsPerUnitMultiplier", "material", "onCullStateChanged", "maskable", "color", "raycastTarget", "useLegacyMeshGeneration", "useGUILayout", "enabled",
		"hideFlags"
	})]
	public class ES3Type_Image : ES3ComponentType
	{
		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xF5B7C8", Offset = "0xF5B7C8", VA = "0xF5B7C8")]
		public ES3Type_Image()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xF5B890", Offset = "0xF5B890", VA = "0xF5B890", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BB6")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public class ES3Type_ImageArray : ES3ArrayType
	{
		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xF5C080", Offset = "0xF5C080", VA = "0xF5C080")]
		public ES3Type_ImageArray()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	[Preserve]
	[ES3Properties(new string[] { "sharedMesh", "convex", "inflateMesh", "skinWidth", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	public class ES3Type_MeshCollider : ES3ComponentType
	{
		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xF5C16C", Offset = "0xF5C16C", VA = "0xF5C16C")]
		public ES3Type_MeshCollider()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xF5C22C", Offset = "0xF5C22C", VA = "0xF5C22C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BBA")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001BF")]
	public class ES3Type_MeshColliderArray : ES3ArrayType
	{
		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xF5C518", Offset = "0xF5C518", VA = "0xF5C518")]
		public ES3Type_MeshColliderArray()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	[Preserve]
	[ES3Properties(new string[] { "sharedMesh" })]
	public class ES3Type_MeshFilter : ES3ComponentType
	{
		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xF5C604", Offset = "0xF5C604", VA = "0xF5C604")]
		public ES3Type_MeshFilter()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xF5C6C4", Offset = "0xF5C6C4", VA = "0xF5C6C4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BBE")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public class ES3Type_MeshFilterArray : ES3ArrayType
	{
		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xF5C760", Offset = "0xF5C760", VA = "0xF5C760")]
		public ES3Type_MeshFilterArray()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"additionalVertexStreams", "enabled", "shadowCastingMode", "receiveShadows", "sharedMaterials", "lightmapIndex", "realtimeLightmapIndex", "lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset",
		"lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage", "sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	public class ES3Type_MeshRenderer : ES3ComponentType
	{
		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xF5C84C", Offset = "0xF5C84C", VA = "0xF5C84C")]
		public ES3Type_MeshRenderer()
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xF5C90C", Offset = "0xF5C90C", VA = "0xF5C90C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BC2")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C3")]
	public class ES3Type_MeshRendererArray : ES3ArrayType
	{
		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xF5D058", Offset = "0xF5D058", VA = "0xF5D058")]
		public ES3Type_MeshRendererArray()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"time", "hideFlags", "collision", "colorBySpeed", "colorOverLifetime", "emission", "externalForces", "forceOverLifetime", "inheritVelocity", "lights",
		"limitVelocityOverLifetime", "main", "noise", "rotatonBySpeed", "rotationOverLifetime", "shape", "sizeBySpeed", "sizeOverLifetime", "subEmitters", "textureSheetAnimation",
		"trails", "trigger", "useAutoRandomSeed", "velocityOverLifetime", "isPaused", "isPlaying", "isStopped"
	})]
	public class ES3Type_ParticleSystem : ES3ComponentType
	{
		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xF5D144", Offset = "0xF5D144", VA = "0xF5D144")]
		public ES3Type_ParticleSystem()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xF5D204", Offset = "0xF5D204", VA = "0xF5D204", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BC6")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C5")]
	[ES3Properties(new string[] { "points", "pathCount", "paths", "density", "isTrigger", "usedByEffector", "offset", "sharedMaterial", "enabled" })]
	[Preserve]
	public class ES3Type_PolygonCollider2D : ES3ComponentType
	{
		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xF5DCF4", Offset = "0xF5DCF4", VA = "0xF5DCF4")]
		public ES3Type_PolygonCollider2D()
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xF5DDB4", Offset = "0xF5DDB4", VA = "0xF5DDB4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BC9")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public class ES3Type_PolygonCollider2DArray : ES3ArrayType
	{
		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xF5E2BC", Offset = "0xF5E2BC", VA = "0xF5E2BC")]
		public ES3Type_PolygonCollider2DArray()
		{
		}
	}
	[Token(Token = "0x20001C7")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"texture", "uvRect", "onCullStateChanged", "maskable", "color", "raycastTarget", "useLegacyMeshGeneration", "material", "useGUILayout", "enabled",
		"hideFlags"
	})]
	public class ES3Type_RawImage : ES3ComponentType
	{
		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xF5E3A8", Offset = "0xF5E3A8", VA = "0xF5E3A8")]
		public ES3Type_RawImage()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xF5E470", Offset = "0xF5E470", VA = "0xF5E470", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BCD")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public class ES3Type_RawImageArray : ES3ArrayType
	{
		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xF5E94C", Offset = "0xF5E94C", VA = "0xF5E94C")]
		public ES3Type_RawImageArray()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	[ES3Properties(new string[]
	{
		"velocity", "angularVelocity", "drag", "angularDrag", "mass", "useGravity", "maxDepenetrationVelocity", "isKinematic", "freezeRotation", "constraints",
		"collisionDetectionMode", "centerOfMass", "inertiaTensorRotation", "inertiaTensor", "detectCollisions", "position", "rotation", "interpolation", "solverIterations", "sleepThreshold",
		"maxAngularVelocity", "solverVelocityIterations"
	})]
	[Preserve]
	public class ES3Type_Rigidbody : ES3ComponentType
	{
		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xF5EA38", Offset = "0xF5EA38", VA = "0xF5EA38")]
		public ES3Type_Rigidbody()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xF5EB00", Offset = "0xF5EB00", VA = "0xF5EB00", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BD1")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class ES3UserType_RigidbodyArray : ES3ArrayType
	{
		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xF5F3B8", Offset = "0xF5F3B8", VA = "0xF5F3B8")]
		public ES3UserType_RigidbodyArray()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	[ES3Properties(new string[] { "center", "radius", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	[Preserve]
	public class ES3Type_SphereCollider : ES3ComponentType
	{
		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xF5F4A4", Offset = "0xF5F4A4", VA = "0xF5F4A4")]
		public ES3Type_SphereCollider()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xF5F564", Offset = "0xF5F564", VA = "0xF5F564", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BD5")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CC")]
	[ES3Properties(new string[]
	{
		"font", "text", "supportRichText", "resizeTextForBestFit", "resizeTextMinSize", "resizeTextMaxSize", "alignment", "alignByGeometry", "fontSize", "horizontalOverflow",
		"verticalOverflow", "lineSpacing", "fontStyle", "onCullStateChanged", "maskable", "color", "raycastTarget", "material", "useGUILayout", "enabled",
		"tag", "name", "hideFlags"
	})]
	[Preserve]
	public class ES3Type_Text : ES3ComponentType
	{
		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xF5F890", Offset = "0xF5F890", VA = "0xF5F890")]
		public ES3Type_Text()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xF5F950", Offset = "0xF5F950", VA = "0xF5F950", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BD8")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CD")]
	[Preserve]
	[ES3Properties(new string[] { "localPosition", "localRotation", "localScale", "parent", "siblingIndex" })]
	public class ES3Type_Transform : ES3ComponentType
	{
		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int countRead;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xF6012C", Offset = "0xF6012C", VA = "0xF6012C")]
		public ES3Type_Transform()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xF601E4", Offset = "0xF601E4", VA = "0xF601E4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BDB")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CE")]
	[Preserve]
	[ES3Properties(new string[] { "keys", "preWrapMode", "postWrapMode" })]
	public class ES3Type_AnimationCurve : ES3Type
	{
		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xF60440", Offset = "0xF60440", VA = "0xF60440")]
		public ES3Type_AnimationCurve()
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xF604F4", Offset = "0xF604F4", VA = "0xF604F4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BDE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001CF")]
	[Preserve]
	[ES3Properties(new string[] { "name", "samples", "channels", "frequency", "sampleData" })]
	public class ES3Type_AudioClip : ES3UnityObjectType
	{
		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xF60698", Offset = "0xF60698", VA = "0xF60698")]
		public ES3Type_AudioClip()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xF60758", Offset = "0xF60758", VA = "0xF60758", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BE2")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000BE3")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D0")]
	public class ES3Type_AudioClipArray : ES3ArrayType
	{
		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xF609A8", Offset = "0xF609A8", VA = "0xF609A8")]
		public ES3Type_AudioClipArray()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	[Preserve]
	[ES3Properties(new string[] { "boneIndex0", "boneIndex1", "boneIndex2", "boneIndex3", "weight0", "weight1", "weight2", "weight3" })]
	public class ES3Type_BoneWeight : ES3Type
	{
		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xF60A94", Offset = "0xF60A94", VA = "0xF60A94")]
		public ES3Type_BoneWeight()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xF60B48", Offset = "0xF60B48", VA = "0xF60B48", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BE7")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D2")]
	public class ES3Type_BoneWeightArray : ES3ArrayType
	{
		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xF60F18", Offset = "0xF60F18", VA = "0xF60F18")]
		public ES3Type_BoneWeightArray()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	[ES3Properties(new string[] { "center", "size" })]
	[Preserve]
	public class ES3Type_Bounds : ES3Type
	{
		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xF61004", Offset = "0xF61004", VA = "0xF61004")]
		public ES3Type_Bounds()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xF610B8", Offset = "0xF610B8", VA = "0xF610B8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BEB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D4")]
	public class ES3Type_BoundsArray : ES3ArrayType
	{
		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xF61238", Offset = "0xF61238", VA = "0xF61238")]
		public ES3Type_BoundsArray()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	[ES3Properties(new string[] { "time", "count", "minCount", "maxCount", "cycleCount", "repeatInterval", "probability" })]
	[Preserve]
	public class ES3Type_Burst : ES3Type
	{
		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xF61324", Offset = "0xF61324", VA = "0xF61324")]
		public ES3Type_Burst()
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xF613E4", Offset = "0xF613E4", VA = "0xF613E4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BEF")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D6")]
	public class ES3Type_BurstArray : ES3ArrayType
	{
		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xF617D0", Offset = "0xF617D0", VA = "0xF617D0")]
		public ES3Type_BurstArray()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "type", "mode", "dampen", "dampenMultiplier", "bounce", "bounceMultiplier", "lifetimeLoss", "lifetimeLossMultiplier", "minKillSpeed",
		"maxKillSpeed", "collidesWith", "enableDynamicColliders", "maxCollisionShapes", "quality", "voxelSize", "radiusScale", "sendCollisionMessages"
	})]
	public class ES3Type_CollisionModule : ES3Type
	{
		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xF618BC", Offset = "0xF618BC", VA = "0xF618BC")]
		public ES3Type_CollisionModule()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xF61970", Offset = "0xF61970", VA = "0xF61970", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BF3")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BF4")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001D8")]
	[Preserve]
	[ES3Properties(new string[] { "r", "g", "b", "a" })]
	public class ES3Type_Color : ES3Type
	{
		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xF62078", Offset = "0xF62078", VA = "0xF62078")]
		public ES3Type_Color()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xF6212C", Offset = "0xF6212C", VA = "0xF6212C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BF7")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D9")]
	public class ES3Type_ColorArray : ES3ArrayType
	{
		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xF62324", Offset = "0xF62324", VA = "0xF62324")]
		public ES3Type_ColorArray()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[ES3Properties(new string[] { "r", "g", "b", "a" })]
	[Preserve]
	public class ES3Type_Color32 : ES3Type
	{
		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xF62410", Offset = "0xF62410", VA = "0xF62410")]
		public ES3Type_Color32()
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xF624C4", Offset = "0xF624C4", VA = "0xF624C4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000BFB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xF626C4", Offset = "0xF626C4", VA = "0xF626C4")]
		public static bool Equals(Color32 a, Color32 b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001DB")]
	public class ES3Type_Color32Array : ES3ArrayType
	{
		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xF626E8", Offset = "0xF626E8", VA = "0xF626E8")]
		public ES3Type_Color32Array()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	[ES3Properties(new string[] { "enabled", "color", "range" })]
	[Preserve]
	public class ES3Type_ColorBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xF627D4", Offset = "0xF627D4", VA = "0xF627D4")]
		public ES3Type_ColorBySpeedModule()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xF62888", Offset = "0xF62888", VA = "0xF62888", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C00")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C01")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001DD")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "color" })]
	public class ES3Type_ColorOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xF62AD0", Offset = "0xF62AD0", VA = "0xF62AD0")]
		public ES3Type_ColorOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xF62B84", Offset = "0xF62B84", VA = "0xF62B84", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C04")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C05")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "rateOverTime", "rateOverTimeMultiplier", "rateOverDistance", "rateOverDistanceMultiplier" })]
	public class ES3Type_EmissionModule : ES3Type
	{
		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xF62D44", Offset = "0xF62D44", VA = "0xF62D44")]
		public ES3Type_EmissionModule()
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xF62DF8", Offset = "0xF62DF8", VA = "0xF62DF8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C08")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C09")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001DF")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "multiplier" })]
	public class ES3Type_ExternalForcesModule : ES3Type
	{
		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xF63190", Offset = "0xF63190", VA = "0xF63190")]
		public ES3Type_ExternalForcesModule()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xF63244", Offset = "0xF63244", VA = "0xF63244", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C0C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C0D")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001E0")]
	[Preserve]
	[ES3Properties(new string[] { "hideFlags" })]
	public class ES3Type_Flare : ES3Type
	{
		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xF633E0", Offset = "0xF633E0", VA = "0xF633E0")]
		public ES3Type_Flare()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xF63494", Offset = "0xF63494", VA = "0xF63494", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C10")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C11")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class ES3Type_FlareArray : ES3ArrayType
	{
		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xF63568", Offset = "0xF63568", VA = "0xF63568")]
		public ES3Type_FlareArray()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	[Preserve]
	[ES3Properties(new string[] { "material", "name" })]
	public class ES3Type_Font : ES3UnityObjectType
	{
		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xF63654", Offset = "0xF63654", VA = "0xF63654")]
		public ES3Type_Font()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xF63714", Offset = "0xF63714", VA = "0xF63714", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C15")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000C16")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E3")]
	public class ES3Type_FontArray : ES3ArrayType
	{
		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xF63810", Offset = "0xF63810", VA = "0xF63810")]
		public ES3Type_FontArray()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	[ES3Properties(new string[] { "enabled", "x", "y", "z", "xMultiplier", "yMultiplier", "zMultiplier", "space", "randomized" })]
	[Preserve]
	public class ES3Type_ForceOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xF638FC", Offset = "0xF638FC", VA = "0xF638FC")]
		public ES3Type_ForceOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xF639B0", Offset = "0xF639B0", VA = "0xF639B0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C1A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C1B")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001E5")]
	[ES3Properties(new string[] { "layer", "isStatic", "tag", "name", "hideFlags", "children", "components" })]
	[Preserve]
	public class ES3Type_GameObject : ES3UnityObjectType
	{
		[Token(Token = "0x4000A17")]
		private const string prefabPropertyName = "es3Prefab";

		[Token(Token = "0x4000A18")]
		private const string transformPropertyName = "transformID";

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool saveChildren;

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xF63E3C", Offset = "0xF63E3C", VA = "0xF63E3C")]
		public ES3Type_GameObject()
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xF63EFC", Offset = "0xF63EFC", VA = "0xF63EFC", Slot = "13")]
		public override void WriteObject(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
		}

		[Token(Token = "0x6000C1E")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C1F")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xF64AA4", Offset = "0xF64AA4", VA = "0xF64AA4")]
		private void ReadComponents(ES3Reader reader, GameObject go)
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xF650C4", Offset = "0xF650C4", VA = "0xF650C4")]
		private GameObject CreateNewGameObject(ES3ReferenceMgrBase refMgr, long id)
		{
			return null;
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xF64700", Offset = "0xF64700", VA = "0xF64700")]
		public static List<GameObject> GetChildren(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xF65158", Offset = "0xF65158", VA = "0xF65158", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C24")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000C25")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E7")]
	public class ES3Type_GameObjectArray : ES3ArrayType
	{
		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xF651DC", Offset = "0xF651DC", VA = "0xF651DC")]
		public ES3Type_GameObjectArray()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	[Preserve]
	[ES3Properties(new string[] { "colorKeys", "alphaKeys", "mode" })]
	public class ES3Type_Gradient : ES3Type
	{
		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xF652C8", Offset = "0xF652C8", VA = "0xF652C8")]
		public ES3Type_Gradient()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xF6537C", Offset = "0xF6537C", VA = "0xF6537C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C2B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C2C")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001E9")]
	[ES3Properties(new string[] { "alpha", "time" })]
	[Preserve]
	public class ES3Type_GradientAlphaKey : ES3Type
	{
		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xF6552C", Offset = "0xF6552C", VA = "0xF6552C")]
		public ES3Type_GradientAlphaKey()
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xF655E0", Offset = "0xF655E0", VA = "0xF655E0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C2F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EA")]
	public class ES3Type_GradientAlphaKeyArray : ES3ArrayType
	{
		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xF6572C", Offset = "0xF6572C", VA = "0xF6572C")]
		public ES3Type_GradientAlphaKeyArray()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	[ES3Properties(new string[] { "color", "time" })]
	[Preserve]
	public class ES3Type_GradientColorKey : ES3Type
	{
		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xF65818", Offset = "0xF65818", VA = "0xF65818")]
		public ES3Type_GradientColorKey()
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xF658CC", Offset = "0xF658CC", VA = "0xF658CC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C33")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EC")]
	public class ES3Type_GradientColorKeyArray : ES3ArrayType
	{
		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xF65A44", Offset = "0xF65A44", VA = "0xF65A44")]
		public ES3Type_GradientColorKeyArray()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	[ES3Properties(new string[] { "value" })]
	[Preserve]
	public class ES3Type_Guid : ES3Type
	{
		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xF65B30", Offset = "0xF65B30", VA = "0xF65B30")]
		public ES3Type_Guid()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xF65BE4", Offset = "0xF65BE4", VA = "0xF65BE4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C37")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EE")]
	public class ES3Type_GuidArray : ES3ArrayType
	{
		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xF65CC8", Offset = "0xF65CC8", VA = "0xF65CC8")]
		public ES3Type_GuidArray()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "mode", "curve", "curveMultiplier" })]
	public class ES3Type_InheritVelocityModule : ES3Type
	{
		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xF65DB4", Offset = "0xF65DB4", VA = "0xF65DB4")]
		public ES3Type_InheritVelocityModule()
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xF65E68", Offset = "0xF65E68", VA = "0xF65E68", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C3B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C3C")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001F0")]
	[ES3Properties(new string[] { "time", "value", "inTangent", "outTangent" })]
	[Preserve]
	public class ES3Type_Keyframe : ES3Type
	{
		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xF66104", Offset = "0xF66104", VA = "0xF66104")]
		public ES3Type_Keyframe()
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xF661B8", Offset = "0xF661B8", VA = "0xF661B8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C3F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F1")]
	public class ES3Type_KeyframeArray : ES3ArrayType
	{
		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xF663EC", Offset = "0xF663EC", VA = "0xF663EC")]
		public ES3Type_KeyframeArray()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	[ES3Properties(new string[] { "colorKeys", "alphaKeys", "mode" })]
	[Preserve]
	public class ES3Type_LayerMask : ES3Type
	{
		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xF664D8", Offset = "0xF664D8", VA = "0xF664D8")]
		public ES3Type_LayerMask()
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xF6658C", Offset = "0xF6658C", VA = "0xF6658C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C43")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F3")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"type", "color", "intensity", "bounceIntensity", "shadows", "shadowStrength", "shadowResolution", "shadowCustomResolution", "shadowBias", "shadowNormalBias",
		"shadowNearPlane", "range", "spotAngle", "cookieSize", "cookie", "flare", "renderMode", "cullingMask", "areaSize", "lightmappingMode",
		"enabled", "hideFlags"
	})]
	public class ES3Type_Light : ES3ComponentType
	{
		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xF6669C", Offset = "0xF6669C", VA = "0xF6669C")]
		public ES3Type_Light()
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xF6675C", Offset = "0xF6675C", VA = "0xF6675C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C46")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "ratio", "useRandomDistribution", "light", "useParticleColor", "sizeAffectsRange", "alphaAffectsIntensity", "range", "rangeMultiplier", "intensity",
		"intensityMultiplier", "maxLights"
	})]
	public class ES3Type_LightsModule : ES3Type
	{
		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xF66FB0", Offset = "0xF66FB0", VA = "0xF66FB0")]
		public ES3Type_LightsModule()
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xF67064", Offset = "0xF67064", VA = "0xF67064", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C49")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C4A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001F5")]
	[ES3Properties(new string[]
	{
		"enabled", "limitX", "limitXMultiplier", "limitY", "limitYMultiplier", "limitZ", "limitZMultiplier", "limit", "limitMultiplier", "dampen",
		"separateAxes", "space"
	})]
	[Preserve]
	public class ES3Type_LimitVelocityOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xF675F8", Offset = "0xF675F8", VA = "0xF675F8")]
		public ES3Type_LimitVelocityOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xF676AC", Offset = "0xF676AC", VA = "0xF676AC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C4D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C4E")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001F6")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"duration", "loop", "prewarm", "startDelay", "startDelayMultiplier", "startLifetime", "startLifetimeMultiplier", "startSpeed", "startSpeedMultiplier", "startSize3D",
		"startSize", "startSizeMultiplier", "startSizeX", "startSizeXMultiplier", "startSizeY", "startSizeYMultiplier", "startSizeZ", "startSizeZMultiplier", "startRotation3D", "startRotation",
		"startRotationMultiplier", "startRotationX", "startRotationXMultiplier", "startRotationY", "startRotationYMultiplier", "startRotationZ", "startRotationZMultiplier", "randomizeRotationDirection", "startColor", "gravityModifier",
		"gravityModifierMultiplier", "simulationSpace", "customSimulationSpace", "simulationSpeed", "scalingMode", "playOnAwake", "maxParticles"
	})]
	public class ES3Type_MainModule : ES3Type
	{
		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xF67C4C", Offset = "0xF67C4C", VA = "0xF67C4C")]
		public ES3Type_MainModule()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xF67D00", Offset = "0xF67D00", VA = "0xF67D00", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C51")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C52")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001F7")]
	[ES3Properties(new string[] { "shader", "renderQueue", "shaderKeywords", "globalIlluminationFlags", "properties" })]
	[Preserve]
	public class ES3Type_Material : ES3UnityObjectType
	{
		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xF68C0C", Offset = "0xF68C0C", VA = "0xF68C0C")]
		public ES3Type_Material()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xF68CCC", Offset = "0xF68CCC", VA = "0xF68CCC", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C55")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C56")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class ES3Type_MaterialArray : ES3ArrayType
	{
		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xF69188", Offset = "0xF69188", VA = "0xF69188")]
		public ES3Type_MaterialArray()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	[ES3Properties(new string[] { "col0", "col1", "col2", "col3" })]
	[Preserve]
	public class ES3Type_Matrix4x4 : ES3Type
	{
		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xF69274", Offset = "0xF69274", VA = "0xF69274")]
		public ES3Type_Matrix4x4()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xF69328", Offset = "0xF69328", VA = "0xF69328", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C5A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FA")]
	public class ES3Type_Matrix4x4Array : ES3ArrayType
	{
		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xF6957C", Offset = "0xF6957C", VA = "0xF6957C")]
		public ES3Type_Matrix4x4Array()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"bounds", "subMeshCount", "boneWeights", "bindposes", "vertices", "normals", "tangents", "uv", "uv2", "uv3",
		"uv4", "colors32", "triangles", "subMeshes"
	})]
	public class ES3Type_Mesh : ES3UnityObjectType
	{
		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xF69668", Offset = "0xF69668", VA = "0xF69668")]
		public ES3Type_Mesh()
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xF69728", Offset = "0xF69728", VA = "0xF69728", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C5E")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C5F")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001FC")]
	[Preserve]
	[ES3Properties(new string[] { "mode", "curveMultiplier", "curveMax", "curveMin", "constantMax", "constantMin", "constant", "curve" })]
	public class ES3Type_MinMaxCurve : ES3Type
	{
		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xF6A1A4", Offset = "0xF6A1A4", VA = "0xF6A1A4")]
		public ES3Type_MinMaxCurve()
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xF6A258", Offset = "0xF6A258", VA = "0xF6A258", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C62")]
		[Preserve]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C63")]
		[Preserve]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001FD")]
	[Preserve]
	[ES3Properties(new string[] { "mode", "gradientMax", "gradientMin", "colorMax", "colorMin", "color", "gradient" })]
	public class ES3Type_MinMaxGradient : ES3Type
	{
		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xF6A5E0", Offset = "0xF6A5E0", VA = "0xF6A5E0")]
		public ES3Type_MinMaxGradient()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xF6A694", Offset = "0xF6A694", VA = "0xF6A694", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C66")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FE")]
	[ES3Properties(new string[]
	{
		"enabled", "separateAxes", "strength", "strengthMultiplier", "strengthX", "strengthXMultiplier", "strengthY", "strengthYMultiplier", "strengthZ", "strengthZMultiplier",
		"frequency", "damping", "octaveCount", "octaveMultiplier", "octaveScale", "quality", "scrollSpeed", "scrollSpeedMultiplier", "remapEnabled", "remap",
		"remapMultiplier", "remapX", "remapXMultiplier", "remapY", "remapYMultiplier", "remapZ", "remapZMultiplier"
	})]
	[Preserve]
	public class ES3Type_NoiseModule : ES3Type
	{
		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xF6A9E8", Offset = "0xF6A9E8", VA = "0xF6A9E8")]
		public ES3Type_NoiseModule()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xF6AA9C", Offset = "0xF6AA9C", VA = "0xF6AA9C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C69")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C6A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20001FF")]
	[ES3Properties(new string[] { "dynamicFriction", "staticFriction", "bounciness", "frictionCombine", "bounceCombine" })]
	[Preserve]
	public class ES3Type_PhysicMaterial : ES3ObjectType
	{
		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xF6B5D8", Offset = "0xF6B5D8", VA = "0xF6B5D8")]
		public ES3Type_PhysicMaterial()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xF6B68C", Offset = "0xF6B68C", VA = "0xF6B68C", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C6D")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000C6E")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000200")]
	public class ES3Type_PhysicMaterialArray : ES3ArrayType
	{
		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xF6B914", Offset = "0xF6B914", VA = "0xF6B914")]
		public ES3Type_PhysicMaterialArray()
		{
		}
	}
	[Token(Token = "0x2000201")]
	[ES3Properties(new string[] { "bounciness", "friction" })]
	[Preserve]
	public class ES3Type_PhysicsMaterial2D : ES3ObjectType
	{
		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xF6BA00", Offset = "0xF6BA00", VA = "0xF6BA00")]
		public ES3Type_PhysicsMaterial2D()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xF6BAB4", Offset = "0xF6BAB4", VA = "0xF6BAB4", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C72")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000C73")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000202")]
	public class ES3Type_PhysicsMaterial2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xF6BC04", Offset = "0xF6BC04", VA = "0xF6BC04")]
		public ES3Type_PhysicsMaterial2DArray()
		{
		}
	}
	[Token(Token = "0x2000203")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z", "w" })]
	public class ES3Type_Quaternion : ES3Type
	{
		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xF6BCF0", Offset = "0xF6BCF0", VA = "0xF6BCF0")]
		public ES3Type_Quaternion()
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xF6BDA4", Offset = "0xF6BDA4", VA = "0xF6BDA4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C77")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000204")]
	public class ES3Type_QuaternionArray : ES3ArrayType
	{
		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xF6BF9C", Offset = "0xF6BF9C", VA = "0xF6BF9C")]
		public ES3Type_QuaternionArray()
		{
		}
	}
	[Token(Token = "0x2000205")]
	[ES3Properties(new string[] { "x", "y", "width", "height" })]
	[Preserve]
	public class ES3Type_Rect : ES3Type
	{
		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xF6C088", Offset = "0xF6C088", VA = "0xF6C088")]
		public ES3Type_Rect()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xF6C13C", Offset = "0xF6C13C", VA = "0xF6C13C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C7B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000206")]
	[ES3Properties(new string[]
	{
		"anchorMin", "anchorMax", "anchoredPosition", "sizeDelta", "pivot", "offsetMin", "offsetMax", "localPosition", "localRotation", "localScale",
		"parent", "hideFlags"
	})]
	[Preserve]
	public class ES3Type_RectTransform : ES3ComponentType
	{
		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xF6C360", Offset = "0xF6C360", VA = "0xF6C360")]
		public ES3Type_RectTransform()
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xF6C420", Offset = "0xF6C420", VA = "0xF6C420", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C7E")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000207")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"width", "height", "dimension", "graphicsFormat", "useMipMap", "vrUsage", "memorylessMode", "format", "stencilFormat", "autoGenerateMips",
		"volumeDepth", "antiAliasing", "bindTextureMS", "enableRandomWrite", "useDynamicScale", "isPowerOfTwo", "depth", "descriptor", "masterTextureLimit", "anisotropicFiltering",
		"wrapMode", "wrapModeU", "wrapModeV", "wrapModeW", "filterMode", "anisoLevel", "mipMapBias", "imageContentsHash", "streamingTextureForceLoadAll", "streamingTextureDiscardUnusedMips",
		"allowThreadedTextureCreation", "name"
	})]
	public class ES3Type_RenderTexture : ES3ObjectType
	{
		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xF6C944", Offset = "0xF6C944", VA = "0xF6C944")]
		public ES3Type_RenderTexture()
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xF6C9F8", Offset = "0xF6C9F8", VA = "0xF6C9F8", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C81")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000C82")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000208")]
	public class ES3Type_RenderTextureArray : ES3ArrayType
	{
		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xF6D0C4", Offset = "0xF6D0C4", VA = "0xF6D0C4")]
		public ES3Type_RenderTextureArray()
		{
		}
	}
	[Token(Token = "0x2000209")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes", "range" })]
	public class ES3Type_RotationBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xF6D1B0", Offset = "0xF6D1B0", VA = "0xF6D1B0")]
		public ES3Type_RotationBySpeedModule()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xF6D264", Offset = "0xF6D264", VA = "0xF6D264", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C86")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C87")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200020A")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes" })]
	public class ES3Type_RotationOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xF6D6FC", Offset = "0xF6D6FC", VA = "0xF6D6FC")]
		public ES3Type_RotationOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xF6D7B0", Offset = "0xF6D7B0", VA = "0xF6D7B0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C8A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C8B")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200020B")]
	[ES3Properties(new string[] { "name", "maximumLOD" })]
	[Preserve]
	public class ES3Type_Shader : ES3Type
	{
		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xF6DBD8", Offset = "0xF6DBD8", VA = "0xF6DBD8")]
		public ES3Type_Shader()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xF6DC8C", Offset = "0xF6DC8C", VA = "0xF6DC8C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C8E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C8F")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class ES3Type_ShaderArray : ES3ArrayType
	{
		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xF6DDE4", Offset = "0xF6DDE4", VA = "0xF6DDE4")]
		public ES3Type_ShaderArray()
		{
		}
	}
	[Token(Token = "0x200020D")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "shapeType", "randomDirectionAmount", "sphericalDirectionAmount", "alignToDirection", "radius", "angle", "length", "box", "meshShapeType",
		"mesh", "meshRenderer", "skinnedMeshRenderer", "useMeshMaterialIndex", "meshMaterialIndex", "useMeshColors", "normalOffset", "meshScale", "arc"
	})]
	public class ES3Type_ShapeModule : ES3Type
	{
		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xF6DED0", Offset = "0xF6DED0", VA = "0xF6DED0")]
		public ES3Type_ShapeModule()
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xF6DF84", Offset = "0xF6DF84", VA = "0xF6DF84", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C93")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C94")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200020E")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "size", "sizeMultiplier", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes",
		"range"
	})]
	public class ES3Type_SizeBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xF6E6EC", Offset = "0xF6E6EC", VA = "0xF6E6EC")]
		public ES3Type_SizeBySpeedModule()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xF6E7A4", Offset = "0xF6E7A4", VA = "0xF6E7A4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C97")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C98")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200020F")]
	[ES3Properties(new string[] { "enabled", "size", "sizeMultiplier", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes" })]
	[Preserve]
	public class ES3Type_SizeOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xF6ED00", Offset = "0xF6ED00", VA = "0xF6ED00")]
		public ES3Type_SizeOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xF6EDB8", Offset = "0xF6EDB8", VA = "0xF6EDB8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C9B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000C9C")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000210")]
	[ES3Properties(new string[]
	{
		"bones", "rootBone", "quality", "sharedMesh", "updateWhenOffscreen", "skinnedMotionVectors", "localBounds", "enabled", "shadowCastingMode", "receiveShadows",
		"sharedMaterials", "lightmapIndex", "realtimeLightmapIndex", "lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset", "lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage",
		"sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	[Preserve]
	public class ES3Type_SkinnedMeshRenderer : ES3ComponentType
	{
		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xF6F2A4", Offset = "0xF6F2A4", VA = "0xF6F2A4")]
		public ES3Type_SkinnedMeshRenderer()
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xF6F35C", Offset = "0xF6F35C", VA = "0xF6F35C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000C9F")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class ES3Type_SkinnedMeshRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xF6FD9C", Offset = "0xF6FD9C", VA = "0xF6FD9C")]
		public ES3Type_SkinnedMeshRendererArray()
		{
		}
	}
	[Token(Token = "0x2000212")]
	[Preserve]
	[ES3Properties(new string[] { "texture", "rect", "pivot", "pixelsPerUnit", "border" })]
	public class ES3Type_Sprite : ES3UnityObjectType
	{
		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xF6FE74", Offset = "0xF6FE74", VA = "0xF6FE74")]
		public ES3Type_Sprite()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xF6FF2C", Offset = "0xF6FF2C", VA = "0xF6FF2C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CA3")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000CA4")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000213")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"sprite", "color", "flipX", "flipY", "enabled", "shadowCastingMode", "receiveShadows", "sharedMaterials", "lightmapIndex", "realtimeLightmapIndex",
		"lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset", "lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage", "sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	public class ES3Type_SpriteRenderer : ES3ComponentType
	{
		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xF70288", Offset = "0xF70288", VA = "0xF70288")]
		public ES3Type_SpriteRenderer()
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xF70340", Offset = "0xF70340", VA = "0xF70340", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CA7")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class ES3Type_SpriteRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xF70B90", Offset = "0xF70B90", VA = "0xF70B90")]
		public ES3Type_SpriteRendererArray()
		{
		}
	}
	[Token(Token = "0x2000215")]
	[Preserve]
	[ES3Properties(new string[] { "properties", "systems", "types" })]
	public class ES3Type_SubEmittersModule : ES3Type
	{
		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xF70C68", Offset = "0xF70C68", VA = "0xF70C68")]
		public ES3Type_SubEmittersModule()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xF70D20", Offset = "0xF70D20", VA = "0xF70D20", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CAB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000CAC")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000216")]
	[ES3Properties(new string[] { "filterMode", "anisoLevel", "wrapMode", "mipMapBias", "rawTextureData" })]
	[Preserve]
	public class ES3Type_Texture : ES3Type
	{
		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xF70FD4", Offset = "0xF70FD4", VA = "0xF70FD4")]
		public ES3Type_Texture()
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xF7108C", Offset = "0xF7108C", VA = "0xF7108C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CAF")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000CB0")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000217")]
	public class ES3Type_TextureArray : ES3ArrayType
	{
		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xF71220", Offset = "0xF71220", VA = "0xF71220")]
		public ES3Type_TextureArray()
		{
		}
	}
	[Token(Token = "0x2000218")]
	[Preserve]
	[ES3Properties(new string[] { "filterMode", "anisoLevel", "wrapMode", "mipMapBias", "rawTextureData" })]
	public class ES3Type_Texture2D : ES3UnityObjectType
	{
		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xF712F8", Offset = "0xF712F8", VA = "0xF712F8")]
		public ES3Type_Texture2D()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xF713B0", Offset = "0xF713B0", VA = "0xF713B0", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CB4")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6000CB5")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xF71838", Offset = "0xF71838", VA = "0xF71838")]
		protected bool IsReadable(Texture2D instance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000219")]
	public class ES3Type_Texture2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xF71A44", Offset = "0xF71A44", VA = "0xF71A44")]
		public ES3Type_Texture2DArray()
		{
		}
	}
	[Token(Token = "0x200021A")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "numTilesX", "numTilesY", "animation", "useRandomRow", "frameOverTime", "frameOverTimeMultiplier", "startFrame", "startFrameMultiplier", "cycleCount",
		"rowIndex", "uvChannelMask", "flipU", "flipV"
	})]
	public class ES3Type_TextureSheetAnimationModule : ES3Type
	{
		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xF71B1C", Offset = "0xF71B1C", VA = "0xF71B1C")]
		public ES3Type_TextureSheetAnimationModule()
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xF71BD4", Offset = "0xF71BD4", VA = "0xF71BD4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CBA")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000CBB")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200021B")]
	[ES3Properties(new string[]
	{
		"enabled", "ratio", "lifetime", "lifetimeMultiplier", "minVertexDistance", "textureMode", "worldSpace", "dieWithParticles", "sizeAffectsWidth", "sizeAffectsLifetime",
		"inheritParticleColor", "colorOverLifetime", "widthOverTrail", "widthOverTrailMultiplier", "colorOverTrail"
	})]
	[Preserve]
	public class ES3Type_TrailModule : ES3Type
	{
		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xF72194", Offset = "0xF72194", VA = "0xF72194")]
		public ES3Type_TrailModule()
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xF7224C", Offset = "0xF7224C", VA = "0xF7224C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CBE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000CBF")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200021C")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "inside", "outside", "enter", "exit", "radiusScale" })]
	public class ES3Type_TriggerModule : ES3Type
	{
		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xF7295C", Offset = "0xF7295C", VA = "0xF7295C")]
		public ES3Type_TriggerModule()
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xF72A14", Offset = "0xF72A14", VA = "0xF72A14", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CC2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000CC3")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200021D")]
	[ES3Properties(new string[] { "x", "y" })]
	[Preserve]
	public class ES3Type_Vector2 : ES3Type
	{
		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xF72D14", Offset = "0xF72D14", VA = "0xF72D14")]
		public ES3Type_Vector2()
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xF72DCC", Offset = "0xF72DCC", VA = "0xF72DCC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CC6")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200021E")]
	public class ES3Type_Vector2Array : ES3ArrayType
	{
		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xF72F18", Offset = "0xF72F18", VA = "0xF72F18")]
		public ES3Type_Vector2Array()
		{
		}
	}
	[Token(Token = "0x200021F")]
	[ES3Properties(new string[] { "x", "y" })]
	[Preserve]
	public class ES3Type_Vector2Int : ES3Type
	{
		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xF72FF0", Offset = "0xF72FF0", VA = "0xF72FF0")]
		public ES3Type_Vector2Int()
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xF730A8", Offset = "0xF730A8", VA = "0xF730A8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CCA")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000220")]
	public class ES3Type_Vector2IntArray : ES3ArrayType
	{
		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xF731F8", Offset = "0xF731F8", VA = "0xF731F8")]
		public ES3Type_Vector2IntArray()
		{
		}
	}
	[Token(Token = "0x2000221")]
	[ES3Properties(new string[] { "x", "y", "z" })]
	[Preserve]
	public class ES3Type_Vector3 : ES3Type
	{
		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xF732D0", Offset = "0xF732D0", VA = "0xF732D0")]
		public ES3Type_Vector3()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xF73388", Offset = "0xF73388", VA = "0xF73388", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CCE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000222")]
	public class ES3Type_Vector3Array : ES3ArrayType
	{
		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xF7352C", Offset = "0xF7352C", VA = "0xF7352C")]
		public ES3Type_Vector3Array()
		{
		}
	}
	[Token(Token = "0x2000223")]
	[ES3Properties(new string[] { "x", "y", "z" })]
	[Preserve]
	public class ES3Type_Vector3Int : ES3Type
	{
		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xF73604", Offset = "0xF73604", VA = "0xF73604")]
		public ES3Type_Vector3Int()
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xF736BC", Offset = "0xF736BC", VA = "0xF736BC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CD2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000224")]
	public class ES3Type_Vector3IntArray : ES3ArrayType
	{
		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xF73860", Offset = "0xF73860", VA = "0xF73860")]
		public ES3Type_Vector3IntArray()
		{
		}
	}
	[Token(Token = "0x2000225")]
	[ES3Properties(new string[] { "x", "y", "z", "w" })]
	[Preserve]
	public class ES3Type_Vector4 : ES3Type
	{
		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xF73938", Offset = "0xF73938", VA = "0xF73938")]
		public ES3Type_Vector4()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xF739F0", Offset = "0xF739F0", VA = "0xF739F0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CD6")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xF73BE8", Offset = "0xF73BE8", VA = "0xF73BE8")]
		public static bool Equals(Vector4 a, Vector4 b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000226")]
	public class ES3Type_Vector4Array : ES3ArrayType
	{
		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xF73D20", Offset = "0xF73D20", VA = "0xF73D20")]
		public ES3Type_Vector4Array()
		{
		}
	}
	[Token(Token = "0x2000227")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "x", "y", "z", "xMultiplier", "yMultiplier", "zMultiplier", "space" })]
	public class ES3Type_VelocityOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xF73DF8", Offset = "0xF73DF8", VA = "0xF73DF8")]
		public ES3Type_VelocityOverLifetimeModule()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xF73EB0", Offset = "0xF73EB0", VA = "0xF73EB0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6000CDB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6000CDC")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
}
namespace ES3Internal
{
	[Token(Token = "0x2000228")]
	internal static class ES3Debug
	{
		[Token(Token = "0x4000A5E")]
		private const string disableInfoMsg = "\n<i>To disable these messages from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Info'</i>";

		[Token(Token = "0x4000A5F")]
		private const string disableWarningMsg = "\n<i>To disable warnings from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Warnings'</i>";

		[Token(Token = "0x4000A60")]
		private const string disableErrorMsg = "\n<i>To disable these error messages from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Errors'</i>";

		[Token(Token = "0x4000A61")]
		private const char indentChar = '-';

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xF742CC", Offset = "0xF742CC", VA = "0xF742CC")]
		public static void Log(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xF718C0", Offset = "0xF718C0", VA = "0xF718C0")]
		public static void LogWarning(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xF744D8", Offset = "0xF744D8", VA = "0xF744D8")]
		public static void LogError(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xF74474", Offset = "0xF74474", VA = "0xF74474")]
		private static string Indent(int size)
		{
			return null;
		}
	}
	[Token(Token = "0x2000229")]
	public static class ES3Hash
	{
		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xF7465C", Offset = "0xF7465C", VA = "0xF7465C")]
		public static string SHA1Hash(string input)
		{
			return null;
		}
	}
	[Token(Token = "0x200022A")]
	public abstract class EncryptionAlgorithm
	{
		[Token(Token = "0x6000CE2")]
		public abstract byte[] Encrypt(byte[] bytes, string password, int bufferSize);

		[Token(Token = "0x6000CE3")]
		public abstract byte[] Decrypt(byte[] bytes, string password, int bufferSize);

		[Token(Token = "0x6000CE4")]
		public abstract void Encrypt(Stream input, Stream output, string password, int bufferSize);

		[Token(Token = "0x6000CE5")]
		public abstract void Decrypt(Stream input, Stream output, string password, int bufferSize);

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xF74858", Offset = "0xF74858", VA = "0xF74858")]
		protected static void CopyStream(Stream input, Stream output, int bufferSize)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xF74938", Offset = "0xF74938", VA = "0xF74938")]
		protected EncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class AESEncryptionAlgorithm : EncryptionAlgorithm
	{
		[Token(Token = "0x4000A62")]
		private const int ivSize = 16;

		[Token(Token = "0x4000A63")]
		private const int keySize = 16;

		[Token(Token = "0x4000A64")]
		private const int pwIterations = 100;

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xF74940", Offset = "0xF74940", VA = "0xF74940", Slot = "4")]
		public override byte[] Encrypt(byte[] bytes, string password, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xF74C60", Offset = "0xF74C60", VA = "0xF74C60", Slot = "5")]
		public override byte[] Decrypt(byte[] bytes, string password, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xF74F80", Offset = "0xF74F80", VA = "0xF74F80", Slot = "6")]
		public override void Encrypt(Stream input, Stream output, string password, int bufferSize)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xF754E0", Offset = "0xF754E0", VA = "0xF754E0", Slot = "7")]
		public override void Decrypt(Stream input, Stream output, string password, int bufferSize)
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xF75A7C", Offset = "0xF75A7C", VA = "0xF75A7C")]
		public AESEncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class UnbufferedCryptoStream : MemoryStream
	{
		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Stream stream;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly bool isReadStream;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string password;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int bufferSize;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private EncryptionAlgorithm alg;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool disposed;

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xF75A84", Offset = "0xF75A84", VA = "0xF75A84")]
		public UnbufferedCryptoStream(Stream stream, bool isReadStream, string password, int bufferSize, EncryptionAlgorithm alg)
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xF75B40", Offset = "0xF75B40", VA = "0xF75B40", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200022D")]
	public struct ES3Data
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ES3Type type;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte[] bytes;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xF75BC4", Offset = "0xF75BC4", VA = "0xF75BC4")]
		public ES3Data(Type type, byte[] bytes)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xF75E84", Offset = "0xF75E84", VA = "0xF75E84")]
		public ES3Data(ES3Type type, byte[] bytes)
		{
		}
	}
	[Token(Token = "0x200022E")]
	public static class ES3IO
	{
		[Token(Token = "0x200022F")]
		public enum ES3FileMode
		{
			[Token(Token = "0x4000A71")]
			Read,
			[Token(Token = "0x4000A72")]
			Write,
			[Token(Token = "0x4000A73")]
			Append
		}

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string persistentDataPath;

		[Token(Token = "0x4000A6E")]
		internal const string backupFileSuffix = ".bac";

		[Token(Token = "0x4000A6F")]
		internal const string temporaryFileSuffix = ".tmp";

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xF75EB4", Offset = "0xF75EB4", VA = "0xF75EB4")]
		public static DateTime GetTimestamp(string filePath)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xF75F84", Offset = "0xF75F84", VA = "0xF75F84")]
		public static string GetExtension(string path)
		{
			return null;
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xF75FDC", Offset = "0xF75FDC", VA = "0xF75FDC")]
		public static void DeleteFile(string filePath)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xF75F7C", Offset = "0xF75F7C", VA = "0xF75F7C")]
		public static bool FileExists(string filePath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xF76050", Offset = "0xF76050", VA = "0xF76050")]
		public static void MoveFile(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xF76058", Offset = "0xF76058", VA = "0xF76058")]
		public static void CopyFile(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xF76060", Offset = "0xF76060", VA = "0xF76060")]
		public static void MoveDirectory(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xF76068", Offset = "0xF76068", VA = "0xF76068")]
		public static void CreateDirectory(string directoryPath)
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xF76070", Offset = "0xF76070", VA = "0xF76070")]
		public static bool DirectoryExists(string directoryPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xF76078", Offset = "0xF76078", VA = "0xF76078")]
		public static string GetDirectoryPath(string path, char seperator = '/')
		{
			return null;
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xF76170", Offset = "0xF76170", VA = "0xF76170")]
		public static bool UsesForwardSlash(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xF761C4", Offset = "0xF761C4", VA = "0xF761C4")]
		public static string CombinePathAndFilename(string directoryPath, string fileOrDirectoryName)
		{
			return null;
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xF76270", Offset = "0xF76270", VA = "0xF76270")]
		public static string[] GetDirectories(string path, bool getFullPaths = true)
		{
			return null;
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xF763D0", Offset = "0xF763D0", VA = "0xF763D0")]
		public static void DeleteDirectory(string directoryPath)
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xF76448", Offset = "0xF76448", VA = "0xF76448")]
		public static string[] GetFiles(string path, bool getFullPaths = true)
		{
			return null;
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xF7655C", Offset = "0xF7655C", VA = "0xF7655C")]
		public static byte[] ReadAllBytes(string path)
		{
			return null;
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xF76564", Offset = "0xF76564", VA = "0xF76564")]
		public static void WriteAllBytes(string path, byte[] bytes)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xF7656C", Offset = "0xF7656C", VA = "0xF7656C")]
		public static void CommitBackup(ES3Settings settings)
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class ES3Prefab : MonoBehaviour
	{
		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long prefabId;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3RefIdDictionary localRefs;

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xF769C0", Offset = "0xF769C0", VA = "0xF769C0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xF76ECC", Offset = "0xF76ECC", VA = "0xF76ECC")]
		public long Get(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xF76F44", Offset = "0xF76F44", VA = "0xF76F44")]
		public long Add(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xF77064", Offset = "0xF77064", VA = "0xF77064")]
		public Dictionary<string, string> GetReferences()
		{
			return null;
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xF772D4", Offset = "0xF772D4", VA = "0xF772D4")]
		public void ApplyReferences(Dictionary<long, long> localToGlobal)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xF77018", Offset = "0xF77018", VA = "0xF77018")]
		public static long GetNewRefID()
		{
			return default(long);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xF77874", Offset = "0xF77874", VA = "0xF77874")]
		public ES3Prefab()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000231")]
	[DisallowMultipleComponent]
	public abstract class ES3ReferenceMgrBase : MonoBehaviour
	{
		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object _lock;

		[Token(Token = "0x4000A77")]
		public const string referencePropertyName = "_ES3Ref";

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ES3ReferenceMgrBase _current;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static HashSet<ES3ReferenceMgrBase> mgrs;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static System.Random rng;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool openPrefabs;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<ES3Prefab> prefabs;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public ES3IdRefDictionary idRef;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ES3RefIdDictionary _refId;

		[Token(Token = "0x17000119")]
		public static ES3ReferenceMgrBase Current
		{
			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0xF76BAC", Offset = "0xF76BAC", VA = "0xF76BAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		public bool IsInitialised
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0xF77B48", Offset = "0xF77B48", VA = "0xF77B48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011B")]
		public ES3RefIdDictionary refId
		{
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xF77BA4", Offset = "0xF77BA4", VA = "0xF77BA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0xF77DB4", Offset = "0xF77DB4", VA = "0xF77DB4")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public ES3GlobalReferences GlobalReferences
		{
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xF77DBC", Offset = "0xF77DBC", VA = "0xF77DBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xF77934", Offset = "0xF77934", VA = "0xF77934")]
		public static ES3ReferenceMgrBase GetManagerFromScene(Scene scene)
		{
			return null;
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xF77DCC", Offset = "0xF77DCC", VA = "0xF77DCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xF7810C", Offset = "0xF7810C", VA = "0xF7810C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xF77FB8", Offset = "0xF77FB8", VA = "0xF77FB8")]
		public void Merge(ES3ReferenceMgrBase otherMgr)
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xF78210", Offset = "0xF78210", VA = "0xF78210")]
		public long Get(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xF78470", Offset = "0xF78470", VA = "0xF78470")]
		internal UnityEngine.Object Get(long id, Type type, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xF78A28", Offset = "0xF78A28", VA = "0xF78A28")]
		public UnityEngine.Object Get(long id, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xF78A34", Offset = "0xF78A34", VA = "0xF78A34")]
		public ES3Prefab GetPrefab(long id, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xF78E08", Offset = "0xF78E08", VA = "0xF78E08")]
		public long GetPrefab(ES3Prefab prefabToFind, bool suppressWarnings = false)
		{
			return default(long);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xF76D30", Offset = "0xF76D30", VA = "0xF76D30")]
		public long Add(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xF77518", Offset = "0xF77518", VA = "0xF77518")]
		public long Add(UnityEngine.Object obj, long id)
		{
			return default(long);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xF791E8", Offset = "0xF791E8", VA = "0xF791E8")]
		public bool AddPrefab(ES3Prefab prefab)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xF792D0", Offset = "0xF792D0", VA = "0xF792D0")]
		public void Remove(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xF79804", Offset = "0xF79804", VA = "0xF79804")]
		public void Remove(long referenceID)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xF79D30", Offset = "0xF79D30", VA = "0xF79D30")]
		public void RemoveNullOrInvalidValues()
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xF7A084", Offset = "0xF7A084", VA = "0xF7A084")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xF7A1A8", Offset = "0xF7A1A8", VA = "0xF7A1A8")]
		public bool Contains(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xF7A204", Offset = "0xF7A204", VA = "0xF7A204")]
		public bool Contains(long referenceID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xF7A25C", Offset = "0xF7A25C", VA = "0xF7A25C")]
		public void ChangeId(long oldId, long newId)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xF776EC", Offset = "0xF776EC", VA = "0xF776EC")]
		internal static long GetNewRefID()
		{
			return default(long);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xF77010", Offset = "0xF77010", VA = "0xF77010")]
		internal static bool CanBeSaved(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xF7A468", Offset = "0xF7A468", VA = "0xF7A468")]
		protected ES3ReferenceMgrBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000235")]
	public class ES3IdRefDictionary : ES3SerializableDictionary<long, UnityEngine.Object>
	{
		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xF7A86C", Offset = "0xF7A86C", VA = "0xF7A86C", Slot = "46")]
		protected override bool KeysAreEqual(long a, long b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xF7A878", Offset = "0xF7A878", VA = "0xF7A878", Slot = "47")]
		protected override bool ValuesAreEqual(UnityEngine.Object a, UnityEngine.Object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xF7A564", Offset = "0xF7A564", VA = "0xF7A564")]
		public ES3IdRefDictionary()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000236")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3RefIdDictionary : ES3SerializableDictionary<UnityEngine.Object, long>
	{
		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xF7A8E0", Offset = "0xF7A8E0", VA = "0xF7A8E0", Slot = "46")]
		protected override bool KeysAreEqual(UnityEngine.Object a, UnityEngine.Object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xF7A948", Offset = "0xF7A948", VA = "0xF7A948", Slot = "47")]
		protected override bool ValuesAreEqual(long a, long b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xF778EC", Offset = "0xF778EC", VA = "0xF778EC")]
		public ES3RefIdDictionary()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public static class ES3Reflection
	{
		[Token(Token = "0x2000238")]
		public struct ES3ReflectedMember
		{
			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private FieldInfo fieldInfo;

			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private PropertyInfo propertyInfo;

			[Token(Token = "0x4000A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isProperty;

			[Token(Token = "0x1700011E")]
			public bool IsNull
			{
				[Token(Token = "0x6000D5F")]
				[Address(RVA = "0xF7EBF0", Offset = "0xF7EBF0", VA = "0xF7EBF0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700011F")]
			public string Name
			{
				[Token(Token = "0x6000D60")]
				[Address(RVA = "0xF7EC2C", Offset = "0xF7EC2C", VA = "0xF7EC2C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000120")]
			public Type MemberType
			{
				[Token(Token = "0x6000D61")]
				[Address(RVA = "0xF7EC5C", Offset = "0xF7EC5C", VA = "0xF7EC5C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000121")]
			public bool IsPublic
			{
				[Token(Token = "0x6000D62")]
				[Address(RVA = "0xF7ECA0", Offset = "0xF7ECA0", VA = "0xF7ECA0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000122")]
			public bool IsProtected
			{
				[Token(Token = "0x6000D63")]
				[Address(RVA = "0xF7ED2C", Offset = "0xF7ED2C", VA = "0xF7ED2C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000123")]
			public bool IsStatic
			{
				[Token(Token = "0x6000D64")]
				[Address(RVA = "0xF7ED7C", Offset = "0xF7ED7C", VA = "0xF7ED7C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000D65")]
			[Address(RVA = "0xF7C684", Offset = "0xF7C684", VA = "0xF7C684")]
			public ES3ReflectedMember(object fieldPropertyInfo)
			{
			}

			[Token(Token = "0x6000D66")]
			[Address(RVA = "0xF7EDCC", Offset = "0xF7EDCC", VA = "0xF7EDCC")]
			public void SetValue(object obj, object value)
			{
			}

			[Token(Token = "0x6000D67")]
			[Address(RVA = "0xF7EE10", Offset = "0xF7EE10", VA = "0xF7EE10")]
			public object GetValue(object obj)
			{
				return null;
			}
		}

		[Token(Token = "0x2000239")]
		public class ES3ReflectedMethod
		{
			[Token(Token = "0x4000A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MethodInfo method;

			[Token(Token = "0x6000D68")]
			[Address(RVA = "0xF7D088", Offset = "0xF7D088", VA = "0xF7D088")]
			public ES3ReflectedMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes)
			{
			}

			[Token(Token = "0x6000D69")]
			[Address(RVA = "0xF7EE5C", Offset = "0xF7EE5C", VA = "0xF7EE5C")]
			public ES3ReflectedMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes, BindingFlags bindingAttr)
			{
			}

			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0xF7EEEC", Offset = "0xF7EEEC", VA = "0xF7EEEC")]
			public object Invoke(object obj, [Optional] object[] parameters)
			{
				return null;
			}
		}

		[Token(Token = "0x4000A86")]
		public const string memberFieldPrefix = "m_";

		[Token(Token = "0x4000A87")]
		public const string componentTagFieldName = "tag";

		[Token(Token = "0x4000A88")]
		public const string componentNameFieldName = "name";

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string[] excludedPropertyNames;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Type serializableAttributeType;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Type serializeFieldAttributeType;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Type obsoleteAttributeType;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Type nonSerializedAttributeType;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly Type es3SerializableAttributeType;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Type es3NonSerializableAttributeType;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Type[] EmptyTypes;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Assembly[] _assemblies;

		[Token(Token = "0x1700011D")]
		private static Assembly[] Assemblies
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xF7A954", Offset = "0xF7A954", VA = "0xF7A954")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xF7ABB4", Offset = "0xF7ABB4", VA = "0xF7ABB4")]
		public static Type[] GetElementTypes(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xF7AD5C", Offset = "0xF7AD5C", VA = "0xF7AD5C")]
		public static List<FieldInfo> GetSerializableFields(Type type, [Optional] List<FieldInfo> serializableFields, bool safe = true, [Optional] string[] memberNames, BindingFlags bindings = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
		{
			return null;
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xF7B680", Offset = "0xF7B680", VA = "0xF7B680")]
		public static List<PropertyInfo> GetSerializableProperties(Type type, [Optional] List<PropertyInfo> serializableProperties, bool safe = true, [Optional] string[] memberNames, BindingFlags bindings = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
		{
			return null;
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xF7B390", Offset = "0xF7B390", VA = "0xF7B390")]
		public static bool TypeIsSerializable(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xF7BDF0", Offset = "0xF7BDF0", VA = "0xF7BDF0")]
		public static object CreateInstance(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xF7C080", Offset = "0xF7C080", VA = "0xF7C080")]
		public static object CreateInstance(Type type, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xF7C1F8", Offset = "0xF7C1F8", VA = "0xF7C1F8")]
		public static Array ArrayCreateInstance(Type type, int length)
		{
			return null;
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xF7C274", Offset = "0xF7C274", VA = "0xF7C274")]
		public static Array ArrayCreateInstance(Type type, int[] dimensions)
		{
			return null;
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xF7C27C", Offset = "0xF7C27C", VA = "0xF7C27C")]
		public static Type MakeGenericType(Type type, Type genericParam)
		{
			return null;
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xF7C338", Offset = "0xF7C338", VA = "0xF7C338")]
		public static ES3ReflectedMember[] GetSerializableMembers(Type type, bool safe = true, [Optional] string[] memberNames)
		{
			return null;
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xF7C8AC", Offset = "0xF7C8AC", VA = "0xF7C8AC")]
		public static ES3ReflectedMember GetES3ReflectedProperty(Type type, string propertyName)
		{
			return default(ES3ReflectedMember);
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xF7CA68", Offset = "0xF7CA68", VA = "0xF7CA68")]
		public static ES3ReflectedMember GetES3ReflectedMember(Type type, string fieldName)
		{
			return default(ES3ReflectedMember);
		}

		[Token(Token = "0x6000D42")]
		public static IList<T> GetInstances<T>()
		{
			return null;
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xF7CC2C", Offset = "0xF7CC2C", VA = "0xF7CC2C")]
		public static IList<Type> GetDerivedTypes(Type derivedType)
		{
			return null;
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xF7B370", Offset = "0xF7B370", VA = "0xF7B370")]
		public static bool IsAssignableFrom(Type a, Type b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xF7CFA0", Offset = "0xF7CFA0", VA = "0xF7CFA0")]
		public static Type GetGenericTypeDefinition(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xF7AD1C", Offset = "0xF7AD1C", VA = "0xF7AD1C")]
		public static Type[] GetGenericArguments(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xF7CFC0", Offset = "0xF7CFC0", VA = "0xF7CFC0")]
		public static int GetArrayRank(Type type)
		{
			return default(int);
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xF7CFE0", Offset = "0xF7CFE0", VA = "0xF7CFE0")]
		public static string GetAssemblyQualifiedName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xF7D000", Offset = "0xF7D000", VA = "0xF7D000")]
		public static ES3ReflectedMethod GetMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes)
		{
			return null;
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xF7BDDC", Offset = "0xF7BDDC", VA = "0xF7BDDC")]
		public static bool TypeIsArray(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xF7AD3C", Offset = "0xF7AD3C", VA = "0xF7AD3C")]
		public static Type GetElementType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xF7D100", Offset = "0xF7D100", VA = "0xF7D100")]
		public static bool IsAbstract(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xF7D114", Offset = "0xF7D114", VA = "0xF7D114")]
		public static bool IsInterface(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xF7ACFC", Offset = "0xF7ACFC", VA = "0xF7ACFC")]
		public static bool IsGenericType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xF7BDC8", Offset = "0xF7BDC8", VA = "0xF7BDC8")]
		public static bool IsValueType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xF7D128", Offset = "0xF7D128", VA = "0xF7D128")]
		public static bool IsEnum(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xF7BFB8", Offset = "0xF7BFB8", VA = "0xF7BFB8")]
		public static bool HasParameterlessConstructor(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xF7D148", Offset = "0xF7D148", VA = "0xF7D148")]
		public static ConstructorInfo GetParameterlessConstructor(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xF7D1E0", Offset = "0xF7D1E0", VA = "0xF7D1E0")]
		public static string GetShortAssemblyQualifiedName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xF7C928", Offset = "0xF7C928", VA = "0xF7C928")]
		public static PropertyInfo GetProperty(Type type, string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xF7CAE4", Offset = "0xF7CAE4", VA = "0xF7CAE4")]
		public static FieldInfo GetField(Type type, string fieldName)
		{
			return null;
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xF7D2C0", Offset = "0xF7D2C0", VA = "0xF7D2C0")]
		public static MethodInfo[] GetMethods(Type type, string methodName)
		{
			return null;
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xF7BCD8", Offset = "0xF7BCD8", VA = "0xF7BCD8")]
		public static bool IsPrimitive(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xF7B364", Offset = "0xF7B364", VA = "0xF7B364")]
		public static bool AttributeIsDefined(MemberInfo info, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xF7BCB8", Offset = "0xF7BCB8", VA = "0xF7BCB8")]
		public static bool AttributeIsDefined(Type type, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xF7D3DC", Offset = "0xF7D3DC", VA = "0xF7D3DC")]
		public static bool ImplementsInterface(Type type, Type interfaceType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xF7B660", Offset = "0xF7B660", VA = "0xF7B660")]
		public static Type BaseType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xF7D470", Offset = "0xF7D470", VA = "0xF7D470")]
		public static Type GetType(string typeString)
		{
			return null;
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xF7DE2C", Offset = "0xF7DE2C", VA = "0xF7DE2C")]
		public static string GetTypeString(Type type)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200023D")]
	public abstract class ES3SerializableDictionary<TKey, TVal> : Dictionary<TKey, TVal>, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TKey> _Keys;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TVal> _Values;

		[Token(Token = "0x6000D74")]
		protected abstract bool KeysAreEqual(TKey a, TKey b);

		[Token(Token = "0x6000D75")]
		protected abstract bool ValuesAreEqual(TVal a, TVal b);

		[Token(Token = "0x6000D76")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000D77")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000D78")]
		public int RemoveNullValues()
		{
			return default(int);
		}

		[Token(Token = "0x6000D79")]
		public bool ChangeKey(TKey oldKey, TKey newKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7A")]
		protected ES3SerializableDictionary()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class ES3JSONReader : ES3Reader
	{
		[Token(Token = "0x4000AA1")]
		private const char endOfStreamChar = '\uffff';

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StreamReader baseReader;

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xF7F12C", Offset = "0xF7F12C", VA = "0xF7F12C")]
		internal ES3JSONReader(Stream stream, ES3Settings settings, bool readHeaderAndFooter = true)
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xF7F354", Offset = "0xF7F354", VA = "0xF7F354", Slot = "21")]
		public override string ReadPropertyName()
		{
			return null;
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xF7F8A8", Offset = "0xF7F8A8", VA = "0xF7F8A8", Slot = "22")]
		protected override Type ReadKeyPrefix(bool ignoreType = false)
		{
			return null;
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xF7FA44", Offset = "0xF7FA44", VA = "0xF7FA44", Slot = "23")]
		protected override void ReadKeySuffix()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xF7FA54", Offset = "0xF7FA54", VA = "0xF7FA54", Slot = "27")]
		internal override bool StartReadObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xF7FD48", Offset = "0xF7FD48", VA = "0xF7FD48", Slot = "28")]
		internal override void EndReadObject()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xF7FD68", Offset = "0xF7FD68", VA = "0xF7FD68", Slot = "29")]
		internal override bool StartReadDictionary()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xF7FD78", Offset = "0xF7FD78", VA = "0xF7FD78", Slot = "30")]
		internal override void EndReadDictionary()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xF7FD7C", Offset = "0xF7FD7C", VA = "0xF7FD7C", Slot = "31")]
		internal override bool StartReadDictionaryKey()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xF7FDB4", Offset = "0xF7FDB4", VA = "0xF7FDB4", Slot = "32")]
		internal override void EndReadDictionaryKey()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xF7FDBC", Offset = "0xF7FDBC", VA = "0xF7FDBC", Slot = "33")]
		internal override void StartReadDictionaryValue()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xF7FDC0", Offset = "0xF7FDC0", VA = "0xF7FDC0", Slot = "34")]
		internal override bool EndReadDictionaryValue()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xF7FE84", Offset = "0xF7FE84", VA = "0xF7FE84", Slot = "35")]
		internal override bool StartReadCollection()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xF7FE8C", Offset = "0xF7FE8C", VA = "0xF7FE8C", Slot = "36")]
		internal override void EndReadCollection()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xF7FE90", Offset = "0xF7FE90", VA = "0xF7FE90", Slot = "37")]
		internal override bool StartReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xF7FEC8", Offset = "0xF7FEC8", VA = "0xF7FEC8", Slot = "38")]
		internal override bool EndReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xF7FF8C", Offset = "0xF7FF8C", VA = "0xF7FF8C")]
		private void ReadString(StreamWriter writer, bool skip = false)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xF800B0", Offset = "0xF800B0", VA = "0xF800B0", Slot = "24")]
		internal override byte[] ReadElement(bool skip = false)
		{
			return null;
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xF80058", Offset = "0xF80058", VA = "0xF80058")]
		private char ReadOrSkipChar(StreamWriter writer, bool skip)
		{
			return default(char);
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xF7F5A4", Offset = "0xF7F5A4", VA = "0xF7F5A4")]
		private char ReadCharIgnoreWhitespace(bool ignoreTrailingWhitespace = true)
		{
			return default(char);
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xF7FA74", Offset = "0xF7FA74", VA = "0xF7FA74")]
		private bool ReadNullOrCharIgnoreWhitespace(char expectedChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xF7F6A0", Offset = "0xF7F6A0", VA = "0xF7F6A0")]
		private char ReadCharIgnoreWhitespace(char expectedChar)
		{
			return default(char);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xF8065C", Offset = "0xF8065C", VA = "0xF8065C")]
		private bool ReadQuotationMarkOrNullIgnoreWhitespace()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xF80838", Offset = "0xF80838", VA = "0xF80838")]
		private char PeekCharIgnoreWhitespace(char expectedChar)
		{
			return default(char);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xF7F51C", Offset = "0xF7F51C", VA = "0xF7F51C")]
		private char PeekCharIgnoreWhitespace()
		{
			return default(char);
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xF80A3C", Offset = "0xF80A3C", VA = "0xF80A3C")]
		private void SkipWhiteSpace()
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xF7F2A4", Offset = "0xF7F2A4", VA = "0xF7F2A4")]
		private void SkipOpeningBraceOfFile()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xF80624", Offset = "0xF80624", VA = "0xF80624")]
		private static bool IsWhiteSpace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xF805A0", Offset = "0xF805A0", VA = "0xF805A0")]
		private static bool IsOpeningBrace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xF805B4", Offset = "0xF805B4", VA = "0xF805B4")]
		private static bool IsEndOfValue(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xF7F590", Offset = "0xF7F590", VA = "0xF7F590")]
		private static bool IsTerminator(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xF7F678", Offset = "0xF7F678", VA = "0xF7F678")]
		private static bool IsQuotationMark(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xF80AB0", Offset = "0xF80AB0", VA = "0xF80AB0")]
		private static bool IsEndOfStream(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xF80AC0", Offset = "0xF80AC0", VA = "0xF80AC0")]
		private string GetValueString()
		{
			return null;
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xF80B80", Offset = "0xF80B80", VA = "0xF80B80", Slot = "18")]
		internal override string Read_string()
		{
			return null;
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xF80D20", Offset = "0xF80D20", VA = "0xF80D20", Slot = "20")]
		internal override long Read_ref()
		{
			return default(long);
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xF80E54", Offset = "0xF80E54", VA = "0xF80E54", Slot = "8")]
		internal override char Read_char()
		{
			return default(char);
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xF80EC8", Offset = "0xF80EC8", VA = "0xF80EC8", Slot = "6")]
		internal override float Read_float()
		{
			return default(float);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xF80F3C", Offset = "0xF80F3C", VA = "0xF80F3C", Slot = "5")]
		internal override int Read_int()
		{
			return default(int);
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xF80F50", Offset = "0xF80F50", VA = "0xF80F50", Slot = "7")]
		internal override bool Read_bool()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xF80FB8", Offset = "0xF80FB8", VA = "0xF80FB8", Slot = "9")]
		internal override decimal Read_decimal()
		{
			return default(decimal);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xF81058", Offset = "0xF81058", VA = "0xF81058", Slot = "10")]
		internal override double Read_double()
		{
			return default(double);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xF810CC", Offset = "0xF810CC", VA = "0xF810CC", Slot = "11")]
		internal override long Read_long()
		{
			return default(long);
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xF810E0", Offset = "0xF810E0", VA = "0xF810E0", Slot = "12")]
		internal override ulong Read_ulong()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xF810F4", Offset = "0xF810F4", VA = "0xF810F4", Slot = "17")]
		internal override uint Read_uint()
		{
			return default(uint);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xF81108", Offset = "0xF81108", VA = "0xF81108", Slot = "13")]
		internal override byte Read_byte()
		{
			return default(byte);
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xF81120", Offset = "0xF81120", VA = "0xF81120", Slot = "14")]
		internal override sbyte Read_sbyte()
		{
			return default(sbyte);
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xF81138", Offset = "0xF81138", VA = "0xF81138", Slot = "15")]
		internal override short Read_short()
		{
			return default(short);
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xF81150", Offset = "0xF81150", VA = "0xF81150", Slot = "16")]
		internal override ushort Read_ushort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xF81168", Offset = "0xF81168", VA = "0xF81168", Slot = "19")]
		internal override byte[] Read_byteArray()
		{
			return null;
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xF811DC", Offset = "0xF811DC", VA = "0xF811DC", Slot = "25")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class ES3GlobalReferences : ScriptableObject
	{
		[Token(Token = "0x17000124")]
		public static ES3GlobalReferences Instance
		{
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0xF77DC4", Offset = "0xF77DC4", VA = "0xF77DC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xF78A20", Offset = "0xF78A20", VA = "0xF78A20")]
		public UnityEngine.Object Get(long id)
		{
			return null;
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xF791E0", Offset = "0xF791E0", VA = "0xF791E0")]
		public long GetOrAdd(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xF7A080", Offset = "0xF7A080", VA = "0xF7A080")]
		public void RemoveInvalidKeys()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xF811F8", Offset = "0xF811F8", VA = "0xF811F8")]
		public ES3GlobalReferences()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class ES3DefaultSettings : MonoBehaviour
	{
		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public ES3SerializableSettings settings;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool autoUpdateReferences;

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xF81200", Offset = "0xF81200", VA = "0xF81200")]
		public ES3DefaultSettings()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public enum ES3FileMode
	{
		[Token(Token = "0x4000AA6")]
		Read,
		[Token(Token = "0x4000AA7")]
		Write,
		[Token(Token = "0x4000AA8")]
		Append
	}
	[Token(Token = "0x2000243")]
	public class ES3FileStream : FileStream
	{
		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isDisposed;

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xF81210", Offset = "0xF81210", VA = "0xF81210")]
		public ES3FileStream(string path, ES3FileMode fileMode, int bufferSize, bool useAsync)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xF812D4", Offset = "0xF812D4", VA = "0xF812D4")]
		protected static string GetPath(string path, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xF813C4", Offset = "0xF813C4", VA = "0xF813C4")]
		protected static FileMode GetFileMode(ES3FileMode fileMode)
		{
			return default(FileMode);
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xF813E4", Offset = "0xF813E4", VA = "0xF813E4")]
		protected static FileAccess GetFileAccess(ES3FileMode fileMode)
		{
			return default(FileAccess);
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xF813F4", Offset = "0xF813F4", VA = "0xF813F4", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000244")]
	internal class ES3PlayerPrefsStream : MemoryStream
	{
		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string path;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool append;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool isWriteStream;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool isDisposed;

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xF81414", Offset = "0xF81414", VA = "0xF81414")]
		public ES3PlayerPrefsStream(string path)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xF81550", Offset = "0xF81550", VA = "0xF81550")]
		public ES3PlayerPrefsStream(string path, int bufferSize, bool append = false)
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xF81460", Offset = "0xF81460", VA = "0xF81460")]
		private static byte[] GetData(string path, bool isWriteStream)
		{
			return null;
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xF81598", Offset = "0xF81598", VA = "0xF81598", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000245")]
	internal class ES3ResourcesStream : MemoryStream
	{
		[Token(Token = "0x17000125")]
		public bool Exists
		{
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0xF81814", Offset = "0xF81814", VA = "0xF81814")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xF81834", Offset = "0xF81834", VA = "0xF81834")]
		public ES3ResourcesStream(string path)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xF81858", Offset = "0xF81858", VA = "0xF81858")]
		private static byte[] GetData(string path)
		{
			return null;
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xF8194C", Offset = "0xF8194C", VA = "0xF8194C", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x2000246")]
	public static class ES3Stream
	{
		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xF81958", Offset = "0xF81958", VA = "0xF81958")]
		public static Stream CreateStream(ES3Settings settings, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xF81E14", Offset = "0xF81E14", VA = "0xF81E14")]
		public static Stream CreateStream(Stream stream, ES3Settings settings, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xF821E8", Offset = "0xF821E8", VA = "0xF821E8")]
		public static void CopyTo(Stream source, Stream destination)
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class ES3Member
	{
		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isProperty;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Reflection.ES3ReflectedMember reflectedMember;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useReflection;

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xF821FC", Offset = "0xF821FC", VA = "0xF821FC")]
		public ES3Member(string name, Type type, bool isProperty)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xF82254", Offset = "0xF82254", VA = "0xF82254")]
		public ES3Member(ES3Reflection.ES3ReflectedMember reflectedMember)
		{
		}
	}
	[Token(Token = "0x2000248")]
	[Preserve]
	public static class ES3TypeMgr
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public static Dictionary<Type, ES3Type> types;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ES3Type lastAccessedType;

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xF75C88", Offset = "0xF75C88", VA = "0xF75C88")]
		public static ES3Type GetOrCreateES3Type(Type type, bool throwException = true)
		{
			return null;
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xF82FC0", Offset = "0xF82FC0", VA = "0xF82FC0")]
		public static ES3Type GetES3Type(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xF830A0", Offset = "0xF830A0", VA = "0xF830A0")]
		internal static void Add(Type type, ES3Type es3Type)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xF82534", Offset = "0xF82534", VA = "0xF82534")]
		internal static ES3Type CreateES3Type(Type type, bool throwException = true)
		{
			return null;
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xF822D8", Offset = "0xF822D8", VA = "0xF822D8")]
		internal static void Init()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public class ES3WebClass
	{
		[Token(Token = "0x200024A")]
		[CompilerGenerated]
		private sealed class <SendWebRequest>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3WebClass <>4__this;

			[Token(Token = "0x4000AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityWebRequest webRequest;

			[Token(Token = "0x17000129")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DDE")]
				[Address(RVA = "0xF83AA0", Offset = "0xF83AA0", VA = "0xF83AA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DE0")]
				[Address(RVA = "0xF83AE8", Offset = "0xF83AE8", VA = "0xF83AE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0xF839D4", Offset = "0xF839D4", VA = "0xF839D4")]
			[DebuggerHidden]
			public <SendWebRequest>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0xF83A24", Offset = "0xF83A24", VA = "0xF83A24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0xF83A28", Offset = "0xF83A28", VA = "0xF83A28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0xF83AA8", Offset = "0xF83AA8", VA = "0xF83AA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string url;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string apiKey;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<KeyValuePair<string, string>> formData;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected UnityWebRequest _webRequest;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isDone;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string error;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long errorCode;

		[Token(Token = "0x17000126")]
		public float uploadProgress
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0xF832F8", Offset = "0xF832F8", VA = "0xF832F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000127")]
		public float downloadProgress
		{
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xF83310", Offset = "0xF83310", VA = "0xF83310")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000128")]
		public bool isError
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xF83328", Offset = "0xF83328", VA = "0xF83328")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xF8335C", Offset = "0xF8335C", VA = "0xF8335C")]
		public static bool IsNetworkError(UnityWebRequest www)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xF83380", Offset = "0xF83380", VA = "0xF83380")]
		protected ES3WebClass(string url, string apiKey)
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xF83438", Offset = "0xF83438", VA = "0xF83438")]
		public void AddPOSTField(string fieldName, string value)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xF8352C", Offset = "0xF8352C", VA = "0xF8352C")]
		protected string GetUser(string user, string password)
		{
			return null;
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xF835B8", Offset = "0xF835B8", VA = "0xF835B8")]
		protected WWWForm CreateWWWForm()
		{
			return null;
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xF83744", Offset = "0xF83744", VA = "0xF83744")]
		protected bool HandleError(UnityWebRequest webRequest, bool errorIfDataIsDownloaded)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xF83944", Offset = "0xF83944", VA = "0xF83944")]
		[IteratorStateMachine(typeof(<SendWebRequest>d__19))]
		protected IEnumerator SendWebRequest(UnityWebRequest webRequest)
		{
			return null;
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xF839FC", Offset = "0xF839FC", VA = "0xF839FC", Slot = "4")]
		protected virtual void Reset()
		{
		}
	}
	[Token(Token = "0x200024B")]
	internal enum ES3SpecialByte : byte
	{
		[Token(Token = "0x4000AC2")]
		Null = 0,
		[Token(Token = "0x4000AC3")]
		Bool = 1,
		[Token(Token = "0x4000AC4")]
		Byte = 2,
		[Token(Token = "0x4000AC5")]
		Sbyte = 3,
		[Token(Token = "0x4000AC6")]
		Char = 4,
		[Token(Token = "0x4000AC7")]
		Decimal = 5,
		[Token(Token = "0x4000AC8")]
		Double = 6,
		[Token(Token = "0x4000AC9")]
		Float = 7,
		[Token(Token = "0x4000ACA")]
		Int = 8,
		[Token(Token = "0x4000ACB")]
		Uint = 9,
		[Token(Token = "0x4000ACC")]
		Long = 10,
		[Token(Token = "0x4000ACD")]
		Ulong = 11,
		[Token(Token = "0x4000ACE")]
		Short = 12,
		[Token(Token = "0x4000ACF")]
		Ushort = 13,
		[Token(Token = "0x4000AD0")]
		String = 14,
		[Token(Token = "0x4000AD1")]
		ByteArray = 15,
		[Token(Token = "0x4000AD2")]
		Collection = 128,
		[Token(Token = "0x4000AD3")]
		Dictionary = 129,
		[Token(Token = "0x4000AD4")]
		CollectionItem = 130,
		[Token(Token = "0x4000AD5")]
		Object = 254,
		[Token(Token = "0x4000AD6")]
		Terminator = byte.MaxValue
	}
	[Token(Token = "0x200024C")]
	internal static class ES3Binary
	{
		[Token(Token = "0x4000AD7")]
		internal const string ObjectTerminator = ".";

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly Dictionary<ES3SpecialByte, Type> IdToType;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly Dictionary<Type, ES3SpecialByte> TypeToId;

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xF83AF0", Offset = "0xF83AF0", VA = "0xF83AF0")]
		internal static ES3SpecialByte TypeToByte(Type type)
		{
			return default(ES3SpecialByte);
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xF83B94", Offset = "0xF83B94", VA = "0xF83B94")]
		internal static Type ByteToType(ES3SpecialByte b)
		{
			return null;
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xF83BE8", Offset = "0xF83BE8", VA = "0xF83BE8")]
		internal static Type ByteToType(byte b)
		{
			return null;
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xF83CD0", Offset = "0xF83CD0", VA = "0xF83CD0")]
		internal static bool IsPrimitive(ES3SpecialByte b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200024D")]
	internal class ES3CacheWriter : ES3Writer
	{
		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ES3File es3File;

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xF84380", Offset = "0xF84380", VA = "0xF84380")]
		internal ES3CacheWriter(ES3Settings settings, bool writeHeaderAndFooter, bool mergeKeys)
		{
		}

		[Token(Token = "0x6000DE7")]
		public override void Write<T>(string key, object value)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xF84420", Offset = "0xF84420", VA = "0xF84420", Slot = "39")]
		internal override void Write(string key, Type type, byte[] value)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xF84468", Offset = "0xF84468", VA = "0xF84468", Slot = "41")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void Write(Type type, string key, object value)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xF844D0", Offset = "0xF844D0", VA = "0xF844D0", Slot = "24")]
		internal override void WritePrimitive(int value)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xF844D4", Offset = "0xF844D4", VA = "0xF844D4", Slot = "25")]
		internal override void WritePrimitive(float value)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xF844D8", Offset = "0xF844D8", VA = "0xF844D8", Slot = "26")]
		internal override void WritePrimitive(bool value)
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xF844DC", Offset = "0xF844DC", VA = "0xF844DC", Slot = "27")]
		internal override void WritePrimitive(decimal value)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xF844E0", Offset = "0xF844E0", VA = "0xF844E0", Slot = "28")]
		internal override void WritePrimitive(double value)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xF844E4", Offset = "0xF844E4", VA = "0xF844E4", Slot = "29")]
		internal override void WritePrimitive(long value)
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xF844E8", Offset = "0xF844E8", VA = "0xF844E8", Slot = "30")]
		internal override void WritePrimitive(ulong value)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xF844EC", Offset = "0xF844EC", VA = "0xF844EC", Slot = "31")]
		internal override void WritePrimitive(uint value)
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xF844F0", Offset = "0xF844F0", VA = "0xF844F0", Slot = "32")]
		internal override void WritePrimitive(byte value)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xF844F4", Offset = "0xF844F4", VA = "0xF844F4", Slot = "33")]
		internal override void WritePrimitive(sbyte value)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xF844F8", Offset = "0xF844F8", VA = "0xF844F8", Slot = "34")]
		internal override void WritePrimitive(short value)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xF844FC", Offset = "0xF844FC", VA = "0xF844FC", Slot = "35")]
		internal override void WritePrimitive(ushort value)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xF84500", Offset = "0xF84500", VA = "0xF84500", Slot = "36")]
		internal override void WritePrimitive(char value)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xF84504", Offset = "0xF84504", VA = "0xF84504", Slot = "38")]
		internal override void WritePrimitive(byte[] value)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xF84508", Offset = "0xF84508", VA = "0xF84508", Slot = "37")]
		internal override void WritePrimitive(string value)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xF8450C", Offset = "0xF8450C", VA = "0xF8450C", Slot = "5")]
		internal override void WriteNull()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xF84510", Offset = "0xF84510", VA = "0xF84510")]
		private static bool CharacterRequiresEscaping(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xF84518", Offset = "0xF84518", VA = "0xF84518")]
		private void WriteCommaIfRequired()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xF8451C", Offset = "0xF8451C", VA = "0xF8451C", Slot = "23")]
		internal override void WriteRawProperty(string name, byte[] value)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xF84520", Offset = "0xF84520", VA = "0xF84520", Slot = "6")]
		internal override void StartWriteFile()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xF84524", Offset = "0xF84524", VA = "0xF84524", Slot = "7")]
		internal override void EndWriteFile()
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xF84528", Offset = "0xF84528", VA = "0xF84528", Slot = "10")]
		internal override void StartWriteProperty(string name)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xF84530", Offset = "0xF84530", VA = "0xF84530", Slot = "11")]
		internal override void EndWriteProperty(string name)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xF84534", Offset = "0xF84534", VA = "0xF84534", Slot = "8")]
		internal override void StartWriteObject(string name)
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xF84538", Offset = "0xF84538", VA = "0xF84538", Slot = "9")]
		internal override void EndWriteObject(string name)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xF8453C", Offset = "0xF8453C", VA = "0xF8453C", Slot = "12")]
		internal override void StartWriteCollection()
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xF84540", Offset = "0xF84540", VA = "0xF84540", Slot = "13")]
		internal override void EndWriteCollection()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xF84544", Offset = "0xF84544", VA = "0xF84544", Slot = "14")]
		internal override void StartWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xF84548", Offset = "0xF84548", VA = "0xF84548", Slot = "15")]
		internal override void EndWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xF8454C", Offset = "0xF8454C", VA = "0xF8454C", Slot = "16")]
		internal override void StartWriteDictionary()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xF84550", Offset = "0xF84550", VA = "0xF84550", Slot = "17")]
		internal override void EndWriteDictionary()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xF84554", Offset = "0xF84554", VA = "0xF84554", Slot = "18")]
		internal override void StartWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xF84558", Offset = "0xF84558", VA = "0xF84558", Slot = "19")]
		internal override void EndWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xF8455C", Offset = "0xF8455C", VA = "0xF8455C", Slot = "20")]
		internal override void StartWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xF84560", Offset = "0xF84560", VA = "0xF84560", Slot = "21")]
		internal override void EndWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xF84564", Offset = "0xF84564", VA = "0xF84564", Slot = "22")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x200024E")]
	internal class ES3JSONWriter : ES3Writer
	{
		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal StreamWriter baseWriter;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFirstProperty;

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xF84568", Offset = "0xF84568", VA = "0xF84568")]
		public ES3JSONWriter(Stream stream, ES3Settings settings)
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xF84574", Offset = "0xF84574", VA = "0xF84574")]
		internal ES3JSONWriter(Stream stream, ES3Settings settings, bool writeHeaderAndFooter, bool mergeKeys)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xF84630", Offset = "0xF84630", VA = "0xF84630", Slot = "24")]
		internal override void WritePrimitive(int value)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xF84654", Offset = "0xF84654", VA = "0xF84654", Slot = "25")]
		internal override void WritePrimitive(float value)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xF84704", Offset = "0xF84704", VA = "0xF84704", Slot = "26")]
		internal override void WritePrimitive(bool value)
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xF84780", Offset = "0xF84780", VA = "0xF84780", Slot = "27")]
		internal override void WritePrimitive(decimal value)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xF84840", Offset = "0xF84840", VA = "0xF84840", Slot = "28")]
		internal override void WritePrimitive(double value)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xF848F0", Offset = "0xF848F0", VA = "0xF848F0", Slot = "29")]
		internal override void WritePrimitive(long value)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xF84914", Offset = "0xF84914", VA = "0xF84914", Slot = "30")]
		internal override void WritePrimitive(ulong value)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xF84938", Offset = "0xF84938", VA = "0xF84938", Slot = "31")]
		internal override void WritePrimitive(uint value)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xF8495C", Offset = "0xF8495C", VA = "0xF8495C", Slot = "32")]
		internal override void WritePrimitive(byte value)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xF849E4", Offset = "0xF849E4", VA = "0xF849E4", Slot = "33")]
		internal override void WritePrimitive(sbyte value)
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xF84A6C", Offset = "0xF84A6C", VA = "0xF84A6C", Slot = "34")]
		internal override void WritePrimitive(short value)
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xF84AF4", Offset = "0xF84AF4", VA = "0xF84AF4", Slot = "35")]
		internal override void WritePrimitive(ushort value)
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xF84B7C", Offset = "0xF84B7C", VA = "0xF84B7C", Slot = "36")]
		internal override void WritePrimitive(char value)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xF84BBC", Offset = "0xF84BBC", VA = "0xF84BBC", Slot = "38")]
		internal override void WritePrimitive(byte[] value)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xF84C38", Offset = "0xF84C38", VA = "0xF84C38", Slot = "37")]
		internal override void WritePrimitive(string value)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xF84E6C", Offset = "0xF84E6C", VA = "0xF84E6C", Slot = "5")]
		internal override void WriteNull()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xF84EC8", Offset = "0xF84EC8", VA = "0xF84EC8")]
		private static bool CharacterRequiresEscaping(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xF84EF8", Offset = "0xF84EF8", VA = "0xF84EF8")]
		private void WriteCommaIfRequired()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xF84FC4", Offset = "0xF84FC4", VA = "0xF84FC4", Slot = "23")]
		internal override void WriteRawProperty(string name, byte[] value)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xF8505C", Offset = "0xF8505C", VA = "0xF8505C", Slot = "6")]
		internal override void StartWriteFile()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xF85098", Offset = "0xF85098", VA = "0xF85098", Slot = "7")]
		internal override void EndWriteFile()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xF850E0", Offset = "0xF850E0", VA = "0xF850E0", Slot = "10")]
		internal override void StartWriteProperty(string name)
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xF8519C", Offset = "0xF8519C", VA = "0xF8519C", Slot = "11")]
		internal override void EndWriteProperty(string name)
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xF851A4", Offset = "0xF851A4", VA = "0xF851A4", Slot = "8")]
		internal override void StartWriteObject(string name)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xF851DC", Offset = "0xF851DC", VA = "0xF851DC", Slot = "9")]
		internal override void EndWriteObject(string name)
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xF85218", Offset = "0xF85218", VA = "0xF85218", Slot = "12")]
		internal override void StartWriteCollection()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xF85250", Offset = "0xF85250", VA = "0xF85250", Slot = "13")]
		internal override void EndWriteCollection()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xF85288", Offset = "0xF85288", VA = "0xF85288", Slot = "14")]
		internal override void StartWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xF852B8", Offset = "0xF852B8", VA = "0xF852B8", Slot = "15")]
		internal override void EndWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xF852BC", Offset = "0xF852BC", VA = "0xF852BC", Slot = "16")]
		internal override void StartWriteDictionary()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xF852CC", Offset = "0xF852CC", VA = "0xF852CC", Slot = "17")]
		internal override void EndWriteDictionary()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xF852DC", Offset = "0xF852DC", VA = "0xF852DC", Slot = "18")]
		internal override void StartWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xF8530C", Offset = "0xF8530C", VA = "0xF8530C", Slot = "19")]
		internal override void EndWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xF85330", Offset = "0xF85330", VA = "0xF85330", Slot = "20")]
		internal override void StartWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xF85334", Offset = "0xF85334", VA = "0xF85334", Slot = "21")]
		internal override void EndWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xF85338", Offset = "0xF85338", VA = "0xF85338", Slot = "22")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xF84F38", Offset = "0xF84F38", VA = "0xF84F38")]
		public void WriteNewlineAndTabs()
		{
		}
	}
}
namespace DarkTonic.MasterAudio
{
	[Token(Token = "0x200024F")]
	[AudioScriptOrder(-20)]
	[AddComponentMenu("Dark Tonic/Master Audio/Ambient Sound")]
	public class AmbientSound : MonoBehaviour
	{
		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string AmbientSoundGroup;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string variationName;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float playVolume;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public MasterAudio.AmbientSoundExitMode exitMode;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exitFadeTime;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AmbientSoundReEnterMode reEnterMode;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float reEnterFadeTime;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("This option is useful if your caller ever moves, as it will make the Audio Source follow to the location of the caller every frame.")]
		public bool FollowCaller;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Tooltip("Using this option, the Audio Source will be updated every frame to the closest position on the caller's collider, if any. This will override the Follow Caller option above and happen instead.")]
		public bool UseClosestColliderPosition;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool UseTopCollider;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool IncludeChildColliders;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("This is for diagnostic purposes only. Do not change or assign this field.")]
		public Transform RuntimeFollower;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _trans;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float colliderMaxDistance;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public long lastTimeMaxDistanceCalced;

		[Token(Token = "0x1700012B")]
		public bool IsValidSoundGroup
		{
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0xF854CC", Offset = "0xF854CC", VA = "0xF854CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012C")]
		public Transform Trans
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xF85698", Offset = "0xF85698", VA = "0xF85698")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xF85354", Offset = "0xF85354", VA = "0xF85354")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xF853AC", Offset = "0xF853AC", VA = "0xF853AC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xF85554", Offset = "0xF85554", VA = "0xF85554")]
		private void StopTrackers()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xF8572C", Offset = "0xF8572C", VA = "0xF8572C")]
		public void CalculateRadius()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xF8580C", Offset = "0xF8580C", VA = "0xF8580C")]
		public AudioSource GetNamedOrFirstAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xF859D0", Offset = "0xF859D0", VA = "0xF859D0")]
		public List<AudioSource> GetAllVariationAudioSources()
		{
			return null;
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xF85C20", Offset = "0xF85C20", VA = "0xF85C20")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xF85E38", Offset = "0xF85E38", VA = "0xF85E38")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xF86050", Offset = "0xF86050", VA = "0xF86050")]
		public void StartTrackers()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xF8649C", Offset = "0xF8649C", VA = "0xF8649C")]
		public AmbientSound()
		{
		}
	}
	[Token(Token = "0x2000250")]
	[AddComponentMenu("Dark Tonic/Master Audio/Button Clicker")]
	public class ButtonClicker : MonoBehaviour
	{
		[Token(Token = "0x4000AED")]
		public const float SmallSizeMultiplier = 0.9f;

		[Token(Token = "0x4000AEE")]
		public const float LargeSizeMultiplier = 1.1f;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool resizeOnClick;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool resizeClickAllSiblings;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool resizeOnHover;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool resizeHoverAllSiblings;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mouseDownSound;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string mouseUpSound;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mouseClickSound;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mouseOverSound;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mouseOutSound;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _originalSize;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _smallerSize;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _largerSize;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _trans;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly Dictionary<Transform, Vector3> _siblingClickScaleByTransform;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Dictionary<Transform, Vector3> _siblingHoverScaleByTransform;

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xF86548", Offset = "0xF86548", VA = "0xF86548")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xF8679C", Offset = "0xF8679C", VA = "0xF8679C")]
		private void OnPress(bool isDown)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xF869C4", Offset = "0xF869C4", VA = "0xF869C4")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xF86A54", Offset = "0xF86A54", VA = "0xF86A54")]
		private void OnHover(bool isOver)
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xF86C7C", Offset = "0xF86C7C", VA = "0xF86C7C")]
		public ButtonClicker()
		{
		}
	}
	[Token(Token = "0x2000251")]
	[AudioScriptOrder(-30)]
	[AddComponentMenu("Dark Tonic/Master Audio/Event Sounds")]
	public class EventSounds : MonoBehaviour, ICustomEventReceiver
	{
		[Token(Token = "0x2000252")]
		public enum UnityUIVersion
		{
			[Token(Token = "0x4000B76")]
			Legacy,
			[Token(Token = "0x4000B77")]
			uGUI
		}

		[Token(Token = "0x2000253")]
		public enum EventType
		{
			[Token(Token = "0x4000B79")]
			OnStart,
			[Token(Token = "0x4000B7A")]
			OnVisible,
			[Token(Token = "0x4000B7B")]
			OnInvisible,
			[Token(Token = "0x4000B7C")]
			OnCollision,
			[Token(Token = "0x4000B7D")]
			OnTriggerEnter,
			[Token(Token = "0x4000B7E")]
			OnTriggerExit,
			[Token(Token = "0x4000B7F")]
			OnMouseEnter,
			[Token(Token = "0x4000B80")]
			OnMouseClick,
			[Token(Token = "0x4000B81")]
			OnSpawned,
			[Token(Token = "0x4000B82")]
			OnDespawned,
			[Token(Token = "0x4000B83")]
			OnEnable,
			[Token(Token = "0x4000B84")]
			OnDisable,
			[Token(Token = "0x4000B85")]
			OnCollision2D,
			[Token(Token = "0x4000B86")]
			OnTriggerEnter2D,
			[Token(Token = "0x4000B87")]
			OnTriggerExit2D,
			[Token(Token = "0x4000B88")]
			OnParticleCollision,
			[Token(Token = "0x4000B89")]
			UserDefinedEvent,
			[Token(Token = "0x4000B8A")]
			OnCollisionExit,
			[Token(Token = "0x4000B8B")]
			OnCollisionExit2D,
			[Token(Token = "0x4000B8C")]
			OnMouseUp,
			[Token(Token = "0x4000B8D")]
			OnMouseExit,
			[Token(Token = "0x4000B8E")]
			OnMouseDrag,
			[Token(Token = "0x4000B8F")]
			NGUIOnClick,
			[Token(Token = "0x4000B90")]
			NGUIMouseDown,
			[Token(Token = "0x4000B91")]
			NGUIMouseUp,
			[Token(Token = "0x4000B92")]
			NGUIMouseEnter,
			[Token(Token = "0x4000B93")]
			NGUIMouseExit,
			[Token(Token = "0x4000B94")]
			MechanimStateChanged,
			[Token(Token = "0x4000B95")]
			UnitySliderChanged,
			[Token(Token = "0x4000B96")]
			UnityButtonClicked,
			[Token(Token = "0x4000B97")]
			UnityPointerDown,
			[Token(Token = "0x4000B98")]
			UnityPointerUp,
			[Token(Token = "0x4000B99")]
			UnityPointerEnter,
			[Token(Token = "0x4000B9A")]
			UnityPointerExit,
			[Token(Token = "0x4000B9B")]
			UnityDrag,
			[Token(Token = "0x4000B9C")]
			UnityDrop,
			[Token(Token = "0x4000B9D")]
			UnityScroll,
			[Token(Token = "0x4000B9E")]
			UnityUpdateSelected,
			[Token(Token = "0x4000B9F")]
			UnitySelect,
			[Token(Token = "0x4000BA0")]
			UnityDeselect,
			[Token(Token = "0x4000BA1")]
			UnityMove,
			[Token(Token = "0x4000BA2")]
			UnityInitializePotentialDrag,
			[Token(Token = "0x4000BA3")]
			UnityBeginDrag,
			[Token(Token = "0x4000BA4")]
			UnityEndDrag,
			[Token(Token = "0x4000BA5")]
			UnitySubmit,
			[Token(Token = "0x4000BA6")]
			UnityCancel,
			[Token(Token = "0x4000BA7")]
			UnityToggle,
			[Token(Token = "0x4000BA8")]
			OnTriggerStay,
			[Token(Token = "0x4000BA9")]
			OnTriggerStay2D,
			[Token(Token = "0x4000BAA")]
			CodeTriggeredEvent1,
			[Token(Token = "0x4000BAB")]
			CodeTriggeredEvent2
		}

		[Token(Token = "0x2000254")]
		public enum GlidePitchType
		{
			[Token(Token = "0x4000BAD")]
			None,
			[Token(Token = "0x4000BAE")]
			RaisePitch,
			[Token(Token = "0x4000BAF")]
			LowerPitch
		}

		[Token(Token = "0x2000255")]
		public enum VariationType
		{
			[Token(Token = "0x4000BB1")]
			PlaySpecific,
			[Token(Token = "0x4000BB2")]
			PlayRandom
		}

		[Token(Token = "0x2000256")]
		public enum PreviousSoundStopMode
		{
			[Token(Token = "0x4000BB4")]
			None,
			[Token(Token = "0x4000BB5")]
			Stop,
			[Token(Token = "0x4000BB6")]
			FadeOut
		}

		[Token(Token = "0x2000257")]
		public enum RetriggerLimMode
		{
			[Token(Token = "0x4000BB8")]
			None,
			[Token(Token = "0x4000BB9")]
			FrameBased,
			[Token(Token = "0x4000BBA")]
			TimeBased
		}

		[Token(Token = "0x2000258")]
		[CompilerGenerated]
		private sealed class <CoUpdate>d__127 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EventSounds <>4__this;

			[Token(Token = "0x1700012F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E86")]
				[Address(RVA = "0xE76E04", Offset = "0xE76E04", VA = "0xE76E04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000130")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E88")]
				[Address(RVA = "0xE76E4C", Offset = "0xE76E4C", VA = "0xE76E4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E83")]
			[Address(RVA = "0xE76C48", Offset = "0xE76C48", VA = "0xE76C48")]
			[DebuggerHidden]
			public <CoUpdate>d__127(int <>1__state)
			{
			}

			[Token(Token = "0x6000E84")]
			[Address(RVA = "0xE76C70", Offset = "0xE76C70", VA = "0xE76C70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E85")]
			[Address(RVA = "0xE76C74", Offset = "0xE76C74", VA = "0xE76C74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E87")]
			[Address(RVA = "0xE76E0C", Offset = "0xE76E0C", VA = "0xE76E0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.SoundSpawnLocationMode soundSpawnMode;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disableSounds;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool showPoolManager;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool showNGUI;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioEvent eventToGizmo;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityUIVersion unityUIMode;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool logMissingEvents;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<string> LayerTagFilterEvents;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<MasterAudio.PlaylistCommand> PlaylistCommandsWithAll;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioEventGroup startSound;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioEventGroup visibleSound;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioEventGroup invisibleSound;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioEventGroup collisionSound;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioEventGroup collisionExitSound;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioEventGroup triggerSound;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioEventGroup triggerExitSound;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioEventGroup triggerStaySound;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioEventGroup mouseEnterSound;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioEventGroup mouseExitSound;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AudioEventGroup mouseClickSound;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AudioEventGroup mouseUpSound;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioEventGroup mouseDragSound;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AudioEventGroup spawnedSound;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AudioEventGroup despawnedSound;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AudioEventGroup enableSound;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AudioEventGroup disableSound;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AudioEventGroup collision2dSound;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AudioEventGroup collisionExit2dSound;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AudioEventGroup triggerEnter2dSound;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AudioEventGroup triggerStay2dSound;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioEventGroup triggerExit2dSound;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioEventGroup particleCollisionSound;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioEventGroup nguiOnClickSound;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public AudioEventGroup nguiMouseDownSound;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AudioEventGroup nguiMouseUpSound;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioEventGroup nguiMouseEnterSound;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioEventGroup nguiMouseExitSound;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioEventGroup codeTriggeredEvent1Sound;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioEventGroup codeTriggeredEvent2Sound;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AudioEventGroup unitySliderChangedSound;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AudioEventGroup unityButtonClickedSound;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public AudioEventGroup unityPointerDownSound;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public AudioEventGroup unityDragSound;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public AudioEventGroup unityPointerUpSound;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public AudioEventGroup unityPointerEnterSound;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public AudioEventGroup unityPointerExitSound;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public AudioEventGroup unityDropSound;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public AudioEventGroup unityScrollSound;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public AudioEventGroup unityUpdateSelectedSound;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public AudioEventGroup unitySelectSound;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public AudioEventGroup unityDeselectSound;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public AudioEventGroup unityMoveSound;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public AudioEventGroup unityInitializePotentialDragSound;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public AudioEventGroup unityBeginDragSound;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public AudioEventGroup unityEndDragSound;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public AudioEventGroup unitySubmitSound;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public AudioEventGroup unityCancelSound;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public AudioEventGroup unityToggleSound;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public List<AudioEventGroup> userDefinedSounds;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public List<AudioEventGroup> mechanimStateChangedSounds;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool useStartSound;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool useVisibleSound;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool useInvisibleSound;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CB")]
		public bool useCollisionSound;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public bool useCollisionExitSound;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
		public bool useTriggerEnterSound;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
		public bool useTriggerExitSound;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CF")]
		public bool useTriggerStaySound;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool useMouseEnterSound;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		public bool useMouseExitSound;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D2")]
		public bool useMouseClickSound;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D3")]
		public bool useMouseUpSound;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public bool useMouseDragSound;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D5")]
		public bool useSpawnedSound;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D6")]
		public bool useDespawnedSound;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D7")]
		public bool useEnableSound;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool useDisableSound;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		public bool useCollision2dSound;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DA")]
		public bool useCollisionExit2dSound;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DB")]
		public bool useTriggerEnter2dSound;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool useTriggerStay2dSound;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DD")]
		public bool useTriggerExit2dSound;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DE")]
		public bool useParticleCollisionSound;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DF")]
		public bool useNguiOnClickSound;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public bool useNguiMouseDownSound;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		public bool useNguiMouseUpSound;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E2")]
		public bool useNguiMouseEnterSound;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E3")]
		public bool useNguiMouseExitSound;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public bool useCodeTriggeredEvent1Sound;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		public bool useCodeTriggeredEvent2Sound;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E6")]
		public bool useUnitySliderChangedSound;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E7")]
		public bool useUnityButtonClickedSound;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public bool useUnityPointerDownSound;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E9")]
		public bool useUnityDragSound;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EA")]
		public bool useUnityPointerUpSound;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EB")]
		public bool useUnityPointerEnterSound;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public bool useUnityPointerExitSound;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1ED")]
		public bool useUnityDropSound;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EE")]
		public bool useUnityScrollSound;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EF")]
		public bool useUnityUpdateSelectedSound;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public bool useUnitySelectSound;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
		public bool useUnityDeselectSound;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F2")]
		public bool useUnityMoveSound;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F3")]
		public bool useUnityInitializePotentialDragSound;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public bool useUnityBeginDragSound;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F5")]
		public bool useUnityEndDragSound;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F6")]
		public bool useUnitySubmitSound;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F7")]
		public bool useUnityCancelSound;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public bool useUnityToggleSound;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Slider _slider;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Toggle _toggle;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Button _button;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private bool _isVisible;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x219")]
		private bool _needsCoroutine;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private float? _triggerEnterTime;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private float? _triggerEnter2dTime;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Transform _trans;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private readonly List<AudioEventGroup> _validMechanimStateChangedSounds;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Animator _anim;

		[Token(Token = "0x1700012D")]
		private bool IsSetToUGUI
		{
			[Token(Token = "0x6000E66")]
			[Address(RVA = "0xF86EFC", Offset = "0xF86EFC", VA = "0xF86EFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012E")]
		private bool IsSetToLegacyUI
		{
			[Token(Token = "0x6000E67")]
			[Address(RVA = "0xF88800", Offset = "0xF88800", VA = "0xF88800")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xF86DC8", Offset = "0xF86DC8", VA = "0xF86DC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xF87194", Offset = "0xF87194", VA = "0xF87194", Slot = "10")]
		protected virtual void SpawnedOrAwake()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xF8734C", Offset = "0xF8734C", VA = "0xF8734C")]
		[IteratorStateMachine(typeof(<CoUpdate>d__127))]
		private IEnumerator CoUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xF873C0", Offset = "0xF873C0", VA = "0xF873C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xF87A40", Offset = "0xF87A40", VA = "0xF87A40")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xF87A68", Offset = "0xF87A68", VA = "0xF87A68")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xF87A84", Offset = "0xF87A84", VA = "0xF87A84")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xF87D08", Offset = "0xF87D08", VA = "0xF87D08")]
		private void RestorePersistentSliders()
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xF880B0", Offset = "0xF880B0", VA = "0xF880B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xF88488", Offset = "0xF88488", VA = "0xF88488")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xF88594", Offset = "0xF88594", VA = "0xF88594")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xF885B4", Offset = "0xF885B4", VA = "0xF885B4")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xF885D4", Offset = "0xF885D4", VA = "0xF885D4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xF885F4", Offset = "0xF885F4", VA = "0xF885F4")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xF88614", Offset = "0xF88614", VA = "0xF88614")]
		private void OnDrag(Vector2 delta)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xF88618", Offset = "0xF88618", VA = "0xF88618")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xF88638", Offset = "0xF88638", VA = "0xF88638")]
		private void OnDrop(GameObject go)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xF8863C", Offset = "0xF8863C", VA = "0xF8863C")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xF8865C", Offset = "0xF8865C", VA = "0xF8865C")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xF8867C", Offset = "0xF8867C", VA = "0xF8867C")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xF8869C", Offset = "0xF8869C", VA = "0xF8869C")]
		private void OnSelect(bool isSelected)
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xF886A0", Offset = "0xF886A0", VA = "0xF886A0")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xF886C0", Offset = "0xF886C0", VA = "0xF886C0")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xF886E0", Offset = "0xF886E0", VA = "0xF886E0")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xF88700", Offset = "0xF88700", VA = "0xF88700")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xF88720", Offset = "0xF88720", VA = "0xF88720")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xF88740", Offset = "0xF88740", VA = "0xF88740")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xF88760", Offset = "0xF88760", VA = "0xF88760")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xF88780", Offset = "0xF88780", VA = "0xF88780")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xF887A0", Offset = "0xF887A0", VA = "0xF887A0")]
		private void SliderChanged(float newValue)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xF887D0", Offset = "0xF887D0", VA = "0xF887D0")]
		private void ToggleChanged(bool newValue)
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xF887E8", Offset = "0xF887E8", VA = "0xF887E8")]
		private void ButtonClicked()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0xF88810", Offset = "0xF88810", VA = "0xF88810")]
		private void OnPress(bool isDown)
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xF88848", Offset = "0xF88848", VA = "0xF88848")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0xF88868", Offset = "0xF88868", VA = "0xF88868")]
		private void OnHover(bool isOver)
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0xF888A0", Offset = "0xF888A0", VA = "0xF888A0")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xF888E0", Offset = "0xF888E0", VA = "0xF888E0")]
		private void OnDespawned()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xF88900", Offset = "0xF88900", VA = "0xF88900")]
		public void ActivateCodeTriggeredEvent1()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xF88918", Offset = "0xF88918", VA = "0xF88918")]
		public void ActivateCodeTriggeredEvent2()
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xF88930", Offset = "0xF88930", VA = "0xF88930")]
		public void CalculateRadius(AudioEvent anEvent)
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xF889CC", Offset = "0xF889CC", VA = "0xF889CC")]
		public AudioSource GetNamedOrFirstAudioSource(AudioEvent anEvent)
		{
			return null;
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xF88B94", Offset = "0xF88B94", VA = "0xF88B94")]
		public List<AudioSource> GetAllVariationAudioSources(AudioEvent anEvent)
		{
			return null;
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xF88DE8", Offset = "0xF88DE8", VA = "0xF88DE8")]
		public AudioEventGroup GetMechanimAudioEventGroup(string stateName)
		{
			return null;
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xF87814", Offset = "0xF87814", VA = "0xF87814")]
		public bool PlaySounds(AudioEventGroup eventGrp, EventType eType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xF8B460", Offset = "0xF8B460", VA = "0xF8B460")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xF8B5F8", Offset = "0xF8B5F8", VA = "0xF8B5F8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xF88E98", Offset = "0xF88E98", VA = "0xF88E98")]
		private static bool CheckForRetriggerLimit(AudioEventGroup grp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xF88F24", Offset = "0xF88F24", VA = "0xF88F24")]
		private void PerformSingleAction(AudioEventGroup grp, AudioEvent aEvent, EventType eType)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xF8B790", Offset = "0xF8B790", VA = "0xF8B790")]
		private void LogIfCustomEventMissing(AudioEventGroup eventGroup)
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xF873F0", Offset = "0xF873F0", VA = "0xF873F0", Slot = "4")]
		public void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xF8BA9C", Offset = "0xF8BA9C", VA = "0xF8BA9C", Slot = "5")]
		public void ReceiveEvent(string customEventName, Vector3 originPoint)
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xF8BB70", Offset = "0xF8BB70", VA = "0xF8BB70", Slot = "6")]
		public bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xF88020", Offset = "0xF88020", VA = "0xF88020", Slot = "7")]
		public void RegisterReceiver()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xF88400", Offset = "0xF88400", VA = "0xF88400", Slot = "8")]
		public void UnregisterReceiver()
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xF8BC40", Offset = "0xF8BC40", VA = "0xF8BC40", Slot = "9")]
		public IList<AudioEventGroup> GetAllEvents()
		{
			return null;
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xF86F0C", Offset = "0xF86F0C", VA = "0xF86F0C")]
		private void AddUGUIComponents()
		{
		}

		[Token(Token = "0x6000E80")]
		private void AddUGUIHandler<T>(bool useSound) where T : EventSoundsUGUIHandler
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xF8BC90", Offset = "0xF8BC90", VA = "0xF8BC90")]
		public EventSounds()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class EventSoundsUGUIHandler : MonoBehaviour
	{
		[Token(Token = "0x17000131")]
		public EventSounds eventSounds
		{
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0xE76E54", Offset = "0xE76E54", VA = "0xE76E54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xE76E5C", Offset = "0xE76E5C", VA = "0xE76E5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xE76E64", Offset = "0xE76E64", VA = "0xE76E64")]
		public EventSoundsUGUIHandler()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class EventSoundsPointerEnterHandler : EventSoundsUGUIHandler, IPointerEnterHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xE76E6C", Offset = "0xE76E6C", VA = "0xE76E6C", Slot = "4")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xE76F04", Offset = "0xE76F04", VA = "0xE76F04")]
		public EventSoundsPointerEnterHandler()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class EventSoundsPointerExitHandler : EventSoundsUGUIHandler, IPointerExitHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xE76F0C", Offset = "0xE76F0C", VA = "0xE76F0C", Slot = "4")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xE76FA4", Offset = "0xE76FA4", VA = "0xE76FA4")]
		public EventSoundsPointerExitHandler()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class EventSoundsPointerDownHandler : EventSoundsUGUIHandler, IPointerDownHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xE76FAC", Offset = "0xE76FAC", VA = "0xE76FAC", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xE77044", Offset = "0xE77044", VA = "0xE77044")]
		public EventSoundsPointerDownHandler()
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class EventSoundsPointerUpHandler : EventSoundsUGUIHandler, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xE7704C", Offset = "0xE7704C", VA = "0xE7704C", Slot = "4")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xE770E4", Offset = "0xE770E4", VA = "0xE770E4")]
		public EventSoundsPointerUpHandler()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class EventSoundsDragHandler : EventSoundsUGUIHandler, IDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xE770EC", Offset = "0xE770EC", VA = "0xE770EC", Slot = "4")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xE77184", Offset = "0xE77184", VA = "0xE77184")]
		public EventSoundsDragHandler()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class EventSoundsDropHandler : EventSoundsUGUIHandler, IDropHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xE7718C", Offset = "0xE7718C", VA = "0xE7718C", Slot = "4")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xE77224", Offset = "0xE77224", VA = "0xE77224")]
		public EventSoundsDropHandler()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class EventSoundsScrollHandler : EventSoundsUGUIHandler, IScrollHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xE7722C", Offset = "0xE7722C", VA = "0xE7722C", Slot = "4")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xE772C4", Offset = "0xE772C4", VA = "0xE772C4")]
		public EventSoundsScrollHandler()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class EventSoundsUpdateSelectedHandler : EventSoundsUGUIHandler, IUpdateSelectedHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xE772CC", Offset = "0xE772CC", VA = "0xE772CC", Slot = "4")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xE77364", Offset = "0xE77364", VA = "0xE77364")]
		public EventSoundsUpdateSelectedHandler()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class EventSoundsSelectHandler : EventSoundsUGUIHandler, ISelectHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xE7736C", Offset = "0xE7736C", VA = "0xE7736C", Slot = "4")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xE77404", Offset = "0xE77404", VA = "0xE77404")]
		public EventSoundsSelectHandler()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class EventSoundsDeselectHandler : EventSoundsUGUIHandler, IDeselectHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xE7740C", Offset = "0xE7740C", VA = "0xE7740C", Slot = "4")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xE774A4", Offset = "0xE774A4", VA = "0xE774A4")]
		public EventSoundsDeselectHandler()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class EventSoundsMoveHandler : EventSoundsUGUIHandler, IMoveHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xE774AC", Offset = "0xE774AC", VA = "0xE774AC", Slot = "4")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xE77544", Offset = "0xE77544", VA = "0xE77544")]
		public EventSoundsMoveHandler()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class EventSoundsInitializePotentialDragHandler : EventSoundsUGUIHandler, IInitializePotentialDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xE7754C", Offset = "0xE7754C", VA = "0xE7754C", Slot = "4")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xE775E4", Offset = "0xE775E4", VA = "0xE775E4")]
		public EventSoundsInitializePotentialDragHandler()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class EventSoundsBeginDragHandler : EventSoundsUGUIHandler, IBeginDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xE775EC", Offset = "0xE775EC", VA = "0xE775EC", Slot = "4")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xE77684", Offset = "0xE77684", VA = "0xE77684")]
		public EventSoundsBeginDragHandler()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class EventSoundsEndDragHandler : EventSoundsUGUIHandler, IEndDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xE7768C", Offset = "0xE7768C", VA = "0xE7768C", Slot = "4")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xE77724", Offset = "0xE77724", VA = "0xE77724")]
		public EventSoundsEndDragHandler()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class EventSoundsSubmitHandler : EventSoundsUGUIHandler, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xE7772C", Offset = "0xE7772C", VA = "0xE7772C", Slot = "4")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xE777C4", Offset = "0xE777C4", VA = "0xE777C4")]
		public EventSoundsSubmitHandler()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class EventSoundsCancelHandler : EventSoundsUGUIHandler, ICancelHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xE777CC", Offset = "0xE777CC", VA = "0xE777CC", Slot = "4")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xE77864", Offset = "0xE77864", VA = "0xE77864")]
		public EventSoundsCancelHandler()
		{
		}
	}
	[Token(Token = "0x200026A")]
	[AddComponentMenu("Dark Tonic/Master Audio/Footstep Sounds")]
	public class FootstepSounds : MonoBehaviour
	{
		[Token(Token = "0x200026B")]
		public enum FootstepTriggerMode
		{
			[Token(Token = "0x4000BC9")]
			None,
			[Token(Token = "0x4000BCA")]
			OnCollision,
			[Token(Token = "0x4000BCB")]
			OnTriggerEnter,
			[Token(Token = "0x4000BCC")]
			OnCollision2D,
			[Token(Token = "0x4000BCD")]
			OnTriggerEnter2D
		}

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.SoundSpawnLocationMode soundSpawnMode;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public FootstepTriggerMode footstepEvent;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<FootstepGroup> footstepGroups;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EventSounds.RetriggerLimMode retriggerLimitMode;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int limitPerXFrm;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float limitPerXSec;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int triggeredLastFrame;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float triggeredLastTime;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _trans;

		[Token(Token = "0x17000132")]
		private Transform Trans
		{
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xE77C18", Offset = "0xE77C18", VA = "0xE77C18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xE7786C", Offset = "0xE7786C", VA = "0xE7786C")]
		private bool CheckForRetriggerLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xE77900", Offset = "0xE77900", VA = "0xE77900")]
		private void PlaySoundsIfMatch(GameObject go)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xE77CAC", Offset = "0xE77CAC", VA = "0xE77CAC")]
		public FootstepSounds()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class MechanimStateCustomEvents : StateMachineBehaviour
	{
		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Select for event to re-fire each time animation loops without exiting state")]
		[Header("Retrigger Events Each Time Anim Loops w/o Exiting State")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Header("Enter Custom Event")]
		[Tooltip("Fire A Custom Event When State Is Entered")]
		public bool fireEnterEvent;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[MasterCustomEvent]
		public string enterCustomEvent;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Exit Custom Event")]
		[Tooltip("Fire a Custom Event when state is Exited")]
		public bool fireExitEvent;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[MasterCustomEvent]
		public string exitCustomEvent;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Fire a Custom Event timed to the animation state's normalized time.  Normalized time is simply the length in time of the animation.  Time is represented as a float from 0f - 1f.  0f is the beginning, .5f is the middle, 1f is the end...etc.etc.  Select a Start time from 0 - 1.")]
		[Header("Fire Custom EventTimed to Animation")]
		public bool fireAnimTimeEvent;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		public float whenToFireEvent;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[MasterCustomEvent]
		public string timedCustomEvent;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Fire Multiple Custom Events Timed to Anim")]
		[Tooltip("Fire a Custom Event with timed to the animation.  This allows you to time your Custom Events to the actions in you animation. Select the number of Custom Events to be fired, up to 4. Then set the time you want each Custom Event to fire with each subsequent time greater than the previous time.")]
		public bool fireMultiAnimTimeEvent;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 4f)]
		public int numOfMultiEventsToFire;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		public float whenToFireMultiEvent1;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		[Range(0f, 1f)]
		public float whenToFireMultiEvent2;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		[Range(0f, 1f)]
		public float whenToFireMultiEvent3;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		public float whenToFireMultiEvent4;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[MasterCustomEvent]
		public string MultiTimedEvent;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _playMultiEvent1;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool _playMultiEvent2;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool _playMultiEvent3;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		private bool _playMultiEvent4;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fireTimedEvent;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _actorTrans;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _lastRepetition;

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xE77D4C", Offset = "0xE77D4C", VA = "0xE77D4C", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xE77EC4", Offset = "0xE77EC4", VA = "0xE77EC4", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xE7819C", Offset = "0xE7819C", VA = "0xE7819C", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xE77E28", Offset = "0xE77E28", VA = "0xE77E28")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xE78268", Offset = "0xE78268", VA = "0xE78268")]
		public MechanimStateCustomEvents()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class MechanimStateSounds : StateMachineBehaviour
	{
		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Select For Sounds To Follow Object")]
		public bool SoundFollowsObject;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Header("Retrigger Sounds Each Time Anim Loops w/o Exiting State")]
		[Tooltip("Select for sounds to retrigger each time animation loops without exiting state")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("Play a Sound Group when state is Entered")]
		[Header("Enter Sound Group")]
		public bool playEnterSound;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool stopEnterSoundOnExit;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SoundGroup]
		public string enterSoundGroup;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Random Variation plays if blank, otherwise name a Variation from the above Sound Group to play.")]
		public string enterVariationName;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool wasEnterSoundPlayed;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Tooltip("Play a Sound Group when state is Exited")]
		[Header("Exit Sound Group")]
		public bool playExitSound;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SoundGroup]
		public string exitSoundGroup;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Random Variation plays if blank, otherwise name a Variation from the above Sound Group to play.")]
		public string exitVariationName;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Play a Sound Group (Normal or Looped Chain Variation Mode) timed to the animation state's normalized time.  Normalized time is simply the length in time of the animation.  Time is represented as a float from 0f - 1f.  0f is the beginning, .5f is the middle, 1f is the end...etc.etc.  Select a Start time from 0 - 1.  Select a stop time greater than the start time or leave stop time equals to zero and select Stop Anim Time Sound On Exit.  This can be used for Looped Chain Sound Groups since you have to define a stop time.")]
		[Header("Play Sound Group Timed to Animation")]
		public bool playAnimTimeSound;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool stopAnimTimeSoundOnExit;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[Tooltip("If selected, When To Stop Sound (below) will be used. Otherwise the sound will not be stopped unless you have Stop Anim Time Sound On Exit selected above.")]
		public bool useStopTime;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		[Range(0f, 1f)]
		public float whenToStartSound;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		[Range(0f, 1f)]
		public float whenToStopSound;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SoundGroup]
		public string TimedSoundGroup;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Random Variation plays if blank, otherwise name a Variation from the above Sound Group to play.")]
		public string timedVariationName;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool playSoundStart;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool playSoundStop;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[Header("Play Multiple Sounds Timed to Anim")]
		[Tooltip("Play a Sound Group with each variation timed to the animation.  This allows you to time your sounds to the actions in you animation.  Example: A sword swing combo where you want swoosh soundsor character grunts timed to the acceleration phase of the sword swing.  Select the number of sounds to be played, up to 4.  Then set the time you want each sound to start with each subsequent time greater than the previous time.")]
		public bool playMultiAnimTimeSounds;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool StopMultiAnimTimeSoundsOnExit;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 4f)]
		public int numOfMultiSoundsToPlay;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		[Range(0f, 1f)]
		public float whenToStartMultiSound1;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 1f)]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		public float whenToStartMultiSound2;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		[Range(0f, 1f)]
		public float whenToStartMultiSound3;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("This value will be compared to the normalizedTime of the animation you are playing. NormalizedTime is represented as a float so 0 is the beginning, 1 is the end and .5f would be the middle etc.")]
		[Range(0f, 1f)]
		public float whenToStartMultiSound4;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SoundGroup]
		public string MultiSoundsTimedGroup;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Random Variation plays if blank, otherwise name a Variation from the above Sound Group to play.")]
		public string multiTimedVariationName;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool playMultiSound1;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool playMultiSound2;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool playMultiSound3;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		private bool playMultiSound4;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform _actorTrans;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int _lastRepetition;

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xE78304", Offset = "0xE78304", VA = "0xE78304", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xE784F4", Offset = "0xE784F4", VA = "0xE784F4", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xE78A1C", Offset = "0xE78A1C", VA = "0xE78A1C", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xE7840C", Offset = "0xE7840C", VA = "0xE7840C")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xE784A8", Offset = "0xE784A8", VA = "0xE784A8")]
		private static string GetVariationName(string varName)
		{
			return null;
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xE78BB8", Offset = "0xE78BB8", VA = "0xE78BB8")]
		public MechanimStateSounds()
		{
		}
	}
	[Token(Token = "0x200026E")]
	[SerializeField]
	public class PlaySoundResult
	{
		[Token(Token = "0x17000133")]
		public bool SoundPlayed
		{
			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xE78C80", Offset = "0xE78C80", VA = "0xE78C80")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0xE78C88", Offset = "0xE78C88", VA = "0xE78C88")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public bool SoundScheduled
		{
			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0xE78C94", Offset = "0xE78C94", VA = "0xE78C94")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0xE78C9C", Offset = "0xE78C9C", VA = "0xE78C9C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public SoundGroupVariation ActingVariation
		{
			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0xE78CA8", Offset = "0xE78CA8", VA = "0xE78CA8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0xE78CB0", Offset = "0xE78CB0", VA = "0xE78CB0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xE78C58", Offset = "0xE78C58", VA = "0xE78C58")]
		public PlaySoundResult()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026F")]
	public class AmbientSoundToTriggerInfo
	{
		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int frameToTrigger;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AmbientSound ambient;

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xE78CB8", Offset = "0xE78CB8", VA = "0xE78CB8")]
		public AmbientSoundToTriggerInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000270")]
	public class AudioEvent
	{
		[Token(Token = "0x2000271")]
		public enum TargetVolumeMode
		{
			[Token(Token = "0x4000C34")]
			UseSliderValue,
			[Token(Token = "0x4000C35")]
			UseSpecificValue
		}

		[Serializable]
		[Token(Token = "0x2000272")]
		public class MA_SnapshotInfo
		{
			[Token(Token = "0x4000C36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioMixerSnapshot snapshot;

			[Token(Token = "0x4000C37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0xE78F9C", Offset = "0xE78F9C", VA = "0xE78F9C")]
			public MA_SnapshotInfo(AudioMixerSnapshot snap, float wt)
			{
			}
		}

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string actionName;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isExpanded;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string soundType;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool allPlaylistControllersForGroupCmd;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool allSoundTypesForGroupCmd;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool allSoundTypesForBusCmd;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volume;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useFixedPitch;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pitch;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EventSounds.GlidePitchType glidePitchType;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float targetGlidePitch;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pitchGlideTime;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float delaySound;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MasterAudio.EventSoundFunctionType currentSoundFunctionType;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public MasterAudio.PlaylistCommand currentPlaylistCommand;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MasterAudio.SoundGroupCommand currentSoundGroupCommand;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public MasterAudio.BusCommand currentBusCommand;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MasterAudio.CustomEventCommand currentCustomEventCommand;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public MasterAudio.GlobalCommand currentGlobalCommand;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MasterAudio.UnityMixerCommand currentMixerCommand;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioMixerSnapshot snapshotToTransitionTo;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float snapshotTransitionTime;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<MA_SnapshotInfo> snapshotsToBlend;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MasterAudio.PersistentSettingsCommand currentPersistentSettingsCommand;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string busName;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string playlistName;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string playlistControllerName;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool startPlaylist;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float fadeVolume;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float fadeTime;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float minAge;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool stopAfterFade;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool restoreVolumeAfterFade;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TargetVolumeMode targetVolMode;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string clipName;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string variationName;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float colliderMaxDistance;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool showSphereGizmo;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string theCustomEventName;

		[Token(Token = "0x17000136")]
		public bool IsFadeCommand
		{
			[Token(Token = "0x6000EC3")]
			[Address(RVA = "0xE78CC0", Offset = "0xE78CC0", VA = "0xE78CC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xE78D28", Offset = "0xE78D28", VA = "0xE78D28")]
		public AudioEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000273")]
	public class AudioEventGroup
	{
		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool allPlayersShouldHear;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool useLayerFilter;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool useTagFilter;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> matchingLayers;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> matchingTags;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool customSoundActive;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isCustomEvent;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string customEventName;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool mechanimEventActive;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isMechanimStateCheckEvent;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mechanimStateName;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool mechEventPlayedForState;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<AudioEvent> SoundEvents;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public EventSounds.PreviousSoundStopMode mouseDragStopMode;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float mouseDragFadeOutTime;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EventSounds.RetriggerLimMode retriggerLimitMode;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int limitPerXFrm;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float limitPerXSec;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int triggeredLastFrame;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float triggeredLastTime;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float triggerStayForTime;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool doesTriggerStayRepeat;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float sliderValue;

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xE78FE0", Offset = "0xE78FE0", VA = "0xE78FE0")]
		public AudioEventGroup()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class AudioScriptOrder : Attribute
	{
		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Order;

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xE7926C", Offset = "0xE7926C", VA = "0xE7926C")]
		public AudioScriptOrder(int order)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000275")]
	public class BusFadeInfo
	{
		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NameOfBus;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GroupBus ActingBus;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartVolume;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TargetVolume;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float StartTime;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompletionTime;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsActive;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool WillStopGroupAfterFade;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool WillResetVolumeAfterFade;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action completionAction;

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xE79294", Offset = "0xE79294", VA = "0xE79294")]
		public BusFadeInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000276")]
	public class BusPitchGlideInfo
	{
		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NameOfBus;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float CompletionTime;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool IsActive;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SoundGroupVariation> GlidingVariations;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action completionAction;

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xE792A4", Offset = "0xE792A4", VA = "0xE792A4")]
		public BusPitchGlideInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000277")]
	public class CustomEvent
	{
		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string EventName;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ProspectiveName;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsEditing;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool eventExpanded;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MasterAudio.CustomEventReceiveMode eventReceiveMode;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float distanceThreshold;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public MasterAudio.EventReceiveFilter eventRcvFilterMode;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int filterModeQty;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool isTemporary;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int frameLastFired;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string categoryName;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<int> _actorInstanceIds;

		[Token(Token = "0x17000137")]
		public bool HasLiveActors
		{
			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0xE794D4", Offset = "0xE794D4", VA = "0xE794D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xE792B4", Offset = "0xE792B4", VA = "0xE792B4")]
		public CustomEvent(string eventName)
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xE793A8", Offset = "0xE793A8", VA = "0xE793A8")]
		public void AddActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xE7947C", Offset = "0xE7947C", VA = "0xE7947C")]
		public void RemoveActorInstanceId(int instanceId)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000278")]
	public class CustomEventCategory
	{
		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string CatName;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsExpanded;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool IsEditing;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool IsTemporary;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ProspectiveName;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<int> _actorInstanceIds;

		[Token(Token = "0x17000138")]
		public bool HasLiveActors
		{
			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0xE79650", Offset = "0xE79650", VA = "0xE79650")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xE79524", Offset = "0xE79524", VA = "0xE79524")]
		public void AddActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xE795F8", Offset = "0xE795F8", VA = "0xE795F8")]
		public void RemoveActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xE796A0", Offset = "0xE796A0", VA = "0xE796A0")]
		public CustomEventCategory()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000279")]
	public class CustomEventToFireInfo
	{
		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string eventName;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform eventOrigin;

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xE7976C", Offset = "0xE7976C", VA = "0xE7976C")]
		public CustomEventToFireInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027A")]
	public class DuckGroupInfo
	{
		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string soundType;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float riseVolStart;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float unduckTime;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duckedVolumeCut;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isTemporary;

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xE79774", Offset = "0xE79774", VA = "0xE79774")]
		public DuckGroupInfo()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public class DynamicGroupVariation : MonoBehaviour
	{
		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public int probabilityToPlay;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 10f)]
		public int importance;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isUninterruptible;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool useLocalization;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool useRandomPitch;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public SoundGroupVariation.RandomPitchMode randomPitchMode;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float randomPitchMin;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float randomPitchMax;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useRandomVolume;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SoundGroupVariation.RandomVolumeMode randomVolumeMode;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float randomVolumeMin;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float randomVolumeMax;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int weight;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string clipAlias;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string resourceFileName;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool isExpanded;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool isChecked;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool useFades;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float fadeInTime;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float fadeOutTime;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool useCustomLooping;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int minCustomLoops;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int maxCustomLoops;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool useIntroSilence;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float introSilenceMin;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float introSilenceMax;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool useRandomStartTime;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float randomStartMinPercent;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float randomStartMaxPercent;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float randomEndPercent;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioDistortionFilter _distFilter;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioEchoFilter _echoFilter;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioHighPassFilter _hpFilter;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioLowPassFilter _lpFilter;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioReverbFilter _reverbFilter;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioChorusFilter _chorusFilter;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private DynamicSoundGroup _parentGroupScript;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Transform _trans;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioSource _aud;

		[Token(Token = "0x17000139")]
		public AudioDistortionFilter DistortionFilter
		{
			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0xE797E0", Offset = "0xE797E0", VA = "0xE797E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		public AudioReverbFilter ReverbFilter
		{
			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0xE79888", Offset = "0xE79888", VA = "0xE79888")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public AudioChorusFilter ChorusFilter
		{
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0xE79930", Offset = "0xE79930", VA = "0xE79930")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public AudioEchoFilter EchoFilter
		{
			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0xE799D8", Offset = "0xE799D8", VA = "0xE799D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013D")]
		public AudioLowPassFilter LowPassFilter
		{
			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0xE79A80", Offset = "0xE79A80", VA = "0xE79A80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		public AudioHighPassFilter HighPassFilter
		{
			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0xE79B28", Offset = "0xE79B28", VA = "0xE79B28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013F")]
		public DynamicSoundGroup ParentGroup
		{
			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0xE79BD0", Offset = "0xE79BD0", VA = "0xE79BD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000140")]
		public Transform Trans
		{
			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0xE79D3C", Offset = "0xE79D3C", VA = "0xE79D3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		public bool HasActiveFXFilter
		{
			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0xE79DD0", Offset = "0xE79DD0", VA = "0xE79DD0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000142")]
		public AudioSource VarAudio
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0xE79FE8", Offset = "0xE79FE8", VA = "0xE79FE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xE7A090", Offset = "0xE7A090", VA = "0xE7A090")]
		public DynamicGroupVariation()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class DynamicSoundGroup : MonoBehaviour
	{
		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject variationTemplate;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool alwaysHighestPriority;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float groupMasterVolume;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int retriggerPercentage;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public MasterAudioGroup.VariationSequence curVariationSequence;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useNoRepeatRefill;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool useInactivePeriodPoolRefill;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float inactivePeriodSeconds;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MasterAudioGroup.VariationMode curVariationMode;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float chainLoopDelayMin;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float chainLoopDelayMax;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MasterAudioGroup.ChainedLoopLoopMode chainLoopMode;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int chainLoopNumLoops;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useDialogFadeOut;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float dialogFadeOutTime;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string comments;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool logSound;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool soundPlayedEventActive;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string soundPlayedCustomEvent;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int busIndex;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool ignoreListenerPause;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 10f)]
		public int importance;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool isUninterruptible;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float spatialBlend;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public MasterAudio.DefaultGroupPlayType groupPlayType;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string busName;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isExistingBus;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool isCopiedFromDGSC;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public MasterAudioGroup.LimitMode limitMode;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int limitPerXFrames;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float minimumTimeBetween;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool limitPolyphony;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int voiceLimitCount;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MasterAudioGroup.TargetDespawnedBehavior targetDespawnedBehavior;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float despawnFadeTime;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool isUsingOcclusion;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool willOcclusionOverrideRaycastOffset;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool willOcclusionOverrideFrequencies;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool copySettingsExpanded;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool expandLinkedGroups;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public List<string> childSoundGroups;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<string> endLinkedGroups;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public MasterAudio.LinkedGroupSelectionType linkedStartGroupSelectionType;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public MasterAudio.LinkedGroupSelectionType linkedStopGroupSelectionType;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public List<DynamicGroupVariation> groupVariations;

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xE7A0CC", Offset = "0xE7A0CC", VA = "0xE7A0CC")]
		public DynamicSoundGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027D")]
	public class FootstepGroup
	{
		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool useLayerFilter;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool useTagFilter;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> matchingLayers;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> matchingTags;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string soundType;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string variationName;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float volume;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useFixedPitch;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float pitch;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float delaySound;

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xE7A290", Offset = "0xE7A290", VA = "0xE7A290")]
		public FootstepGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027E")]
	public class GroupBus
	{
		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string busName;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float volume;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isSoloed;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool isMuted;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int voiceLimit;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isExisting;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isTemporary;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isUsingOcclusion;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MasterAudio.BusVoiceLimitExceededMode busVoiceLimitExceededMode;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color busColor;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioMixerGroup mixerChannel;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool forceTo2D;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<int> _activeAudioSourcesIds;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<int> _actorInstanceIds;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _originalVolume;

		[Token(Token = "0x17000143")]
		public int ActiveVoices
		{
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0xE7A724", Offset = "0xE7A724", VA = "0xE7A724")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000144")]
		public bool HasLiveActors
		{
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0xE7A76C", Offset = "0xE7A76C", VA = "0xE7A76C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000145")]
		public bool BusVoiceLimitReached
		{
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0xE7A7BC", Offset = "0xE7A7BC", VA = "0xE7A7BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000146")]
		public float OriginalVolume
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0xE7A820", Offset = "0xE7A820", VA = "0xE7A820")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0xE7A828", Offset = "0xE7A828", VA = "0xE7A828")]
			set
			{
			}
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xE7A4CC", Offset = "0xE7A4CC", VA = "0xE7A4CC")]
		public void AddActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xE7A5A0", Offset = "0xE7A5A0", VA = "0xE7A5A0")]
		public void RemoveActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xE7A5F8", Offset = "0xE7A5F8", VA = "0xE7A5F8")]
		public void AddActiveAudioSourceId(int id)
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xE7A6CC", Offset = "0xE7A6CC", VA = "0xE7A6CC")]
		public void RemoveActiveAudioSourceId(int id)
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xE7A830", Offset = "0xE7A830", VA = "0xE7A830")]
		public GroupBus()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027F")]
	public class GroupFadeInfo
	{
		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MasterAudioGroup ActingGroup;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NameOfGroup;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartVolume;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TargetVolume;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float StartTime;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompletionTime;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsActive;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool WillStopGroupAfterFade;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool WillResetVolumeAfterFade;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action completionAction;

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xE7A918", Offset = "0xE7A918", VA = "0xE7A918")]
		public GroupFadeInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000280")]
	public class GroupPitchGlideInfo
	{
		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MasterAudioGroup ActingGroup;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NameOfGroup;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CompletionTime;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool IsActive;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<SoundGroupVariation> GlidingVariations;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action completionAction;

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xE7A928", Offset = "0xE7A928", VA = "0xE7A928")]
		public GroupPitchGlideInfo()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public interface ICustomEventReceiver
	{
		[Token(Token = "0x6000EED")]
		void CheckForIllegalCustomEvents();

		[Token(Token = "0x6000EEE")]
		void ReceiveEvent(string customEventName, Vector3 originPoint);

		[Token(Token = "0x6000EEF")]
		bool SubscribesToEvent(string customEventName);

		[Token(Token = "0x6000EF0")]
		void RegisterReceiver();

		[Token(Token = "0x6000EF1")]
		void UnregisterReceiver();

		[Token(Token = "0x6000EF2")]
		IList<AudioEventGroup> GetAllEvents();
	}
	[Token(Token = "0x2000282")]
	public class MasterAudioGroup : MonoBehaviour
	{
		[Token(Token = "0x2000283")]
		public enum TargetDespawnedBehavior
		{
			[Token(Token = "0x4000D3E")]
			None,
			[Token(Token = "0x4000D3F")]
			Stop,
			[Token(Token = "0x4000D40")]
			FadeOut
		}

		[Token(Token = "0x2000284")]
		public enum VariationSequence
		{
			[Token(Token = "0x4000D42")]
			Randomized,
			[Token(Token = "0x4000D43")]
			TopToBottom
		}

		[Token(Token = "0x2000285")]
		public enum VariationMode
		{
			[Token(Token = "0x4000D45")]
			Normal,
			[Token(Token = "0x4000D46")]
			LoopedChain,
			[Token(Token = "0x4000D47")]
			Dialog
		}

		[Token(Token = "0x2000286")]
		public enum ChainedLoopLoopMode
		{
			[Token(Token = "0x4000D49")]
			Endless,
			[Token(Token = "0x4000D4A")]
			NumberOfLoops
		}

		[Token(Token = "0x2000287")]
		public enum LimitMode
		{
			[Token(Token = "0x4000D4C")]
			None,
			[Token(Token = "0x4000D4D")]
			FrameBased,
			[Token(Token = "0x4000D4E")]
			TimeBased
		}

		[Token(Token = "0x4000CFE")]
		public const float UseCurveSpatialBlend = -99f;

		[Token(Token = "0x4000CFF")]
		public const string NoBus = "[NO BUS]";

		[Token(Token = "0x4000D00")]
		public const int MinNoRepeatVariations = 3;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int busIndex;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spatialBlend;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MasterAudio.DefaultGroupPlayType groupPlayType;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isSelected;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isExpanded;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float groupMasterVolume;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int retriggerPercentage;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public VariationMode curVariationMode;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool alwaysHighestPriority;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool ignoreListenerPause;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 10f)]
		public int importance;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isUninterruptible;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float chainLoopDelayMin;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float chainLoopDelayMax;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ChainedLoopLoopMode chainLoopMode;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int chainLoopNumLoops;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool useDialogFadeOut;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float dialogFadeOutTime;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public VariationSequence curVariationSequence;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useNoRepeatRefill;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool useInactivePeriodPoolRefill;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float inactivePeriodSeconds;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<SoundGroupVariation> groupVariations;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string comments;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool logSound;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool copySettingsExpanded;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		public bool expandLinkedGroups;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<string> childSoundGroups;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<string> endLinkedGroups;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public MasterAudio.LinkedGroupSelectionType linkedStartGroupSelectionType;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public MasterAudio.LinkedGroupSelectionType linkedStopGroupSelectionType;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public LimitMode limitMode;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int limitPerXFrames;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float minimumTimeBetween;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool useClipAgePriority;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		public bool limitPolyphony;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int voiceLimitCount;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TargetDespawnedBehavior targetDespawnedBehavior;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float despawnFadeTime;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool isUsingOcclusion;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool willOcclusionOverrideRaycastOffset;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool willOcclusionOverrideFrequencies;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool isSoloed;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		public bool isMuted;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		public bool soundPlayedEventActive;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string soundPlayedCustomEvent;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool willCleanUpDelegatesAfterStop;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public int frames;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<int> _activeAudioSourcesIds;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private string _objectName;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform _trans;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float _originalVolume;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly List<int> _actorInstanceIds;

		[Token(Token = "0x17000147")]
		public float SpatialBlendForGroup
		{
			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0xE7B0A4", Offset = "0xE7B0A4", VA = "0xE7B0A4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000148")]
		public int ActiveVoices
		{
			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0xE7B180", Offset = "0xE7B180", VA = "0xE7B180")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000149")]
		public int TotalVoices
		{
			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0xE7B1CC", Offset = "0xE7B1CC", VA = "0xE7B1CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700014A")]
		public bool WillCleanUpDelegatesAfterStop
		{
			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0xE7B1EC", Offset = "0xE7B1EC", VA = "0xE7B1EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public GroupBus BusForGroup
		{
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0xE7AE30", Offset = "0xE7AE30", VA = "0xE7AE30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		public float OriginalVolume
		{
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0xE7B1F8", Offset = "0xE7B1F8", VA = "0xE7B1F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0xE7B200", Offset = "0xE7B200", VA = "0xE7B200")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public bool LoggingEnabledForGroup
		{
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0xE7B208", Offset = "0xE7B208", VA = "0xE7B208")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014E")]
		public int ChainLoopCount
		{
			[Token(Token = "0x6000F05")]
			[Address(RVA = "0xE7B2CC", Offset = "0xE7B2CC", VA = "0xE7B2CC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F06")]
			[Address(RVA = "0xE7B2D4", Offset = "0xE7B2D4", VA = "0xE7B2D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public string GameObjectName
		{
			[Token(Token = "0x6000F07")]
			[Address(RVA = "0xE7B2DC", Offset = "0xE7B2DC", VA = "0xE7B2DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		public MasterAudio.GroupPlayType GroupPlayType
		{
			[Token(Token = "0x6000F08")]
			[Address(RVA = "0xE7B328", Offset = "0xE7B328", VA = "0xE7B328")]
			get
			{
				return default(MasterAudio.GroupPlayType);
			}
		}

		[Token(Token = "0x17000151")]
		public bool HasLiveActors
		{
			[Token(Token = "0x6000F09")]
			[Address(RVA = "0xE7B454", Offset = "0xE7B454", VA = "0xE7B454")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000152")]
		public bool UsesNoRepeat
		{
			[Token(Token = "0x6000F0A")]
			[Address(RVA = "0xE7B4A4", Offset = "0xE7B4A4", VA = "0xE7B4A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000153")]
		private Transform Trans
		{
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0xE7ACB0", Offset = "0xE7ACB0", VA = "0xE7ACB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		private List<int> ActiveAudioSourceIds
		{
			[Token(Token = "0x6000F0C")]
			[Address(RVA = "0xE7AC00", Offset = "0xE7AC00", VA = "0xE7AC00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000001")]
		public event Action LastVariationFinishedPlay
		{
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0xE7A9B8", Offset = "0xE7A9B8", VA = "0xE7A9B8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0xE7AA54", Offset = "0xE7AA54", VA = "0xE7AA54")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xE7AAF0", Offset = "0xE7AAF0", VA = "0xE7AAF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xE7AD3C", Offset = "0xE7AD3C", VA = "0xE7AD3C")]
		public void AddActiveAudioSourceId(int varInstanceId)
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xE7AEFC", Offset = "0xE7AEFC", VA = "0xE7AEFC")]
		public void RemoveActiveAudioSourceId(int varInstanceId)
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xE7AF78", Offset = "0xE7AF78", VA = "0xE7AF78")]
		public void AddActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xE7B04C", Offset = "0xE7B04C", VA = "0xE7B04C")]
		public void RemoveActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xE7B274", Offset = "0xE7B274", VA = "0xE7B274")]
		public void FireLastVariationFinishedPlay()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xE7B290", Offset = "0xE7B290", VA = "0xE7B290")]
		public void SubscribeToLastVariationFinishedPlay(Action finishedCallback)
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xE7B2C0", Offset = "0xE7B2C0", VA = "0xE7B2C0")]
		public void UnsubscribeFromLastVariationFinishedPlay()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xE7B510", Offset = "0xE7B510", VA = "0xE7B510")]
		public MasterAudioGroup()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public class MasterAudioSettings : SingletonScriptable<MasterAudioSettings>
	{
		[Token(Token = "0x4000D4F")]
		public const string AssetName = "MasterAudioSettings.asset";

		[Token(Token = "0x4000D50")]
		public const string AssetFolder = "Assets/Resources/MasterAudio";

		[Token(Token = "0x4000D51")]
		public const string ResourcePath = "MasterAudio/MasterAudioSettings";

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UseDbScale;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool RemoveUnplayedDueToProbabilityVariation;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool UseCentsPitch;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool HideLogoNav;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool EditMAFolder;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string InstallationFolderPath;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MasterAudio.MixerWidthMode MixerWidthSetting;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool BusesShownInNarrow;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool ShowWelcomeWindowOnStart;

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xE7B76C", Offset = "0xE7B76C", VA = "0xE7B76C")]
		static MasterAudioSettings()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xE7B990", Offset = "0xE7B990", VA = "0xE7B990")]
		public MasterAudioSettings()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class MasterCustomEventAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xE7BA3C", Offset = "0xE7BA3C", VA = "0xE7BA3C")]
		public MasterCustomEventAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028A")]
	public class MusicSetting
	{
		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string alias;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip clip;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string songName;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string resourceFileName;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float volume;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float pitch;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isExpanded;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool isLoop;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool isChecked;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<SongMetadataStringValue> metadataStringValues;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<SongMetadataBoolValue> metadataBoolValues;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SongMetadataIntValue> metadataIntValues;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SongMetadataFloatValue> metadataFloatValues;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool metadataExpanded;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public MasterAudio.CustomSongStartTimeMode songStartTimeMode;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float customStartTime;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float customStartTimeMax;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int lastKnownTimePoint;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool wasLastKnownTimePointSet;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int songIndex;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool songStartedEventExpanded;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string songStartedCustomEvent;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool songChangedEventExpanded;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string songChangedCustomEvent;

		[Token(Token = "0x17000155")]
		public bool HasMetadataProperties
		{
			[Token(Token = "0x6000F12")]
			[Address(RVA = "0xE7BC78", Offset = "0xE7BC78", VA = "0xE7BC78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000156")]
		public int MetadataPropertyCount
		{
			[Token(Token = "0x6000F13")]
			[Address(RVA = "0xE7BC90", Offset = "0xE7BC90", VA = "0xE7BC90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000157")]
		public float SongStartTime
		{
			[Token(Token = "0x6000F14")]
			[Address(RVA = "0xE7BD2C", Offset = "0xE7BD2C", VA = "0xE7BD2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xE7BA44", Offset = "0xE7BA44", VA = "0xE7BA44")]
		public MusicSetting()
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xE7BD58", Offset = "0xE7BD58", VA = "0xE7BD58")]
		public static MusicSetting Clone(MusicSetting mus, MasterAudio.Playlist aList)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200028F")]
	public class OcclusionFreqChangeInfo
	{
		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SoundGroupVariation ActingVariation;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float StartFrequency;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float TargetFrequency;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartTime;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float CompletionTime;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsActive;

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xE7C724", Offset = "0xE7C724", VA = "0xE7C724")]
		public OcclusionFreqChangeInfo()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public class PlaylistAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xE7C734", Offset = "0xE7C734", VA = "0xE7C734")]
		public PlaylistAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000291")]
	public class SongMetadataBoolValue
	{
		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Value;

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xE7C5FC", Offset = "0xE7C5FC", VA = "0xE7C5FC")]
		public SongMetadataBoolValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000292")]
	public class SongMetadataFloatValue
	{
		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Value;

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xE7C5B4", Offset = "0xE7C5B4", VA = "0xE7C5B4")]
		public SongMetadataFloatValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000293")]
	public class SongMetadataIntValue
	{
		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Value;

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xE7C644", Offset = "0xE7C644", VA = "0xE7C644")]
		public SongMetadataIntValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000294")]
	public class SongMetadataProperty
	{
		[Token(Token = "0x2000295")]
		public enum MetadataPropertyType
		{
			[Token(Token = "0x4000D8C")]
			Boolean,
			[Token(Token = "0x4000D8D")]
			String,
			[Token(Token = "0x4000D8E")]
			Integer,
			[Token(Token = "0x4000D8F")]
			Float
		}

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MetadataPropertyType PropertyType;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string PropertyName;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ProspectiveName;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsEditing;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool PropertyExpanded;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool AllSongsMustContain;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool CanSongHaveMultiple;

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xE7C73C", Offset = "0xE7C73C", VA = "0xE7C73C")]
		public SongMetadataProperty(string propertyName, MetadataPropertyType propertyType, bool allSongsMustContain, bool canSongHaveMultiple)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000296")]
	public class SongMetadataStringValue
	{
		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Value;

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xE7C56C", Offset = "0xE7C56C", VA = "0xE7C56C")]
		public SongMetadataStringValue(SongMetadataProperty prop)
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class SoundGroupAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xE7C7A8", Offset = "0xE7C7A8", VA = "0xE7C7A8")]
		public SoundGroupAttribute()
		{
		}
	}
	[Token(Token = "0x2000298")]
	[AudioScriptOrder(-40)]
	[RequireComponent(typeof(SoundGroupVariationUpdater))]
	public class SoundGroupVariation : MonoBehaviour
	{
		[Token(Token = "0x2000299")]
		public delegate void SoundFinishedEventHandler();

		[Token(Token = "0x200029A")]
		public delegate void SoundLoopedEventHandler(int loopNumberStarted);

		[Token(Token = "0x200029B")]
		public class PlaySoundParams
		{
			[Token(Token = "0x4000DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string SoundType;

			[Token(Token = "0x4000DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float VolumePercentage;

			[Token(Token = "0x4000DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float? Pitch;

			[Token(Token = "0x4000DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double? TimeToSchedulePlay;

			[Token(Token = "0x4000DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform SourceTrans;

			[Token(Token = "0x4000DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool AttachToSource;

			[Token(Token = "0x4000DE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float DelaySoundTime;

			[Token(Token = "0x4000DE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool IsChainLoop;

			[Token(Token = "0x4000DE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
			public bool IsSingleSubscribedPlay;

			[Token(Token = "0x4000DE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float GroupCalcVolume;

			[Token(Token = "0x4000DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool IsPlaying;

			[Token(Token = "0x6000F80")]
			[Address(RVA = "0xE81820", Offset = "0xE81820", VA = "0xE81820")]
			public PlaySoundParams(string soundType, float volPercent, float groupCalcVolume, float? pitch, Transform sourceTrans, bool attach, float delaySoundTime, double? timeToSchedulePlay, bool isChainLoop, bool isSingleSubscribedPlay)
			{
			}
		}

		[Token(Token = "0x200029C")]
		public enum PitchMode
		{
			[Token(Token = "0x4000DE6")]
			None,
			[Token(Token = "0x4000DE7")]
			Gliding
		}

		[Token(Token = "0x200029D")]
		public enum FadeMode
		{
			[Token(Token = "0x4000DE9")]
			None,
			[Token(Token = "0x4000DEA")]
			FadeInOut,
			[Token(Token = "0x4000DEB")]
			FadeOutEarly,
			[Token(Token = "0x4000DEC")]
			GradualFade
		}

		[Token(Token = "0x200029E")]
		public enum RandomPitchMode
		{
			[Token(Token = "0x4000DEE")]
			AddToClipPitch,
			[Token(Token = "0x4000DEF")]
			IgnoreClipPitch
		}

		[Token(Token = "0x200029F")]
		public enum RandomVolumeMode
		{
			[Token(Token = "0x4000DF1")]
			AddToClipVolume,
			[Token(Token = "0x4000DF2")]
			IgnoreClipVolume
		}

		[Token(Token = "0x20002A0")]
		public enum DetectEndMode
		{
			[Token(Token = "0x4000DF4")]
			None,
			[Token(Token = "0x4000DF5")]
			DetectEnd
		}

		[Token(Token = "0x20002A1")]
		[CompilerGenerated]
		private sealed class <WaitForLoadToUnloadClipAndDeactivate>d__112 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundGroupVariation <>4__this;

			[Token(Token = "0x17000179")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F84")]
				[Address(RVA = "0xE81C2C", Offset = "0xE81C2C", VA = "0xE81C2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F86")]
				[Address(RVA = "0xE81C74", Offset = "0xE81C74", VA = "0xE81C74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F81")]
			[Address(RVA = "0xE80288", Offset = "0xE80288", VA = "0xE80288")]
			[DebuggerHidden]
			public <WaitForLoadToUnloadClipAndDeactivate>d__112(int <>1__state)
			{
			}

			[Token(Token = "0x6000F82")]
			[Address(RVA = "0xE81B60", Offset = "0xE81B60", VA = "0xE81B60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F83")]
			[Address(RVA = "0xE81B64", Offset = "0xE81B64", VA = "0xE81B64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F85")]
			[Address(RVA = "0xE81C34", Offset = "0xE81C34", VA = "0xE81C34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int weight;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public int probabilityToPlay;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 10f)]
		public int importance;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isUninterruptible;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool useLocalization;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool useRandomPitch;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RandomPitchMode randomPitchMode;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float randomPitchMin;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float randomPitchMax;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool useRandomVolume;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RandomVolumeMode randomVolumeMode;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float randomVolumeMin;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float randomVolumeMax;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string clipAlias;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string resourceFileName;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float original_pitch;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float original_volume;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool isExpanded;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool isChecked;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool useFades;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float fadeInTime;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float fadeOutTime;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool useCustomLooping;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int minCustomLoops;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int maxCustomLoops;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool useRandomStartTime;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float randomStartMinPercent;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float randomStartMaxPercent;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float randomEndPercent;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool useIntroSilence;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float introSilenceMin;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float introSilenceMax;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float fadeMaxVolume;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FadeMode curFadeMode;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public PitchMode curPitchMode;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public DetectEndMode curDetectEndMode;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int frames;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioSource _audioSource;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly PlaySoundParams _playSndParam;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioDistortionFilter _distFilter;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private AudioEchoFilter _echoFilter;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioHighPassFilter _hpFilter;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioLowPassFilter _lpFilter;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioReverbFilter _reverbFilter;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private AudioChorusFilter _chorusFilter;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private string _objectName;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _maxVol;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private int _instanceId;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool? _audioLoops;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int _maxLoops;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private SoundGroupVariationUpdater _varUpdater;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int _previousSoundFinishedFrame;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private string _soundGroupName;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private MasterAudio.VariationLoadStatus _loadStatus;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private bool _isStopRequested;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x125")]
		private bool _isPaused;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x126")]
		private bool _isWarmingPlay;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform _trans;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject _go;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Transform _objectToFollow;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Transform _objectToTriggerFrom;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private MasterAudioGroup _parentGroupScript;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool _attachToSource;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private string _resFileName;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool _hasStartedEndLinkedGroups;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Coroutine _loadResourceFileCoroutine;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Coroutine _loadAddressableCoroutine;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private bool _isUnloadAddressableCoroutineRunning;

		[Token(Token = "0x17000158")]
		public AudioDistortionFilter DistortionFilter
		{
			[Token(Token = "0x6000F4D")]
			[Address(RVA = "0xE80C44", Offset = "0xE80C44", VA = "0xE80C44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000159")]
		public AudioReverbFilter ReverbFilter
		{
			[Token(Token = "0x6000F4E")]
			[Address(RVA = "0xE80CEC", Offset = "0xE80CEC", VA = "0xE80CEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		public AudioChorusFilter ChorusFilter
		{
			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0xE80D94", Offset = "0xE80D94", VA = "0xE80D94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015B")]
		public AudioEchoFilter EchoFilter
		{
			[Token(Token = "0x6000F50")]
			[Address(RVA = "0xE80E3C", Offset = "0xE80E3C", VA = "0xE80E3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		public AudioLowPassFilter LowPassFilter
		{
			[Token(Token = "0x6000F51")]
			[Address(RVA = "0xE80EE4", Offset = "0xE80EE4", VA = "0xE80EE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F52")]
			[Address(RVA = "0xE80EEC", Offset = "0xE80EEC", VA = "0xE80EEC")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public AudioHighPassFilter HighPassFilter
		{
			[Token(Token = "0x6000F53")]
			[Address(RVA = "0xE80EF4", Offset = "0xE80EF4", VA = "0xE80EF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015E")]
		public Transform ObjectToFollow
		{
			[Token(Token = "0x6000F54")]
			[Address(RVA = "0xE80F9C", Offset = "0xE80F9C", VA = "0xE80F9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F55")]
			[Address(RVA = "0xE80FA4", Offset = "0xE80FA4", VA = "0xE80FA4")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public Transform ObjectToTriggerFrom
		{
			[Token(Token = "0x6000F56")]
			[Address(RVA = "0xE810F0", Offset = "0xE810F0", VA = "0xE810F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F57")]
			[Address(RVA = "0xE810F8", Offset = "0xE810F8", VA = "0xE810F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public bool HasActiveFXFilter
		{
			[Token(Token = "0x6000F59")]
			[Address(RVA = "0xE8111C", Offset = "0xE8111C", VA = "0xE8111C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000161")]
		public MasterAudioGroup ParentGroup
		{
			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0xE7CF38", Offset = "0xE7CF38", VA = "0xE7CF38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000162")]
		public float OriginalPitch
		{
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0xE7E0B8", Offset = "0xE7E0B8", VA = "0xE7E0B8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000163")]
		public float OriginalVolume
		{
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0xE81324", Offset = "0xE81324", VA = "0xE81324")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000164")]
		public string SoundGroupName
		{
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0xE81358", Offset = "0xE81358", VA = "0xE81358")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		public bool IsAvailableToPlay
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0xE8139C", Offset = "0xE8139C", VA = "0xE8139C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000166")]
		public float LastTimePlayed
		{
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0xE81510", Offset = "0xE81510", VA = "0xE81510")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0xE81518", Offset = "0xE81518", VA = "0xE81518")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public bool ClipIsLoaded
		{
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0xE81520", Offset = "0xE81520", VA = "0xE81520")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000168")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0xE7F1E0", Offset = "0xE7F1E0", VA = "0xE7F1E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000169")]
		public MasterAudio.VariationLoadStatus LoadStatus
		{
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0xE81530", Offset = "0xE81530", VA = "0xE81530")]
			get
			{
				return default(MasterAudio.VariationLoadStatus);
			}
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0xE7DF5C", Offset = "0xE7DF5C", VA = "0xE7DF5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public int InstanceId
		{
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0xE7E85C", Offset = "0xE7E85C", VA = "0xE7E85C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700016B")]
		public bool IsStopRequested
		{
			[Token(Token = "0x6000F66")]
			[Address(RVA = "0xE81538", Offset = "0xE81538", VA = "0xE81538")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016C")]
		public Transform Trans
		{
			[Token(Token = "0x6000F67")]
			[Address(RVA = "0xE800A0", Offset = "0xE800A0", VA = "0xE800A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		public GameObject GameObj
		{
			[Token(Token = "0x6000F68")]
			[Address(RVA = "0xE7CCA0", Offset = "0xE7CCA0", VA = "0xE7CCA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		public AudioSource VarAudio
		{
			[Token(Token = "0x6000F69")]
			[Address(RVA = "0xE7CBF8", Offset = "0xE7CBF8", VA = "0xE7CBF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		public bool AudioLoops
		{
			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0xE7E7AC", Offset = "0xE7E7AC", VA = "0xE7E7AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000170")]
		public string ResFileName
		{
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0xE7E3F0", Offset = "0xE7E3F0", VA = "0xE7E3F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000171")]
		public SoundGroupVariationUpdater VariationUpdater
		{
			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0xE7D430", Offset = "0xE7D430", VA = "0xE7D430")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000172")]
		public PlaySoundParams PlaySoundParm
		{
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0xE815D0", Offset = "0xE815D0", VA = "0xE815D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000173")]
		public float SetGroupVolume
		{
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0xE815D8", Offset = "0xE815D8", VA = "0xE815D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0xE815F4", Offset = "0xE815F4", VA = "0xE815F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public int MaxLoops
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0xE81610", Offset = "0xE81610", VA = "0xE81610")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000175")]
		private bool Is2D
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0xE81618", Offset = "0xE81618", VA = "0xE81618")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000176")]
		public bool UsesOcclusion
		{
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0xE7D5CC", Offset = "0xE7D5CC", VA = "0xE7D5CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000177")]
		public bool IsPaused
		{
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0xE81640", Offset = "0xE81640", VA = "0xE81640")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000178")]
		public string GameObjectName
		{
			[Token(Token = "0x6000F75")]
			[Address(RVA = "0xE81664", Offset = "0xE81664", VA = "0xE81664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000002")]
		public event SoundFinishedEventHandler SoundFinished
		{
			[Token(Token = "0x6000F26")]
			[Address(RVA = "0xE7C7B0", Offset = "0xE7C7B0", VA = "0xE7C7B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F27")]
			[Address(RVA = "0xE7C850", Offset = "0xE7C850", VA = "0xE7C850")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public event SoundLoopedEventHandler SoundLooped
		{
			[Token(Token = "0x6000F28")]
			[Address(RVA = "0xE7C8F0", Offset = "0xE7C8F0", VA = "0xE7C8F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F29")]
			[Address(RVA = "0xE7C990", Offset = "0xE7C990", VA = "0xE7C990")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xE7CA30", Offset = "0xE7CA30", VA = "0xE7CA30")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xE7CD2C", Offset = "0xE7CD2C", VA = "0xE7CD2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xE7D0EC", Offset = "0xE7D0EC", VA = "0xE7D0EC")]
		public void SetMixerGroup()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xE7D13C", Offset = "0xE7D13C", VA = "0xE7D13C")]
		public void SetSpatialBlend()
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xE7D2D4", Offset = "0xE7D2D4", VA = "0xE7D2D4")]
		private void SetOcclusion()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xE7D22C", Offset = "0xE7D22C", VA = "0xE7D22C")]
		private void SetPriority()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xE7D774", Offset = "0xE7D774", VA = "0xE7D774")]
		public void DisableUpdater()
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xE7D80C", Offset = "0xE7D80C", VA = "0xE7D80C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xE7D8B8", Offset = "0xE7D8B8", VA = "0xE7D8B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xE7D810", Offset = "0xE7D810", VA = "0xE7D810")]
		private void StopSoundEarly()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xE7DC10", Offset = "0xE7DC10", VA = "0xE7DC10")]
		public void Play(float? pitch, float maxVolume, string gameObjectName, float volPercent, float targetVol, float? targetPitch, Transform sourceTrans, bool attach, float delayTime, double? timeToSchedulePlay, bool isChaining, bool isSingleSubscribedPlay)
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xE7DFB8", Offset = "0xE7DFB8", VA = "0xE7DFB8")]
		public void SetPlaySoundParams(string gameObjectName, float volPercent, float targetVol, float? targetPitch, Transform sourceTrans, bool attach, float delayTime, double? timeToSchedulePlay, bool isChaining, bool isSingleSubscribedPlay)
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xE7DF70", Offset = "0xE7DF70", VA = "0xE7DF70")]
		private void MaybeCleanupFinishedDelegate()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xE7E56C", Offset = "0xE7E56C", VA = "0xE7E56C")]
		private void ResourceFailedToLoad()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xE7E0EC", Offset = "0xE7E0EC", VA = "0xE7E0EC")]
		private void FinishSetupToPlay()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xE7E954", Offset = "0xE7E954", VA = "0xE7E954")]
		public void JumpToTime(float timeToJumpTo)
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xE7E99C", Offset = "0xE7E99C", VA = "0xE7E99C")]
		public void GlideByPitch(float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xE7ED1C", Offset = "0xE7ED1C", VA = "0xE7ED1C")]
		public void AdjustVolume(float volumePercentage)
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xE7EE90", Offset = "0xE7EE90", VA = "0xE7EE90")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xE7F078", Offset = "0xE7F078", VA = "0xE7F078")]
		public void PlayVideo()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xE7F0C0", Offset = "0xE7F0C0", VA = "0xE7F0C0")]
		public void StopVideo()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xE7F108", Offset = "0xE7F108", VA = "0xE7F108")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xE7F304", Offset = "0xE7F304", VA = "0xE7F304")]
		public void DoNextChain(float volumePercentage, float? pitch, Transform transActor, bool attach)
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xE7F6C8", Offset = "0xE7F6C8", VA = "0xE7F6C8")]
		public void PlayEndLinkedGroups([Optional] double? timeToPlayClip)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xE7E58C", Offset = "0xE7E58C", VA = "0xE7E58C")]
		private void EnableUpdater(bool waitForSoundFinish = true)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xE7FBE8", Offset = "0xE7FBE8", VA = "0xE7FBE8")]
		private void MaybeUnloadClip()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xE7F91C", Offset = "0xE7F91C", VA = "0xE7F91C")]
		private void PlayEndLinkedGroup(string sType, [Optional] double? timeToPlayClip)
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xE7D8BC", Offset = "0xE7D8BC", VA = "0xE7D8BC")]
		public void Stop(bool stopEndDetection = false, bool skipLinked = false)
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xE801E0", Offset = "0xE801E0", VA = "0xE801E0")]
		private void StopEndCleanup()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xE80214", Offset = "0xE80214", VA = "0xE80214")]
		[IteratorStateMachine(typeof(<WaitForLoadToUnloadClipAndDeactivate>d__112))]
		private IEnumerator WaitForLoadToUnloadClipAndDeactivate()
		{
			return null;
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xE802B0", Offset = "0xE802B0", VA = "0xE802B0")]
		public void FadeToVolume(float newVolume, float fadeTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xE806BC", Offset = "0xE806BC", VA = "0xE806BC")]
		public void FadeOutNowAndStop([Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xE80980", Offset = "0xE80980", VA = "0xE80980")]
		public void FadeOutNowAndStop(float fadeTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xE80AAC", Offset = "0xE80AAC", VA = "0xE80AAC")]
		public bool WasTriggeredFromTransform(Transform trans)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xE80B54", Offset = "0xE80B54", VA = "0xE80B54")]
		public bool WasTriggeredFromAnyOfTransformMap(HashSet<Transform> transMap)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xE80FC8", Offset = "0xE80FC8", VA = "0xE80FC8")]
		public void UpdateTransformTracker(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xE81648", Offset = "0xE81648", VA = "0xE81648")]
		public void SoundLoopStarted(int numberOfLoops)
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xE7E540", Offset = "0xE7E540", VA = "0xE7E540")]
		public void ClearSubscribers()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xE816B0", Offset = "0xE816B0", VA = "0xE816B0")]
		public SoundGroupVariation()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	[AudioScriptOrder(-15)]
	public class SoundGroupVariationUpdater : MonoBehaviour
	{
		[Token(Token = "0x20002A3")]
		private enum WaitForSoundFinishMode
		{
			[Token(Token = "0x4000E30")]
			None,
			[Token(Token = "0x4000E31")]
			Play,
			[Token(Token = "0x4000E32")]
			WaitForEnd,
			[Token(Token = "0x4000E33")]
			StopOrRepeat
		}

		[Token(Token = "0x4000DF9")]
		private const float TimeEarlyToScheduleNextClip = 0.1f;

		[Token(Token = "0x4000DFA")]
		private const float FakeNegativeFloatValue = -10f;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _objectToFollow;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject _objectToFollowGo;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _isFollowing;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SoundGroupVariation _variation;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _priorityLastUpdated;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool _useClipAgePriority;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WaitForSoundFinishMode _waitMode;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioSource _varAudio;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MasterAudioGroup _parentGrp;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _trans;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _frameNum;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool _inited;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _fadeOutStartTime;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fadeInOutWillFadeOut;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool _hasFadeInOutSetMaxVolume;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _fadeInOutInFactor;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _fadeInOutOutFactor;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Action _fadeOutEarlyCompletionCallback;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _fadeOutEarlyTotalFrames;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float _fadeOutEarlyFrameVolChange;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _fadeOutEarlyFrameNumber;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _fadeOutEarlyOrigVol;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _fadeToTargetFrameVolChange;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int _fadeToTargetFrameNumber;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _fadeToTargetOrigVol;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Action _fadeToTargetCompletionCallback;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _fadeToTargetTotalFrames;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _fadeToTargetVolume;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _fadeOutStarted;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _lastFrameClipTime;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _isPlayingBackward;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int _pitchGlideToTargetTotalFrames;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float _pitchGlideToTargetFramePitchChange;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int _pitchGlideToTargetFrameNumber;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float _glideToTargetPitch;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float _glideToTargetOrigPitch;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Action _glideToPitchCompletionCallback;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool _hasStartedNextInChain;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		private bool _isWaitingForQueuedOcclusionRay;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private int _framesPlayed;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float? _clipStartPosition;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float? _clipEndPosition;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private double? _clipSchedEndTime;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool _hasScheduledNextClip;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		private bool _hasScheduledEndLinkedGroups;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int _lastFrameClipPosition;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int _timesLooped;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool _isPaused;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private double _pauseTime;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _maCachedFromFrame;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MasterAudio _maThisFrame;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Transform _listenerThisFrame;

		[Token(Token = "0x1700017B")]
		public float ClipStartPosition
		{
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0xE8317C", Offset = "0xE8317C", VA = "0xE8317C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700017C")]
		public float ClipEndPosition
		{
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0xE81DC8", Offset = "0xE81DC8", VA = "0xE81DC8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700017D")]
		public int FramesPlayed
		{
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0xE83E00", Offset = "0xE83E00", VA = "0xE83E00")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017E")]
		public MasterAudio MAThisFrame
		{
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xE83E08", Offset = "0xE83E08", VA = "0xE83E08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017F")]
		public float MaxOcclusionFreq
		{
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0xE83E60", Offset = "0xE83E60", VA = "0xE83E60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000180")]
		public float MinOcclusionFreq
		{
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xE83F08", Offset = "0xE83F08", VA = "0xE83F08")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000181")]
		private Transform Trans
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xE82428", Offset = "0xE82428", VA = "0xE82428")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		private AudioSource VarAudio
		{
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xE81D24", Offset = "0xE81D24", VA = "0xE81D24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000183")]
		private MasterAudioGroup ParentGroup
		{
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0xE824C4", Offset = "0xE824C4", VA = "0xE824C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000184")]
		private SoundGroupVariation GrpVariation
		{
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xE81C7C", Offset = "0xE81C7C", VA = "0xE81C7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000185")]
		private float RayCastOriginOffset
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0xE83024", Offset = "0xE83024", VA = "0xE83024")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000186")]
		private bool IsOcclusionMeasuringPaused
		{
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0xE82A6C", Offset = "0xE82A6C", VA = "0xE82A6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000187")]
		private bool HasEndLinkedGroups
		{
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0xE83D9C", Offset = "0xE83D9C", VA = "0xE83D9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xE7EC5C", Offset = "0xE7EC5C", VA = "0xE7EC5C")]
		public void GlidePitch(float targetPitch, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xE80534", Offset = "0xE80534", VA = "0xE80534")]
		public void FadeOverTimeToVolume(float targetVolume, float fadeTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xE807E0", Offset = "0xE807E0", VA = "0xE807E0")]
		public void FadeOutEarly(float fadeTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xE7FB38", Offset = "0xE7FB38", VA = "0xE7FB38")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xE7E68C", Offset = "0xE7E68C", VA = "0xE7E68C")]
		public void FadeInOut()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xE7E884", Offset = "0xE7E884", VA = "0xE7E884")]
		public void FollowObject(bool follow, Transform objToFollow, bool clipAgePriority)
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xE7FB74", Offset = "0xE7FB74", VA = "0xE7FB74")]
		public void WaitForSoundFinish()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xE80188", Offset = "0xE80188", VA = "0xE80188")]
		public void StopPitchGliding()
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xE80164", Offset = "0xE80164", VA = "0xE80164")]
		public void StopFading()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xE7F6A0", Offset = "0xE7F6A0", VA = "0xE7F6A0")]
		public void StopWaitingForFinish()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xE8012C", Offset = "0xE8012C", VA = "0xE8012C")]
		public void StopFollowing()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xE823BC", Offset = "0xE823BC", VA = "0xE823BC")]
		private void DisableIfFinished()
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xE81F1C", Offset = "0xE81F1C", VA = "0xE81F1C")]
		private void UpdateAudioLocationAndPriority(bool rePrioritize)
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xE8288C", Offset = "0xE8288C", VA = "0xE8288C")]
		private void ResetToNonOcclusionSetting()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xE82928", Offset = "0xE82928", VA = "0xE82928")]
		private void UpdateOcclusion()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xE82AEC", Offset = "0xE82AEC", VA = "0xE82AEC")]
		private void DoneWithOcclusion()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xE82B58", Offset = "0xE82B58", VA = "0xE82B58")]
		public bool RayCastForOcclusion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xE82084", Offset = "0xE82084", VA = "0xE82084")]
		private void PlaySoundAndWait()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xE83308", Offset = "0xE83308", VA = "0xE83308")]
		private void DuckIfNotSilent()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xE83458", Offset = "0xE83458", VA = "0xE83458")]
		private void StopOrChain()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xE7F00C", Offset = "0xE7F00C", VA = "0xE7F00C")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xE7F1FC", Offset = "0xE7F1FC", VA = "0xE7F1FC")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xE7F3B0", Offset = "0xE7F3B0", VA = "0xE7F3B0")]
		public void MaybeChain()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xE834F0", Offset = "0xE834F0", VA = "0xE834F0")]
		private void UpdatePitch()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xE835A0", Offset = "0xE835A0", VA = "0xE835A0")]
		private void PerformFading()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xE83874", Offset = "0xE83874", VA = "0xE83874")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xE838F0", Offset = "0xE838F0", VA = "0xE838F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xE7D4D0", Offset = "0xE7D4D0", VA = "0xE7D4D0")]
		public void UpdateCachedObjects()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xE839B0", Offset = "0xE839B0", VA = "0xE839B0")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xE83FB0", Offset = "0xE83FB0", VA = "0xE83FB0")]
		public SoundGroupVariationUpdater()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public static class AudioLoaderOptimizer
	{
		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, List<GameObject>> PlayingGameObjectsByClipName;

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xE84028", Offset = "0xE84028", VA = "0xE84028")]
		public static void AddNonPreloadedPlayingClip(AudioClip clip, GameObject maHolderGameObject)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xE84308", Offset = "0xE84308", VA = "0xE84308")]
		public static void RemoveNonPreloadedPlayingClip(AudioClip clip, GameObject maHolderGameObject)
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xE844D4", Offset = "0xE844D4", VA = "0xE844D4")]
		public static bool IsAnyOfNonPreloadedClipPlaying(AudioClip clip)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002A5")]
	public static class AudioPrioritizer
	{
		[Token(Token = "0x4000E35")]
		private const int MaxPriority = 0;

		[Token(Token = "0x4000E36")]
		private const int HighestPriority = 16;

		[Token(Token = "0x4000E37")]
		private const int LowestPriority = 128;

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xE7D744", Offset = "0xE7D744", VA = "0xE7D744")]
		public static void Set2DSoundPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xE7D75C", Offset = "0xE7D75C", VA = "0xE7D75C")]
		public static void SetSoundGroupInitialPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xE846D0", Offset = "0xE846D0", VA = "0xE846D0")]
		public static void SetPreviewPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xE82560", Offset = "0xE82560", VA = "0xE82560")]
		public static void Set3DPriority(SoundGroupVariation variation, bool useClipAgePriority)
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public static class AudioResourceOptimizer
	{
		[Token(Token = "0x20002A7")]
		[CompilerGenerated]
		private sealed class <PopulateResourceSongToPlaylistControllerAsync>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string songResourceName;

			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string playlistName;

			[Token(Token = "0x4000E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PlaylistController controller;

			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MusicSetting songSetting;

			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public PlaylistController.AudioPlayType playType;

			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ResourceRequest <asyncRes>5__2;

			[Token(Token = "0x17000188")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FCB")]
				[Address(RVA = "0xE85D68", Offset = "0xE85D68", VA = "0xE85D68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000189")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FCD")]
				[Address(RVA = "0xE85DB0", Offset = "0xE85DB0", VA = "0xE85DB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xE8517C", Offset = "0xE8517C", VA = "0xE8517C")]
			[DebuggerHidden]
			public <PopulateResourceSongToPlaylistControllerAsync>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0xE85788", Offset = "0xE85788", VA = "0xE85788", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0xE8578C", Offset = "0xE8578C", VA = "0xE8578C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xE85D70", Offset = "0xE85D70", VA = "0xE85D70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002A8")]
		[CompilerGenerated]
		private sealed class <PopulateSourcesWithResourceClipAsync>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string clipName;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action successAction;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action failureAction;

			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public SoundGroupVariation variation;

			[Token(Token = "0x4000E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ResourceRequest <asyncRes>5__2;

			[Token(Token = "0x1700018A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FD1")]
				[Address(RVA = "0xE863E0", Offset = "0xE863E0", VA = "0xE863E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FD3")]
				[Address(RVA = "0xE86428", Offset = "0xE86428", VA = "0xE86428", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0xE851A4", Offset = "0xE851A4", VA = "0xE851A4")]
			[DebuggerHidden]
			public <PopulateSourcesWithResourceClipAsync>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0xE85DB8", Offset = "0xE85DB8", VA = "0xE85DB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0xE85DBC", Offset = "0xE85DBC", VA = "0xE85DBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FD2")]
			[Address(RVA = "0xE863E8", Offset = "0xE863E8", VA = "0xE863E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, List<AudioSource>> AudioResourceTargetsByName;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Dictionary<string, AudioClip> AudioClipsByName;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Dictionary<string, List<AudioClip>> PlaylistClipsByPlaylistName;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string _supportedLanguageFolder;

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xE846E8", Offset = "0xE846E8", VA = "0xE846E8")]
		public static void ClearAudioClips()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xE8478C", Offset = "0xE8478C", VA = "0xE8478C")]
		public static string GetLocalizedDynamicSoundGroupFileName(SystemLanguage localLanguage, bool useLocalization, string resourceFileName)
		{
			return null;
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xE81540", Offset = "0xE81540", VA = "0xE81540")]
		public static string GetLocalizedFileName(bool useLocalization, string resourceFileName)
		{
			return null;
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xE84B34", Offset = "0xE84B34", VA = "0xE84B34")]
		public static void AddTargetForClip(string clipName, AudioSource source)
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xE848DC", Offset = "0xE848DC", VA = "0xE848DC")]
		private static string SupportedLanguageFolder()
		{
			return null;
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xE84E58", Offset = "0xE84E58", VA = "0xE84E58")]
		public static void ClearSupportLanguageFolder()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xE84ED4", Offset = "0xE84ED4", VA = "0xE84ED4")]
		private static void FinishRecordingPlaylistClip(string controllerName, AudioClip resAudioClip)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xE850B4", Offset = "0xE850B4", VA = "0xE850B4")]
		[IteratorStateMachine(typeof(<PopulateResourceSongToPlaylistControllerAsync>d__11))]
		public static IEnumerator PopulateResourceSongToPlaylistControllerAsync(MusicSetting songSetting, string songResourceName, string playlistName, PlaylistController controller, PlaylistController.AudioPlayType playType)
		{
			return null;
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xE7E480", Offset = "0xE7E480", VA = "0xE7E480")]
		[IteratorStateMachine(typeof(<PopulateSourcesWithResourceClipAsync>d__12))]
		public static IEnumerator PopulateSourcesWithResourceClipAsync(string clipName, SoundGroupVariation variation, Action successAction, Action failureAction)
		{
			return null;
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xE851CC", Offset = "0xE851CC", VA = "0xE851CC")]
		public static void UnloadPlaylistSongIfUnused(string controllerName, AudioClip clipToRemove)
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xE85354", Offset = "0xE85354", VA = "0xE85354")]
		public static void DeleteAudioSourceFromList(string clipName, AudioSource source)
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xE7FD00", Offset = "0xE7FD00", VA = "0xE7FD00")]
		public static void UnloadClipIfUnused(string clipName)
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[AudioScriptOrder(-50)]
	public class MasterAudio : MonoBehaviour
	{
		[Token(Token = "0x20002AA")]
		public enum JukeBoxDisplayMode
		{
			[Token(Token = "0x4000F1B")]
			DisplayAll,
			[Token(Token = "0x4000F1C")]
			DisplayActive
		}

		[Token(Token = "0x20002AB")]
		public enum BusVoiceLimitExceededMode
		{
			[Token(Token = "0x4000F1E")]
			DoNotPlayNewSound,
			[Token(Token = "0x4000F1F")]
			StopOldestSound,
			[Token(Token = "0x4000F20")]
			StopFarthestSound,
			[Token(Token = "0x4000F21")]
			StopLeastImportantSound
		}

		[Token(Token = "0x20002AC")]
		public enum AmbientSoundExitMode
		{
			[Token(Token = "0x4000F23")]
			StopSound,
			[Token(Token = "0x4000F24")]
			FadeSound
		}

		[Token(Token = "0x20002AD")]
		public enum AmbientSoundReEnterMode
		{
			[Token(Token = "0x4000F26")]
			StopExistingSound,
			[Token(Token = "0x4000F27")]
			FadeInSameSound
		}

		[Token(Token = "0x20002AE")]
		public enum VariationFollowerType
		{
			[Token(Token = "0x4000F29")]
			LateUpdate,
			[Token(Token = "0x4000F2A")]
			FixedUpdate
		}

		[Token(Token = "0x20002AF")]
		public enum LinkedGroupSelectionType
		{
			[Token(Token = "0x4000F2C")]
			All,
			[Token(Token = "0x4000F2D")]
			OneAtRandom
		}

		[Token(Token = "0x20002B0")]
		public enum OcclusionSelectionType
		{
			[Token(Token = "0x4000F2F")]
			AllGroups,
			[Token(Token = "0x4000F30")]
			TurnOnPerBusOrGroup
		}

		[Token(Token = "0x20002B1")]
		public enum RaycastMode
		{
			[Token(Token = "0x4000F32")]
			Physics3D,
			[Token(Token = "0x4000F33")]
			Physics2D
		}

		[Token(Token = "0x20002B2")]
		public enum AllMusicSpatialBlendType
		{
			[Token(Token = "0x4000F35")]
			ForceAllTo2D,
			[Token(Token = "0x4000F36")]
			ForceAllTo3D,
			[Token(Token = "0x4000F37")]
			ForceAllToCustom,
			[Token(Token = "0x4000F38")]
			AllowDifferentPerController
		}

		[Token(Token = "0x20002B3")]
		public enum AllMixerSpatialBlendType
		{
			[Token(Token = "0x4000F3A")]
			ForceAllTo2D,
			[Token(Token = "0x4000F3B")]
			ForceAllTo3D,
			[Token(Token = "0x4000F3C")]
			ForceAllToCustom,
			[Token(Token = "0x4000F3D")]
			AllowDifferentPerGroup
		}

		[Token(Token = "0x20002B4")]
		public enum ItemSpatialBlendType
		{
			[Token(Token = "0x4000F3F")]
			ForceTo2D,
			[Token(Token = "0x4000F40")]
			ForceTo3D,
			[Token(Token = "0x4000F41")]
			ForceToCustom,
			[Token(Token = "0x4000F42")]
			UseCurveFromAudioSource
		}

		[Token(Token = "0x20002B5")]
		public enum GroupPlayType
		{
			[Token(Token = "0x4000F44")]
			Always,
			[Token(Token = "0x4000F45")]
			WhenActorInAudibleRange,
			[Token(Token = "0x4000F46")]
			AllowDifferentPerGroup
		}

		[Token(Token = "0x20002B6")]
		public enum DefaultGroupPlayType
		{
			[Token(Token = "0x4000F48")]
			Always,
			[Token(Token = "0x4000F49")]
			WhenActorInAudibleRange
		}

		[Token(Token = "0x20002B7")]
		public enum MixerWidthMode
		{
			[Token(Token = "0x4000F4B")]
			Narrow,
			[Token(Token = "0x4000F4C")]
			Normal,
			[Token(Token = "0x4000F4D")]
			Wide
		}

		[Token(Token = "0x20002B8")]
		public enum CustomEventReceiveMode
		{
			[Token(Token = "0x4000F4F")]
			Always,
			[Token(Token = "0x4000F50")]
			WhenDistanceLessThan,
			[Token(Token = "0x4000F51")]
			WhenDistanceMoreThan,
			[Token(Token = "0x4000F52")]
			Never,
			[Token(Token = "0x4000F53")]
			OnSameGameObject,
			[Token(Token = "0x4000F54")]
			OnChildGameObject,
			[Token(Token = "0x4000F55")]
			OnParentGameObject,
			[Token(Token = "0x4000F56")]
			OnSameOrChildGameObject,
			[Token(Token = "0x4000F57")]
			OnSameOrParentGameObject
		}

		[Token(Token = "0x20002B9")]
		public enum EventReceiveFilter
		{
			[Token(Token = "0x4000F59")]
			All,
			[Token(Token = "0x4000F5A")]
			Closest,
			[Token(Token = "0x4000F5B")]
			Random
		}

		[Token(Token = "0x20002BA")]
		public enum VariationLoadStatus
		{
			[Token(Token = "0x4000F5D")]
			None,
			[Token(Token = "0x4000F5E")]
			Loading,
			[Token(Token = "0x4000F5F")]
			Loaded,
			[Token(Token = "0x4000F60")]
			LoadFailed
		}

		[Token(Token = "0x20002BB")]
		public enum AudioLocation
		{
			[Token(Token = "0x4000F62")]
			Clip,
			[Token(Token = "0x4000F63")]
			ResourceFile
		}

		[Token(Token = "0x20002BC")]
		public enum CustomSongStartTimeMode
		{
			[Token(Token = "0x4000F65")]
			Beginning,
			[Token(Token = "0x4000F66")]
			SpecificTime,
			[Token(Token = "0x4000F67")]
			RandomTime
		}

		[Token(Token = "0x20002BD")]
		public enum BusCommand
		{
			[Token(Token = "0x4000F69")]
			None,
			[Token(Token = "0x4000F6A")]
			FadeToVolume,
			[Token(Token = "0x4000F6B")]
			Mute,
			[Token(Token = "0x4000F6C")]
			Pause,
			[Token(Token = "0x4000F6D")]
			Solo,
			[Token(Token = "0x4000F6E")]
			Unmute,
			[Token(Token = "0x4000F6F")]
			Unpause,
			[Token(Token = "0x4000F70")]
			Unsolo,
			[Token(Token = "0x4000F71")]
			Stop,
			[Token(Token = "0x4000F72")]
			ChangePitch,
			[Token(Token = "0x4000F73")]
			ToggleMute,
			[Token(Token = "0x4000F74")]
			StopBusOfTransform,
			[Token(Token = "0x4000F75")]
			PauseBusOfTransform,
			[Token(Token = "0x4000F76")]
			UnpauseBusOfTransform,
			[Token(Token = "0x4000F77")]
			GlideByPitch,
			[Token(Token = "0x4000F78")]
			StopOldBusVoices,
			[Token(Token = "0x4000F79")]
			FadeOutOldBusVoices
		}

		[Token(Token = "0x20002BE")]
		public enum DragGroupMode
		{
			[Token(Token = "0x4000F7B")]
			OneGroupPerClip,
			[Token(Token = "0x4000F7C")]
			OneGroupWithVariations
		}

		[Token(Token = "0x20002BF")]
		public enum EventSoundFunctionType
		{
			[Token(Token = "0x4000F7E")]
			PlaySound,
			[Token(Token = "0x4000F7F")]
			GroupControl,
			[Token(Token = "0x4000F80")]
			BusControl,
			[Token(Token = "0x4000F81")]
			PlaylistControl,
			[Token(Token = "0x4000F82")]
			CustomEventControl,
			[Token(Token = "0x4000F83")]
			GlobalControl,
			[Token(Token = "0x4000F84")]
			UnityMixerControl,
			[Token(Token = "0x4000F85")]
			PersistentSettingsControl
		}

		[Token(Token = "0x20002C0")]
		public enum LanguageMode
		{
			[Token(Token = "0x4000F87")]
			UseDeviceSetting,
			[Token(Token = "0x4000F88")]
			SpecificLanguage,
			[Token(Token = "0x4000F89")]
			DynamicallySet
		}

		[Token(Token = "0x20002C1")]
		public enum UnityMixerCommand
		{
			[Token(Token = "0x4000F8B")]
			None,
			[Token(Token = "0x4000F8C")]
			TransitionToSnapshot,
			[Token(Token = "0x4000F8D")]
			TransitionToSnapshotBlend
		}

		[Token(Token = "0x20002C2")]
		public enum PlaylistCommand
		{
			[Token(Token = "0x4000F8F")]
			None,
			[Token(Token = "0x4000F90")]
			ChangePlaylist,
			[Token(Token = "0x4000F91")]
			FadeToVolume,
			[Token(Token = "0x4000F92")]
			PlaySong,
			[Token(Token = "0x4000F93")]
			PlayRandomSong,
			[Token(Token = "0x4000F94")]
			PlayNextSong,
			[Token(Token = "0x4000F95")]
			Pause,
			[Token(Token = "0x4000F96")]
			Resume,
			[Token(Token = "0x4000F97")]
			Stop,
			[Token(Token = "0x4000F98")]
			Mute,
			[Token(Token = "0x4000F99")]
			Unmute,
			[Token(Token = "0x4000F9A")]
			ToggleMute,
			[Token(Token = "0x4000F9B")]
			Restart,
			[Token(Token = "0x4000F9C")]
			Start,
			[Token(Token = "0x4000F9D")]
			StopLoopingCurrentSong,
			[Token(Token = "0x4000F9E")]
			StopPlaylistAfterCurrentSong,
			[Token(Token = "0x4000F9F")]
			AddSongToQueue
		}

		[Token(Token = "0x20002C3")]
		public enum CustomEventCommand
		{
			[Token(Token = "0x4000FA1")]
			None,
			[Token(Token = "0x4000FA2")]
			FireEvent
		}

		[Token(Token = "0x20002C4")]
		public enum GlobalCommand
		{
			[Token(Token = "0x4000FA4")]
			None,
			[Token(Token = "0x4000FA5")]
			PauseMixer,
			[Token(Token = "0x4000FA6")]
			UnpauseMixer,
			[Token(Token = "0x4000FA7")]
			StopMixer,
			[Token(Token = "0x4000FA8")]
			StopEverything,
			[Token(Token = "0x4000FA9")]
			PauseEverything,
			[Token(Token = "0x4000FAA")]
			UnpauseEverything,
			[Token(Token = "0x4000FAB")]
			MuteEverything,
			[Token(Token = "0x4000FAC")]
			UnmuteEverything,
			[Token(Token = "0x4000FAD")]
			SetMasterMixerVolume,
			[Token(Token = "0x4000FAE")]
			SetMasterPlaylistVolume,
			[Token(Token = "0x4000FAF")]
			PauseAudioListener,
			[Token(Token = "0x4000FB0")]
			UnpauseAudioListener
		}

		[Token(Token = "0x20002C5")]
		public enum SoundGroupCommand
		{
			[Token(Token = "0x4000FB2")]
			None,
			[Token(Token = "0x4000FB3")]
			FadeToVolume,
			[Token(Token = "0x4000FB4")]
			FadeOutAllOfSound,
			[Token(Token = "0x4000FB5")]
			Mute,
			[Token(Token = "0x4000FB6")]
			Pause,
			[Token(Token = "0x4000FB7")]
			Solo,
			[Token(Token = "0x4000FB8")]
			StopAllOfSound,
			[Token(Token = "0x4000FB9")]
			Unmute,
			[Token(Token = "0x4000FBA")]
			Unpause,
			[Token(Token = "0x4000FBB")]
			Unsolo,
			[Token(Token = "0x4000FBC")]
			StopAllSoundsOfTransform,
			[Token(Token = "0x4000FBD")]
			PauseAllSoundsOfTransform,
			[Token(Token = "0x4000FBE")]
			UnpauseAllSoundsOfTransform,
			[Token(Token = "0x4000FBF")]
			StopSoundGroupOfTransform,
			[Token(Token = "0x4000FC0")]
			PauseSoundGroupOfTransform,
			[Token(Token = "0x4000FC1")]
			UnpauseSoundGroupOfTransform,
			[Token(Token = "0x4000FC2")]
			FadeOutSoundGroupOfTransform,
			[Token(Token = "0x4000FC3")]
			RefillSoundGroupPool,
			[Token(Token = "0x4000FC4")]
			RouteToBus,
			[Token(Token = "0x4000FC5")]
			GlideByPitch,
			[Token(Token = "0x4000FC6")]
			ToggleSoundGroup,
			[Token(Token = "0x4000FC7")]
			ToggleSoundGroupOfTransform,
			[Token(Token = "0x4000FC8")]
			FadeOutAllSoundsOfTransform,
			[Token(Token = "0x4000FC9")]
			StopOldSoundGroupVoices,
			[Token(Token = "0x4000FCA")]
			FadeOutOldSoundGroupVoices
		}

		[Token(Token = "0x20002C6")]
		public enum PersistentSettingsCommand
		{
			[Token(Token = "0x4000FCC")]
			None,
			[Token(Token = "0x4000FCD")]
			SetBusVolume,
			[Token(Token = "0x4000FCE")]
			SetGroupVolume,
			[Token(Token = "0x4000FCF")]
			SetMixerVolume,
			[Token(Token = "0x4000FD0")]
			SetMusicVolume,
			[Token(Token = "0x4000FD1")]
			MixerMuteToggle,
			[Token(Token = "0x4000FD2")]
			MusicMuteToggle
		}

		[Token(Token = "0x20002C7")]
		public enum SongFadeInPosition
		{
			[Token(Token = "0x4000FD4")]
			NewClipFromBeginning = 1,
			[Token(Token = "0x4000FD5")]
			NewClipFromLastKnownPosition = 3,
			[Token(Token = "0x4000FD6")]
			SynchronizeClips = 5
		}

		[Token(Token = "0x20002C8")]
		public enum SoundSpawnLocationMode
		{
			[Token(Token = "0x4000FD8")]
			MasterAudioLocation,
			[Token(Token = "0x4000FD9")]
			CallerLocation,
			[Token(Token = "0x4000FDA")]
			AttachToCaller
		}

		[Token(Token = "0x20002C9")]
		public enum VariationCommand
		{
			[Token(Token = "0x4000FDC")]
			None,
			[Token(Token = "0x4000FDD")]
			Stop,
			[Token(Token = "0x4000FDE")]
			Pause,
			[Token(Token = "0x4000FDF")]
			Unpause
		}

		[Serializable]
		[Token(Token = "0x20002CA")]
		public struct CustomEventCandidate
		{
			[Token(Token = "0x4000FE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float DistanceAway;

			[Token(Token = "0x4000FE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ICustomEventReceiver Receiver;

			[Token(Token = "0x4000FE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform Trans;

			[Token(Token = "0x4000FE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int RandomId;

			[Token(Token = "0x6001117")]
			[Address(RVA = "0xE86430", Offset = "0xE86430", VA = "0xE86430")]
			public CustomEventCandidate(float distance, ICustomEventReceiver rec, Transform trans, int randomId)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002CB")]
		public class AudioGroupInfo
		{
			[Token(Token = "0x4000FE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<AudioInfo> Sources;

			[Token(Token = "0x4000FE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int LastFramePlayed;

			[Token(Token = "0x4000FE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float LastTimePlayed;

			[Token(Token = "0x4000FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MasterAudioGroup Group;

			[Token(Token = "0x4000FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool PlayedForWarming;

			[Token(Token = "0x6001118")]
			[Address(RVA = "0xE86470", Offset = "0xE86470", VA = "0xE86470")]
			public AudioGroupInfo(List<AudioInfo> sources, MasterAudioGroup groupScript)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002CC")]
		public class AudioInfo
		{
			[Token(Token = "0x4000FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource Source;

			[Token(Token = "0x4000FEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float OriginalVolume;

			[Token(Token = "0x4000FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float LastPercentageVolume;

			[Token(Token = "0x4000FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float LastRandomVolume;

			[Token(Token = "0x4000FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoundGroupVariation Variation;

			[Token(Token = "0x6001119")]
			[Address(RVA = "0xE864CC", Offset = "0xE864CC", VA = "0xE864CC")]
			public AudioInfo(SoundGroupVariation variation, AudioSource source, float origVol)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002CD")]
		public class Playlist
		{
			[Token(Token = "0x20002CE")]
			public enum CrossfadeTimeMode
			{
				[Token(Token = "0x4001001")]
				UseMasterSetting,
				[Token(Token = "0x4001002")]
				Override
			}

			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isExpanded;

			[Token(Token = "0x4000FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string playlistName;

			[Token(Token = "0x4000FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SongFadeInPosition songTransitionType;

			[Token(Token = "0x4000FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<MusicSetting> MusicSettings;

			[Token(Token = "0x4000FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioLocation bulkLocationMode;

			[Token(Token = "0x4000FF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public CrossfadeTimeMode crossfadeMode;

			[Token(Token = "0x4000FF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float crossFadeTime;

			[Token(Token = "0x4000FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool fadeInFirstSong;

			[Token(Token = "0x4000FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
			public bool fadeOutLastSong;

			[Token(Token = "0x4000FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
			public bool bulkEditMode;

			[Token(Token = "0x4000FF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
			public bool isTemporary;

			[Token(Token = "0x4000FF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool showMetadata;

			[Token(Token = "0x4000FFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<SongMetadataProperty> songMetadataProps;

			[Token(Token = "0x4000FFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string newMetadataPropName;

			[Token(Token = "0x4000FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public SongMetadataProperty.MetadataPropertyType newMetadataPropType;

			[Token(Token = "0x4000FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public bool newMetadataPropRequired;

			[Token(Token = "0x4000FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
			public bool newMetadataPropCanHaveMult;

			[Token(Token = "0x4000FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private readonly List<int> _actorInstanceIds;

			[Token(Token = "0x170001B1")]
			public bool HasLiveActors
			{
				[Token(Token = "0x600111D")]
				[Address(RVA = "0xE867F8", Offset = "0xE867F8", VA = "0xE867F8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600111A")]
			[Address(RVA = "0xE86530", Offset = "0xE86530", VA = "0xE86530")]
			public Playlist()
			{
			}

			[Token(Token = "0x600111B")]
			[Address(RVA = "0xE866CC", Offset = "0xE866CC", VA = "0xE866CC")]
			public void AddActorInstanceId(int instanceId)
			{
			}

			[Token(Token = "0x600111C")]
			[Address(RVA = "0xE867A0", Offset = "0xE867A0", VA = "0xE867A0")]
			public void RemoveActorInstanceId(int instanceId)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002CF")]
		public class SoundGroupRefillInfo
		{
			[Token(Token = "0x4001003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float LastTimePlayed;

			[Token(Token = "0x4001004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float InactivePeriodSeconds;

			[Token(Token = "0x600111E")]
			[Address(RVA = "0xE86848", Offset = "0xE86848", VA = "0xE86848")]
			public SoundGroupRefillInfo(float lastTimePlayed, float inactivePeriodSeconds)
			{
			}
		}

		[Token(Token = "0x20002D1")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass274_0
		{
			[Token(Token = "0x400100A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6001125")]
			[Address(RVA = "0xE86958", Offset = "0xE86958", VA = "0xE86958")]
			public <>c__DisplayClass274_0()
			{
			}

			[Token(Token = "0x6001126")]
			[Address(RVA = "0xE86960", Offset = "0xE86960", VA = "0xE86960")]
			internal void <PlaySoundAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x20002D2")]
		[CompilerGenerated]
		private sealed class <PlaySoundAndWaitUntilFinished>d__274 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400100B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400100C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float volumePercentage;

			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float? pitch;

			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float delaySoundTime;

			[Token(Token = "0x4001011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string variationName;

			[Token(Token = "0x4001012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass274_0 <>8__1;

			[Token(Token = "0x4001013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Action completedAction;

			[Token(Token = "0x170001B2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600112A")]
				[Address(RVA = "0xE86C4C", Offset = "0xE86C4C", VA = "0xE86C4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600112C")]
				[Address(RVA = "0xE86C94", Offset = "0xE86C94", VA = "0xE86C94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001127")]
			[Address(RVA = "0xE8696C", Offset = "0xE8696C", VA = "0xE8696C")]
			[DebuggerHidden]
			public <PlaySoundAndWaitUntilFinished>d__274(int <>1__state)
			{
			}

			[Token(Token = "0x6001128")]
			[Address(RVA = "0xE86994", Offset = "0xE86994", VA = "0xE86994", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001129")]
			[Address(RVA = "0xE86998", Offset = "0xE86998", VA = "0xE86998", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600112B")]
			[Address(RVA = "0xE86C54", Offset = "0xE86C54", VA = "0xE86C54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002D3")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass275_0
		{
			[Token(Token = "0x4001014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x600112D")]
			[Address(RVA = "0xE86C9C", Offset = "0xE86C9C", VA = "0xE86C9C")]
			public <>c__DisplayClass275_0()
			{
			}

			[Token(Token = "0x600112E")]
			[Address(RVA = "0xE86CA4", Offset = "0xE86CA4", VA = "0xE86CA4")]
			internal void <PlaySound3DAtTransformAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x20002D4")]
		[CompilerGenerated]
		private sealed class <PlaySound3DAtTransformAndWaitUntilFinished>d__275 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x4001018")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform sourceTrans;

			[Token(Token = "0x4001019")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float volumePercentage;

			[Token(Token = "0x400101A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float? pitch;

			[Token(Token = "0x400101B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float delaySoundTime;

			[Token(Token = "0x400101C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string variationName;

			[Token(Token = "0x400101D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double? timeToSchedulePlay;

			[Token(Token = "0x400101E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private <>c__DisplayClass275_0 <>8__1;

			[Token(Token = "0x400101F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Action completedAction;

			[Token(Token = "0x170001B4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001132")]
				[Address(RVA = "0xE86FAC", Offset = "0xE86FAC", VA = "0xE86FAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001134")]
				[Address(RVA = "0xE86FF4", Offset = "0xE86FF4", VA = "0xE86FF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600112F")]
			[Address(RVA = "0xE86CB0", Offset = "0xE86CB0", VA = "0xE86CB0")]
			[DebuggerHidden]
			public <PlaySound3DAtTransformAndWaitUntilFinished>d__275(int <>1__state)
			{
			}

			[Token(Token = "0x6001130")]
			[Address(RVA = "0xE86CD8", Offset = "0xE86CD8", VA = "0xE86CD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001131")]
			[Address(RVA = "0xE86CDC", Offset = "0xE86CDC", VA = "0xE86CDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001133")]
			[Address(RVA = "0xE86FB4", Offset = "0xE86FB4", VA = "0xE86FB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002D5")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass276_0
		{
			[Token(Token = "0x4001020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6001135")]
			[Address(RVA = "0xE86FFC", Offset = "0xE86FFC", VA = "0xE86FFC")]
			public <>c__DisplayClass276_0()
			{
			}

			[Token(Token = "0x6001136")]
			[Address(RVA = "0xE87004", Offset = "0xE87004", VA = "0xE87004")]
			internal void <PlaySound3DFollowTransformAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x20002D6")]
		[CompilerGenerated]
		private sealed class <PlaySound3DFollowTransformAndWaitUntilFinished>d__276 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x4001024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform sourceTrans;

			[Token(Token = "0x4001025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float volumePercentage;

			[Token(Token = "0x4001026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float? pitch;

			[Token(Token = "0x4001027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float delaySoundTime;

			[Token(Token = "0x4001028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string variationName;

			[Token(Token = "0x4001029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double? timeToSchedulePlay;

			[Token(Token = "0x400102A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private <>c__DisplayClass276_0 <>8__1;

			[Token(Token = "0x400102B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Action completedAction;

			[Token(Token = "0x170001B6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600113A")]
				[Address(RVA = "0xE8730C", Offset = "0xE8730C", VA = "0xE8730C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600113C")]
				[Address(RVA = "0xE87354", Offset = "0xE87354", VA = "0xE87354", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001137")]
			[Address(RVA = "0xE87010", Offset = "0xE87010", VA = "0xE87010")]
			[DebuggerHidden]
			public <PlaySound3DFollowTransformAndWaitUntilFinished>d__276(int <>1__state)
			{
			}

			[Token(Token = "0x6001138")]
			[Address(RVA = "0xE87038", Offset = "0xE87038", VA = "0xE87038", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001139")]
			[Address(RVA = "0xE8703C", Offset = "0xE8703C", VA = "0xE8703C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600113B")]
			[Address(RVA = "0xE87314", Offset = "0xE87314", VA = "0xE87314", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E4B")]
		public const string VideoPlayersSoundGroupSelectedError = "Can't use specially named Sound Group for Video Players. Please select another.";

		[Token(Token = "0x4000E4C")]
		public const string VideoPlayerSoundGroupName = "_VideoPlayers";

		[Token(Token = "0x4000E4D")]
		public const string VideoPlayerBusName = "_VideoPlayers";

		[Token(Token = "0x4000E4E")]
		public const string MasterAudioDefaultFolder = "Assets/Plugins/DarkTonic/MasterAudio";

		[Token(Token = "0x4000E4F")]
		public const string PreviewText = "Random delay, custom fading & start/end position settings are ignored by preview in edit mode.";

		[Token(Token = "0x4000E50")]
		public const string LoopDisabledLoopedChain = "Loop Clip is always OFF for Looped Chain Groups";

		[Token(Token = "0x4000E51")]
		public const string LoopDisabledCustomEnd = "Loop Clip is always OFF when using Custom End Position";

		[Token(Token = "0x4000E52")]
		public const string DragAudioTip = "Drag Audio clips or a folder containing some here";

		[Token(Token = "0x4000E53")]
		public const string NoCategory = "[Uncategorized]";

		[Token(Token = "0x4000E54")]
		public const float SemiTonePitchFactor = 1.05946f;

		[Token(Token = "0x4000E55")]
		public const float SpatialBlend_2DValue = 0f;

		[Token(Token = "0x4000E56")]
		public const float SpatialBlend_3DValue = 1f;

		[Token(Token = "0x4000E57")]
		public const float MaxCrossFadeTimeSeconds = 120f;

		[Token(Token = "0x4000E58")]
		public const float DefaultDuckVolCut = -6f;

		[Token(Token = "0x4000E59")]
		public const int ERROR_MA_LAYER_COLLISIONS_DISABLED = 1;

		[Token(Token = "0x4000E5A")]
		public const int PHYSICS_DISABLED = 2;

		[Token(Token = "0x4000E5B")]
		public const string StoredLanguageNameKey = "~MA_Language_Key~";

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly YieldInstruction EndOfFrameDelay;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly List<string> ExemptChildNames;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly HashSet<int> ErrorNumbersLogged;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static List<string> ImportanceChoices;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Action NumberOfAudioSourcesChanged;

		[Token(Token = "0x4000E61")]
		public const int HardCodedBusOptions = 2;

		[Token(Token = "0x4000E62")]
		public const string AllBusesName = "[All]";

		[Token(Token = "0x4000E63")]
		public const string NoGroupName = "[None]";

		[Token(Token = "0x4000E64")]
		public const string DynamicGroupName = "[Type In]";

		[Token(Token = "0x4000E65")]
		public const string NoPlaylistName = "[No Playlist]";

		[Token(Token = "0x4000E66")]
		public const string NoVoiceLimitName = "[NO LMT]";

		[Token(Token = "0x4000E67")]
		public const string OnlyPlaylistControllerName = "~only~";

		[Token(Token = "0x4000E68")]
		public const float InnerLoopCheckInterval = 0.1f;

		[Token(Token = "0x4000E69")]
		private const int MaxComponents = 20;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioLocation bulkLocationMode;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string groupTemplateName;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string audioSourceTemplateName;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool showGroupCreation;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool useGroupTemplates;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public DragGroupMode curDragGroupMode;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<GameObject> groupTemplates;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<GameObject> audioSourceTemplates;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool mixerMuted;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool playlistsMuted;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LanguageMode langMode;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SystemLanguage testLanguage;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public SystemLanguage defaultLanguage;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SystemLanguage> supportedLanguages;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string busFilter;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useTextGroupFilter;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string textGroupFilter;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool resourceClipsPauseDoNotUnload;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform playlistControllerPrefab;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool persistBetweenScenes;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool shouldLogDestroys;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		public bool showBusColors;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		public bool showGroupImportance;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool areGroupsExpanded;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform soundGroupTemplate;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform soundGroupVariationTemplate;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<GroupBus> groupBuses;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool groupByBus;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool sortAlpha;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
		public bool showRangeSoundGizmos;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
		public bool showSelectedRangeSoundGizmos;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color rangeGizmoColor;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Color selectedRangeGizmoColor;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool showAdvancedSettings;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool showLocalization;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		public bool showVideoPlayerSettings;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		public bool useTextPlaylistFilter;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public string textPlaylistFilter;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool playListExpanded;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		public bool playlistsExpanded;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public AllMusicSpatialBlendType musicSpatialBlendType;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float musicSpatialBlend;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public AllMixerSpatialBlendType mixerSpatialBlendType;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float mixerSpatialBlend;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public GroupPlayType groupPlayType;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public DefaultGroupPlayType defaultGroupPlayType;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public ItemSpatialBlendType newGroupSpatialType;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float newGroupSpatialBlend;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public List<Playlist> musicPlaylists;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float _masterAudioVolume;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool vrSettingsExpanded;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		public bool useSpatializer;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10E")]
		public bool useSpatializerPostFX;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10F")]
		public bool addOculusAudioSources;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public bool addResonanceAudioSources;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		public bool ignoreTimeScale;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x112")]
		public bool useGaplessPlaylists;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x113")]
		public bool useGaplessAutoReschedule;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public bool saveRuntimeChanges;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
		public bool prioritizeOnDistance;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public int rePrioritizeEverySecIndex;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public bool useOcclusion;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float occlusionFreqChangeSeconds;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public OcclusionSelectionType occlusionSelectType;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public int occlusionMaxRayCastsPerFrame;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool occlusionUseLayerMask;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public LayerMask occlusionLayerMask;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool occlusionShowRaycasts;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		public bool occlusionShowCategories;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public RaycastMode occlusionRaycastMode;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public bool occlusionIncludeStartRaycast2DCollider;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		public bool occlusionRaycastsHitTriggers;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		public bool ambientAdvancedExpanded;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public int ambientMaxRecalcsPerFrame;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public bool visualAdvancedExpanded;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		public bool logAdvancedExpanded;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x152")]
		public bool listenerAdvancedExpanded;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x153")]
		public bool listenerFollowerHasRigidBody;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public bool deletePreviewerAudioSourceWhenPlaying;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public VariationFollowerType variationFollowerType;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool showFadingSettings;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15D")]
		public bool stopZeroVolumeGroups;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15E")]
		public bool stopZeroVolumeBuses;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15F")]
		public bool stopZeroVolumePlaylists;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float stopOldestBusFadeTime;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public bool resourceAdvancedExpanded;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x165")]
		public bool useClipAgePriority;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x166")]
		public bool logOutOfVoices;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x167")]
		public bool LogSounds;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public bool logCustomEvents;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x169")]
		public bool disableLogging;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16A")]
		public bool showMusicDucking;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16B")]
		public bool enableMusicDucking;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public List<DuckGroupInfo> musicDuckingSounds;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float defaultRiseVolStart;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float defaultUnduckTime;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float defaultDuckedVolumeCut;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public float crossFadeTime;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public float _masterPlaylistVolume;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public bool showGroupSelect;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18D")]
		public bool hideGroupsWithNoActiveVars;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public JukeBoxDisplayMode jukeBoxDisplayMode;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public bool logPerfExpanded;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x195")]
		public bool willWarm;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x196")]
		public bool mixerSettingsExpanded;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public AudioMixerUpdateMode mixerUpdateMode;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public string newEventName;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool showCustomEvents;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public List<CustomEvent> customEvents;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Dictionary<string, DuckGroupInfo> duckingBySoundType;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public int frames;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool showUnityMixerGroupAssignment;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly PlaySoundResult AndForgetSuccessResult;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly PlaySoundResult failedResultDuringInit;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private readonly Dictionary<string, AudioGroupInfo> AudioSourcesBySoundType;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Dictionary<string, List<int>> _randomizer;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Dictionary<string, List<int>> _randomizerOrigin;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Dictionary<string, List<int>> _randomizerLeftovers;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Dictionary<string, List<int>> _nonRandomChoices;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Dictionary<string, List<int>> _clipsPlayedBySoundTypeOldestFirst;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private readonly List<SoundGroupVariationUpdater> ActiveVariationUpdaters;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private readonly List<SoundGroupVariationUpdater> ActiveUpdatersToRemove;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private readonly List<ICustomEventReceiver> ValidReceivers;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private readonly List<CustomEventCandidate> ValidReceiverCandidates;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private readonly List<MasterAudioGroup> SoloedGroups;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private readonly List<AmbientSoundToTriggerInfo> AmbientsToDelayedTrigger;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private readonly Queue<CustomEventToFireInfo> CustomEventsToFire;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private readonly Queue<TransformFollower> TransFollowerColliderPositionRecalcs;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private readonly List<TransformFollower> ProcessedColliderPositionRecalcs;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private readonly List<BusFadeInfo> BusFades;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private readonly List<GroupFadeInfo> GroupFades;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private readonly List<GroupPitchGlideInfo> GroupPitchGlides;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private readonly List<BusPitchGlideInfo> BusPitchGlides;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private readonly List<OcclusionFreqChangeInfo> VariationOcclusionFreqChanges;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private readonly List<AudioSource> AllAudioSources;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private readonly Dictionary<string, Dictionary<ICustomEventReceiver, Transform>> ReceiversByEventName;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private readonly Dictionary<string, PlaylistController> PlaylistControllersByName;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private readonly Dictionary<string, SoundGroupRefillInfo> LastTimeSoundGroupPlayed;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private readonly List<GameObject> OcclusionSourcesInRange;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private readonly List<GameObject> OcclusionSourcesOutOfRange;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private readonly List<GameObject> OcclusionSourcesBlocked;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private readonly Queue<SoundGroupVariationUpdater> QueuedOcclusionRays;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private readonly List<string> AllSoundGroupNames;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private readonly List<string> AllBusNames;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private readonly List<AudioInfo> GroupsToDelete;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private readonly List<SoundGroupVariation> VariationsStartedDuringMultiStop;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private readonly List<PlaylistController> ControllersToPause;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private readonly List<PlaylistController> ControllersToUnpause;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private readonly List<PlaylistController> ControllersToMute;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private readonly List<PlaylistController> ControllersToUnmute;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private readonly List<PlaylistController> ControllersToToggleMute;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private readonly List<PlaylistController> ControllersToStop;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private readonly List<PlaylistController> ControllersToFade;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private readonly List<PlaylistController> ControllersToTrigNext;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private readonly List<PlaylistController> ControllersToTrigRandom;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private readonly List<PlaylistController> ControllersToStart;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private readonly List<AmbientSoundToTriggerInfo> AmbientsToTriggerNow;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private bool _isStoppingMultiple;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		private float _repriTime;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private List<string> _groupsToRemove;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private bool _mustRescanGroups;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private Transform _trans;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private bool _soundsLoaded;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x359")]
		private bool _warming;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static MasterAudio _instance;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string _prospectiveMAFolder;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Transform _listenerTrans;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly List<SoundGroupCommand> GroupCommandsWithNoGroupSelector;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly List<SoundGroupCommand> GroupCommandsWithNoAllGroupSelector;

		[Token(Token = "0x1700018C")]
		public static float PlaylistMasterVolume
		{
			[Token(Token = "0x60010BA")]
			[Address(RVA = "0xE6DE08", Offset = "0xE6DE08", VA = "0xE6DE08")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010BB")]
			[Address(RVA = "0xE6DE64", Offset = "0xE6DE64", VA = "0xE6DE64")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public static bool LogSoundsEnabled
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0xE6FFD0", Offset = "0xE6FFD0", VA = "0xE6FFD0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0xE7002C", Offset = "0xE7002C", VA = "0xE7002C")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public static bool LogOutOfVoices
		{
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0xE57404", Offset = "0xE57404", VA = "0xE57404")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xE70090", Offset = "0xE70090", VA = "0xE70090")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public static Transform VideoPlayerSoundGroupTransform
		{
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0xE718BC", Offset = "0xE718BC", VA = "0xE718BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000190")]
		public static List<AudioSource> MasterAudioSources
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0xE7193C", Offset = "0xE7193C", VA = "0xE7193C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000191")]
		public static Transform ListenerTrans
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0xE500CC", Offset = "0xE500CC", VA = "0xE500CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		public static PlaylistController OnlyPlaylistController
		{
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0xE71A7C", Offset = "0xE71A7C", VA = "0xE71A7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000193")]
		public static bool IsWarming
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0xE56DBC", Offset = "0xE56DBC", VA = "0xE56DBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000194")]
		public static bool MixerMuted
		{
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xE71B2C", Offset = "0xE71B2C", VA = "0xE71B2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xE65F58", Offset = "0xE65F58", VA = "0xE65F58")]
			set
			{
			}
		}

		[Token(Token = "0x17000195")]
		public static bool PlaylistsMuted
		{
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0xE71B88", Offset = "0xE71B88", VA = "0xE71B88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010ED")]
			[Address(RVA = "0xE69EE8", Offset = "0xE69EE8", VA = "0xE69EE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000196")]
		public bool EnableMusicDucking
		{
			[Token(Token = "0x60010EE")]
			[Address(RVA = "0xE71BE4", Offset = "0xE71BE4", VA = "0xE71BE4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010EF")]
			[Address(RVA = "0xE71BEC", Offset = "0xE71BEC", VA = "0xE71BEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public float MasterCrossFadeTime
		{
			[Token(Token = "0x60010F0")]
			[Address(RVA = "0xE71BF8", Offset = "0xE71BF8", VA = "0xE71BF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000198")]
		public static List<Playlist> MusicPlaylists
		{
			[Token(Token = "0x60010F1")]
			[Address(RVA = "0xE698B8", Offset = "0xE698B8", VA = "0xE698B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000199")]
		public static List<GroupBus> GroupBuses
		{
			[Token(Token = "0x60010F2")]
			[Address(RVA = "0xE60174", Offset = "0xE60174", VA = "0xE60174")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019A")]
		public static List<string> RuntimeSoundGroupNames
		{
			[Token(Token = "0x60010F3")]
			[Address(RVA = "0xE5CFE0", Offset = "0xE5CFE0", VA = "0xE5CFE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019B")]
		public static List<string> RuntimeBusNames
		{
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0xE71C00", Offset = "0xE71C00", VA = "0xE71C00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019C")]
		public static MasterAudio SafeInstance
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0xE62870", Offset = "0xE62870", VA = "0xE62870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019D")]
		public static MasterAudio Instance
		{
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0xE53984", Offset = "0xE53984", VA = "0xE53984")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0xE71DD4", Offset = "0xE71DD4", VA = "0xE71DD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public static bool SoundsReady
		{
			[Token(Token = "0x60010F8")]
			[Address(RVA = "0xE54ED0", Offset = "0xE54ED0", VA = "0xE54ED0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019F")]
		public static bool AppIsShuttingDown
		{
			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xE71E30", Offset = "0xE71E30", VA = "0xE71E30")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xE71E88", Offset = "0xE71E88", VA = "0xE71E88")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public List<string> GroupNames
		{
			[Token(Token = "0x60010FB")]
			[Address(RVA = "0xE71EE4", Offset = "0xE71EE4", VA = "0xE71EE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A1")]
		public static List<string> SoundGroupHardCodedNames
		{
			[Token(Token = "0x60010FC")]
			[Address(RVA = "0xE722FC", Offset = "0xE722FC", VA = "0xE722FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A2")]
		public List<string> BusNames
		{
			[Token(Token = "0x60010FD")]
			[Address(RVA = "0xE72460", Offset = "0xE72460", VA = "0xE72460")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A3")]
		public List<string> PlaylistNames
		{
			[Token(Token = "0x60010FE")]
			[Address(RVA = "0xE72680", Offset = "0xE72680", VA = "0xE72680")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A4")]
		public List<string> PlaylistNamesOnly
		{
			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xE728A0", Offset = "0xE728A0", VA = "0xE728A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A5")]
		public Transform Trans
		{
			[Token(Token = "0x6001100")]
			[Address(RVA = "0xE5029C", Offset = "0xE5029C", VA = "0xE5029C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A6")]
		public bool ShouldShowUnityAudioMixerGroupAssignments
		{
			[Token(Token = "0x6001101")]
			[Address(RVA = "0xE729F0", Offset = "0xE729F0", VA = "0xE729F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A7")]
		public List<string> CustomEventNames
		{
			[Token(Token = "0x6001102")]
			[Address(RVA = "0xE729F8", Offset = "0xE729F8", VA = "0xE729F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A8")]
		public List<string> CustomEventNamesOnly
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0xE72C98", Offset = "0xE72C98", VA = "0xE72C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A9")]
		public static List<string> CustomEventHardCodedNames
		{
			[Token(Token = "0x6001104")]
			[Address(RVA = "0xE72B34", Offset = "0xE72B34", VA = "0xE72B34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AA")]
		public static float MasterVolumeLevel
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0xE72E1C", Offset = "0xE72E1C", VA = "0xE72E1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001106")]
			[Address(RVA = "0xE72E78", Offset = "0xE72E78", VA = "0xE72E78")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		private static bool SceneHasMasterAudio
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0xE54E48", Offset = "0xE54E48", VA = "0xE54E48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001AC")]
		public static bool IgnoreTimeScale
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0xE72FBC", Offset = "0xE72FBC", VA = "0xE72FBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001AD")]
		public static SystemLanguage DynamicLanguage
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0xE73018", Offset = "0xE73018", VA = "0xE73018")]
			get
			{
				return default(SystemLanguage);
			}
			[Token(Token = "0x600110A")]
			[Address(RVA = "0xE73198", Offset = "0xE73198", VA = "0xE73198")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public static float ReprioritizeTime
		{
			[Token(Token = "0x600110B")]
			[Address(RVA = "0xE73258", Offset = "0xE73258", VA = "0xE73258")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001AF")]
		public static bool ShouldRescanGroups
		{
			[Token(Token = "0x600110E")]
			[Address(RVA = "0xE73374", Offset = "0xE73374", VA = "0xE73374")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B0")]
		public static string ProspectiveMAPath
		{
			[Token(Token = "0x600110F")]
			[Address(RVA = "0xE73434", Offset = "0xE73434", VA = "0xE73434")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001110")]
			[Address(RVA = "0xE7348C", Offset = "0xE7348C", VA = "0xE7348C")]
			set
			{
			}
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xE4DDE8", Offset = "0xE4DDE8", VA = "0xE4DDE8")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
		private static void Init()
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xE4DE70", Offset = "0xE4DE70", VA = "0xE4DE70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xE51AF4", Offset = "0xE51AF4", VA = "0xE51AF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xE51CA0", Offset = "0xE51CA0", VA = "0xE51CA0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xE51F50", Offset = "0xE51F50", VA = "0xE51F50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xE53234", Offset = "0xE53234", VA = "0xE53234")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xE532C8", Offset = "0xE532C8", VA = "0xE532C8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xE53244", Offset = "0xE53244", VA = "0xE53244")]
		private void ManualUpdate()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xE50690", Offset = "0xE50690", VA = "0xE50690")]
		public string SoundGroupForWarming()
		{
			return null;
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xE5385C", Offset = "0xE5385C", VA = "0xE5385C")]
		public static void RegisterUpdaterForUpdates(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xE53B98", Offset = "0xE53B98", VA = "0xE53B98")]
		public static void UnregisterUpdaterForUpdates(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xE53654", Offset = "0xE53654", VA = "0xE53654")]
		private void UpdateActiveVariations()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xE53C18", Offset = "0xE53C18", VA = "0xE53C18")]
		private static void UpdateRefillTime(string sType, float inactivePeriodSeconds)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xE532DC", Offset = "0xE532DC", VA = "0xE532DC")]
		private static void RecalcClosestColliderPositions()
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xE53168", Offset = "0xE53168", VA = "0xE53168")]
		private static void FireCustomEventsWaiting()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xE52E10", Offset = "0xE52E10", VA = "0xE52E10")]
		private static void RefillInactiveGroupPools()
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xE51FD8", Offset = "0xE51FD8", VA = "0xE51FD8")]
		private static void PerformOcclusionFrequencyChanges()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xE521DC", Offset = "0xE521DC", VA = "0xE521DC")]
		private void PerformBusFades()
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xE52530", Offset = "0xE52530", VA = "0xE52530")]
		private void PerformGroupFades()
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xE529C0", Offset = "0xE529C0", VA = "0xE529C0")]
		public static void PerformDelayedAmbientTriggers()
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xE527BC", Offset = "0xE527BC", VA = "0xE527BC")]
		private void PerformGroupPitchGlides()
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xE52410", Offset = "0xE52410", VA = "0xE52410")]
		private void PerformBusPitchGlides()
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xE54BF0", Offset = "0xE54BF0", VA = "0xE54BF0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xE54C7C", Offset = "0xE54C7C", VA = "0xE54C7C")]
		public static bool PlaySoundAndForget(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xE55BF4", Offset = "0xE55BF4", VA = "0xE55BF4")]
		public static PlaySoundResult PlaySound(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xE55DEC", Offset = "0xE55DEC", VA = "0xE55DEC")]
		public static bool PlaySound3DAtVector3AndForget(string sType, Vector3 sourcePosition, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xE55F8C", Offset = "0xE55F8C", VA = "0xE55F8C")]
		public static PlaySoundResult PlaySound3DAtVector3(string sType, Vector3 sourcePosition, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return null;
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xE56140", Offset = "0xE56140", VA = "0xE56140")]
		public static bool PlaySound3DAtTransformAndForget(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xE56318", Offset = "0xE56318", VA = "0xE56318")]
		public static PlaySoundResult PlaySound3DAtTransform(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xE5651C", Offset = "0xE5651C", VA = "0xE5651C")]
		public static bool PlaySound3DFollowTransformAndForget(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xE5083C", Offset = "0xE5083C", VA = "0xE5083C")]
		public static PlaySoundResult PlaySound3DFollowTransform(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xE566F4", Offset = "0xE566F4", VA = "0xE566F4")]
		[IteratorStateMachine(typeof(<PlaySoundAndWaitUntilFinished>d__274))]
		public static IEnumerator PlaySoundAndWaitUntilFinished(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xE567C0", Offset = "0xE567C0", VA = "0xE567C0")]
		[IteratorStateMachine(typeof(<PlaySound3DAtTransformAndWaitUntilFinished>d__275))]
		public static IEnumerator PlaySound3DAtTransformAndWaitUntilFinished(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xE568B4", Offset = "0xE568B4", VA = "0xE568B4")]
		[IteratorStateMachine(typeof(<PlaySound3DFollowTransformAndWaitUntilFinished>d__276))]
		public static IEnumerator PlaySound3DFollowTransformAndWaitUntilFinished(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xE55BD0", Offset = "0xE55BD0", VA = "0xE55BD0")]
		public static bool PSRAsSuccessBool(PlaySoundResult psr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xE54F90", Offset = "0xE54F90", VA = "0xE54F90")]
		private static PlaySoundResult PlaySoundAtVolume(string sType, float volumePercentage, Vector3 sourcePosition, double? timeToSchedulePlay, [Optional] float? pitch, [Optional] Transform sourceTrans, [Optional] string variationName, bool attachToSource = false, float delaySoundTime = 0f, bool useVector3 = false, bool makePlaySoundResult = false, bool isChaining = false, bool isSingleSubscribedPlay = false, bool triggeredAsChildGroup = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xE58DDC", Offset = "0xE58DDC", VA = "0xE58DDC")]
		private static PlaySoundResult TryPlayVariationOrOtherMatches(string sType, float volumePercentage, Vector3 sourcePosition, double? timeToSchedulePlay, float? pitch, Transform sourceTrans, bool attachToSource, float delaySoundTime, bool useVector3, bool makePlaySoundResult, bool isChaining, bool isSingleSubscribedPlay, AudioInfo randomSource, SoundGroupVariation busVoiceToStop, GroupBus groupBus, bool canUseBusVoiceToStop, bool forgetSoundPlayedOrScheduled, AudioGroupInfo group, bool isNonSpecific, int? randomIndex, List<int> choices, int pickedChoice, bool loggingEnabledForGrp, bool isSingleVarLoop, List<int> otherChoices, bool hasRefilledPool, List<AudioInfo> sources, out bool soundSuccess)
		{
			return null;
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xE589F0", Offset = "0xE589F0", VA = "0xE589F0")]
		private static bool CanPlayDialogBasedOnImportanceOrIsNotDialog(string sType, AudioGroupInfo group, bool loggingEnabledForGrp, AudioInfo randomSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xE57A74", Offset = "0xE57A74", VA = "0xE57A74")]
		private static AudioInfo UseOnlyVariationIfOnlyOne(string sType, List<AudioInfo> sources, bool loggingEnabledForGrp, AudioInfo randomSource, MasterAudioGroup maGroup, ref bool isSingleVarLoop)
		{
			return null;
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xE58764", Offset = "0xE58764", VA = "0xE58764")]
		private static bool IsActorTooFarAwayToPlay(string sType, Transform sourceTrans, AudioGroupInfo group, AudioInfo randomSource, bool loggingEnabledForGrp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xE58600", Offset = "0xE58600", VA = "0xE58600")]
		private static bool VariationPassesProbabilityToPlayCheck(string sType, float volumePercentage, float? pitch, Transform sourceTrans, bool attachToSource, bool isChaining, AudioInfo randomSource, bool loggingEnabledForGrp, AudioGroupInfo group, bool isNonSpecific, int? randomIndex, List<int> choices, int pickedChoice)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xE58430", Offset = "0xE58430", VA = "0xE58430")]
		private static bool IsNoClipSilentPlay(string sType, float volumePercentage, float? pitch, Transform sourceTrans, bool attachToSource, bool isChaining, AudioInfo randomSource, bool loggingEnabledForGrp, AudioGroupInfo group, bool isNonSpecific, int? randomIndex, List<int> choices, int pickedChoice)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xE582B8", Offset = "0xE582B8", VA = "0xE582B8")]
		private static bool VariationIsUsable(AudioInfo randomSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xE57B8C", Offset = "0xE57B8C", VA = "0xE57B8C")]
		private static bool CanFindVariationToPlay(string sType, string variationName, bool isNonSpecific, bool canUseBusVoiceToStop, List<AudioInfo> sources, bool loggingEnabledForGrp, SoundGroupVariation busVoiceToStop, ref AudioInfo randomSource, ref List<int> choices, ref int? randomIndex, ref int pickedChoice, ref List<int> otherChoices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xE57688", Offset = "0xE57688", VA = "0xE57688")]
		private static SoundGroupVariation FindBusVoiceToStop(GroupBus groupBus, MasterAudioGroup group)
		{
			return null;
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xE5758C", Offset = "0xE5758C", VA = "0xE5758C")]
		private static bool CanStopLimitedBusVoice(GroupBus groupBus, bool loggingEnabledForGrp, AudioGroupInfo group)
		{
			return default(bool);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xE57564", Offset = "0xE57564", VA = "0xE57564")]
		private static bool IsBusVoiceLimited(GroupBus groupBus)
		{
			return default(bool);
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xE57218", Offset = "0xE57218", VA = "0xE57218")]
		private static AudioInfo FindRetriggerableVariationInGroup(string variationName, bool isNonSpecific, List<AudioInfo> sources, MasterAudioGroup maGroup)
		{
			return null;
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xE571C0", Offset = "0xE571C0", VA = "0xE571C0")]
		private static bool IsGroupPolyphonyLimited(MasterAudioGroup maGroup, AudioGroupInfo group)
		{
			return default(bool);
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0xE57058", Offset = "0xE57058", VA = "0xE57058")]
		private static bool IsReplayLimited(string sType, MasterAudioGroup maGroup, AudioGroupInfo group, bool loggingEnabledForGrp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xE56E7C", Offset = "0xE56E7C", VA = "0xE56E7C")]
		private static void LogIfSilentPlay(string sType, bool loggingEnabledForGrp, MasterAudioGroup maGroup)
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xE56CE4", Offset = "0xE56CE4", VA = "0xE56CE4")]
		private static bool SoundGroupHasVariations(string sType, List<AudioInfo> sources, bool loggingEnabledForGrp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xE569A8", Offset = "0xE569A8", VA = "0xE569A8")]
		private static bool IsSoundGroupValidAndReady(string sType, Transform sourceTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xE59F8C", Offset = "0xE59F8C", VA = "0xE59F8C")]
		private static void MaybeChainNextVar(bool isChaining, SoundGroupVariation variation, float volumePercentage, float? pitch, Transform sourceTrans, bool attachToSource)
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xE59344", Offset = "0xE59344", VA = "0xE59344")]
		private static void SetLastPlayed(AudioGroupInfo grp)
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xE59A8C", Offset = "0xE59A8C", VA = "0xE59A8C")]
		private static void RemoveClipAndRefillIfEmpty(AudioGroupInfo grp, bool isNonSpecific, int? randomIndex, List<int> choices, string sType, int pickedChoice, bool loggingEnabledForGrp, bool isSingleVarLoop)
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xE59374", Offset = "0xE59374", VA = "0xE59374")]
		private static PlaySoundResult PlaySoundIfAvailable(AudioInfo info, Vector3 sourcePosition, float volumePercentage, SoundGroupVariation busVoiceToStop, GroupBus groupBus, bool canUseBusVoiceToStop, ref bool forgetSoundPlayed, [Optional] float? pitch, [Optional] AudioGroupInfo audioGroup, [Optional] Transform sourceTrans, bool attachToSource = false, float delaySoundTime = 0f, bool useVector3 = false, bool makePlaySoundResult = false, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xE5A9AC", Offset = "0xE5A9AC", VA = "0xE5A9AC")]
		private static void FadeOldestOrFarthestBusVoice(SoundGroupVariation busVoiceToStop, GroupBus groupBus)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xE5AA78", Offset = "0xE5AA78", VA = "0xE5AA78")]
		public static void EndDucking(SoundGroupVariationUpdater actorUpdater)
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xE5AB20", Offset = "0xE5AB20", VA = "0xE5AB20")]
		public static void DuckSoundGroup(string soundGroupName, AudioSource aSource, SoundGroupVariationUpdater actorUpdater)
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xE5ACF8", Offset = "0xE5ACF8", VA = "0xE5ACF8")]
		private static void StopPauseOrUnpauseSoundsOfTransform(Transform trans, List<AudioInfo> varList, VariationCommand varCmd)
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xE5B134", Offset = "0xE5B134", VA = "0xE5B134")]
		public static void StopAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xE5B3DC", Offset = "0xE5B3DC", VA = "0xE5B3DC")]
		public static void StopSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xE5B5A0", Offset = "0xE5B5A0", VA = "0xE5B5A0")]
		public static void PauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xE5B7DC", Offset = "0xE5B7DC", VA = "0xE5B7DC")]
		public static void PauseSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xE5B9A0", Offset = "0xE5B9A0", VA = "0xE5B9A0")]
		public static void UnpauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xE5BBDC", Offset = "0xE5BBDC", VA = "0xE5BBDC")]
		public static void UnpauseSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xE5BDA0", Offset = "0xE5BDA0", VA = "0xE5BDA0")]
		public static void FadeOutAllSoundsOfTransform(Transform sourceTrans, float fadeTime)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xE5C328", Offset = "0xE5C328", VA = "0xE5C328")]
		public static void FadeOutSoundGroupOfTransform(Transform sourceTrans, string sType, float fadeTime)
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xE546F4", Offset = "0xE546F4", VA = "0xE546F4")]
		public static void StopAllOfSound(string sType)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xE59CF0", Offset = "0xE59CF0", VA = "0xE59CF0")]
		public static void FadeOutAllOfSound(string sType, float fadeTime)
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xE5C61C", Offset = "0xE5C61C", VA = "0xE5C61C")]
		public static List<SoundGroupVariation> GetAllPlayingVariations()
		{
			return null;
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xE5BF94", Offset = "0xE5BF94", VA = "0xE5BF94")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransform(Transform sourceTrans)
		{
			return null;
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xE5C954", Offset = "0xE5C954", VA = "0xE5C954")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransformList(List<Transform> sourceTransList)
		{
			return null;
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xE5CD68", Offset = "0xE5CD68", VA = "0xE5CD68")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsInBus(string busName)
		{
			return null;
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xE5D03C", Offset = "0xE5D03C", VA = "0xE5D03C")]
		public static void DeleteGroupVariation(string sType, string variationName)
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xE5DE0C", Offset = "0xE5DE0C", VA = "0xE5DE0C")]
		public static void CreateGroupVariationFromClip(string sType, AudioClip clip, string variationName, float volume = 1f, float pitch = 1f)
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xE5E640", Offset = "0xE5E640", VA = "0xE5E640")]
		public static void ChangeVariationPitch(string sType, bool changeAllVariations, string variationName, float pitch)
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xE5E9B0", Offset = "0xE5E9B0", VA = "0xE5E9B0")]
		public static void ChangeVariationVolume(string sType, bool changeAllVariations, string variationName, float volume)
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xE5ECBC", Offset = "0xE5ECBC", VA = "0xE5ECBC")]
		public static void ChangeVariationClipFromResources(string sType, bool changeAllVariations, string variationName, string resourceFileName)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xE5EE84", Offset = "0xE5EE84", VA = "0xE5EE84")]
		public static void ChangeVariationClip(string sType, bool changeAllVariations, string variationName, AudioClip clip)
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xE5F110", Offset = "0xE5F110", VA = "0xE5F110")]
		public static void GradualOcclusionFreqChange(SoundGroupVariation variation, float fadeTime, float newCutoffFreq)
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xE5F4E8", Offset = "0xE5F4E8", VA = "0xE5F4E8")]
		public static AudioSource GetNextVariationForSoundGroup(string sType)
		{
			return null;
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xE5F7EC", Offset = "0xE5F7EC", VA = "0xE5F7EC")]
		public static bool IsSoundGroupPlaying(string sType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xE5F8FC", Offset = "0xE5F8FC", VA = "0xE5F8FC")]
		public static bool IsTransformPlayingSoundGroup(string sType, Transform sourceTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xE5FAE4", Offset = "0xE5FAE4", VA = "0xE5FAE4")]
		public static void RouteGroupToBus(string sType, string busName)
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xE606A0", Offset = "0xE606A0", VA = "0xE606A0")]
		public static float GetVariationLength(string sType, string variationName)
		{
			return default(float);
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xE53D84", Offset = "0xE53D84", VA = "0xE53D84")]
		public static void RefillSoundGroupPool(string sType)
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xE60F94", Offset = "0xE60F94", VA = "0xE60F94")]
		public static bool SoundGroupExists(string sType)
		{
			return default(bool);
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xE61028", Offset = "0xE61028", VA = "0xE61028")]
		public static void PauseSoundGroup(string sType)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xE611B4", Offset = "0xE611B4", VA = "0xE611B4")]
		public static void SetGroupSpatialBlend(string sType)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xE61304", Offset = "0xE61304", VA = "0xE61304")]
		public static void RouteGroupToUnityMixerGroup(string sType, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xE6147C", Offset = "0xE6147C", VA = "0xE6147C")]
		public static void UnpauseSoundGroup(string sType)
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xE61608", Offset = "0xE61608", VA = "0xE61608")]
		public static void FadeSoundGroupToVolume(string sType, float newVolume, float fadeTime, [Optional] Action completionCallback, bool willStopAfterFade = false, bool willResetVolumeAfterFade = false)
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xE61AA0", Offset = "0xE61AA0", VA = "0xE61AA0")]
		public static void FadeOutOldSoundGroupVoices(string sType, float minimumPlayTime, float fadeTime)
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xE61C60", Offset = "0xE61C60", VA = "0xE61C60")]
		public static void StopOldSoundGroupVoices(string sType, float minimumPlayTime)
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xE61E00", Offset = "0xE61E00", VA = "0xE61E00")]
		public static void GlideSoundGroupByPitch(string sType, float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xE624A4", Offset = "0xE624A4", VA = "0xE624A4")]
		public static void DeleteSoundGroup(string sType)
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xE62CD4", Offset = "0xE62CD4", VA = "0xE62CD4")]
		public static Transform CreateSoundGroup(DynamicSoundGroup aGroup, int? creatorInstanceId, bool errorOnExisting = true)
		{
			return null;
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xE63FB0", Offset = "0xE63FB0", VA = "0xE63FB0")]
		public static float GetGroupVolume(string sType)
		{
			return default(float);
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xE54480", Offset = "0xE54480", VA = "0xE54480")]
		public static void SetGroupVolume(string sType, float volumeLevel)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xE519CC", Offset = "0xE519CC", VA = "0xE519CC")]
		public static void MuteGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xE64170", Offset = "0xE64170", VA = "0xE64170")]
		public static void UnmuteGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xE5033C", Offset = "0xE5033C", VA = "0xE5033C")]
		private static void AddRuntimeGroupInfo(string groupName, AudioGroupInfo groupInfo)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xE64420", Offset = "0xE64420", VA = "0xE64420")]
		private static void FireAudioSourcesNumberChangedEvent()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xE6425C", Offset = "0xE6425C", VA = "0xE6425C")]
		public static void TrackRuntimeAudioSources(List<AudioSource> sources)
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xE51D40", Offset = "0xE51D40", VA = "0xE51D40")]
		public static void StopTrackingRuntimeAudioSources(List<AudioSource> sources)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xE62A1C", Offset = "0xE62A1C", VA = "0xE62A1C")]
		private static void RemoveRuntimeGroupInfo(string groupName)
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xE644B4", Offset = "0xE644B4", VA = "0xE644B4")]
		private static void RescanChildren(MasterAudioGroup group)
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xE6405C", Offset = "0xE6405C", VA = "0xE6405C")]
		private static void SetGroupMuteStatus(MasterAudioGroup aGroup, string sType, bool isMute)
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xE60260", Offset = "0xE60260", VA = "0xE60260")]
		public static void SoloGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xE6060C", Offset = "0xE6060C", VA = "0xE6060C")]
		public static void SilenceOrUnsilenceGroupsFromSoloChange()
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xE6485C", Offset = "0xE6485C", VA = "0xE6485C")]
		private static void UnsilenceNonSoloedGroups()
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xE6498C", Offset = "0xE6498C", VA = "0xE6498C")]
		private static void UnsilenceGroup(AudioGroupInfo grp)
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xE64724", Offset = "0xE64724", VA = "0xE64724")]
		private static void SilenceNonSoloedGroups()
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xE64A28", Offset = "0xE64A28", VA = "0xE64A28")]
		private static void SilenceGroup(AudioGroupInfo grp)
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xE64AC4", Offset = "0xE64AC4", VA = "0xE64AC4")]
		public static void UnsoloGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xE5AED0", Offset = "0xE5AED0", VA = "0xE5AED0")]
		public static MasterAudioGroup GrabGroup(string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xE64BDC", Offset = "0xE64BDC", VA = "0xE64BDC")]
		public static int VoicesForGroup(string sType)
		{
			return default(int);
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xE64CC8", Offset = "0xE64CC8", VA = "0xE64CC8")]
		public static Transform FindGroupTransform(string sType)
		{
			return null;
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xE64E9C", Offset = "0xE64E9C", VA = "0xE64E9C")]
		public static List<AudioInfo> GetAllVariationsOfGroup(string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xE64FF8", Offset = "0xE64FF8", VA = "0xE64FF8")]
		public static AudioGroupInfo GetGroupInfo(string sType)
		{
			return null;
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xE650CC", Offset = "0xE650CC", VA = "0xE650CC")]
		public static void SubscribeToLastVariationPlayed(string sType, Action finishedCallback)
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xE65234", Offset = "0xE65234", VA = "0xE65234")]
		public static void UnsubscribeFromLastVariationPlayed(string sType)
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xE65318", Offset = "0xE65318", VA = "0xE65318")]
		public void SetSpatialBlendForMixer()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xE65474", Offset = "0xE65474", VA = "0xE65474")]
		public static void PauseMixer()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xE6565C", Offset = "0xE6565C", VA = "0xE6565C")]
		public static void UnpauseMixer()
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xE65844", Offset = "0xE65844", VA = "0xE65844")]
		public static void StopMixer()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xE65A98", Offset = "0xE65A98", VA = "0xE65A98")]
		public static void UnsubscribeFromAllVariations()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xE65CF4", Offset = "0xE65CF4", VA = "0xE65CF4")]
		public static void StopEverything()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xE65DA4", Offset = "0xE65DA4", VA = "0xE65DA4")]
		public static void PauseEverything()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xE65E54", Offset = "0xE65E54", VA = "0xE65E54")]
		public static void UnpauseEverything()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xE65F04", Offset = "0xE65F04", VA = "0xE65F04")]
		public static void MuteEverything()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xE66314", Offset = "0xE66314", VA = "0xE66314")]
		public static void UnmuteEverything()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xE663C8", Offset = "0xE663C8", VA = "0xE663C8")]
		public static List<string> ListOfAudioClipsInGroupsEditTime()
		{
			return null;
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xE54A80", Offset = "0xE54A80", VA = "0xE54A80")]
		private static int GetBusIndex(string busName, bool alertMissing)
		{
			return default(int);
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xE601D0", Offset = "0xE601D0", VA = "0xE601D0")]
		private static GroupBus GetBusByIndex(int busIndex)
		{
			return null;
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xE666E8", Offset = "0xE666E8", VA = "0xE666E8")]
		public static void ChangeBusPitch(string busName, float pitch)
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xE66888", Offset = "0xE66888", VA = "0xE66888")]
		public static void MuteBus(string busName)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xE66CF8", Offset = "0xE66CF8", VA = "0xE66CF8")]
		public static void UnmuteBus(string busName, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xE66EA8", Offset = "0xE66EA8", VA = "0xE66EA8")]
		public static void ToggleMuteBus(string busName)
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xE66F6C", Offset = "0xE66F6C", VA = "0xE66F6C")]
		public static void PauseBus(string busName)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xE670E4", Offset = "0xE670E4", VA = "0xE670E4")]
		public static void SoloBus(string busName)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xE66B48", Offset = "0xE66B48", VA = "0xE66B48")]
		public static void UnsoloBus(string busName, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xE672C0", Offset = "0xE672C0", VA = "0xE672C0")]
		public static void RouteBusToUnityMixerGroup(string busName, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xE5A510", Offset = "0xE5A510", VA = "0xE5A510")]
		private static SoundGroupVariation FindLeastImportantSoundOnBus(GroupBus bus, MasterAudioGroup group)
		{
			return null;
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xE5A214", Offset = "0xE5A214", VA = "0xE5A214")]
		private static SoundGroupVariation FindFarthestSoundOnBus(GroupBus bus)
		{
			return null;
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xE59FBC", Offset = "0xE59FBC", VA = "0xE59FBC")]
		private static SoundGroupVariation FindOldestSoundOnBus(GroupBus bus)
		{
			return null;
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xE54288", Offset = "0xE54288", VA = "0xE54288")]
		public static void StopBus(string busName)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xE67434", Offset = "0xE67434", VA = "0xE67434")]
		public static void UnpauseBus(string busName)
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xE67594", Offset = "0xE67594", VA = "0xE67594")]
		public static bool CreateBus(string busName, int? actorInstanceId, bool errorOnExisting = true, bool isTemporary = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xE678F4", Offset = "0xE678F4", VA = "0xE678F4")]
		public static void DeleteBusByName(string busName)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xE6797C", Offset = "0xE6797C", VA = "0xE6797C")]
		public static void DeleteBusByIndex(int busIndex)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xE5A90C", Offset = "0xE5A90C", VA = "0xE5A90C")]
		public static float GetBusVolume(MasterAudioGroup maGroup)
		{
			return default(float);
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xE67DF0", Offset = "0xE67DF0", VA = "0xE67DF0")]
		public static void FadeBusToVolume(string busName, float newVolume, float fadeTime, [Optional] Action completionCallback, bool willStopAfterFade = false, bool willResetVolumeAfterFade = false)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xE682AC", Offset = "0xE682AC", VA = "0xE682AC")]
		public static void FadeOutOldBusVoices(string busName, float minimumPlayTime, float fadeTime)
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xE684D8", Offset = "0xE684D8", VA = "0xE684D8")]
		public static void StopOldBusVoices(string busName, float minimumPlayTime)
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xE686E4", Offset = "0xE686E4", VA = "0xE686E4")]
		public static void GlideBusByPitch(string busName, float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xE5058C", Offset = "0xE5058C", VA = "0xE5058C")]
		public static void SetBusVolumeByName(string busName, float newVolume)
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xE67C4C", Offset = "0xE67C4C", VA = "0xE67C4C")]
		private static void RecalculateGroupVolumes(AudioGroupInfo aGroup, GroupBus bus)
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xE60424", Offset = "0xE60424", VA = "0xE60424")]
		private static void SetBusVolume(GroupBus bus, float newVolume)
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xE66A64", Offset = "0xE66A64", VA = "0xE66A64")]
		public static GroupBus GrabBusByName(string busName)
		{
			return null;
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xE68EA4", Offset = "0xE68EA4", VA = "0xE68EA4")]
		public static void PauseBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xE6905C", Offset = "0xE6905C", VA = "0xE6905C")]
		public static void UnpauseBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xE69214", Offset = "0xE69214", VA = "0xE69214")]
		public static void StopBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xE6943C", Offset = "0xE6943C", VA = "0xE6943C")]
		public static void AddSoundGroupToDuckList(string sType, float riseVolumeStart, float duckedVolCut, float unduckTime, bool isTemporary = false)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xE6960C", Offset = "0xE6960C", VA = "0xE6960C")]
		public static void RemoveSoundGroupFromDuckList(string sType)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xE6971C", Offset = "0xE6971C", VA = "0xE6971C")]
		public static Playlist GrabPlaylist(string playlistName, bool logErrorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xE69914", Offset = "0xE69914", VA = "0xE69914")]
		public static void ChangePlaylistPitch(string playlistName, float pitch, [Optional] string songName)
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xE69A30", Offset = "0xE69A30", VA = "0xE69A30")]
		public static void MutePlaylist()
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xE69A94", Offset = "0xE69A94", VA = "0xE69A94")]
		public static void MutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xE662B4", Offset = "0xE662B4", VA = "0xE662B4")]
		public static void MuteAllPlaylists()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xE69E10", Offset = "0xE69E10", VA = "0xE69E10")]
		private static void MutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xE69FCC", Offset = "0xE69FCC", VA = "0xE69FCC")]
		public static void UnmutePlaylist()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xE6A030", Offset = "0xE6A030", VA = "0xE6A030")]
		public static void UnmutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xE66368", Offset = "0xE66368", VA = "0xE66368")]
		public static void UnmuteAllPlaylists()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xE6A2DC", Offset = "0xE6A2DC", VA = "0xE6A2DC")]
		private static void UnmutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xE6A3B4", Offset = "0xE6A3B4", VA = "0xE6A3B4")]
		public static void ToggleMutePlaylist()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xE6A418", Offset = "0xE6A418", VA = "0xE6A418")]
		public static void ToggleMutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xE6A754", Offset = "0xE6A754", VA = "0xE6A754")]
		public static void ToggleMuteAllPlaylists()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xE6A6C4", Offset = "0xE6A6C4", VA = "0xE6A6C4")]
		private static void ToggleMutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xE6A7B4", Offset = "0xE6A7B4", VA = "0xE6A7B4")]
		public static void PausePlaylist()
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xE6A818", Offset = "0xE6A818", VA = "0xE6A818")]
		public static void PausePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xE65DF4", Offset = "0xE65DF4", VA = "0xE65DF4")]
		public static void PauseAllPlaylists()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xE6AAC4", Offset = "0xE6AAC4", VA = "0xE6AAC4")]
		private static void PausePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xE6AB54", Offset = "0xE6AB54", VA = "0xE6AB54")]
		public static void UnpausePlaylist()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xE6ABB8", Offset = "0xE6ABB8", VA = "0xE6ABB8")]
		public static void UnpausePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xE65EA4", Offset = "0xE65EA4", VA = "0xE65EA4")]
		public static void UnpauseAllPlaylists()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xE6AE64", Offset = "0xE6AE64", VA = "0xE6AE64")]
		private static void UnpausePlaylists(List<PlaylistController> controllers)
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xE6AEF4", Offset = "0xE6AEF4", VA = "0xE6AEF4")]
		public static void StopPlaylist()
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xE6AF58", Offset = "0xE6AF58", VA = "0xE6AF58")]
		public static void StopPlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xE65D44", Offset = "0xE65D44", VA = "0xE65D44")]
		public static void StopAllPlaylists()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xE6B204", Offset = "0xE6B204", VA = "0xE6B204")]
		private static void StopPlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xE6B298", Offset = "0xE6B298", VA = "0xE6B298")]
		public static void TriggerNextPlaylistClip()
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xE6B2FC", Offset = "0xE6B2FC", VA = "0xE6B2FC")]
		public static void TriggerNextPlaylistClip(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xE6B638", Offset = "0xE6B638", VA = "0xE6B638")]
		public static void TriggerNextClipAllPlaylists()
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xE6B5A8", Offset = "0xE6B5A8", VA = "0xE6B5A8")]
		private static void NextPlaylistClips(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xE6B698", Offset = "0xE6B698", VA = "0xE6B698")]
		public static void TriggerRandomPlaylistClip()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xE6B6FC", Offset = "0xE6B6FC", VA = "0xE6B6FC")]
		public static void TriggerRandomPlaylistClip(string playlistControllerName)
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xE6BA38", Offset = "0xE6BA38", VA = "0xE6BA38")]
		public static void TriggerRandomClipAllPlaylists()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xE6B9A8", Offset = "0xE6B9A8", VA = "0xE6B9A8")]
		private static void RandomPlaylistClips(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xE6BA98", Offset = "0xE6BA98", VA = "0xE6BA98")]
		public static void RestartPlaylist()
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xE6BAFC", Offset = "0xE6BAFC", VA = "0xE6BAFC")]
		public static void RestartPlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xE6BDC0", Offset = "0xE6BDC0", VA = "0xE6BDC0")]
		public static void RestartAllPlaylists()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xE6BD2C", Offset = "0xE6BD2C", VA = "0xE6BD2C")]
		private static void RestartPlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xE6BE20", Offset = "0xE6BE20", VA = "0xE6BE20")]
		public static void StartPlaylist(string playlistName)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xE6C1A4", Offset = "0xE6C1A4", VA = "0xE6C1A4")]
		public static void StartPlaylistOnClip(string playlistName, string clipName)
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xE6BE90", Offset = "0xE6BE90", VA = "0xE6BE90")]
		public static void StartPlaylist(string playlistControllerName, string playlistName, [Optional] string clipName)
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xE6C220", Offset = "0xE6C220", VA = "0xE6C220")]
		public static void StopLoopingAllCurrentSongs()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xE6C310", Offset = "0xE6C310", VA = "0xE6C310")]
		public static void StopLoopingCurrentSong()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xE6C374", Offset = "0xE6C374", VA = "0xE6C374")]
		public static void StopLoopingCurrentSong(string playlistControllerName)
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xE6C280", Offset = "0xE6C280", VA = "0xE6C280")]
		private static void StopLoopingCurrentSongs(List<PlaylistController> playlistControllers)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xE6C5A4", Offset = "0xE6C5A4", VA = "0xE6C5A4")]
		public static void StopAllPlaylistsAfterCurrentSongs()
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xE6C694", Offset = "0xE6C694", VA = "0xE6C694")]
		public static void StopPlaylistAfterCurrentSong()
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xE6C6F8", Offset = "0xE6C6F8", VA = "0xE6C6F8")]
		public static void StopPlaylistAfterCurrentSong(string playlistControllerName)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xE6C604", Offset = "0xE6C604", VA = "0xE6C604")]
		private static void StopPlaylistAfterCurrentSongs(List<PlaylistController> playlistControllers)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xE6C928", Offset = "0xE6C928", VA = "0xE6C928")]
		public static void QueuePlaylistClip(string clipName)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xE6C994", Offset = "0xE6C994", VA = "0xE6C994")]
		public static void QueuePlaylistClip(string playlistControllerName, string clipName)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xE6CB14", Offset = "0xE6CB14", VA = "0xE6CB14")]
		public static bool TriggerPlaylistClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xE6CB80", Offset = "0xE6CB80", VA = "0xE6CB80")]
		public static bool TriggerPlaylistClip(string playlistControllerName, string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xE6CD00", Offset = "0xE6CD00", VA = "0xE6CD00")]
		public static void ChangePlaylistByName(string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xE6CD7C", Offset = "0xE6CD7C", VA = "0xE6CD7C")]
		public static void ChangePlaylistByName(string playlistControllerName, string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xE6CF04", Offset = "0xE6CF04", VA = "0xE6CF04")]
		public static void FadePlaylistToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xE6CF80", Offset = "0xE6CF80", VA = "0xE6CF80")]
		public static void FadePlaylistToVolume(string playlistControllerName, float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xE6D39C", Offset = "0xE6D39C", VA = "0xE6D39C")]
		public static void FadeAllPlaylistsToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xE6D248", Offset = "0xE6D248", VA = "0xE6D248")]
		private static void FadePlaylists(List<PlaylistController> playlists, float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xE6D414", Offset = "0xE6D414", VA = "0xE6D414")]
		public static void CreatePlaylist(Playlist playlist, bool errorOnDuplicate)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xE6D5B0", Offset = "0xE6D5B0", VA = "0xE6D5B0")]
		public static void DeletePlaylist(string playlistName)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xE6D75C", Offset = "0xE6D75C", VA = "0xE6D75C")]
		public static void AddSongToPlaylist(string playlistName, AudioClip song, bool loopSong = false, float songPitch = 1f, float songVolume = 1f, [Optional] string alias)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xE6D848", Offset = "0xE6D848", VA = "0xE6D848")]
		public static void AddSongToPlaylist(string playlistName, MusicSetting newSong)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xE6DF38", Offset = "0xE6DF38", VA = "0xE6DF38")]
		public static void AudioListenerChanged(AudioListener listener)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xE6E080", Offset = "0xE6E080", VA = "0xE6E080")]
		public static void FireCustomEventNextFrame(string customEventName, Transform eventOrigin)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xE6E3EC", Offset = "0xE6E3EC", VA = "0xE6E3EC")]
		public static void AddCustomEventReceiver(ICustomEventReceiver receiver, Transform receiverTrans)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xE6E7EC", Offset = "0xE6E7EC", VA = "0xE6E7EC")]
		public static void RemoveCustomEventReceiver(ICustomEventReceiver receiver)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xE6EC3C", Offset = "0xE6EC3C", VA = "0xE6EC3C")]
		public static List<Transform> ReceiversForEvent(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xE6EFAC", Offset = "0xE6EFAC", VA = "0xE6EFAC")]
		public static CustomEventCategory CreateCustomEventCategoryIfNotThere(string categoryName, int? actorInstanceId, bool errorOnDuplicates, bool isTemporary)
		{
			return null;
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xE6F2F8", Offset = "0xE6F2F8", VA = "0xE6F2F8")]
		public static void CreateCustomEvent(string customEventName, CustomEventReceiveMode eventReceiveMode, float distanceThreshold, EventReceiveFilter receiveFilter, int filterModeQty, int? actorInstanceId, string categoryName = "", bool isTemporary = false, bool errorOnDuplicate = true)
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xE6F6AC", Offset = "0xE6F6AC", VA = "0xE6F6AC")]
		public static void DeleteCustomEvent(string customEventName)
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xE6F860", Offset = "0xE6F860", VA = "0xE6F860")]
		public static CustomEvent GetCustomEventByName(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xE50A40", Offset = "0xE50A40", VA = "0xE50A40")]
		public static void FireCustomEvent(string customEventName, Transform originObject, bool logDupe = true)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xE6E2A8", Offset = "0xE6E2A8", VA = "0xE6E2A8")]
		public static bool CustomEventExists(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xE6F954", Offset = "0xE6F954", VA = "0xE6F954")]
		private static List<ICustomEventReceiver> GetChildReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xE6FAC0", Offset = "0xE6FAC0", VA = "0xE6FAC0")]
		private static List<ICustomEventReceiver> GetParentReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xE6FC2C", Offset = "0xE6FC2C", VA = "0xE6FC2C")]
		private static List<ICustomEventReceiver> FilterOutSelf(List<ICustomEventReceiver> sourceList, Transform origin)
		{
			return null;
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xE56BF0", Offset = "0xE56BF0", VA = "0xE56BF0")]
		private static bool LoggingEnabledForGroup(MasterAudioGroup grp)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xE57460", Offset = "0xE57460", VA = "0xE57460")]
		private static void LogMessage(string message)
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xE5A870", Offset = "0xE5A870", VA = "0xE5A870")]
		public static void LogWarning(string msg)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xE700F4", Offset = "0xE700F4", VA = "0xE700F4")]
		public static void LogWarningIfNeverLogged(string msg, int errorNumber)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xE5A7D4", Offset = "0xE5A7D4", VA = "0xE5A7D4")]
		public static void LogError(string msg)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xE70204", Offset = "0xE70204", VA = "0xE70204")]
		public static void LogNoPlaylist(string playlistControllerName, string methodName)
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xE69D40", Offset = "0xE69D40", VA = "0xE69D40")]
		private static bool IsOkToCallOnlyPlaylistMethod(List<PlaylistController> pcs, string methodName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xE7042C", Offset = "0xE7042C", VA = "0xE7042C")]
		public static void SetupAmbientNextFrame(AmbientSound ambient)
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xE706AC", Offset = "0xE706AC", VA = "0xE706AC")]
		public static void RemoveDelayedAmbient(AmbientSound ambient)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xE70918", Offset = "0xE70918", VA = "0xE70918")]
		public static void QueueTransformFollowerForColliderPositionRecalc(TransformFollower follower)
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xE70B74", Offset = "0xE70B74", VA = "0xE70B74")]
		public static void AddToQueuedOcclusionRays(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xE70DD0", Offset = "0xE70DD0", VA = "0xE70DD0")]
		public static void AddToOcclusionInRangeSources(GameObject src)
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xE70FE4", Offset = "0xE70FE4", VA = "0xE70FE4")]
		public static void AddToOcclusionOutOfRangeSources(GameObject src)
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xE71360", Offset = "0xE71360", VA = "0xE71360")]
		public static void AddToBlockedOcclusionSources(GameObject src)
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xE71508", Offset = "0xE71508", VA = "0xE71508")]
		public static bool HasQueuedOcclusionRays()
		{
			return default(bool);
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xE71580", Offset = "0xE71580", VA = "0xE71580")]
		public static SoundGroupVariationUpdater OldestQueuedOcclusionRay()
		{
			return null;
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xE5F3C4", Offset = "0xE5F3C4", VA = "0xE5F3C4")]
		public static bool IsOcclusionFrequencyTransitioning(SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xE5DCA0", Offset = "0xE5DCA0", VA = "0xE5DCA0")]
		public static void RemoveFromOcclusionFrequencyTransitioning(SoundGroupVariation variation)
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xE71210", Offset = "0xE71210", VA = "0xE71210")]
		public static void RemoveFromBlockedOcclusionSources(GameObject src)
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xE7165C", Offset = "0xE7165C", VA = "0xE7165C")]
		public static void StopTrackingOcclusionForSource(GameObject src)
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xE71870", Offset = "0xE71870", VA = "0xE71870")]
		public static bool IsVideoPlayersGroup(string groupName)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xE5C56C", Offset = "0xE5C56C", VA = "0xE5C56C")]
		private static bool IsLinkedGroupPlay(SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xE71998", Offset = "0xE71998", VA = "0xE71998")]
		public static int RemainingClipsInGroup(string sType)
		{
			return default(int);
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xE62C74", Offset = "0xE62C74", VA = "0xE62C74")]
		public static void RescanGroupsNow()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xE73318", Offset = "0xE73318", VA = "0xE73318")]
		public static void DoneRescanningGroups()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xE734EC", Offset = "0xE734EC", VA = "0xE734EC")]
		public static GameObject CreateMasterAudio()
		{
			return null;
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xE73684", Offset = "0xE73684", VA = "0xE73684")]
		public static GameObject CreatePlaylistController()
		{
			return null;
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xE7381C", Offset = "0xE7381C", VA = "0xE7381C")]
		public static GameObject CreateDynamicSoundGroupCreator()
		{
			return null;
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xE739B4", Offset = "0xE739B4", VA = "0xE739B4")]
		public static GameObject CreateSoundGroupOrganizer()
		{
			return null;
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xE73B4C", Offset = "0xE73B4C", VA = "0xE73B4C")]
		public MasterAudio()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public static class PersistentAudioSettings
	{
		[Token(Token = "0x4001034")]
		public const string SfxVolKey = "MA_sfxVolume";

		[Token(Token = "0x4001035")]
		public const string MusicVolKey = "MA_musicVolume";

		[Token(Token = "0x4001036")]
		public const string SfxMuteKey = "MA_sfxMute";

		[Token(Token = "0x4001037")]
		public const string MusicMuteKey = "MA_musicMute";

		[Token(Token = "0x4001038")]
		public const string BusVolKey = "MA_BusVolume_";

		[Token(Token = "0x4001039")]
		public const string GroupVolKey = "MA_GroupVolume_";

		[Token(Token = "0x400103A")]
		public const string BusKeysKey = "MA_BusKeys";

		[Token(Token = "0x400103B")]
		public const string GroupKeysKey = "MA_GroupsKeys";

		[Token(Token = "0x400103C")]
		public const string Separator = ";";

		[Token(Token = "0x170001B8")]
		public static string BusesUpdatedKeys
		{
			[Token(Token = "0x600114E")]
			[Address(RVA = "0xE87894", Offset = "0xE87894", VA = "0xE87894")]
			get
			{
				return null;
			}
			[Token(Token = "0x600114F")]
			[Address(RVA = "0xE8790C", Offset = "0xE8790C", VA = "0xE8790C")]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public static string GroupsUpdatedKeys
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0xE87A28", Offset = "0xE87A28", VA = "0xE87A28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001154")]
			[Address(RVA = "0xE87AA0", Offset = "0xE87AA0", VA = "0xE87AA0")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public static bool? MixerMuted
		{
			[Token(Token = "0x6001157")]
			[Address(RVA = "0xE87D10", Offset = "0xE87D10", VA = "0xE87D10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001158")]
			[Address(RVA = "0xE87DA4", Offset = "0xE87DA4", VA = "0xE87DA4")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public static float? MixerVolume
		{
			[Token(Token = "0x6001159")]
			[Address(RVA = "0xE87EDC", Offset = "0xE87EDC", VA = "0xE87EDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600115A")]
			[Address(RVA = "0xE87F68", Offset = "0xE87F68", VA = "0xE87F68")]
			set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public static bool? MusicMuted
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0xE88098", Offset = "0xE88098", VA = "0xE88098")]
			get
			{
				return null;
			}
			[Token(Token = "0x600115C")]
			[Address(RVA = "0xE8812C", Offset = "0xE8812C", VA = "0xE8812C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public static float? MusicVolume
		{
			[Token(Token = "0x600115D")]
			[Address(RVA = "0xE88264", Offset = "0xE88264", VA = "0xE88264")]
			get
			{
				return null;
			}
			[Token(Token = "0x600115E")]
			[Address(RVA = "0xE882F0", Offset = "0xE882F0", VA = "0xE882F0")]
			set
			{
			}
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xE876D4", Offset = "0xE876D4", VA = "0xE876D4")]
		public static void SetBusVolume(string busName, float vol)
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xE87848", Offset = "0xE87848", VA = "0xE87848")]
		public static string MakeBusKey(string busName)
		{
			return null;
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xE87958", Offset = "0xE87958", VA = "0xE87958")]
		public static float? GetBusVolume(string busName)
		{
			return null;
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xE879DC", Offset = "0xE879DC", VA = "0xE879DC")]
		public static string GetGroupKey(string groupName)
		{
			return null;
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xE87AEC", Offset = "0xE87AEC", VA = "0xE87AEC")]
		public static void SetGroupVolume(string grpName, float vol)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xE87C8C", Offset = "0xE87C8C", VA = "0xE87C8C")]
		public static float? GetGroupVolume(string grpName)
		{
			return null;
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xE88420", Offset = "0xE88420", VA = "0xE88420")]
		public static void RestoreMasterSettings()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public abstract class SingletonScriptable<InstanceType> : ScriptableObject where InstanceType : ScriptableObject
	{
		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static string AssetNameToLoad;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static string ResourceNameToLoad;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static List<string> FoldersToCreate;

		[Token(Token = "0x6001160")]
		protected SingletonScriptable()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public class SoundGroupOrganizer : MonoBehaviour
	{
		[Token(Token = "0x20002E1")]
		public class CustomEventSelection
		{
			[Token(Token = "0x4001056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CustomEvent Event;

			[Token(Token = "0x4001057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsSelected;

			[Token(Token = "0x6001164")]
			[Address(RVA = "0xE88930", Offset = "0xE88930", VA = "0xE88930")]
			public CustomEventSelection(CustomEvent cEvent, bool isSelected)
			{
			}
		}

		[Token(Token = "0x20002E2")]
		public class SoundGroupSelection
		{
			[Token(Token = "0x4001058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject Go;

			[Token(Token = "0x4001059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsSelected;

			[Token(Token = "0x6001165")]
			[Address(RVA = "0xE8896C", Offset = "0xE8896C", VA = "0xE8896C")]
			public SoundGroupSelection(GameObject go, bool isSelected)
			{
			}
		}

		[Token(Token = "0x20002E3")]
		public enum MAItemType
		{
			[Token(Token = "0x400105B")]
			SoundGroups,
			[Token(Token = "0x400105C")]
			CustomEvents
		}

		[Token(Token = "0x20002E4")]
		public enum TransferMode
		{
			[Token(Token = "0x400105E")]
			None,
			[Token(Token = "0x400105F")]
			Import,
			[Token(Token = "0x4001060")]
			Export
		}

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject dynGroupTemplate;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject dynVariationTemplate;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject maGroupTemplate;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject maVariationTemplate;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MasterAudio.DragGroupMode curDragGroupMode;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SystemLanguage previewLanguage;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useTextGroupFilter;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string textGroupFilter;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TransferMode transMode;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject sourceObject;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SoundGroupSelection> selectedSourceSoundGroups;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject destObject;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<SoundGroupSelection> selectedDestSoundGroups;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MAItemType itemType;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CustomEventSelection> selectedSourceCustomEvents;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<CustomEventSelection> selectedDestCustomEvents;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<CustomEvent> customEvents;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string newEventName;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xE885D0", Offset = "0xE885D0", VA = "0xE885D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xE88638", Offset = "0xE88638", VA = "0xE88638")]
		public SoundGroupOrganizer()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public static class AmbientUtil
	{
		[Token(Token = "0x4001061")]
		public const string FollowerHolderName = "_Followers";

		[Token(Token = "0x4001062")]
		public const string ListenerFollowerName = "~ListenerFollower~";

		[Token(Token = "0x4001063")]
		public const float ListenerFollowerTrigRadius = 0.01f;

		[Token(Token = "0x4001064")]
		public const int IgnoreRaycastLayerNumber = 2;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform _followerHolder;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ListenerFollower _listenerFollower;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<TransformFollower> _transformFollowers;

		[Token(Token = "0x170001BE")]
		public static ListenerFollower ListenerFollower
		{
			[Token(Token = "0x600116A")]
			[Address(RVA = "0xE88E28", Offset = "0xE88E28", VA = "0xE88E28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BF")]
		public static Transform FollowerHolder
		{
			[Token(Token = "0x600116B")]
			[Address(RVA = "0xE88A4C", Offset = "0xE88A4C", VA = "0xE88A4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		public static bool HasListenerFollower
		{
			[Token(Token = "0x600116E")]
			[Address(RVA = "0xE892D0", Offset = "0xE892D0", VA = "0xE892D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C1")]
		public static int AmbientCount
		{
			[Token(Token = "0x600116F")]
			[Address(RVA = "0xE8935C", Offset = "0xE8935C", VA = "0xE8935C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C2")]
		public static bool HasListenerFolowerRigidBody
		{
			[Token(Token = "0x6001170")]
			[Address(RVA = "0xE893CC", Offset = "0xE893CC", VA = "0xE893CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xE889A8", Offset = "0xE889A8", VA = "0xE889A8")]
		public static void InitFollowerHolder()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xE88D0C", Offset = "0xE88D0C", VA = "0xE88D0C")]
		public static bool InitListenerFollower()
		{
			return default(bool);
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xE88DA0", Offset = "0xE88DA0", VA = "0xE88DA0")]
		public static void RemoveTransformFollower(TransformFollower follower)
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xE88E20", Offset = "0xE88E20", VA = "0xE88E20")]
		public static Transform InitAudioSourceFollower(Transform transToFollow, string followerName, string soundGroupName, string variationName, float volume, bool willFollowSource, bool willPositionOnClosestColliderPoint, bool useTopCollider, bool useChildColliders, MasterAudio.AmbientSoundExitMode exitMode, float exitFadeTime, MasterAudio.AmbientSoundReEnterMode reEnterMode, float reEnterFadeTime)
		{
			return null;
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xE89124", Offset = "0xE89124", VA = "0xE89124")]
		public static void ManualUpdate()
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xE89208", Offset = "0xE89208", VA = "0xE89208")]
		private static void UpdateListenerFollower()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public static class ArrayListUtil
	{
		[Token(Token = "0x6001172")]
		[Address(RVA = "0xE89464", Offset = "0xE89464", VA = "0xE89464")]
		public static void SortIntArray(ref List<int> list)
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xE8956C", Offset = "0xE8956C", VA = "0xE8956C")]
		public static bool IsExcludedChildName(string name)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002E7")]
	public static class AudioTransformExtensions
	{
		[Token(Token = "0x6001174")]
		[Address(RVA = "0xE895EC", Offset = "0xE895EC", VA = "0xE895EC")]
		public static void FadeOutSoundGroupOfTransform(this Transform sourceTrans, string sType, float fadeTime)
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xE89664", Offset = "0xE89664", VA = "0xE89664")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransform(this Transform sourceTrans)
		{
			return null;
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xE896BC", Offset = "0xE896BC", VA = "0xE896BC")]
		public static bool PlaySound3DAtTransformAndForget(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xE8975C", Offset = "0xE8975C", VA = "0xE8975C")]
		public static PlaySoundResult PlaySound3DAtTransform(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return null;
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xE89810", Offset = "0xE89810", VA = "0xE89810")]
		public static bool PlaySound3DFollowTransformAndForget(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xE898B0", Offset = "0xE898B0", VA = "0xE898B0")]
		public static PlaySoundResult PlaySound3DFollowTransform(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return null;
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xE89964", Offset = "0xE89964", VA = "0xE89964")]
		public static IEnumerator PlaySound3DAtTransformAndWaitUntilFinished(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xE89A1C", Offset = "0xE89A1C", VA = "0xE89A1C")]
		public static IEnumerator PlaySound3DFollowTransformAndWaitUntilFinished(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xE89AD4", Offset = "0xE89AD4", VA = "0xE89AD4")]
		public static void PauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xE89B2C", Offset = "0xE89B2C", VA = "0xE89B2C")]
		public static void PauseBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xE89B94", Offset = "0xE89B94", VA = "0xE89B94")]
		public static void PauseSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xE89BFC", Offset = "0xE89BFC", VA = "0xE89BFC")]
		public static void StopAllSoundsOfTransform(this Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xE89C54", Offset = "0xE89C54", VA = "0xE89C54")]
		public static void StopBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xE89CBC", Offset = "0xE89CBC", VA = "0xE89CBC")]
		public static void StopSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xE89D24", Offset = "0xE89D24", VA = "0xE89D24")]
		public static void UnpauseAllSoundsOfTransform(this Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xE89D7C", Offset = "0xE89D7C", VA = "0xE89D7C")]
		public static void UnpauseBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xE89DE4", Offset = "0xE89DE4", VA = "0xE89DE4")]
		public static void UnpauseSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xE89E4C", Offset = "0xE89E4C", VA = "0xE89E4C")]
		public static bool IsTransformPlayingSoundGroup(this Transform sourceTrans, string sType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002E8")]
	public class AudioTransformTracker : MonoBehaviour
	{
		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int _frames;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _trans;

		[Token(Token = "0x170001C3")]
		public Transform Trans
		{
			[Token(Token = "0x6001186")]
			[Address(RVA = "0xE89EB4", Offset = "0xE89EB4", VA = "0xE89EB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xE89F48", Offset = "0xE89F48", VA = "0xE89F48")]
		private void Update()
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xE89F58", Offset = "0xE89F58", VA = "0xE89F58")]
		public AudioTransformTracker()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public static class AudioUtil
	{
		[Token(Token = "0x400106A")]
		public const float DefaultMinOcclusionCutoffFrequency = 22000f;

		[Token(Token = "0x400106B")]
		public const float DefaultMaxOcclusionCutoffFrequency = 0f;

		[Token(Token = "0x400106C")]
		private const float SemitonePitchChangeAmt = 1.0594635f;

		[Token(Token = "0x170001C4")]
		public static float FixedDeltaTime
		{
			[Token(Token = "0x600118C")]
			[Address(RVA = "0xE81F14", Offset = "0xE81F14", VA = "0xE81F14")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C5")]
		public static float FrameTime
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0xE81DC0", Offset = "0xE81DC0", VA = "0xE81DC0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C6")]
		public static float Time
		{
			[Token(Token = "0x600118E")]
			[Address(RVA = "0xE778F8", Offset = "0xE778F8", VA = "0xE778F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C7")]
		public static int FrameCount
		{
			[Token(Token = "0x600118F")]
			[Address(RVA = "0xE778F0", Offset = "0xE778F0", VA = "0xE778F0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xE89F60", Offset = "0xE89F60", VA = "0xE89F60")]
		private static float CutoffRange(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xE89F94", Offset = "0xE89F94", VA = "0xE89F94")]
		private static float MaxCutoffFreq(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xE7D734", Offset = "0xE7D734", VA = "0xE7D734")]
		public static float MinCutoffFreq(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xE830CC", Offset = "0xE830CC", VA = "0xE830CC")]
		public static float GetOcclusionCutoffFrequencyByDistanceRatio(float distRatio, SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xE89FA4", Offset = "0xE89FA4", VA = "0xE89FA4")]
		public static float GetSemitonesFromPitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xE8A07C", Offset = "0xE8A07C", VA = "0xE8A07C")]
		public static float GetPitchFromSemitones(float semitones)
		{
			return default(float);
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xE8A0BC", Offset = "0xE8A0BC", VA = "0xE8A0BC")]
		public static float GetDbFromFloatVolume(float vol)
		{
			return default(float);
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xE8A0D4", Offset = "0xE8A0D4", VA = "0xE8A0D4")]
		public static float GetFloatVolumeFromDb(float db)
		{
			return default(float);
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xE81434", Offset = "0xE81434", VA = "0xE81434")]
		public static float GetAudioPlayedPercentage(AudioSource source)
		{
			return default(float);
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xE8A0E4", Offset = "0xE8A0E4", VA = "0xE8A0E4")]
		public static bool IsClipPaused(AudioSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xE83108", Offset = "0xE83108", VA = "0xE83108")]
		public static void ClipPlayed(AudioClip clip, GameObject actor)
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xE7FFC8", Offset = "0xE7FFC8", VA = "0xE7FFC8")]
		public static void UnloadNonPreloadedAudioData(AudioClip clip, GameObject actor)
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xE7EF88", Offset = "0xE7EF88", VA = "0xE7EF88")]
		public static bool AudioClipWillPreload(AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xE7EBD4", Offset = "0xE7EBD4", VA = "0xE7EBD4")]
		public static bool IsClipReadyToPlay(this AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xE8A120", Offset = "0xE8A120", VA = "0xE8A120")]
		private static float GetPositiveUsablePitch(AudioSource source)
		{
			return default(float);
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xE8A148", Offset = "0xE8A148", VA = "0xE8A148")]
		private static float GetPositiveUsablePitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xE832D0", Offset = "0xE832D0", VA = "0xE832D0")]
		public static float AdjustAudioClipDurationForPitch(float duration, AudioSource sourceWithPitch)
		{
			return default(float);
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xE8A158", Offset = "0xE8A158", VA = "0xE8A158")]
		public static float AdjustAudioClipDurationForPitch(float duration, float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xE8A16C", Offset = "0xE8A16C", VA = "0xE8A16C")]
		public static float AdjustEndLeadTimeForPitch(float duration, AudioSource sourceWithPitch)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20002EA")]
	public static class CoroutineHelper
	{
		[Token(Token = "0x20002EB")]
		[CompilerGenerated]
		private sealed class <WaitForActualSeconds>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400106D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400106E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400106F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4001070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <start>5__2;

			[Token(Token = "0x170001C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011A4")]
				[Address(RVA = "0xE8A2E8", Offset = "0xE8A2E8", VA = "0xE8A2E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011A6")]
				[Address(RVA = "0xE8A330", Offset = "0xE8A330", VA = "0xE8A330", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011A1")]
			[Address(RVA = "0xE8A1FC", Offset = "0xE8A1FC", VA = "0xE8A1FC")]
			[DebuggerHidden]
			public <WaitForActualSeconds>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x60011A2")]
			[Address(RVA = "0xE8A224", Offset = "0xE8A224", VA = "0xE8A224", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011A3")]
			[Address(RVA = "0xE8A228", Offset = "0xE8A228", VA = "0xE8A228", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011A5")]
			[Address(RVA = "0xE8A2F0", Offset = "0xE8A2F0", VA = "0xE8A2F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xE8A18C", Offset = "0xE8A18C", VA = "0xE8A18C")]
		[IteratorStateMachine(typeof(<WaitForActualSeconds>d__0))]
		public static IEnumerator WaitForActualSeconds(float time)
		{
			return null;
		}
	}
	[Token(Token = "0x20002EC")]
	public class DelayBetweenSongs : MonoBehaviour
	{
		[Token(Token = "0x20002ED")]
		[CompilerGenerated]
		private sealed class <PlaySongWithDelay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DelayBetweenSongs <>4__this;

			[Token(Token = "0x170001CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011AF")]
				[Address(RVA = "0xE8B770", Offset = "0xE8B770", VA = "0xE8B770", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011B1")]
				[Address(RVA = "0xE8B7B8", Offset = "0xE8B7B8", VA = "0xE8B7B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011AC")]
			[Address(RVA = "0xE8B578", Offset = "0xE8B578", VA = "0xE8B578")]
			[DebuggerHidden]
			public <PlaySongWithDelay>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60011AD")]
			[Address(RVA = "0xE8B5A0", Offset = "0xE8B5A0", VA = "0xE8B5A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011AE")]
			[Address(RVA = "0xE8B5A4", Offset = "0xE8B5A4", VA = "0xE8B5A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011B0")]
			[Address(RVA = "0xE8B778", Offset = "0xE8B778", VA = "0xE8B778", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minTimeToWait;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxTimeToWait;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string playlistControllerName;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlaylistController _controller;

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xE8A338", Offset = "0xE8A338", VA = "0xE8A338")]
		private void Start()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xE8A3E8", Offset = "0xE8A3E8", VA = "0xE8A3E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xE8A474", Offset = "0xE8A474", VA = "0xE8A474")]
		private void SongEnded(string songName)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xE8A4A0", Offset = "0xE8A4A0", VA = "0xE8A4A0")]
		[IteratorStateMachine(typeof(<PlaySongWithDelay>d__7))]
		private IEnumerator PlaySongWithDelay()
		{
			return null;
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xE8A514", Offset = "0xE8A514", VA = "0xE8A514")]
		public DelayBetweenSongs()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public static class DTMonoHelper
	{
		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xE8B7C0", Offset = "0xE8B7C0", VA = "0xE8B7C0")]
		public static Transform GetChildTransform(this Transform transParent, string childName)
		{
			return null;
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xE8B7D4", Offset = "0xE8B7D4", VA = "0xE8B7D4")]
		public static bool IsActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xE8B7E8", Offset = "0xE8B7E8", VA = "0xE8B7E8")]
		public static void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xE8B800", Offset = "0xE8B800", VA = "0xE8B800")]
		public static void DestroyAllChildren(this Transform tran)
		{
		}
	}
	[Token(Token = "0x20002EF")]
	[AudioScriptOrder(-35)]
	public class DynamicSoundGroupCreator : MonoBehaviour
	{
		[Token(Token = "0x20002F0")]
		public enum CreateItemsWhen
		{
			[Token(Token = "0x400109B")]
			FirstEnableOnly,
			[Token(Token = "0x400109C")]
			EveryEnable
		}

		[Token(Token = "0x4001078")]
		public const int ExtraHardCodedBusOptions = 1;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SystemLanguage previewLanguage;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MasterAudio.DragGroupMode curDragGroupMode;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject groupTemplate;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject variationTemplate;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool errorOnDuplicates;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool createOnAwake;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool soundGroupsAreExpanded;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool removeGroupsOnSceneChange;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public CreateItemsWhen reUseMode;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool showCustomEvents;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<CustomEvent> customEventsToCreate;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string newEventName;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool showMusicDucking;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<DuckGroupInfo> musicDuckingSounds;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<GroupBus> groupBuses;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool playListExpanded;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool playlistEditorExp;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MasterAudio.Playlist> musicPlaylists;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<GameObject> audioSourceTemplates;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string audioSourceTemplateName;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool groupByBus;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool itemsCreatedEventExpanded;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string itemsCreatedCustomEvent;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool showUnityMixerGroupAssignment;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool _hasCreated;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly List<Transform> _groupsToRemove;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _trans;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int _instanceId;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly List<DynamicSoundGroup> _groupsToCreate;

		[Token(Token = "0x170001CC")]
		public static int HardCodedBusOptions
		{
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0xE8D5D0", Offset = "0xE8D5D0", VA = "0xE8D5D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CD")]
		public List<DynamicSoundGroup> GroupsToCreate
		{
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0xE8D644", Offset = "0xE8D644", VA = "0xE8D644")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CE")]
		public int InstanceId
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0xE8D254", Offset = "0xE8D254", VA = "0xE8D254")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CF")]
		public bool ShouldShowUnityAudioMixerGroupAssignments
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0xE8D64C", Offset = "0xE8D64C", VA = "0xE8D64C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xE8BA14", Offset = "0xE8BA14", VA = "0xE8BA14")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xE8BAF0", Offset = "0xE8BAF0", VA = "0xE8BAF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xE8BBC8", Offset = "0xE8BBC8", VA = "0xE8BBC8")]
		private void Start()
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xE8BBCC", Offset = "0xE8BBCC", VA = "0xE8BBCC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xE8BAF4", Offset = "0xE8BAF4", VA = "0xE8BAF4")]
		private void CreateItemsIfReady()
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xE8BCC8", Offset = "0xE8BCC8", VA = "0xE8BCC8")]
		public void RemoveItems()
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xE8C3B4", Offset = "0xE8C3B4", VA = "0xE8C3B4")]
		public void CreateItems()
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xE8D5E0", Offset = "0xE8D5E0", VA = "0xE8D5E0")]
		private void FireEvents()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xE8D28C", Offset = "0xE8D28C", VA = "0xE8D28C")]
		public void PopulateGroupData()
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xE8D654", Offset = "0xE8D654", VA = "0xE8D654")]
		public DynamicSoundGroupCreator()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public static class FilePlayerPrefs
	{
		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Hashtable PlayerPrefsHashtable;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool _hashTableChanged;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string _serializedOutput;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string SerializedInput;

		[Token(Token = "0x40010A4")]
		private const string ParametersSeperator = ";";

		[Token(Token = "0x40010A5")]
		private const string KeyValueSeperator = ":";

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string FileName;

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xE8DB94", Offset = "0xE8DB94", VA = "0xE8DB94")]
		static FilePlayerPrefs()
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xE8E03C", Offset = "0xE8E03C", VA = "0xE8E03C")]
		public static bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xE8E0B0", Offset = "0xE8E0B0", VA = "0xE8E0B0")]
		public static void SetString(string key, string value)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xE8E1A4", Offset = "0xE8E1A4", VA = "0xE8E1A4")]
		public static void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xE8E2E4", Offset = "0xE8E2E4", VA = "0xE8E2E4")]
		public static void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xE8E42C", Offset = "0xE8E42C", VA = "0xE8E42C")]
		public static void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xE8E570", Offset = "0xE8E570", VA = "0xE8E570")]
		public static string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xE8E63C", Offset = "0xE8E63C", VA = "0xE8E63C")]
		public static string GetString(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xE8E748", Offset = "0xE8E748", VA = "0xE8E748")]
		public static int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xE8E8CC", Offset = "0xE8E8CC", VA = "0xE8E8CC")]
		public static int GetInt(string key, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xE8EA20", Offset = "0xE8EA20", VA = "0xE8EA20")]
		public static float GetFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xE8EB9C", Offset = "0xE8EB9C", VA = "0xE8EB9C")]
		public static float GetFloat(string key, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xE8ECF0", Offset = "0xE8ECF0", VA = "0xE8ECF0")]
		public static bool GetBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xE8EDEC", Offset = "0xE8EDEC", VA = "0xE8EDEC")]
		public static bool GetBool(string key, bool defaultValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xE8EF4C", Offset = "0xE8EF4C", VA = "0xE8EF4C")]
		public static void DeleteKey(string key)
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xE8EFC0", Offset = "0xE8EFC0", VA = "0xE8EFC0")]
		public static void DeleteAll()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xE8F02C", Offset = "0xE8F02C", VA = "0xE8F02C")]
		public static void Flush()
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xE8F1AC", Offset = "0xE8F1AC", VA = "0xE8F1AC")]
		private static void Serialize()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xE8DD40", Offset = "0xE8DD40", VA = "0xE8DD40")]
		private static void Deserialize()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xE8F6E4", Offset = "0xE8F6E4", VA = "0xE8F6E4")]
		private static string EscapeNonSeperators(string inputToEscape)
		{
			return null;
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xE8F78C", Offset = "0xE8F78C", VA = "0xE8F78C")]
		private static string DeEscapeNonSeperators(string inputToDeEscape)
		{
			return null;
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xE8F834", Offset = "0xE8F834", VA = "0xE8F834")]
		public static object GetTypeValue(string typeName, string value)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F5")]
	[AudioScriptOrder(-80)]
	[RequireComponent(typeof(AudioSource))]
	public class PlaylistController : MonoBehaviour
	{
		[Token(Token = "0x20002F6")]
		public enum FadeStatus
		{
			[Token(Token = "0x4001106")]
			NotFading,
			[Token(Token = "0x4001107")]
			FadingIn,
			[Token(Token = "0x4001108")]
			FadeingOut
		}

		[Token(Token = "0x20002F7")]
		public enum AudioPlayType
		{
			[Token(Token = "0x400110A")]
			PlayNow,
			[Token(Token = "0x400110B")]
			Schedule,
			[Token(Token = "0x400110C")]
			AlreadyScheduled
		}

		[Token(Token = "0x20002F8")]
		public enum PlaylistStates
		{
			[Token(Token = "0x400110E")]
			NotInScene,
			[Token(Token = "0x400110F")]
			Stopped,
			[Token(Token = "0x4001110")]
			Playing,
			[Token(Token = "0x4001111")]
			Paused,
			[Token(Token = "0x4001112")]
			Crossfading
		}

		[Token(Token = "0x20002F9")]
		public enum FadeMode
		{
			[Token(Token = "0x4001114")]
			None,
			[Token(Token = "0x4001115")]
			GradualFade
		}

		[Token(Token = "0x20002FA")]
		public enum AudioDuckingMode
		{
			[Token(Token = "0x4001117")]
			NotDucking,
			[Token(Token = "0x4001118")]
			SetToDuck,
			[Token(Token = "0x4001119")]
			Ducked,
			[Token(Token = "0x400111A")]
			Unducking
		}

		[Token(Token = "0x20002FB")]
		public delegate void SongChangedEventHandler(string newSongName, MusicSetting song);

		[Token(Token = "0x20002FC")]
		public delegate void SongEndedEventHandler(string songName);

		[Token(Token = "0x20002FD")]
		public delegate void SongLoopedEventHandler(string songName);

		[Token(Token = "0x20002FE")]
		public delegate void PlaylistEndedEventHandler();

		[Token(Token = "0x40010A7")]
		public const int FramesEarlyToTrigger = 2;

		[Token(Token = "0x40010A8")]
		public const int FramesEarlyToBeSyncable = 10;

		[Token(Token = "0x40010A9")]
		private const double UniversalAudioReactionTime = 0.3;

		[Token(Token = "0x40010AA")]
		private const int NextScheduleTimeRecalcConsecutiveFrameCount = 5;

		[Token(Token = "0x40010AB")]
		private const string NotReadyMessage = "Playlist Controller is not initialized yet. It must call its own Awake & Start method before any other methods are called. If you have a script with an Awake or Start event that needs to call it, make sure PlaylistController.cs is set to execute first (Script Execution Order window in Unity). Awake event is still not guaranteed to work, so use Start where possible.";

		[Token(Token = "0x40010AC")]
		private const float MinSongLength = 0.5f;

		[Token(Token = "0x40010AD")]
		private const float SlowestFrameTimeForCalc = 0.3f;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool startPlaylistOnAwake;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool isShuffle;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool isAutoAdvance;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool loopPlaylist;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float _playlistVolume;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isMuted;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string startPlaylistName;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int syncGroupNum;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool ignoreListenerPause;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioMixerGroup mixerChannel;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float spatialBlend;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool initializedEventExpanded;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string initializedCustomEvent;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool crossfadeStartedExpanded;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string crossfadeStartedCustomEvent;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool songChangedEventExpanded;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string songChangedCustomEvent;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool songEndedEventExpanded;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string songEndedCustomEvent;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool songLoopedEventExpanded;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string songLoopedCustomEvent;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool playlistStartedEventExpanded;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string playlistStartedCustomEvent;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool playlistEndedEventExpanded;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string playlistEndedCustomEvent;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioSource _activeAudio;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioSource _transitioningAudio;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float _activeAudioEndVolume;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float _transitioningAudioStartVolume;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _crossFadeStartTime;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly List<int> _clipsRemaining;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int _currentSequentialClipIndex;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private AudioDuckingMode _duckingMode;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _timeToStartUnducking;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _timeToFinishUnducking;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float _originalMusicVolume;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float _initialDuckVolume;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _duckRange;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private SoundGroupVariationUpdater _actorUpdater;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float _unduckTime;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private MusicSetting _currentSong;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private GameObject _go;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private string _name;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private FadeMode _curFadeMode;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float _slowFadeStartTime;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float _slowFadeCompletionTime;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float _slowFadeStartVolume;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float _slowFadeTargetVolume;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private MasterAudio.Playlist _currentPlaylist;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float _lastTimeMissingPlaylistLogged;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Action _fadeCompleteCallback;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly List<MusicSetting> _queuedSongs;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool _lostFocus;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		private bool _autoStartedPlaylist;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private AudioSource _audioClip;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private AudioSource _transClip;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private MusicSetting _newSongSetting;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private bool _nextSongRequested;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		private bool _nextSongScheduled;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private int _lastRandomClipIndex;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float _lastTimeSongRequested;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float _currentDuckVolCut;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private int? _lastSongPosition;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private double? _currentSchedSongDspStartTime;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private double? _currentSchedSongDspEndTime;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private int _lastFrameSongPosition;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private int _nextScheduleTimeRecalcDifferentFirstFrameNum;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private double? _nextScheduledTimeRecalcStart;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private readonly Dictionary<AudioSource, double> _scheduledSongOffsetByAudioSource;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public int _frames;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<PlaylistController> _instances;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Coroutine _resourceCoroutine;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private int _songsPlayedFromPlaylist;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private AudioSource _audio1;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private AudioSource _audio2;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private string _activeSongAlias;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Transform _trans;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private bool _willPersist;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private double? _songPauseTime;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private int framesOfSongPlayed;

		[Token(Token = "0x170001D0")]
		private bool WillSyncToOtherClip
		{
			[Token(Token = "0x6001213")]
			[Address(RVA = "0xE95C70", Offset = "0xE95C70", VA = "0xE95C70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D1")]
		public bool CurrentSongIsPlaying
		{
			[Token(Token = "0x600121B")]
			[Address(RVA = "0xE95E14", Offset = "0xE95E14", VA = "0xE95E14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D2")]
		private bool SongIsNonAdvancible
		{
			[Token(Token = "0x6001229")]
			[Address(RVA = "0xE96F18", Offset = "0xE96F18", VA = "0xE96F18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D3")]
		public bool ControllerIsReady
		{
			[Token(Token = "0x600122B")]
			[Address(RVA = "0xE96F64", Offset = "0xE96F64", VA = "0xE96F64")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600122C")]
			[Address(RVA = "0xE96F6C", Offset = "0xE96F6C", VA = "0xE96F6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		public FadeStatus CurrentFadeStatus
		{
			[Token(Token = "0x600122D")]
			[Address(RVA = "0xE96F78", Offset = "0xE96F78", VA = "0xE96F78")]
			get
			{
				return default(FadeStatus);
			}
		}

		[Token(Token = "0x170001D5")]
		public PlaylistStates PlaylistState
		{
			[Token(Token = "0x600122E")]
			[Address(RVA = "0xE92A4C", Offset = "0xE92A4C", VA = "0xE92A4C")]
			get
			{
				return default(PlaylistStates);
			}
		}

		[Token(Token = "0x170001D6")]
		public AudioSource ActiveAudioSource
		{
			[Token(Token = "0x600122F")]
			[Address(RVA = "0xE91C90", Offset = "0xE91C90", VA = "0xE91C90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D7")]
		public static List<PlaylistController> Instances
		{
			[Token(Token = "0x6001230")]
			[Address(RVA = "0xE92EBC", Offset = "0xE92EBC", VA = "0xE92EBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001231")]
			[Address(RVA = "0xE96FA4", Offset = "0xE96FA4", VA = "0xE96FA4")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public GameObject PlaylistControllerGameObject
		{
			[Token(Token = "0x6001232")]
			[Address(RVA = "0xE96FFC", Offset = "0xE96FFC", VA = "0xE96FFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D9")]
		public AudioSource CurrentPlaylistSource
		{
			[Token(Token = "0x6001233")]
			[Address(RVA = "0xE97004", Offset = "0xE97004", VA = "0xE97004")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DA")]
		public AudioClip CurrentPlaylistClip
		{
			[Token(Token = "0x6001234")]
			[Address(RVA = "0xE9700C", Offset = "0xE9700C", VA = "0xE9700C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DB")]
		public AudioClip FadingPlaylistClip
		{
			[Token(Token = "0x6001235")]
			[Address(RVA = "0xE97094", Offset = "0xE97094", VA = "0xE97094")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DC")]
		public AudioSource FadingSource
		{
			[Token(Token = "0x6001236")]
			[Address(RVA = "0xE97124", Offset = "0xE97124", VA = "0xE97124")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		public bool IsCrossFading
		{
			[Token(Token = "0x6001237")]
			[Address(RVA = "0xE9713C", Offset = "0xE9713C", VA = "0xE9713C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001238")]
			[Address(RVA = "0xE97144", Offset = "0xE97144", VA = "0xE97144")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public bool IsFading
		{
			[Token(Token = "0x6001239")]
			[Address(RVA = "0xE97150", Offset = "0xE97150", VA = "0xE97150")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DF")]
		public float PlaylistVolume
		{
			[Token(Token = "0x600123A")]
			[Address(RVA = "0xE95878", Offset = "0xE95878", VA = "0xE95878")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600123B")]
			[Address(RVA = "0xE97170", Offset = "0xE97170", VA = "0xE97170")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public MasterAudio.Playlist CurrentPlaylist
		{
			[Token(Token = "0x600123D")]
			[Address(RVA = "0xE95F5C", Offset = "0xE95F5C", VA = "0xE95F5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		public bool HasPlaylist
		{
			[Token(Token = "0x600123E")]
			[Address(RVA = "0xE9323C", Offset = "0xE9323C", VA = "0xE9323C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E2")]
		public string PlaylistName
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0xE971B8", Offset = "0xE971B8", VA = "0xE971B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E3")]
		public MusicSetting CurrentSong
		{
			[Token(Token = "0x6001240")]
			[Address(RVA = "0xE97228", Offset = "0xE97228", VA = "0xE97228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E4")]
		private bool IsMuted
		{
			[Token(Token = "0x6001241")]
			[Address(RVA = "0xE97230", Offset = "0xE97230", VA = "0xE97230")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E5")]
		private bool PlaylistIsMuted
		{
			[Token(Token = "0x6001242")]
			[Address(RVA = "0xE933C0", Offset = "0xE933C0", VA = "0xE933C0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		private float CrossFadeTime
		{
			[Token(Token = "0x6001243")]
			[Address(RVA = "0xE92894", Offset = "0xE92894", VA = "0xE92894")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E7")]
		private bool IsAutoAdvance
		{
			[Token(Token = "0x6001244")]
			[Address(RVA = "0xE92914", Offset = "0xE92914", VA = "0xE92914")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E8")]
		public GameObject GameObj
		{
			[Token(Token = "0x6001245")]
			[Address(RVA = "0xE93C30", Offset = "0xE93C30", VA = "0xE93C30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		public string ControllerName
		{
			[Token(Token = "0x6001246")]
			[Address(RVA = "0xE904FC", Offset = "0xE904FC", VA = "0xE904FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EA")]
		public bool CanSchedule
		{
			[Token(Token = "0x6001247")]
			[Address(RVA = "0xE90C1C", Offset = "0xE90C1C", VA = "0xE90C1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EB")]
		private bool IsFrameFastEnough
		{
			[Token(Token = "0x6001248")]
			[Address(RVA = "0xE91300", Offset = "0xE91300", VA = "0xE91300")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EC")]
		private bool ShouldNotSwitchEarly
		{
			[Token(Token = "0x6001249")]
			[Address(RVA = "0xE92A20", Offset = "0xE92A20", VA = "0xE92A20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001ED")]
		private Transform Trans
		{
			[Token(Token = "0x600124A")]
			[Address(RVA = "0xE91218", Offset = "0xE91218", VA = "0xE91218")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EE")]
		public int ClipsRemainingInCurrentPlaylist
		{
			[Token(Token = "0x600124B")]
			[Address(RVA = "0xE97238", Offset = "0xE97238", VA = "0xE97238")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000004")]
		public event SongChangedEventHandler SongChanged
		{
			[Token(Token = "0x60011E0")]
			[Address(RVA = "0xE8FA5C", Offset = "0xE8FA5C", VA = "0xE8FA5C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0xE8FAFC", Offset = "0xE8FAFC", VA = "0xE8FAFC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event SongEndedEventHandler SongEnded
		{
			[Token(Token = "0x60011E2")]
			[Address(RVA = "0xE8FB9C", Offset = "0xE8FB9C", VA = "0xE8FB9C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0xE8FC3C", Offset = "0xE8FC3C", VA = "0xE8FC3C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event SongLoopedEventHandler SongLooped
		{
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0xE8FCDC", Offset = "0xE8FCDC", VA = "0xE8FCDC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60011E5")]
			[Address(RVA = "0xE8FD7C", Offset = "0xE8FD7C", VA = "0xE8FD7C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event PlaylistEndedEventHandler PlaylistEnded
		{
			[Token(Token = "0x60011E6")]
			[Address(RVA = "0xE8FE1C", Offset = "0xE8FE1C", VA = "0xE8FE1C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60011E7")]
			[Address(RVA = "0xE8FEBC", Offset = "0xE8FEBC", VA = "0xE8FEBC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xE8FF5C", Offset = "0xE8FF5C", VA = "0xE8FF5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xE90544", Offset = "0xE90544", VA = "0xE90544")]
		public void SetSpatialBlend()
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xE9085C", Offset = "0xE9085C", VA = "0xE9085C")]
		private void DetectAndRescheduleNextGaplessSongIfOff()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xE90E20", Offset = "0xE90E20", VA = "0xE90E20")]
		private MusicSetting FindSongByAliasOrName(string clipName)
		{
			return null;
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xE90F80", Offset = "0xE90F80", VA = "0xE90F80")]
		private void SetAudiosIfEmpty()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xE907B8", Offset = "0xE907B8", VA = "0xE907B8")]
		private void SetAudioSpatialBlend(float blend)
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xE9100C", Offset = "0xE9100C", VA = "0xE9100C")]
		private void Start()
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xE912A4", Offset = "0xE912A4", VA = "0xE912A4")]
		private void AutoStartPlaylist()
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xE913B8", Offset = "0xE913B8", VA = "0xE913B8")]
		private void CoUpdate()
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xE91810", Offset = "0xE91810", VA = "0xE91810")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xE919B0", Offset = "0xE919B0", VA = "0xE919B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xE91D50", Offset = "0xE91D50", VA = "0xE91D50")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xE91D5C", Offset = "0xE91D5C", VA = "0xE91D5C")]
		private void Update()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xE92D3C", Offset = "0xE92D3C", VA = "0xE92D3C")]
		public static PlaylistController InstanceByName(string playlistControllerName, bool errorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xE930EC", Offset = "0xE930EC", VA = "0xE930EC")]
		public bool IsSongPlaying(string songName)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xE9324C", Offset = "0xE9324C", VA = "0xE9324C")]
		public void ClearQueue()
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xE93310", Offset = "0xE93310", VA = "0xE93310")]
		public void ToggleMutePlaylist()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xE912F8", Offset = "0xE912F8", VA = "0xE912F8")]
		public void MutePlaylist()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xE933B8", Offset = "0xE933B8", VA = "0xE933B8")]
		public void UnmutePlaylist()
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xE93514", Offset = "0xE93514", VA = "0xE93514")]
		public void PausePlaylist()
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xE936F8", Offset = "0xE936F8", VA = "0xE936F8")]
		public bool UnpausePlaylist()
		{
			return default(bool);
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xE916E4", Offset = "0xE916E4", VA = "0xE916E4")]
		public void StopPlaylist(bool onlyFadingClip = false)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xE93CBC", Offset = "0xE93CBC", VA = "0xE93CBC")]
		public void FadeToVolume(float targetVolume, float fadeTime, [Optional] Action callback)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xE93DE4", Offset = "0xE93DE4", VA = "0xE93DE4")]
		public void PlayRandomSong()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xE93E6C", Offset = "0xE93E6C", VA = "0xE93E6C")]
		public void PlayARandomSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xE9403C", Offset = "0xE9403C", VA = "0xE9403C")]
		private void RemoveRandomClip(int randIndex)
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xE94860", Offset = "0xE94860", VA = "0xE94860")]
		private void PlayFirstQueuedSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xE8B6E8", Offset = "0xE8B6E8", VA = "0xE8B6E8")]
		public void PlayNextSong()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xE949AC", Offset = "0xE949AC", VA = "0xE949AC")]
		public void PlayTheNextSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xE94B34", Offset = "0xE94B34", VA = "0xE94B34")]
		private void AdvanceSongCounter()
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xE94BA4", Offset = "0xE94BA4", VA = "0xE94BA4")]
		public void StopPlaylistAfterCurrentSong()
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xE94D90", Offset = "0xE94D90", VA = "0xE94D90")]
		public void StopLoopingCurrentSong()
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xE94F20", Offset = "0xE94F20", VA = "0xE94F20")]
		public void QueuePlaylistClip(string clipName, bool scheduleNow = true)
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xE95314", Offset = "0xE95314", VA = "0xE95314")]
		public bool TriggerPlaylistClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xE95628", Offset = "0xE95628", VA = "0xE95628")]
		public void EndDucking(SoundGroupVariationUpdater actorUpdater)
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xE956BC", Offset = "0xE956BC", VA = "0xE956BC")]
		public void DuckMusicForTime(SoundGroupVariationUpdater actorUpdater, float duckLength, float unduckTime, float pitch, float duckedTimePercentage, float duckedVolCut)
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xE95850", Offset = "0xE95850", VA = "0xE95850")]
		private void InitControllerIfNot()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xE915D4", Offset = "0xE915D4", VA = "0xE915D4")]
		public void UpdateMasterVolume()
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xE958D8", Offset = "0xE958D8", VA = "0xE958D8")]
		public void StartPlaylist(string playlistName, [Optional] string clipName)
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xE95A40", Offset = "0xE95A40", VA = "0xE95A40")]
		public void ChangePlaylist(string playlistName, bool playFirstClip = true, [Optional] string clipName)
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xE93AC8", Offset = "0xE93AC8", VA = "0xE93AC8")]
		private void FinishPlaylistInit(bool playFirstClip = true, [Optional] string clipName)
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xE959B0", Offset = "0xE959B0", VA = "0xE959B0")]
		public void RestartPlaylist([Optional] string clipName)
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xE95B84", Offset = "0xE95B84", VA = "0xE95B84")]
		private void CheckIfPlaylistStarted()
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xE95CA8", Offset = "0xE95CA8", VA = "0xE95CA8")]
		private PlaylistController FindOtherControllerInSameSyncGroup()
		{
			return null;
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xE92B38", Offset = "0xE92B38", VA = "0xE92B38")]
		private void FadeOutPlaylist()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xE911F0", Offset = "0xE911F0", VA = "0xE911F0")]
		private void InitializePlaylist()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xE91324", Offset = "0xE91324", VA = "0xE91324")]
		private void PlayNextOrRandom(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xE92940", Offset = "0xE92940", VA = "0xE92940")]
		private void FirePlaylistEndedEventIfAny()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xE94658", Offset = "0xE94658", VA = "0xE94658")]
		private void FillClips()
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xE940CC", Offset = "0xE940CC", VA = "0xE940CC")]
		private void PlaySong(MusicSetting setting, AudioPlayType playType)
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xE96B34", Offset = "0xE96B34", VA = "0xE96B34")]
		public double? ScheduledGaplessNextSongStartTime()
		{
			return null;
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xE96000", Offset = "0xE96000", VA = "0xE96000")]
		public void FinishLoadingNewSong(MusicSetting songSetting, AudioClip clipToPlay, AudioPlayType playType)
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xE96DEC", Offset = "0xE96DEC", VA = "0xE96DEC")]
		private void RemoveScheduledClip()
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xE94F18", Offset = "0xE94F18", VA = "0xE94F18")]
		private void ScheduleNextSong()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xE92C34", Offset = "0xE92C34", VA = "0xE92C34")]
		private void FadeInScheduledSong()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xE96BF0", Offset = "0xE96BF0", VA = "0xE96BF0")]
		private double CalculateNextTrackStartTimeOffset()
		{
			return default(double);
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xE96E88", Offset = "0xE96E88", VA = "0xE96E88")]
		private double GetClipDuration(AudioSource src)
		{
			return default(double);
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xE90CA4", Offset = "0xE90CA4", VA = "0xE90CA4")]
		private void ScheduleClipPlay(double scheduledPlayTimeOffset, AudioSource source, bool calledAfterPause, bool addDspTime = true)
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xE96CC8", Offset = "0xE96CC8", VA = "0xE96CC8")]
		private void CrossFadeNow(AudioSource audioClip)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xE92418", Offset = "0xE92418", VA = "0xE92418")]
		private void CeaseAudioSource(AudioSource source)
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xE927B4", Offset = "0xE927B4", VA = "0xE927B4")]
		private void SetDuckProperties()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xE92C3C", Offset = "0xE92C3C", VA = "0xE92C3C")]
		private void AudioDucking()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xE96F00", Offset = "0xE96F00", VA = "0xE96F00")]
		private void ResetDuckingState()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xE95EDC", Offset = "0xE95EDC", VA = "0xE95EDC")]
		private bool SongShouldLoop(MusicSetting setting)
		{
			return default(bool);
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xE97178", Offset = "0xE97178", VA = "0xE97178")]
		public void RouteToMixerChannel(AudioMixerGroup group)
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xE97280", Offset = "0xE97280", VA = "0xE97280")]
		public PlaylistController()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public static class SpatializerHelper
	{
		[Token(Token = "0x400111D")]
		private const string OculusSpatializer = "OculusSpatializer";

		[Token(Token = "0x400111E")]
		private const string ResonanceAudioSpatializer = "Resonance Audio";

		[Token(Token = "0x170001EF")]
		public static bool IsSupportedSpatializer
		{
			[Token(Token = "0x600125F")]
			[Address(RVA = "0xE9798C", Offset = "0xE9798C", VA = "0xE9798C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F0")]
		public static bool IsOculusAudioSpatializer
		{
			[Token(Token = "0x6001260")]
			[Address(RVA = "0xE97A1C", Offset = "0xE97A1C", VA = "0xE97A1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F1")]
		public static bool IsResonanceAudioSpatializer
		{
			[Token(Token = "0x6001261")]
			[Address(RVA = "0xE97A68", Offset = "0xE97A68", VA = "0xE97A68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F2")]
		public static string SelectedSpatializer
		{
			[Token(Token = "0x6001262")]
			[Address(RVA = "0xE97A14", Offset = "0xE97A14", VA = "0xE97A14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		public static bool SpatializerOptionExists
		{
			[Token(Token = "0x6001263")]
			[Address(RVA = "0xE97AB4", Offset = "0xE97AB4", VA = "0xE97AB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xE90684", Offset = "0xE90684", VA = "0xE90684")]
		public static void TurnOnSpatializerIfEnabled(AudioSource source)
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xE97ABC", Offset = "0xE97ABC", VA = "0xE97ABC")]
		private static void SetSpatializerToggleOnSource(AudioSource source, bool enabled)
		{
		}
	}
	[Token(Token = "0x2000301")]
	public static class UtilStrings
	{
		[Token(Token = "0x6001266")]
		[Address(RVA = "0xE97B00", Offset = "0xE97B00", VA = "0xE97B00")]
		public static string TrimSpace(string untrimmed)
		{
			return null;
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xE97B78", Offset = "0xE97B78", VA = "0xE97B78")]
		public static string ReplaceUnsafeChars(string source)
		{
			return null;
		}
	}
}
namespace DarkTonic.MasterAudio.Examples
{
	[Token(Token = "0x2000302")]
	public class MA_Bootstrapper : MonoBehaviour
	{
		[Token(Token = "0x6001268")]
		[Address(RVA = "0xE97C5C", Offset = "0xE97C5C", VA = "0xE97C5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xE97C60", Offset = "0xE97C60", VA = "0xE97C60")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xE97D8C", Offset = "0xE97D8C", VA = "0xE97D8C")]
		public MA_Bootstrapper()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public class MA_DestroyFinishedParticle : MonoBehaviour
	{
		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem particles;

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xE97D94", Offset = "0xE97D94", VA = "0xE97D94")]
		private void Awake()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xE97DFC", Offset = "0xE97DFC", VA = "0xE97DFC")]
		private void Update()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xE97E8C", Offset = "0xE97E8C", VA = "0xE97E8C")]
		public MA_DestroyFinishedParticle()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class MA_EnemyOne : MonoBehaviour
	{
		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ExplosionParticlePrefab;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _trans;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _speed;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _horizSpeed;

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xE97E94", Offset = "0xE97E94", VA = "0xE97E94")]
		private void Awake()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xE97F84", Offset = "0xE97F84", VA = "0xE97F84")]
		private void Update()
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xE980CC", Offset = "0xE980CC", VA = "0xE980CC")]
		public MA_EnemyOne()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class MA_EnemySpawner : MonoBehaviour
	{
		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Enemy;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool spawnerEnabled;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform trans;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float nextSpawnTime;

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xE980D4", Offset = "0xE980D4", VA = "0xE980D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xE98140", Offset = "0xE98140", VA = "0xE98140")]
		private void Update()
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xE982CC", Offset = "0xE982CC", VA = "0xE982CC")]
		public MA_EnemySpawner()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class MA_GameScene : MonoBehaviour
	{
		[Token(Token = "0x6001274")]
		[Address(RVA = "0xE982D4", Offset = "0xE982D4", VA = "0xE982D4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xE9837C", Offset = "0xE9837C", VA = "0xE9837C")]
		public MA_GameScene()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class MA_Laser : MonoBehaviour
	{
		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _trans;

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xE98384", Offset = "0xE98384", VA = "0xE98384")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xE9841C", Offset = "0xE9841C", VA = "0xE9841C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xE984F8", Offset = "0xE984F8", VA = "0xE984F8")]
		public MA_Laser()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class MA_LocalizationUI : MonoBehaviour
	{
		[Token(Token = "0x6001279")]
		[Address(RVA = "0xE98500", Offset = "0xE98500", VA = "0xE98500")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xE985A8", Offset = "0xE985A8", VA = "0xE985A8")]
		public MA_LocalizationUI()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class MA_PlayerControl : MonoBehaviour
	{
		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool canShoot;

		[Token(Token = "0x400112B")]
		private const float MoveSpeed = 10f;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform _trans;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _lastMoveAmt;

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xE985B0", Offset = "0xE985B0", VA = "0xE985B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xE98648", Offset = "0xE98648", VA = "0xE98648")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xE9864C", Offset = "0xE9864C", VA = "0xE9864C")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xE98650", Offset = "0xE98650", VA = "0xE98650")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xE98654", Offset = "0xE98654", VA = "0xE98654")]
		private void Update()
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xE98880", Offset = "0xE98880", VA = "0xE98880")]
		public MA_PlayerControl()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class MA_PlayerSpawnerControl : MonoBehaviour
	{
		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Player;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float nextSpawnTime;

		[Token(Token = "0x170001F4")]
		private bool PlayerActive
		{
			[Token(Token = "0x6001282")]
			[Address(RVA = "0xE988B4", Offset = "0xE988B4", VA = "0xE988B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xE98890", Offset = "0xE98890", VA = "0xE98890")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xE988D0", Offset = "0xE988D0", VA = "0xE988D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xE98948", Offset = "0xE98948", VA = "0xE98948")]
		public MA_PlayerSpawnerControl()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class MA_SampleICustomEventReceiver : MonoBehaviour, ICustomEventReceiver
	{
		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<string> _eventsSubscribedTo;

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xE98950", Offset = "0xE98950", VA = "0xE98950")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xE98954", Offset = "0xE98954", VA = "0xE98954")]
		private void Start()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xE98AB0", Offset = "0xE98AB0", VA = "0xE98AB0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xE98B24", Offset = "0xE98B24", VA = "0xE98B24")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xE98958", Offset = "0xE98958", VA = "0xE98958", Slot = "4")]
		public void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xE98C74", Offset = "0xE98C74", VA = "0xE98C74", Slot = "5")]
		public void ReceiveEvent(string customEventName, Vector3 originPoint)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xE98DA4", Offset = "0xE98DA4", VA = "0xE98DA4", Slot = "6")]
		public bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xE98AB4", Offset = "0xE98AB4", VA = "0xE98AB4", Slot = "7")]
		public void RegisterReceiver()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xE98C1C", Offset = "0xE98C1C", VA = "0xE98C1C", Slot = "8")]
		public void UnregisterReceiver()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xE98E1C", Offset = "0xE98E1C", VA = "0xE98E1C", Slot = "9")]
		public IList<AudioEventGroup> GetAllEvents()
		{
			return null;
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xE98FA8", Offset = "0xE98FA8", VA = "0xE98FA8")]
		public MA_SampleICustomEventReceiver()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class MA_TestUI : MonoBehaviour
	{
		[Token(Token = "0x6001290")]
		[Address(RVA = "0xE9912C", Offset = "0xE9912C", VA = "0xE9912C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xE991D4", Offset = "0xE991D4", VA = "0xE991D4")]
		public MA_TestUI()
		{
		}
	}
}
namespace Crosstales
{
	[Token(Token = "0x200030D")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3 flat;

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xE991DC", Offset = "0xE991DC", VA = "0xE991DC")]
		public static string CTToTitleCase(this string str)
		{
			return null;
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xE9927C", Offset = "0xE9927C", VA = "0xE9927C")]
		public static string CTReverse(this string str)
		{
			return null;
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xE992F4", Offset = "0xE992F4", VA = "0xE992F4")]
		public static string CTReplace(this string str, string oldString, string newString, StringComparison comp = StringComparison.OrdinalIgnoreCase)
		{
			return null;
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xE99380", Offset = "0xE99380", VA = "0xE99380")]
		public static bool CTEquals(this string str, string toCheck, StringComparison comp = StringComparison.OrdinalIgnoreCase)
		{
			return default(bool);
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xE99390", Offset = "0xE99390", VA = "0xE99390")]
		public static bool CTContains(this string str, string toCheck, StringComparison comp = StringComparison.OrdinalIgnoreCase)
		{
			return default(bool);
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xE993B0", Offset = "0xE993B0", VA = "0xE993B0")]
		public static bool CTContainsAny(this string str, string searchTerms, char splitChar = ' ')
		{
			return default(bool);
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xE99528", Offset = "0xE99528", VA = "0xE99528")]
		public static bool CTContainsAll(this string str, string searchTerms, char splitChar = ' ')
		{
			return default(bool);
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xE996A0", Offset = "0xE996A0", VA = "0xE996A0")]
		public static string CTRemoveNewLines(this string str, string replacement = "#nl#", [Optional] string newLine)
		{
			return null;
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xE996F4", Offset = "0xE996F4", VA = "0xE996F4")]
		public static string CTAddNewLines(this string str, string replacement = "#nl#", [Optional] string newLine)
		{
			return null;
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xE99798", Offset = "0xE99798", VA = "0xE99798")]
		public static bool CTisNumeric(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xE997BC", Offset = "0xE997BC", VA = "0xE997BC")]
		public static bool CTisInteger(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xE99834", Offset = "0xE99834", VA = "0xE99834")]
		public static bool CTisEmail(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xE998B4", Offset = "0xE998B4", VA = "0xE998B4")]
		public static bool CTisWebsite(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xE99934", Offset = "0xE99934", VA = "0xE99934")]
		public static bool CTisCreditcard(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xE999B4", Offset = "0xE999B4", VA = "0xE999B4")]
		public static bool CTisIPv4(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xE99A34", Offset = "0xE99A34", VA = "0xE99A34")]
		public static bool CTisAlphanumeric(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xE99AB4", Offset = "0xE99AB4", VA = "0xE99AB4")]
		public static bool CThasLineEndings(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xE99B34", Offset = "0xE99B34", VA = "0xE99B34")]
		public static bool CThasInvalidChars(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xE99BB4", Offset = "0xE99BB4", VA = "0xE99BB4")]
		public static bool CTStartsWith(this string str, string toCheck, StringComparison comp = StringComparison.OrdinalIgnoreCase)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xE99C08", Offset = "0xE99C08", VA = "0xE99C08")]
		public static bool CTEndsWith(this string str, string toCheck, StringComparison comp = StringComparison.OrdinalIgnoreCase)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xE99C5C", Offset = "0xE99C5C", VA = "0xE99C5C")]
		public static int CTLastIndexOf(this string str, string toCheck, StringComparison comp = StringComparison.OrdinalIgnoreCase)
		{
			return default(int);
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xE99CFC", Offset = "0xE99CFC", VA = "0xE99CFC")]
		public static int CTIndexOf(this string str, string toCheck, StringComparison comp = StringComparison.OrdinalIgnoreCase)
		{
			return default(int);
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xE99D9C", Offset = "0xE99D9C", VA = "0xE99D9C")]
		public static int CTIndexOf(this string str, string toCheck, int startIndex, StringComparison comp = StringComparison.OrdinalIgnoreCase)
		{
			return default(int);
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xE99E50", Offset = "0xE99E50", VA = "0xE99E50")]
		public static string CTToBase64(this string str, [Optional] Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xE99F58", Offset = "0xE99F58", VA = "0xE99F58")]
		public static string CTFromBase64(this string str, [Optional] Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xE99FF8", Offset = "0xE99FF8", VA = "0xE99FF8")]
		public static byte[] CTFromBase64ToByteArray(this string str)
		{
			return null;
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xE9A064", Offset = "0xE9A064", VA = "0xE9A064")]
		public static string CTToHex(this string str, bool addPrefix = false)
		{
			return null;
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xE9A1B4", Offset = "0xE9A1B4", VA = "0xE9A1B4")]
		public static string CTHexToString(this string hexString)
		{
			return null;
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xE9A394", Offset = "0xE9A394", VA = "0xE9A394")]
		public static Color32 CTHexToColor32(this string hexString)
		{
			return default(Color32);
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xE9A618", Offset = "0xE9A618", VA = "0xE9A618")]
		public static Color CTHexToColor(this string hexString)
		{
			return default(Color);
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xE9A6A8", Offset = "0xE9A6A8", VA = "0xE9A6A8")]
		public static byte[] CTToByteArray(this string str, [Optional] Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xE9A6FC", Offset = "0xE9A6FC", VA = "0xE9A6FC")]
		public static string CTClearTags(this string str)
		{
			return null;
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xE9A7A8", Offset = "0xE9A7A8", VA = "0xE9A7A8")]
		public static string CTClearSpaces(this string str)
		{
			return null;
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xE9A84C", Offset = "0xE9A84C", VA = "0xE9A84C")]
		public static string CTClearLineEndings(this string str)
		{
			return null;
		}

		[Token(Token = "0x60012B4")]
		public static void CTShuffle<T>(this T[] array, int seed = 0)
		{
		}

		[Token(Token = "0x60012B5")]
		public static string CTDump<T>(this T[] array, string prefix = "", string postfix = "", bool appendNewLine = true, string delimiter = "; ")
		{
			return null;
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xE9A8F8", Offset = "0xE9A8F8", VA = "0xE9A8F8")]
		public static string CTDump(this Quaternion[] array)
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xE9AA88", Offset = "0xE9AA88", VA = "0xE9AA88")]
		public static string CTDump(this Vector2[] array)
		{
			return null;
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xE9ABC8", Offset = "0xE9ABC8", VA = "0xE9ABC8")]
		public static string CTDump(this Vector3[] array)
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xE9AD38", Offset = "0xE9AD38", VA = "0xE9AD38")]
		public static string CTDump(this Vector4[] array)
		{
			return null;
		}

		[Token(Token = "0x60012BA")]
		public static string[] CTToStringArray<T>(this T[] array)
		{
			return null;
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xE9AEC8", Offset = "0xE9AEC8", VA = "0xE9AEC8")]
		public static float[] CTToFloatArray(this byte[] array, int count = 0)
		{
			return null;
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xE9B05C", Offset = "0xE9B05C", VA = "0xE9B05C")]
		public static byte[] CTToByteArray(this float[] array, int count = 0)
		{
			return null;
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xE9B19C", Offset = "0xE9B19C", VA = "0xE9B19C")]
		public static Texture2D CTToTexture(this byte[] data)
		{
			return null;
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xE9B264", Offset = "0xE9B264", VA = "0xE9B264")]
		public static Sprite CTToSprite(this byte[] data)
		{
			return null;
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xE9B3B8", Offset = "0xE9B3B8", VA = "0xE9B3B8")]
		public static string CTToString(this byte[] data, [Optional] Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xE99EEC", Offset = "0xE99EEC", VA = "0xE99EEC")]
		public static string CTToBase64(this byte[] data)
		{
			return null;
		}

		[Token(Token = "0x60012C1")]
		public static void CTShuffle<T>(this IList<T> list, int seed = 0)
		{
		}

		[Token(Token = "0x60012C2")]
		public static string CTDump<T>(this IList<T> list, string prefix = "", string postfix = "", bool appendNewLine = true, string delimiter = "; ")
		{
			return null;
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xE9B400", Offset = "0xE9B400", VA = "0xE9B400")]
		public static string CTDump(this IList<Quaternion> list)
		{
			return null;
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xE9B82C", Offset = "0xE9B82C", VA = "0xE9B82C")]
		public static string CTDump(this IList<Vector2> list)
		{
			return null;
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xE9BBF4", Offset = "0xE9BBF4", VA = "0xE9BBF4")]
		public static string CTDump(this IList<Vector3> list)
		{
			return null;
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xE9BFF4", Offset = "0xE9BFF4", VA = "0xE9BFF4")]
		public static string CTDump(this IList<Vector4> list)
		{
			return null;
		}

		[Token(Token = "0x60012C7")]
		public static List<string> CTToString<T>(this IList<T> list)
		{
			return null;
		}

		[Token(Token = "0x60012C8")]
		public static string CTDump<K, V>(this IDictionary<K, V> dict, string prefix = "", string postfix = "", bool appendNewLine = true, string delimiter = "; ")
		{
			return null;
		}

		[Token(Token = "0x60012C9")]
		public static void CTAddRange<K, V>(this IDictionary<K, V> dict, IDictionary<K, V> collection)
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xE9C420", Offset = "0xE9C420", VA = "0xE9C420")]
		public static byte[] CTReadFully(this Stream input)
		{
			return null;
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xE9C620", Offset = "0xE9C620", VA = "0xE9C620")]
		public static string CTToHexRGB(this Color32 input)
		{
			return null;
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xE9C6CC", Offset = "0xE9C6CC", VA = "0xE9C6CC")]
		public static string CTToHexRGB(this Color input)
		{
			return null;
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xE9C6D4", Offset = "0xE9C6D4", VA = "0xE9C6D4")]
		public static string CTToHexRGBA(this Color32 input)
		{
			return null;
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xE9C780", Offset = "0xE9C780", VA = "0xE9C780")]
		public static string CTToHexRGBA(this Color input)
		{
			return null;
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xE9C788", Offset = "0xE9C788", VA = "0xE9C788")]
		public static Vector3 CTVector3(this Color32 color)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xE9C820", Offset = "0xE9C820", VA = "0xE9C820")]
		public static Vector3 CTVector3(this Color color)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xE9C824", Offset = "0xE9C824", VA = "0xE9C824")]
		public static Vector4 CTVector4(this Color32 color)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xE9C8CC", Offset = "0xE9C8CC", VA = "0xE9C8CC")]
		public static Vector4 CTVector4(this Color color)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xE9C8D0", Offset = "0xE9C8D0", VA = "0xE9C8D0")]
		public static Vector2 CTMultiply(this Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xE9C8DC", Offset = "0xE9C8DC", VA = "0xE9C8DC")]
		public static Vector3 CTMultiply(this Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xE9C8EC", Offset = "0xE9C8EC", VA = "0xE9C8EC")]
		public static Vector3 CTFlatten(this Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xE9C970", Offset = "0xE9C970", VA = "0xE9C970")]
		public static Quaternion CTQuaternion(this Vector3 eulerAngle)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xE9C98C", Offset = "0xE9C98C", VA = "0xE9C98C")]
		public static Color CTColorRGB(this Vector3 rgb, float alpha = 1f)
		{
			return default(Color);
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xE9C9C8", Offset = "0xE9C9C8", VA = "0xE9C9C8")]
		public static Vector4 CTMultiply(this Vector4 a, Vector4 b)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xE9C9DC", Offset = "0xE9C9DC", VA = "0xE9C9DC")]
		public static Quaternion CTQuaternion(this Vector4 angle)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xE9C9E0", Offset = "0xE9C9E0", VA = "0xE9C9E0")]
		public static Color CTColorRGBA(this Vector4 rgba)
		{
			return default(Color);
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xE9CA1C", Offset = "0xE9CA1C", VA = "0xE9CA1C")]
		public static Vector3 CTVector3(this Quaternion angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xE9CA48", Offset = "0xE9CA48", VA = "0xE9CA48")]
		public static Vector4 CTVector4(this Quaternion angle)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xE9CA4C", Offset = "0xE9CA4C", VA = "0xE9CA4C")]
		public static Vector3 CTCorrectLossyScale(this Canvas canvas)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xE9CC64", Offset = "0xE9CC64", VA = "0xE9CC64")]
		public static void CTGetLocalCorners(this RectTransform transform, Vector3[] fourCornersArray, Canvas canvas, float inset = 0f, bool corrected = false)
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xE9CED4", Offset = "0xE9CED4", VA = "0xE9CED4")]
		public static Vector3[] CTGetLocalCorners(this RectTransform transform, Canvas canvas, float inset = 0f, bool corrected = false)
		{
			return null;
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xE9CF8C", Offset = "0xE9CF8C", VA = "0xE9CF8C")]
		public static void CTGetScreenCorners(this RectTransform transform, Vector3[] fourCornersArray, Canvas canvas, float inset = 0f, bool corrected = false)
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xE9D268", Offset = "0xE9D268", VA = "0xE9D268")]
		public static Vector3[] CTGetScreenCorners(this RectTransform transform, Canvas canvas, float inset = 0f, bool corrected = false)
		{
			return null;
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xE9D320", Offset = "0xE9D320", VA = "0xE9D320")]
		public static Bounds CTGetBounds(this RectTransform transform, float uiScaleFactor = 1f)
		{
			return default(Bounds);
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xE9D868", Offset = "0xE9D868", VA = "0xE9D868")]
		public static void CTSetLeft(this RectTransform transform, float value)
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xE9D944", Offset = "0xE9D944", VA = "0xE9D944")]
		public static void CTSetRight(this RectTransform transform, float value)
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xE9DA20", Offset = "0xE9DA20", VA = "0xE9DA20")]
		public static void CTSetTop(this RectTransform transform, float value)
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xE9DAFC", Offset = "0xE9DAFC", VA = "0xE9DAFC")]
		public static void CTSetBottom(this RectTransform transform, float value)
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xE9DBD8", Offset = "0xE9DBD8", VA = "0xE9DBD8")]
		public static float CTGetLeft(this RectTransform transform)
		{
			return default(float);
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xE9DC98", Offset = "0xE9DC98", VA = "0xE9DC98")]
		public static float CTGetRight(this RectTransform transform)
		{
			return default(float);
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xE9DD58", Offset = "0xE9DD58", VA = "0xE9DD58")]
		public static float CTGetTop(this RectTransform transform)
		{
			return default(float);
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xE9DE20", Offset = "0xE9DE20", VA = "0xE9DE20")]
		public static float CTGetBottom(this RectTransform transform)
		{
			return default(float);
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xE9DEE8", Offset = "0xE9DEE8", VA = "0xE9DEE8")]
		public static Vector4 CTGetLRTB(this RectTransform transform)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xE9DFF0", Offset = "0xE9DFF0", VA = "0xE9DFF0")]
		public static void CTSetLRTB(this RectTransform transform, Vector4 lrtb)
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xE9E0EC", Offset = "0xE9E0EC", VA = "0xE9E0EC")]
		public static List<GameObject> CTFindAll(this UnityEngine.Component component, string name, int maxDepth = 0)
		{
			return null;
		}

		[Token(Token = "0x60012EE")]
		public static List<T> CTFindAll<T>(this UnityEngine.Component component, string name) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xE9E8E0", Offset = "0xE9E8E0", VA = "0xE9E8E0")]
		public static GameObject CTFind(this MonoBehaviour mb, string name)
		{
			return null;
		}

		[Token(Token = "0x60012F0")]
		public static T CTFind<T>(this MonoBehaviour mb, string name)
		{
			return (T)null;
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xE9EB00", Offset = "0xE9EB00", VA = "0xE9EB00")]
		public static GameObject CTFind(this GameObject go, string name)
		{
			return null;
		}

		[Token(Token = "0x60012F2")]
		public static T CTFind<T>(this GameObject go, string name)
		{
			return (T)null;
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xE9EC10", Offset = "0xE9EC10", VA = "0xE9EC10")]
		public static Bounds CTGetBounds(this GameObject go)
		{
			return default(Bounds);
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xE9E9F0", Offset = "0xE9E9F0", VA = "0xE9E9F0")]
		public static Transform CTFind(this Transform transform, string name)
		{
			return null;
		}

		[Token(Token = "0x60012F5")]
		public static T CTFind<T>(this Transform transform, string name)
		{
			return (T)null;
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xE9F1F0", Offset = "0xE9F1F0", VA = "0xE9F1F0")]
		public static byte[] CTToPNG(this Sprite sprite)
		{
			return null;
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xE9F39C", Offset = "0xE9F39C", VA = "0xE9F39C")]
		public static byte[] CTToJPG(this Sprite sprite)
		{
			return null;
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xE9F548", Offset = "0xE9F548", VA = "0xE9F548")]
		public static byte[] CTToTGA(this Sprite sprite)
		{
			return null;
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xE9F6F4", Offset = "0xE9F6F4", VA = "0xE9F6F4")]
		public static byte[] CTToEXR(this Sprite sprite)
		{
			return null;
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xE9F2E4", Offset = "0xE9F2E4", VA = "0xE9F2E4")]
		public static byte[] CTToPNG(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xE9F490", Offset = "0xE9F490", VA = "0xE9F490")]
		public static byte[] CTToJPG(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xE9F63C", Offset = "0xE9F63C", VA = "0xE9F63C")]
		public static byte[] CTToTGA(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xE9F7E8", Offset = "0xE9F7E8", VA = "0xE9F7E8")]
		public static byte[] CTToEXR(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xE9F8A0", Offset = "0xE9F8A0", VA = "0xE9F8A0")]
		public static Sprite CTToSprite(this Texture2D texture, float pixelsPerUnit = 100f)
		{
			return null;
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xE9F9D0", Offset = "0xE9F9D0", VA = "0xE9F9D0")]
		public static Texture2D CTRotate90(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xE9FD20", Offset = "0xE9FD20", VA = "0xE9FD20")]
		public static Texture2D CTRotate180(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xE9FF3C", Offset = "0xE9FF3C", VA = "0xE9FF3C")]
		public static Texture2D CTRotate270(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xEA0210", Offset = "0xEA0210", VA = "0xEA0210")]
		public static Texture2D CTToTexture2D(this Texture texture)
		{
			return null;
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xEA0318", Offset = "0xEA0318", VA = "0xEA0318")]
		public static Texture2D CTFlipHorizontal(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xEA0454", Offset = "0xEA0454", VA = "0xEA0454")]
		public static Texture2D CTFlipVertical(this Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xEA059C", Offset = "0xEA059C", VA = "0xEA059C")]
		public static bool CTHasActiveClip(this AudioSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xEA06AC", Offset = "0xEA06AC", VA = "0xEA06AC")]
		public static bool CTIsVisibleFrom(this Renderer renderer, Camera camera)
		{
			return default(bool);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xE9EE40", Offset = "0xE9EE40", VA = "0xE9EE40")]
		private static Transform deepSearch(Transform parent, string name)
		{
			return null;
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xE9E4DC", Offset = "0xE9E4DC", VA = "0xE9E4DC")]
		private static List<Transform> getAllChildren(this Transform parent, int maxDepth = 0, [Optional] List<Transform> transformList, int depth = 0)
		{
			return null;
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xE9B040", Offset = "0xE9B040", VA = "0xE9B040")]
		private static float bytesToFloat(byte firstByte, byte secondByte)
		{
			return default(float);
		}
	}
}
namespace Crosstales.UI
{
	[Token(Token = "0x2000314")]
	public class Social : MonoBehaviour
	{
		[Token(Token = "0x6001318")]
		[Address(RVA = "0xEA0A70", Offset = "0xEA0A70", VA = "0xEA0A70")]
		public void Facebook()
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xEA0AB4", Offset = "0xEA0AB4", VA = "0xEA0AB4")]
		public void Twitter()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xEA0AF8", Offset = "0xEA0AF8", VA = "0xEA0AF8")]
		public void LinkedIn()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xEA0B3C", Offset = "0xEA0B3C", VA = "0xEA0B3C")]
		public void Youtube()
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xEA0B80", Offset = "0xEA0B80", VA = "0xEA0B80")]
		public void Discord()
		{
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xEA0BC4", Offset = "0xEA0BC4", VA = "0xEA0BC4")]
		public Social()
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class StaticManager : MonoBehaviour
	{
		[Token(Token = "0x600131E")]
		[Address(RVA = "0xEA0BCC", Offset = "0xEA0BCC", VA = "0xEA0BCC")]
		public void Quit()
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xEA0BD4", Offset = "0xEA0BD4", VA = "0xEA0BD4")]
		public void OpenCrosstales()
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xEA0C18", Offset = "0xEA0C18", VA = "0xEA0C18")]
		public void OpenAssetstore()
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xEA0C5C", Offset = "0xEA0C5C", VA = "0xEA0C5C")]
		public StaticManager()
		{
		}
	}
	[Token(Token = "0x2000316")]
	[DisallowMultipleComponent]
	public class UIDrag : MonoBehaviour
	{
		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float offsetX;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float offsetY;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform tf;

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xEA0C64", Offset = "0xEA0C64", VA = "0xEA0C64")]
		private void Start()
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xEA0C88", Offset = "0xEA0C88", VA = "0xEA0C88")]
		public void BeginDrag()
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xEA0CDC", Offset = "0xEA0CDC", VA = "0xEA0CDC")]
		public void OnDrag()
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xEA0D40", Offset = "0xEA0D40", VA = "0xEA0D40")]
		public UIDrag()
		{
		}
	}
	[Token(Token = "0x2000317")]
	[DisallowMultipleComponent]
	public class UIFocus : MonoBehaviour
	{
		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Name of the gameobject containing the UIWindowManager.")]
		public string ManagerName;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UIWindowManager manager;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Image image;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform tf;

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xEA0D48", Offset = "0xEA0D48", VA = "0xEA0D48")]
		private void Start()
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xEA0D4C", Offset = "0xEA0D4C", VA = "0xEA0D4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xEA0E30", Offset = "0xEA0E30", VA = "0xEA0E30")]
		public void OnPanelEnter()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xEA0F38", Offset = "0xEA0F38", VA = "0xEA0F38")]
		public UIFocus()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class UIHint : MonoBehaviour
	{
		[Token(Token = "0x2000319")]
		[CompilerGenerated]
		private sealed class <lerpAlphaDown>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEngine.Component gameObjectToFade;

			[Token(Token = "0x4001149")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UIHint <>4__this;

			[Token(Token = "0x400114A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float startAlphaValue;

			[Token(Token = "0x400114B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float endAlphaValue;

			[Token(Token = "0x400114C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float delay;

			[Token(Token = "0x400114D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float time;

			[Token(Token = "0x170001F5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001333")]
				[Address(RVA = "0xEA13B8", Offset = "0xEA13B8", VA = "0xEA13B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001335")]
				[Address(RVA = "0xEA1400", Offset = "0xEA1400", VA = "0xEA1400", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001330")]
			[Address(RVA = "0xEA1170", Offset = "0xEA1170", VA = "0xEA1170")]
			[DebuggerHidden]
			public <lerpAlphaDown>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001331")]
			[Address(RVA = "0xEA11D8", Offset = "0xEA11D8", VA = "0xEA11D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001332")]
			[Address(RVA = "0xEA11DC", Offset = "0xEA11DC", VA = "0xEA11DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001334")]
			[Address(RVA = "0xEA13C0", Offset = "0xEA13C0", VA = "0xEA13C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200031A")]
		[CompilerGenerated]
		private sealed class <lerpAlphaUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400114E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400114F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001150")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEngine.Component gameObjectToFade;

			[Token(Token = "0x4001151")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UIHint <>4__this;

			[Token(Token = "0x4001152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float startAlphaValue;

			[Token(Token = "0x4001153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float endAlphaValue;

			[Token(Token = "0x4001154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float delay;

			[Token(Token = "0x4001155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float time;

			[Token(Token = "0x170001F7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001339")]
				[Address(RVA = "0xEA1620", Offset = "0xEA1620", VA = "0xEA1620", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600133B")]
				[Address(RVA = "0xEA1668", Offset = "0xEA1668", VA = "0xEA1668", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001336")]
			[Address(RVA = "0xEA1198", Offset = "0xEA1198", VA = "0xEA1198")]
			[DebuggerHidden]
			public <lerpAlphaUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001337")]
			[Address(RVA = "0xEA1408", Offset = "0xEA1408", VA = "0xEA1408", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001338")]
			[Address(RVA = "0xEA140C", Offset = "0xEA140C", VA = "0xEA140C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600133A")]
			[Address(RVA = "0xEA1628", Offset = "0xEA1628", VA = "0xEA1628", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Group to fade.")]
		public CanvasGroup Group;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Delay in seconds before fading (default: 2).")]
		public float Delay;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Fade time in seconds (default: 2).")]
		public float FadeTime;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Disable UI element after the fade (default: true).")]
		public bool Disable;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Fade at Start (default: true).")]
		public bool FadeAtStart;

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xEA0F90", Offset = "0xEA0F90", VA = "0xEA0F90")]
		private void Start()
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xEA0FD0", Offset = "0xEA0FD0", VA = "0xEA0FD0")]
		public void FadeUp()
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xEA0FA0", Offset = "0xEA0FA0", VA = "0xEA0FA0")]
		public void FadeDown()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xEA10B8", Offset = "0xEA10B8", VA = "0xEA10B8")]
		[IteratorStateMachine(typeof(<lerpAlphaDown>d__8))]
		private IEnumerator lerpAlphaDown(float startAlphaValue, float endAlphaValue, float time, float delay, UnityEngine.Component gameObjectToFade)
		{
			return null;
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xEA1000", Offset = "0xEA1000", VA = "0xEA1000")]
		[IteratorStateMachine(typeof(<lerpAlphaUp>d__9))]
		private IEnumerator lerpAlphaUp(float startAlphaValue, float endAlphaValue, float time, float delay, UnityEngine.Component gameObjectToFade)
		{
			return null;
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xEA11C0", Offset = "0xEA11C0", VA = "0xEA11C0")]
		public UIHint()
		{
		}
	}
	[Token(Token = "0x200031B")]
	[DisallowMultipleComponent]
	public class UIResize : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IDragHandler
	{
		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Minimum size of the UI element.")]
		public Vector2 MinSize;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Maximum size of the UI element.")]
		public Vector2 MaxSize;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Ignore maximum size of the UI element (default: false).")]
		public bool IgnoreMaxSize;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Resize speed (default: 2).")]
		public float SpeedFactor;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform panelRectTransform;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 originalLocalPointerPosition;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 originalSizeDelta;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector2 originalSize;

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xEA1670", Offset = "0xEA1670", VA = "0xEA1670")]
		private void Awake()
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xEA1738", Offset = "0xEA1738", VA = "0xEA1738", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xEA17EC", Offset = "0xEA17EC", VA = "0xEA17EC", Slot = "5")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xEA197C", Offset = "0xEA197C", VA = "0xEA197C")]
		public UIResize()
		{
		}
	}
	[Token(Token = "0x200031C")]
	[DisallowMultipleComponent]
	public class UIWindowManager : MonoBehaviour
	{
		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("All Windows of the scene.")]
		public GameObject[] Windows;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Image image;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject DontTouch;

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xEA1998", Offset = "0xEA1998", VA = "0xEA1998")]
		private void Start()
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xEA1AB4", Offset = "0xEA1AB4", VA = "0xEA1AB4")]
		public void ChangeState(GameObject active)
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xEA1CB8", Offset = "0xEA1CB8", VA = "0xEA1CB8")]
		public UIWindowManager()
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class WindowManager : MonoBehaviour
	{
		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Window movement speed (default: 3).")]
		public float Speed;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Dependent GameObjects (active == open).")]
		public GameObject[] Dependencies;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Close the window at Start (default: true).")]
		public bool ClosedAtStart;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UIFocus focus;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool open;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool close;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 startPos;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 centerPos;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 lerpPos;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float openProgress;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float closeProgress;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject panel;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform tf;

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xEA1CC0", Offset = "0xEA1CC0", VA = "0xEA1CC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xEA1F34", Offset = "0xEA1F34", VA = "0xEA1F34")]
		private void Update()
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xEA20D4", Offset = "0xEA20D4", VA = "0xEA20D4")]
		public void SwitchPanel()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xEA1E28", Offset = "0xEA1E28", VA = "0xEA1E28")]
		public void OpenPanel()
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xEA1DF0", Offset = "0xEA1DF0", VA = "0xEA1DF0")]
		public void ClosePanel()
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xEA20E4", Offset = "0xEA20E4", VA = "0xEA20E4")]
		public WindowManager()
		{
		}
	}
}
namespace Crosstales.UI.Util
{
	[Token(Token = "0x200031E")]
	[DisallowMultipleComponent]
	public class FPSDisplay : MonoBehaviour
	{
		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Text component to display the FPS.")]
		public Text FPS;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(1f, 300f)]
		[Tooltip("Update every set frame (default: 5).")]
		public int FrameUpdate;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Key to activate the FPS counter (default: none).")]
		public KeyCode Key;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float deltaTime;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float elapsedTime;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float msec;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float fps;

		[Token(Token = "0x4001175")]
		private const string wait = "<i>...calculating <b>FPS</b>...</i>";

		[Token(Token = "0x4001176")]
		private const string red = "<color=#E57373><b>FPS: {0:0.}</b> ({1:0.0} ms)</color>";

		[Token(Token = "0x4001177")]
		private const string orange = "<color=#FFB74D><b>FPS: {0:0.}</b> ({1:0.0} ms)</color>";

		[Token(Token = "0x4001178")]
		private const string green = "<color=#81C784><b>FPS: {0:0.}</b> ({1:0.0} ms)</color>";

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xEA20FC", Offset = "0xEA20FC", VA = "0xEA20FC")]
		private void Update()
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xEA2328", Offset = "0xEA2328", VA = "0xEA2328")]
		public FPSDisplay()
		{
		}
	}
	[Token(Token = "0x200031F")]
	public class ScrollRectHandler : MonoBehaviour
	{
		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ScrollRect Scroll;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float WindowsSensitivity;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MacSensitivity;

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xEA2338", Offset = "0xEA2338", VA = "0xEA2338")]
		private void Start()
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xEA23AC", Offset = "0xEA23AC", VA = "0xEA23AC")]
		public ScrollRectHandler()
		{
		}
	}
}
namespace Crosstales.UI.Audio
{
	[Token(Token = "0x2000320")]
	public class AudioFilterController : MonoBehaviour
	{
		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Audio Filters")]
		[Tooltip("Searches for all audio filters in the whole scene (default: true).")]
		public bool FindAllAudioFiltersOnStart;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioReverbFilter[] ReverbFilters;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioChorusFilter[] ChorusFilters;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioEchoFilter[] EchoFilters;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioDistortionFilter[] DistortionFilters;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioLowPassFilter[] LowPassFilters;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioHighPassFilter[] HighPassFilters;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Resets all active audio filters (default: on).")]
		[Header("Settings")]
		public bool ResetAudioFiltersOnStart;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool ChorusFilter;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool EchoFilter;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool DistortionFilter;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float DistortionFilterValue;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool LowpassFilter;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float LowpassFilterValue;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool HighpassFilter;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float HighpassFilterValue;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("UI Objects")]
		public Dropdown ReverbFilterDropdown;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Text DistortionText;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Text LowpassText;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Text HighpassText;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly List<AudioReverbPreset> reverbPresets;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool initialized;

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xEA23C0", Offset = "0xEA23C0", VA = "0xEA23C0")]
		private void Start()
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xEA2914", Offset = "0xEA2914", VA = "0xEA2914")]
		private void Update()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xEA2988", Offset = "0xEA2988", VA = "0xEA2988")]
		public void FindAllAudioFilters()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xEA2C98", Offset = "0xEA2C98", VA = "0xEA2C98")]
		public void ResetAudioFilters()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xEA2D0C", Offset = "0xEA2D0C", VA = "0xEA2D0C")]
		public void ReverbFilterDropdownChanged(int index)
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xEA2DC8", Offset = "0xEA2DC8", VA = "0xEA2DC8")]
		public void ChorusFilterEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xEA2E30", Offset = "0xEA2E30", VA = "0xEA2E30")]
		public void EchoFilterEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xEA2E98", Offset = "0xEA2E98", VA = "0xEA2E98")]
		public void DistortionFilterEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xEA2F00", Offset = "0xEA2F00", VA = "0xEA2F00")]
		public void DistortionFilterChanged(float value)
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xEA300C", Offset = "0xEA300C", VA = "0xEA300C")]
		public void LowPassFilterEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xEA3074", Offset = "0xEA3074", VA = "0xEA3074")]
		public void LowPassFilterChanged(float value)
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xEA3180", Offset = "0xEA3180", VA = "0xEA3180")]
		public void HighPassFilterEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xEA31E8", Offset = "0xEA31E8", VA = "0xEA31E8")]
		public void HighPassFilterChanged(float value)
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xEA32F4", Offset = "0xEA32F4", VA = "0xEA32F4")]
		public AudioFilterController()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class AudioSourceController : MonoBehaviour
	{
		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Audio Sources")]
		[Tooltip("Searches for all AudioSource in the whole scene (default: true).")]
		public bool FindAllAudioSourcesOnStart;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Active controlled AudioSources.")]
		public AudioSource[] AudioSources;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Settings")]
		[Tooltip("Resets all active AudioSources (default: true).")]
		public bool ResetAudioSourcesOnStart;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Mute on/off (default: false).")]
		public bool Mute;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Tooltip("Loop on/off (default: false).")]
		public bool Loop;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Volume of the audio (default: 1)")]
		public float Volume;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Pitch of the audio (default: 1).")]
		public float Pitch;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Stereo pan of the audio (default: 0).")]
		public float StereoPan;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("UI Objects")]
		public Text VolumeText;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Text PitchText;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Text StereoPanText;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool initialized;

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xEA33A0", Offset = "0xEA33A0", VA = "0xEA33A0")]
		private void Update()
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xEA3414", Offset = "0xEA3414", VA = "0xEA3414")]
		public void FindAllAudioSources()
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xEA3500", Offset = "0xEA3500", VA = "0xEA3500")]
		public void ResetAllAudioSources()
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xEA3544", Offset = "0xEA3544", VA = "0xEA3544")]
		public void MuteEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xEA35AC", Offset = "0xEA35AC", VA = "0xEA35AC")]
		public void LoopEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xEA3614", Offset = "0xEA3614", VA = "0xEA3614")]
		public void VolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xEA3720", Offset = "0xEA3720", VA = "0xEA3720")]
		public void PitchChanged(float value)
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xEA382C", Offset = "0xEA382C", VA = "0xEA382C")]
		public void StereoPanChanged(float value)
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xEA3938", Offset = "0xEA3938", VA = "0xEA3938")]
		public AudioSourceController()
		{
		}
	}
}
namespace Crosstales.Common.Model.Enum
{
	[Token(Token = "0x2000322")]
	public enum Platform
	{
		[Token(Token = "0x400119F")]
		Windows,
		[Token(Token = "0x40011A0")]
		OSX,
		[Token(Token = "0x40011A1")]
		Linux,
		[Token(Token = "0x40011A2")]
		IOS,
		[Token(Token = "0x40011A3")]
		Android,
		[Token(Token = "0x40011A4")]
		WSA,
		[Token(Token = "0x40011A5")]
		Web,
		[Token(Token = "0x40011A6")]
		Unsupported
	}
	[Token(Token = "0x2000323")]
	public enum SampleRate
	{
		[Token(Token = "0x40011A8")]
		_8000Hz = 8000,
		[Token(Token = "0x40011A9")]
		_11025Hz = 11025,
		[Token(Token = "0x40011AA")]
		_22050Hz = 22050,
		[Token(Token = "0x40011AB")]
		_44100Hz = 44100,
		[Token(Token = "0x40011AC")]
		_48000Hz = 48000
	}
}
namespace Crosstales.Common.Util
{
	[Token(Token = "0x2000324")]
	public class PlatformController : MonoBehaviour
	{
		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Selected platforms for the controller.")]
		[Header("Configuration")]
		public List<Platform> Platforms;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Enable or disable the 'Objects' for the selected 'Platforms' (default: true).")]
		public bool Active;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("GameObjects")]
		[Tooltip("Selected objects for the controller.")]
		public GameObject[] Objects;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("MonoBehaviour Scripts")]
		[Tooltip("Selected scripts for the controller.")]
		public MonoBehaviour[] Scripts;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Platform currentPlatform;

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xEA3954", Offset = "0xEA3954", VA = "0xEA3954", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xEA39E4", Offset = "0xEA39E4", VA = "0xEA39E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xEA397C", Offset = "0xEA397C", VA = "0xEA397C")]
		protected void selectPlatform()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xEA3A68", Offset = "0xEA3A68", VA = "0xEA3A68")]
		protected void activateGameObjects()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xEA3E74", Offset = "0xEA3E74", VA = "0xEA3E74")]
		protected void activateScripts()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xEA4280", Offset = "0xEA4280", VA = "0xEA4280")]
		public PlatformController()
		{
		}
	}
	[Token(Token = "0x2000326")]
	public class RandomColor : MonoBehaviour
	{
		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Use intervals to change the color (default: true).")]
		public bool UseInterval;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Random change interval between min (= x) and max (= y) in seconds (default: x = 5, y = 10).")]
		public Vector2 ChangeInterval;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Random hue range between min (= x) and max (= y) (default: x = 0, y = 1).")]
		public Vector2 HueRange;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Random saturation range between min (= x) and max (= y) (default: x = 1, y = 1).")]
		public Vector2 SaturationRange;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Random value range between min (= x) and max (= y) (default: x = 1, y = 1).")]
		public Vector2 ValueRange;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Random alpha range between min (= x) and max (= y) (default: x = 1, y = 1).")]
		public Vector2 AlphaRange;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Use gray scale colors (default: false).")]
		public bool GrayScale;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Modify the color of a material instead of the Renderer (default: not set, optional).")]
		public Material Material;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set the object to a random color at Start (default: false).")]
		public bool RandomColorAtStart;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float elapsedTime;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float changeTime;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer currentRenderer;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Color32 startColor;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Color32 endColor;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lerpProgress;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int colorID;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool existsMaterial;

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xEA43C0", Offset = "0xEA43C0", VA = "0xEA43C0")]
		private void Start()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xEA4CEC", Offset = "0xEA4CEC", VA = "0xEA4CEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xEA5698", Offset = "0xEA5698", VA = "0xEA5698")]
		public RandomColor()
		{
		}
	}
	[Token(Token = "0x2000327")]
	[DisallowMultipleComponent]
	public class RandomRotator : MonoBehaviour
	{
		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Use intervals to change the rotation (default: true).")]
		public bool UseInterval;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Random change interval between min (= x) and max (= y) in seconds (default: x = 10, y = 20).")]
		public Vector2 ChangeInterval;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Minimum rotation speed per axis (default: 5 for all axis).")]
		public Vector3 SpeedMin;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Minimum rotation speed per axis (default: 15 for all axis).")]
		public Vector3 SpeedMax;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Set the object to a random rotation at Start (default: false).")]
		public bool RandomRotationAtStart;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[Tooltip("Random change interval per axis (default: true).")]
		public bool RandomChangeIntervalPerAxis;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[Tooltip("Random direction per axis (default: true).")]
		public bool RandomDirectionPerAxis;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform tf;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 speed;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float elapsedTime;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float changeTime;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 elapsedTimeAxis;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 changeTimeAxis;

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xEA572C", Offset = "0xEA572C", VA = "0xEA572C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xEA57E4", Offset = "0xEA57E4", VA = "0xEA57E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xEA5B04", Offset = "0xEA5B04", VA = "0xEA5B04")]
		public RandomRotator()
		{
		}
	}
	[Token(Token = "0x2000328")]
	[DisallowMultipleComponent]
	public class RandomScaler : MonoBehaviour
	{
		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Use intervals to change the scale (default: true).")]
		public bool UseInterval;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Random change interval between min (= x) and max (= y) in seconds (default: x = 10, y = 20).")]
		public Vector2 ChangeInterval;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Minimum rotation speed per axis (default: 5 for all axis).")]
		public Vector3 ScaleMin;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum scale per axis (default: 0.1 for all axis).")]
		public Vector3 ScaleMax;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Uniform scaling for all axis (x-axis values will be used, default: true).")]
		public bool Uniform;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[Tooltip("Set the object to a random scale at Start (default: false).")]
		public bool RandomScaleAtStart;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform tf;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 startScale;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 endScale;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float elapsedTime;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float changeTime;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float lerpTime;

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xEA5B94", Offset = "0xEA5B94", VA = "0xEA5B94")]
		private void Start()
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xEA5C7C", Offset = "0xEA5C7C", VA = "0xEA5C7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xEA5DE4", Offset = "0xEA5DE4", VA = "0xEA5DE4")]
		public RandomScaler()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public abstract class BaseConstants
	{
		[Token(Token = "0x40011DF")]
		public const string ASSET_AUTHOR = "crosstales LLC";

		[Token(Token = "0x40011E0")]
		public const string ASSET_AUTHOR_URL = "https://www.crosstales.com";

		[Token(Token = "0x40011E1")]
		public const string ASSET_CT_URL = "https://assetstore.unity.com/lists/crosstales-42213?aid=1011lNGT";

		[Token(Token = "0x40011E2")]
		public const string ASSET_SOCIAL_DISCORD = "https://discord.gg/ZbZ2sh4";

		[Token(Token = "0x40011E3")]
		public const string ASSET_SOCIAL_FACEBOOK = "https://www.facebook.com/crosstales/";

		[Token(Token = "0x40011E4")]
		public const string ASSET_SOCIAL_TWITTER = "https://twitter.com/crosstales";

		[Token(Token = "0x40011E5")]
		public const string ASSET_SOCIAL_YOUTUBE = "https://www.youtube.com/c/Crosstales";

		[Token(Token = "0x40011E6")]
		public const string ASSET_SOCIAL_LINKEDIN = "https://www.linkedin.com/company/crosstales";

		[Token(Token = "0x40011E7")]
		public const string ASSET_3P_PLAYMAKER = "https://assetstore.unity.com/packages/slug/368?aid=1011lNGT";

		[Token(Token = "0x40011E8")]
		public const string ASSET_3P_VOLUMETRIC_AUDIO = "https://assetstore.unity.com/packages/slug/17125?aid=1011lNGT";

		[Token(Token = "0x40011E9")]
		public const string ASSET_3P_ROCKTOMATE = "https://assetstore.unity.com/packages/slug/156311?aid=1011lNGT";

		[Token(Token = "0x40011EA")]
		public const string ASSET_BWF = "https://assetstore.unity.com/packages/slug/26255?aid=1011lNGT";

		[Token(Token = "0x40011EB")]
		public const string ASSET_DJ = "https://assetstore.unity.com/packages/slug/41993?aid=1011lNGT";

		[Token(Token = "0x40011EC")]
		public const string ASSET_FB = "https://assetstore.unity.com/packages/slug/98713?aid=1011lNGT";

		[Token(Token = "0x40011ED")]
		public const string ASSET_OC = "https://assetstore.unity.com/packages/slug/74688?aid=1011lNGT";

		[Token(Token = "0x40011EE")]
		public const string ASSET_RADIO = "https://assetstore.unity.com/packages/slug/32034?aid=1011lNGT";

		[Token(Token = "0x40011EF")]
		public const string ASSET_RTV = "https://assetstore.unity.com/packages/slug/41068?aid=1011lNGT";

		[Token(Token = "0x40011F0")]
		public const string ASSET_TB = "https://assetstore.unity.com/packages/slug/98711?aid=1011lNGT";

		[Token(Token = "0x40011F1")]
		public const string ASSET_TPB = "https://assetstore.unity.com/packages/slug/98714?aid=1011lNGT";

		[Token(Token = "0x40011F2")]
		public const string ASSET_TPS = "https://assetstore.unity.com/packages/slug/60040?aid=1011lNGT";

		[Token(Token = "0x40011F3")]
		public const string ASSET_TR = "https://assetstore.unity.com/packages/slug/61617?aid=1011lNGT";

		[Token(Token = "0x40011F4")]
		public const int FACTOR_KB = 1024;

		[Token(Token = "0x40011F5")]
		public const int FACTOR_MB = 1048576;

		[Token(Token = "0x40011F6")]
		public const int FACTOR_GB = 1073741824;

		[Token(Token = "0x40011F7")]
		public const float FLOAT_32768 = 32768f;

		[Token(Token = "0x40011F8")]
		public const float FLOAT_TOLERANCE = 0.0001f;

		[Token(Token = "0x40011F9")]
		public const string FORMAT_TWO_DECIMAL_PLACES = "0.00";

		[Token(Token = "0x40011FA")]
		public const string FORMAT_NO_DECIMAL_PLACES = "0";

		[Token(Token = "0x40011FB")]
		public const string FORMAT_PERCENT = "0%";

		[Token(Token = "0x40011FC")]
		public const bool DEFAULT_DEBUG = false;

		[Token(Token = "0x40011FD")]
		public const string PATH_DELIMITER_WINDOWS = "\\";

		[Token(Token = "0x40011FE")]
		public const string PATH_DELIMITER_UNIX = "/";

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Regex REGEX_LINEENDINGS;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Regex REGEX_EMAIL;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Regex REGEX_CREDITCARD;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Regex REGEX_URL_WEB;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Regex REGEX_IP_ADDRESS;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly Regex REGEX_INVALID_CHARS;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Regex REGEX_ALPHANUMERIC;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly Regex REGEX_CLEAN_SPACES;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly Regex REGEX_CLEAN_TAGS;

		[Token(Token = "0x4001208")]
		public const string ALPHABET_LATIN_UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

		[Token(Token = "0x4001209")]
		public const string ALPHABET_LATIN_LOWERCASE = "abcdefghijklmnopqrstuvwxyz";

		[Token(Token = "0x400120A")]
		public const string ALPHABET_FRENCH_UPPERCASE = "ÀÂÄÆÇÈÉÊËÎÏÔŒÙÛÜ";

		[Token(Token = "0x400120B")]
		public const string ALPHABET_FRENCH_LOWERCASE = "àâäæçèéêëîïôœùûü";

		[Token(Token = "0x400120C")]
		public const string NUMBERS = "0123456789";

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static bool DEV_DEBUG;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string TEXT_TOSTRING_START;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string TEXT_TOSTRING_END;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string TEXT_TOSTRING_DELIMITER;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string TEXT_TOSTRING_DELIMITER_END;

		[Token(Token = "0x4001212")]
		public const string PREFIX_HTTP = "http://";

		[Token(Token = "0x4001213")]
		public const string PREFIX_HTTPS = "https://";

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static int PROCESS_KILL_TIME;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string CMD_WINDOWS_PATH;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static bool SHOW_BWF_BANNER;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public static bool SHOW_DJ_BANNER;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		public static bool SHOW_FB_BANNER;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		public static bool SHOW_OC_BANNER;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public static bool SHOW_RADIO_BANNER;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		public static bool SHOW_RTV_BANNER;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
		public static bool SHOW_TB_BANNER;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x87")]
		public static bool SHOW_TPB_BANNER;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static bool SHOW_TPS_BANNER;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public static bool SHOW_TR_BANNER;

		[Token(Token = "0x170001F9")]
		public static string PREFIX_FILE
		{
			[Token(Token = "0x6001378")]
			[Address(RVA = "0xEA5E1C", Offset = "0xEA5E1C", VA = "0xEA5E1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FA")]
		public static string APPLICATION_PATH
		{
			[Token(Token = "0x6001379")]
			[Address(RVA = "0xEA5F28", Offset = "0xEA5F28", VA = "0xEA5F28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xEA61D8", Offset = "0xEA61D8", VA = "0xEA61D8")]
		protected BaseConstants()
		{
		}
	}
	[Token(Token = "0x200032A")]
	public abstract class BaseHelper
	{
		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CultureInfo BaseCulture;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static readonly System.Random rnd;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static bool ApplicationIsPlaying;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string[] args;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int androidAPILevel;

		[Token(Token = "0x170001FB")]
		public static bool isWindowsPlatform
		{
			[Token(Token = "0x600137C")]
			[Address(RVA = "0xEA239C", Offset = "0xEA239C", VA = "0xEA239C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FC")]
		public static bool isMacOSPlatform
		{
			[Token(Token = "0x600137D")]
			[Address(RVA = "0xEA23A4", Offset = "0xEA23A4", VA = "0xEA23A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FD")]
		public static bool isLinuxPlatform
		{
			[Token(Token = "0x600137E")]
			[Address(RVA = "0xEA6598", Offset = "0xEA6598", VA = "0xEA6598")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FE")]
		public static bool isStandalonePlatform
		{
			[Token(Token = "0x600137F")]
			[Address(RVA = "0xEA65A0", Offset = "0xEA65A0", VA = "0xEA65A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FF")]
		public static bool isAndroidPlatform
		{
			[Token(Token = "0x6001380")]
			[Address(RVA = "0xEA6610", Offset = "0xEA6610", VA = "0xEA6610")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000200")]
		public static bool isIOSPlatform
		{
			[Token(Token = "0x6001381")]
			[Address(RVA = "0xEA6618", Offset = "0xEA6618", VA = "0xEA6618")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000201")]
		public static bool isTvOSPlatform
		{
			[Token(Token = "0x6001382")]
			[Address(RVA = "0xEA6620", Offset = "0xEA6620", VA = "0xEA6620")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000202")]
		public static bool isWSAPlatform
		{
			[Token(Token = "0x6001383")]
			[Address(RVA = "0xEA6628", Offset = "0xEA6628", VA = "0xEA6628")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000203")]
		public static bool isXboxOnePlatform
		{
			[Token(Token = "0x6001384")]
			[Address(RVA = "0xEA6630", Offset = "0xEA6630", VA = "0xEA6630")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000204")]
		public static bool isPS4Platform
		{
			[Token(Token = "0x6001385")]
			[Address(RVA = "0xEA6638", Offset = "0xEA6638", VA = "0xEA6638")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000205")]
		public static bool isWebGLPlatform
		{
			[Token(Token = "0x6001386")]
			[Address(RVA = "0xEA6640", Offset = "0xEA6640", VA = "0xEA6640")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000206")]
		public static bool isWebPlatform
		{
			[Token(Token = "0x6001387")]
			[Address(RVA = "0xEA6648", Offset = "0xEA6648", VA = "0xEA6648")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000207")]
		public static bool isWindowsBasedPlatform
		{
			[Token(Token = "0x6001388")]
			[Address(RVA = "0xEA5EA0", Offset = "0xEA5EA0", VA = "0xEA5EA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000208")]
		public static bool isWSABasedPlatform
		{
			[Token(Token = "0x6001389")]
			[Address(RVA = "0xEA6698", Offset = "0xEA6698", VA = "0xEA6698")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000209")]
		public static bool isAppleBasedPlatform
		{
			[Token(Token = "0x600138A")]
			[Address(RVA = "0xEA66F8", Offset = "0xEA66F8", VA = "0xEA66F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020A")]
		public static bool isIOSBasedPlatform
		{
			[Token(Token = "0x600138B")]
			[Address(RVA = "0xEA6768", Offset = "0xEA6768", VA = "0xEA6768")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020B")]
		public static bool isMobilePlatform
		{
			[Token(Token = "0x600138C")]
			[Address(RVA = "0xEA67C8", Offset = "0xEA67C8", VA = "0xEA67C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020C")]
		public static bool isEditor
		{
			[Token(Token = "0x600138D")]
			[Address(RVA = "0xEA6818", Offset = "0xEA6818", VA = "0xEA6818")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020D")]
		public static bool isWindowsEditor
		{
			[Token(Token = "0x600138E")]
			[Address(RVA = "0xEA5F10", Offset = "0xEA5F10", VA = "0xEA5F10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020E")]
		public static bool isMacOSEditor
		{
			[Token(Token = "0x600138F")]
			[Address(RVA = "0xEA5F18", Offset = "0xEA5F18", VA = "0xEA5F18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020F")]
		public static bool isLinuxEditor
		{
			[Token(Token = "0x6001390")]
			[Address(RVA = "0xEA5F20", Offset = "0xEA5F20", VA = "0xEA5F20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000210")]
		public static bool isEditorMode
		{
			[Token(Token = "0x6001391")]
			[Address(RVA = "0xEA6888", Offset = "0xEA6888", VA = "0xEA6888")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000211")]
		public static bool isIL2CPP
		{
			[Token(Token = "0x6001392")]
			[Address(RVA = "0xEA68DC", Offset = "0xEA68DC", VA = "0xEA68DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000212")]
		public static Platform CurrentPlatform
		{
			[Token(Token = "0x6001393")]
			[Address(RVA = "0xEA39E8", Offset = "0xEA39E8", VA = "0xEA39E8")]
			get
			{
				return default(Platform);
			}
		}

		[Token(Token = "0x17000213")]
		public static int AndroidAPILevel
		{
			[Token(Token = "0x6001394")]
			[Address(RVA = "0xEA68E4", Offset = "0xEA68E4", VA = "0xEA68E4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xEA69E0", Offset = "0xEA69E0", VA = "0xEA69E0")]
		static BaseHelper()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xEA6D2C", Offset = "0xEA6D2C", VA = "0xEA6D2C")]
		[RuntimeInitializeOnLoadMethod]
		private static void initialize()
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xEA6D94", Offset = "0xEA6D94", VA = "0xEA6D94")]
		public static string CreateString(string replaceChars, int stringLength)
		{
			return null;
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xEA6F18", Offset = "0xEA6F18", VA = "0xEA6F18")]
		public static List<string> SplitStringToLines(string text, bool ignoreCommentedLines = true, int skipHeaderLines = 0, int skipFooterLines = 0)
		{
			return null;
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xEA71EC", Offset = "0xEA71EC", VA = "0xEA71EC")]
		public static string FormatBytesToHRF(long bytes, bool useSI = false)
		{
			return null;
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xEA74B4", Offset = "0xEA74B4", VA = "0xEA74B4")]
		public static string FormatSecondsToHRF(double seconds)
		{
			return null;
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xEA78E8", Offset = "0xEA78E8", VA = "0xEA78E8")]
		public static Color HSVToRGB(float h, float s, float v, float a = 1f)
		{
			return default(Color);
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xEA7A38", Offset = "0xEA7A38", VA = "0xEA7A38")]
		public static string GenerateLoremIpsum(int length, int minSentences = 1, int maxSentences = int.MaxValue, int minWords = 1, int maxWords = 15)
		{
			return null;
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xEA6AFC", Offset = "0xEA6AFC", VA = "0xEA6AFC")]
		public static string LanguageToISO639(SystemLanguage language)
		{
			return null;
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xEA8478", Offset = "0xEA8478", VA = "0xEA8478")]
		public static SystemLanguage ISO639ToLanguage(string isoCode)
		{
			return default(SystemLanguage);
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xEA8FE0", Offset = "0xEA8FE0", VA = "0xEA8FE0")]
		public static object InvokeMethod(string className, string methodName, params object[] parameters)
		{
			return null;
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xEA95D8", Offset = "0xEA95D8", VA = "0xEA95D8")]
		public static string GetArgument(string name)
		{
			return null;
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xEA96FC", Offset = "0xEA96FC", VA = "0xEA96FC")]
		public static string[] GetArguments()
		{
			return null;
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xEA7878", Offset = "0xEA7878", VA = "0xEA7878")]
		private static string addLeadingZero(int value)
		{
			return null;
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xEA97A8", Offset = "0xEA97A8", VA = "0xEA97A8")]
		protected BaseHelper()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class CTHelper : MonoBehaviour
	{
		[Token(Token = "0x17000214")]
		public static CTHelper Instance
		{
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0xEA984C", Offset = "0xEA984C", VA = "0xEA984C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0xEA9894", Offset = "0xEA9894", VA = "0xEA9894")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xEA98EC", Offset = "0xEA98EC", VA = "0xEA98EC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void initialize()
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xEA9948", Offset = "0xEA9948", VA = "0xEA9948")]
		[RuntimeInitializeOnLoadMethod]
		private static void create()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xEA9A3C", Offset = "0xEA9A3C", VA = "0xEA9A3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xEA9A94", Offset = "0xEA9A94", VA = "0xEA9A94")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xEA9AEC", Offset = "0xEA9AEC", VA = "0xEA9AEC")]
		public CTHelper()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public abstract class CTPlayerPrefs
	{
		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xEA9AF4", Offset = "0xEA9AF4", VA = "0xEA9AF4")]
		public static bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xEA9B24", Offset = "0xEA9B24", VA = "0xEA9B24")]
		public static void DeleteAll()
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xEA9B2C", Offset = "0xEA9B2C", VA = "0xEA9B2C")]
		public static void DeleteKey(string key)
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xEA9B9C", Offset = "0xEA9B9C", VA = "0xEA9B9C")]
		public static void Save()
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xEA9BA4", Offset = "0xEA9BA4", VA = "0xEA9BA4")]
		public static string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xEA9C14", Offset = "0xEA9C14", VA = "0xEA9C14")]
		public static float GetFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xEA9C84", Offset = "0xEA9C84", VA = "0xEA9C84")]
		public static int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xEA9CF4", Offset = "0xEA9CF4", VA = "0xEA9CF4")]
		public static bool GetBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xEA9D78", Offset = "0xEA9D78", VA = "0xEA9D78")]
		public static DateTime GetDate(string key)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xEA9E18", Offset = "0xEA9E18", VA = "0xEA9E18")]
		public static Vector2 GetVector2(string key)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xEA9E8C", Offset = "0xEA9E8C", VA = "0xEA9E8C")]
		public static Vector3 GetVector3(string key)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xEA9F20", Offset = "0xEA9F20", VA = "0xEA9F20")]
		public static Vector4 GetVector4(string key)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xEA9FDC", Offset = "0xEA9FDC", VA = "0xEA9FDC")]
		public static Quaternion GetQuaternion(string key)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xEAA068", Offset = "0xEAA068", VA = "0xEAA068")]
		public static Color GetColor(string key)
		{
			return default(Color);
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xEAA0F4", Offset = "0xEAA0F4", VA = "0xEAA0F4")]
		public static SystemLanguage GetLanguage(string key)
		{
			return default(SystemLanguage);
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xEAA1F8", Offset = "0xEAA1F8", VA = "0xEAA1F8")]
		public static void SetString(string key, string value)
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xEAA278", Offset = "0xEAA278", VA = "0xEAA278")]
		public static void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xEAA2F8", Offset = "0xEAA2F8", VA = "0xEAA2F8")]
		public static void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xEAA378", Offset = "0xEAA378", VA = "0xEAA378")]
		public static void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xEAA3E8", Offset = "0xEAA3E8", VA = "0xEAA3E8")]
		public static void SetDate(string key, DateTime value)
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xEAA450", Offset = "0xEAA450", VA = "0xEAA450")]
		public static void SetVector2(string key, Vector2 value)
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xEAA504", Offset = "0xEAA504", VA = "0xEAA504")]
		public static void SetVector3(string key, Vector3 value)
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xEAA5E4", Offset = "0xEAA5E4", VA = "0xEAA5E4")]
		public static void SetVector4(string key, Vector4 value)
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xEAA7DC", Offset = "0xEAA7DC", VA = "0xEAA7DC")]
		public static void SetQuaternion(string key, Quaternion value)
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xEAA868", Offset = "0xEAA868", VA = "0xEAA868")]
		public static void SetColor(string key, Color value)
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xEAA8F4", Offset = "0xEAA8F4", VA = "0xEAA8F4")]
		public static void SetLanguage(string key, SystemLanguage language)
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xEAA970", Offset = "0xEAA970", VA = "0xEAA970")]
		protected CTPlayerPrefs()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class CTWebClient : WebClient
	{
		[Token(Token = "0x17000215")]
		public int Timeout
		{
			[Token(Token = "0x60013C9")]
			[Address(RVA = "0xEAA978", Offset = "0xEAA978", VA = "0xEAA978")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013CA")]
			[Address(RVA = "0xEAA980", Offset = "0xEAA980", VA = "0xEAA980")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public int ConnectionLimit
		{
			[Token(Token = "0x60013CB")]
			[Address(RVA = "0xEAA988", Offset = "0xEAA988", VA = "0xEAA988")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013CC")]
			[Address(RVA = "0xEAA990", Offset = "0xEAA990", VA = "0xEAA990")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xEAA998", Offset = "0xEAA998", VA = "0xEAA998")]
		public CTWebClient()
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xEAA9A4", Offset = "0xEAA9A4", VA = "0xEAA9A4")]
		public CTWebClient(int timeout, int connectionLimit = 20)
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xEAAA18", Offset = "0xEAAA18", VA = "0xEAAA18")]
		public WebRequest CTGetWebRequest(string uri)
		{
			return null;
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xEAAA98", Offset = "0xEAAA98", VA = "0xEAAA98", Slot = "27")]
		protected override WebRequest GetWebRequest(Uri uri)
		{
			return null;
		}
	}
	[Token(Token = "0x200032F")]
	public abstract class FileHelper
	{
		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string applicationDataPath;

		[Token(Token = "0x17000217")]
		public static string StreamingAssetsPath
		{
			[Token(Token = "0x60013D1")]
			[Address(RVA = "0xEAABF8", Offset = "0xEAABF8", VA = "0xEAABF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xEAACD4", Offset = "0xEAACD4", VA = "0xEAACD4")]
		static FileHelper()
		{
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xEAAD34", Offset = "0xEAAD34", VA = "0xEAAD34")]
		[RuntimeInitializeOnLoadMethod]
		private static void initialize()
		{
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xEA5FC8", Offset = "0xEA5FC8", VA = "0xEA5FC8")]
		public static string ValidatePath(string path, bool addEndDelimiter = true, bool preserveFile = true)
		{
			return null;
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xEAAEAC", Offset = "0xEAAEAC", VA = "0xEAAEAC")]
		public static string ValidateFile(string path)
		{
			return null;
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xEAB10C", Offset = "0xEAB10C", VA = "0xEAB10C")]
		public static bool PathHasInvalidChars(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xEAB19C", Offset = "0xEAB19C", VA = "0xEAB19C")]
		public static bool FileHasInvalidChars(string file)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xEAB22C", Offset = "0xEAB22C", VA = "0xEAB22C")]
		public static string[] GetFilesForName(string path, bool isRecursive = false, params string[] filenames)
		{
			return null;
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xEAB750", Offset = "0xEAB750", VA = "0xEAB750")]
		public static string[] GetFiles(string path, bool isRecursive = false, params string[] extensions)
		{
			return null;
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xEAB918", Offset = "0xEAB918", VA = "0xEAB918")]
		public static string[] GetDirectories(string path, bool isRecursive = false)
		{
			return null;
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xEABB4C", Offset = "0xEABB4C", VA = "0xEABB4C")]
		public static string[] GetDrives()
		{
			return null;
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xEABCE4", Offset = "0xEABCE4", VA = "0xEABCE4")]
		public static void CopyPath(string sourcePath, string destPath, bool move = false)
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xEAC200", Offset = "0xEAC200", VA = "0xEAC200")]
		public static void CopyFile(string sourceFile, string destFile, bool move = false)
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xEAC520", Offset = "0xEAC520", VA = "0xEAC520")]
		public static void ShowPath(string path)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xEAC56C", Offset = "0xEAC56C", VA = "0xEAC56C")]
		public static void ShowFile(string file)
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xEAC610", Offset = "0xEAC610", VA = "0xEAC610")]
		public static void OpenFile(string file)
		{
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xEAC034", Offset = "0xEAC034", VA = "0xEAC034")]
		private static void copyAll(DirectoryInfo source, DirectoryInfo target)
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xEAC6B4", Offset = "0xEAC6B4", VA = "0xEAC6B4")]
		protected FileHelper()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class MemoryCacheStream : Stream
	{
		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] cache;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long writePosition;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long readPosition;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long length;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int size;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private readonly int maxSize;

		[Token(Token = "0x17000218")]
		public override bool CanRead
		{
			[Token(Token = "0x60013E8")]
			[Address(RVA = "0xEAC908", Offset = "0xEAC908", VA = "0xEAC908", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000219")]
		public override bool CanSeek
		{
			[Token(Token = "0x60013E9")]
			[Address(RVA = "0xEAC910", Offset = "0xEAC910", VA = "0xEAC910", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021A")]
		public override bool CanWrite
		{
			[Token(Token = "0x60013EA")]
			[Address(RVA = "0xEAC918", Offset = "0xEAC918", VA = "0xEAC918", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021B")]
		public override long Position
		{
			[Token(Token = "0x60013EB")]
			[Address(RVA = "0xEAC920", Offset = "0xEAC920", VA = "0xEAC920", Slot = "12")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60013EC")]
			[Address(RVA = "0xEAC928", Offset = "0xEAC928", VA = "0xEAC928", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public override long Length
		{
			[Token(Token = "0x60013ED")]
			[Address(RVA = "0xEAC9A4", Offset = "0xEAC9A4", VA = "0xEAC9A4", Slot = "11")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xEAC7C8", Offset = "0xEAC7C8", VA = "0xEAC7C8")]
		public MemoryCacheStream(int cacheSize = 65536, int maxCacheSize = 67108864)
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xEAC9AC", Offset = "0xEAC9AC", VA = "0xEAC9AC", Slot = "21")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xEAC9B0", Offset = "0xEAC9B0", VA = "0xEAC9B0", Slot = "31")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xEACAB4", Offset = "0xEACAB4", VA = "0xEACAB4", Slot = "32")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xEACAF8", Offset = "0xEACAF8", VA = "0xEACAF8", Slot = "33")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xEACCBC", Offset = "0xEACCBC", VA = "0xEACCBC", Slot = "36")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xEACC04", Offset = "0xEACC04", VA = "0xEACC04")]
		private int read(byte[] buff, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xEACDFC", Offset = "0xEACDFC", VA = "0xEACDFC")]
		private void write(byte[] buff, int offset, int count)
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xEAC844", Offset = "0xEAC844", VA = "0xEAC844")]
		private void createCache()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public abstract class NetworkHelper
	{
		[Token(Token = "0x4001234")]
		protected const string file_prefix = "file://";

		[Token(Token = "0x4001235")]
		protected const string content_prefix = "content://";

		[Token(Token = "0x1700021D")]
		public static bool isInternetAvailable
		{
			[Token(Token = "0x60013F6")]
			[Address(RVA = "0xEACEAC", Offset = "0xEACEAC", VA = "0xEACEAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xEACEC8", Offset = "0xEACEC8", VA = "0xEACEC8")]
		public static bool OpenURL(string url)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xEACF7C", Offset = "0xEACF7C", VA = "0xEACF7C")]
		public static bool RemoteCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xEAD494", Offset = "0xEAD494", VA = "0xEAD494")]
		public static string ValidURLFromFilePath(string path)
		{
			return null;
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xEAD5FC", Offset = "0xEAD5FC", VA = "0xEAD5FC")]
		public static string CleanUrl(string url, bool removeProtocol = true, bool removeWWW = true, bool removeSlash = true)
		{
			return null;
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xEAADA8", Offset = "0xEAADA8", VA = "0xEAADA8")]
		public static bool isValidURL(string url)
		{
			return default(bool);
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xEAD7A4", Offset = "0xEAD7A4", VA = "0xEAD7A4")]
		public static string GetIP(string host)
		{
			return null;
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xEACF74", Offset = "0xEACF74", VA = "0xEACF74")]
		private static void openURL(string url)
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xEAD948", Offset = "0xEAD948", VA = "0xEAD948")]
		protected NetworkHelper()
		{
		}
	}
	[Token(Token = "0x2000334")]
	[DisallowMultipleComponent]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("Don't destroy gameobject during scene switches (default: false).")]
		[SerializeField]
		private bool dontDestroy;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string PrefabPath;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string GameObjectName;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static T instance;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly object lockObj;

		[Token(Token = "0x1700021E")]
		public static T Instance
		{
			[Token(Token = "0x6001402")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001403")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public bool DontDestroy
		{
			[Token(Token = "0x6001404")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001405")]
			set
			{
			}
		}

		[Token(Token = "0x6001406")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001407")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001408")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001409")]
		public static void CreateInstance(bool searchExistingGameObject = true, bool deleteExistingInstance = false)
		{
		}

		[Token(Token = "0x600140A")]
		public static void DeleteInstance()
		{
		}

		[Token(Token = "0x600140B")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class SingletonHelper
	{
		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool isInitialized;

		[Token(Token = "0x17000220")]
		public static bool isQuitting
		{
			[Token(Token = "0x600140D")]
			[Address(RVA = "0xEAD9D4", Offset = "0xEAD9D4", VA = "0xEAD9D4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600140E")]
			[Address(RVA = "0xEADA2C", Offset = "0xEADA2C", VA = "0xEADA2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xEADA88", Offset = "0xEADA88", VA = "0xEADA88")]
		static SingletonHelper()
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xEADB7C", Offset = "0xEADB7C", VA = "0xEADB7C")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void initialize()
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xEADE84", Offset = "0xEADE84", VA = "0xEADE84")]
		private static void onSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xEAE008", Offset = "0xEAE008", VA = "0xEAE008")]
		private static void onQuitting()
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xEAE15C", Offset = "0xEAE15C", VA = "0xEAE15C")]
		public SingletonHelper()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public abstract class XmlHelper
	{
		[Token(Token = "0x6001414")]
		public static void SerializeToFile<T>(T obj, string filename)
		{
		}

		[Token(Token = "0x6001415")]
		public static string SerializeToString<T>(T obj)
		{
			return null;
		}

		[Token(Token = "0x6001416")]
		public static byte[] SerializeToByteArray<T>(T obj)
		{
			return null;
		}

		[Token(Token = "0x6001417")]
		public static T DeserializeFromFile<T>(string filename, bool skipBOM = false)
		{
			return (T)null;
		}

		[Token(Token = "0x6001418")]
		public static T DeserializeFromString<T>(string xmlAsString, bool skipBOM = true)
		{
			return (T)null;
		}

		[Token(Token = "0x6001419")]
		public static T DeserializeFromByteArray<T>(byte[] data)
		{
			return (T)null;
		}

		[Token(Token = "0x600141A")]
		public static T DeserializeFromResource<T>(string resourceName, bool skipBOM = true)
		{
			return (T)null;
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xEAE164", Offset = "0xEAE164", VA = "0xEAE164")]
		protected XmlHelper()
		{
		}
	}
}
namespace Crosstales.BWF
{
	[Token(Token = "0x2000337")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_b_w_f_manager.html")]
	[ExecuteInEditMode]
	public class BWFManager : Singleton<BWFManager>
	{
		[Token(Token = "0x2000338")]
		public delegate void BWFReady();

		[Token(Token = "0x200033B")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass40_0
		{
			[Token(Token = "0x4001252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string text;

			[Token(Token = "0x4001253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ManagerMask mask;

			[Token(Token = "0x4001254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string[] sourceNames;

			[Token(Token = "0x4001255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool result;

			[Token(Token = "0x600144C")]
			[Address(RVA = "0xEB147C", Offset = "0xEB147C", VA = "0xEB147C")]
			public <>c__DisplayClass40_0()
			{
			}

			[Token(Token = "0x600144D")]
			[Address(RVA = "0xEB1484", Offset = "0xEB1484", VA = "0xEB1484")]
			internal void <containsAsync>b__0()
			{
			}
		}

		[Token(Token = "0x200033C")]
		[CompilerGenerated]
		private sealed class <containsAsync>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string text;

			[Token(Token = "0x4001259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ManagerMask mask;

			[Token(Token = "0x400125A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string[] sourceNames;

			[Token(Token = "0x400125B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public BWFManager <>4__this;

			[Token(Token = "0x400125C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass40_0 <>8__1;

			[Token(Token = "0x17000223")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001451")]
				[Address(RVA = "0xEB167C", Offset = "0xEB167C", VA = "0xEB167C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000224")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001453")]
				[Address(RVA = "0xEB16C4", Offset = "0xEB16C4", VA = "0xEB16C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600144E")]
			[Address(RVA = "0xEB0CA0", Offset = "0xEB0CA0", VA = "0xEB0CA0")]
			[DebuggerHidden]
			public <containsAsync>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x600144F")]
			[Address(RVA = "0xEB1498", Offset = "0xEB1498", VA = "0xEB1498", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001450")]
			[Address(RVA = "0xEB149C", Offset = "0xEB149C", VA = "0xEB149C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001452")]
			[Address(RVA = "0xEB1684", Offset = "0xEB1684", VA = "0xEB1684", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033D")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass41_0
		{
			[Token(Token = "0x400125D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string text;

			[Token(Token = "0x400125E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ManagerMask mask;

			[Token(Token = "0x400125F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string[] sourceNames;

			[Token(Token = "0x4001260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<string> result;

			[Token(Token = "0x6001454")]
			[Address(RVA = "0xEB16CC", Offset = "0xEB16CC", VA = "0xEB16CC")]
			public <>c__DisplayClass41_0()
			{
			}

			[Token(Token = "0x6001455")]
			[Address(RVA = "0xEB16D4", Offset = "0xEB16D4", VA = "0xEB16D4")]
			internal void <getAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x200033E")]
		[CompilerGenerated]
		private sealed class <getAllAsync>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string text;

			[Token(Token = "0x4001264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ManagerMask mask;

			[Token(Token = "0x4001265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string[] sourceNames;

			[Token(Token = "0x4001266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public BWFManager <>4__this;

			[Token(Token = "0x4001267")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass41_0 <>8__1;

			[Token(Token = "0x17000225")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001459")]
				[Address(RVA = "0xEB18D4", Offset = "0xEB18D4", VA = "0xEB18D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000226")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600145B")]
				[Address(RVA = "0xEB191C", Offset = "0xEB191C", VA = "0xEB191C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001456")]
			[Address(RVA = "0xEB0CC8", Offset = "0xEB0CC8", VA = "0xEB0CC8")]
			[DebuggerHidden]
			public <getAllAsync>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6001457")]
			[Address(RVA = "0xEB16E8", Offset = "0xEB16E8", VA = "0xEB16E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001458")]
			[Address(RVA = "0xEB16EC", Offset = "0xEB16EC", VA = "0xEB16EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600145A")]
			[Address(RVA = "0xEB18DC", Offset = "0xEB18DC", VA = "0xEB18DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033F")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass42_0
		{
			[Token(Token = "0x4001268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string text;

			[Token(Token = "0x4001269")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ManagerMask mask;

			[Token(Token = "0x400126A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool markOnly;

			[Token(Token = "0x400126B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string prefix;

			[Token(Token = "0x400126C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string postfix;

			[Token(Token = "0x400126D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string[] sourceNames;

			[Token(Token = "0x400126E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string result;

			[Token(Token = "0x600145C")]
			[Address(RVA = "0xEB1924", Offset = "0xEB1924", VA = "0xEB1924")]
			public <>c__DisplayClass42_0()
			{
			}

			[Token(Token = "0x600145D")]
			[Address(RVA = "0xEB192C", Offset = "0xEB192C", VA = "0xEB192C")]
			internal void <replaceAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000340")]
		[CompilerGenerated]
		private sealed class <replaceAllAsync>d__42 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400126F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001270")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001271")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string text;

			[Token(Token = "0x4001272")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ManagerMask mask;

			[Token(Token = "0x4001273")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public bool markOnly;

			[Token(Token = "0x4001274")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string prefix;

			[Token(Token = "0x4001275")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string postfix;

			[Token(Token = "0x4001276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string[] sourceNames;

			[Token(Token = "0x4001277")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public BWFManager <>4__this;

			[Token(Token = "0x4001278")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private <>c__DisplayClass42_0 <>8__1;

			[Token(Token = "0x17000227")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001461")]
				[Address(RVA = "0xEB1B64", Offset = "0xEB1B64", VA = "0xEB1B64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000228")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001463")]
				[Address(RVA = "0xEB1BAC", Offset = "0xEB1BAC", VA = "0xEB1BAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600145E")]
			[Address(RVA = "0xEB0CF0", Offset = "0xEB0CF0", VA = "0xEB0CF0")]
			[DebuggerHidden]
			public <replaceAllAsync>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x600145F")]
			[Address(RVA = "0xEB1948", Offset = "0xEB1948", VA = "0xEB1948", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001460")]
			[Address(RVA = "0xEB194C", Offset = "0xEB194C", VA = "0xEB194C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001462")]
			[Address(RVA = "0xEB1B6C", Offset = "0xEB1B6C", VA = "0xEB1B6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Disables the ordering of the 'GetAll'-method (prevent possible memory garbage).")]
		public bool DisableOrdering;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool sentReady;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Thread worker;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<string> getAllResult;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Events")]
		public OnReady OnReady;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OnContainsCompleted OnContainsCompleted;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OnGetAllCompleted OnGetAllCompleted;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public OnReplaceAllCompleted OnReplaceAllCompleted;

		[Token(Token = "0x17000221")]
		public bool isReady
		{
			[Token(Token = "0x600141C")]
			[Address(RVA = "0xEAE16C", Offset = "0xEAE16C", VA = "0xEAE16C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000222")]
		public int TotalRegexCount
		{
			[Token(Token = "0x600141D")]
			[Address(RVA = "0xEAE460", Offset = "0xEAE460", VA = "0xEAE460")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000008")]
		public event BWFReady OnBWFReady
		{
			[Token(Token = "0x600141E")]
			[Address(RVA = "0xEAE7F0", Offset = "0xEAE7F0", VA = "0xEAE7F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600141F")]
			[Address(RVA = "0xEAE88C", Offset = "0xEAE88C", VA = "0xEAE88C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event ContainsComplete OnContainsComplete
		{
			[Token(Token = "0x6001420")]
			[Address(RVA = "0xEAE928", Offset = "0xEAE928", VA = "0xEAE928")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001421")]
			[Address(RVA = "0xEAE9C4", Offset = "0xEAE9C4", VA = "0xEAE9C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event GetAllComplete OnGetAllComplete
		{
			[Token(Token = "0x6001422")]
			[Address(RVA = "0xEAEA60", Offset = "0xEAEA60", VA = "0xEAEA60")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001423")]
			[Address(RVA = "0xEAEAFC", Offset = "0xEAEAFC", VA = "0xEAEAFC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event ReplaceAllComplete OnReplaceAllComplete
		{
			[Token(Token = "0x6001424")]
			[Address(RVA = "0xEAEB98", Offset = "0xEAEB98", VA = "0xEAEB98")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001425")]
			[Address(RVA = "0xEAEC34", Offset = "0xEAEC34", VA = "0xEAEC34")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xEAECD0", Offset = "0xEAECD0", VA = "0xEAECD0", Slot = "6")]
		protected override void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xEAEDBC", Offset = "0xEAEDBC", VA = "0xEAEDBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xEAEE74", Offset = "0xEAEE74", VA = "0xEAEE74")]
		public void Load(ManagerMask mask = ManagerMask.All)
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xEAE570", Offset = "0xEAE570", VA = "0xEAE570")]
		public List<Source> Sources(ManagerMask mask = ManagerMask.All)
		{
			return null;
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xEAF1B8", Offset = "0xEAF1B8", VA = "0xEAF1B8")]
		public bool Contains(string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
			return default(bool);
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xEAF490", Offset = "0xEAF490", VA = "0xEAF490")]
		public void ContainsAsync(string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xEAF564", Offset = "0xEAF564", VA = "0xEAF564")]
		public List<string> GetAll(string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xEAFC58", Offset = "0xEAFC58", VA = "0xEAFC58")]
		public void GetAllAsync(string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xEAFD2C", Offset = "0xEAFD2C", VA = "0xEAFD2C")]
		public string ReplaceAll(string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xEAFDC8", Offset = "0xEAFDC8", VA = "0xEAFDC8")]
		public string ReplaceAll(string text, ManagerMask mask, bool markOnly, string prefix, string postfix, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xEB0148", Offset = "0xEB0148", VA = "0xEB0148")]
		public void ReplaceAllAsync(string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xEB01D8", Offset = "0xEB01D8", VA = "0xEB01D8")]
		public void ReplaceAllAsync(string text, ManagerMask mask, bool markOnly, string prefix, string postfix, params string[] sourceNames)
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xEB02EC", Offset = "0xEB02EC", VA = "0xEB02EC")]
		public string Mark(string text, List<string> unwantedWords, string prefix = "<b><color=red>", string postfix = "</color></b>")
		{
			return null;
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xEB081C", Offset = "0xEB081C", VA = "0xEB081C")]
		public string Mark(string text, bool replace = false, string prefix = "<b><color=red>", string postfix = "</color></b>", ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xEB0BD4", Offset = "0xEB0BD4", VA = "0xEB0BD4")]
		public string Unmark(string text, string prefix = "<b><color=red>", string postfix = "</color></b>")
		{
			return null;
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xEAF4B0", Offset = "0xEAF4B0", VA = "0xEAF4B0")]
		[IteratorStateMachine(typeof(<containsAsync>d__40))]
		private IEnumerator containsAsync(string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xEAFC78", Offset = "0xEAFC78", VA = "0xEAFC78")]
		[IteratorStateMachine(typeof(<getAllAsync>d__41))]
		private IEnumerator getAllAsync(string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xEB01FC", Offset = "0xEB01FC", VA = "0xEB01FC")]
		[IteratorStateMachine(typeof(<replaceAllAsync>d__42))]
		private IEnumerator replaceAllAsync(string text, ManagerMask mask = ManagerMask.All, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xEAF200", Offset = "0xEAF200", VA = "0xEAF200")]
		private static void contains(out bool result, string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xEAF5A0", Offset = "0xEAF5A0", VA = "0xEAF5A0")]
		private static void getAll(out List<string> result, string text, ManagerMask mask = ManagerMask.All, params string[] sourceNames)
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xEAFE08", Offset = "0xEAFE08", VA = "0xEAFE08")]
		private static void replaceAll(out string result, string text, ManagerMask mask = ManagerMask.All, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xEAEDF0", Offset = "0xEAEDF0", VA = "0xEAEDF0")]
		private void onBWFReady()
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xEAF3D4", Offset = "0xEAF3D4", VA = "0xEAF3D4")]
		private void onContainsComplete(string text, bool result)
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xEAFB3C", Offset = "0xEAFB3C", VA = "0xEAFB3C")]
		private void onGetAllComplete(string text, List<string> badWords)
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xEB008C", Offset = "0xEB008C", VA = "0xEB008C")]
		private void onReplaceAllComplete(string originalText, string cleanText)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xEB1190", Offset = "0xEB1190", VA = "0xEB1190")]
		public BWFManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000341")]
	public class OnReady : UnityEvent
	{
		[Token(Token = "0x6001464")]
		[Address(RVA = "0xEB1BB4", Offset = "0xEB1BB4", VA = "0xEB1BB4")]
		public OnReady()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000342")]
	public class OnContainsCompleted : UnityEvent<string, bool>
	{
		[Token(Token = "0x6001465")]
		[Address(RVA = "0xEB1BBC", Offset = "0xEB1BBC", VA = "0xEB1BBC")]
		public OnContainsCompleted()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000343")]
	public class OnGetAllCompleted : UnityEvent<string, string>
	{
		[Token(Token = "0x6001466")]
		[Address(RVA = "0xEB1C04", Offset = "0xEB1C04", VA = "0xEB1C04")]
		public OnGetAllCompleted()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000344")]
	public class OnReplaceAllCompleted : UnityEvent<string, string>
	{
		[Token(Token = "0x6001467")]
		[Address(RVA = "0xEB1C4C", Offset = "0xEB1C4C", VA = "0xEB1C4C")]
		public OnReplaceAllCompleted()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public delegate void ContainsComplete(string originalText, bool containsBadWords);
	[Token(Token = "0x2000346")]
	public delegate void GetAllComplete(string originalText, List<string> badWords);
	[Token(Token = "0x2000347")]
	public delegate void ReplaceAllComplete(string originalText, string cleanText);
}
namespace Crosstales.BWF.Util
{
	[Token(Token = "0x2000348")]
	public static class Config
	{
		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool DEBUG;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool DEBUG_BADWORDS;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public static bool DEBUG_DOMAINS;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public static bool isLoaded;
	}
	[Token(Token = "0x2000349")]
	public abstract class Constants : BaseConstants
	{
		[Token(Token = "0x400127D")]
		public const string ASSET_NAME = "Bad Word Filter PRO";

		[Token(Token = "0x400127E")]
		public const string ASSET_NAME_SHORT = "BWF PRO";

		[Token(Token = "0x400127F")]
		public const string ASSET_VERSION = "2022.2.0";

		[Token(Token = "0x4001280")]
		public const int ASSET_BUILD = 20220815;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DateTime ASSET_CREATED;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly DateTime ASSET_CHANGED;

		[Token(Token = "0x4001283")]
		public const string ASSET_PRO_URL = "https://assetstore.unity.com/packages/slug/26255?aid=1011lNGT";

		[Token(Token = "0x4001284")]
		public const string ASSET_UPDATE_CHECK_URL = "https://www.crosstales.com/media/assets/bwf_versions.txt";

		[Token(Token = "0x4001285")]
		public const string ASSET_CONTACT = "bwf@crosstales.com";

		[Token(Token = "0x4001286")]
		public const string ASSET_MANUAL_URL = "https://www.crosstales.com/media/data/assets/badwordfilter/BadWordFilter-doc.pdf";

		[Token(Token = "0x4001287")]
		public const string ASSET_API_URL = "https://www.crosstales.com/en/assets/badwordfilter/api";

		[Token(Token = "0x4001288")]
		public const string ASSET_FORUM_URL = "https://forum.unity.com/threads/bad-word-filter-pro-solution-against-profanity-and-obscenity.289960/";

		[Token(Token = "0x4001289")]
		public const string ASSET_WEB_URL = "https://www.crosstales.com/en/portfolio//badwordfilter/";

		[Token(Token = "0x400128A")]
		public const string ASSET_VIDEO_PROMO = "https://youtu.be/pXICeRKaRPM?list=PLgtonIOr6Tb41XTMeeZ836tjHlKgOO84S";

		[Token(Token = "0x400128B")]
		public const string ASSET_VIDEO_TUTORIAL = "https://youtu.be/W8FxFlIObWM?list=PLgtonIOr6Tb41XTMeeZ836tjHlKgOO84S";

		[Token(Token = "0x400128C")]
		public const string KEY_PREFIX = "BWF_CFG_";

		[Token(Token = "0x400128D")]
		public const string KEY_DEBUG = "BWF_CFG_DEBUG";

		[Token(Token = "0x400128E")]
		public const string KEY_DEBUG_BADWORDS = "BWF_CFG_DEBUG_BADWORDS";

		[Token(Token = "0x400128F")]
		public const string KEY_DEBUG_DOMAINS = "BWF_CFG_DEBUG_DOMAINS";

		[Token(Token = "0x4001290")]
		public const bool DEFAULT_DEBUG_BADWORDS = false;

		[Token(Token = "0x4001291")]
		public const bool DEFAULT_DEBUG_DOMAINS = false;

		[Token(Token = "0x4001292")]
		public const string MANAGER_SCENE_OBJECT_NAME = "BWF";

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int WWW_TIMEOUT;

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xEB2114", Offset = "0xEB2114", VA = "0xEB2114")]
		protected Constants()
		{
		}
	}
	[Token(Token = "0x200034A")]
	public abstract class Helper : BaseHelper
	{
		[Token(Token = "0x17000229")]
		public static bool isSupportedPlatform
		{
			[Token(Token = "0x6001477")]
			[Address(RVA = "0xEB220C", Offset = "0xEB220C", VA = "0xEB220C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xEB2214", Offset = "0xEB2214", VA = "0xEB2214")]
		public static void CreateSource()
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xEB2218", Offset = "0xEB2218", VA = "0xEB2218")]
		protected Helper()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public class SetupProject
	{
		[Token(Token = "0x600147A")]
		[Address(RVA = "0xEB2270", Offset = "0xEB2270", VA = "0xEB2270")]
		static SetupProject()
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xEB2274", Offset = "0xEB2274", VA = "0xEB2274")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void setup()
		{
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xEB2528", Offset = "0xEB2528", VA = "0xEB2528")]
		public SetupProject()
		{
		}
	}
}
namespace Crosstales.BWF.Provider
{
	[Token(Token = "0x200034C")]
	public abstract class BadWordProvider : BaseProvider
	{
		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly List<BadWords> badwords;

		[Token(Token = "0x4001295")]
		private const string exactRegexStart = "(?<![\\w\\d])";

		[Token(Token = "0x4001296")]
		private const string exactRegexEnd = "s?(?![\\w\\d])";

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<string, Regex> exactBadwordsRegex;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<string, List<Regex>> debugExactBadwordsRegex;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<string, List<string>> simpleBadwords;

		[Token(Token = "0x1700022A")]
		public Dictionary<string, Regex> ExactBadwordsRegex
		{
			[Token(Token = "0x600147D")]
			[Address(RVA = "0xEB2530", Offset = "0xEB2530", VA = "0xEB2530")]
			get
			{
				return null;
			}
			[Token(Token = "0x600147E")]
			[Address(RVA = "0xEB2538", Offset = "0xEB2538", VA = "0xEB2538")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public Dictionary<string, List<Regex>> DebugExactBadwordsRegex
		{
			[Token(Token = "0x600147F")]
			[Address(RVA = "0xEB2540", Offset = "0xEB2540", VA = "0xEB2540")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001480")]
			[Address(RVA = "0xEB2548", Offset = "0xEB2548", VA = "0xEB2548")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public Dictionary<string, List<string>> SimpleBadwords
		{
			[Token(Token = "0x6001481")]
			[Address(RVA = "0xEB2550", Offset = "0xEB2550", VA = "0xEB2550")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001482")]
			[Address(RVA = "0xEB2558", Offset = "0xEB2558", VA = "0xEB2558")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xEB2560", Offset = "0xEB2560", VA = "0xEB2560")]
		private void Start()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xEB2564", Offset = "0xEB2564", VA = "0xEB2564", Slot = "8")]
		public override void Load()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xEB25DC", Offset = "0xEB25DC", VA = "0xEB25DC", Slot = "10")]
		protected override void init()
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xEB3240", Offset = "0xEB3240", VA = "0xEB3240")]
		protected BadWordProvider()
		{
		}
	}
	[Token(Token = "0x200034D")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_provider_1_1_bad_word_provider_text.html")]
	public class BadWordProviderText : BadWordProvider
	{
		[Token(Token = "0x200034F")]
		[CompilerGenerated]
		private sealed class <loadWeb>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400129C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400129D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400129E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BadWordProviderText <>4__this;

			[Token(Token = "0x400129F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Source src;

			[Token(Token = "0x40012A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private string <uid>5__2;

			[Token(Token = "0x40012A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__3;

			[Token(Token = "0x40012A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<string> <list>5__4;

			[Token(Token = "0x1700022D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001494")]
				[Address(RVA = "0xEB4C28", Offset = "0xEB4C28", VA = "0xEB4C28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001496")]
				[Address(RVA = "0xEB4C70", Offset = "0xEB4C70", VA = "0xEB4C70", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001490")]
			[Address(RVA = "0xEB3B50", Offset = "0xEB3B50", VA = "0xEB3B50")]
			[DebuggerHidden]
			public <loadWeb>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001491")]
			[Address(RVA = "0xEB3C78", Offset = "0xEB3C78", VA = "0xEB3C78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001492")]
			[Address(RVA = "0xEB3CA4", Offset = "0xEB3CA4", VA = "0xEB3CA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001493")]
			[Address(RVA = "0xEB4B78", Offset = "0xEB4B78", VA = "0xEB4B78")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001495")]
			[Address(RVA = "0xEB4C30", Offset = "0xEB4C30", VA = "0xEB4C30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000350")]
		[CompilerGenerated]
		private sealed class <loadResource>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BadWordProviderText <>4__this;

			[Token(Token = "0x40012A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Source src;

			[Token(Token = "0x40012A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private string <uid>5__2;

			[Token(Token = "0x40012A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<string> <list>5__3;

			[Token(Token = "0x1700022F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600149A")]
				[Address(RVA = "0xEB5150", Offset = "0xEB5150", VA = "0xEB5150", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000230")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600149C")]
				[Address(RVA = "0xEB5198", Offset = "0xEB5198", VA = "0xEB5198", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001497")]
			[Address(RVA = "0xEB3B78", Offset = "0xEB3B78", VA = "0xEB3B78")]
			[DebuggerHidden]
			public <loadResource>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001498")]
			[Address(RVA = "0xEB4C78", Offset = "0xEB4C78", VA = "0xEB4C78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001499")]
			[Address(RVA = "0xEB4C7C", Offset = "0xEB4C7C", VA = "0xEB4C7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600149B")]
			[Address(RVA = "0xEB5158", Offset = "0xEB5158", VA = "0xEB5158", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xEB3530", Offset = "0xEB3530", VA = "0xEB3530", Slot = "8")]
		public override void Load()
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xEB3AE0", Offset = "0xEB3AE0", VA = "0xEB3AE0", Slot = "9")]
		public override void Save()
		{
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xEB3A50", Offset = "0xEB3A50", VA = "0xEB3A50")]
		[IteratorStateMachine(typeof(<loadWeb>d__2))]
		private IEnumerator loadWeb(Source src)
		{
			return null;
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xEB39C0", Offset = "0xEB39C0", VA = "0xEB39C0")]
		[IteratorStateMachine(typeof(<loadResource>d__3))]
		private IEnumerator loadResource(Source src)
		{
			return null;
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xEB3BA0", Offset = "0xEB3BA0", VA = "0xEB3BA0")]
		public BadWordProviderText()
		{
		}
	}
	[Token(Token = "0x2000351")]
	[ExecuteInEditMode]
	public abstract class BaseProvider : MonoBehaviour, IProvider
	{
		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Regex Options")]
		[Tooltip("Option1 (default: RegexOptions.IgnoreCase).")]
		public RegexOptions RegexOption1;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Option2 (default: RegexOptions.CultureInvariant).")]
		public RegexOptions RegexOption2;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Option3 (default: RegexOptions.None).")]
		public RegexOptions RegexOption3;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Option4 (default: RegexOptions.None).")]
		public RegexOptions RegexOption4;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Option5 (default: RegexOptions.None).")]
		public RegexOptions RegexOption5;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Sources")]
		[ContextMenuItem("Create Source", "createSource")]
		[Tooltip("All sources for this provider.")]
		public List<Source> Sources;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Clears all existing bad words on 'Load' (default: true).")]
		[Header("Load Behaviour")]
		public bool ClearOnLoad;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected readonly List<string> coRoutines;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static bool loggedUnsupportedPlatform;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool loading;

		[Token(Token = "0x17000231")]
		public int RegexCount
		{
			[Token(Token = "0x600149D")]
			[Address(RVA = "0xEB51A0", Offset = "0xEB51A0", VA = "0xEB51A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000232")]
		public bool isReady
		{
			[Token(Token = "0x600149E")]
			[Address(RVA = "0xEB52BC", Offset = "0xEB52BC", VA = "0xEB52BC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600149F")]
			[Address(RVA = "0xEB52C4", Offset = "0xEB52C4", VA = "0xEB52C4", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60014A0")]
		public abstract void Load();

		[Token(Token = "0x60014A1")]
		public abstract void Save();

		[Token(Token = "0x60014A2")]
		protected abstract void init();

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xEB52D0", Offset = "0xEB52D0", VA = "0xEB52D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xEB52DC", Offset = "0xEB52DC", VA = "0xEB52DC")]
		protected void logNoResourcesAdded()
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xEB5524", Offset = "0xEB5524", VA = "0xEB5524")]
		protected void createSource()
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xEB33B4", Offset = "0xEB33B4", VA = "0xEB33B4")]
		protected BaseProvider()
		{
		}
	}
	[Token(Token = "0x2000353")]
	public abstract class DomainProvider : BaseProvider
	{
		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly List<Domains> domains;

		[Token(Token = "0x40012B7")]
		private const string domainRegexStart = "\\b{0,1}((ht|f)tp(s?)\\:\\/\\/)?[\\w\\-\\.\\@]*[\\.]";

		[Token(Token = "0x40012B8")]
		private const string domainRegexEnd = "(:\\d{1,5})?(\\/|\\b)";

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<string, Regex> domainsRegex;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<string, List<Regex>> debugDomainsRegex;

		[Token(Token = "0x17000233")]
		public Dictionary<string, Regex> DomainsRegex
		{
			[Token(Token = "0x60014AA")]
			[Address(RVA = "0xEB5618", Offset = "0xEB5618", VA = "0xEB5618")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014AB")]
			[Address(RVA = "0xEB5620", Offset = "0xEB5620", VA = "0xEB5620")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000234")]
		public Dictionary<string, List<Regex>> DebugDomainsRegex
		{
			[Token(Token = "0x60014AC")]
			[Address(RVA = "0xEB5628", Offset = "0xEB5628", VA = "0xEB5628")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014AD")]
			[Address(RVA = "0xEB5630", Offset = "0xEB5630", VA = "0xEB5630")]
			protected set
			{
			}
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xEB5638", Offset = "0xEB5638", VA = "0xEB5638")]
		private void Start()
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xEB563C", Offset = "0xEB563C", VA = "0xEB563C", Slot = "8")]
		public override void Load()
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xEB56B4", Offset = "0xEB56B4", VA = "0xEB56B4", Slot = "10")]
		protected override void init()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xEB6168", Offset = "0xEB6168", VA = "0xEB6168")]
		protected DomainProvider()
		{
		}
	}
	[Token(Token = "0x2000354")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_provider_1_1_domain_provider_text.html")]
	public class DomainProviderText : DomainProvider
	{
		[Token(Token = "0x2000356")]
		[CompilerGenerated]
		private sealed class <loadWeb>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DomainProviderText <>4__this;

			[Token(Token = "0x40012C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Source src;

			[Token(Token = "0x40012C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private string <uid>5__2;

			[Token(Token = "0x40012C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__3;

			[Token(Token = "0x40012C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<string> <list>5__4;

			[Token(Token = "0x17000235")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014BF")]
				[Address(RVA = "0xEB7A64", Offset = "0xEB7A64", VA = "0xEB7A64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000236")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014C1")]
				[Address(RVA = "0xEB7AAC", Offset = "0xEB7AAC", VA = "0xEB7AAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014BB")]
			[Address(RVA = "0xEB698C", Offset = "0xEB698C", VA = "0xEB698C")]
			[DebuggerHidden]
			public <loadWeb>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60014BC")]
			[Address(RVA = "0xEB6AB4", Offset = "0xEB6AB4", VA = "0xEB6AB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014BD")]
			[Address(RVA = "0xEB6AE0", Offset = "0xEB6AE0", VA = "0xEB6AE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014BE")]
			[Address(RVA = "0xEB79B4", Offset = "0xEB79B4", VA = "0xEB79B4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60014C0")]
			[Address(RVA = "0xEB7A6C", Offset = "0xEB7A6C", VA = "0xEB7A6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000357")]
		[CompilerGenerated]
		private sealed class <loadResource>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DomainProviderText <>4__this;

			[Token(Token = "0x40012C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Source src;

			[Token(Token = "0x40012C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private string <uid>5__2;

			[Token(Token = "0x40012C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<string> <list>5__3;

			[Token(Token = "0x17000237")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014C5")]
				[Address(RVA = "0xEB7F8C", Offset = "0xEB7F8C", VA = "0xEB7F8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000238")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014C7")]
				[Address(RVA = "0xEB7FD4", Offset = "0xEB7FD4", VA = "0xEB7FD4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014C2")]
			[Address(RVA = "0xEB69B4", Offset = "0xEB69B4", VA = "0xEB69B4")]
			[DebuggerHidden]
			public <loadResource>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60014C3")]
			[Address(RVA = "0xEB7AB4", Offset = "0xEB7AB4", VA = "0xEB7AB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014C4")]
			[Address(RVA = "0xEB7AB8", Offset = "0xEB7AB8", VA = "0xEB7AB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C6")]
			[Address(RVA = "0xEB7F94", Offset = "0xEB7F94", VA = "0xEB7F94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xEB636C", Offset = "0xEB636C", VA = "0xEB636C", Slot = "8")]
		public override void Load()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xEB691C", Offset = "0xEB691C", VA = "0xEB691C", Slot = "9")]
		public override void Save()
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xEB688C", Offset = "0xEB688C", VA = "0xEB688C")]
		[IteratorStateMachine(typeof(<loadWeb>d__2))]
		private IEnumerator loadWeb(Source src)
		{
			return null;
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xEB67FC", Offset = "0xEB67FC", VA = "0xEB67FC")]
		[IteratorStateMachine(typeof(<loadResource>d__3))]
		private IEnumerator loadResource(Source src)
		{
			return null;
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xEB69DC", Offset = "0xEB69DC", VA = "0xEB69DC")]
		public DomainProviderText()
		{
		}
	}
	[Token(Token = "0x2000358")]
	public interface IProvider
	{
		[Token(Token = "0x17000239")]
		bool isReady
		{
			[Token(Token = "0x60014C8")]
			get;
			[Token(Token = "0x60014C9")]
			set;
		}

		[Token(Token = "0x60014CA")]
		void Load();

		[Token(Token = "0x60014CB")]
		void Save();
	}
}
namespace Crosstales.BWF.Model
{
	[Serializable]
	[Token(Token = "0x2000359")]
	public class BadWords
	{
		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Source Source;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> BadWordList;

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xEB4774", Offset = "0xEB4774", VA = "0xEB4774")]
		public BadWords(Source source, IEnumerable<string> badWordList)
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xEB7FDC", Offset = "0xEB7FDC", VA = "0xEB7FDC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xEB81B4", Offset = "0xEB81B4", VA = "0xEB81B4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xEB8304", Offset = "0xEB8304", VA = "0xEB8304", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200035A")]
	public class Domains
	{
		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Source Source;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> DomainList;

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xEB75B0", Offset = "0xEB75B0", VA = "0xEB75B0")]
		public Domains(Source source, IEnumerable<string> domainList)
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xEB830C", Offset = "0xEB830C", VA = "0xEB830C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xEB84E4", Offset = "0xEB84E4", VA = "0xEB84E4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xEB8634", Offset = "0xEB8634", VA = "0xEB8634", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
}
namespace Crosstales.BWF.Model.Enum
{
	[Token(Token = "0x200035B")]
	[Flags]
	public enum ManagerMask
	{
		[Token(Token = "0x40012CF")]
		None = 0,
		[Token(Token = "0x40012D0")]
		All = 1,
		[Token(Token = "0x40012D1")]
		BadWord = 2,
		[Token(Token = "0x40012D2")]
		Domain = 4,
		[Token(Token = "0x40012D3")]
		Capitalization = 8,
		[Token(Token = "0x40012D4")]
		Punctuation = 0x10
	}
	[Token(Token = "0x200035C")]
	public enum ReplaceMode
	{
		[Token(Token = "0x40012D6")]
		Default,
		[Token(Token = "0x40012D7")]
		NonLettersOrDigits,
		[Token(Token = "0x40012D8")]
		LeetSpeak,
		[Token(Token = "0x40012D9")]
		LeetSpeakAdvanced
	}
}
namespace Crosstales.BWF.Manager
{
	[Token(Token = "0x200035D")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_manager_1_1_bad_word_manager.html")]
	[DisallowMultipleComponent]
	public class BadWordManager : BaseManager<BadWordManager, BadWordFilter>
	{
		[Token(Token = "0x200035F")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass50_0
		{
			[Token(Token = "0x40012E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BadWordManager <>4__this;

			[Token(Token = "0x40012E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x40012E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string[] sourceNames;

			[Token(Token = "0x40012E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool result;

			[Token(Token = "0x60014F8")]
			[Address(RVA = "0xEB8FA8", Offset = "0xEB8FA8", VA = "0xEB8FA8")]
			public <>c__DisplayClass50_0()
			{
			}

			[Token(Token = "0x60014F9")]
			[Address(RVA = "0xEB8FB0", Offset = "0xEB8FB0", VA = "0xEB8FB0")]
			internal void <containsAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000360")]
		[CompilerGenerated]
		private sealed class <containsAsync>d__50 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BadWordManager <>4__this;

			[Token(Token = "0x40012ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x40012EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string[] sourceNames;

			[Token(Token = "0x40012EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass50_0 <>8__1;

			[Token(Token = "0x17000245")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014FD")]
				[Address(RVA = "0xEB91E4", Offset = "0xEB91E4", VA = "0xEB91E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000246")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014FF")]
				[Address(RVA = "0xEB922C", Offset = "0xEB922C", VA = "0xEB922C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014FA")]
			[Address(RVA = "0xEB8E2C", Offset = "0xEB8E2C", VA = "0xEB8E2C")]
			[DebuggerHidden]
			public <containsAsync>d__50(int <>1__state)
			{
			}

			[Token(Token = "0x60014FB")]
			[Address(RVA = "0xEB8FDC", Offset = "0xEB8FDC", VA = "0xEB8FDC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014FC")]
			[Address(RVA = "0xEB8FE0", Offset = "0xEB8FE0", VA = "0xEB8FE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014FE")]
			[Address(RVA = "0xEB91EC", Offset = "0xEB91EC", VA = "0xEB91EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000361")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass51_0
		{
			[Token(Token = "0x40012F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BadWordManager <>4__this;

			[Token(Token = "0x40012F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x40012F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string[] sourceNames;

			[Token(Token = "0x40012F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<string> result;

			[Token(Token = "0x6001500")]
			[Address(RVA = "0xEB9234", Offset = "0xEB9234", VA = "0xEB9234")]
			public <>c__DisplayClass51_0()
			{
			}

			[Token(Token = "0x6001501")]
			[Address(RVA = "0xEB923C", Offset = "0xEB923C", VA = "0xEB923C")]
			internal void <getAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000362")]
		[CompilerGenerated]
		private sealed class <getAllAsync>d__51 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BadWordManager <>4__this;

			[Token(Token = "0x40012F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x40012F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string[] sourceNames;

			[Token(Token = "0x40012F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass51_0 <>8__1;

			[Token(Token = "0x17000247")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001505")]
				[Address(RVA = "0xEB947C", Offset = "0xEB947C", VA = "0xEB947C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000248")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001507")]
				[Address(RVA = "0xEB94C4", Offset = "0xEB94C4", VA = "0xEB94C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001502")]
			[Address(RVA = "0xEB8E54", Offset = "0xEB8E54", VA = "0xEB8E54")]
			[DebuggerHidden]
			public <getAllAsync>d__51(int <>1__state)
			{
			}

			[Token(Token = "0x6001503")]
			[Address(RVA = "0xEB926C", Offset = "0xEB926C", VA = "0xEB926C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001504")]
			[Address(RVA = "0xEB9270", Offset = "0xEB9270", VA = "0xEB9270", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001506")]
			[Address(RVA = "0xEB9484", Offset = "0xEB9484", VA = "0xEB9484", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000363")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass52_0
		{
			[Token(Token = "0x40012FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BadWordManager <>4__this;

			[Token(Token = "0x40012FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x40012FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool markOnly;

			[Token(Token = "0x40012FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string prefix;

			[Token(Token = "0x40012FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string postfix;

			[Token(Token = "0x40012FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string[] sourceNames;

			[Token(Token = "0x4001300")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string result;

			[Token(Token = "0x6001508")]
			[Address(RVA = "0xEB94CC", Offset = "0xEB94CC", VA = "0xEB94CC")]
			public <>c__DisplayClass52_0()
			{
			}

			[Token(Token = "0x6001509")]
			[Address(RVA = "0xEB94D4", Offset = "0xEB94D4", VA = "0xEB94D4")]
			internal void <replaceAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000364")]
		[CompilerGenerated]
		private sealed class <replaceAllAsync>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001301")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001302")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001303")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BadWordManager <>4__this;

			[Token(Token = "0x4001304")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x4001305")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool markOnly;

			[Token(Token = "0x4001306")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string prefix;

			[Token(Token = "0x4001307")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string postfix;

			[Token(Token = "0x4001308")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string[] sourceNames;

			[Token(Token = "0x4001309")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private <>c__DisplayClass52_0 <>8__1;

			[Token(Token = "0x17000249")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600150D")]
				[Address(RVA = "0xEB9750", Offset = "0xEB9750", VA = "0xEB9750", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600150F")]
				[Address(RVA = "0xEB9798", Offset = "0xEB9798", VA = "0xEB9798", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600150A")]
			[Address(RVA = "0xEB8E7C", Offset = "0xEB8E7C", VA = "0xEB8E7C")]
			[DebuggerHidden]
			public <replaceAllAsync>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x600150B")]
			[Address(RVA = "0xEB9510", Offset = "0xEB9510", VA = "0xEB9510", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600150C")]
			[Address(RVA = "0xEB9514", Offset = "0xEB9514", VA = "0xEB9514", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600150E")]
			[Address(RVA = "0xEB9758", Offset = "0xEB9758", VA = "0xEB9758", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Specific Settings")]
		[FormerlySerializedAs("ReplaceChars")]
		[SerializeField]
		[Tooltip("Replace characters for bad words (default: *).")]
		private string replaceChars;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Tooltip("Replace mode operations on the input string (default: Default).")]
		private ReplaceMode mode;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[Tooltip("Remove unnecessary spaces between letters in the input string (default: false).")]
		private bool removeSpaces;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[FormerlySerializedAs("SimpleCheck")]
		[Tooltip("Use simple detection algorithm. This is the way to check for Chinese, Japanese, Korean and Thai bad words (default: false).")]
		[SerializeField]
		private bool simpleCheck;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("List of all left-to-right providers.")]
		[SerializeField]
		[FormerlySerializedAs("BadWordProviderLTR")]
		[Header("Bad Word Providers")]
		private List<BadWordProvider> badWordProviderLTR;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Tooltip("List of all right-to-left providers.")]
		[FormerlySerializedAs("BadWordProviderRTL")]
		private List<BadWordProvider> badWordProviderRTL;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Events")]
		public OnContainsCompleted OnContainsCompleted;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public OnGetAllCompleted OnGetAllCompleted;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public OnReplaceAllCompleted OnReplaceAllCompleted;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Thread worker;

		[Token(Token = "0x1700023A")]
		public string ReplaceChars
		{
			[Token(Token = "0x60014D4")]
			[Address(RVA = "0xEB863C", Offset = "0xEB863C", VA = "0xEB863C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014D5")]
			[Address(RVA = "0xEB8658", Offset = "0xEB8658", VA = "0xEB8658")]
			set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		public ReplaceMode Mode
		{
			[Token(Token = "0x60014D6")]
			[Address(RVA = "0xEB8690", Offset = "0xEB8690", VA = "0xEB8690")]
			get
			{
				return default(ReplaceMode);
			}
			[Token(Token = "0x60014D7")]
			[Address(RVA = "0xEB86AC", Offset = "0xEB86AC", VA = "0xEB86AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public bool RemoveSpaces
		{
			[Token(Token = "0x60014D8")]
			[Address(RVA = "0xEB86CC", Offset = "0xEB86CC", VA = "0xEB86CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014D9")]
			[Address(RVA = "0xEB86E8", Offset = "0xEB86E8", VA = "0xEB86E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public bool SimpleCheck
		{
			[Token(Token = "0x60014DA")]
			[Address(RVA = "0xEB870C", Offset = "0xEB870C", VA = "0xEB870C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014DB")]
			[Address(RVA = "0xEB8728", Offset = "0xEB8728", VA = "0xEB8728")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public List<BadWordProvider> BadWordProviderLTR
		{
			[Token(Token = "0x60014DC")]
			[Address(RVA = "0xEB874C", Offset = "0xEB874C", VA = "0xEB874C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014DD")]
			[Address(RVA = "0xEB8754", Offset = "0xEB8754", VA = "0xEB8754")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public List<BadWordProvider> BadWordProviderRTL
		{
			[Token(Token = "0x60014DE")]
			[Address(RVA = "0xEB875C", Offset = "0xEB875C", VA = "0xEB875C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014DF")]
			[Address(RVA = "0xEB8764", Offset = "0xEB8764", VA = "0xEB8764")]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public List<Source> Sources
		{
			[Token(Token = "0x60014E0")]
			[Address(RVA = "0xEAF1A0", Offset = "0xEAF1A0", VA = "0xEAF1A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000241")]
		public int TotalRegexCount
		{
			[Token(Token = "0x60014E1")]
			[Address(RVA = "0xEB876C", Offset = "0xEB876C", VA = "0xEB876C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000242")]
		protected override OnContainsCompleted onContainsCompleted
		{
			[Token(Token = "0x60014E2")]
			[Address(RVA = "0xEB888C", Offset = "0xEB888C", VA = "0xEB888C", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000243")]
		protected override OnGetAllCompleted onGetAllCompleted
		{
			[Token(Token = "0x60014E3")]
			[Address(RVA = "0xEB8894", Offset = "0xEB8894", VA = "0xEB8894", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000244")]
		protected override OnReplaceAllCompleted onReplaceAllCompleted
		{
			[Token(Token = "0x60014E4")]
			[Address(RVA = "0xEB889C", Offset = "0xEB889C", VA = "0xEB889C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xEB88A4", Offset = "0xEB88A4", VA = "0xEB88A4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xEB898C", Offset = "0xEB898C", VA = "0xEB898C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xEB8A48", Offset = "0xEB8A48", VA = "0xEB8A48", Slot = "6")]
		protected override void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xEB8B34", Offset = "0xEB8B34", VA = "0xEB8B34")]
		public static void ResetObject()
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xEAF000", Offset = "0xEAF000", VA = "0xEAF000")]
		public void Load()
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xEB0D18", Offset = "0xEB0D18", VA = "0xEB0D18")]
		public bool Contains(string text, params string[] sourceNames)
		{
			return default(bool);
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xEB8B98", Offset = "0xEB8B98", VA = "0xEB8B98")]
		public void ContainsAsync(string text, params string[] sourceNames)
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xEB0E34", Offset = "0xEB0E34", VA = "0xEB0E34")]
		public List<string> GetAll(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xEB8C5C", Offset = "0xEB8C5C", VA = "0xEB8C5C")]
		public void GetAllAsync(string text, params string[] sourceNames)
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xEB100C", Offset = "0xEB100C", VA = "0xEB100C")]
		public string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xEB8D20", Offset = "0xEB8D20", VA = "0xEB8D20")]
		public void ReplaceAllAsync(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xEB0A50", Offset = "0xEB0A50", VA = "0xEB0A50")]
		public string Mark(string text, bool replace = false, string prefix = "<b><color=red>", string postfix = "</color></b>", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xEB8BB8", Offset = "0xEB8BB8", VA = "0xEB8BB8")]
		[IteratorStateMachine(typeof(<containsAsync>d__50))]
		private IEnumerator containsAsync(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xEB8C7C", Offset = "0xEB8C7C", VA = "0xEB8C7C")]
		[IteratorStateMachine(typeof(<getAllAsync>d__51))]
		private IEnumerator getAllAsync(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xEB8D44", Offset = "0xEB8D44", VA = "0xEB8D44")]
		[IteratorStateMachine(typeof(<replaceAllAsync>d__52))]
		private IEnumerator replaceAllAsync(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xEB8EA4", Offset = "0xEB8EA4", VA = "0xEB8EA4")]
		public BadWordManager()
		{
		}
	}
	[Token(Token = "0x2000365")]
	[ExecuteInEditMode]
	public abstract class BaseManager<S, T> : Singleton<S> where S : Singleton<S> where T : BaseFilter
	{
		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[Tooltip("Disables the ordering of the 'GetAll'-method (prevent possible memory garbage).")]
		private bool disableOrdering;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T filter;

		[Token(Token = "0x1700024B")]
		public bool DisableOrdering
		{
			[Token(Token = "0x6001510")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001511")]
			set
			{
			}
		}

		[Token(Token = "0x1700024C")]
		public bool isReady
		{
			[Token(Token = "0x6001512")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024D")]
		protected abstract OnContainsCompleted onContainsCompleted
		{
			[Token(Token = "0x6001513")]
			get;
		}

		[Token(Token = "0x1700024E")]
		protected abstract OnGetAllCompleted onGetAllCompleted
		{
			[Token(Token = "0x6001514")]
			get;
		}

		[Token(Token = "0x1700024F")]
		protected abstract OnReplaceAllCompleted onReplaceAllCompleted
		{
			[Token(Token = "0x6001515")]
			get;
		}

		[Token(Token = "0x1400000C")]
		public event ContainsComplete OnContainsComplete
		{
			[Token(Token = "0x6001516")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001517")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event GetAllComplete OnGetAllComplete
		{
			[Token(Token = "0x6001518")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001519")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000E")]
		public event ReplaceAllComplete OnReplaceAllComplete
		{
			[Token(Token = "0x600151A")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600151B")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600151C")]
		private void Start()
		{
		}

		[Token(Token = "0x600151D")]
		public string Unmark(string text, string prefix = "<b><color=red>", string postfix = "</color></b>")
		{
			return null;
		}

		[Token(Token = "0x600151E")]
		protected void onContainsComplete(string text, bool result)
		{
		}

		[Token(Token = "0x600151F")]
		protected void onGetAllComplete(string text, List<string> badWords)
		{
		}

		[Token(Token = "0x6001520")]
		protected void onReplaceAllComplete(string originalText, string cleanText)
		{
		}

		[Token(Token = "0x6001521")]
		protected BaseManager()
		{
		}
	}
	[Token(Token = "0x2000366")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_manager_1_1_capitalization_manager.html")]
	[DisallowMultipleComponent]
	public class CapitalizationManager : BaseManager<CapitalizationManager, CapitalizationFilter>
	{
		[Token(Token = "0x2000367")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4001314")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CapitalizationManager <>4__this;

			[Token(Token = "0x4001315")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x4001316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool result;

			[Token(Token = "0x6001537")]
			[Address(RVA = "0xEBAD18", Offset = "0xEBAD18", VA = "0xEBAD18")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x6001538")]
			[Address(RVA = "0xEBAD20", Offset = "0xEBAD20", VA = "0xEBAD20")]
			internal void <containsAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000368")]
		[CompilerGenerated]
		private sealed class <containsAsync>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001317")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001318")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001319")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CapitalizationManager <>4__this;

			[Token(Token = "0x400131A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x400131B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass26_0 <>8__1;

			[Token(Token = "0x17000254")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600153C")]
				[Address(RVA = "0xEBAF6C", Offset = "0xEBAF6C", VA = "0xEBAF6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000255")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600153E")]
				[Address(RVA = "0xEBAFB4", Offset = "0xEBAFB4", VA = "0xEBAFB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001539")]
			[Address(RVA = "0xEBAD50", Offset = "0xEBAD50", VA = "0xEBAD50")]
			[DebuggerHidden]
			public <containsAsync>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x600153A")]
			[Address(RVA = "0xEBAD78", Offset = "0xEBAD78", VA = "0xEBAD78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600153B")]
			[Address(RVA = "0xEBAD7C", Offset = "0xEBAD7C", VA = "0xEBAD7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600153D")]
			[Address(RVA = "0xEBAF74", Offset = "0xEBAF74", VA = "0xEBAF74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000369")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x400131C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CapitalizationManager <>4__this;

			[Token(Token = "0x400131D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x400131E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<string> result;

			[Token(Token = "0x600153F")]
			[Address(RVA = "0xEBAFBC", Offset = "0xEBAFBC", VA = "0xEBAFBC")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x6001540")]
			[Address(RVA = "0xEBAFC4", Offset = "0xEBAFC4", VA = "0xEBAFC4")]
			internal void <getAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x200036A")]
		[CompilerGenerated]
		private sealed class <getAllAsync>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400131F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001320")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001321")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CapitalizationManager <>4__this;

			[Token(Token = "0x4001322")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x4001323")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass27_0 <>8__1;

			[Token(Token = "0x17000256")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001544")]
				[Address(RVA = "0xEBB218", Offset = "0xEBB218", VA = "0xEBB218", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000257")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001546")]
				[Address(RVA = "0xEBB260", Offset = "0xEBB260", VA = "0xEBB260", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001541")]
			[Address(RVA = "0xEBAFF8", Offset = "0xEBAFF8", VA = "0xEBAFF8")]
			[DebuggerHidden]
			public <getAllAsync>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6001542")]
			[Address(RVA = "0xEBB020", Offset = "0xEBB020", VA = "0xEBB020", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001543")]
			[Address(RVA = "0xEBB024", Offset = "0xEBB024", VA = "0xEBB024", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001545")]
			[Address(RVA = "0xEBB220", Offset = "0xEBB220", VA = "0xEBB220", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200036B")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass28_0
		{
			[Token(Token = "0x4001324")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CapitalizationManager <>4__this;

			[Token(Token = "0x4001325")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x4001326")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool markOnly;

			[Token(Token = "0x4001327")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string prefix;

			[Token(Token = "0x4001328")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string postfix;

			[Token(Token = "0x4001329")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string result;

			[Token(Token = "0x6001547")]
			[Address(RVA = "0xEBB268", Offset = "0xEBB268", VA = "0xEBB268")]
			public <>c__DisplayClass28_0()
			{
			}

			[Token(Token = "0x6001548")]
			[Address(RVA = "0xEBB270", Offset = "0xEBB270", VA = "0xEBB270")]
			internal void <replaceAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x200036C")]
		[CompilerGenerated]
		private sealed class <replaceAllAsync>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400132A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400132B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400132C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CapitalizationManager <>4__this;

			[Token(Token = "0x400132D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x400132E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool markOnly;

			[Token(Token = "0x400132F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string prefix;

			[Token(Token = "0x4001330")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string postfix;

			[Token(Token = "0x4001331")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private <>c__DisplayClass28_0 <>8__1;

			[Token(Token = "0x17000258")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600154C")]
				[Address(RVA = "0xEBB500", Offset = "0xEBB500", VA = "0xEBB500", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000259")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600154E")]
				[Address(RVA = "0xEBB548", Offset = "0xEBB548", VA = "0xEBB548", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001549")]
			[Address(RVA = "0xEBB2AC", Offset = "0xEBB2AC", VA = "0xEBB2AC")]
			[DebuggerHidden]
			public <replaceAllAsync>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x600154A")]
			[Address(RVA = "0xEBB2D4", Offset = "0xEBB2D4", VA = "0xEBB2D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600154B")]
			[Address(RVA = "0xEBB2D8", Offset = "0xEBB2D8", VA = "0xEBB2D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600154D")]
			[Address(RVA = "0xEBB508", Offset = "0xEBB508", VA = "0xEBB508", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[FormerlySerializedAs("CapitalizationCharsNumber")]
		[SerializeField]
		[Tooltip("Defines the number of allowed capital letters in a row. (default: 3).")]
		[Header("Specific Settings")]
		private int capitalizationCharsNumber;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Events")]
		public OnContainsCompleted OnContainsCompleted;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OnGetAllCompleted OnGetAllCompleted;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OnReplaceAllCompleted OnReplaceAllCompleted;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Thread worker;

		[Token(Token = "0x17000250")]
		public int CapitalizationCharsNumber
		{
			[Token(Token = "0x6001522")]
			[Address(RVA = "0xEB97A0", Offset = "0xEB97A0", VA = "0xEB97A0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001523")]
			[Address(RVA = "0xEB97BC", Offset = "0xEB97BC", VA = "0xEB97BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		protected override OnContainsCompleted onContainsCompleted
		{
			[Token(Token = "0x6001524")]
			[Address(RVA = "0xEB97EC", Offset = "0xEB97EC", VA = "0xEB97EC", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000252")]
		protected override OnGetAllCompleted onGetAllCompleted
		{
			[Token(Token = "0x6001525")]
			[Address(RVA = "0xEB97F4", Offset = "0xEB97F4", VA = "0xEB97F4", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000253")]
		protected override OnReplaceAllCompleted onReplaceAllCompleted
		{
			[Token(Token = "0x6001526")]
			[Address(RVA = "0xEB97FC", Offset = "0xEB97FC", VA = "0xEB97FC", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xEB9804", Offset = "0xEB9804", VA = "0xEB9804", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xEB98EC", Offset = "0xEB98EC", VA = "0xEB98EC", Slot = "6")]
		protected override void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xEB99D8", Offset = "0xEB99D8", VA = "0xEB99D8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xEB9A14", Offset = "0xEB9A14", VA = "0xEB9A14")]
		public static void ResetObject()
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xEAF110", Offset = "0xEAF110", VA = "0xEAF110")]
		public void Load()
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xEB0D74", Offset = "0xEB0D74", VA = "0xEB0D74")]
		public bool Contains(string text)
		{
			return default(bool);
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xEB9A78", Offset = "0xEB9A78", VA = "0xEB9A78")]
		public void ContainsAsync(string text)
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xEB0EF8", Offset = "0xEB0EF8", VA = "0xEB0EF8")]
		public List<string> GetAll(string text)
		{
			return null;
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xEB9B28", Offset = "0xEB9B28", VA = "0xEB9B28")]
		public void GetAllAsync(string text)
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xEB109C", Offset = "0xEB109C", VA = "0xEB109C")]
		public string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "")
		{
			return null;
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xEB9BD8", Offset = "0xEB9BD8", VA = "0xEB9BD8")]
		public void ReplaceAllAsync(string text, bool markOnly = false, string prefix = "", string postfix = "")
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xEB0AE0", Offset = "0xEB0AE0", VA = "0xEB0AE0")]
		public string Mark(string text, bool replace = false, string prefix = "<b><color=red>", string postfix = "</color></b>")
		{
			return null;
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xEB9A98", Offset = "0xEB9A98", VA = "0xEB9A98")]
		[IteratorStateMachine(typeof(<containsAsync>d__26))]
		private IEnumerator containsAsync(string text)
		{
			return null;
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xEB9B48", Offset = "0xEB9B48", VA = "0xEB9B48")]
		[IteratorStateMachine(typeof(<getAllAsync>d__27))]
		private IEnumerator getAllAsync(string text)
		{
			return null;
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xEB9BFC", Offset = "0xEB9BFC", VA = "0xEB9BFC")]
		[IteratorStateMachine(typeof(<replaceAllAsync>d__28))]
		private IEnumerator replaceAllAsync(string text, bool markOnly = false, string prefix = "", string postfix = "")
		{
			return null;
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xEB9CC8", Offset = "0xEB9CC8", VA = "0xEB9CC8")]
		public CapitalizationManager()
		{
		}
	}
	[Token(Token = "0x200036D")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_manager_1_1_domain_manager.html")]
	[DisallowMultipleComponent]
	public class DomainManager : BaseManager<DomainManager, DomainFilter>
	{
		[Token(Token = "0x200036F")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass34_0
		{
			[Token(Token = "0x400133A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DomainManager <>4__this;

			[Token(Token = "0x400133B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x400133C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string[] sourceNames;

			[Token(Token = "0x400133D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool result;

			[Token(Token = "0x600156B")]
			[Address(RVA = "0xEBC1C4", Offset = "0xEBC1C4", VA = "0xEBC1C4")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x600156C")]
			[Address(RVA = "0xEBC1CC", Offset = "0xEBC1CC", VA = "0xEBC1CC")]
			internal void <containsAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000370")]
		[CompilerGenerated]
		private sealed class <containsAsync>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400133E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400133F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001340")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DomainManager <>4__this;

			[Token(Token = "0x4001341")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x4001342")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string[] sourceNames;

			[Token(Token = "0x4001343")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass34_0 <>8__1;

			[Token(Token = "0x17000261")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001570")]
				[Address(RVA = "0xEBC400", Offset = "0xEBC400", VA = "0xEBC400", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000262")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001572")]
				[Address(RVA = "0xEBC448", Offset = "0xEBC448", VA = "0xEBC448", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600156D")]
			[Address(RVA = "0xEBC048", Offset = "0xEBC048", VA = "0xEBC048")]
			[DebuggerHidden]
			public <containsAsync>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x600156E")]
			[Address(RVA = "0xEBC1F8", Offset = "0xEBC1F8", VA = "0xEBC1F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600156F")]
			[Address(RVA = "0xEBC1FC", Offset = "0xEBC1FC", VA = "0xEBC1FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001571")]
			[Address(RVA = "0xEBC408", Offset = "0xEBC408", VA = "0xEBC408", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000371")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass35_0
		{
			[Token(Token = "0x4001344")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DomainManager <>4__this;

			[Token(Token = "0x4001345")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x4001346")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string[] sourceNames;

			[Token(Token = "0x4001347")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<string> result;

			[Token(Token = "0x6001573")]
			[Address(RVA = "0xEBC450", Offset = "0xEBC450", VA = "0xEBC450")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x6001574")]
			[Address(RVA = "0xEBC458", Offset = "0xEBC458", VA = "0xEBC458")]
			internal void <getAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000372")]
		[CompilerGenerated]
		private sealed class <getAllAsync>d__35 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001348")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001349")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400134A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DomainManager <>4__this;

			[Token(Token = "0x400134B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x400134C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string[] sourceNames;

			[Token(Token = "0x400134D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass35_0 <>8__1;

			[Token(Token = "0x17000263")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001578")]
				[Address(RVA = "0xEBC698", Offset = "0xEBC698", VA = "0xEBC698", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000264")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600157A")]
				[Address(RVA = "0xEBC6E0", Offset = "0xEBC6E0", VA = "0xEBC6E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001575")]
			[Address(RVA = "0xEBC070", Offset = "0xEBC070", VA = "0xEBC070")]
			[DebuggerHidden]
			public <getAllAsync>d__35(int <>1__state)
			{
			}

			[Token(Token = "0x6001576")]
			[Address(RVA = "0xEBC488", Offset = "0xEBC488", VA = "0xEBC488", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001577")]
			[Address(RVA = "0xEBC48C", Offset = "0xEBC48C", VA = "0xEBC48C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001579")]
			[Address(RVA = "0xEBC6A0", Offset = "0xEBC6A0", VA = "0xEBC6A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000373")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x400134E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DomainManager <>4__this;

			[Token(Token = "0x400134F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x4001350")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool markOnly;

			[Token(Token = "0x4001351")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string prefix;

			[Token(Token = "0x4001352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string postfix;

			[Token(Token = "0x4001353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string[] sourceNames;

			[Token(Token = "0x4001354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string result;

			[Token(Token = "0x600157B")]
			[Address(RVA = "0xEBC6E8", Offset = "0xEBC6E8", VA = "0xEBC6E8")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x600157C")]
			[Address(RVA = "0xEBC6F0", Offset = "0xEBC6F0", VA = "0xEBC6F0")]
			internal void <replaceAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000374")]
		[CompilerGenerated]
		private sealed class <replaceAllAsync>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001355")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001356")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DomainManager <>4__this;

			[Token(Token = "0x4001358")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x4001359")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool markOnly;

			[Token(Token = "0x400135A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string prefix;

			[Token(Token = "0x400135B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string postfix;

			[Token(Token = "0x400135C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string[] sourceNames;

			[Token(Token = "0x400135D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private <>c__DisplayClass36_0 <>8__1;

			[Token(Token = "0x17000265")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001580")]
				[Address(RVA = "0xEBC96C", Offset = "0xEBC96C", VA = "0xEBC96C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000266")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001582")]
				[Address(RVA = "0xEBC9B4", Offset = "0xEBC9B4", VA = "0xEBC9B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600157D")]
			[Address(RVA = "0xEBC098", Offset = "0xEBC098", VA = "0xEBC098")]
			[DebuggerHidden]
			public <replaceAllAsync>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x600157E")]
			[Address(RVA = "0xEBC72C", Offset = "0xEBC72C", VA = "0xEBC72C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600157F")]
			[Address(RVA = "0xEBC730", Offset = "0xEBC730", VA = "0xEBC730", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001581")]
			[Address(RVA = "0xEBC974", Offset = "0xEBC974", VA = "0xEBC974", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[FormerlySerializedAs("ReplaceChars")]
		[SerializeField]
		[Tooltip("Replace characters for domains (default: *).")]
		[Header("Specific Settings")]
		private string replaceChars;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Domain Providers")]
		[FormerlySerializedAs("DomainProvider")]
		[SerializeField]
		[Tooltip("List of all domain providers.")]
		private List<DomainProvider> domainProvider;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Events")]
		public OnContainsCompleted OnContainsCompleted;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OnGetAllCompleted OnGetAllCompleted;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OnReplaceAllCompleted OnReplaceAllCompleted;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Thread worker;

		[Token(Token = "0x1700025A")]
		public string ReplaceChars
		{
			[Token(Token = "0x600154F")]
			[Address(RVA = "0xEBB550", Offset = "0xEBB550", VA = "0xEBB550")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001550")]
			[Address(RVA = "0xEBB56C", Offset = "0xEBB56C", VA = "0xEBB56C")]
			set
			{
			}
		}

		[Token(Token = "0x1700025B")]
		public List<DomainProvider> DomainProvider
		{
			[Token(Token = "0x6001551")]
			[Address(RVA = "0xEBB5A4", Offset = "0xEBB5A4", VA = "0xEBB5A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001552")]
			[Address(RVA = "0xEBB5AC", Offset = "0xEBB5AC", VA = "0xEBB5AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public List<Source> Sources
		{
			[Token(Token = "0x6001553")]
			[Address(RVA = "0xEBB5B4", Offset = "0xEBB5B4", VA = "0xEBB5B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025D")]
		public int TotalRegexCount
		{
			[Token(Token = "0x6001554")]
			[Address(RVA = "0xEBB5CC", Offset = "0xEBB5CC", VA = "0xEBB5CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700025E")]
		protected override OnContainsCompleted onContainsCompleted
		{
			[Token(Token = "0x6001555")]
			[Address(RVA = "0xEBB6EC", Offset = "0xEBB6EC", VA = "0xEBB6EC", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025F")]
		protected override OnGetAllCompleted onGetAllCompleted
		{
			[Token(Token = "0x6001556")]
			[Address(RVA = "0xEBB6F4", Offset = "0xEBB6F4", VA = "0xEBB6F4", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000260")]
		protected override OnReplaceAllCompleted onReplaceAllCompleted
		{
			[Token(Token = "0x6001557")]
			[Address(RVA = "0xEBB6FC", Offset = "0xEBB6FC", VA = "0xEBB6FC", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0xEBB704", Offset = "0xEBB704", VA = "0xEBB704", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xEBB87C", Offset = "0xEBB87C", VA = "0xEBB87C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0xEBB8C0", Offset = "0xEBB8C0", VA = "0xEBB8C0", Slot = "6")]
		protected override void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0xEBB9AC", Offset = "0xEBB9AC", VA = "0xEBB9AC")]
		public static void ResetObject()
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xEBB7EC", Offset = "0xEBB7EC", VA = "0xEBB7EC")]
		public void Load()
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xEBBB74", Offset = "0xEBBB74", VA = "0xEBBB74")]
		public bool Contains(string text, params string[] sourceNames)
		{
			return default(bool);
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xEBBBD0", Offset = "0xEBBBD0", VA = "0xEBBBD0")]
		public void ContainsAsync(string text, params string[] sourceNames)
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xEBBC94", Offset = "0xEBBC94", VA = "0xEBBC94")]
		public List<string> GetAll(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xEBBD58", Offset = "0xEBBD58", VA = "0xEBBD58")]
		public void GetAllAsync(string text, params string[] sourceNames)
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xEBBE1C", Offset = "0xEBBE1C", VA = "0xEBBE1C")]
		public string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xEBBEAC", Offset = "0xEBBEAC", VA = "0xEBBEAC")]
		public void ReplaceAllAsync(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xEBBFB8", Offset = "0xEBBFB8", VA = "0xEBBFB8")]
		public string Mark(string text, bool replace = false, string prefix = "<b><color=red>", string postfix = "</color></b>", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xEBBBF0", Offset = "0xEBBBF0", VA = "0xEBBBF0")]
		[IteratorStateMachine(typeof(<containsAsync>d__34))]
		private IEnumerator containsAsync(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xEBBD78", Offset = "0xEBBD78", VA = "0xEBBD78")]
		[IteratorStateMachine(typeof(<getAllAsync>d__35))]
		private IEnumerator getAllAsync(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xEBBED0", Offset = "0xEBBED0", VA = "0xEBBED0")]
		[IteratorStateMachine(typeof(<replaceAllAsync>d__36))]
		private IEnumerator replaceAllAsync(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xEBC0C0", Offset = "0xEBC0C0", VA = "0xEBC0C0")]
		public DomainManager()
		{
		}
	}
	[Token(Token = "0x2000375")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_manager_1_1_punctuation_manager.html")]
	[DisallowMultipleComponent]
	public class PunctuationManager : BaseManager<PunctuationManager, PunctuationFilter>
	{
		[Token(Token = "0x2000376")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4001363")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PunctuationManager <>4__this;

			[Token(Token = "0x4001364")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x4001365")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool result;

			[Token(Token = "0x6001598")]
			[Address(RVA = "0xEBD50C", Offset = "0xEBD50C", VA = "0xEBD50C")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x6001599")]
			[Address(RVA = "0xEBD514", Offset = "0xEBD514", VA = "0xEBD514")]
			internal void <containsAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000377")]
		[CompilerGenerated]
		private sealed class <containsAsync>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001367")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001368")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PunctuationManager <>4__this;

			[Token(Token = "0x4001369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x400136A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass26_0 <>8__1;

			[Token(Token = "0x1700026B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600159D")]
				[Address(RVA = "0xEBD734", Offset = "0xEBD734", VA = "0xEBD734", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600159F")]
				[Address(RVA = "0xEBD77C", Offset = "0xEBD77C", VA = "0xEBD77C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600159A")]
			[Address(RVA = "0xEBD444", Offset = "0xEBD444", VA = "0xEBD444")]
			[DebuggerHidden]
			public <containsAsync>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x600159B")]
			[Address(RVA = "0xEBD540", Offset = "0xEBD540", VA = "0xEBD540", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600159C")]
			[Address(RVA = "0xEBD544", Offset = "0xEBD544", VA = "0xEBD544", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600159E")]
			[Address(RVA = "0xEBD73C", Offset = "0xEBD73C", VA = "0xEBD73C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000378")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x400136B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PunctuationManager <>4__this;

			[Token(Token = "0x400136C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x400136D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<string> result;

			[Token(Token = "0x60015A0")]
			[Address(RVA = "0xEBD784", Offset = "0xEBD784", VA = "0xEBD784")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x60015A1")]
			[Address(RVA = "0xEBD78C", Offset = "0xEBD78C", VA = "0xEBD78C")]
			internal void <getAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x2000379")]
		[CompilerGenerated]
		private sealed class <getAllAsync>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400136F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PunctuationManager <>4__this;

			[Token(Token = "0x4001371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x4001372")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass27_0 <>8__1;

			[Token(Token = "0x1700026D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015A5")]
				[Address(RVA = "0xEBD9B4", Offset = "0xEBD9B4", VA = "0xEBD9B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015A7")]
				[Address(RVA = "0xEBD9FC", Offset = "0xEBD9FC", VA = "0xEBD9FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015A2")]
			[Address(RVA = "0xEBD46C", Offset = "0xEBD46C", VA = "0xEBD46C")]
			[DebuggerHidden]
			public <getAllAsync>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x60015A3")]
			[Address(RVA = "0xEBD7BC", Offset = "0xEBD7BC", VA = "0xEBD7BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015A4")]
			[Address(RVA = "0xEBD7C0", Offset = "0xEBD7C0", VA = "0xEBD7C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015A6")]
			[Address(RVA = "0xEBD9BC", Offset = "0xEBD9BC", VA = "0xEBD9BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200037A")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass28_0
		{
			[Token(Token = "0x4001373")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PunctuationManager <>4__this;

			[Token(Token = "0x4001374")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x4001375")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool markOnly;

			[Token(Token = "0x4001376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string prefix;

			[Token(Token = "0x4001377")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string postfix;

			[Token(Token = "0x4001378")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string result;

			[Token(Token = "0x60015A8")]
			[Address(RVA = "0xEBDA04", Offset = "0xEBDA04", VA = "0xEBDA04")]
			public <>c__DisplayClass28_0()
			{
			}

			[Token(Token = "0x60015A9")]
			[Address(RVA = "0xEBDA0C", Offset = "0xEBDA0C", VA = "0xEBDA0C")]
			internal void <replaceAllAsync>b__0()
			{
			}
		}

		[Token(Token = "0x200037B")]
		[CompilerGenerated]
		private sealed class <replaceAllAsync>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001379")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400137A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400137B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PunctuationManager <>4__this;

			[Token(Token = "0x400137C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string text;

			[Token(Token = "0x400137D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool markOnly;

			[Token(Token = "0x400137E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string prefix;

			[Token(Token = "0x400137F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string postfix;

			[Token(Token = "0x4001380")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private <>c__DisplayClass28_0 <>8__1;

			[Token(Token = "0x1700026F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015AD")]
				[Address(RVA = "0xEBDC70", Offset = "0xEBDC70", VA = "0xEBDC70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000270")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015AF")]
				[Address(RVA = "0xEBDCB8", Offset = "0xEBDCB8", VA = "0xEBDCB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015AA")]
			[Address(RVA = "0xEBD494", Offset = "0xEBD494", VA = "0xEBD494")]
			[DebuggerHidden]
			public <replaceAllAsync>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x60015AB")]
			[Address(RVA = "0xEBDA44", Offset = "0xEBDA44", VA = "0xEBDA44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015AC")]
			[Address(RVA = "0xEBDA48", Offset = "0xEBDA48", VA = "0xEBDA48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015AE")]
			[Address(RVA = "0xEBDC78", Offset = "0xEBDC78", VA = "0xEBDC78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("Defines the number of allowed punctuation letters in a row (default: 3).")]
		[Header("Specific Settings")]
		[FormerlySerializedAs("PunctuationCharsNumber")]
		private int punctuationCharsNumber;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Events")]
		public OnContainsCompleted OnContainsCompleted;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OnGetAllCompleted OnGetAllCompleted;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OnReplaceAllCompleted OnReplaceAllCompleted;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Thread worker;

		[Token(Token = "0x17000267")]
		public int PunctuationCharsNumber
		{
			[Token(Token = "0x6001583")]
			[Address(RVA = "0xEBC9BC", Offset = "0xEBC9BC", VA = "0xEBC9BC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001584")]
			[Address(RVA = "0xEBC9D8", Offset = "0xEBC9D8", VA = "0xEBC9D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		protected override OnContainsCompleted onContainsCompleted
		{
			[Token(Token = "0x6001585")]
			[Address(RVA = "0xEBCAEC", Offset = "0xEBCAEC", VA = "0xEBCAEC", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000269")]
		protected override OnGetAllCompleted onGetAllCompleted
		{
			[Token(Token = "0x6001586")]
			[Address(RVA = "0xEBCAF4", Offset = "0xEBCAF4", VA = "0xEBCAF4", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026A")]
		protected override OnReplaceAllCompleted onReplaceAllCompleted
		{
			[Token(Token = "0x6001587")]
			[Address(RVA = "0xEBCAFC", Offset = "0xEBCAFC", VA = "0xEBCAFC", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xEBCB04", Offset = "0xEBCB04", VA = "0xEBCB04", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xEBCC80", Offset = "0xEBCC80", VA = "0xEBCC80", Slot = "6")]
		protected override void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xEBCD6C", Offset = "0xEBCD6C", VA = "0xEBCD6C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xEBCDA8", Offset = "0xEBCDA8", VA = "0xEBCDA8")]
		public static void ResetObject()
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xEBCBEC", Offset = "0xEBCBEC", VA = "0xEBCBEC")]
		public void Load()
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xEBCE38", Offset = "0xEBCE38", VA = "0xEBCE38")]
		public bool Contains(string text)
		{
			return default(bool);
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xEBCEF8", Offset = "0xEBCEF8", VA = "0xEBCEF8")]
		public void ContainsAsync(string text)
		{
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xEBCFA8", Offset = "0xEBCFA8", VA = "0xEBCFA8")]
		public List<string> GetAll(string text)
		{
			return null;
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xEBD0BC", Offset = "0xEBD0BC", VA = "0xEBD0BC")]
		public void GetAllAsync(string text)
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xEBD16C", Offset = "0xEBD16C", VA = "0xEBD16C")]
		public string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "")
		{
			return null;
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xEBD260", Offset = "0xEBD260", VA = "0xEBD260")]
		public void ReplaceAllAsync(string text, bool markOnly = false, string prefix = "", string postfix = "")
		{
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0xEBD350", Offset = "0xEBD350", VA = "0xEBD350")]
		public string Mark(string text, bool replace = false, string prefix = "<b><color=red>", string postfix = "</color></b>")
		{
			return null;
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0xEBCF18", Offset = "0xEBCF18", VA = "0xEBCF18")]
		[IteratorStateMachine(typeof(<containsAsync>d__26))]
		private IEnumerator containsAsync(string text)
		{
			return null;
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xEBD0DC", Offset = "0xEBD0DC", VA = "0xEBD0DC")]
		[IteratorStateMachine(typeof(<getAllAsync>d__27))]
		private IEnumerator getAllAsync(string text)
		{
			return null;
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0xEBD284", Offset = "0xEBD284", VA = "0xEBD284")]
		[IteratorStateMachine(typeof(<replaceAllAsync>d__28))]
		private IEnumerator replaceAllAsync(string text, bool markOnly = false, string prefix = "", string postfix = "")
		{
			return null;
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xEBD4BC", Offset = "0xEBD4BC", VA = "0xEBD4BC")]
		public PunctuationManager()
		{
		}
	}
}
namespace Crosstales.BWF.Filter
{
	[Token(Token = "0x200037C")]
	public class BadWordFilter : BaseFilter
	{
		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string ReplaceCharacters;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ReplaceMode Mode;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool RemoveSpaces;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool SimpleCheck;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<BadWordProvider> tempBadWordProviderLTR;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly List<BadWordProvider> tempBadWordProviderRTL;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Dictionary<string, Regex> exactBadwordsRegex;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Dictionary<string, List<Regex>> debugExactBadwordsRegex;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly Dictionary<string, List<string>> simpleBadwords;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool ready;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool readyFirstime;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<BadWordProvider> badWordProviderLTR;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<BadWordProvider> badWordProviderRTL;

		[Token(Token = "0x17000271")]
		public List<BadWordProvider> BadWordProviderLTR
		{
			[Token(Token = "0x60015B0")]
			[Address(RVA = "0xEBDCC0", Offset = "0xEBDCC0", VA = "0xEBDCC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015B1")]
			[Address(RVA = "0xEBDCC8", Offset = "0xEBDCC8", VA = "0xEBDCC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public List<BadWordProvider> BadWordProviderRTL
		{
			[Token(Token = "0x60015B2")]
			[Address(RVA = "0xEBE094", Offset = "0xEBE094", VA = "0xEBE094")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015B3")]
			[Address(RVA = "0xEBE09C", Offset = "0xEBE09C", VA = "0xEBE09C")]
			set
			{
			}
		}

		[Token(Token = "0x17000273")]
		public override bool isReady
		{
			[Token(Token = "0x60015B4")]
			[Address(RVA = "0xEBE468", Offset = "0xEBE468", VA = "0xEBE468", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xEBF3AC", Offset = "0xEBF3AC", VA = "0xEBF3AC")]
		public BadWordFilter(List<BadWordProvider> badWordProviderLTR, List<BadWordProvider> badWordProviderRTL, string replaceCharacters = "*", ReplaceMode mode = ReplaceMode.Default, bool simpleCheck = false, bool removeSpaces = false, bool disableOrdering = false)
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xEBF6D4", Offset = "0xEBF6D4", VA = "0xEBF6D4", Slot = "13")]
		public override bool Contains(string text, params string[] sourceNames)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xEC071C", Offset = "0xEC071C", VA = "0xEC071C", Slot = "14")]
		public override List<string> GetAll(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xEC4024", Offset = "0xEC4024", VA = "0xEC4024", Slot = "15")]
		public override string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xEC5F28", Offset = "0xEC5F28", VA = "0xEC5F28")]
		private string replaceCapture(string text, Capture capture, bool markOnly, string prefix, string postfix, int offset)
		{
			return null;
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xEC03F4", Offset = "0xEC03F4", VA = "0xEC03F4")]
		protected string replaceText(string input)
		{
			return null;
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xEC6E08", Offset = "0xEC6E08", VA = "0xEC6E08")]
		private static string replaceNonLettersOrDigits(string input)
		{
			return null;
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xEC6088", Offset = "0xEC6088", VA = "0xEC6088")]
		private static string replaceSpacesBetweenLetters(string text, int maxTextLength = 1)
		{
			return null;
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xEC62B4", Offset = "0xEC62B4", VA = "0xEC62B4")]
		private static string replaceLeetToText(string input)
		{
			return null;
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xEC6804", Offset = "0xEC6804", VA = "0xEC6804")]
		private static string replaceLeetAdvancedToText(string input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000381")]
	public abstract class BaseFilter : IFilter
	{
		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool DisableOrdering;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly Dictionary<string, Source> sources;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly List<string> getAllResult;

		[Token(Token = "0x17000274")]
		public virtual List<Source> Sources
		{
			[Token(Token = "0x6001601")]
			[Address(RVA = "0xEC848C", Offset = "0xEC848C", VA = "0xEC848C", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000275")]
		public abstract bool isReady
		{
			[Token(Token = "0x6001602")]
			get;
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xEBF5E4", Offset = "0xEBF5E4", VA = "0xEBF5E4")]
		public BaseFilter(bool disableOrdering)
		{
		}

		[Token(Token = "0x6001603")]
		public abstract bool Contains(string text, params string[] sourceNames);

		[Token(Token = "0x6001604")]
		public abstract List<string> GetAll(string text, params string[] sourceNames);

		[Token(Token = "0x6001605")]
		public abstract string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames);

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xEC86DC", Offset = "0xEC86DC", VA = "0xEC86DC", Slot = "16")]
		public virtual string Unmark(string text, string prefix = "<b><color=red>", string postfix = "</color></b>")
		{
			return null;
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xEC89A4", Offset = "0xEC89A4", VA = "0xEC89A4", Slot = "17")]
		public virtual string Mark(string text, bool replace = false, string prefix = "<b><color=red>", string postfix = "</color></b>", params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xEC06B4", Offset = "0xEC06B4", VA = "0xEC06B4")]
		protected static void logFilterNotReady()
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xEC0448", Offset = "0xEC0448", VA = "0xEC0448")]
		protected static void logResourceNotFound(string res)
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xEC0308", Offset = "0xEC0308", VA = "0xEC0308")]
		protected static void logContains()
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xEC3F38", Offset = "0xEC3F38", VA = "0xEC3F38")]
		protected static void logGetAll()
		{
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xEC5E3C", Offset = "0xEC5E3C", VA = "0xEC5E3C")]
		protected static void logReplaceAll()
		{
		}
	}
	[Token(Token = "0x2000383")]
	public class CapitalizationFilter : BaseFilter
	{
		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int characterNumber;

		[Token(Token = "0x17000276")]
		public Regex RegularExpression
		{
			[Token(Token = "0x6001611")]
			[Address(RVA = "0xEC8AAC", Offset = "0xEC8AAC", VA = "0xEC8AAC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001612")]
			[Address(RVA = "0xEC8AB4", Offset = "0xEC8AB4", VA = "0xEC8AB4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000277")]
		public int CharacterNumber
		{
			[Token(Token = "0x6001613")]
			[Address(RVA = "0xEC8ABC", Offset = "0xEC8ABC", VA = "0xEC8ABC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001614")]
			[Address(RVA = "0xEC8AC4", Offset = "0xEC8AC4", VA = "0xEC8AC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000278")]
		public override bool isReady
		{
			[Token(Token = "0x6001615")]
			[Address(RVA = "0xEC8BAC", Offset = "0xEC8BAC", VA = "0xEC8BAC", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xEC8BB4", Offset = "0xEC8BB4", VA = "0xEC8BB4")]
		public CapitalizationFilter(int capitalizationCharsNumber = 3, bool disableOrdering = false)
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xEC8BE0", Offset = "0xEC8BE0", VA = "0xEC8BE0", Slot = "13")]
		public override bool Contains(string text, params string[] sourceNames)
		{
			return default(bool);
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xEC8C40", Offset = "0xEC8C40", VA = "0xEC8C40", Slot = "14")]
		public override List<string> GetAll(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xEC9414", Offset = "0xEC9414", VA = "0xEC9414", Slot = "15")]
		public override string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}
	}
	[Token(Token = "0x2000385")]
	public class DomainFilter : BaseFilter
	{
		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string ReplaceCharacters;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<DomainProvider> domainProvider;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<DomainProvider> tempDomainProvider;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Dictionary<string, Regex> domainsRegex;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Dictionary<string, List<Regex>> debugDomainsRegex;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool ready;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool readyFirstime;

		[Token(Token = "0x17000279")]
		public List<DomainProvider> DomainProvider
		{
			[Token(Token = "0x6001621")]
			[Address(RVA = "0xEC9BCC", Offset = "0xEC9BCC", VA = "0xEC9BCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001622")]
			[Address(RVA = "0xEC9BD4", Offset = "0xEC9BD4", VA = "0xEC9BD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700027A")]
		public override bool isReady
		{
			[Token(Token = "0x6001623")]
			[Address(RVA = "0xEC9F60", Offset = "0xEC9F60", VA = "0xEC9F60", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xEBBA10", Offset = "0xEBBA10", VA = "0xEBBA10")]
		public DomainFilter(List<DomainProvider> domainProvider, string replaceCharacters = "*", bool disableOrdering = false)
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xECA790", Offset = "0xECA790", VA = "0xECA790", Slot = "13")]
		public override bool Contains(string text, params string[] sourceNames)
		{
			return default(bool);
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xECAECC", Offset = "0xECAECC", VA = "0xECAECC", Slot = "14")]
		public override List<string> GetAll(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xECD024", Offset = "0xECD024", VA = "0xECD024", Slot = "15")]
		public override string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}
	}
	[Token(Token = "0x200038A")]
	public interface IFilter
	{
		[Token(Token = "0x1700027B")]
		List<Source> Sources
		{
			[Token(Token = "0x6001651")]
			get;
		}

		[Token(Token = "0x1700027C")]
		bool isReady
		{
			[Token(Token = "0x6001652")]
			get;
		}

		[Token(Token = "0x6001653")]
		bool Contains(string text, params string[] sourceNames);

		[Token(Token = "0x6001654")]
		List<string> GetAll(string text, params string[] sourceNames);

		[Token(Token = "0x6001655")]
		string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames);

		[Token(Token = "0x6001656")]
		string Mark(string text, bool replace = false, string prefix = "<b><color=red>", string postfix = "</color></b>", params string[] sourceNames);

		[Token(Token = "0x6001657")]
		string Unmark(string text, string prefix = "<b><color=red>", string postfix = "</color></b>");
	}
	[Token(Token = "0x200038B")]
	public class PunctuationFilter : BaseFilter
	{
		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int characterNumber;

		[Token(Token = "0x1700027D")]
		public Regex RegularExpression
		{
			[Token(Token = "0x6001658")]
			[Address(RVA = "0xECF534", Offset = "0xECF534", VA = "0xECF534")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001659")]
			[Address(RVA = "0xECF53C", Offset = "0xECF53C", VA = "0xECF53C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700027E")]
		public int CharacterNumber
		{
			[Token(Token = "0x600165A")]
			[Address(RVA = "0xECF544", Offset = "0xECF544", VA = "0xECF544")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600165B")]
			[Address(RVA = "0xEBCA04", Offset = "0xEBCA04", VA = "0xEBCA04")]
			set
			{
			}
		}

		[Token(Token = "0x1700027F")]
		public override bool isReady
		{
			[Token(Token = "0x600165C")]
			[Address(RVA = "0xECF54C", Offset = "0xECF54C", VA = "0xECF54C", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xEBCE0C", Offset = "0xEBCE0C", VA = "0xEBCE0C")]
		public PunctuationFilter(int punctuationCharacterNumber = 3, bool disableOrdering = false)
		{
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xECF554", Offset = "0xECF554", VA = "0xECF554", Slot = "13")]
		public override bool Contains(string text, params string[] sourceNames)
		{
			return default(bool);
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xECF5B4", Offset = "0xECF5B4", VA = "0xECF5B4", Slot = "14")]
		public override List<string> GetAll(string text, params string[] sourceNames)
		{
			return null;
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xECFD88", Offset = "0xECFD88", VA = "0xECFD88", Slot = "15")]
		public override string ReplaceAll(string text, bool markOnly = false, string prefix = "", string postfix = "", params string[] sourceNames)
		{
			return null;
		}
	}
}
namespace Crosstales.BWF.Data
{
	[Serializable]
	[Token(Token = "0x200038D")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_data_1_1_source.html")]
	[CreateAssetMenu(fileName = "New Source", menuName = "Bad Word Filter PRO/Source", order = 1000)]
	public class Source : ScriptableObject
	{
		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Name of the source.")]
		[Header("Information")]
		[SerializeField]
		[FormerlySerializedAs("Name")]
		private string sourceName;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[FormerlySerializedAs("Culture")]
		[SerializeField]
		[Tooltip("Culture of the source (ISO 639-1).")]
		private string culture;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Description for the source (optional).")]
		[FormerlySerializedAs("Description")]
		[SerializeField]
		private string description;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Icon to represent the source (e.g. country flag, optional)")]
		[FormerlySerializedAs("Icon")]
		[SerializeField]
		private Sprite icon;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("URL")]
		[SerializeField]
		[Header("Settings")]
		[Tooltip("URL of a text file containing all regular expressions for this source. Add also the protocol-type ('http://', 'file://' etc.).")]
		private string url;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Text file containing all regular expressions for this source.")]
		[FormerlySerializedAs("Resource")]
		[SerializeField]
		private TextAsset resource;

		[Token(Token = "0x17000280")]
		public string SourceName
		{
			[Token(Token = "0x6001668")]
			[Address(RVA = "0xED0550", Offset = "0xED0550", VA = "0xED0550")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001669")]
			[Address(RVA = "0xED0558", Offset = "0xED0558", VA = "0xED0558")]
			set
			{
			}
		}

		[Token(Token = "0x17000281")]
		public string Culture
		{
			[Token(Token = "0x600166A")]
			[Address(RVA = "0xED0560", Offset = "0xED0560", VA = "0xED0560")]
			get
			{
				return null;
			}
			[Token(Token = "0x600166B")]
			[Address(RVA = "0xED0568", Offset = "0xED0568", VA = "0xED0568")]
			set
			{
			}
		}

		[Token(Token = "0x17000282")]
		public string Description
		{
			[Token(Token = "0x600166C")]
			[Address(RVA = "0xED0570", Offset = "0xED0570", VA = "0xED0570")]
			get
			{
				return null;
			}
			[Token(Token = "0x600166D")]
			[Address(RVA = "0xED0578", Offset = "0xED0578", VA = "0xED0578")]
			set
			{
			}
		}

		[Token(Token = "0x17000283")]
		public Sprite Icon
		{
			[Token(Token = "0x600166E")]
			[Address(RVA = "0xED0580", Offset = "0xED0580", VA = "0xED0580")]
			get
			{
				return null;
			}
			[Token(Token = "0x600166F")]
			[Address(RVA = "0xED0588", Offset = "0xED0588", VA = "0xED0588")]
			set
			{
			}
		}

		[Token(Token = "0x17000284")]
		public string URL
		{
			[Token(Token = "0x6001670")]
			[Address(RVA = "0xED0590", Offset = "0xED0590", VA = "0xED0590")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001671")]
			[Address(RVA = "0xED0598", Offset = "0xED0598", VA = "0xED0598")]
			set
			{
			}
		}

		[Token(Token = "0x17000285")]
		public TextAsset Resource
		{
			[Token(Token = "0x6001672")]
			[Address(RVA = "0xED05A0", Offset = "0xED05A0", VA = "0xED05A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001673")]
			[Address(RVA = "0xED05A8", Offset = "0xED05A8", VA = "0xED05A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000286")]
		public int RegexCount
		{
			[Token(Token = "0x6001674")]
			[Address(RVA = "0xED05B0", Offset = "0xED05B0", VA = "0xED05B0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001675")]
			[Address(RVA = "0xED05B8", Offset = "0xED05B8", VA = "0xED05B8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xED05C0", Offset = "0xED05C0", VA = "0xED05C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xED08D0", Offset = "0xED08D0", VA = "0xED08D0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xED0A4C", Offset = "0xED0A4C", VA = "0xED0A4C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xED0B3C", Offset = "0xED0B3C", VA = "0xED0B3C")]
		public Source()
		{
		}
	}
}
namespace Crosstales.BWF.Demo
{
	[Token(Token = "0x200038E")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_demo_1_1_event_tester.html")]
	[ExecuteInEditMode]
	public class EventTester : MonoBehaviour
	{
		[Token(Token = "0x600167A")]
		[Address(RVA = "0xED0BE4", Offset = "0xED0BE4", VA = "0xED0BE4")]
		public void OnReady()
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xED0C4C", Offset = "0xED0C4C", VA = "0xED0C4C")]
		public void OnContainsCompleted(string text, bool containsBadwords)
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xED0D14", Offset = "0xED0D14", VA = "0xED0D14")]
		public void OnGetAllCompleted(string text, string allBadwords)
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xED0DC8", Offset = "0xED0DC8", VA = "0xED0DC8")]
		public void OnReplaceAllCompleted(string originalText, string cleanText)
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xED0E7C", Offset = "0xED0E7C", VA = "0xED0E7C")]
		public EventTester()
		{
		}
	}
	[Token(Token = "0x200038F")]
	public abstract class GUIBase : MonoBehaviour
	{
		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("General Settings")]
		public bool AutoTest;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool AutoReplace;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool ReplaceLeet;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool SimpleCheck;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0.5f, 3f)]
		public float IntervalCheck;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.5f, 5f)]
		public float IntervalReplace;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color32 GoodColor;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color32 BadColor;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Managers")]
		public ManagerMask BadwordManager;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ManagerMask DomManager;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ManagerMask CapsManager;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ManagerMask PuncManager;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<string> Sources;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("UI Components")]
		public InputField Text;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Text OutputText;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Text BadWordList;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Text BadWordCounter;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Text Name;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Text Version;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Text Scene;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Toggle TestEnabled;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Toggle ReplaceEnabled;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Toggle Badword;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Toggle Domain;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Toggle Capitalization;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Toggle Punctuation;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public InputField BadwordReplaceChars;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public InputField DomainReplaceChars;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public InputField CapsTrigger;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public InputField PuncTrigger;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Toggle LeetReplace;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Toggle SimpleCheckToggle;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Image BadWordListImage;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected List<string> badWords;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected float elapsedTimeCheck;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected float elapsedTimeReplace;

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xED0E84", Offset = "0xED0E84", VA = "0xED0E84", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001680")]
		public abstract void Test();

		[Token(Token = "0x6001681")]
		public abstract void Replace();

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xED15E4", Offset = "0xED15E4", VA = "0xED15E4")]
		public void TestChanged(bool val)
		{
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xED15F0", Offset = "0xED15F0", VA = "0xED15F0")]
		public void ReplaceChanged(bool val)
		{
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xED15FC", Offset = "0xED15FC", VA = "0xED15FC")]
		public void BadwordChanged(bool val)
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xED1620", Offset = "0xED1620", VA = "0xED1620")]
		public void DomainChanged(bool val)
		{
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xED1644", Offset = "0xED1644", VA = "0xED1644")]
		public void CapitalizationChanged(bool val)
		{
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xED1668", Offset = "0xED1668", VA = "0xED1668")]
		public void PunctuationChanged(bool val)
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xED168C", Offset = "0xED168C", VA = "0xED168C")]
		public void LeetChanged(bool val)
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xED1710", Offset = "0xED1710", VA = "0xED1710")]
		public void SimpleChanged(bool val)
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xED178C", Offset = "0xED178C", VA = "0xED178C")]
		public void FullscreenChanged(bool val)
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xED1798", Offset = "0xED1798", VA = "0xED1798")]
		public void OpenAssetURL()
		{
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xED17DC", Offset = "0xED17DC", VA = "0xED17DC")]
		public void OpenCTURL()
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xED1820", Offset = "0xED1820", VA = "0xED1820")]
		public void Quit()
		{
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xED1844", Offset = "0xED1844", VA = "0xED1844")]
		protected GUIBase()
		{
		}
	}
	[Token(Token = "0x2000390")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_demo_1_1_g_u_i_main.html")]
	public class GUIMain : GUIBase
	{
		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool tested;

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xED1940", Offset = "0xED1940", VA = "0xED1940")]
		private void Update()
		{
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xED1EA8", Offset = "0xED1EA8", VA = "0xED1EA8", Slot = "5")]
		public override void Test()
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xED1F9C", Offset = "0xED1F9C", VA = "0xED1F9C", Slot = "6")]
		public override void Replace()
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xED20F0", Offset = "0xED20F0", VA = "0xED20F0")]
		public GUIMain()
		{
		}
	}
	[Token(Token = "0x2000391")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_demo_1_1_g_u_i_main_async.html")]
	public class GUIMainAsync : GUIBase
	{
		[Token(Token = "0x6001693")]
		[Address(RVA = "0xED20F4", Offset = "0xED20F4", VA = "0xED20F4", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xED2240", Offset = "0xED2240", VA = "0xED2240")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xED23EC", Offset = "0xED23EC", VA = "0xED23EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xED2748", Offset = "0xED2748", VA = "0xED2748", Slot = "5")]
		public override void Test()
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xED2824", Offset = "0xED2824", VA = "0xED2824", Slot = "6")]
		public override void Replace()
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xED2900", Offset = "0xED2900", VA = "0xED2900")]
		private void updateUI()
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xED2B3C", Offset = "0xED2B3C", VA = "0xED2B3C")]
		private void onReplaceAllComplete(string originaltext, string cleantext)
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0xED2BC0", Offset = "0xED2BC0", VA = "0xED2BC0")]
		private void onGetAllComplete(string originaltext, List<string> badwords)
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0xED2BE0", Offset = "0xED2BE0", VA = "0xED2BE0")]
		public GUIMainAsync()
		{
		}
	}
	[Token(Token = "0x2000392")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_demo_1_1_g_u_i_source.html")]
	public class GUISource : MonoBehaviour
	{
		[Token(Token = "0x2000393")]
		[CompilerGenerated]
		private sealed class <buildLanguageList>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400143F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GUISource <>4__this;

			[Token(Token = "0x4001442")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private RectTransform <rowRectTransform>5__2;

			[Token(Token = "0x4001443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private RectTransform <containerRectTransform>5__3;

			[Token(Token = "0x17000287")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016A5")]
				[Address(RVA = "0xED35B8", Offset = "0xED35B8", VA = "0xED35B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000288")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016A7")]
				[Address(RVA = "0xED3600", Offset = "0xED3600", VA = "0xED3600", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016A2")]
			[Address(RVA = "0xED2ED4", Offset = "0xED2ED4", VA = "0xED2ED4")]
			[DebuggerHidden]
			public <buildLanguageList>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60016A3")]
			[Address(RVA = "0xED2F38", Offset = "0xED2F38", VA = "0xED2F38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016A4")]
			[Address(RVA = "0xED2F3C", Offset = "0xED2F3C", VA = "0xED2F3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016A6")]
			[Address(RVA = "0xED35C0", Offset = "0xED35C0", VA = "0xED35C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ItemPrefab;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Target;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Scrollbar Scroll;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GUIBase GuiMain;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int ColumnCount;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 SpaceWidth;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector2 SpaceHeight;

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xED2BE4", Offset = "0xED2BE4", VA = "0xED2BE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xED2C50", Offset = "0xED2C50", VA = "0xED2C50")]
		private void Start()
		{
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xED2D20", Offset = "0xED2D20", VA = "0xED2D20")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xED2E60", Offset = "0xED2E60", VA = "0xED2E60")]
		[IteratorStateMachine(typeof(<buildLanguageList>d__10))]
		private IEnumerator buildLanguageList()
		{
			return null;
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xED2EFC", Offset = "0xED2EFC", VA = "0xED2EFC")]
		private void onBWFReady()
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xED2F1C", Offset = "0xED2F1C", VA = "0xED2F1C")]
		public GUISource()
		{
		}
	}
	[Token(Token = "0x2000394")]
	[HelpURL("https://www.crosstales.com/media/data/assets/badwordfilter/api/class_crosstales_1_1_b_w_f_1_1_demo_1_1_source_entry.html")]
	public class SourceEntry : MonoBehaviour
	{
		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text Text;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image Icon;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image Main;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Source Source;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GUIBase GuiMain;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color32 EnabledColor;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color32 disabledColor;

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xED3608", Offset = "0xED3608", VA = "0xED3608")]
		private void Start()
		{
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xED38F0", Offset = "0xED38F0", VA = "0xED38F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xED39FC", Offset = "0xED39FC", VA = "0xED39FC")]
		public void Click()
		{
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xED3B18", Offset = "0xED3B18", VA = "0xED3B18")]
		public SourceEntry()
		{
		}
	}
}
namespace CrazyMinnow.SALSA.OneClicks
{
	[Token(Token = "0x2000395")]
	public class OneClickBase : MonoBehaviour
	{
		[Token(Token = "0x400144B")]
		public const string RESOURCE_CLIP = "Assets/Crazy Minnow Studio/Examples/Audio/Promo-male.mp3";

		[Token(Token = "0x400144C")]
		public const string PREFAB_ALERT_TITLE = "Prefab Unpack Warning";

		[Token(Token = "0x400144D")]
		public const string PREFAB_ALERT_MSG = "Your selection is a prefab and must be unpacked to apply this setup. You can create a new prefab once the setup is complete. Do you want to proceed?";

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static List<SkinnedMeshRenderer> requiredSmrs;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static List<OneClickConfiguration> oneClickConfigurations;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static Salsa salsa;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected static Emoter emoter;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected static UmaUepProxy uepProxy;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected static GameObject selectedObject;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected static float emphasizerTrigger;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected static bool autoAdjustAnalysis;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		protected static bool autoAdjustMicrophone;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected static float audioUpdateDelay;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected static float loCutoff;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected static float hiCutoff;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected static bool useAdvDyn;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected static float advDynPrimaryBias;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected static bool useAdvDynJitter;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected static float advDynJitterAmount;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected static float advDynJitterProb;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected static float advDynSecondaryMix;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected static float emphasisChance;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected static bool useRandomEmotes;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		protected static bool isChancePerEmote;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected static int numRandomEmotesPerCycle;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected static float randomEmoteMinTimer;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected static float randomEmoteMaxTimer;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected static float randomChance;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected static bool useRandomFrac;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected static float randomFracBias;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected static bool useRandomHoldDuration;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected static float randomHoldDurationMin;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected static float randomHoldDurationMax;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected static LerpEasings.EasingType easingType;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static OneClickConfiguration currentConfiguration;

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xED3B2C", Offset = "0xED3B2C", VA = "0xED3B2C")]
		protected static void NewConfiguration(OneClickConfiguration.ConfigType configType)
		{
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xED3C90", Offset = "0xED3C90", VA = "0xED3C90")]
		protected static void AddSmrSearch(string search)
		{
		}

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0xED3D70", Offset = "0xED3D70", VA = "0xED3D70")]
		protected static void NewExpression(string expressionName)
		{
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xED3F30", Offset = "0xED3F30", VA = "0xED3F30")]
		protected static void AddShapeComponent(string[] blendshapeNames, float durOn, float durHold, float durOff, string componentName = "", float amount = 1f, bool useRegex = false)
		{
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xED40D4", Offset = "0xED40D4", VA = "0xED40D4")]
		protected static void AddUepPoseComponent(string poseName, float durOn, float durHold, float durOff, string componentName = "", float amount = 1f)
		{
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xED4270", Offset = "0xED4270", VA = "0xED4270")]
		protected static void AddAnimatorComponent(string componentName, string animatorSearch, float durOn, float durHold, float durOff, int parmIndex, bool isTriggereParmBiDir = false)
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xED4420", Offset = "0xED4420", VA = "0xED4420")]
		protected static void AddBoneComponent(string componentSearchName, TformBase maxTform, float durOn, float durHold, float durOff, string componentName = "", bool constrainPos = false, bool constrainRot = true, bool constrainScl = false)
		{
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0xED4600", Offset = "0xED4600", VA = "0xED4600")]
		protected static void AddEmoteFlags(bool isRandom, bool isEmph, bool isRepeater, float frac = 1f, bool isAlwaysEmph = false)
		{
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xED4724", Offset = "0xED4724", VA = "0xED4724")]
		protected static void DoOneClickiness(GameObject go, AudioClip clip)
		{
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0xED4A44", Offset = "0xED4A44", VA = "0xED4A44")]
		private static bool FindSkinnedMeshRenderers(OneClickConfiguration configuration)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xED52F8", Offset = "0xED52F8", VA = "0xED52F8")]
		private static void ConfigEmoterSettings(QueueProcessor qp)
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xED4F98", Offset = "0xED4F98", VA = "0xED4F98")]
		private static void ConfigureSalsaSettings(AudioClip clip, QueueProcessor qp)
		{
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xED5F88", Offset = "0xED5F88", VA = "0xED5F88")]
		protected static void Init()
		{
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xED5584", Offset = "0xED5584", VA = "0xED5584")]
		private static void ConfigureModuleExpressions(OneClickConfiguration configuration)
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xED6060", Offset = "0xED6060", VA = "0xED6060")]
		private static Expression InitializeExpressionType(OneClickConfiguration configuration, int exp)
		{
			return null;
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xED64C8", Offset = "0xED64C8", VA = "0xED64C8")]
		private static int RegexFindBlendshapeName(SkinnedMeshRenderer smr, string bName)
		{
			return default(int);
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xED6BD4", Offset = "0xED6BD4", VA = "0xED6BD4")]
		private static string[] GetBlendshapeNames(SkinnedMeshRenderer smr)
		{
			return null;
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xED698C", Offset = "0xED698C", VA = "0xED698C")]
		private static TformBase ConvertBoneToTform(Transform bone)
		{
			return default(TformBase);
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xED6864", Offset = "0xED6864", VA = "0xED6864")]
		private static Transform FindBone(string componentSearchName)
		{
			return null;
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xED6AAC", Offset = "0xED6AAC", VA = "0xED6AAC")]
		private static Animator FindAnimator(string componentSearchName)
		{
			return null;
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xED6778", Offset = "0xED6778", VA = "0xED6778")]
		private static void ApplyCommonSettingsToComponent(ExpressionComponent component, OneClickComponent oneClickComponent, int componentNumber)
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xED65BC", Offset = "0xED65BC", VA = "0xED65BC")]
		private static int CreateNewComponent(int componentCount, Expression expression)
		{
			return default(int);
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xED6D08", Offset = "0xED6D08", VA = "0xED6D08")]
		public OneClickBase()
		{
		}
	}
	[Token(Token = "0x2000396")]
	public class OneClickBoxHead : OneClickBase
	{
		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xED6E84", Offset = "0xED6E84", VA = "0xED6E84")]
		public static void Setup(GameObject gameObject, AudioClip clip)
		{
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xED7640", Offset = "0xED7640", VA = "0xED7640")]
		public OneClickBoxHead()
		{
		}
	}
	[Token(Token = "0x2000397")]
	public class OneClickBoxHeadEyes : MonoBehaviour
	{
		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xED8698", Offset = "0xED8698", VA = "0xED8698")]
		public static void Setup(GameObject go)
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xED8FC8", Offset = "0xED8FC8", VA = "0xED8FC8")]
		public OneClickBoxHeadEyes()
		{
		}
	}
	[Token(Token = "0x2000398")]
	public class OneClickComponent
	{
		[Token(Token = "0x2000399")]
		public enum ComponentType
		{
			[Token(Token = "0x4001474")]
			Shape,
			[Token(Token = "0x4001475")]
			UMA,
			[Token(Token = "0x4001476")]
			Bone,
			[Token(Token = "0x4001477")]
			Animator
		}

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ComponentType type;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string componentName;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float durOn;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float durHold;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float durOff;

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xED8FD0", Offset = "0xED8FD0", VA = "0xED8FD0")]
		public OneClickComponent()
		{
		}
	}
	[Token(Token = "0x200039A")]
	public class OneClickShapeComponent : OneClickComponent
	{
		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] blendshapeNames;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxAmount;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool useRegex;

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xED8FD8", Offset = "0xED8FD8", VA = "0xED8FD8")]
		public OneClickShapeComponent(string componentName, string[] blendshapeNames, float maxAmount, float durOn, float durHold, float durOff, ComponentType type, bool useRegex)
		{
		}
	}
	[Token(Token = "0x200039B")]
	public class OneClickBoneComponent : OneClickComponent
	{
		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string componentSearchName;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TformBase max;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool usePos;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool useRot;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool useScl;

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xED9064", Offset = "0xED9064", VA = "0xED9064")]
		public OneClickBoneComponent(string componentName, string boneSearchName, TformBase max, bool usePos, bool useRot, bool useScl, float durOn, float durHold, float durOff, ComponentType type)
		{
		}
	}
	[Token(Token = "0x200039C")]
	public class OneClickUepComponent : OneClickComponent
	{
		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string poseName;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxAmount;

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0xED911C", Offset = "0xED911C", VA = "0xED911C")]
		public OneClickUepComponent(string componentName, string poseName, float maxAmount, float durOn, float durHold, float durOff, ComponentType type)
		{
		}
	}
	[Token(Token = "0x200039D")]
	public class OneClickAnimatorComponent : OneClickComponent
	{
		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string componentSearchName;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int animationParmIndex;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool isTriggerParmBiDirectional;

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xED91A0", Offset = "0xED91A0", VA = "0xED91A0")]
		public OneClickAnimatorComponent(string componentName, string animatorSearchName, int animationParmIndex, bool isTriggerParmBiDirectional, float durOn, float durHold, float durOff, ComponentType type)
		{
		}
	}
	[Token(Token = "0x200039E")]
	public class OneClickConfiguration
	{
		[Token(Token = "0x200039F")]
		public enum ConfigType
		{
			[Token(Token = "0x4001489")]
			Salsa,
			[Token(Token = "0x400148A")]
			Emoter
		}

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ConfigType type;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> smrSearches;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<OneClickExpression> oneClickExpressions;

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xED9234", Offset = "0xED9234", VA = "0xED9234")]
		public OneClickConfiguration(ConfigType type)
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public class OneClickExpression
	{
		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<OneClickComponent> components;

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0xED93A0", Offset = "0xED93A0", VA = "0xED93A0")]
		public OneClickExpression()
		{
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xED93A8", Offset = "0xED93A8", VA = "0xED93A8")]
		public OneClickExpression(string name, List<OneClickComponent> components)
		{
		}
	}
	[Token(Token = "0x20003A1")]
	public class OneClickEmoterExpression : OneClickExpression
	{
		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isRandom;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isEmphasis;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool isAlwaysEmphasis;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool isRepeater;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float expressionDynamics;

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xED93EC", Offset = "0xED93EC", VA = "0xED93EC")]
		public OneClickEmoterExpression(string name, List<OneClickComponent> components)
		{
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xED9438", Offset = "0xED9438", VA = "0xED9438")]
		public void SetEmoterBools(bool isRand, bool isEmph, bool isRep, float frac, bool isAlwaysEmph = false)
		{
		}
	}
}
namespace CafofoStudio
{
	[Token(Token = "0x20003A2")]
	public class CaveAmbientMixer : AmbienceMixer<CaveAmbientPreset>
	{
		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SoundElement _atmosphere1;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private SoundElement _atmosphere2;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SoundElement _atmosphere3;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private SoundElement _sediment;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private SoundElement _waterDrops;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private SoundElement _waterStream;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private SoundElement _sewer;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private SoundElement _fire;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private SoundElement _critters;

		[Token(Token = "0x17000289")]
		public SoundElement Atmosphere1
		{
			[Token(Token = "0x60016D2")]
			[Address(RVA = "0xED9460", Offset = "0xED9460", VA = "0xED9460")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016D3")]
			[Address(RVA = "0xED9468", Offset = "0xED9468", VA = "0xED9468")]
			private set
			{
			}
		}

		[Token(Token = "0x1700028A")]
		public SoundElement Atmosphere2
		{
			[Token(Token = "0x60016D4")]
			[Address(RVA = "0xED9470", Offset = "0xED9470", VA = "0xED9470")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016D5")]
			[Address(RVA = "0xED9478", Offset = "0xED9478", VA = "0xED9478")]
			private set
			{
			}
		}

		[Token(Token = "0x1700028B")]
		public SoundElement Atmosphere3
		{
			[Token(Token = "0x60016D6")]
			[Address(RVA = "0xED9480", Offset = "0xED9480", VA = "0xED9480")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016D7")]
			[Address(RVA = "0xED9488", Offset = "0xED9488", VA = "0xED9488")]
			private set
			{
			}
		}

		[Token(Token = "0x1700028C")]
		public SoundElement Sediment
		{
			[Token(Token = "0x60016D8")]
			[Address(RVA = "0xED9490", Offset = "0xED9490", VA = "0xED9490")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016D9")]
			[Address(RVA = "0xED9498", Offset = "0xED9498", VA = "0xED9498")]
			private set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		public SoundElement WaterDrops
		{
			[Token(Token = "0x60016DA")]
			[Address(RVA = "0xED94A0", Offset = "0xED94A0", VA = "0xED94A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016DB")]
			[Address(RVA = "0xED94A8", Offset = "0xED94A8", VA = "0xED94A8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700028E")]
		public SoundElement WaterStream
		{
			[Token(Token = "0x60016DC")]
			[Address(RVA = "0xED94B0", Offset = "0xED94B0", VA = "0xED94B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016DD")]
			[Address(RVA = "0xED94B8", Offset = "0xED94B8", VA = "0xED94B8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700028F")]
		public SoundElement Sewer
		{
			[Token(Token = "0x60016DE")]
			[Address(RVA = "0xED94C0", Offset = "0xED94C0", VA = "0xED94C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016DF")]
			[Address(RVA = "0xED94C8", Offset = "0xED94C8", VA = "0xED94C8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000290")]
		public SoundElement Fire
		{
			[Token(Token = "0x60016E0")]
			[Address(RVA = "0xED94D0", Offset = "0xED94D0", VA = "0xED94D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016E1")]
			[Address(RVA = "0xED94D8", Offset = "0xED94D8", VA = "0xED94D8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000291")]
		public SoundElement Critters
		{
			[Token(Token = "0x60016E2")]
			[Address(RVA = "0xED94E0", Offset = "0xED94E0", VA = "0xED94E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016E3")]
			[Address(RVA = "0xED94E8", Offset = "0xED94E8", VA = "0xED94E8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000292")]
		protected override List<SoundElement> elements
		{
			[Token(Token = "0x60016E4")]
			[Address(RVA = "0xED94F0", Offset = "0xED94F0", VA = "0xED94F0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0xED98B4", Offset = "0xED98B4", VA = "0xED98B4", Slot = "5")]
		public override void ApplyPreset(CaveAmbientPreset selectedPreset)
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0xED9C44", Offset = "0xED9C44", VA = "0xED9C44")]
		public CaveAmbientMixer()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	[CreateAssetMenu(fileName = "MyCaveAmbientPreset", menuName = "CafofoStudio/Create Custom Preset Asset/Cave", order = 1)]
	public class CaveAmbientPreset : AmbientPreset
	{
		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float atmosphere1Intensity;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float atmosphere1VolumeMultiplier;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float atmosphere2Intensity;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float atmosphere2VolumeMultiplier;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float atmosphere3Intensity;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float atmosphere3VolumeMultiplier;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float sedimentIntensity;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float sedimentVolumeMultiplier;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float waterDropsIntensity;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float waterDropsVolumeMultiplier;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float waterStreamIntensity;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float waterStreamVolumeMultiplier;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		public float sewerIntensity;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float sewerVolumeMultiplier;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float fireIntensity;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float fireVolumeMultiplier;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float crittersIntensity;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		public float crittersVolumeMultiplier;

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0xED9C8C", Offset = "0xED9C8C", VA = "0xED9C8C")]
		public CaveAmbientPreset()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public abstract class AmbienceMixer<P> : MonoBehaviour where P : AmbientPreset
	{
		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool playOnAwake;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public List<P> presets;

		[Token(Token = "0x17000293")]
		[SerializeField]
		protected abstract List<SoundElement> elements
		{
			[Token(Token = "0x60016E8")]
			get;
		}

		[Token(Token = "0x60016E9")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60016EA")]
		private void Update()
		{
		}

		[Token(Token = "0x60016EB")]
		public void Play()
		{
		}

		[Token(Token = "0x60016EC")]
		public void Stop()
		{
		}

		[Token(Token = "0x60016ED")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60016EE")]
		public abstract void ApplyPreset(P selectedPreset);

		[Token(Token = "0x60016EF")]
		protected AmbienceMixer()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	public abstract class AmbientPreset : ScriptableObject
	{
		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string presetName;

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0xED9CB8", Offset = "0xED9CB8", VA = "0xED9CB8")]
		protected AmbientPreset()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public interface ISoundSubElement
	{
		[Token(Token = "0x60016F1")]
		void InitializeAudioSources(GameObject parent, AudioMixerGroup outputMixer);

		[Token(Token = "0x60016F2")]
		void CalculateIntensity(float intensity, float volumeMultiplier);

		[Token(Token = "0x60016F3")]
		void SetOutputMixerGroup(AudioMixerGroup overrideOutputMixer);

		[Token(Token = "0x60016F4")]
		void Play();

		[Token(Token = "0x60016F5")]
		void Stop();
	}
	[Token(Token = "0x20003A7")]
	public static class ListExtensions
	{
		[Token(Token = "0x60016F6")]
		public static void Shuffle<T>(this List<T> list)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A8")]
	public class SoundElement
	{
		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string soundName;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioMixerGroup overrideOutputMixer;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float intensity;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string maxIntensityLabel;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string minIntensityLabel;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float volumeMultiplier;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<SoundSubElementSample> sampleSubElements;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private List<SoundSubElementLoop> loopSubElements;

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xED9D10", Offset = "0xED9D10", VA = "0xED9D10")]
		public void InitializeAudioSources(GameObject parent)
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xEDA2F0", Offset = "0xEDA2F0", VA = "0xEDA2F0")]
		private void CalculateIntensity()
		{
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0xEDA68C", Offset = "0xEDA68C", VA = "0xEDA68C")]
		public void UpdateSampleTimer()
		{
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xED9AB4", Offset = "0xED9AB4", VA = "0xED9AB4")]
		public void SetIntensity(float intensity)
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0xEDA854", Offset = "0xEDA854", VA = "0xEDA854")]
		public float GetIntensity()
		{
			return default(float);
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0xED9AD0", Offset = "0xED9AD0", VA = "0xED9AD0")]
		public void SetVolumeMultiplier(float volumeMultiplier)
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xEDA85C", Offset = "0xEDA85C", VA = "0xEDA85C")]
		public float GetVolumeMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xEDA864", Offset = "0xEDA864", VA = "0xEDA864")]
		public void SetOutputMixerGroup(AudioMixerGroup overrideOutputMixer)
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xEDACDC", Offset = "0xEDACDC", VA = "0xEDACDC")]
		public AudioMixerGroup GetOutputMixerGroup()
		{
			return null;
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xEDACE4", Offset = "0xEDACE4", VA = "0xEDACE4")]
		public void Play()
		{
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0xEDB090", Offset = "0xEDB090", VA = "0xEDB090")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xEDB434", Offset = "0xEDB434", VA = "0xEDB434")]
		public SoundElement()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A9")]
	public class SoundSubElementLoop : ISoundSubElement
	{
		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool isAditive;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<AudioClip> audioClips;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<AudioSource> loopAudioSources;

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xED9F84", Offset = "0xED9F84", VA = "0xED9F84", Slot = "4")]
		public void InitializeAudioSources(GameObject parent, AudioMixerGroup outputMixer)
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xEDA554", Offset = "0xEDA554", VA = "0xEDA554", Slot = "5")]
		public void CalculateIntensity(float intensity, float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0xEDB444", Offset = "0xEDB444", VA = "0xEDB444")]
		private void CalculateAditiveIntensity(float intensity, float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xEDB51C", Offset = "0xEDB51C", VA = "0xEDB51C")]
		private void CalculateCrossfadeIntensity(float intensity, float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xEDB648", Offset = "0xEDB648", VA = "0xEDB648")]
		private float CalculateCrossfade(float periodLength, float intensity)
		{
			return default(float);
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xEDAADC", Offset = "0xEDAADC", VA = "0xEDAADC", Slot = "6")]
		public void SetOutputMixerGroup(AudioMixerGroup overrideOutputMixer)
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xEDAF3C", Offset = "0xEDAF3C", VA = "0xEDAF3C", Slot = "7")]
		public void Play()
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xEDB2E4", Offset = "0xEDB2E4", VA = "0xEDB2E4", Slot = "8")]
		public void Stop()
		{
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0xEDB680", Offset = "0xEDB680", VA = "0xEDB680")]
		public SoundSubElementLoop()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003AA")]
	public class SoundSubElementSample : ISoundSubElement
	{
		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<AudioClip> audioClips;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The least seconds between sounds at the lowest intensity.")]
		public float lowIntensityMinSeconds;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The most seconds between sounds at the lowest intensity.")]
		public float lowIntensityMaxSeconds;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The least seconds between sounds at the highest intensity.")]
		public float highIntensityMinSeconds;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The most seconds between sounds at the highest intensity.")]
		public float highIntensityMaxSeconds;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float nextSampleCountdown;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<int> availableSoundIndexes;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<AudioSource> audioSourcePool;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isPlaying;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject mParentGO;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioMixerGroup mOutputMixer;

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xEDA244", Offset = "0xEDA244", VA = "0xEDA244", Slot = "4")]
		public void InitializeAudioSources(GameObject parent, AudioMixerGroup outputMixer)
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xEDA63C", Offset = "0xEDA63C", VA = "0xEDA63C", Slot = "5")]
		public void CalculateIntensity(float intensity, float volumeMultiplier)
		{
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xEDA7DC", Offset = "0xEDA7DC", VA = "0xEDA7DC")]
		public void UpdateSampleTimer(float intensity, float volumeMultiplier)
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xEDB690", Offset = "0xEDB690", VA = "0xEDB690")]
		private void PlayAnySample(float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xEDBA78", Offset = "0xEDBA78", VA = "0xEDBA78")]
		private int GetRandomSoundIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0xEDB788", Offset = "0xEDB788", VA = "0xEDB788")]
		private AudioSource GetAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xEDAB78", Offset = "0xEDAB78", VA = "0xEDAB78", Slot = "6")]
		public void SetOutputMixerGroup(AudioMixerGroup overrideOutputMixer)
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xEDB084", Offset = "0xEDB084", VA = "0xEDB084", Slot = "7")]
		public void Play()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xEDB42C", Offset = "0xEDB42C", VA = "0xEDB42C", Slot = "8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xEDBBE0", Offset = "0xEDBBE0", VA = "0xEDBBE0")]
		public SoundSubElementSample()
		{
		}
	}
}
