using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using AK.Wwise;
using Funomena;
using I2.Loc;
using Il2CppDummyDll;
using Oculus.Platform;
using RootMotion.FinalIK;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityStandardAssets.ImageEffects;
using UnityStandardAssets.Utility;
using Valve.VR;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class TestingColorTweening : MonoBehaviour
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0x7A11C4", Offset = "0x7A11C4", VA = "0x7A11C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x7A13BC", Offset = "0x7A13BC", VA = "0x7A13BC")]
	private void OnTweenUpdate(Color update, object obj)
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x7A15A8", Offset = "0x7A15A8", VA = "0x7A15A8")]
	public TestingColorTweening()
	{
	}
}
[Token(Token = "0x2000003")]
public class TestingIssue : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LTDescr lt;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LTDescr ff;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int id;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int fid;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x7A15B0", Offset = "0x7A15B0", VA = "0x7A15B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x7A16EC", Offset = "0x7A16EC", VA = "0x7A16EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x7A17B4", Offset = "0x7A17B4", VA = "0x7A17B4")]
	public TestingIssue()
	{
	}
}
[Token(Token = "0x2000004")]
public class TestingIssue2 : MonoBehaviour
{
	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform rect;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x7A17BC", Offset = "0x7A17BC", VA = "0x7A17BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x7A1B68", Offset = "0x7A1B68", VA = "0x7A1B68")]
	private void OnTweenUpdate(Color update, object obj)
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x7A1D54", Offset = "0x7A1D54", VA = "0x7A1D54")]
	private void Update()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x7A1D58", Offset = "0x7A1D58", VA = "0x7A1D58")]
	public TestingIssue2()
	{
	}
}
[Token(Token = "0x2000005")]
public static class Vector2Extension
{
	[Token(Token = "0x600000B")]
	[Address(RVA = "0x831B24", Offset = "0x831B24", VA = "0x831B24")]
	public static float SignedAngle(this Vector2 v1, Vector2 v2)
	{
		return default(float);
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x831C74", Offset = "0x831C74", VA = "0x831C74")]
	public static Vector2 Rotate(this Vector2 v, float theta)
	{
		return default(Vector2);
	}
}
[Token(Token = "0x2000006")]
public static class Vector3Extension
{
	[Token(Token = "0x600000D")]
	[Address(RVA = "0x831D2C", Offset = "0x831D2C", VA = "0x831D2C")]
	public static Vector3 WithX(this Vector3 v, float x)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x831D64", Offset = "0x831D64", VA = "0x831D64")]
	public static Vector3 WithY(this Vector3 v, float y)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x831D9C", Offset = "0x831D9C", VA = "0x831D9C")]
	public static Vector3 WithZ(this Vector3 v, float z)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x831DD4", Offset = "0x831DD4", VA = "0x831DD4")]
	public static Vector3 AddX(this Vector3 v, float x)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x831E0C", Offset = "0x831E0C", VA = "0x831E0C")]
	public static Vector3 AddY(this Vector3 v, float y)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x831E44", Offset = "0x831E44", VA = "0x831E44")]
	public static Vector3 AddZ(this Vector3 v, float z)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000007")]
public static class Matrix4x4Extension
{
	[Token(Token = "0x6000013")]
	[Address(RVA = "0x8094A0", Offset = "0x8094A0", VA = "0x8094A0")]
	public static Matrix4x4 GetPerspectiveProjection(float left, float right, float bottom, float top, float near, float far)
	{
		return default(Matrix4x4);
	}
}
[Token(Token = "0x2000008")]
public static class CameraExtension
{
	[Token(Token = "0x6000014")]
	[Address(RVA = "0x84E150", Offset = "0x84E150", VA = "0x84E150")]
	public static Matrix4x4 GetPerspectiveProjection(this Camera camera)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x84E15C", Offset = "0x84E15C", VA = "0x84E15C")]
	public static Matrix4x4 GetPerspectiveProjection(this Camera camera, float texelOffsetX, float texelOffsetY)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x84E32C", Offset = "0x84E32C", VA = "0x84E32C")]
	public static Vector4 GetPerspectiveProjectionCornerRay(this Camera camera)
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x84E338", Offset = "0x84E338", VA = "0x84E338")]
	public static Vector4 GetPerspectiveProjectionCornerRay(this Camera camera, float texelOffsetX, float texelOffsetY)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x2000009")]
public class Game : MonoBehaviour
{
	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Game s_instance;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameInput m_gameInput;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleEffects m_particleEffects;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ShaderVariantCollectionGroup m_allShaderVariants;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LunaBuildSettingsCollection m_buildSettingsCollection;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform m_vrTransform;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SceneLighting m_sceneLighting;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MainCamera m_mainCamera;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private FadeScreenEvent m_fadeScreenEvent;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private EventBarn m_eventBarn;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LunaSaveLoadBarn m_saveLoadBarn;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private DelayBarn m_delayBarn;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private AnimateVRRig m_animateVRRig;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private HotspotBarn m_hotspotBarn;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private RenderLayersAfterMainCamera m_skipCameraEffects;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ZoneBarn m_zoneBarn;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private XboxLiveManager m_xboxLiveManager;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GrowableBarn m_growableBarn;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Bird m_bird;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private BirdStaging m_BirdStaging;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private PathMeshBarn m_pathMeshBarn;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Scene m_scene;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GameObject m_vrRig;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static RecenterCamera m_vrCameraRecenter;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool m_recenter;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	private bool m_isInitialized;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	private bool m_isInConstellation;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
	private bool m_isLocked;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool m_restoreGameStateListenerAdded;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private string m_levelSwitchInputString;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool m_holdingLeftStick;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	private bool m_holdingRightStick;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float m_leftStickHeldTimer;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float m_rightStickHeldTimer;

	[Token(Token = "0x4000029")]
	private const string PING_PREFAB_PATH = "ParticleEffects/Ping_PS";

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private readonly Vector3 kVectorOne;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ParticleSystem m_pingPrefab;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private ParticleSystem m_pingInstance;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private List<HealingControl> m_healingControls;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float m_demoTimer;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public ChangeLevelEvent m_changeLevelEvent;

	[Token(Token = "0x17000001")]
	public static Game Instance
	{
		[Token(Token = "0x6000018")]
		[Address(RVA = "0x7FE2A8", Offset = "0x7FE2A8", VA = "0x7FE2A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000002")]
	public static GameInput GameInput
	{
		[Token(Token = "0x6000019")]
		[Address(RVA = "0x7F2D50", Offset = "0x7F2D50", VA = "0x7F2D50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000003")]
	public static ParticleEffects ParticleFX
	{
		[Token(Token = "0x600001A")]
		[Address(RVA = "0x7FE2F8", Offset = "0x7FE2F8", VA = "0x7FE2F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000004")]
	public static MainCamera MainCamera
	{
		[Token(Token = "0x600001B")]
		[Address(RVA = "0x7FE358", Offset = "0x7FE358", VA = "0x7FE358")]
		get
		{
			return null;
		}
		[Token(Token = "0x600001C")]
		[Address(RVA = "0x7FE3B8", Offset = "0x7FE3B8", VA = "0x7FE3B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public static EventBarn EventBarn
	{
		[Token(Token = "0x600001D")]
		[Address(RVA = "0x7F2240", Offset = "0x7F2240", VA = "0x7F2240")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000006")]
	public static DelayBarn DelayBarn
	{
		[Token(Token = "0x600001E")]
		[Address(RVA = "0x7F2FC4", Offset = "0x7F2FC4", VA = "0x7F2FC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000007")]
	public static HotspotBarn HotspotBarn
	{
		[Token(Token = "0x600001F")]
		[Address(RVA = "0x7F7188", Offset = "0x7F7188", VA = "0x7F7188")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000008")]
	public static LunaSaveLoadBarn SaveLoadBarn
	{
		[Token(Token = "0x6000020")]
		[Address(RVA = "0x7FE41C", Offset = "0x7FE41C", VA = "0x7FE41C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000009")]
	public static XboxLiveManager XboxLiveManager
	{
		[Token(Token = "0x6000021")]
		[Address(RVA = "0x7FE47C", Offset = "0x7FE47C", VA = "0x7FE47C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000A")]
	public static LunaBuildSettings BuildSettings
	{
		[Token(Token = "0x6000022")]
		[Address(RVA = "0x7FE4DC", Offset = "0x7FE4DC", VA = "0x7FE4DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000B")]
	public static GameObject VRRig
	{
		[Token(Token = "0x6000023")]
		[Address(RVA = "0x7FE544", Offset = "0x7FE544", VA = "0x7FE544")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000C")]
	public static Transform VRTransform
	{
		[Token(Token = "0x6000024")]
		[Address(RVA = "0x7FE594", Offset = "0x7FE594", VA = "0x7FE594")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000D")]
	public static Vector3 VRTransformPosition
	{
		[Token(Token = "0x6000025")]
		[Address(RVA = "0x7FE694", Offset = "0x7FE694", VA = "0x7FE694")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700000E")]
	public static Quaternion VRTransformRotation
	{
		[Token(Token = "0x6000026")]
		[Address(RVA = "0x7FE6FC", Offset = "0x7FE6FC", VA = "0x7FE6FC")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700000F")]
	public Transform VRRigTransform
	{
		[Token(Token = "0x6000029")]
		[Address(RVA = "0x7FE5F0", Offset = "0x7FE5F0", VA = "0x7FE5F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000010")]
	public Transform CameraTrackerTransform
	{
		[Token(Token = "0x600002A")]
		[Address(RVA = "0x7FE838", Offset = "0x7FE838", VA = "0x7FE838")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x7FE764", Offset = "0x7FE764", VA = "0x7FE764")]
	public static void PauseFade()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x7FE7D0", Offset = "0x7FE7D0", VA = "0x7FE7D0")]
	public static void ResumeFade()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x7FE8E8", Offset = "0x7FE8E8", VA = "0x7FE8E8")]
	public void ResetDemoTimer()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x7FE8F0", Offset = "0x7FE8F0", VA = "0x7FE8F0")]
	public GrowableBarn GetGrowableBarn()
	{
		return null;
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x7FE8F8", Offset = "0x7FE8F8", VA = "0x7FE8F8")]
	public Bird GetBird()
	{
		return null;
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x7FE900", Offset = "0x7FE900", VA = "0x7FE900")]
	public BirdStaging GetBirdStaging()
	{
		return null;
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x7FE908", Offset = "0x7FE908", VA = "0x7FE908")]
	public PathMeshBarn GetPathMeshBarn()
	{
		return null;
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x7FE910", Offset = "0x7FE910", VA = "0x7FE910")]
	public GameInput GetInput()
	{
		return null;
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x7FE918", Offset = "0x7FE918", VA = "0x7FE918")]
	public Scene GetScene()
	{
		return null;
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x7FE920", Offset = "0x7FE920", VA = "0x7FE920")]
	public ZoneBarn GetZoneBarn()
	{
		return null;
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x7FE928", Offset = "0x7FE928", VA = "0x7FE928")]
	public bool GetIsInConstellation()
	{
		return default(bool);
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x7FE930", Offset = "0x7FE930", VA = "0x7FE930")]
	public bool IsReadyToStart()
	{
		return default(bool);
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x7FEA08", Offset = "0x7FEA08", VA = "0x7FEA08")]
	public void SetIsInConstellation(bool isInConstellation)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x7FEA14", Offset = "0x7FEA14", VA = "0x7FEA14")]
	public void SetGrowableBarn(GrowableBarn growableBarn)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x7FEA1C", Offset = "0x7FEA1C", VA = "0x7FEA1C")]
	public void SetBird(Bird bird)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x7FEA24", Offset = "0x7FEA24", VA = "0x7FEA24")]
	public void SetBirdStaging(BirdStaging birdStaging)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x7FEA2C", Offset = "0x7FEA2C", VA = "0x7FEA2C")]
	public void SetPathMeshBarn(PathMeshBarn pathMeshBarn)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x7FEA34", Offset = "0x7FEA34", VA = "0x7FEA34")]
	public void SetScene(Scene scene)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x7FEA3C", Offset = "0x7FEA3C", VA = "0x7FEA3C")]
	public void SetZoneBarn(ZoneBarn zoneBarn)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x7FEA44", Offset = "0x7FEA44", VA = "0x7FEA44")]
	public void LockGame()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x7FEA50", Offset = "0x7FEA50", VA = "0x7FEA50")]
	public void LoadSavedata()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x7FEAA8", Offset = "0x7FEAA8", VA = "0x7FEAA8")]
	public void UpdatePS4()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x7FEAAC", Offset = "0x7FEAAC", VA = "0x7FEAAC")]
	public void UnloadSavedata()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x7FEAC8", Offset = "0x7FEAC8", VA = "0x7FEAC8")]
	public void SaveGame()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x7FEB50", Offset = "0x7FEB50", VA = "0x7FEB50")]
	public void LoadGame()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x7FEC18", Offset = "0x7FEC18", VA = "0x7FEC18")]
	private void RemoveRestoreGameStateListener()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x7FECB8", Offset = "0x7FECB8", VA = "0x7FECB8")]
	public void RestoreGameStateInLevel(object obj)
	{
	}

	[Token(Token = "0x6000044")]
	public T GetScene<T>() where T : Scene
	{
		return null;
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x7FECEC", Offset = "0x7FECEC", VA = "0x7FECEC")]
	public void RestoreLevel(string levelName)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x7FED74", Offset = "0x7FED74", VA = "0x7FED74")]
	public void ChangeLevel(string levelName, [Optional] ChangeLevelEvent.LevelChangedCallback onLevelChanged, bool stopSound = false)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x7FEDC0", Offset = "0x7FEDC0", VA = "0x7FEDC0")]
	public void ChangeLevel(string levelName, ChangeLevelEvent.LevelChangedCallback onLevelChanged, Color fadeColor, bool saveGame = true, bool stopSound = false)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x7F2628", Offset = "0x7F2628", VA = "0x7F2628")]
	public void ChangeToNextLevel()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x7FEDE4", Offset = "0x7FEDE4", VA = "0x7FEDE4")]
	public void ChangeToNextLevel(Color fadeColor, bool stopSound = false)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x7FEE7C", Offset = "0x7FEE7C", VA = "0x7FEE7C")]
	public void FadeScreen(float fadeSpeed, FadeScreenEvent.FadedOutCallback onFadedOut)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x7F6490", Offset = "0x7F6490", VA = "0x7F6490")]
	public void FadeScreen(float fadeSpeed, FadeScreenEvent.FadedOutCallback onFadedOut, Color fadeColor)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x7FEEDC", Offset = "0x7FEEDC", VA = "0x7FEEDC")]
	public void AnimateCameraTransition(Transform target, float duration)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x7FEFE4", Offset = "0x7FEFE4", VA = "0x7FEFE4")]
	public bool IsVRRigAnimating()
	{
		return default(bool);
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x7FF000", Offset = "0x7FF000", VA = "0x7FF000")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x7FF6C4", Offset = "0x7FF6C4", VA = "0x7FF6C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x7FF1E8", Offset = "0x7FF1E8", VA = "0x7FF1E8")]
	private void SetupVRRig()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x7FF8A4", Offset = "0x7FF8A4", VA = "0x7FF8A4")]
	private void UpdateOSX()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x7FF8A8", Offset = "0x7FF8A8", VA = "0x7FF8A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x7FFDA0", Offset = "0x7FFDA0", VA = "0x7FFDA0")]
	private void UpdateDemoTimer()
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x7FFB18", Offset = "0x7FFB18", VA = "0x7FFB18")]
	private void CheckForVRRecenter()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x80012C", Offset = "0x80012C", VA = "0x80012C")]
	public void ResetVRTracking()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x7FFE88", Offset = "0x7FFE88", VA = "0x7FFE88")]
	private void UpdateDebugLevelSwitch()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x8001C0", Offset = "0x8001C0", VA = "0x8001C0")]
	private void DebugLoadLevel(int levelNum)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x7FFFD4", Offset = "0x7FFFD4", VA = "0x7FFFD4")]
	private void UpdateAchievementCheats()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x8002B8", Offset = "0x8002B8", VA = "0x8002B8")]
	private void SceneLoaded(UnityEngine.SceneManagement.Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x8003C8", Offset = "0x8003C8", VA = "0x8003C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x8003CC", Offset = "0x8003CC", VA = "0x8003CC")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x8003D0", Offset = "0x8003D0", VA = "0x8003D0")]
	public void RegisterHealingControl(HealingControl control)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x80049C", Offset = "0x80049C", VA = "0x80049C")]
	public void RemoveHealingControl(HealingControl control)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x7F8620", Offset = "0x7F8620", VA = "0x7F8620")]
	public HealingControl GetActiveHealingControl()
	{
		return null;
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x800534", Offset = "0x800534", VA = "0x800534")]
	public void PingLocation(Vector3 location, float pingScale = 1f)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x800724", Offset = "0x800724", VA = "0x800724")]
	public Game()
	{
	}
}
[Token(Token = "0x200000A")]
public class GameInput : MonoBehaviour
{
	[Token(Token = "0x200043E")]
	public enum GameInputType
	{
		[Token(Token = "0x4001EAB")]
		None,
		[Token(Token = "0x4001EAC")]
		VRController,
		[Token(Token = "0x4001EAD")]
		Gamepad,
		[Token(Token = "0x4001EAE")]
		Mouse
	}

	[Token(Token = "0x200043F")]
	public delegate void ShowAction(bool show, VRInput.CursorIndex cursorIndex);

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject kLeftControllerPrefab;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject kRightControllerPrefab;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C9AC", Offset = "0x74C9AC")]
	private bool <ControllerSwapOccured>k__BackingField;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] CursorTags;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Dictionary<string, VRInput.CursorIndex> CursorTagToIndex;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int[] m_showCounter;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int[] m_collisionCounter;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static ShowAction OnShowCursor;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static ShowAction OnEnableCollision;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C9BC", Offset = "0x74C9BC")]
	private static GameInputType <InputType>k__BackingField;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float kCursorSmoothing;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public FreeCursorController m_FreeCursorControllerPrefab;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private FreeCursorController m_FreeCursorController;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Collider[] m_cursorColliders;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Dictionary<string, GameObject> m_attachedControllers;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private WorldCursor[] m_worldCursors;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private HapticPlayback m_hapticPlayer;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Ray[] m_cursorRay;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float[] m_timeSpentEngaged;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool[] m_engageAction;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool[] m_engageActionFixedUpdate;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool[] m_engageActionNextFixedUpdate;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool[] m_disengageAction;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool[] m_disengageActionFixedUpdate;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool[] m_disengageActionNextFixedUpdate;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool[] m_isEngaged;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C9CC", Offset = "0x74C9CC")]
	private bool <IsLeftHanded>k__BackingField;

	[Token(Token = "0x17000011")]
	public static bool IsUsingGamepad
	{
		[Token(Token = "0x6000061")]
		[Address(RVA = "0x8CC2B0", Offset = "0x8CC2B0", VA = "0x8CC2B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000012")]
	public static bool IsUsingFreeCursor
	{
		[Token(Token = "0x6000062")]
		[Address(RVA = "0x8CC3D0", Offset = "0x8CC3D0", VA = "0x8CC3D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000013")]
	public static bool IsUsingVRControllers
	{
		[Token(Token = "0x6000063")]
		[Address(RVA = "0x8CC468", Offset = "0x8CC468", VA = "0x8CC468")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000014")]
	public static bool CancelRequested
	{
		[Token(Token = "0x6000064")]
		[Address(RVA = "0x8CC4D0", Offset = "0x8CC4D0", VA = "0x8CC4D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000015")]
	public bool DetectedMultipleControllers
	{
		[Token(Token = "0x6000065")]
		[Address(RVA = "0x8CC620", Offset = "0x8CC620", VA = "0x8CC620")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000016")]
	public bool AnyControllerKeyPressed
	{
		[Token(Token = "0x6000066")]
		[Address(RVA = "0x8CC700", Offset = "0x8CC700", VA = "0x8CC700")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000017")]
	public static bool MouseButtonsPressed
	{
		[Token(Token = "0x6000067")]
		[Address(RVA = "0x8CC8C0", Offset = "0x8CC8C0", VA = "0x8CC8C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000018")]
	public bool ControllerSwapOccured
	{
		[Token(Token = "0x6000068")]
		[Address(RVA = "0x8CC960", Offset = "0x8CC960", VA = "0x8CC960")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756608", Offset = "0x756608")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000069")]
		[Address(RVA = "0x8CC968", Offset = "0x8CC968", VA = "0x8CC968")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756618", Offset = "0x756618")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public static GameInputType InputType
	{
		[Token(Token = "0x600006A")]
		[Address(RVA = "0x8CC974", Offset = "0x8CC974", VA = "0x8CC974")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756628", Offset = "0x756628")]
		get
		{
			return default(GameInputType);
		}
		[Token(Token = "0x600006B")]
		[Address(RVA = "0x8CC9DC", Offset = "0x8CC9DC", VA = "0x8CC9DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756638", Offset = "0x756638")]
		private set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public CursorControllerBase ActiveCursorController
	{
		[Token(Token = "0x600006D")]
		[Address(RVA = "0x8CCD80", Offset = "0x8CCD80", VA = "0x8CCD80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001B")]
	public HapticPlayback HapticPlayer
	{
		[Token(Token = "0x600006E")]
		[Address(RVA = "0x8CCD88", Offset = "0x8CCD88", VA = "0x8CCD88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001C")]
	public Quaternion LeftHandRotation
	{
		[Token(Token = "0x6000074")]
		[Address(RVA = "0x8CD28C", Offset = "0x8CD28C", VA = "0x8CD28C")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700001D")]
	public Quaternion RightHandRotation
	{
		[Token(Token = "0x6000075")]
		[Address(RVA = "0x8CD414", Offset = "0x8CD414", VA = "0x8CD414")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700001E")]
	public Vector3 LeftHandPosition
	{
		[Token(Token = "0x6000076")]
		[Address(RVA = "0x8CD59C", Offset = "0x8CD59C", VA = "0x8CD59C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700001F")]
	public Vector3 RightHandPosition
	{
		[Token(Token = "0x6000077")]
		[Address(RVA = "0x8CD778", Offset = "0x8CD778", VA = "0x8CD778")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000020")]
	public Vector3 HeadPosition
	{
		[Token(Token = "0x6000078")]
		[Address(RVA = "0x8CD928", Offset = "0x8CD928", VA = "0x8CD928")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000021")]
	public Quaternion HeadRotation
	{
		[Token(Token = "0x6000079")]
		[Address(RVA = "0x8CDA34", Offset = "0x8CDA34", VA = "0x8CDA34")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000022")]
	private Vector3 GetCursorPosition
	{
		[Token(Token = "0x600007C")]
		[Address(RVA = "0x8CD758", Offset = "0x8CD758", VA = "0x8CD758")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000023")]
	public bool IsLeftHanded
	{
		[Token(Token = "0x600008C")]
		[Address(RVA = "0x8CE724", Offset = "0x8CE724", VA = "0x8CE724")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756648", Offset = "0x756648")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600008D")]
		[Address(RVA = "0x8CE72C", Offset = "0x8CE72C", VA = "0x8CE72C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756658", Offset = "0x756658")]
		set
		{
		}
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x8CCA48", Offset = "0x8CCA48", VA = "0x8CCA48")]
	private void Awake()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x8CCD90", Offset = "0x8CCD90", VA = "0x8CCD90")]
	public void ClearEngaged()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x8CCDE8", Offset = "0x8CCDE8", VA = "0x8CCDE8")]
	public void SetWorldCursor(int cursorIdx, WorldCursor worldCursor)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x8CCE64", Offset = "0x8CCE64", VA = "0x8CCE64")]
	public bool GetCursorActive(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x8CCF90", Offset = "0x8CCF90", VA = "0x8CCF90")]
	public Vector3 GetHandPosition(int controllerIdx)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x8CD130", Offset = "0x8CD130", VA = "0x8CD130")]
	public Quaternion GetHandRotation(int controllerIdx)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x8CD010", Offset = "0x8CD010", VA = "0x8CD010")]
	public Vector3 GetHandPosition(VRInput.CursorIndex cursorIdx)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x8CD1B0", Offset = "0x8CD1B0", VA = "0x8CD1B0")]
	public Quaternion GetHandRotation(VRInput.CursorIndex cursorIdx)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x8CDBB8", Offset = "0x8CDBB8", VA = "0x8CDBB8")]
	public Ray GetCursorRay(int cursorIdx)
	{
		return default(Ray);
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x8CDC0C", Offset = "0x8CDC0C", VA = "0x8CDC0C")]
	public Vector3 GetCursorPos(int cursorIdx)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x8CDD64", Offset = "0x8CDD64", VA = "0x8CDD64")]
	public Vector3 GetCursorProjectedPos(int cursorIdx)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x8CDEBC", Offset = "0x8CDEBC", VA = "0x8CDEBC")]
	public Vector3 GetCursorViewportPos(int cursorIdx)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x8CE008", Offset = "0x8CE008", VA = "0x8CE008")]
	public void SetCursorViewportPos(int cursorIdx, Vector3 viewportPos)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x8CE11C", Offset = "0x8CE11C", VA = "0x8CE11C")]
	public Vector3 GetCursorVelWorld(int cursorIdx)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x8CE274", Offset = "0x8CE274", VA = "0x8CE274")]
	public Vector3 InverseTransformDirection(int cursorIdx, Vector3 dir)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x8CE40C", Offset = "0x8CE40C", VA = "0x8CE40C")]
	public Transform GetCursorTransform(int cursorIdx)
	{
		return null;
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x8CE548", Offset = "0x8CE548", VA = "0x8CE548")]
	public float GetTimeSpentEngaged(int cursorIdx)
	{
		return default(float);
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x8CE58C", Offset = "0x8CE58C", VA = "0x8CE58C")]
	public bool EngageAction(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x8CE5D0", Offset = "0x8CE5D0", VA = "0x8CE5D0")]
	public bool EngageActionFixedUpdate(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x8CE614", Offset = "0x8CE614", VA = "0x8CE614")]
	public bool DisengageAction(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x8CE658", Offset = "0x8CE658", VA = "0x8CE658")]
	public bool DisengageActionFixedUpdate(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x8CE69C", Offset = "0x8CE69C", VA = "0x8CE69C")]
	public bool IsEngaged(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x8CE6E0", Offset = "0x8CE6E0", VA = "0x8CE6E0")]
	public Collider GetCursorCollider(int cursorIdx)
	{
		return null;
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x8CE738", Offset = "0x8CE738", VA = "0x8CE738")]
	public VRInput.CursorIndex GetDominantCursorIndex()
	{
		return default(VRInput.CursorIndex);
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x8CE740", Offset = "0x8CE740", VA = "0x8CE740")]
	public void ShowAllCursors(bool showCursor)
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x8CE7DC", Offset = "0x8CE7DC", VA = "0x8CE7DC")]
	public void ShowCursor(bool showCursor, VRInput.CursorIndex cursorIndex)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x8CED24", Offset = "0x8CED24", VA = "0x8CED24")]
	public bool IsCursorVisible(VRInput.CursorIndex cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x8CEE24", Offset = "0x8CEE24", VA = "0x8CEE24")]
	public bool IsColliderEnabled(VRInput.CursorIndex cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x8CEBF0", Offset = "0x8CEBF0", VA = "0x8CEBF0")]
	public void EnableCollision(bool enable, VRInput.CursorIndex cursorIndex)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x8CEE70", Offset = "0x8CEE70", VA = "0x8CEE70")]
	private void Start()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x8CF1C4", Offset = "0x8CF1C4", VA = "0x8CF1C4")]
	public void CallSetupControllers()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x8CF0BC", Offset = "0x8CF0BC", VA = "0x8CF0BC")]
	private void SetupControllers()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x8CF278", Offset = "0x8CF278", VA = "0x8CF278")]
	private bool SetupVRControllers()
	{
		return default(bool);
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x8CF2EC", Offset = "0x8CF2EC", VA = "0x8CF2EC")]
	private bool UpdateInputType(GameInputType newInputType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x8CFDE4", Offset = "0x8CFDE4", VA = "0x8CFDE4")]
	public void SetGameInput(GameInputType newInputType)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x8CFEC4", Offset = "0x8CFEC4", VA = "0x8CFEC4")]
	private void HandleInputFallback()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x8D0224", Offset = "0x8D0224", VA = "0x8D0224")]
	public void SwitchControllers()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x8CFA78", Offset = "0x8CFA78", VA = "0x8CFA78")]
	public void SetupCursorColliders()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x8CF8B0", Offset = "0x8CF8B0", VA = "0x8CF8B0")]
	private void AddNewController(string controllerName)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x8CFC0C", Offset = "0x8CFC0C", VA = "0x8CFC0C")]
	private void ClearVRControllers()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x8D0674", Offset = "0x8D0674", VA = "0x8D0674")]
	private GameObject GetRigFromControllerName(string controllerName)
	{
		return null;
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x8D07C8", Offset = "0x8D07C8", VA = "0x8D07C8")]
	private void UpdateCursorLock()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x8D0870", Offset = "0x8D0870", VA = "0x8D0870")]
	private void DropGrowableSelection()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x8D096C", Offset = "0x8D096C", VA = "0x8D096C")]
	private void DetectControllerSwitch()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x8D0C4C", Offset = "0x8D0C4C", VA = "0x8D0C4C")]
	private void SetDefault()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x8D0CC8", Offset = "0x8D0CC8", VA = "0x8D0CC8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x8D18B4", Offset = "0x8D18B4", VA = "0x8D18B4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x8D1638", Offset = "0x8D1638", VA = "0x8D1638")]
	private static bool GetDisengaged(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x8D1AEC", Offset = "0x8D1AEC", VA = "0x8D1AEC")]
	private static bool GetGamepadMenuButtonEngaged()
	{
		return default(bool);
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x8D139C", Offset = "0x8D139C", VA = "0x8D139C")]
	private static bool GetEngaged(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x8D19FC", Offset = "0x8D19FC", VA = "0x8D19FC")]
	public static bool GamepadEngageUp()
	{
		return default(bool);
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x8D1BB4", Offset = "0x8D1BB4", VA = "0x8D1BB4")]
	public static bool GamepadEngageDown()
	{
		return default(bool);
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x8D1F14", Offset = "0x8D1F14", VA = "0x8D1F14")]
	public GameInput()
	{
	}
}
[Token(Token = "0x200000B")]
public class BrightnessControl : MonoBehaviour
{
	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Shader m_brightnessShader;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material m_material;

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x84DE30", Offset = "0x84DE30", VA = "0x84DE30")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x84DEA0", Offset = "0x84DEA0", VA = "0x84DEA0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x84DF54", Offset = "0x84DF54", VA = "0x84DF54")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x84E148", Offset = "0x84E148", VA = "0x84E148")]
	public BrightnessControl()
	{
	}
}
[Token(Token = "0x200000C")]
public class CameraFade : MonoBehaviour
{
	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color m_fadeColor;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74C9DC", Offset = "0x74C9DC")]
	public float m_fadeAmount;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m_fadeMaterial;

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x84E4C4", Offset = "0x84E4C4", VA = "0x84E4C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x84E54C", Offset = "0x84E54C", VA = "0x84E54C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x84E600", Offset = "0x84E600", VA = "0x84E600")]
	private void SetFadeOnColor(float fadeAmount)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x84E638", Offset = "0x84E638", VA = "0x84E638")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x84E700", Offset = "0x84E700", VA = "0x84E700")]
	public CameraFade()
	{
	}
}
[Token(Token = "0x200000D")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x747F60", Offset = "0x747F60")]
public class CameraFadeDisabler : MonoBehaviour
{
	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CameraFade m_cameraFade;

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x84E76C", Offset = "0x84E76C", VA = "0x84E76C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x84E7C4", Offset = "0x84E7C4", VA = "0x84E7C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x84E860", Offset = "0x84E860", VA = "0x84E860")]
	public CameraFadeDisabler()
	{
	}
}
[Token(Token = "0x200000E")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x747FC4", Offset = "0x747FC4")]
public class Crossfade : MonoBehaviour
{
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Shader m_crossfadeShader;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material m_material;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera m_endCamera;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture m_renderTexture;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_alpha;

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x7BAE34", Offset = "0x7BAE34", VA = "0x7BAE34")]
	private Material GetMaterial()
	{
		return null;
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x7BAEFC", Offset = "0x7BAEFC", VA = "0x7BAEFC")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x7BAFAC", Offset = "0x7BAFAC", VA = "0x7BAFAC")]
	public void SetFade(float fadeAmount)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x7BAFB4", Offset = "0x7BAFB4", VA = "0x7BAFB4")]
	public void StartFade(Camera endCamera)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x7BB090", Offset = "0x7BB090", VA = "0x7BB090")]
	public void FinishFade()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x7BB0B8", Offset = "0x7BB0B8", VA = "0x7BB0B8")]
	public void UndoFade()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x7BB110", Offset = "0x7BB110", VA = "0x7BB110")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x7BB168", Offset = "0x7BB168", VA = "0x7BB168")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x7BB16C", Offset = "0x7BB16C", VA = "0x7BB16C")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x7BB324", Offset = "0x7BB324", VA = "0x7BB324")]
	public Crossfade()
	{
	}
}
[Token(Token = "0x200000F")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x748010", Offset = "0x748010")]
public class Vignette : MonoBehaviour
{
	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_intensity;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_centerU;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_centerV;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Shader m_shader;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m_material;

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x832C90", Offset = "0x832C90", VA = "0x832C90")]
	public void SetCenterTarget(float u, float v)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x832C98", Offset = "0x832C98", VA = "0x832C98")]
	private Material GetMaterial()
	{
		return null;
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x832D98", Offset = "0x832D98", VA = "0x832D98")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x832EF8", Offset = "0x832EF8", VA = "0x832EF8")]
	public Vignette()
	{
	}
}
[Token(Token = "0x2000010")]
[DisallowMultipleComponent]
public class KartridgeManager : MonoBehaviour
{
	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x7D8020", Offset = "0x7D8020", VA = "0x7D8020")]
	public KartridgeManager()
	{
	}
}
[Token(Token = "0x2000011")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x74806C", Offset = "0x74806C")]
public class AnimationCurveScriptableObject : ScriptableObject
{
	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve m_curve;

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x8437D4", Offset = "0x8437D4", VA = "0x8437D4")]
	public float Evaluate(float time)
	{
		return default(float);
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x8437F0", Offset = "0x8437F0", VA = "0x8437F0")]
	public AnimationCurveScriptableObject()
	{
	}
}
[Token(Token = "0x2000012")]
public class BearKineticSculptureController : MonoBehaviour
{
	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_bulbBases;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] m_stalks;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public StemColliders m_stemColliders;

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x84390C", Offset = "0x84390C", VA = "0x84390C")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x756668", Offset = "0x756668")]
	public void AddPhysics()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x843F3C", Offset = "0x843F3C", VA = "0x843F3C")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7566A0", Offset = "0x7566A0")]
	public void RemovePhysics()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x8441F8", Offset = "0x8441F8", VA = "0x8441F8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7566D8", Offset = "0x7566D8")]
	private void AddLogic()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x8442D4", Offset = "0x8442D4", VA = "0x8442D4")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x756710", Offset = "0x756710")]
	private void FindStemColliders()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x844310", Offset = "0x844310", VA = "0x844310")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x844268", Offset = "0x844268", VA = "0x844268")]
	private KineticPod AddPodLogic(GameObject podNode, KineticPod gatePod)
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x843FA4", Offset = "0x843FA4", VA = "0x843FA4")]
	private void CleanStalk(GameObject stalk)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x843B24", Offset = "0x843B24", VA = "0x843B24")]
	private void ValidateBulbBase(GameObject bulbBase)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x84432C", Offset = "0x84432C", VA = "0x84432C")]
	private Rigidbody ValidateStalkJoint(GameObject stalkJoint)
	{
		return null;
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x8439B0", Offset = "0x8439B0", VA = "0x8439B0")]
	private void ValidateStalk(GameObject stalk)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x8446F4", Offset = "0x8446F4", VA = "0x8446F4")]
	private void AddChildrenToQueue(Transform parent, Queue<Transform> children)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x8447E4", Offset = "0x8447E4", VA = "0x8447E4")]
	public BearKineticSculptureController()
	{
	}
}
[Token(Token = "0x2000013")]
public class CinematicActor : CursorInputMonoBehaviour
{
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent m_onWaitForTouch;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent m_onTouch;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private InteractiveCinematic m_interactiveCinematic;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ParticleSystem[] m_particleSystems;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SphereCollider m_collider;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Animator m_animator;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private MaterialColorCycler[] m_materialColorCyclers;

	[Token(Token = "0x4000066")]
	private const string kTriggerName = "Act";

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public bool m_isWaitingForTouch;

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x850CB0", Offset = "0x850CB0", VA = "0x850CB0")]
	public void CheckBeat()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x850D2C", Offset = "0x850D2C", VA = "0x850D2C")]
	public void EnableCollider(bool enabled)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x850DD0", Offset = "0x850DD0", VA = "0x850DD0", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x850EF4", Offset = "0x850EF4", VA = "0x850EF4")]
	public void SetActorToTouch()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x851058", Offset = "0x851058", VA = "0x851058")]
	public void AdvanceCinematic()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x8510B4", Offset = "0x8510B4", VA = "0x8510B4")]
	public void TouchActor()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x850CDC", Offset = "0x850CDC", VA = "0x850CDC")]
	public void PulseHaptic()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x851250", Offset = "0x851250", VA = "0x851250", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x85132C", Offset = "0x85132C", VA = "0x85132C", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x8513A8", Offset = "0x8513A8", VA = "0x8513A8")]
	public CinematicActor()
	{
	}
}
[Token(Token = "0x2000014")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x74807C", Offset = "0x74807C")]
public class ControlsDisplayAssets : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000440")]
	public class ControlsDisplayForLanguage
	{
		[Token(Token = "0x4001EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SystemLanguage m_languageName;

		[Token(Token = "0x4001EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture m_oculusImage;

		[Token(Token = "0x4001EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture m_viveImage;

		[Token(Token = "0x4001EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture m_wmrImage;

		[Token(Token = "0x4001EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture m_windows2DImage;

		[Token(Token = "0x4001EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture m_PS4DualShockImage;

		[Token(Token = "0x4001EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture m_PS4DualShockImageButtonSwapped;

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture m_PS4MoveImage;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture m_controllerImage;

		[Token(Token = "0x4001EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture m_oculusSelectImage;

		[Token(Token = "0x4001EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture m_viveSelectImage;

		[Token(Token = "0x4001EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture m_wmrSelectImage;

		[Token(Token = "0x4001EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture m_windows2DSelectImage;

		[Token(Token = "0x4001EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Texture m_PS4DualShockSelectImage;

		[Token(Token = "0x4001EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture m_PS4DualShockSelectImageButtonSwapped;

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Texture m_PS4MoveSelectImage;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture m_controllerSelectImage;

		[Token(Token = "0x600229C")]
		[Address(RVA = "0x7B6348", Offset = "0x7B6348", VA = "0x7B6348")]
		public ControlsDisplayForLanguage()
		{
		}
	}

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ControlsDisplayForLanguage[] m_languages;

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x7B6340", Offset = "0x7B6340", VA = "0x7B6340")]
	public ControlsDisplayAssets()
	{
	}
}
[Token(Token = "0x2000015")]
public class CreateModeActors : MonoBehaviour
{
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_actorBird;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_dynamicBird;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_heroAnimal;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] m_heroAnimalHints;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material[] m_heroAnimalMaterials;

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x7B6350", Offset = "0x7B6350", VA = "0x7B6350")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x7B6354", Offset = "0x7B6354", VA = "0x7B6354")]
	public CreateModeActors()
	{
	}
}
[Token(Token = "0x2000016")]
public class CreateModeStamp : MonoBehaviour
{
	[Token(Token = "0x2000441")]
	public class GrowablePool
	{
		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Growable> m_ungrownGrowables;

		[Token(Token = "0x600229D")]
		[Address(RVA = "0x7B82FC", Offset = "0x7B82FC", VA = "0x7B82FC")]
		public GrowablePool()
		{
		}
	}

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<GrowableType, GrowablePool> m_growablePools;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CA14", Offset = "0x74CA14")]
	private GrowableType <m_growableType>k__BackingField;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject m_parentOfTargets;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CreateModeStampIcon m_icon;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_hasPlayedAmbience;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int m_numGrowablesInstantiated;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_numGrowables;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int m_numGrown;

	[Token(Token = "0x17000024")]
	public GrowableType m_growableType
	{
		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x7B7FC0", Offset = "0x7B7FC0", VA = "0x7B7FC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756748", Offset = "0x756748")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000E4")]
		[Address(RVA = "0x7B7FC8", Offset = "0x7B7FC8", VA = "0x7B7FC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756758", Offset = "0x756758")]
		set
		{
		}
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x7B7FD0", Offset = "0x7B7FD0", VA = "0x7B7FD0")]
	private int ProcessFoxSceneGrowables(int growableCount)
	{
		return default(int);
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x7B8074", Offset = "0x7B8074", VA = "0x7B8074")]
	public void Setup(GrowableType growableType, int growableCount)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x7B8304", Offset = "0x7B8304", VA = "0x7B8304")]
	public bool AmortizedStart()
	{
		return default(bool);
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x7B8414", Offset = "0x7B8414", VA = "0x7B8414")]
	private Growable InstantiateGrowableFromType(GrowableType growableType, int instanceCounter)
	{
		return null;
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x7B843C", Offset = "0x7B843C", VA = "0x7B843C")]
	private GameObject GetPrefabVariant(GrowableType growableType, int instanceCounter)
	{
		return null;
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x7B84B4", Offset = "0x7B84B4", VA = "0x7B84B4")]
	private Growable InstantiateGrowable(GameObject growablePrefab)
	{
		return null;
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x7B866C", Offset = "0x7B866C", VA = "0x7B866C")]
	public void Enable(int cursorIdx)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x7B8750", Offset = "0x7B8750", VA = "0x7B8750")]
	private GrowablePool GetDefaultPool()
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x7B87AC", Offset = "0x7B87AC", VA = "0x7B87AC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x7B88BC", Offset = "0x7B88BC", VA = "0x7B88BC")]
	public void EnableIcons()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x7B8964", Offset = "0x7B8964", VA = "0x7B8964")]
	public void DisableIcons()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x7B89A4", Offset = "0x7B89A4", VA = "0x7B89A4")]
	public Growable GetUngrownGrowable()
	{
		return null;
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x7B8A38", Offset = "0x7B8A38", VA = "0x7B8A38")]
	public bool IsAllowedTerrainType(string terrainType)
	{
		return default(bool);
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x7B8AC8", Offset = "0x7B8AC8", VA = "0x7B8AC8")]
	public GrowablePool GetPool(string terrainType)
	{
		return null;
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x7B8BDC", Offset = "0x7B8BDC", VA = "0x7B8BDC")]
	public Growable GetUngrownGrowable(string terrainType)
	{
		return null;
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x7B8C7C", Offset = "0x7B8C7C", VA = "0x7B8C7C")]
	public void GrowGrowable(Growable growable)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x7B8D30", Offset = "0x7B8D30", VA = "0x7B8D30")]
	public void UngrowGrowable(Growable growable)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x7B8DE8", Offset = "0x7B8DE8", VA = "0x7B8DE8")]
	public CreateModeStamp()
	{
	}
}
[Token(Token = "0x2000017")]
public class CreateModeStampGroupIcon : MonoBehaviour
{
	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_Icon;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_activeStampGroup;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private StampBarnSimple m_stampBarn;

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x7B8DF0", Offset = "0x7B8DF0", VA = "0x7B8DF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x7B8E64", Offset = "0x7B8E64", VA = "0x7B8E64")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x7B8EE4", Offset = "0x7B8EE4", VA = "0x7B8EE4")]
	public CreateModeStampGroupIcon()
	{
	}
}
[Token(Token = "0x2000018")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x74808C", Offset = "0x74808C")]
public class CreateModeStampIcon : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000079")]
	private const float ANGLE_THRESHOLD = 1f;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Vector3 kUpVector;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private readonly Vector3 kRightVector;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public CreateModeStamp m_stamp;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject m_sparkleEmitter;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float m_scaleMult;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject m_iconGO;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private StampBarnSimple m_stampBarn;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 m_startScale;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform m_StampIconMesh;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float m_IconSinSpeed;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float m_IconSinAmplitude;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float m_sinOffset;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Quaternion m_originalLocalRotation;

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x7B897C", Offset = "0x7B897C", VA = "0x7B897C")]
	public void DisableIcon()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x7B893C", Offset = "0x7B893C", VA = "0x7B893C")]
	public void EnableIcon()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x7B8EEC", Offset = "0x7B8EEC", VA = "0x7B8EEC", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x7B937C", Offset = "0x7B937C", VA = "0x7B937C", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x7B96BC", Offset = "0x7B96BC", VA = "0x7B96BC", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x7B9804", Offset = "0x7B9804", VA = "0x7B9804")]
	private void PlayVO(string stampName)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x7B98F0", Offset = "0x7B98F0", VA = "0x7B98F0")]
	public void TogglePlaceablePaletteGrab(bool canGrab)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x7B99C8", Offset = "0x7B99C8", VA = "0x7B99C8")]
	public CreateModeStampIcon()
	{
	}
}
[Token(Token = "0x2000019")]
public enum ActorType
{
	[Token(Token = "0x4000088")]
	Frog,
	[Token(Token = "0x4000089")]
	Bee,
	[Token(Token = "0x400008A")]
	Fly
}
[Token(Token = "0x200001A")]
public enum ActorState
{
	[Token(Token = "0x400008C")]
	Idle,
	[Token(Token = "0x400008D")]
	PlanningNextMove,
	[Token(Token = "0x400008E")]
	Moving,
	[Token(Token = "0x400008F")]
	Spawning,
	[Token(Token = "0x4000090")]
	Eating,
	[Token(Token = "0x4000091")]
	Death,
	[Token(Token = "0x4000092")]
	None
}
[Token(Token = "0x200001B")]
public enum PlayType
{
	[Token(Token = "0x4000094")]
	Null,
	[Token(Token = "0x4000095")]
	Eat,
	[Token(Token = "0x4000096")]
	Spawn
}
[Serializable]
[Token(Token = "0x200001C")]
public struct PlayDate
{
	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	public string Name;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ActorType m_playMate;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public PlayType m_playType;

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x63D6E4", Offset = "0x63D6E4", VA = "0x63D6E4")]
	public PlayDate(ActorType a, PlayType p)
	{
	}
}
[Token(Token = "0x200001D")]
public class CritterNode : MonoBehaviour
{
	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ActorType m_actorType;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CritterSounds m_critterSounds;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayDate[] m_playDates;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_offspring;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool m_canMoveToOtherTypes;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool m_canJump;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject m_renderMesh;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public FrogController m_frogControl;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrowableNode m_currentGrowable;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GrowableNode m_bookedGrowable;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<GrowableNode> m_validMoveTargets;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_timeStartedLerping;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float m_speed;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 m_startPosition;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private StateTimer m_idleStateTimer;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private StateTimer m_spawnStateTimer;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private StateTimer m_eatStateTimer;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private StateTimer m_eatResetTimer;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private StateTimer m_spawnResetTimer;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private StateTimer m_deathResetTimer;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CA34", Offset = "0x74CA34")]
	private bool <m_canEat>k__BackingField;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CA44", Offset = "0x74CA44")]
	private bool <m_canSpawn>k__BackingField;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private ActorState m_state;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform m_lookTarget;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public AnimationCurveScriptableObject m_jumpCurve;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74CA54", Offset = "0x74CA54")]
	public float m_jumpCurveMultiplier;

	[Token(Token = "0x17000025")]
	public bool m_canEat
	{
		[Token(Token = "0x6000103")]
		[Address(RVA = "0x7B9AAC", Offset = "0x7B9AAC", VA = "0x7B9AAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756768", Offset = "0x756768")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000104")]
		[Address(RVA = "0x7B9AB4", Offset = "0x7B9AB4", VA = "0x7B9AB4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756778", Offset = "0x756778")]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public bool m_canSpawn
	{
		[Token(Token = "0x6000105")]
		[Address(RVA = "0x7B9AC0", Offset = "0x7B9AC0", VA = "0x7B9AC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756788", Offset = "0x756788")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000106")]
		[Address(RVA = "0x7B9AC8", Offset = "0x7B9AC8", VA = "0x7B9AC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756798", Offset = "0x756798")]
		set
		{
		}
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x7B9AD4", Offset = "0x7B9AD4", VA = "0x7B9AD4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x7B9BD0", Offset = "0x7B9BD0", VA = "0x7B9BD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x7B9CA8", Offset = "0x7B9CA8", VA = "0x7B9CA8")]
	public ActorState GetState()
	{
		return default(ActorState);
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x7B9CB0", Offset = "0x7B9CB0", VA = "0x7B9CB0")]
	public Transform GetLookTarget()
	{
		return null;
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x7B9CB8", Offset = "0x7B9CB8", VA = "0x7B9CB8")]
	public void SetLookTarget(Transform target)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x7B9CC0", Offset = "0x7B9CC0", VA = "0x7B9CC0")]
	public void SetCurrentGrowable(GrowableNode growableNode)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x7B9CC8", Offset = "0x7B9CC8", VA = "0x7B9CC8")]
	private void PlaySoundEvent(string sound)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x7B9DA0", Offset = "0x7B9DA0", VA = "0x7B9DA0")]
	private bool ValidateTarget(GrowableNode target)
	{
		return default(bool);
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x7B9EB0", Offset = "0x7B9EB0", VA = "0x7B9EB0")]
	public GrowableNode GetNewMoveTarget()
	{
		return null;
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x7BA01C", Offset = "0x7BA01C", VA = "0x7BA01C")]
	private float GetDistanceToTarget(Vector3 target)
	{
		return default(float);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x7BA11C", Offset = "0x7BA11C", VA = "0x7BA11C")]
	public void InteractionCheck()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x7BA248", Offset = "0x7BA248", VA = "0x7BA248")]
	private void SetCritterPositionToGrowable()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x7BA29C", Offset = "0x7BA29C", VA = "0x7BA29C")]
	private void SetCritterRotationToGrowable()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x7BA2F0", Offset = "0x7BA2F0", VA = "0x7BA2F0")]
	private void SetCritterRotationToTarget()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x7BA38C", Offset = "0x7BA38C", VA = "0x7BA38C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x7BA9B4", Offset = "0x7BA9B4", VA = "0x7BA9B4")]
	private void ExitState()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x7BA66C", Offset = "0x7BA66C", VA = "0x7BA66C")]
	public void SetState(ActorState newState)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x7BABD0", Offset = "0x7BABD0", VA = "0x7BABD0")]
	private void CheckState()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x7BACB4", Offset = "0x7BACB4", VA = "0x7BACB4")]
	private void Update()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x7BACB8", Offset = "0x7BACB8", VA = "0x7BACB8")]
	public CritterNode()
	{
	}
}
[Token(Token = "0x200001E")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7480F0", Offset = "0x7480F0")]
public class CritterSounds : ScriptableObject
{
	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_spawnSound;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_eatSound;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_kissSound;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string m_moveStartSound;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string m_moveEndSound;

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x7BAE00", Offset = "0x7BAE00", VA = "0x7BAE00")]
	public CritterSounds()
	{
	}
}
[Serializable]
[Token(Token = "0x200001F")]
public class CritterSpawnInfo
{
	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public string Name;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_critter;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_spawnMultiple;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 m_spawnOffset;

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x7BAE08", Offset = "0x7BAE08", VA = "0x7BAE08")]
	public CritterSpawnInfo(string name)
	{
	}
}
[Token(Token = "0x2000020")]
public class EditorStarEdge : MonoBehaviour
{
	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EditorStarPoint[] m_endpoints;

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x7F2AB4", Offset = "0x7F2AB4", VA = "0x7F2AB4")]
	public EditorStarEdge()
	{
	}
}
[Token(Token = "0x2000021")]
public class EditorStarPoint : MonoBehaviour
{
	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_idx;

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x7F2B14", Offset = "0x7F2B14", VA = "0x7F2B14")]
	public EditorStarPoint()
	{
	}
}
[Token(Token = "0x2000022")]
public class EndCreateScribble : CursorInputMonoBehaviour
{
	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Collider m_collider;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SimpleScaleAnimator m_scaleAnimator;

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x7F2C4C", Offset = "0x7F2C4C", VA = "0x7F2C4C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x7F2D2C", Offset = "0x7F2D2C", VA = "0x7F2D2C", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x7F2DB0", Offset = "0x7F2DB0", VA = "0x7F2DB0", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x7F2DE4", Offset = "0x7F2DE4", VA = "0x7F2DE4", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIdx, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x7F3024", Offset = "0x7F3024", VA = "0x7F3024")]
	private void StartCinematic()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x7F306C", Offset = "0x7F306C", VA = "0x7F306C")]
	public EndCreateScribble()
	{
	}
}
[Token(Token = "0x2000023")]
public class EntitlementFailScene : MonoBehaviour
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kTimeBeforeExiting;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_exitTimer;

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x7F4D64", Offset = "0x7F4D64", VA = "0x7F4D64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x7F4E24", Offset = "0x7F4E24", VA = "0x7F4E24")]
	public EntitlementFailScene()
	{
	}
}
[Token(Token = "0x2000024")]
public class Foldable : MonoBehaviour
{
	[Token(Token = "0x2000442")]
	public enum TutorialType
	{
		[Token(Token = "0x4001EC2")]
		NONE,
		[Token(Token = "0x4001EC3")]
		TURTLE,
		[Token(Token = "0x4001EC4")]
		SWAN,
		[Token(Token = "0x4001EC5")]
		BEAR,
		[Token(Token = "0x4001EC6")]
		FOX
	}

	[Token(Token = "0x2000443")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AD50", Offset = "0x74AD50")]
	private sealed class <CreateGroundScribble>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Foldable <>4__this;

		[Token(Token = "0x1700036D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022A1")]
			[Address(RVA = "0x7F6EA0", Offset = "0x7F6EA0", VA = "0x7F6EA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022A3")]
			[Address(RVA = "0x7F6F0C", Offset = "0x7F6F0C", VA = "0x7F6F0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600229E")]
		[Address(RVA = "0x7F68C4", Offset = "0x7F68C4", VA = "0x7F68C4")]
		[DebuggerHidden]
		public <CreateGroundScribble>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x600229F")]
		[Address(RVA = "0x7F6D18", Offset = "0x7F6D18", VA = "0x7F6D18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022A0")]
		[Address(RVA = "0x7F6D1C", Offset = "0x7F6D1C", VA = "0x7F6D1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0x7F6EA8", Offset = "0x7F6EA8", VA = "0x7F6EA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StarPuzzle m_starPuzzle;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FoldablePuzzle m_foldablePuzzle;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FoldableSettings m_foldableSettings;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_groundIconInstance;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 kScribbleStartOffset;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 kScribbleFinishOffset;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float kLeavePodTime;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string m_podOpenSound;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TutorialType m_tutorialType;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CA7C", Offset = "0x74CA7C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CA7C", Offset = "0x74CA7C")]
	public string m_enterPuzzleVO;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float m_enterPuzzleDelay;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CADC", Offset = "0x74CADC")]
	public string m_solvedPuzzleVO;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float m_solvedPuzzleDelay;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CB14", Offset = "0x74CB14")]
	public string m_exitPuzzleVO;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float m_exitPuzzleDelay;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GameObject m_groundScribbleInstance;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private OverrideAnimation m_overrideAnimation;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float m_leavePodTimer;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 m_maxScribbleScale;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 kVector3Zero;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool m_setActive;

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x7F64B0", Offset = "0x7F64B0", VA = "0x7F64B0")]
	public GameObject GetGroundIcon()
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x7F64B8", Offset = "0x7F64B8", VA = "0x7F64B8")]
	public StarPuzzle GetStarPuzzle()
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x7F64C0", Offset = "0x7F64C0", VA = "0x7F64C0")]
	public FoldablePuzzle GetFoldablePuzzle()
	{
		return null;
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x7F64C8", Offset = "0x7F64C8", VA = "0x7F64C8")]
	public void ReturnToGround()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x7F6568", Offset = "0x7F6568", VA = "0x7F6568")]
	public bool GetIsSolved()
	{
		return default(bool);
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x7F6584", Offset = "0x7F6584", VA = "0x7F6584")]
	public void LeavePod()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x7F6784", Offset = "0x7F6784", VA = "0x7F6784")]
	public void ToStars()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x7F6820", Offset = "0x7F6820", VA = "0x7F6820")]
	private void Awake()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x7F6824", Offset = "0x7F6824", VA = "0x7F6824")]
	private void Start()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x7F6850", Offset = "0x7F6850", VA = "0x7F6850")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7567A8", Offset = "0x7567A8")]
	private IEnumerator CreateGroundScribble()
	{
		return null;
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x7F68F0", Offset = "0x7F68F0", VA = "0x7F68F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x7F6BA4", Offset = "0x7F6BA4", VA = "0x7F6BA4")]
	public Foldable()
	{
	}
}
[Token(Token = "0x2000025")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748100", Offset = "0x748100")]
public class FoldableGroundScribble : CursorInputMonoBehaviour
{
	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private KineticToStarsSeq m_seq;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Hotspot m_hotspot;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleBundleInstanceMonobehaviour m_particleBundleInstanceMonobehaviour;

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x7F6F14", Offset = "0x7F6F14", VA = "0x7F6F14")]
	public void OnHotspotEngage()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x7F7050", Offset = "0x7F7050", VA = "0x7F7050", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x7F71E8", Offset = "0x7F71E8", VA = "0x7F71E8", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x7F6F18", Offset = "0x7F6F18", VA = "0x7F6F18")]
	private void StartStarTransition()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x7F7298", Offset = "0x7F7298", VA = "0x7F7298")]
	public FoldableGroundScribble()
	{
	}
}
[Token(Token = "0x2000026")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748164", Offset = "0x748164")]
public class FoldablePuzzle : ScriptableObject
{
	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StarPuzzle[] m_starPuzzles;

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x7F7300", Offset = "0x7F7300", VA = "0x7F7300")]
	public FoldablePuzzle()
	{
	}
}
[Token(Token = "0x2000027")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748174", Offset = "0x748174")]
public class FoldableSettings : ScriptableObject
{
	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_groundScribblePrefab;

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x7F7308", Offset = "0x7F7308", VA = "0x7F7308")]
	public FoldableSettings()
	{
	}
}
[Token(Token = "0x2000028")]
public class FoxKineticSculptureController : MonoBehaviour
{
	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_stalks;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public StemColliders m_stemColliders;

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x7F7310", Offset = "0x7F7310", VA = "0x7F7310")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x75680C", Offset = "0x75680C")]
	public void AddPhysics()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x7F7610", Offset = "0x7F7610", VA = "0x7F7610")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x756844", Offset = "0x756844")]
	public void RemovePhysics()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x7F78CC", Offset = "0x7F78CC", VA = "0x7F78CC")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x75687C", Offset = "0x75687C")]
	private void AddLogic()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x7F7A3C", Offset = "0x7F7A3C", VA = "0x7F7A3C")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7568B4", Offset = "0x7568B4")]
	private void FindStemColliders()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x7F7A78", Offset = "0x7F7A78", VA = "0x7F7A78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x7F79C0", Offset = "0x7F79C0", VA = "0x7F79C0")]
	private KineticPod AddPodLogic(Transform endTransform, KineticPod gatePod)
	{
		return null;
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x7F7678", Offset = "0x7F7678", VA = "0x7F7678")]
	private void CleanStalk(GameObject stalk)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x7F737C", Offset = "0x7F737C", VA = "0x7F737C")]
	private void ValidateStalk(GameObject stalk)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x7F7A94", Offset = "0x7F7A94", VA = "0x7F7A94")]
	private Rigidbody ValidateStalkJoint(Rigidbody baseBody, GameObject stalkJoint)
	{
		return null;
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x7F7E30", Offset = "0x7F7E30", VA = "0x7F7E30")]
	public FoxKineticSculptureController()
	{
	}
}
[Token(Token = "0x2000029")]
internal enum FrogState
{
	[Token(Token = "0x40000E0")]
	Sit,
	[Token(Token = "0x40000E1")]
	Eat,
	[Token(Token = "0x40000E2")]
	Jump
}
[Token(Token = "0x200002A")]
public class FrogController : MonoBehaviour
{
	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CritterNode m_critterNode;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject tongue;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_actionFrog;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_frogSit;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject m_frogEat;

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x7FC6A8", Offset = "0x7FC6A8", VA = "0x7FC6A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x7FC76C", Offset = "0x7FC76C", VA = "0x7FC76C")]
	private void SetGo(GameObject go, bool active)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x7FC6B0", Offset = "0x7FC6B0", VA = "0x7FC6B0")]
	private void SetFrogModel(FrogState state)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x7FC810", Offset = "0x7FC810", VA = "0x7FC810")]
	private void RotateFrogTowardsBug()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x7FC930", Offset = "0x7FC930", VA = "0x7FC930")]
	private void ExtendTongue()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x7FCAA4", Offset = "0x7FCAA4", VA = "0x7FCAA4")]
	private void AimTongue()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x7FCBA4", Offset = "0x7FCBA4", VA = "0x7FCBA4")]
	private void ResetTongue()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x7FCCCC", Offset = "0x7FCCCC", VA = "0x7FCCCC")]
	public void Eat()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x7FCD04", Offset = "0x7FCD04", VA = "0x7FCD04")]
	public void EatEnd()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x7FCD2C", Offset = "0x7FCD2C", VA = "0x7FCD2C")]
	public void Jump()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x7FCD34", Offset = "0x7FCD34", VA = "0x7FCD34")]
	public void Sit()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x7FCD3C", Offset = "0x7FCD3C", VA = "0x7FCD3C")]
	public FrogController()
	{
	}
}
[Token(Token = "0x200002B")]
public class FunMesh : MonoBehaviour
{
	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_updateWhenOffscreen;

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x7FCD44", Offset = "0x7FCD44", VA = "0x7FCD44")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x7FCE68", Offset = "0x7FCE68", VA = "0x7FCE68")]
	public FunMesh()
	{
	}
}
[Token(Token = "0x200002C")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748184", Offset = "0x748184")]
public class GamepadProfile : ScriptableObject
{
	[Token(Token = "0x40000E9")]
	private const string CONTROLLER_INPUT_BASE = "Controller_";

	[Token(Token = "0x40000EA")]
	private const float DEFAULT_Y_AXIS_MODIFIER = 1f;

	[Token(Token = "0x40000EB")]
	private const float DEFAULT_AXIS_DEAD_ZONE = 0.04f;

	[Token(Token = "0x40000EC")]
	private const float DEFAULT_TRIGGER_AXIS_DEAD_VALUE = 0f;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CB5C", Offset = "0x74CB5C")]
	public KeyCode m_A;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public KeyCode m_B;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public KeyCode m_X;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public KeyCode m_Y;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public KeyCode m_LBumper;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public KeyCode m_RBumper;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public KeyCode m_Select;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public KeyCode m_Start;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public KeyCode m_LStick;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public KeyCode m_RStick;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public KeyCode m_DPadUp;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public KeyCode m_DPadDown;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public KeyCode m_DPadRight;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public KeyCode m_DPadLeft;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public KeyCode m_System;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public KeyCode m_Special;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CB94", Offset = "0x74CB94")]
	public KeyCode m_LTrigger;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CBCC", Offset = "0x74CBCC")]
	public KeyCode m_RTrigger;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CC04", Offset = "0x74CC04")]
	public string m_leftStickAxisX;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string m_leftStickAxisY;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string m_rightStickAxisX;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string m_rightStickAxisY;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string m_dPadAxisX;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string m_dPadAxisY;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public string m_leftTriggerAxis;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public string m_rightTriggerAxis;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float m_rightStickYModifier;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float m_leftStickYModifier;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CC3C", Offset = "0x74CC3C")]
	public float m_axisDeadZone;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CC74", Offset = "0x74CC74")]
	public float m_triggerAxisDeadValue;

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x8DE0FC", Offset = "0x8DE0FC", VA = "0x8DE0FC")]
	public GamepadProfile()
	{
	}
}
[Token(Token = "0x200002D")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748194", Offset = "0x748194")]
public class GestureData : ScriptableObject
{
	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Vector3> points;

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x8DE6A4", Offset = "0x8DE6A4", VA = "0x8DE6A4")]
	public GestureData()
	{
	}
}
[Token(Token = "0x200002E")]
public class Growable : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000444")]
	public class ControlStar
	{
		[Token(Token = "0x4001ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public InteractionMutex m_mutex;

		[Token(Token = "0x4001ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform m_parent;

		[Token(Token = "0x4001ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 m_offset;

		[Token(Token = "0x4001ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755F40", Offset = "0x755F40")]
		private UIControlStar <Emitter>k__BackingField;

		[Token(Token = "0x1700036F")]
		public UIControlStar Emitter
		{
			[Token(Token = "0x60022A4")]
			[Address(RVA = "0x8E45B0", Offset = "0x8E45B0", VA = "0x8E45B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A510", Offset = "0x75A510")]
			get
			{
				return null;
			}
			[Token(Token = "0x60022A5")]
			[Address(RVA = "0x8E45B8", Offset = "0x8E45B8", VA = "0x8E45B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A520", Offset = "0x75A520")]
			set
			{
			}
		}

		[Token(Token = "0x60022A6")]
		[Address(RVA = "0x8E45C0", Offset = "0x8E45C0", VA = "0x8E45C0")]
		public ControlStar()
		{
		}
	}

	[Token(Token = "0x2000445")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AD60", Offset = "0x74AD60")]
	private sealed class <>c__DisplayClass57_0
	{
		[Token(Token = "0x4001ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ControlStar star;

		[Token(Token = "0x4001ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Growable <>4__this;

		[Token(Token = "0x60022A7")]
		[Address(RVA = "0x8E1D0C", Offset = "0x8E1D0C", VA = "0x8E1D0C")]
		public <>c__DisplayClass57_0()
		{
		}

		[Token(Token = "0x60022A8")]
		[Address(RVA = "0x8E456C", Offset = "0x8E456C", VA = "0x8E456C")]
		internal void <Awake>b__0()
		{
		}

		[Token(Token = "0x60022A9")]
		[Address(RVA = "0x8E458C", Offset = "0x8E458C", VA = "0x8E458C")]
		internal void <Awake>b__1()
		{
		}
	}

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GrowableType m_growableType;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public LookState m_growableLookState;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool m_alignWithSurfaceNormal;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool m_disableAnimatorAfterGrow;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool m_enablePhysicsAfterGrow;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_growTriggerParameter;

	[Token(Token = "0x4000112")]
	private const float kColliderDisableDelay = 0.5f;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_physicsRoot;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Rigidbody[] m_rigidBodiesToExclude;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MonoBehaviour[] m_monobehavioursToEnable;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody[] m_rigidBodiesToEnable;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Collider[] m_colliders;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private InteractionMutex[] m_mutexes;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ControlStar[] m_controlStars;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ControlStar[] m_highlightStars;

	[Token(Token = "0x400011B")]
	private const float kAltStateOn = 1f;

	[Token(Token = "0x400011C")]
	private const float kAltStateOff = 0f;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string m_property;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_propertyId;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CCBC", Offset = "0x74CCBC")]
	private GameObject <m_growSurface>k__BackingField;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ColorPicker m_colorPicker;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PhysicsScaler m_physicsScaler;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private PlaySoundOnCollision m_playSoundOnCollision;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GrowableNode m_growableNode;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CCCC", Offset = "0x74CCCC")]
	private int <Zone>k__BackingField;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector2 m_mistUVs;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GrowableMesh m_growableMesh;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<Material> m_materials;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Renderer[] m_renderers;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Animator m_animator;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private IKTargetmover m_ikTargetMover;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private MinSpecCursorInputMonoBehaviour m_minSpecCursorInput;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private CreateModeStamp m_stamp;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool m_isGrowing;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
	private bool m_isInEditMode;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
	private bool m_transitionFromSadState;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF3")]
	private bool m_sadListenerAdded;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool m_isInTutorial;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float m_sadStateTransTime;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private List<string> m_voEventPlayed;

	[Token(Token = "0x17000027")]
	public GameObject m_growSurface
	{
		[Token(Token = "0x6000155")]
		[Address(RVA = "0x8E13E8", Offset = "0x8E13E8", VA = "0x8E13E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7568EC", Offset = "0x7568EC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000156")]
		[Address(RVA = "0x8E13F0", Offset = "0x8E13F0", VA = "0x8E13F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7568FC", Offset = "0x7568FC")]
		set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public GrowableMesh GrowableMesh
	{
		[Token(Token = "0x6000157")]
		[Address(RVA = "0x8E13F8", Offset = "0x8E13F8", VA = "0x8E13F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000029")]
	public int Zone
	{
		[Token(Token = "0x6000158")]
		[Address(RVA = "0x8E1400", Offset = "0x8E1400", VA = "0x8E1400")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75690C", Offset = "0x75690C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000159")]
		[Address(RVA = "0x8E1408", Offset = "0x8E1408", VA = "0x8E1408")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75691C", Offset = "0x75691C")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public CreateModeStamp GrowableStamp
	{
		[Token(Token = "0x600015A")]
		[Address(RVA = "0x8E1410", Offset = "0x8E1410", VA = "0x8E1410")]
		get
		{
			return null;
		}
		[Token(Token = "0x600015B")]
		[Address(RVA = "0x8E1418", Offset = "0x8E1418", VA = "0x8E1418")]
		set
		{
		}
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x8E1420", Offset = "0x8E1420", VA = "0x8E1420")]
	public void SetMistUvs(Vector2 uvs)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x8E1428", Offset = "0x8E1428", VA = "0x8E1428")]
	public Vector2 GetMistUvs()
	{
		return default(Vector2);
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x8E1430", Offset = "0x8E1430", VA = "0x8E1430")]
	public void SetZone(int zone)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x8E1438", Offset = "0x8E1438", VA = "0x8E1438")]
	public void SetEditMode()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x8E1444", Offset = "0x8E1444", VA = "0x8E1444")]
	public void ResetModifications()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x8E14D8", Offset = "0x8E14D8", VA = "0x8E14D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x8E1D14", Offset = "0x8E1D14", VA = "0x8E1D14")]
	public void SetMaterialAltStateValue(float value)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x8E1DC8", Offset = "0x8E1DC8", VA = "0x8E1DC8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x8E2188", Offset = "0x8E2188", VA = "0x8E2188")]
	private void Start()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x8E2198", Offset = "0x8E2198", VA = "0x8E2198")]
	public void MinSpecUpdate()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x8E2248", Offset = "0x8E2248", VA = "0x8E2248")]
	private void Update()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x8E20D8", Offset = "0x8E20D8", VA = "0x8E20D8")]
	private void RemoveSadListener()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x8E2418", Offset = "0x8E2418", VA = "0x8E2418")]
	public void MakeSad()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x8E24D4", Offset = "0x8E24D4", VA = "0x8E24D4")]
	public void MakeUnSad(object obj)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x8E25D0", Offset = "0x8E25D0", VA = "0x8E25D0")]
	public Color GrowableColor()
	{
		return default(Color);
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x8E2190", Offset = "0x8E2190", VA = "0x8E2190")]
	public void Hide()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x8E2664", Offset = "0x8E2664", VA = "0x8E2664")]
	public void Show(bool isVisible)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x8E286C", Offset = "0x8E286C", VA = "0x8E286C")]
	public void Energize(int zone)
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x8E2874", Offset = "0x8E2874", VA = "0x8E2874")]
	public void Grow()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x8E2F3C", Offset = "0x8E2F3C", VA = "0x8E2F3C")]
	private void OnActivateZone(object obj)
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x8E2DDC", Offset = "0x8E2DDC", VA = "0x8E2DDC")]
	private void DisableColliders()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x8E3054", Offset = "0x8E3054", VA = "0x8E3054")]
	private void ToggleColliders(bool enabled)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x8E311C", Offset = "0x8E311C", VA = "0x8E311C")]
	private void OnTeleport(object obj)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x8E31BC", Offset = "0x8E31BC", VA = "0x8E31BC")]
	private void OnStampDropped(object obj)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x8E3250", Offset = "0x8E3250", VA = "0x8E3250")]
	private void HandleTutorialTreeUngrow()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x8E33C4", Offset = "0x8E33C4", VA = "0x8E33C4")]
	public void UnGrow()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x8E38B8", Offset = "0x8E38B8", VA = "0x8E38B8")]
	public void OnGrown()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x8E2D50", Offset = "0x8E2D50", VA = "0x8E2D50")]
	public void DisablePhysics(bool enable)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x8E2E58", Offset = "0x8E2E58", VA = "0x8E2E58")]
	private void PlayRolloffSound()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x8E2318", Offset = "0x8E2318", VA = "0x8E2318")]
	private void UpdateGrow()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x8E3A28", Offset = "0x8E3A28", VA = "0x8E3A28")]
	public void DispatchInteraction()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x8E3A60", Offset = "0x8E3A60", VA = "0x8E3A60")]
	public void AddMinSpecCursorInputMonoBehaviour()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x8E3B30", Offset = "0x8E3B30", VA = "0x8E3B30")]
	public void ShowStarEmitter(ControlStar controlStar, UIControlStar emitter)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x8E3B70", Offset = "0x8E3B70", VA = "0x8E3B70")]
	public void ShowHighlightStar(ControlStar highlightStar)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x8E3C38", Offset = "0x8E3C38", VA = "0x8E3C38")]
	public void HideHighlightStar(ControlStar highlightStar)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x8E206C", Offset = "0x8E206C", VA = "0x8E206C")]
	private void HideAllHighlightStars()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x8E33A0", Offset = "0x8E33A0", VA = "0x8E33A0")]
	private void HideandFreeAllControlStars()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x8E3D18", Offset = "0x8E3D18", VA = "0x8E3D18")]
	public void FreeAllHighlightStars()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x8E3D78", Offset = "0x8E3D78", VA = "0x8E3D78")]
	public void FreeAllControlStars()
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x8E1F6C", Offset = "0x8E1F6C", VA = "0x8E1F6C")]
	private bool AreAnyHighlightStarsVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x8E32A0", Offset = "0x8E32A0", VA = "0x8E32A0")]
	private bool AreAnyControlStarsVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x8D7DB4", Offset = "0x8D7DB4", VA = "0x8D7DB4")]
	public void ShowControlStars()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x8E21D8", Offset = "0x8E21D8", VA = "0x8E21D8")]
	public void HideControlStars()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x8E3DD8", Offset = "0x8E3DD8", VA = "0x8E3DD8")]
	public void StartHighlight()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x8E3F70", Offset = "0x8E3F70", VA = "0x8E3F70")]
	public void StopHighlight()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x8E407C", Offset = "0x8E407C", VA = "0x8E407C")]
	private void RegisterGrowableWithGamepadCursor()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x8E418C", Offset = "0x8E418C", VA = "0x8E418C")]
	private void DeregisterGrowableWithGamepadCursor()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x8E42DC", Offset = "0x8E42DC", VA = "0x8E42DC")]
	public void PlayNumPlantedVOEvent(int numPlanted)
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x8E44DC", Offset = "0x8E44DC", VA = "0x8E44DC")]
	public Growable()
	{
	}
}
[Token(Token = "0x200002F")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7481A4", Offset = "0x7481A4")]
public class GrowableCluster : MonoBehaviour
{
	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GrowablePopulation m_GrowablePopulation;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GrowableNode> m_Growables;

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x8E4DBC", Offset = "0x8E4DBC", VA = "0x8E4DBC")]
	public void InitializeGrowableTypePopulationDictionary(GrowableType[] growableTypes, int numZones)
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x8E53F4", Offset = "0x8E53F4", VA = "0x8E53F4")]
	public void ResetCluster()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x8E52EC", Offset = "0x8E52EC", VA = "0x8E52EC")]
	public void AddGrowable(GrowableNode growableNode)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x8E5D54", Offset = "0x8E5D54", VA = "0x8E5D54")]
	public void RemoveGrowable(GrowableNode growableNode)
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x8E5F00", Offset = "0x8E5F00", VA = "0x8E5F00")]
	public GrowableCluster()
	{
	}
}
[Token(Token = "0x2000030")]
public class GrowableMesh : CursorInputMonoBehaviour
{
	[Token(Token = "0x6000192")]
	[Address(RVA = "0x8E6D94", Offset = "0x8E6D94", VA = "0x8E6D94", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x8E3050", Offset = "0x8E3050", VA = "0x8E3050")]
	public void ZoneGlow()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x8E6D9C", Offset = "0x8E6D9C", VA = "0x8E6D9C")]
	public GrowableMesh()
	{
	}
}
[Token(Token = "0x2000031")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748208", Offset = "0x748208")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748208", Offset = "0x748208")]
public class GrowableNode : MonoBehaviour
{
	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CCDC", Offset = "0x74CCDC")]
	private Transform <m_growableRoot>k__BackingField;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CCEC", Offset = "0x74CCEC")]
	private Transform <m_physicsRoot>k__BackingField;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CCFC", Offset = "0x74CCFC")]
	private GrowableCluster <m_cluster>k__BackingField;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD0C", Offset = "0x74CD0C")]
	private Growable <m_growable>k__BackingField;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD1C", Offset = "0x74CD1C")]
	private SphereCollider <m_sphereCollider>k__BackingField;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD2C", Offset = "0x74CD2C")]
	private GrowableSprinkleOccupant <m_growableOccupant>k__BackingField;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD3C", Offset = "0x74CD3C")]
	private TerrainParticleSplash <m_terrainParticleSplash>k__BackingField;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<GrowableNode> m_growableColliders;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public List<GrowableCluster> m_OtherClustersCollidedWith;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<GrowableNode> m_growablesToReset;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD5C", Offset = "0x74CD5C")]
	private bool <m_isNewGrowable>k__BackingField;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool m_isStillColliding;

	[Token(Token = "0x4000142")]
	private const string k_sizeParamPrefix = "Cluster_Size_";

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string m_sizeParamName;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD6C", Offset = "0x74CD6C")]
	private int <m_growablesLayer>k__BackingField;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD7C", Offset = "0x74CD7C")]
	private int <m_lilypadLayer>k__BackingField;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD8C", Offset = "0x74CD8C")]
	private int <m_cameraCullingLayer>k__BackingField;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74CD9C", Offset = "0x74CD9C")]
	private int <m_sprinkleLayer>k__BackingField;

	[Token(Token = "0x1700002B")]
	public Transform m_growableRoot
	{
		[Token(Token = "0x6000195")]
		[Address(RVA = "0x8E6E04", Offset = "0x8E6E04", VA = "0x8E6E04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75692C", Offset = "0x75692C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000196")]
		[Address(RVA = "0x8E6E0C", Offset = "0x8E6E0C", VA = "0x8E6E0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75693C", Offset = "0x75693C")]
		set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public Transform m_physicsRoot
	{
		[Token(Token = "0x6000197")]
		[Address(RVA = "0x8E6E14", Offset = "0x8E6E14", VA = "0x8E6E14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75694C", Offset = "0x75694C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000198")]
		[Address(RVA = "0x8E6E1C", Offset = "0x8E6E1C", VA = "0x8E6E1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75695C", Offset = "0x75695C")]
		set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public GrowableCluster m_cluster
	{
		[Token(Token = "0x6000199")]
		[Address(RVA = "0x8E6E24", Offset = "0x8E6E24", VA = "0x8E6E24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75696C", Offset = "0x75696C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600019A")]
		[Address(RVA = "0x8E6E2C", Offset = "0x8E6E2C", VA = "0x8E6E2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75697C", Offset = "0x75697C")]
		set
		{
		}
	}

	[Token(Token = "0x1700002E")]
	public Growable m_growable
	{
		[Token(Token = "0x600019B")]
		[Address(RVA = "0x8E6E34", Offset = "0x8E6E34", VA = "0x8E6E34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75698C", Offset = "0x75698C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600019C")]
		[Address(RVA = "0x8E6E3C", Offset = "0x8E6E3C", VA = "0x8E6E3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75699C", Offset = "0x75699C")]
		set
		{
		}
	}

	[Token(Token = "0x1700002F")]
	public SphereCollider m_sphereCollider
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0x8E6E44", Offset = "0x8E6E44", VA = "0x8E6E44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7569AC", Offset = "0x7569AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600019E")]
		[Address(RVA = "0x8E6E4C", Offset = "0x8E6E4C", VA = "0x8E6E4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7569BC", Offset = "0x7569BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000030")]
	public GrowableSprinkleOccupant m_growableOccupant
	{
		[Token(Token = "0x600019F")]
		[Address(RVA = "0x8E6E54", Offset = "0x8E6E54", VA = "0x8E6E54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7569CC", Offset = "0x7569CC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x8E6E5C", Offset = "0x8E6E5C", VA = "0x8E6E5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7569DC", Offset = "0x7569DC")]
		set
		{
		}
	}

	[Token(Token = "0x17000031")]
	public TerrainParticleSplash m_terrainParticleSplash
	{
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x8E6E64", Offset = "0x8E6E64", VA = "0x8E6E64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7569EC", Offset = "0x7569EC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x8E6E6C", Offset = "0x8E6E6C", VA = "0x8E6E6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7569FC", Offset = "0x7569FC")]
		set
		{
		}
	}

	[Token(Token = "0x17000032")]
	public bool m_isNewGrowable
	{
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0x8E6E74", Offset = "0x8E6E74", VA = "0x8E6E74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A0C", Offset = "0x756A0C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x8E6E7C", Offset = "0x8E6E7C", VA = "0x8E6E7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A1C", Offset = "0x756A1C")]
		set
		{
		}
	}

	[Token(Token = "0x17000033")]
	public int m_growablesLayer
	{
		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x8E6E88", Offset = "0x8E6E88", VA = "0x8E6E88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A2C", Offset = "0x756A2C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x8E6E90", Offset = "0x8E6E90", VA = "0x8E6E90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A3C", Offset = "0x756A3C")]
		set
		{
		}
	}

	[Token(Token = "0x17000034")]
	public int m_lilypadLayer
	{
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x8E6E98", Offset = "0x8E6E98", VA = "0x8E6E98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A4C", Offset = "0x756A4C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x8E6EA0", Offset = "0x8E6EA0", VA = "0x8E6EA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A5C", Offset = "0x756A5C")]
		set
		{
		}
	}

	[Token(Token = "0x17000035")]
	public int m_cameraCullingLayer
	{
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x8E6EA8", Offset = "0x8E6EA8", VA = "0x8E6EA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A6C", Offset = "0x756A6C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x8E6EB0", Offset = "0x8E6EB0", VA = "0x8E6EB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A7C", Offset = "0x756A7C")]
		set
		{
		}
	}

	[Token(Token = "0x17000036")]
	private int m_sprinkleLayer
	{
		[Token(Token = "0x60001AB")]
		[Address(RVA = "0x8E6EB8", Offset = "0x8E6EB8", VA = "0x8E6EB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A8C", Offset = "0x756A8C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x8E6EC0", Offset = "0x8E6EC0", VA = "0x8E6EC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756A9C", Offset = "0x756A9C")]
		set
		{
		}
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x8E6EC8", Offset = "0x8E6EC8", VA = "0x8E6EC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x8E2DE4", Offset = "0x8E2DE4", VA = "0x8E2DE4")]
	public void ResetGrowable()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x8E51A0", Offset = "0x8E51A0", VA = "0x8E51A0")]
	public void GetOtherClustersCollidedWith()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x8E7078", Offset = "0x8E7078", VA = "0x8E7078")]
	private bool MaskCheck(int layer)
	{
		return default(bool);
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x8E709C", Offset = "0x8E709C", VA = "0x8E709C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x8E7284", Offset = "0x8E7284", VA = "0x8E7284")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x8E35EC", Offset = "0x8E35EC", VA = "0x8E35EC")]
	public void RemoveGrowable(bool enabled)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x8E738C", Offset = "0x8E738C", VA = "0x8E738C")]
	public void RemoveFromCluster()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x8E741C", Offset = "0x8E741C", VA = "0x8E741C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x8E7544", Offset = "0x8E7544", VA = "0x8E7544")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x8E761C", Offset = "0x8E761C", VA = "0x8E761C")]
	public GrowableNode()
	{
	}
}
[Token(Token = "0x2000032")]
public class GrowablePopulation : MonoBehaviour
{
	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, int> m_growableTypePopulations;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_totalPopulation;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int[] m_zonePopulations;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_totalZones;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string[] keys;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_totalInteractions;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] m_zoneInteractions;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int m_totalPlays;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int[] m_zonePlays;

	[Token(Token = "0x17000037")]
	public int TotalPopulation
	{
		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x8E7C64", Offset = "0x8E7C64", VA = "0x8E7C64")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000038")]
	public int TotalInteractions
	{
		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x8E7C6C", Offset = "0x8E7C6C", VA = "0x8E7C6C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000039")]
	public int TotalPlays
	{
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x8E7C74", Offset = "0x8E7C74", VA = "0x8E7C74")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003A")]
	public int PopulatedZones
	{
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x8E7C7C", Offset = "0x8E7C7C", VA = "0x8E7C7C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x8E78E8", Offset = "0x8E78E8", VA = "0x8E78E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x8E79D4", Offset = "0x8E79D4", VA = "0x8E79D4")]
	private void IncrementPlayCount(object obj)
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x8E7AE4", Offset = "0x8E7AE4", VA = "0x8E7AE4")]
	private void IncrementInteractionCount(object obj)
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x8E4A14", Offset = "0x8E4A14", VA = "0x8E4A14")]
	public void InitializeGrowableTypePopulationDictionary(GrowableType[] growableTypes, int numZones)
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x8E7BF4", Offset = "0x8E7BF4", VA = "0x8E7BF4")]
	private void UpdateGrowablePopulation(string growableName, int value)
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x8E540C", Offset = "0x8E540C", VA = "0x8E540C")]
	public void IncrementGrowablePopulation(string growableName, int zone)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x8E5E04", Offset = "0x8E5E04", VA = "0x8E5E04")]
	public void DecrementGrowablePopulation(string growableName, int zone)
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x8E5798", Offset = "0x8E5798", VA = "0x8E5798")]
	public int ReturnGrowablePopulation(string type)
	{
		return default(int);
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x8E7C84", Offset = "0x8E7C84", VA = "0x8E7C84")]
	public int GetZonePopulation(int zone)
	{
		return default(int);
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x8E7CC8", Offset = "0x8E7CC8", VA = "0x8E7CC8")]
	public int GetZoneInteractions(int zone)
	{
		return default(int);
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x8E7D0C", Offset = "0x8E7D0C", VA = "0x8E7D0C")]
	public int GetZonePlays(int zone)
	{
		return default(int);
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x8E5BF8", Offset = "0x8E5BF8", VA = "0x8E5BF8")]
	public void ResetPopulationValues()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x8E7D50", Offset = "0x8E7D50", VA = "0x8E7D50")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x8E7E3C", Offset = "0x8E7E3C", VA = "0x8E7E3C")]
	public GrowablePopulation()
	{
	}
}
[Token(Token = "0x2000033")]
public class GrowableProximityAnimator : MonoBehaviour
{
	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator m_animator;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_index;

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x907C88", Offset = "0x907C88", VA = "0x907C88")]
	public void SetIntensity(float intensity)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x907D34", Offset = "0x907D34", VA = "0x907D34")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x907DD0", Offset = "0x907DD0", VA = "0x907DD0")]
	public GrowableProximityAnimator()
	{
	}
}
[Token(Token = "0x2000034")]
public class GrowableSprinkleOccupant : MonoBehaviour
{
	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CritterNode m_occupant;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_isVacant;

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x907DD8", Offset = "0x907DD8", VA = "0x907DD8")]
	public void AddOccupant(CritterNode occupant)
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x907DE4", Offset = "0x907DE4", VA = "0x907DE4")]
	public void RemoveOccupant(CritterNode occupant)
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x907DF4", Offset = "0x907DF4", VA = "0x907DF4")]
	public void DeactivateOccupant()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x907E98", Offset = "0x907E98", VA = "0x907E98")]
	public void ScanForPlaymates(CritterNode critter, PlayDate playDate)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x907F5C", Offset = "0x907F5C", VA = "0x907F5C")]
	public void Interact(CritterNode primary, CritterNode secondary, PlayType playType)
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x908250", Offset = "0x908250", VA = "0x908250")]
	public GrowableSprinkleOccupant()
	{
	}
}
[Token(Token = "0x2000035")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748294", Offset = "0x748294")]
public class GrowableType : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000446")]
	public class AlternateTerrainGrowable
	{
		[Token(Token = "0x4001ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_terrainType;

		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrowableType m_growableType;

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0x9083E8", Offset = "0x9083E8", VA = "0x9083E8")]
		public AlternateTerrainGrowable()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000447")]
	public struct SoundEvent
	{
		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_soundEvent;

		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_numPlanted;
	}

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_growableType;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_growablePrefab;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] m_additionalGrowablePrefabs;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CDAC", Offset = "0x74CDAC")]
	public string m_selectSound;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string m_placeSound;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string m_decoGrowSound;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string m_decoGrowStopSound;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string m_rolloverSound;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string m_rolloverPregrowSound;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string m_rolloffSound;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string m_holdSound;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string m_ambientStartSound;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SoundEvent[] m_plantedVOEvents;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CDE4", Offset = "0x74CDE4")]
	public Texture2D m_editColorGradient;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Material[] m_materialsForColorEdit;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int m_defaultColor;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CE1C", Offset = "0x74CE1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CE1C", Offset = "0x74CE1C")]
	public float m_scaleMin;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CE7C", Offset = "0x74CE7C")]
	public float m_scaleMax;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CEB4", Offset = "0x74CEB4")]
	public bool m_useGrowableTypeEditScale;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CEEC", Offset = "0x74CEEC")]
	public float m_editScaleMin;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74CF24", Offset = "0x74CF24")]
	public float m_editScaleMax;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CF5C", Offset = "0x74CF5C")]
	public int kNumStampsForAmbient;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool m_isDecoStamp;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CF94", Offset = "0x74CF94")]
	public string[] m_allowedTerrainTypes;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public AlternateTerrainGrowable[] m_alternateTerrainGrowables;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public string m_parentOfTargets;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public string[] m_additionalParentsOfTargets;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74CFCC", Offset = "0x74CFCC")]
	public Mesh m_iconMesh;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Mesh m_shadowMesh;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Material m_overrideMaterial;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Material m_shadowMaterial;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Vector3 m_meshRotation;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public Vector3 m_meshScale;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Vector3 m_meshOffset;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public Vector3 m_boxColliderCenter;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Vector3 m_boxColliderSize;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D004", Offset = "0x74D004")]
	public CritterSpawnInfo m_selfCritter;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public CritterSpawnInfo m_landCritter;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public CritterSpawnInfo m_waterCritter;

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x908260", Offset = "0x908260", VA = "0x908260")]
	public GrowableType()
	{
	}
}
[Token(Token = "0x2000036")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7482A4", Offset = "0x7482A4")]
public class GrowableTypeSet : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000448")]
	public struct GrowableTypeSetEntry
	{
		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GrowableType m_growableType;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x755F50", Offset = "0x755F50")]
		public int m_numObjects;
	}

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GrowableTypeSetEntry[] m_growableTypes;

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x9083F0", Offset = "0x9083F0", VA = "0x9083F0")]
	public GrowableTypeSet()
	{
	}
}
[Token(Token = "0x2000037")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7482B4", Offset = "0x7482B4")]
public class HapticAsset : ScriptableObject
{
	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve amplitude;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve frequency;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve pulseDuration;

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x9088C0", Offset = "0x9088C0", VA = "0x9088C0")]
	public HapticAsset()
	{
	}
}
[Token(Token = "0x2000038")]
public class Hotspot : MonoBehaviour
{
	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74D03C", Offset = "0x74D03C")]
	private bool <IsEngaged>k__BackingField;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74D04C", Offset = "0x74D04C")]
	private bool <MoveCursorWithStickWhileEngaged>k__BackingField;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action OnHotspotEngage;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action OnHotspotRelease;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_pendingRegistration;

	[Token(Token = "0x1700003B")]
	public bool IsEngaged
	{
		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x90C610", Offset = "0x90C610", VA = "0x90C610")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756AAC", Offset = "0x756AAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x90C618", Offset = "0x90C618", VA = "0x90C618")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756ABC", Offset = "0x756ABC")]
		set
		{
		}
	}

	[Token(Token = "0x1700003C")]
	public bool MoveCursorWithStickWhileEngaged
	{
		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x90C624", Offset = "0x90C624", VA = "0x90C624")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756ACC", Offset = "0x756ACC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x90C62C", Offset = "0x90C62C", VA = "0x90C62C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756ADC", Offset = "0x756ADC")]
		set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public Vector3 Position
	{
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x90C638", Offset = "0x90C638", VA = "0x90C638")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x90C65C", Offset = "0x90C65C", VA = "0x90C65C")]
	public void HotspotEngage()
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x90C67C", Offset = "0x90C67C", VA = "0x90C67C")]
	public void HotspotRelease()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x90C698", Offset = "0x90C698", VA = "0x90C698")]
	private void RegisterWithNodeMapper()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x90C790", Offset = "0x90C790", VA = "0x90C790")]
	private void DeregisterWithNodeMapper()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x90C888", Offset = "0x90C888", VA = "0x90C888")]
	public void Update()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x90C910", Offset = "0x90C910", VA = "0x90C910")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x90C9F4", Offset = "0x90C9F4", VA = "0x90C9F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x90CB78", Offset = "0x90CB78", VA = "0x90CB78")]
	public Hotspot()
	{
	}
}
[Token(Token = "0x2000039")]
public class IntroStarActivator : MonoBehaviour
{
	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_sourceStars;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent m_activateEvent;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float kMinDistForActivate;

	[Token(Token = "0x4000188")]
	private const float kMinDistForAttraction = 10f;

	[Token(Token = "0x4000189")]
	public const float kAttractMult = 10f;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem m_emitter;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform m_transform;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_numActivations;

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x7D66E0", Offset = "0x7D66E0", VA = "0x7D66E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x7D6810", Offset = "0x7D6810", VA = "0x7D6810")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x7D6BC4", Offset = "0x7D6BC4", VA = "0x7D6BC4")]
	public IntroStarActivator()
	{
	}
}
[Token(Token = "0x200003A")]
public class IntroStarFinishLevel : MonoBehaviour
{
	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x7D6BD4", Offset = "0x7D6BD4", VA = "0x7D6BD4")]
	public void StartNewGame()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x7D6DAC", Offset = "0x7D6DAC", VA = "0x7D6DAC")]
	public void ContinueGame()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x7D6F84", Offset = "0x7D6F84", VA = "0x7D6F84")]
	public IntroStarFinishLevel()
	{
	}
}
[Token(Token = "0x200003B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748300", Offset = "0x748300")]
public class IntroStarMovable : CursorInputMonoBehaviour
{
	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x7D6F8C", Offset = "0x7D6F8C", VA = "0x7D6F8C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x7D6FF0", Offset = "0x7D6FF0", VA = "0x7D6FF0", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x7D7150", Offset = "0x7D7150", VA = "0x7D7150", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x7D719C", Offset = "0x7D719C", VA = "0x7D719C", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x7D7218", Offset = "0x7D7218", VA = "0x7D7218")]
	public IntroStarMovable()
	{
	}
}
[Token(Token = "0x200003C")]
public class IntroStarStartLevel : MonoBehaviour
{
	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_newGameGUIElement;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_newGameText;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_startGameText;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_loadingGameText;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject m_continueGameGUIElement;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject m_savingDisabledText;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_isInitialized;

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x7D7280", Offset = "0x7D7280", VA = "0x7D7280")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x7D7288", Offset = "0x7D7288", VA = "0x7D7288")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x7D74A4", Offset = "0x7D74A4", VA = "0x7D74A4")]
	private void InitializeAfterLoad()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x7D76C0", Offset = "0x7D76C0", VA = "0x7D76C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x7D77A4", Offset = "0x7D77A4", VA = "0x7D77A4")]
	public IntroStarStartLevel()
	{
	}
}
[Token(Token = "0x200003D")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748364", Offset = "0x748364")]
public class KineticPod : MonoBehaviour
{
	[Token(Token = "0x2000449")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AD70", Offset = "0x74AD70")]
	private sealed class <CreatePuzzleSuccessHint>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KineticPod <>4__this;

		[Token(Token = "0x17000370")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022AE")]
			[Address(RVA = "0x7DA380", Offset = "0x7DA380", VA = "0x7DA380", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000371")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022B0")]
			[Address(RVA = "0x7DA3EC", Offset = "0x7DA3EC", VA = "0x7DA3EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0x7D92B0", Offset = "0x7D92B0", VA = "0x7D92B0")]
		[DebuggerHidden]
		public <CreatePuzzleSuccessHint>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60022AC")]
		[Address(RVA = "0x7DA144", Offset = "0x7DA144", VA = "0x7DA144", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022AD")]
		[Address(RVA = "0x7DA148", Offset = "0x7DA148", VA = "0x7DA148", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022AF")]
		[Address(RVA = "0x7DA388", Offset = "0x7DA388", VA = "0x7DA388", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000194")]
	private const float WIGGLE_IMPULSE_FORCE = 20f;

	[Token(Token = "0x4000195")]
	private const float WIGGLE_TIME_WINDOW = 1f;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SerializedNoteType m_note;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem m_vortexEmitterPrefab;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleBundle m_singNoteParticles;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Foldable m_foldable;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HapticAsset m_hapticAsset;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public KineticPod m_gatePod;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float kImpactCooldownTime;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool m_sculptureHasAlignAnimation;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string kOpenAnimName;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string kAlignAnimName;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string kImpactSoundName;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string kBirdSingSoundName;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string kRotateStartSound;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string kRotateStopSound;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Animator m_animator;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ParticleBundleInstance m_singNoteParticlesInstance;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private OverrideAnimation m_overrideAnimation;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ValueUpdater m_volume;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private KineticToStarsSeq m_kineticToStarsSeq;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private SphereCollider m_sphereCollider;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Hotspot m_hotspot;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float m_impactCooldownTimer;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool m_readyToOpen;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
	private bool m_hasOpened;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC6")]
	private bool m_isRotateSoundPlaying;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC7")]
	private bool m_correctHit;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Vector3 m_vortexLocation;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject m_puzzleSuccessHintPrefab;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private GameObject m_puzzleSuccessHint;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float m_lastWiggle;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private readonly float m_maxWiggleImpulse;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float m_currentWiggleForce;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 kVectorZero;

	[Token(Token = "0x1700003E")]
	private KineticToStarsSeq KineticToStarsSeqRef
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x7D884C", Offset = "0x7D884C", VA = "0x7D884C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003F")]
	public bool HasOpened
	{
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x7D8934", Offset = "0x7D8934", VA = "0x7D8934")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x7D893C", Offset = "0x7D893C", VA = "0x7D893C")]
	public void SolvePodFromSaveData()
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x7D8988", Offset = "0x7D8988", VA = "0x7D8988")]
	public void EmitSingFX()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x7D89A4", Offset = "0x7D89A4", VA = "0x7D89A4")]
	public void OnBirdSing(object obj)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x7D8BBC", Offset = "0x7D8BBC", VA = "0x7D8BBC")]
	public void OnStarPuzzleSolved(object obj)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x7D8BDC", Offset = "0x7D8BDC", VA = "0x7D8BDC")]
	public void SetReadyToOpen()
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x7D8BE8", Offset = "0x7D8BE8", VA = "0x7D8BE8")]
	public void OnBirdCall()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x7D8D04", Offset = "0x7D8D04", VA = "0x7D8D04")]
	private void OpenPodAnimation()
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x7D8D28", Offset = "0x7D8D28", VA = "0x7D8D28")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x7D8E70", Offset = "0x7D8E70", VA = "0x7D8E70")]
	private void ResetPuzzleHint(object obj)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x7D8EA8", Offset = "0x7D8EA8", VA = "0x7D8EA8")]
	public void ActivatePuzzleHint()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x7D8EE4", Offset = "0x7D8EE4", VA = "0x7D8EE4")]
	public bool GetHasBeenCorrectlyHit()
	{
		return default(bool);
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x7D8EEC", Offset = "0x7D8EEC", VA = "0x7D8EEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x7D923C", Offset = "0x7D923C", VA = "0x7D923C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x756AEC", Offset = "0x756AEC")]
	private IEnumerator CreatePuzzleSuccessHint()
	{
		return null;
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x7D92DC", Offset = "0x7D92DC", VA = "0x7D92DC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x7D9548", Offset = "0x7D9548", VA = "0x7D9548")]
	private void OnLevelReady(object obj)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x7D9644", Offset = "0x7D9644", VA = "0x7D9644")]
	private void OnSwitchToStars(object obj)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x7D96F8", Offset = "0x7D96F8", VA = "0x7D96F8")]
	public void OnHotspotEngage()
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x7D8A74", Offset = "0x7D8A74", VA = "0x7D8A74")]
	private void Wiggle()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x7D97BC", Offset = "0x7D97BC", VA = "0x7D97BC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x7D97F8", Offset = "0x7D97F8", VA = "0x7D97F8")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x7D9720", Offset = "0x7D9720", VA = "0x7D9720")]
	private void OnTriggerEnterActions(int cursorIdx)
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x7D9900", Offset = "0x7D9900", VA = "0x7D9900")]
	private void ReactPod(int cursorIdx)
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x7D9A7C", Offset = "0x7D9A7C", VA = "0x7D9A7C")]
	private void OpenPod(int cursorIdx)
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x7D9DC0", Offset = "0x7D9DC0", VA = "0x7D9DC0")]
	private void DispatchAligned()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x7D9DEC", Offset = "0x7D9DEC", VA = "0x7D9DEC")]
	private void Update()
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x7D9FD8", Offset = "0x7D9FD8", VA = "0x7D9FD8")]
	public KineticPod()
	{
	}
}
[Token(Token = "0x200003E")]
public class KineticSculpture : MonoBehaviour
{
	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator m_animator;

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x7DA3F4", Offset = "0x7DA3F4", VA = "0x7DA3F4")]
	public void ToggleAnimator(bool isEnabled)
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x7DA414", Offset = "0x7DA414", VA = "0x7DA414")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x7DA46C", Offset = "0x7DA46C", VA = "0x7DA46C")]
	public KineticSculpture()
	{
	}
}
[Token(Token = "0x200003F")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7483C8", Offset = "0x7483C8")]
public class LevelSelectIcon : CursorInputMonoBehaviour
{
	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string m_kineticSceneName;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string m_createSceneName;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform m_vrTransformKinetic;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform m_vrTransformCreate;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private TerrariumShell m_terrariumShell;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform m_vrTransform;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string m_levelToLoad;

	[Token(Token = "0x40001C0")]
	private const float kCameraTransitionTime = 10f;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private LunaSaveGameKineticSceneData m_kineticData;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private LunaSaveGameCreateSceneData m_createData;

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x7DEFA4", Offset = "0x7DEFA4", VA = "0x7DEFA4")]
	public bool GetHasCreateData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x7DEFB4", Offset = "0x7DEFB4", VA = "0x7DEFB4", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x7DF070", Offset = "0x7DF070", VA = "0x7DF070")]
	public void CheckSceneData()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x7DF180", Offset = "0x7DF180", VA = "0x7DF180", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x7DF388", Offset = "0x7DF388", VA = "0x7DF388")]
	private void OnSpinUp()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x7DF3EC", Offset = "0x7DF3EC", VA = "0x7DF3EC")]
	public LevelSelectIcon()
	{
	}
}
[Token(Token = "0x2000040")]
public class LevelSelectIconControl : MonoBehaviour
{
	[Token(Token = "0x6000219")]
	[Address(RVA = "0x7DF454", Offset = "0x7DF454", VA = "0x7DF454")]
	private void Start()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x7DF518", Offset = "0x7DF518", VA = "0x7DF518")]
	public LevelSelectIconControl()
	{
	}
}
[Token(Token = "0x2000041")]
public enum LevelState
{
	[Token(Token = "0x40001C4")]
	Unplayable,
	[Token(Token = "0x40001C5")]
	NewPlayable,
	[Token(Token = "0x40001C6")]
	KineticInProgress,
	[Token(Token = "0x40001C7")]
	CreateInProgress,
	[Token(Token = "0x40001C8")]
	Complete,
	[Token(Token = "0x40001C9")]
	NewGamePortal,
	[Token(Token = "0x40001CA")]
	LastLevel
}
[Token(Token = "0x2000042")]
public class LevelSelectTrigger : MonoBehaviour
{
	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneBundle m_sceneBundle;

	[Token(Token = "0x40001CC")]
	private const float kFirstTimeKineticLoadDelay = 5f;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_newGameTrigger;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform m_kineticTrigger;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform m_createTrigger;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleBundleInstanceMonobehaviour m_kineticTriggerFX;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleBundleInstanceMonobehaviour m_createTriggerFX;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Transform> m_triggers;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject m_kineticGlobe;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject m_createGlobe;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject m_createAnimal;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ParticleSystem[] m_globeSwapParticles;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent m_OnShowLevelCompleteFX;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Material> m_kineticGlobeMaterials;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Material> m_createGlobeMaterials;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Material[] m_createAnimalMaterials;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private TerrariumShellDissolveControl m_shellControl;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private LevelSelectController m_levelSelectController;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private LevelState m_levelState;

	[Token(Token = "0x40001DE")]
	private const string kBundleErrorText = " Scene name not valid.";

	[Token(Token = "0x40001DF")]
	private const string kKineticTriggerName = "Scribble_Vortex_KINETIC";

	[Token(Token = "0x40001E0")]
	private const string kCreateTriggerName = "Scribble_Vortex_CREATE";

	[Token(Token = "0x40001E1")]
	private const string kKineticTransitionSound = "Level_Select_Morph_Kinetic";

	[Token(Token = "0x40001E2")]
	private const string kCreateTransitionSound = "Level_Select_Morph_Create";

	[Token(Token = "0x40001E3")]
	private const float kKineticTriggerDefaultPositionX = -10f;

	[Token(Token = "0x40001E4")]
	private const float kTransitionTime = 1.5f;

	[Token(Token = "0x40001E5")]
	private const string kDissolvePropertyName = "_Transition";

	[Token(Token = "0x40001E6")]
	private const string kEmissivePropertyName = "_Emissive_Min";

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int m_dissolvePropId;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int m_emissivePropId;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float m_matLerpTime;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float m_animalMatLerpTime;

	[Token(Token = "0x40001EB")]
	private const float m_animalLerpDelay = 1f;

	[Token(Token = "0x40001EC")]
	private const float m_animalMatLerpSpeed = 0.25f;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float m_currentLerpValue;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector2 m_kineticGlobeMaterialLerpValues;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool m_isMatLerping;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	private bool m_isAnimalMatLerping;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	private bool m_globeIsSetToKinetic;

	[Token(Token = "0x40001F2")]
	private const float kEmissiveSpikeMax = 1.5f;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private AnimationCurve m_emissiveSpikeCurve;

	[Token(Token = "0x17000040")]
	public bool NotStarted
	{
		[Token(Token = "0x600021B")]
		[Address(RVA = "0x7DE56C", Offset = "0x7DE56C", VA = "0x7DE56C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x7DF520", Offset = "0x7DF520", VA = "0x7DF520")]
	private void SetMaterialProperties(float time, bool setAnimalMat = true)
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x7DF77C", Offset = "0x7DF77C", VA = "0x7DF77C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x7DF98C", Offset = "0x7DF98C", VA = "0x7DF98C")]
	private void CacheGlobeMaterials(GameObject globe, List<Material> mats)
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x7DFAA4", Offset = "0x7DFAA4", VA = "0x7DFAA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x7DE150", Offset = "0x7DE150", VA = "0x7DE150")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x7DEC74", Offset = "0x7DEC74", VA = "0x7DEC74")]
	public void ShowLevelCompleteFX()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x7DE77C", Offset = "0x7DE77C", VA = "0x7DE77C")]
	public void SetTriggerState()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x7DF8E4", Offset = "0x7DF8E4", VA = "0x7DF8E4")]
	private void SetGlobeActive(GameObject globe, bool active)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x7DFDD8", Offset = "0x7DFDD8", VA = "0x7DFDD8")]
	private void PlayGlobeSwapFX()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x7DFED4", Offset = "0x7DFED4", VA = "0x7DFED4")]
	public void SetKineticGlobe()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x7DFFF8", Offset = "0x7DFFF8", VA = "0x7DFFF8")]
	public void SetCreateGlobe()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x7E011C", Offset = "0x7E011C", VA = "0x7E011C")]
	private void InitKineticGlobe()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x7E014C", Offset = "0x7E014C", VA = "0x7E014C")]
	private void InitCreateGlobe()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x7DE460", Offset = "0x7DE460", VA = "0x7DE460")]
	public void SetNewPlayable()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x7DE36C", Offset = "0x7DE36C", VA = "0x7DE36C")]
	public void SetLastLevel()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x7E0178", Offset = "0x7E0178", VA = "0x7E0178")]
	private void SetCreateAnimal(bool state)
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x7E0280", Offset = "0x7E0280", VA = "0x7E0280")]
	private void StartAnimalMatLerp()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x7DFC70", Offset = "0x7DFC70", VA = "0x7DFC70")]
	public void SetLevelState(LevelState levelState)
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x7E028C", Offset = "0x7E028C", VA = "0x7E028C")]
	public void LoadScene(string scene)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x7DE654", Offset = "0x7DE654", VA = "0x7DE654")]
	public void HideTriggers()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x7E03D8", Offset = "0x7E03D8", VA = "0x7E03D8")]
	private void PlayKineticModeCallBack()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x7E0404", Offset = "0x7E0404", VA = "0x7E0404")]
	public void PlayKineticMode()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x7E0538", Offset = "0x7E0538", VA = "0x7E0538")]
	private void RestoreCreateMode()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x7E061C", Offset = "0x7E061C", VA = "0x7E061C")]
	public void PlayCreateMode()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x7E0778", Offset = "0x7E0778", VA = "0x7E0778")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x7E085C", Offset = "0x7E085C", VA = "0x7E085C")]
	public LevelSelectTrigger()
	{
	}
}
[Token(Token = "0x2000043")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x74842C", Offset = "0x74842C")]
public class LunaBuildSettings : ScriptableObject
{
	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D05C", Offset = "0x74D05C")]
	public bool kUseOculusPlatformIntegration;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D094", Offset = "0x74D094")]
	public bool kResetDemoOnTimer;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float kDemoResetTime;

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x7E1A5C", Offset = "0x7E1A5C", VA = "0x7E1A5C")]
	public LunaBuildSettings()
	{
	}
}
[Token(Token = "0x2000044")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748468", Offset = "0x748468")]
public class LunaBuildSettingsCollection : ScriptableObject
{
	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LunaBuildSettings m_defaultBuildSettings;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LunaBuildSettings m_oculusStoreBuildSettings;

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x7E1A6C", Offset = "0x7E1A6C", VA = "0x7E1A6C")]
	public LunaBuildSettings GetBuildSettings()
	{
		return null;
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x7E1A74", Offset = "0x7E1A74", VA = "0x7E1A74")]
	public LunaBuildSettingsCollection()
	{
	}
}
[Serializable]
[Token(Token = "0x2000045")]
public class LunaSaveGameCreateSceneData
{
	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_sceneName;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_dateLastModified;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_levelComplete;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LunaSaveGameData.SavedGrowableInstance[] m_growableInstances;

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x804964", Offset = "0x804964", VA = "0x804964")]
	public DateTime GetDateLastModified()
	{
		return default(DateTime);
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x804A08", Offset = "0x804A08", VA = "0x804A08")]
	public LunaSaveGameCreateSceneData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000046")]
public class LunaSaveGameData
{
	[Serializable]
	[Token(Token = "0x200044A")]
	public class SavedGrowableInstance
	{
		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3Serial m_localPosition;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3Serial m_localScale;

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public QuaternionSerial m_localRotation;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3Serial m_ikTargetLocalPosition;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int m_zone;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float m_colorIndex;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_hasUserDefinedColor;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool m_hasIkTarget;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_growableType;

		[Token(Token = "0x60022B1")]
		[Address(RVA = "0x804A18", Offset = "0x804A18", VA = "0x804A18")]
		public SavedGrowableInstance()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200044B")]
	public class SavedZoneState
	{
		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_state;

		[Token(Token = "0x60022B2")]
		[Address(RVA = "0x804A20", Offset = "0x804A20", VA = "0x804A20")]
		public SavedZoneState()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200044C")]
	public class SavedOptions
	{
		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_masterVolume;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_musicVolume;

		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_sfxVolume;

		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_narratorVolume;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool m_subtitles;

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int m_language;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_brightness;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool m_vibration;

		[Token(Token = "0x60022B3")]
		[Address(RVA = "0x801898", Offset = "0x801898", VA = "0x801898")]
		public SavedOptions()
		{
		}
	}

	[Token(Token = "0x40001FD")]
	public const int kLatestFileVersion = 9;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int m_fileVersion;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SavedOptions m_options;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LunaSaveGameKineticSceneData[] m_kineticSceneDatas;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LunaSaveGameCreateSceneData[] m_createSceneDatas;

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x804A10", Offset = "0x804A10", VA = "0x804A10")]
	public LunaSaveGameData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000047")]
public class LunaSaveGameKineticSceneData
{
	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_sceneName;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] m_solvedPods;

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x804A28", Offset = "0x804A28", VA = "0x804A28")]
	public LunaSaveGameKineticSceneData()
	{
	}
}
[Token(Token = "0x2000048")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7484A4", Offset = "0x7484A4")]
public class LunaUICanvasTransform : ScriptableObject
{
	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_cameraOffset;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 m_scale;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Quaternion m_rotation;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_menuBlur;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 m_subtitleOffset;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 m_subtitleScale;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Quaternion m_subtitleRotation;

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x8080C0", Offset = "0x8080C0", VA = "0x8080C0")]
	public LunaUICanvasTransform()
	{
	}
}
[Token(Token = "0x2000049")]
public class MainCamera : MonoBehaviour
{
	[Token(Token = "0x600023E")]
	[Address(RVA = "0x8080D4", Offset = "0x8080D4", VA = "0x8080D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x808188", Offset = "0x808188", VA = "0x808188")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x808290", Offset = "0x808290", VA = "0x808290")]
	public MainCamera()
	{
	}
}
[Token(Token = "0x200004A")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7484B4", Offset = "0x7484B4")]
public class MaskCamera : MonoBehaviour
{
	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera m_maskCamera;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_oldWidth;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_oldHeight;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material[] m_maskedMaterials;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Shader m_cameraShader;

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x808298", Offset = "0x808298", VA = "0x808298")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x808450", Offset = "0x808450", VA = "0x808450")]
	private void Start()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x8083AC", Offset = "0x8083AC", VA = "0x8083AC")]
	private void CreateRenderTexture()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x8084D4", Offset = "0x8084D4", VA = "0x8084D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x8084F8", Offset = "0x8084F8", VA = "0x8084F8")]
	private void GetMaskedMaterials()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x8086D4", Offset = "0x8086D4", VA = "0x8086D4")]
	private void UpdateRenderTextureSize()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x80874C", Offset = "0x80874C", VA = "0x80874C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x80882C", Offset = "0x80882C", VA = "0x80882C")]
	public MaskCamera()
	{
	}
}
[Token(Token = "0x200004B")]
public class Moon : MonoBehaviour
{
	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int m_touchCounter;

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x80BA68", Offset = "0x80BA68", VA = "0x80BA68")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x80BAFC", Offset = "0x80BAFC", VA = "0x80BAFC")]
	public Moon()
	{
	}
}
[Token(Token = "0x200004C")]
public class ParticleBundleInstanceMonobehaviour : MonoBehaviour
{
	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleBundle m_particleBundle;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleBundleInstance m_particleBundleInstance;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_emitOnEnable;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool m_emitOnDisable;

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x81042C", Offset = "0x81042C", VA = "0x81042C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x8105C8", Offset = "0x8105C8", VA = "0x8105C8")]
	public void SetPosition(Vector3 position)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x8105E0", Offset = "0x8105E0", VA = "0x8105E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x810608", Offset = "0x810608", VA = "0x810608")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x8105F8", Offset = "0x8105F8", VA = "0x8105F8")]
	public void Emit()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x810620", Offset = "0x810620", VA = "0x810620")]
	public ParticleBundleInstanceMonobehaviour()
	{
	}
}
[Token(Token = "0x200004D")]
public class PlaceablePalette : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000215")]
	private const string STAMP_OFFSET_NAME = "StampOffset";

	[Token(Token = "0x4000216")]
	private const float PING_INTERVAL = 5f;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem m_scribbleVortex;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public bool m_canBeGrabbed;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_grabbedPosOffset;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Quaternion m_grabbedRotOffset;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Collider m_grabCollider;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly Vector3 m_topLeftCorner;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private readonly Vector3 m_topLeftCornerVR;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly Quaternion m_gamepadVRRotation;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform m_stampOffsetTransform;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool m_doTutorialPings;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float m_timeSinceLastPing;

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x923C1C", Offset = "0x923C1C", VA = "0x923C1C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x923CB4", Offset = "0x923CB4", VA = "0x923CB4", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x923E74", Offset = "0x923E74", VA = "0x923E74", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x923F2C", Offset = "0x923F2C", VA = "0x923F2C", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x9241CC", Offset = "0x9241CC", VA = "0x9241CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x9243D4", Offset = "0x9243D4", VA = "0x9243D4")]
	public void StartPings()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x923E6C", Offset = "0x923E6C", VA = "0x923E6C")]
	public void StopPings()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x924404", Offset = "0x924404", VA = "0x924404")]
	public PlaceablePalette()
	{
	}
}
[Token(Token = "0x200004E")]
public class PlaceableStamp : MonoBehaviour
{
	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StampBarnSimple m_stampBarn;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material m_material;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material m_shadowMaterial;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VRInput.CursorIndex m_cursorIndex;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 m_dropOffset;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_layerMask;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float kScaleFactor;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float kDropHeight;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74D0DC", Offset = "0x74D0DC")]
	private bool <OnPlantableArea>k__BackingField;

	[Token(Token = "0x17000041")]
	public bool OnPlantableArea
	{
		[Token(Token = "0x600025A")]
		[Address(RVA = "0x924538", Offset = "0x924538", VA = "0x924538")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756B60", Offset = "0x756B60")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000259")]
		[Address(RVA = "0x92452C", Offset = "0x92452C", VA = "0x92452C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756B50", Offset = "0x756B50")]
		private set
		{
		}
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x924540", Offset = "0x924540", VA = "0x924540")]
	private Material IconMaterial(GrowableType growableType)
	{
		return null;
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x9245D8", Offset = "0x9245D8", VA = "0x9245D8")]
	private Material ShadowMaterial(GrowableType growableType)
	{
		return null;
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x924670", Offset = "0x924670", VA = "0x924670")]
	private void Awake()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x9247C8", Offset = "0x9247C8", VA = "0x9247C8")]
	private void Start()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x924854", Offset = "0x924854", VA = "0x924854")]
	private bool GetHitFromWorldPos(int cursorIdx, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x924A34", Offset = "0x924A34", VA = "0x924A34")]
	private bool GetHitFromViewportPos(out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x924AE8", Offset = "0x924AE8", VA = "0x924AE8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x9255C8", Offset = "0x9255C8", VA = "0x9255C8")]
	public static int GetZoneFromRaycast(RaycastHit hitInfo, Color[] colorPalette)
	{
		return default(int);
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x9257E0", Offset = "0x9257E0", VA = "0x9257E0")]
	private static Color QuantizeColor(Color finalColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x925944", Offset = "0x925944", VA = "0x925944")]
	public PlaceableStamp()
	{
	}
}
[Token(Token = "0x200004F")]
public class PulseEmitter : MonoBehaviour
{
	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kPulseRate;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float kPulseSpeed;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float kMinPulseSpeed;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float kParticleSize;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float kParticleLifetime;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float kConeStartAngle;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float kConeEndAngle;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float kStartRadius;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int kNumParticlesInPulse;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color m_color;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem m_emitter;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_pulseTimer;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_pulseSpeed;

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x93835C", Offset = "0x93835C", VA = "0x93835C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x938400", Offset = "0x938400", VA = "0x938400")]
	private void Update()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x9386E4", Offset = "0x9386E4", VA = "0x9386E4")]
	public void SetPulseSpeed(float pulseSpeed)
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x938458", Offset = "0x938458", VA = "0x938458")]
	private void Pulse()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x9386EC", Offset = "0x9386EC", VA = "0x9386EC")]
	public PulseEmitter()
	{
	}
}
[Token(Token = "0x2000050")]
public class RadialEmitter : MonoBehaviour
{
	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_numArms;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_speed;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem m_particleSystem;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem m_parentSystem;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_timer;

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x939214", Offset = "0x939214", VA = "0x939214")]
	private void Start()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x9392A4", Offset = "0x9392A4", VA = "0x9392A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x9393CC", Offset = "0x9393CC", VA = "0x9393CC")]
	private void Emit()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x9396F0", Offset = "0x9396F0", VA = "0x9396F0")]
	public RadialEmitter()
	{
	}
}
[Token(Token = "0x2000051")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x748528", Offset = "0x748528")]
public class RampFogNode : MonoBehaviour
{
	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture m_fogColorTex;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_fogStartDistance;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_fogEndDistance;

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x939AE4", Offset = "0x939AE4", VA = "0x939AE4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x939B94", Offset = "0x939B94", VA = "0x939B94")]
	public RampFogNode()
	{
	}
}
[Token(Token = "0x2000052")]
public class RockPile : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] m_rockPrefabs;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int m_numTotalRocks;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool m_hideChildrenWhenEmpty;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool m_childrenHidden;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject[] m_rocks;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string m_rockGrabSound;

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x93B3F8", Offset = "0x93B3F8", VA = "0x93B3F8")]
	private void ShowChildren(bool show)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x93B4A8", Offset = "0x93B4A8", VA = "0x93B4A8")]
	private GameObject GetDisabledRock()
	{
		return null;
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x93B578", Offset = "0x93B578", VA = "0x93B578", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x93B7BC", Offset = "0x93B7BC", VA = "0x93B7BC", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x93B860", Offset = "0x93B860", VA = "0x93B860", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x93BA48", Offset = "0x93BA48", VA = "0x93BA48")]
	public RockPile()
	{
	}
}
[Token(Token = "0x2000053")]
[ExecuteInEditMode]
public class SceneFog : MonoBehaviour
{
	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D0EC", Offset = "0x74D0EC")]
	public bool m_isRecordingFromLightingWindow;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D124", Offset = "0x74D124")]
	public bool fog;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color fogColor;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fogDensity;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fogEndDistance;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public FogMode fogMode;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float fogStartDistance;

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x93CD14", Offset = "0x93CD14", VA = "0x93CD14")]
	public void CopyIntoRenderSettings()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x93CD78", Offset = "0x93CD78", VA = "0x93CD78")]
	public void CopyFromRenderSettings()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x93CDE4", Offset = "0x93CDE4", VA = "0x93CDE4")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x93CDE8", Offset = "0x93CDE8", VA = "0x93CDE8")]
	private void Update()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x93CDF8", Offset = "0x93CDF8", VA = "0x93CDF8")]
	public SceneFog()
	{
	}
}
[Token(Token = "0x2000054")]
[ExecuteInEditMode]
public class SceneLighting : MonoBehaviour
{
	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D15C", Offset = "0x74D15C")]
	public bool m_isRecordingFromLightingWindow;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool m_ignoreFogParams;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D194", Offset = "0x74D194")]
	public Color ambientEquatorColor;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color ambientGroundColor;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ambientIntensity;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color ambientLight;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SphericalHarmonicsL2 ambientProbe;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public Color ambientSkyColor;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Cubemap customReflection;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public DefaultReflectionMode defaultReflectionMode;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float flareFadeSpeed;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float flareStrength;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public bool fog;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Color fogColor;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public float fogDensity;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public float fogEndDistance;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public FogMode fogMode;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float fogStartDistance;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public float haloStrength;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public float reflectionIntensity;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Material skybox;

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x93CE00", Offset = "0x93CE00", VA = "0x93CE00")]
	public void CopyIntoRenderSettings()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x93CF34", Offset = "0x93CF34", VA = "0x93CF34")]
	public void CopyFromRenderSettings()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x93D06C", Offset = "0x93D06C", VA = "0x93D06C")]
	private void Reset()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x93D070", Offset = "0x93D070", VA = "0x93D070")]
	private void Update()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x93D080", Offset = "0x93D080", VA = "0x93D080")]
	public SceneLighting()
	{
	}
}
[Token(Token = "0x2000055")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748594", Offset = "0x748594")]
public class ShaderVariantCollectionGroup : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x200044D")]
	public class ShaderVariantsInScene
	{
		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_sceneName;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShaderVariantCollection m_shaderVariants;

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0x8B377C", Offset = "0x8B377C", VA = "0x8B377C")]
		public ShaderVariantsInScene()
		{
		}
	}

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShaderVariantsInScene[] m_shaderVariantsInScenes;

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x8B36B8", Offset = "0x8B36B8", VA = "0x8B36B8")]
	public ShaderVariantCollection GetShaderVariantsForScene(UnityEngine.SceneManagement.Scene scene)
	{
		return null;
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x8B3774", Offset = "0x8B3774", VA = "0x8B3774")]
	public ShaderVariantCollectionGroup()
	{
	}
}
[Token(Token = "0x2000056")]
public class SoundEmitter : MonoBehaviour
{
	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string kStartEventName;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string kStopEventName;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private uint m_startEventId;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private uint m_stopEventId;

	[Token(Token = "0x6000282")]
	[Address(RVA = "0x8B65D0", Offset = "0x8B65D0", VA = "0x8B65D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x8B6698", Offset = "0x8B6698", VA = "0x8B6698")]
	private void Start()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x8B678C", Offset = "0x8B678C", VA = "0x8B678C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x8B6880", Offset = "0x8B6880", VA = "0x8B6880")]
	public SoundEmitter()
	{
	}
}
[Token(Token = "0x2000057")]
public class SprinkleMovementController : MonoBehaviour
{
	[Token(Token = "0x6000286")]
	[Address(RVA = "0x8B70A0", Offset = "0x8B70A0", VA = "0x8B70A0")]
	public SprinkleMovementController()
	{
	}
}
[Token(Token = "0x2000058")]
public class SprinkleRotate : MonoBehaviour
{
	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_iterator;

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x8B70A8", Offset = "0x8B70A8", VA = "0x8B70A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x8B7124", Offset = "0x8B7124", VA = "0x8B7124")]
	public SprinkleRotate()
	{
	}
}
[Token(Token = "0x2000059")]
public class SprinkleSin : MonoBehaviour
{
	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float amplitudeY;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float omegaY;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float index;

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x8B73B4", Offset = "0x8B73B4", VA = "0x8B73B4")]
	public void Update()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x8B74A4", Offset = "0x8B74A4", VA = "0x8B74A4")]
	public SprinkleSin()
	{
	}
}
[Token(Token = "0x200005A")]
public class StarLine : MonoBehaviour
{
	[Token(Token = "0x400026C")]
	private const float kEmitRateScaleMult = 1f;

	[Token(Token = "0x400026D")]
	private const float TOUCH_COOLDOWN = 0.1f;

	[Token(Token = "0x400026E")]
	private const float SWOLLEN_LINE_WIDTH = 0.3f;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly Vector3 kVectorZero;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem m_particleSystem;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem m_lineVibration;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform[] m_endpoints;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StarPuzzleStar[] m_endpointStars;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_touchCooldownRemaining;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int[] m_lastTouchSide;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float m_initialParticleSize;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_initialLineWidth;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int m_pluckNoteIndex;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool m_hideLocked;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_delayedHideRemainingTime;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool m_isVibrating;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	public bool m_lockParticleSize;

	[Token(Token = "0x17000042")]
	private StarPuzzleSettings StarPuzzleSettings
	{
		[Token(Token = "0x600028B")]
		[Address(RVA = "0x8B88B0", Offset = "0x8B88B0", VA = "0x8B88B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000043")]
	private Constellation Constellation
	{
		[Token(Token = "0x600028C")]
		[Address(RVA = "0x8B88FC", Offset = "0x8B88FC", VA = "0x8B88FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000044")]
	private float VibrationMagnitude
	{
		[Token(Token = "0x600028D")]
		[Address(RVA = "0x8B8948", Offset = "0x8B8948", VA = "0x8B8948")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000045")]
	private float AlignedDensity
	{
		[Token(Token = "0x600028E")]
		[Address(RVA = "0x8B89D8", Offset = "0x8B89D8", VA = "0x8B89D8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000046")]
	private float UnalignedDensity
	{
		[Token(Token = "0x600028F")]
		[Address(RVA = "0x8B8A68", Offset = "0x8B8A68", VA = "0x8B8A68")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000047")]
	public float GlowingParticleSize
	{
		[Token(Token = "0x6000290")]
		[Address(RVA = "0x8B8AF8", Offset = "0x8B8AF8", VA = "0x8B8AF8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x8B8B88", Offset = "0x8B8B88", VA = "0x8B8B88")]
	public void Init(StarPuzzleStar star0, StarPuzzleStar star1, int lineIndex)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x8B8C70", Offset = "0x8B8C70", VA = "0x8B8C70")]
	public void Init(Transform t0, Transform t1, int lineIndex)
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x8B8F88", Offset = "0x8B8F88", VA = "0x8B8F88")]
	public void LockHideFunction()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x8B8F94", Offset = "0x8B8F94", VA = "0x8B8F94")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x8B902C", Offset = "0x8B902C", VA = "0x8B902C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x8B96E8", Offset = "0x8B96E8", VA = "0x8B96E8")]
	private bool PuzzleIsRotating()
	{
		return default(bool);
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x8B9510", Offset = "0x8B9510", VA = "0x8B9510")]
	private void ApplyLineSwelling()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x8B96CC", Offset = "0x8B96CC", VA = "0x8B96CC")]
	public void UnlockParticleSize()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x8B8DC8", Offset = "0x8B8DC8", VA = "0x8B8DC8")]
	public void SetParticlesSize(float newSize, bool lockParticleSize = false)
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x8BA050", Offset = "0x8BA050", VA = "0x8BA050")]
	public float GetParticlesSize()
	{
		return default(float);
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x8B8E48", Offset = "0x8B8E48", VA = "0x8B8E48")]
	private void SetLineWidth(float newWidth)
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x8B9790", Offset = "0x8B9790", VA = "0x8B9790")]
	public void CheckForCursor()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x8BA0B0", Offset = "0x8BA0B0", VA = "0x8BA0B0")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x8B96D4", Offset = "0x8B96D4", VA = "0x8B96D4")]
	public void SetVibrating(bool isVibrating)
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x8BA1FC", Offset = "0x8BA1FC", VA = "0x8BA1FC")]
	public void Vibrate()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x8B8ED4", Offset = "0x8B8ED4", VA = "0x8B8ED4")]
	private void SetVibrationMagnitude(float newMagnitude)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x8BA23C", Offset = "0x8BA23C", VA = "0x8BA23C")]
	public bool IsAligned()
	{
		return default(bool);
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x8BA2A8", Offset = "0x8BA2A8", VA = "0x8BA2A8")]
	public void Show()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x8BA2F4", Offset = "0x8BA2F4", VA = "0x8BA2F4")]
	public void Hide()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x8BA368", Offset = "0x8BA368", VA = "0x8BA368")]
	public void StartDelayedHide()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x8BA3EC", Offset = "0x8BA3EC", VA = "0x8BA3EC")]
	public void SetColor(Color color)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x8BA4F8", Offset = "0x8BA4F8", VA = "0x8BA4F8")]
	public Color GetColor()
	{
		return default(Color);
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x8BA574", Offset = "0x8BA574", VA = "0x8BA574")]
	public StarLine()
	{
	}
}
[Token(Token = "0x200005B")]
public class StarLineRipple : MonoBehaviour
{
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int m_currentPulseNoteIndex;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StarPuzzleInstance m_starPuzzleInstance;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem m_particleSystem;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_originStarIndex;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int[] m_lineStars;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_speedMultiplier;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_secondsToStop;

	[Token(Token = "0x17000048")]
	public bool Stopped
	{
		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x8BA61C", Offset = "0x8BA61C", VA = "0x8BA61C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x8BA660", Offset = "0x8BA660", VA = "0x8BA660")]
	public void Initialize(int startIndex, int targetIndex, StarPuzzleInstance starPuzzleInstance)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x8BAB5C", Offset = "0x8BAB5C", VA = "0x8BAB5C")]
	public void SetSpeedMultiplier(float speedMultiplier)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x8BAB64", Offset = "0x8BAB64", VA = "0x8BAB64")]
	public void InitializeNoteScheme()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x8BABCC", Offset = "0x8BABCC", VA = "0x8BABCC")]
	public void SetStartLocation(float t)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x8BACFC", Offset = "0x8BACFC", VA = "0x8BACFC")]
	public void SetColor(Color newColor)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x8BA860", Offset = "0x8BA860", VA = "0x8BA860")]
	private Vector3 GetStarPosition(int starIndex)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x8BA944", Offset = "0x8BA944", VA = "0x8BA944")]
	private StarPuzzleStar GetStar(int starIndex)
	{
		return null;
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x8BADD4", Offset = "0x8BADD4", VA = "0x8BADD4")]
	public void Update()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x8BAD94", Offset = "0x8BAD94", VA = "0x8BAD94")]
	private bool IsValidIndex(int starIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x8BB158", Offset = "0x8BB158", VA = "0x8BB158")]
	private void MoveToNextStar()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x8BA9B0", Offset = "0x8BA9B0", VA = "0x8BA9B0")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x8BB120", Offset = "0x8BB120", VA = "0x8BB120")]
	public void InitDelayedStop()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x8BB330", Offset = "0x8BB330", VA = "0x8BB330")]
	public StarLineRipple()
	{
	}
}
[Token(Token = "0x200005C")]
public class StarPattern : ScriptableObject
{
	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Constellation.Edge[] edges;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Constellation.Particle[] particles;

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x8BB33C", Offset = "0x8BB33C", VA = "0x8BB33C")]
	public StarPattern()
	{
	}
}
[Token(Token = "0x200005D")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7485A4", Offset = "0x7485A4")]
public class StarPuzzle : ScriptableObject
{
	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D1CC", Offset = "0x74D1CC")]
	public StarPattern patternSolved;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StarPattern patternSolved2D;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public StarPattern patternUnsolved;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D204", Offset = "0x74D204")]
	public string m_iconRevealSound;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string m_puzzleFadeoutSound;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string m_starAlignSound;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string m_starTouchSound;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string m_starTrailsStartSound;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string m_starTrailsStopSound;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D23C", Offset = "0x74D23C")]
	public string m_starPluckSoundBase;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int m_starPluckSoundCount;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D274", Offset = "0x74D274")]
	public string m_starPulseSoundBase;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int m_starPulseSoundCount;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D2AC", Offset = "0x74D2AC")]
	public bool m_overrideDefaultColor;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Color m_color;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Color m_socketColor;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D2E4", Offset = "0x74D2E4")]
	public GameObject m_iconMesh;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Material m_iconMaterial;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Vector3 m_iconMeshPos;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public Vector3 m_iconMeshScale;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Quaternion m_iconMeshRot;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D31C", Offset = "0x74D31C")]
	public bool m_disableAutoScale;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
	public bool m_disableAutoCenter;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D354", Offset = "0x74D354")]
	public bool autoScramble;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float scrambleDistMin;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float scrambleDistMax;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74D38C", Offset = "0x74D38C")]
	public float scramblePercent;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D3A4", Offset = "0x74D3A4")]
	public bool m_requireRotation;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float m_targetRotation;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D3DC", Offset = "0x74D3DC")]
	public bool m_hideUnselectedLines;

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x8BB344", Offset = "0x8BB344", VA = "0x8BB344")]
	public StarPattern GetSolvedPattern()
	{
		return null;
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x8BB3FC", Offset = "0x8BB3FC", VA = "0x8BB3FC")]
	public StarPuzzle()
	{
	}
}
[Token(Token = "0x200005E")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7485B4", Offset = "0x7485B4")]
public class StarPuzzleSettings : ScriptableObject
{
	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D414", Offset = "0x74D414")]
	public float kStarHitboxRadius;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float kMinDistToComplete;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float kStarTickleMaxDist;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float kGamepadDepthLerpSpeed;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float kTargetAttractDistMax;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float kTargetRepulseDistMax;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float kTargetAttractSpeed;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float kTargetRepulseSpeed;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float kDoubleClickTime;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float kPreselectionTimeout;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float kCursorLerp;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float kCursorFadeSpeed;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float kVRScale;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 kVROffset;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve m_iconFadeCurve;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D44C", Offset = "0x74D44C")]
	public float kSolvedExitDelay;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74D484", Offset = "0x74D484")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D484", Offset = "0x74D484")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D484", Offset = "0x74D484")]
	public float kUnalignedStarSizeVR;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float kAlignedStarSizeVR;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float kStarTargetSizeVR;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D4F4", Offset = "0x74D4F4")]
	public float kUnalignedStarSize2D;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float kAlignedStarSize2D;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float kStarTargetSize2D;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D52C", Offset = "0x74D52C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D52C", Offset = "0x74D52C")]
	public float k2DGamepadStarTravelSpeed;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float kVRGamepadStarTravelSpeed;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74D58C", Offset = "0x74D58C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D58C", Offset = "0x74D58C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D58C", Offset = "0x74D58C")]
	public float kRippleTravelSpeed;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float kRippleParticleSizeVR;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float kRippleParticleSize2D;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74D5FC", Offset = "0x74D5FC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D5FC", Offset = "0x74D5FC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D5FC", Offset = "0x74D5FC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D5FC", Offset = "0x74D5FC")]
	public float kLineUnalignedDensityVR;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D690", Offset = "0x74D690")]
	public float kLineAlignedDensityVR;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D6C8", Offset = "0x74D6C8")]
	public float kLineGlowingParticleSizeVR;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D700", Offset = "0x74D700")]
	public float kTutorialGlowSizeMultiplierVR;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D738", Offset = "0x74D738")]
	public float kLineVibrationMagnitudeVR;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D770", Offset = "0x74D770")]
	public float kLineUnalignedDensity2D;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float kLineAlignedDensity2D;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float kLineGlowingParticleSize2D;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float kTutorialGlowSizeMultiplier2D;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float kLineVibrationMagnitude2D;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74D7A8", Offset = "0x74D7A8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D7A8", Offset = "0x74D7A8")]
	public float kVRIconScale;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public Vector3 kVRIconOffset;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74D7F4", Offset = "0x74D7F4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D7F4", Offset = "0x74D7F4")]
	public Vector2 kIconViewportCenter;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float kIconViewportBoundsMax;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float kStarsViewportBoundsMax;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float kStar2DHitboxRadius;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74D840", Offset = "0x74D840")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D840", Offset = "0x74D840")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D840", Offset = "0x74D840")]
	public float kSolutionThreshold;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float kTurnRingMinFadeDist;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float kTurnRingMinRotFromSolved;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float kTurnRing2DRotSpeed;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D8B0", Offset = "0x74D8B0")]
	public float kSwipeSpeedDuration;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float kMaxSwipeSpeed;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D8E8", Offset = "0x74D8E8")]
	public float kMaxSolvedTurnSpeed;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D920", Offset = "0x74D920")]
	public AnimationCurve kSwipeSpeedOverTime;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float kTurnRingParamAnimSpeed;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D958", Offset = "0x74D958")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74D958", Offset = "0x74D958")]
	public float kTurnRingParamLooksFullAt;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D9AC", Offset = "0x74D9AC")]
	public float kTimeToSolve;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74D9E4", Offset = "0x74D9E4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D9E4", Offset = "0x74D9E4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74D9E4", Offset = "0x74D9E4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74D9E4", Offset = "0x74D9E4")]
	public float kSwanTutorialDuration;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DA78", Offset = "0x74DA78")]
	public float kTimeToPlaySwanTutorialSound;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DAB0", Offset = "0x74DAB0")]
	public string kSwanTutorialSound;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74DAE8", Offset = "0x74DAE8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DAE8", Offset = "0x74DAE8")]
	public string kBearTutorialSound;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DB48", Offset = "0x74DB48")]
	public float kBearTutorialDuration;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74DB80", Offset = "0x74DB80")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DB80", Offset = "0x74DB80")]
	public string kFoxTutorialSound;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DBE0", Offset = "0x74DBE0")]
	public float kFoxTutorialDuration;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74DC18", Offset = "0x74DC18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74DC18", Offset = "0x74DC18")]
	public StarPuzzleStar m_starPrefab;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public StarPuzzleStarTarget m_starTargetPrefab;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public StarLine m_starLinePrefab;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject m_selectedEmitterPrefab;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public StarLineRipple m_starLineRipplePrefab;

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x8C159C", Offset = "0x8C159C", VA = "0x8C159C")]
	public StarPuzzleSettings()
	{
	}
}
[Token(Token = "0x200005F")]
public class StarPuzzleStar : MonoBehaviour
{
	[Token(Token = "0x40002E6")]
	public const float kStarTickleMaxDist = 0.5f;

	[Token(Token = "0x40002E7")]
	private const float CURSOR_HIGHLIGHT_DISTANCE = 3f;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_unsolvedEmitterPrefab;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_solvedEmitterPrefab;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem m_moonRaysTouchedParticles;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private StarPuzzle m_starPuzzle;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private StarPuzzleInstance m_starPuzzleInstance;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private StarPuzzleStarTarget m_starTarget;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject m_unsolvedEmitter;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject m_solvedEmitter;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform m_transform;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Constellation.Particle m_particle;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Hotspot m_hotspot;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool[] m_wasTickled;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_isAligned;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int m_indexInStarPuzzle;

	[Token(Token = "0x17000049")]
	public StarPuzzle StarPuzzle
	{
		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x8C1908", Offset = "0x8C1908", VA = "0x8C1908")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004A")]
	public StarPuzzleInstance StarPuzzleInstance
	{
		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x8C1910", Offset = "0x8C1910", VA = "0x8C1910")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004B")]
	public int IndexInStarPuzzle
	{
		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x8C1918", Offset = "0x8C1918", VA = "0x8C1918")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700004C")]
	public StarPuzzleStarTarget StarTarget
	{
		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x8C1920", Offset = "0x8C1920", VA = "0x8C1920")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004D")]
	public bool IsAligned
	{
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x8C1928", Offset = "0x8C1928", VA = "0x8C1928")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004E")]
	private float UnalignedStarSize
	{
		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x8C1930", Offset = "0x8C1930", VA = "0x8C1930")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700004F")]
	private float AlignedStarSize
	{
		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x8C19C4", Offset = "0x8C19C4", VA = "0x8C19C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x8C092C", Offset = "0x8C092C", VA = "0x8C092C")]
	public bool IsCursorInFilter(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x8C1100", Offset = "0x8C1100", VA = "0x8C1100")]
	public void Init(StarPuzzleStarTarget starTarget, Constellation.Particle particle, StarPuzzle starPuzzle, StarPuzzleInstance starPuzzleInstance, int index)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x8C0E74", Offset = "0x8C0E74", VA = "0x8C0E74")]
	public void SetColor(Color color)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x8C0C64", Offset = "0x8C0C64", VA = "0x8C0C64")]
	public Color GetColor()
	{
		return default(Color);
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x8C0284", Offset = "0x8C0284", VA = "0x8C0284")]
	public void UpdateAlignment(float minDistFromTarget, bool playFX)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x8C1A58", Offset = "0x8C1A58", VA = "0x8C1A58")]
	public void SetIsAligned(bool isAligned)
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x8BF644", Offset = "0x8BF644", VA = "0x8BF644")]
	public bool IsNearTarget(float minDistFromTarget)
	{
		return default(bool);
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x8C11F0", Offset = "0x8C11F0", VA = "0x8C11F0")]
	public void UpdateTickleSound(int cursorIdx, Vector3 cursorPos)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x8C1CB8", Offset = "0x8C1CB8", VA = "0x8C1CB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x8C1DE8", Offset = "0x8C1DE8", VA = "0x8C1DE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x8C1E80", Offset = "0x8C1E80", VA = "0x8C1E80")]
	public void HighlightCursor()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x8C2034", Offset = "0x8C2034", VA = "0x8C2034")]
	public void Update()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x8C2044", Offset = "0x8C2044", VA = "0x8C2044")]
	public StarPuzzleStar()
	{
	}
}
[Token(Token = "0x2000060")]
public class StarPuzzleStarTarget : MonoBehaviour
{
	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_targetEmitter;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform m_transform;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Light m_light;

	[Token(Token = "0x17000050")]
	private Light Light
	{
		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x8C204C", Offset = "0x8C204C", VA = "0x8C204C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x8C1028", Offset = "0x8C1028", VA = "0x8C1028")]
	public void Init(Vector3 pos, float scale)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x8C1C7C", Offset = "0x8C1C7C", VA = "0x8C1C7C")]
	public void SetIsAligned(bool isAligned)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x8C2198", Offset = "0x8C2198", VA = "0x8C2198")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x8C0D9C", Offset = "0x8C0D9C", VA = "0x8C0D9C")]
	public void SetColor(Color newColor)
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x8C0BC0", Offset = "0x8C0BC0", VA = "0x8C0BC0")]
	public Color GetColor()
	{
		return default(Color);
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x8C2238", Offset = "0x8C2238", VA = "0x8C2238")]
	public StarPuzzleStarTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x2000061")]
public class StemColliders
{
	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Collider[] m_stemColliders;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Joint[] m_stemJoints;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody[] m_stemRigidbodies;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody[] m_podBodyAnchors;

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x974AC0", Offset = "0x974AC0", VA = "0x974AC0")]
	public void FindStemColliders(GameObject root)
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x974C70", Offset = "0x974C70", VA = "0x974C70")]
	public void FindStemJoints(GameObject root)
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x974E0C", Offset = "0x974E0C", VA = "0x974E0C")]
	public void FindStemRigidbodies(GameObject root)
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x975098", Offset = "0x975098", VA = "0x975098")]
	public void CheckDisableStemColliders()
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x9751A8", Offset = "0x9751A8", VA = "0x9751A8")]
	public void DisableStemJoints()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x975264", Offset = "0x975264", VA = "0x975264")]
	public void DisableStemBodies()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x975364", Offset = "0x975364", VA = "0x975364")]
	public StemColliders()
	{
	}
}
[Token(Token = "0x2000062")]
public class SwanSculpture : MonoBehaviour
{
	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x79C088", Offset = "0x79C088", VA = "0x79C088")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x756B70", Offset = "0x756B70")]
	private void AddLogic()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x79C19C", Offset = "0x79C19C", VA = "0x79C19C")]
	private void AddPodLogic(Transform endTransform)
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x79C200", Offset = "0x79C200", VA = "0x79C200")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x756BA8", Offset = "0x756BA8")]
	private void AddPhysicsElements()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x79C458", Offset = "0x79C458", VA = "0x79C458")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x756BE0", Offset = "0x756BE0")]
	private void AddLastPhysics()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x79C318", Offset = "0x79C318", VA = "0x79C318")]
	private void AddPhysicsBranch(Transform baseTransform)
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x79C570", Offset = "0x79C570", VA = "0x79C570")]
	private Rigidbody AddPhysicsJoint(Transform jointTrans, Rigidbody parentBody)
	{
		return null;
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x79C6A8", Offset = "0x79C6A8", VA = "0x79C6A8")]
	public SwanSculpture()
	{
	}
}
[Token(Token = "0x2000063")]
public class TadpoleController : MonoBehaviour
{
	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int m_lifespan;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_isDead;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float y_height;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_origPosition;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 m_targetPosition;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 m_currentPosition;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Vector3> m_movePositionCandidates;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] m_movePositions;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_currentMovePositionIndex;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int m_lastMovePositionIndex;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_movePointRadius;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float m_speed;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_timeStartedLerping;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_fXFactor;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_fZFactor;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool m_readyToMove;

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x79CE70", Offset = "0x79CE70", VA = "0x79CE70")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x79CF14", Offset = "0x79CF14", VA = "0x79CF14")]
	private bool ValidateMovePosition(int m_currentMovePositionIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x79CFD8", Offset = "0x79CFD8", VA = "0x79CFD8")]
	private Vector3 RandomizeCurrentMovePositonIndex()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x79D0AC", Offset = "0x79D0AC", VA = "0x79D0AC")]
	private void StartMoving()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x79D130", Offset = "0x79D130", VA = "0x79D130")]
	private Vector3 GetPointAlongCircumferenceAtGivenAngle(Vector3 center, float radius, float ang)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x79D1EC", Offset = "0x79D1EC", VA = "0x79D1EC")]
	private void PlotMovePoints()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x79D3E4", Offset = "0x79D3E4", VA = "0x79D3E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x79D3E8", Offset = "0x79D3E8", VA = "0x79D3E8")]
	private void MoveObject(float fFraction)
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x79D548", Offset = "0x79D548", VA = "0x79D548")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x79D66C", Offset = "0x79D66C", VA = "0x79D66C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x79D690", Offset = "0x79D690", VA = "0x79D690")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x79D720", Offset = "0x79D720", VA = "0x79D720")]
	public TadpoleController()
	{
	}
}
[Token(Token = "0x2000064")]
public class TerrariumShell : MonoBehaviour
{
	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve m_spinCurve;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_rootTrans;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_openOnStart;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator m_animator;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_isSpinning;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_spinTimer;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_spinCurveTime;

	[Token(Token = "0x4000314")]
	private const float kRotSpeed = 200f;

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x79EB70", Offset = "0x79EB70", VA = "0x79EB70")]
	public float GetSpinCurveTime()
	{
		return default(float);
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x79EB78", Offset = "0x79EB78", VA = "0x79EB78")]
	public void Spin()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x79EC10", Offset = "0x79EC10", VA = "0x79EC10")]
	public void Close()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x79ECD0", Offset = "0x79ECD0", VA = "0x79ECD0")]
	public void ForceClose()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x79ED90", Offset = "0x79ED90", VA = "0x79ED90")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x79EE08", Offset = "0x79EE08", VA = "0x79EE08")]
	private void Start()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x79EE78", Offset = "0x79EE78", VA = "0x79EE78")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x79EF54", Offset = "0x79EF54", VA = "0x79EF54")]
	public TerrariumShell()
	{
	}
}
[Token(Token = "0x2000065")]
public class UvSlice
{
	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float m_threshold;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector2 m_range;

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x79F360", Offset = "0x79F360", VA = "0x79F360")]
	public UvSlice(float x, float y)
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x79FC48", Offset = "0x79FC48", VA = "0x79FC48")]
	public void Evaluate(float dissolve)
	{
	}
}
[Token(Token = "0x2000066")]
public class VertDissolve
{
	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 position;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 uv;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool m_isDissolved;

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x832918", Offset = "0x832918", VA = "0x832918")]
	public VertDissolve(Vector3 pos, Vector2 _uv)
	{
	}
}
[Token(Token = "0x2000067")]
public class TerrariumShellDissolveControl : MonoBehaviour
{
	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ulong HashValue;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material m_terrariumShellMaterial;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_duration;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_particleVelocity;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_isOpening;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_particleRange;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string m_shellOpenSound;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string m_shellCloseSound;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Gradient m_particleGradient;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve m_spinCurve;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent m_OnOpenStart;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent m_OnCloseStart;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_time;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float m_dissolve;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_spinCurveValue;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_spinCurveDelta;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_halfDuration;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_TerrariumMaxY;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_TerrariumMinY;

	[Token(Token = "0x400032D")]
	private const string kDissolveProperty = "_Dissolve";

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int m_dissolvePropertyId;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_evaluateDissolve;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool m_soundHasPlayed;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool m_closeEventDispactched;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ParticleSystem m_particleSystem;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private MeshFilter m_emitMesh;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private MeshRenderer m_emitMeshRenderer;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private VertDissolve[] m_vertsToDissolve;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private UvSlice[] m_UvSlices;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private ParticleSystem.EmitParams m_emitParams;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private readonly Vector3 kVector3Zero;

	[Token(Token = "0x4000339")]
	private const int kNumUvSlices = 10;

	[Token(Token = "0x400033A")]
	private const float kUvSliceGap = 0.15f;

	[Token(Token = "0x400033B")]
	private const float kUvSliceStep = 0.05f;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool m_eventListenersAdded;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private int m_numMeshVerts;

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x79F0A4", Offset = "0x79F0A4", VA = "0x79F0A4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x79F0C8", Offset = "0x79F0C8", VA = "0x79F0C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x79F3B4", Offset = "0x79F3B4", VA = "0x79F3B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x79F668", Offset = "0x79F668", VA = "0x79F668")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x79F7CC", Offset = "0x79F7CC", VA = "0x79F7CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x79F868", Offset = "0x79F868", VA = "0x79F868")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x79F934", Offset = "0x79F934", VA = "0x79F934")]
	public void SetMeshRenderer(bool enable)
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x79F954", Offset = "0x79F954", VA = "0x79F954")]
	private void ResetTransitionParams()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x79F984", Offset = "0x79F984", VA = "0x79F984")]
	private void TriggerShellOpen(object obj)
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x79F9E4", Offset = "0x79F9E4", VA = "0x79F9E4")]
	private void TriggerShellClose(object obj)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x79FA40", Offset = "0x79FA40", VA = "0x79FA40")]
	public void SetShellToClosedState()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x79FA4C", Offset = "0x79FA4C", VA = "0x79FA4C")]
	public void SetShellToOpenState()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x79F988", Offset = "0x79F988", VA = "0x79F988")]
	public void Open()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x79F9E8", Offset = "0x79F9E8", VA = "0x79F9E8")]
	public void Close()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x79FA54", Offset = "0x79FA54", VA = "0x79FA54")]
	private Color GetParticleColor(float particleY)
	{
		return default(Color);
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x79FAF0", Offset = "0x79FAF0", VA = "0x79FAF0")]
	private void CullVertsToDissolve()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x79FBC0", Offset = "0x79FBC0", VA = "0x79FBC0")]
	private void EvaluateUvSlices()
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x79FCD8", Offset = "0x79FCD8", VA = "0x79FCD8")]
	private void EmitParticles()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x79F90C", Offset = "0x79F90C", VA = "0x79F90C")]
	private void SetDissolve()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x7A0094", Offset = "0x7A0094", VA = "0x7A0094")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x7A0224", Offset = "0x7A0224", VA = "0x7A0224")]
	private void Update()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x7A0568", Offset = "0x7A0568", VA = "0x7A0568")]
	public TerrariumShellDissolveControl()
	{
	}
}
[Token(Token = "0x2000068")]
public class ThrownStamp : CursorInputMonoBehaviour
{
	[Token(Token = "0x200044E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AD80", Offset = "0x74AD80")]
	private sealed class <ResetIgnoreCollision>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThrownStamp <>4__this;

		[Token(Token = "0x17000372")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022B8")]
			[Address(RVA = "0x7A2BEC", Offset = "0x7A2BEC", VA = "0x7A2BEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000373")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022BA")]
			[Address(RVA = "0x7A2C58", Offset = "0x7A2C58", VA = "0x7A2C58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022B5")]
		[Address(RVA = "0x7A1F8C", Offset = "0x7A1F8C", VA = "0x7A1F8C")]
		[DebuggerHidden]
		public <ResetIgnoreCollision>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60022B6")]
		[Address(RVA = "0x7A2AD4", Offset = "0x7A2AD4", VA = "0x7A2AD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022B7")]
		[Address(RVA = "0x7A2AD8", Offset = "0x7A2AD8", VA = "0x7A2AD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022B9")]
		[Address(RVA = "0x7A2BF4", Offset = "0x7A2BF4", VA = "0x7A2BF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Mesh m_mesh;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material m_material;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 m_velocity;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float m_scale;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public CreateModeStamp m_stamp;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public StampBarnSimple stampBarn;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float kThrowForce;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float kDestroyTimer;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float kFadeSpeed;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Collider m_cursorCollider;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Color kMeshColor;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float alpha;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Matrix4x4 m_scaleMtx;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private MaterialPropertyBlock m_propsBlock;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private BoxCollider m_collider;

	[Token(Token = "0x400034D")]
	private const float kMinSoundVelocity = 2f;

	[Token(Token = "0x400034E")]
	private const float kMaxSoundVelocity = 10f;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float m_timeStarted;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private Color m_currentColor;

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x7A1F18", Offset = "0x7A1F18", VA = "0x7A1F18")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x756C18", Offset = "0x756C18")]
	private IEnumerator ResetIgnoreCollision()
	{
		return null;
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x7A1FB8", Offset = "0x7A1FB8", VA = "0x7A1FB8", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x7A22D8", Offset = "0x7A22D8", VA = "0x7A22D8")]
	private void DestroyIcon()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x7A2374", Offset = "0x7A2374", VA = "0x7A2374")]
	private void CancelDelayedDestroyCallback()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x7A2410", Offset = "0x7A2410", VA = "0x7A2410", Slot = "16")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x7A2438", Offset = "0x7A2438", VA = "0x7A2438", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x7A24E4", Offset = "0x7A24E4", VA = "0x7A24E4", Slot = "27")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x7A2568", Offset = "0x7A2568", VA = "0x7A2568")]
	private void PlaySoundAtVelocity(Vector3 velocity)
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x7A2710", Offset = "0x7A2710", VA = "0x7A2710", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x7A2A00", Offset = "0x7A2A00", VA = "0x7A2A00")]
	public ThrownStamp()
	{
	}
}
[Token(Token = "0x2000069")]
public class TrailVortex : MonoBehaviour
{
	[Token(Token = "0x200044F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AD90", Offset = "0x74AD90")]
	private sealed class <ResetTrails>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TrailVortex <>4__this;

		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TrailRenderer <trender>5__2;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <time>5__3;

		[Token(Token = "0x17000374")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022BE")]
			[Address(RVA = "0x7A3554", Offset = "0x7A3554", VA = "0x7A3554", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000375")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022C0")]
			[Address(RVA = "0x7A35C0", Offset = "0x7A35C0", VA = "0x7A35C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022BB")]
		[Address(RVA = "0x7A3220", Offset = "0x7A3220", VA = "0x7A3220")]
		[DebuggerHidden]
		public <ResetTrails>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0x7A345C", Offset = "0x7A345C", VA = "0x7A345C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0x7A3460", Offset = "0x7A3460", VA = "0x7A3460", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022BF")]
		[Address(RVA = "0x7A355C", Offset = "0x7A355C", VA = "0x7A355C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_particles;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_trail;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float kRotSpeed;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float kVerticalSpeed;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float kRadius;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float kTrailLifetime;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem[] m_emitters;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_trailLifetimer;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool m_isAlive;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool m_askedToPlay;

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x7A304C", Offset = "0x7A304C", VA = "0x7A304C")]
	public void Play()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x7A3058", Offset = "0x7A3058", VA = "0x7A3058")]
	private void Start()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x7A30BC", Offset = "0x7A30BC", VA = "0x7A30BC")]
	private void Reset()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x7A321C", Offset = "0x7A321C", VA = "0x7A321C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x7A31A8", Offset = "0x7A31A8", VA = "0x7A31A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x756C7C", Offset = "0x756C7C")]
	private IEnumerator ResetTrails()
	{
		return null;
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x7A324C", Offset = "0x7A324C", VA = "0x7A324C")]
	private void TurnOff()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x7A32CC", Offset = "0x7A32CC", VA = "0x7A32CC")]
	private void TurnOn()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x7A3340", Offset = "0x7A3340", VA = "0x7A3340")]
	private void Update()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x7A3448", Offset = "0x7A3448", VA = "0x7A3448")]
	public TrailVortex()
	{
	}
}
[Token(Token = "0x200006A")]
public class UIControlStar : MonoBehaviour
{
	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Growable.ControlStar m_controlStar;

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x7A586C", Offset = "0x7A586C", VA = "0x7A586C")]
	public void SetControlStar(Growable.ControlStar controlStar)
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x7A5874", Offset = "0x7A5874", VA = "0x7A5874")]
	private void Update()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x7A58E8", Offset = "0x7A58E8", VA = "0x7A58E8")]
	public UIControlStar()
	{
	}
}
[Token(Token = "0x200006B")]
public class UniqueGlobalObject : MonoBehaviour
{
	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<string> m_loadedObjects;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_wasLoaded;

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x7A5960", Offset = "0x7A5960", VA = "0x7A5960")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x7A5AC0", Offset = "0x7A5AC0", VA = "0x7A5AC0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x7A5B6C", Offset = "0x7A5B6C", VA = "0x7A5B6C")]
	public UniqueGlobalObject()
	{
	}
}
[Token(Token = "0x200006C")]
public class UserSignedOutScene : MonoBehaviour
{
	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kTimeBeforeExiting;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_exitTimer;

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x7A5F90", Offset = "0x7A5F90", VA = "0x7A5F90")]
	private void Update()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x7A6070", Offset = "0x7A6070", VA = "0x7A6070")]
	public UserSignedOutScene()
	{
	}
}
[Token(Token = "0x200006D")]
public class ZonePlayHint : MonoBehaviour
{
	[Token(Token = "0x2000450")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74ADA0", Offset = "0x74ADA0")]
	private sealed class <ResetTrail>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZonePlayHint <>4__this;

		[Token(Token = "0x17000376")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022C4")]
			[Address(RVA = "0x133AA68", Offset = "0x133AA68", VA = "0x133AA68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000377")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022C6")]
			[Address(RVA = "0x133AAD4", Offset = "0x133AAD4", VA = "0x133AAD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022C1")]
		[Address(RVA = "0x133A158", Offset = "0x133A158", VA = "0x133A158")]
		[DebuggerHidden]
		public <ResetTrail>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0x133A99C", Offset = "0x133A99C", VA = "0x133A99C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x133A9A0", Offset = "0x133A9A0", VA = "0x133A9A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0x133AA70", Offset = "0x133AA70", VA = "0x133AA70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DC64", Offset = "0x74DC64")]
	public GestureData m_gestureData;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DC9C", Offset = "0x74DC9C")]
	public GameObject m_hintObjectPrefab;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DCD4", Offset = "0x74DCD4")]
	public GameObject m_lineObjectPrefab;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DD0C", Offset = "0x74DD0C")]
	public float m_hintSpeed;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DD44", Offset = "0x74DD44")]
	public float m_introHintSpeed;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DD7C", Offset = "0x74DD7C")]
	public float m_delayClearTime;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DDB4", Offset = "0x74DDB4")]
	public LeanTweenType m_easeType;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject m_hintObject;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject m_lineObject;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] m_splinePoints;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Quaternion m_lastRotation;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private TrailRenderer m_trailRenderer;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private LineRenderer m_lineRender;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DDEC", Offset = "0x74DDEC")]
	public ParticleSystem m_sparkleEmitter;

	[Token(Token = "0x400036E")]
	private const float kAngleThreshold = 0.1f;

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x1339E4C", Offset = "0x1339E4C", VA = "0x1339E4C")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x756CE0", Offset = "0x756CE0")]
	public void ActivateHint()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x1339F8C", Offset = "0x1339F8C", VA = "0x1339F8C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x133A02C", Offset = "0x133A02C", VA = "0x133A02C")]
	private void OnCreateModeScribble(object obj)
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x133A0E4", Offset = "0x133A0E4", VA = "0x133A0E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x756D18", Offset = "0x756D18")]
	private IEnumerator ResetTrail()
	{
		return null;
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x133A184", Offset = "0x133A184", VA = "0x133A184")]
	private void StartSplineMotion()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x1339E84", Offset = "0x1339E84", VA = "0x1339E84")]
	private void StartIntroSplineMotion()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x133A2E0", Offset = "0x133A2E0", VA = "0x133A2E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x133A47C", Offset = "0x133A47C", VA = "0x133A47C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x133A85C", Offset = "0x133A85C", VA = "0x133A85C")]
	public ZonePlayHint()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x133A8E4", Offset = "0x133A8E4", VA = "0x133A8E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756D7C", Offset = "0x756D7C")]
	private void <StartSplineMotion>b__19_0()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x133A93C", Offset = "0x133A93C", VA = "0x133A93C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756D8C", Offset = "0x756D8C")]
	private void <StartIntroSplineMotion>b__20_0()
	{
	}
}
[Token(Token = "0x200006E")]
[DisallowMultipleComponent]
public class SteamManager : MonoBehaviour
{
	[Token(Token = "0x6000339")]
	[Address(RVA = "0x8C45A0", Offset = "0x8C45A0", VA = "0x8C45A0")]
	public SteamManager()
	{
	}
}
[Token(Token = "0x200006F")]
public static class AchievementsManager
{
	[Token(Token = "0x2000451")]
	public enum ID
	{
		[Token(Token = "0x4001EF9")]
		ShyFriend,
		[Token(Token = "0x4001EFA")]
		RememberAndRebuild,
		[Token(Token = "0x4001EFB")]
		GracefulCompanion,
		[Token(Token = "0x4001EFC")]
		StrongPartner,
		[Token(Token = "0x4001EFD")]
		CleverConfidante,
		[Token(Token = "0x4001EFE")]
		Acknowledgement,
		[Token(Token = "0x4001EFF")]
		Humility,
		[Token(Token = "0x4001F00")]
		LettingGo,
		[Token(Token = "0x4001F01")]
		Honesty,
		[Token(Token = "0x4001F02")]
		WelcomeToMyPad,
		[Token(Token = "0x4001F03")]
		FunWithFungi,
		[Token(Token = "0x4001F04")]
		ACharmingPlace,
		[Token(Token = "0x4001F05")]
		QueensPleasure,
		[Token(Token = "0x4001F06")]
		FeatheredFriend,
		[Token(Token = "0x4001F07")]
		StarCrossed,
		[Token(Token = "0x4001F08")]
		Acceptance,
		[Token(Token = "0x4001F09")]
		ThatsAmore,
		[Token(Token = "0x4001F0A")]
		NONE
	}

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AchievementSystem m_system;

	[Token(Token = "0x17000051")]
	private static AchievementSystem System
	{
		[Token(Token = "0x600033A")]
		[Address(RVA = "0xA4D98C", Offset = "0xA4D98C", VA = "0xA4D98C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xA4DA5C", Offset = "0xA4DA5C", VA = "0xA4DA5C")]
	public static void UnlockAchievement(string id)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xA4DF48", Offset = "0xA4DF48", VA = "0xA4DF48")]
	public static void UnlockAchievement(ID id, bool queue = false)
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xA4DFD0", Offset = "0xA4DFD0", VA = "0xA4DFD0")]
	public static void UnlockQueuedAchievements()
	{
	}
}
[Token(Token = "0x2000070")]
public class AchievementSystem
{
	[Token(Token = "0x600033F")]
	[Address(RVA = "0xA4D97C", Offset = "0xA4D97C", VA = "0xA4D97C", Slot = "4")]
	public virtual void UnlockAchievement(AchievementsManager.ID id, bool queue = false)
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xA4D980", Offset = "0xA4D980", VA = "0xA4D980", Slot = "5")]
	public virtual void UnlockQueuedAchievements()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xA4D984", Offset = "0xA4D984", VA = "0xA4D984")]
	public AchievementSystem()
	{
	}
}
[Token(Token = "0x2000071")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7485D4", Offset = "0x7485D4")]
public class AffectParticlesByGravitator : MonoBehaviour
{
	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<AffectParticlesByGravitator> m_activeParticles;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DE24", Offset = "0x74DE24")]
	public bool m_lookAtTarget;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve m_emissionByDistance;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string kPerParticleHealingSound;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem m_system;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.Particle[] m_particles;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int lastParticleCount;

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xA4F9B8", Offset = "0xA4F9B8", VA = "0xA4F9B8")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xA4FBAC", Offset = "0xA4FBAC", VA = "0xA4FBAC")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xA4FB20", Offset = "0xA4FB20", VA = "0xA4FB20")]
	public void SetParticlesEmissionRate(float t, float rate)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xA4FC50", Offset = "0xA4FC50", VA = "0xA4FC50")]
	public void SetParticlesStartLifetime(float min, float max)
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xA4FCD0", Offset = "0xA4FCD0", VA = "0xA4FCD0")]
	public void SetParticlesStartSpeed(float startSpeed)
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xA4FD18", Offset = "0xA4FD18", VA = "0xA4FD18")]
	public void SetActiveParticlesRemainingLifetime(float remainingLifetime)
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xA4FE54", Offset = "0xA4FE54", VA = "0xA4FE54")]
	public void StopParticles()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xA4FEA0", Offset = "0xA4FEA0", VA = "0xA4FEA0")]
	public void PlayParticles()
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xA4FEEC", Offset = "0xA4FEEC", VA = "0xA4FEEC")]
	public void PullParticlesToward(ParticlesGravitator gravitator)
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xA50664", Offset = "0xA50664", VA = "0xA50664")]
	public AffectParticlesByGravitator()
	{
	}
}
[Token(Token = "0x2000072")]
public class AnchorToCursor : MonoBehaviour
{
	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRInput.ControllerIndex m_controllerIndex;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 m_originalScale;

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x842374", Offset = "0x842374", VA = "0x842374")]
	private void Start()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x84251C", Offset = "0x84251C", VA = "0x84251C")]
	private void OnSceneUnloaded(UnityEngine.SceneManagement.Scene scene)
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x8425D8", Offset = "0x8425D8", VA = "0x8425D8")]
	private void Update()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x8426EC", Offset = "0x8426EC", VA = "0x8426EC")]
	public AnchorToCursor()
	{
	}
}
[Token(Token = "0x2000073")]
public class AnimalHealing : MonoBehaviour
{
	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_OnHealingVictory;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_HealingVictoryDelay;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool m_healingHasStarted;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HealingControl[] m_healingControls;

	[Token(Token = "0x400037D")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74DE5C", Offset = "0x74DE5C")]
	public const float m_healingCompleteThreshold = 90f;

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x842C14", Offset = "0x842C14", VA = "0x842C14")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x842CD0", Offset = "0x842CD0", VA = "0x842CD0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x842CF8", Offset = "0x842CF8", VA = "0x842CF8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x842DE8", Offset = "0x842DE8", VA = "0x842DE8")]
	public void StartHealing(object obj)
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x842EA0", Offset = "0x842EA0", VA = "0x842EA0")]
	private void OnHealingVictory()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x842F30", Offset = "0x842F30", VA = "0x842F30")]
	public void HealingVictory()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x842FDC", Offset = "0x842FDC", VA = "0x842FDC")]
	public AnimalHealing()
	{
	}
}
[Token(Token = "0x2000074")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748638", Offset = "0x748638")]
public class AnimationControllerQueue : MonoBehaviour
{
	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<RuntimeAnimatorController> m_controllers;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_setFirstControllerOnStart;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_currentIndex;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator m_animator;

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x843604", Offset = "0x843604", VA = "0x843604")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x84365C", Offset = "0x84365C", VA = "0x84365C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x84366C", Offset = "0x84366C", VA = "0x84366C")]
	public void SetNextController()
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x843764", Offset = "0x843764", VA = "0x843764")]
	public AnimationControllerQueue()
	{
	}
}
[Token(Token = "0x2000075")]
public class Bird : MonoBehaviour
{
	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BirdSettings m_BirdSettings;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_colliderRadius;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public bool m_isInKineticScene;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public BirdTimers m_BirdTimers;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public BirdAI m_BirdAI;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public BirdAnimatorControl m_BirdAnimatorControl;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public BirdPoseControl m_BirdPoseControl;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public BirdEyeControl m_BirdEyeControl;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public BirdLookControl m_BirdLookControl;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public BirdPetControl m_BirdPetControl;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public BirdCollision m_BirdCollision;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public BirdGameActions m_BirdGameActions;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public BirdSing m_BirdSing;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public SphereCollider m_SphereCollider;

	[Token(Token = "0x4000390")]
	private const string kDeltaTransJointPath = "Skeleton_Group/DeltaTrans";

	[Token(Token = "0x4000391")]
	private const string kWingsOpenGeoPath = "Geo_Group/Geo_WingsOpen";

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public GameObject m_wingsOpen;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform m_deltaTransJoint;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 m_birdGroundCenter;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 m_birdLocalCenterOfMass;

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x8460E0", Offset = "0x8460E0", VA = "0x8460E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x846588", Offset = "0x846588", VA = "0x846588")]
	public Transform GetDeltaTransJoint()
	{
		return null;
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x846590", Offset = "0x846590", VA = "0x846590")]
	public Vector3 GetBirdGroundCenter()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x84659C", Offset = "0x84659C", VA = "0x84659C")]
	public Vector3 GetBirdCenterOfMass()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x8465C4", Offset = "0x8465C4", VA = "0x8465C4")]
	public Bird()
	{
	}
}
[Token(Token = "0x2000076")]
public enum BirdState
{
	[Token(Token = "0x4000397")]
	PreEnterScene,
	[Token(Token = "0x4000398")]
	EnterScene,
	[Token(Token = "0x4000399")]
	ExitScene,
	[Token(Token = "0x400039A")]
	Idle,
	[Token(Token = "0x400039B")]
	Moving,
	[Token(Token = "0x400039C")]
	Petting,
	[Token(Token = "0x400039D")]
	Sing,
	[Token(Token = "0x400039E")]
	SingVictory,
	[Token(Token = "0x400039F")]
	CreateSwirl,
	[Token(Token = "0x40003A0")]
	Healing
}
[Token(Token = "0x2000077")]
public class BirdAI : MonoBehaviour
{
	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Bird m_bird;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BirdTimers m_birdTimers;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BirdPoseControl m_birdPoseControl;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BirdAnimatorControl m_birdAnimatorControl;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private BirdLookControl m_birdLookControl;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SphereCollider m_sphereCollider;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private BirdEyeControl m_birdEyeControl;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74DF4C", Offset = "0x74DF4C")]
	private BirdState <m_birdState>k__BackingField;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[ReadOnly]
	public BirdState m_debugState;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74DF6C", Offset = "0x74DF6C")]
	private HapticAsset <m_hapticAsset>k__BackingField;

	[Token(Token = "0x17000052")]
	public BirdState m_birdState
	{
		[Token(Token = "0x6000360")]
		[Address(RVA = "0x846634", Offset = "0x846634", VA = "0x846634")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756D9C", Offset = "0x756D9C")]
		get
		{
			return default(BirdState);
		}
		[Token(Token = "0x6000361")]
		[Address(RVA = "0x84663C", Offset = "0x84663C", VA = "0x84663C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756DAC", Offset = "0x756DAC")]
		set
		{
		}
	}

	[Token(Token = "0x17000053")]
	public HapticAsset m_hapticAsset
	{
		[Token(Token = "0x6000362")]
		[Address(RVA = "0x846644", Offset = "0x846644", VA = "0x846644")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756DBC", Offset = "0x756DBC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000363")]
		[Address(RVA = "0x84664C", Offset = "0x84664C", VA = "0x84664C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756DCC", Offset = "0x756DCC")]
		set
		{
		}
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x846654", Offset = "0x846654", VA = "0x846654")]
	private void Start()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x846938", Offset = "0x846938", VA = "0x846938")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x846BA0", Offset = "0x846BA0", VA = "0x846BA0")]
	public void SetEnterSceneState(object obj)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x846F4C", Offset = "0x846F4C", VA = "0x846F4C")]
	public void SetExitSceneState(object obj)
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x846F54", Offset = "0x846F54", VA = "0x846F54")]
	public void SetIdleState()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x846F5C", Offset = "0x846F5C", VA = "0x846F5C")]
	public void IntroFinished(object obj)
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x846F64", Offset = "0x846F64", VA = "0x846F64")]
	private void SetSwirlState(object obj)
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x846F6C", Offset = "0x846F6C", VA = "0x846F6C")]
	private void SetHealingState(object obj)
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x846F74", Offset = "0x846F74", VA = "0x846F74")]
	private void ResetDynamicComponents()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x847120", Offset = "0x847120", VA = "0x847120")]
	private void SetDynamicAnimLayers(bool dynamic)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x847200", Offset = "0x847200", VA = "0x847200")]
	private void SetWingsOpen(bool open)
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x84724C", Offset = "0x84724C", VA = "0x84724C")]
	private void SetLookTargeting(bool look)
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x8472A0", Offset = "0x8472A0", VA = "0x8472A0")]
	public void DisableColliderGameobject(object obj)
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x8472D0", Offset = "0x8472D0", VA = "0x8472D0")]
	public void EnableColliderGameobject(object obj)
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x847300", Offset = "0x847300", VA = "0x847300")]
	public void SetCollider(bool state)
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x847320", Offset = "0x847320", VA = "0x847320")]
	private void SetEyeState(EyeState eyeState)
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x846BA8", Offset = "0x846BA8", VA = "0x846BA8")]
	public void EnterState(BirdState state)
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x847908", Offset = "0x847908", VA = "0x847908")]
	private void CheckState()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x847EA4", Offset = "0x847EA4", VA = "0x847EA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x847EA8", Offset = "0x847EA8", VA = "0x847EA8")]
	public BirdAI()
	{
	}
}
[Token(Token = "0x2000078")]
public class BirdAnimatorControl : MonoBehaviour
{
	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Bird m_bird;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RuntimeAnimatorController m_healing;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator m_animator;

	[Token(Token = "0x40003AE")]
	private const string kIdleRateParam = "IdleRate";

	[Token(Token = "0x40003AF")]
	private const string kIdleIntensityParam = "IdleIntensity";

	[Token(Token = "0x40003B0")]
	private const string kMoodParam = "Mood";

	[Token(Token = "0x40003B1")]
	private const string kSceneLayerName = "Scene";

	[Token(Token = "0x40003B2")]
	private const string kDynamicBaseLayerName = "DynamicBase";

	[Token(Token = "0x40003B3")]
	private const string kDynamicPostureLayerName = "DynamicPosture";

	[Token(Token = "0x40003B4")]
	private const string kDynamicHeadTwistLayerName = "DynamicHeadTwist";

	[Token(Token = "0x40003B5")]
	private const string kDynamicHeadExtendLayerName = "DynamicHeadExtend";

	[Token(Token = "0x40003B6")]
	private const string kDynamicEyeLayerName = "DynamicEyes";

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_dynamicEyeLayerIndex;

	[Token(Token = "0x40003B8")]
	private const string kResetMovePositionParam = "ResetMovePosition";

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int m_ResetMovePositionParamIndex;

	[Token(Token = "0x40003BA")]
	private const string kGoTo1Param = "GoTo_1";

	[Token(Token = "0x40003BB")]
	private const string kGoTo2Param = "GoTo_2";

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int[] m_GoToParamIndexes;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_currentGoToIndex;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<int> m_dynamicLayerIndexes;

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x847EB0", Offset = "0x847EB0", VA = "0x847EB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x8475DC", Offset = "0x8475DC", VA = "0x8475DC")]
	public void ToggleMove()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x848250", Offset = "0x848250", VA = "0x848250")]
	public void ToggleMoveReset()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x84721C", Offset = "0x84721C", VA = "0x84721C")]
	public void SetGeoWingsOpen(bool enabled)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x84713C", Offset = "0x84713C", VA = "0x84713C")]
	public void SetDynamicLayers(bool state)
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x847870", Offset = "0x847870", VA = "0x847870")]
	public void SwitchToHealingController()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x848278", Offset = "0x848278", VA = "0x848278")]
	public void SetEyeLayerWeight(float weight)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x8475B4", Offset = "0x8475B4", VA = "0x8475B4")]
	public void SetTrigger(string trigger)
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x848234", Offset = "0x848234", VA = "0x848234")]
	public void SetTrigger(int trigger)
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x848218", Offset = "0x848218", VA = "0x848218")]
	public void SetFloat(string param, float v)
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x84829C", Offset = "0x84829C", VA = "0x84829C")]
	public void SetFloat(int param, float v)
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x8482B8", Offset = "0x8482B8", VA = "0x8482B8")]
	public void SetBool(string param, bool v)
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x8482D8", Offset = "0x8482D8", VA = "0x8482D8")]
	public BirdAnimatorControl()
	{
	}
}
[Token(Token = "0x2000079")]
public class BirdCollision : CursorInputMonoBehaviour
{
	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_cursorIdx;

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x848348", Offset = "0x848348", VA = "0x848348")]
	public void ResetCursorIndex()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x848354", Offset = "0x848354", VA = "0x848354", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x84835C", Offset = "0x84835C", VA = "0x84835C")]
	private bool CheckState(BirdState state)
	{
		return default(bool);
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x8483D8", Offset = "0x8483D8", VA = "0x8483D8")]
	private bool CheckIdleState()
	{
		return default(bool);
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x8483E0", Offset = "0x8483E0", VA = "0x8483E0")]
	private bool CheckPettingState()
	{
		return default(bool);
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x8483E8", Offset = "0x8483E8", VA = "0x8483E8", Slot = "22")]
	protected override bool CursorOnTriggerStay(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x8485EC", Offset = "0x8485EC", VA = "0x8485EC", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x848B00", Offset = "0x848B00", VA = "0x848B00", Slot = "23")]
	protected override bool CursorOnTriggerExit(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x848C04", Offset = "0x848C04", VA = "0x848C04")]
	public BirdCollision()
	{
	}
}
[Token(Token = "0x200007A")]
public enum EyeState
{
	[Token(Token = "0x40003C1")]
	Closed,
	[Token(Token = "0x40003C2")]
	Angry,
	[Token(Token = "0x40003C3")]
	White,
	[Token(Token = "0x40003C4")]
	Furrow,
	[Token(Token = "0x40003C5")]
	Sad,
	[Token(Token = "0x40003C6")]
	Squint,
	[Token(Token = "0x40003C7")]
	Surprise
}
[Token(Token = "0x200007B")]
public class BirdEyeControl : MonoBehaviour
{
	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string[] kEyeParameters;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string[] m_EyeMeshNames;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EyeState[] m_eyeStates;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<string, SkinnedMeshRenderer> m_eye_skinnedMeshRenderers_Left;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<string, SkinnedMeshRenderer> m_eye_skinnedMeshRenderers_Right;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_isBlinking;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool m_isFocusedOnTarget;

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x848CF4", Offset = "0x848CF4", VA = "0x848CF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x848FD0", Offset = "0x848FD0", VA = "0x848FD0")]
	public void SetIsFocusedOnTarget(bool isFocusedOnTarget)
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x8475D0", Offset = "0x8475D0", VA = "0x8475D0")]
	public void FocusOnTarget()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x849198", Offset = "0x849198", VA = "0x849198")]
	private void SetEyeState(string state)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x847338", Offset = "0x847338", VA = "0x847338")]
	public void SetEyeState(EyeState state)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x849314", Offset = "0x849314", VA = "0x849314")]
	public void SetEyeState()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x848FDC", Offset = "0x848FDC", VA = "0x848FDC")]
	public void SetPupilPosition()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x84765C", Offset = "0x84765C", VA = "0x84765C")]
	public void ResetEyes()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x847AC8", Offset = "0x847AC8", VA = "0x847AC8")]
	public void CheckEyes()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x84940C", Offset = "0x84940C", VA = "0x84940C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x8494F0", Offset = "0x8494F0", VA = "0x8494F0")]
	public BirdEyeControl()
	{
	}
}
[Token(Token = "0x200007C")]
public class BirdGameActions : MonoBehaviour
{
	[Token(Token = "0x40003CF")]
	private const float kCallToKineticScribbleDelay = 1f;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string kBirdCreateCallSound;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEvent m_OnMoveComplete;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private KineticPod m_currentPod;

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x849620", Offset = "0x849620", VA = "0x849620")]
	private void Start()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x8496C0", Offset = "0x8496C0", VA = "0x8496C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x849760", Offset = "0x849760", VA = "0x849760")]
	private void ResetPositionInKinetic(object obj)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x849830", Offset = "0x849830", VA = "0x849830")]
	public void TurnToKineticPod(KineticPod pod)
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x849A0C", Offset = "0x849A0C", VA = "0x849A0C")]
	public void ExecuteTurn()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x849BA0", Offset = "0x849BA0", VA = "0x849BA0")]
	public void OnMoveComplete()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x849BBC", Offset = "0x849BBC", VA = "0x849BBC")]
	private void CallToKineticScribble()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x849EF4", Offset = "0x849EF4", VA = "0x849EF4")]
	public void CallToCreateScribble()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x84A08C", Offset = "0x84A08C", VA = "0x84A08C")]
	public BirdGameActions()
	{
	}
}
[Token(Token = "0x200007D")]
public class BirdLookControl : MonoBehaviour
{
	[Token(Token = "0x2000452")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74ADB0", Offset = "0x74ADB0")]
	private sealed class <>c__DisplayClass34_0
	{
		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int k;

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0x84AAC8", Offset = "0x84AAC8", VA = "0x84AAC8")]
		public <>c__DisplayClass34_0()
		{
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0x84B728", Offset = "0x84B728", VA = "0x84B728")]
		internal Vector3 <SetupLookTargets>b__1()
		{
			return default(Vector3);
		}
	}

	[Serializable]
	[Token(Token = "0x2000453")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74ADC0", Offset = "0x74ADC0")]
	private sealed class <>c
	{
		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<Vector3> <>9__34_0;

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0x84B6FC", Offset = "0x84B6FC", VA = "0x84B6FC")]
		public <>c()
		{
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0x84B704", Offset = "0x84B704", VA = "0x84B704")]
		internal Vector3 <SetupLookTargets>b__34_0()
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Bird m_bird;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform m_deltaTrans;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AimIK m_aimIK;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IKSolverAim m_ikSolverAim;

	[Token(Token = "0x40003D7")]
	private const string kLookTargetPrefix = "LookTarget";

	[Token(Token = "0x40003D8")]
	private const string kIkSolverAimRootBonePath = "Skeleton_Group/DeltaTrans/Root/";

	[Token(Token = "0x40003D9")]
	private const string kIkSolverAimRootBonePathSpine = "Skeleton_Group/DeltaTrans/Root/Spine";

	[Token(Token = "0x40003DA")]
	private const string kIkSolverAimRootBonePathSpineNeck = "Skeleton_Group/DeltaTrans/Root/Spine/Neck";

	[Token(Token = "0x40003DB")]
	private const string kIkSolverAimRootBonePathSpineNeckHead = "Skeleton_Group/DeltaTrans/Root/Spine/Neck/Head";

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform m_ikSolverAimTarget;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform m_lookTarget;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform m_kineticSceneLookTarget;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform m_worldLookTarget;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform m_birdLookTargetBarn;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 m_defaultWorldLookTargetLocalPosition;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 m_lookTargetVector;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 m_lookTargetVrHeadGroundVector;

	[Token(Token = "0x40003E4")]
	private const float kBirdIkWeightFalloffCap = 90f;

	[Token(Token = "0x40003E5")]
	private const float kWorldLookDistance = 5f;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_scaleAdjustedWorldLookDistance;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_lookTargetAngle;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float m_vrHeadLookTargetGroundAngle;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_vrLookTargetInteractionRangeSqr;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AnimationCurveScriptableObject m_aimIkWeightDampener;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<BirdLookTarget> m_VrLookTargets;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<BirdLookTarget> m_VrLookTargetsProximity;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string[] kBoneSubPaths;

	[Token(Token = "0x40003EE")]
	private const int kBoneSubPathsLength = 4;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly float[] kBoneWeights;

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x84A0F4", Offset = "0x84A0F4", VA = "0x84A0F4")]
	public Transform GetLookTargetBarn()
	{
		return null;
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x84A0FC", Offset = "0x84A0FC", VA = "0x84A0FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x84A60C", Offset = "0x84A60C", VA = "0x84A60C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x847268", Offset = "0x847268", VA = "0x847268")]
	public void EnableAimIk(bool enable)
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x84A264", Offset = "0x84A264", VA = "0x84A264")]
	private void SetupAimIk()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x84A698", Offset = "0x84A698", VA = "0x84A698")]
	private void SetupLookTargets()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x84AAD0", Offset = "0x84AAD0", VA = "0x84AAD0")]
	private void SetLookTarget(Transform lookTarget)
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x849B98", Offset = "0x849B98", VA = "0x849B98")]
	public void SetKineticSceneLookTarget(Transform lookTarget)
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x849828", Offset = "0x849828", VA = "0x849828")]
	public void NullKineticSceneLookTarget()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x84AC14", Offset = "0x84AC14", VA = "0x84AC14")]
	private void SetWorldLookTargetPosition(Vector3 position)
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x84AA8C", Offset = "0x84AA8C", VA = "0x84AA8C")]
	private void ResetWorldLookTargetPosition()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x84AAD8", Offset = "0x84AAD8", VA = "0x84AAD8")]
	private void ChooseLookTarget()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x84ACD8", Offset = "0x84ACD8", VA = "0x84ACD8")]
	private void RandomizeWorldLookTargetPosition()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x84AE2C", Offset = "0x84AE2C", VA = "0x84AE2C")]
	private Vector3 GetPointOnUnitSphereCap(float min, float max)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x84AFE4", Offset = "0x84AFE4", VA = "0x84AFE4")]
	private void UpdateIkAimTargetPosition()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x84B02C", Offset = "0x84B02C", VA = "0x84B02C")]
	private void UpdateLookTargetVectors()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x84B180", Offset = "0x84B180", VA = "0x84B180")]
	private void UpdateLookTargetAngles()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x847DFC", Offset = "0x847DFC", VA = "0x847DFC")]
	public void CheckLook()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x84B280", Offset = "0x84B280", VA = "0x84B280")]
	private void DampenIk()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x847CB8", Offset = "0x847CB8", VA = "0x847CB8")]
	public void CheckVrLookTargets()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x84B47C", Offset = "0x84B47C", VA = "0x84B47C")]
	public BirdLookControl()
	{
	}
}
[Token(Token = "0x200007E")]
public class BirdLookTarget : MonoBehaviour
{
	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_sqMagValue;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform m_bird;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Func<Vector3> m_trackPositionAction;

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x84B458", Offset = "0x84B458", VA = "0x84B458")]
	public Vector3 GetPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x84B75C", Offset = "0x84B75C", VA = "0x84B75C")]
	public float GetSqrMagDistanceToBird()
	{
		return default(float);
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x84B764", Offset = "0x84B764", VA = "0x84B764")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x84B7D8", Offset = "0x84B7D8", VA = "0x84B7D8")]
	public void SetTrackPositionAction(Func<Vector3> function)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x84B328", Offset = "0x84B328", VA = "0x84B328")]
	public void Update()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x84B7E0", Offset = "0x84B7E0", VA = "0x84B7E0")]
	public BirdLookTarget()
	{
	}
}
[Token(Token = "0x200007F")]
public class BirdPetControl : MonoBehaviour
{
	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AnimationCurve m_NoVrPetIntensityCurve;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool m_isBeingPet;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool m_hasOnPetExitEvent;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_birdPetCounter;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string kPetSpeedParameter;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int kPetSpeedParamIndex;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_petSpeedModifier;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private StateController m_NoVrPetResetController;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEvent m_OnPetExit;

	[Token(Token = "0x40003FC")]
	private const float kNoVrPetResetTime = 1f;

	[Token(Token = "0x40003FD")]
	private const float kNoVrPetSpeedMax = 5f;

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x84B7E8", Offset = "0x84B7E8", VA = "0x84B7E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x84BA34", Offset = "0x84BA34", VA = "0x84BA34")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x849994", Offset = "0x849994", VA = "0x849994")]
	public void AddOnPetExitEvent(UnityAction action)
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x84BA98", Offset = "0x84BA98", VA = "0x84BA98")]
	private void InvokeOnPetExitEvent()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x8486B8", Offset = "0x8486B8", VA = "0x8486B8")]
	public void PetBirdEnter(int cursorIndex)
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x8484E0", Offset = "0x8484E0", VA = "0x8484E0")]
	public void PetBirdStay(float speed)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x8473D4", Offset = "0x8473D4", VA = "0x8473D4")]
	public void ResetPettingComponents()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x848BD4", Offset = "0x848BD4", VA = "0x848BD4")]
	public void PetBirdExit(int cursorIndex)
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x84BBE0", Offset = "0x84BBE0", VA = "0x84BBE0")]
	private void PetBirdExit()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x84BAE4", Offset = "0x84BAE4", VA = "0x84BAE4")]
	private void SetPetSpeedSoundParam(float speed)
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x84BD88", Offset = "0x84BD88", VA = "0x84BD88")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x84BF40", Offset = "0x84BF40", VA = "0x84BF40")]
	public BirdPetControl()
	{
	}
}
[Token(Token = "0x2000080")]
public class BirdPoseControl : MonoBehaviour
{
	[Token(Token = "0x40003FE")]
	private const string kHeadTwistParamName = "HeadTwist";

	[Token(Token = "0x40003FF")]
	private const string kHeadExtendParamName = "HeadExtend";

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x84BFC0", Offset = "0x84BFC0", VA = "0x84BFC0")]
	private void UpdateHeadTwist()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x84C090", Offset = "0x84C090", VA = "0x84C090")]
	private void UpdateHeadExtend()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x847974", Offset = "0x847974", VA = "0x847974")]
	public void CheckPose()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x84702C", Offset = "0x84702C", VA = "0x84702C")]
	public void ResetPose()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x84C160", Offset = "0x84C160", VA = "0x84C160")]
	public BirdPoseControl()
	{
	}
}
[Token(Token = "0x2000081")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x74869C", Offset = "0x74869C")]
public class BirdSettings : ScriptableObject
{
	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74DF7C", Offset = "0x74DF7C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74DF7C", Offset = "0x74DF7C")]
	public Vector2 m_lookTimerMinMax;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 m_headTwistExtendTimerMinMax;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 m_blinkTimerMinMax;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 m_pupilTimerMinMax;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74DFCC", Offset = "0x74DFCC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74DFCC", Offset = "0x74DFCC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74DFCC", Offset = "0x74DFCC")]
	public EyeState[] m_eyeStates;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E040", Offset = "0x74E040")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E040", Offset = "0x74E040")]
	public float m_mood;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E094", Offset = "0x74E094")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E094", Offset = "0x74E094")]
	public float m_idleRate;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E0EC", Offset = "0x74E0EC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E0EC", Offset = "0x74E0EC")]
	public float m_idleIntensity;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74E144", Offset = "0x74E144")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E144", Offset = "0x74E144")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E144", Offset = "0x74E144")]
	public float m_headTwistMultiplier;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E1AC", Offset = "0x74E1AC")]
	public float m_headExtendMultiplier;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E1C4", Offset = "0x74E1C4")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74E1C4", Offset = "0x74E1C4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E1C4", Offset = "0x74E1C4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E1C4", Offset = "0x74E1C4")]
	public float m_minWorldLookAngle;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E254", Offset = "0x74E254")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E254", Offset = "0x74E254")]
	public float m_maxWorldLookAngle;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74E2AC", Offset = "0x74E2AC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E2AC", Offset = "0x74E2AC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E2AC", Offset = "0x74E2AC")]
	public float m_minWorldLookPositionY;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E314", Offset = "0x74E314")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E314", Offset = "0x74E314")]
	public float m_maxWorldLookPositionY;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x74E368", Offset = "0x74E368")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E368", Offset = "0x74E368")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E368", Offset = "0x74E368")]
	public float m_vrNodeInteractionRange;

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x84C168", Offset = "0x84C168", VA = "0x84C168")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x84C1C8", Offset = "0x84C1C8", VA = "0x84C1C8")]
	public BirdSettings()
	{
	}
}
[Token(Token = "0x2000082")]
public class BirdSing : MonoBehaviour
{
	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Notes m_birdNotes;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Melody> m_birdMelodies;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleBundle m_noteParticles;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleBundleInstance m_noteParticlesInstance;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_currentMelodyIdx;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int m_currentBirdNoteIdx;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_currentPlayerNoteIdx;

	[Token(Token = "0x4000416")]
	private const float kSingNextMelodyDelay = 7f;

	[Token(Token = "0x4000417")]
	private const string kWrongPodSound = "Seed_Pod_Turtle_Wrong_Pod";

	[Token(Token = "0x4000418")]
	private const string kMelodyCompleteSound = "Seed_Pod_Turtle_Melody_Complete";

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74E3E0", Offset = "0x74E3E0")]
	private bool <m_isCurrentPuzzleSolved>k__BackingField;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEvent m_OnSingExit;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_hasOnSingExitEvent;

	[Token(Token = "0x17000054")]
	public bool m_isCurrentPuzzleSolved
	{
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x84C29C", Offset = "0x84C29C", VA = "0x84C29C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756DDC", Offset = "0x756DDC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x84C2A4", Offset = "0x84C2A4", VA = "0x84C2A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756DEC", Offset = "0x756DEC")]
		set
		{
		}
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x84C2B0", Offset = "0x84C2B0", VA = "0x84C2B0")]
	public bool IsSetupForToneGameplay()
	{
		return default(bool);
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x84C344", Offset = "0x84C344", VA = "0x84C344")]
	private SerializedNoteType GetNote(int melodyIndex, int noteIndex)
	{
		return null;
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x84C4C0", Offset = "0x84C4C0", VA = "0x84C4C0")]
	public SerializedNoteType GetCurrentBirdNote()
	{
		return null;
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x84C4C8", Offset = "0x84C4C8", VA = "0x84C4C8")]
	public void ResetAllPodHints()
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x84BADC", Offset = "0x84BADC", VA = "0x84BADC")]
	public void ResetNoteIdxs()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x8499CC", Offset = "0x8499CC", VA = "0x8499CC")]
	public void AddOnSingExitEvent(UnityAction action)
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x84C500", Offset = "0x84C500", VA = "0x84C500")]
	public void InvokeOnSingExitEvent()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x849CAC", Offset = "0x849CAC", VA = "0x849CAC")]
	public void SingVictory()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x84C5B0", Offset = "0x84C5B0", VA = "0x84C5B0")]
	private void SingVictoryComplete()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x84C64C", Offset = "0x84C64C", VA = "0x84C64C")]
	private void OnPodTouched(object obj)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x84C9B0", Offset = "0x84C9B0", VA = "0x84C9B0")]
	public void OnSingNote()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x84CC24", Offset = "0x84CC24", VA = "0x84CC24")]
	public void SingNote()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x84BCF0", Offset = "0x84BCF0", VA = "0x84BCF0")]
	public void SingMelody()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x84C924", Offset = "0x84C924", VA = "0x84C924")]
	public void SingMelodyIfBirdIsInIdle()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x84CD50", Offset = "0x84CD50", VA = "0x84CD50")]
	public void PrepareToSingNextMelody(object obj)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x84CE0C", Offset = "0x84CE0C", VA = "0x84CE0C")]
	private void SingFirstMelody(object obj)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x84CE10", Offset = "0x84CE10", VA = "0x84CE10")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x84D028", Offset = "0x84D028", VA = "0x84D028")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x84D1F8", Offset = "0x84D1F8", VA = "0x84D1F8")]
	public BirdSing()
	{
	}
}
[Token(Token = "0x2000083")]
public class BirdStaging : MonoBehaviour, IBirdStaging
{
	[Token(Token = "0x400041C")]
	protected const float kStagingDistance = 5f;

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x84D260", Offset = "0x84D260", VA = "0x84D260", Slot = "5")]
	public virtual Vector3 GetStagingPosition(Vector3 position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x84D264", Offset = "0x84D264", VA = "0x84D264")]
	public BirdStaging()
	{
	}
}
[Token(Token = "0x2000084")]
public class BirdStagingSwanKinetic : BirdStaging
{
	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x84D26C", Offset = "0x84D26C", VA = "0x84D26C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x84D2D0", Offset = "0x84D2D0", VA = "0x84D2D0", Slot = "5")]
	public override Vector3 GetStagingPosition(Vector3 groundPositionOfPod)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x84D3C4", Offset = "0x84D3C4", VA = "0x84D3C4")]
	public BirdStagingSwanKinetic()
	{
	}
}
[Token(Token = "0x2000085")]
public class BirdStagingTurtleKinetic : BirdStaging
{
	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x84D3CC", Offset = "0x84D3CC", VA = "0x84D3CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x84D430", Offset = "0x84D430", VA = "0x84D430", Slot = "5")]
	public override Vector3 GetStagingPosition(Vector3 groundPositionOfPod)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x84D644", Offset = "0x84D644", VA = "0x84D644")]
	public BirdStagingTurtleKinetic()
	{
	}
}
[Token(Token = "0x2000086")]
public interface IBirdStaging
{
	[Token(Token = "0x60003EE")]
	Vector3 GetStagingPosition(Vector3 position);
}
[Token(Token = "0x2000087")]
public class BirdTimers : MonoBehaviour
{
	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StateTimer m_lookTimer;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StateTimer m_headTwistExtendTimer;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public StateTimer m_blinkTriggerTimer;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public StateTimer m_blinkHoldTimer;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public StateTimer m_pupilTimer;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StateTimer m_sleepTimer;

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x846FB0", Offset = "0x846FB0", VA = "0x846FB0")]
	public void ResetTimers()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x84D64C", Offset = "0x84D64C", VA = "0x84D64C")]
	public BirdTimers()
	{
	}
}
[Token(Token = "0x2000088")]
public enum NoteType
{
	[Token(Token = "0x4000424")]
	A,
	[Token(Token = "0x4000425")]
	B,
	[Token(Token = "0x4000426")]
	C,
	[Token(Token = "0x4000427")]
	D,
	[Token(Token = "0x4000428")]
	E,
	[Token(Token = "0x4000429")]
	NULL
}
[Serializable]
[Token(Token = "0x2000089")]
public class SerializedNoteType : SerializableEnum<NoteType>
{
	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x8B21B4", Offset = "0x8B21B4", VA = "0x8B21B4")]
	public SerializedNoteType(NoteType initialValue)
	{
	}
}
[Serializable]
[Token(Token = "0x200008A")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7486AC", Offset = "0x7486AC")]
public class Melody : ScriptableObject
{
	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SerializedNoteType> m_notes;

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x8096B4", Offset = "0x8096B4", VA = "0x8096B4")]
	public Melody()
	{
	}
}
[Token(Token = "0x200008B")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7486BC", Offset = "0x7486BC")]
public class Notes : ScriptableObject
{
	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<string> m_noteSounds;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> m_victorySounds;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Color> m_noteColors;

	[Token(Token = "0x60003F3")]
	private List<T> CheckListSize<T>(List<T> list)
	{
		return null;
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x80CE7C", Offset = "0x80CE7C", VA = "0x80CE7C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x80CEF8", Offset = "0x80CEF8", VA = "0x80CEF8")]
	public Notes()
	{
	}
}
[Token(Token = "0x200008C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7486CC", Offset = "0x7486CC")]
public class CameraNudge2D : MonoBehaviour
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AnimationCurve m_slowInOutCurve;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_delayUntilNudgeActivation;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 m_cameraOffsetPosition;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 m_defaultCameraPosition;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool m_isOffset;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 m_startLerpPosition;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_endLerpPosition;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_isLerping;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_lerpTimer;

	[Token(Token = "0x4000437")]
	private const float kLerpSpeed = 0.5f;

	[Token(Token = "0x4000438")]
	private const float m_lerpToOffsetThreshold = 0.95f;

	[Token(Token = "0x4000439")]
	private const float m_lerpToDefaultThreshold = 0.35f;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_cameraNudgeActivated;

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x84E868", Offset = "0x84E868", VA = "0x84E868")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x84E960", Offset = "0x84E960", VA = "0x84E960")]
	private void ActivateCameraNudge()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x84EB8C", Offset = "0x84EB8C", VA = "0x84EB8C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x84EC84", Offset = "0x84EC84", VA = "0x84EC84")]
	private Vector3 LerpPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x84EDA4", Offset = "0x84EDA4", VA = "0x84EDA4")]
	private void InitLerp(Vector3 end)
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x84EE0C", Offset = "0x84EE0C", VA = "0x84EE0C")]
	private void LerpToDefaultFromEvent(object obj)
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x84EE30", Offset = "0x84EE30", VA = "0x84EE30")]
	private void LerpToDefault()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x84EE40", Offset = "0x84EE40", VA = "0x84EE40")]
	private void LerpToOffset()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x84EEF0", Offset = "0x84EEF0", VA = "0x84EEF0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x84EFE4", Offset = "0x84EFE4", VA = "0x84EFE4")]
	public CameraNudge2D()
	{
	}
}
[Token(Token = "0x200008D")]
public class CameraOrbit2D : MonoBehaviour
{
	[Token(Token = "0x400043B")]
	private const float LOWER_ORBIT_LIMIT = 345f;

	[Token(Token = "0x400043C")]
	private const float UPPER_ORBIT_LIMIT = 50f;

	[Token(Token = "0x400043D")]
	private const float GAMEPAD_ZOOM_SPEED = 1f;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_activateOrbitDelay;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_trackDepthMin;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_trackDepthMax;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_depthTrackMultiplier;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_depthTrackAdjustY;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform m_cameraOrbitPivot;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 m_cameraPositionOnStart;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 m_cursorViewportPosOnOrbitStart;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_cameraLocalEulerAnglesOnOrbitStart;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 m_cursorResetPosition;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_zTrackAccumulator;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_cursorResetTimerCap;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_cursorResetTimer;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool m_orbitActivated;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	private bool m_isOrbiting;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
	private bool m_isTracking;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
	private bool m_isCursorVisResetInProgress;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_orbitMultiplier;

	[Token(Token = "0x4000450")]
	private const string kCameraOrbitPivotName = "CameraOrbitPivot";

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private StampBarnSimple m_stampBarnSimple;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private DepthOfField m_depthOfField;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_defaultFocalDist;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float m_focalDistMult;

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x84F04C", Offset = "0x84F04C", VA = "0x84F04C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x84F190", Offset = "0x84F190", VA = "0x84F190")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x84F22C", Offset = "0x84F22C", VA = "0x84F22C")]
	public bool GetIsOrbiting()
	{
		return default(bool);
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x84F234", Offset = "0x84F234", VA = "0x84F234")]
	private void ActivateOrbit()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x84F45C", Offset = "0x84F45C", VA = "0x84F45C")]
	private bool ShowCursor(bool show)
	{
		return default(bool);
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x84F4B4", Offset = "0x84F4B4", VA = "0x84F4B4")]
	private Vector3 GetCursorViewportPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x84F4DC", Offset = "0x84F4DC", VA = "0x84F4DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x84F6D4", Offset = "0x84F6D4", VA = "0x84F6D4")]
	public float GetScroll()
	{
		return default(float);
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x84F86C", Offset = "0x84F86C", VA = "0x84F86C")]
	public void BeginRotation(Vector3 viewportPos)
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x84F90C", Offset = "0x84F90C", VA = "0x84F90C")]
	public void DuringRotation(Vector3 viewportPos)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x84FA90", Offset = "0x84FA90", VA = "0x84FA90")]
	public void EndRotation()
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x84FA20", Offset = "0x84FA20", VA = "0x84FA20")]
	private float ClampOrbitX(float rawOrbitX)
	{
		return default(float);
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x84FAA0", Offset = "0x84FAA0", VA = "0x84FAA0")]
	public CameraOrbit2D()
	{
	}
}
[Token(Token = "0x200008E")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748730", Offset = "0x748730")]
public class ClothConstraintFromRayCast : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Cloth m_cloth;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ClothSkinningCoefficient[] m_clothCoefficients;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SkinnedMeshRenderer m_skinnedMesh;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3[] m_verts;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] m_newverts;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float m_zNear;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float m_zFar;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float m_aspect;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float m_fov;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float m_lineLength;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int m_growLayer;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int m_maxDistance;

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x8518D0", Offset = "0x8518D0", VA = "0x8518D0", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x851A54", Offset = "0x851A54", VA = "0x851A54")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x852060", Offset = "0x852060", VA = "0x852060")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0x852230", Offset = "0x852230", VA = "0x852230")]
	public ClothConstraintFromRayCast()
	{
	}
}
[Token(Token = "0x200008F")]
public class ClusterBarn : MonoBehaviour
{
	[Token(Token = "0x4000461")]
	private const int CLUSTER_POOL_SIZE = 20;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_clusterGo;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_growables;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_clusterUniqueID;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<GrowableCluster> m_clusterPool;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ClusterBarn s_instance;

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x8522AC", Offset = "0x8522AC", VA = "0x8522AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x852368", Offset = "0x852368", VA = "0x852368")]
	private void Start()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x852398", Offset = "0x852398", VA = "0x852398")]
	public void PopulateClusterDepot(int val)
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0x8523D0", Offset = "0x8523D0", VA = "0x8523D0")]
	public GrowableCluster SpawnCluster()
	{
		return null;
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0x8525C8", Offset = "0x8525C8", VA = "0x8525C8")]
	public GrowableCluster RequestNewCluster()
	{
		return null;
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0x852700", Offset = "0x852700", VA = "0x852700")]
	public ClusterBarn()
	{
	}
}
[Token(Token = "0x2000090")]
public class ColorPicker : CursorInputMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000454")]
	public class OnColorChange : UnityEvent<Color>
	{
		[Token(Token = "0x60022CC")]
		[Address(RVA = "0x7B1EFC", Offset = "0x7B1EFC", VA = "0x7B1EFC")]
		public OnColorChange()
		{
		}
	}

	[Token(Token = "0x2000455")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74ADD0", Offset = "0x74ADD0")]
	private sealed class <>c__DisplayClass44_0
	{
		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float targetValue;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPicker <>4__this;

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0x7B1EB0", Offset = "0x7B1EB0", VA = "0x7B1EB0")]
		public <>c__DisplayClass44_0()
		{
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0x7B1EB8", Offset = "0x7B1EB8", VA = "0x7B1EB8")]
		internal void <RevealPicker>b__0()
		{
		}
	}

	[Token(Token = "0x4000467")]
	private const float SMALL_NUMBER = 0.01f;

	[Token(Token = "0x4000468")]
	private const float CIRCLE_PERCENTAGE_FACTOR = 0.0027777778f;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Vector3 kVectorZero;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float kInnerRadius;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float kOuterRadius;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float kPickerHeight;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float kCursorTickThreshold;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int kNumSwatches;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float kColorPickerScale;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int m_colorOffset;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float m_retainEmissiveAfterPick;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float m_emissiveFadeTime;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject m_colorPickerRig;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E3F0", Offset = "0x74E3F0")]
	public string m_startSoundEvent;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string m_stopSoundEvent;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string m_selectSound;

	[Token(Token = "0x4000477")]
	private const string kEmissionColorProperty = "_EmissionColor";

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E428", Offset = "0x74E428")]
	public string m_openParameter;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int m_openId;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public string m_selectionParameter;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int m_selectionId;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Animator m_animator;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform m_pickerTransform;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public OnColorChange m_onColorChange;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E460", Offset = "0x74E460")]
	public GameObject m_rendererObject;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private MaterialTimer m_materialTimer;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Material m_colorMaterial;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Material m_colorMaterialInstance;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GrowableType m_growableType;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private readonly List<Material> m_materialsForColorEdit;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float m_gradientScroll;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private bool m_hasUserDefinedColor;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int m_lastIndex;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float m_revealAmount;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Quaternion m_lastCursorRotation;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private int m_lastActiveCursor;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private GameObject m_colorPickerRigInstance;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float m_pickerHeight;

	[Token(Token = "0x6000417")]
	[Address(RVA = "0x852C88", Offset = "0x852C88", VA = "0x852C88")]
	public float GetColorIndex()
	{
		return default(float);
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x852C90", Offset = "0x852C90", VA = "0x852C90")]
	public bool HasUserDefinedColor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x852C98", Offset = "0x852C98", VA = "0x852C98")]
	public void SetColorIndexFromSaveData(float gradientScroll)
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x852CA8", Offset = "0x852CA8", VA = "0x852CA8")]
	public void SetColorFromIndex(float gradientScroll)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x852E24", Offset = "0x852E24", VA = "0x852E24")]
	private void SetRevealValue(float newvalue)
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0x852E2C", Offset = "0x852E2C", VA = "0x852E2C")]
	private void RevealPicker(LeanTweenType easingType, float targetValue)
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0x852FB8", Offset = "0x852FB8", VA = "0x852FB8", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0x853164", Offset = "0x853164", VA = "0x853164", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0x853394", Offset = "0x853394", VA = "0x853394", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0x853750", Offset = "0x853750", VA = "0x853750", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0x853A0C", Offset = "0x853A0C", VA = "0x853A0C")]
	public void RebuildMaterial()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x853D48", Offset = "0x853D48", VA = "0x853D48", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x853F50", Offset = "0x853F50", VA = "0x853F50")]
	public void SetDefaultColor()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x852CD0", Offset = "0x852CD0", VA = "0x852CD0")]
	public Color GetGradientColor()
	{
		return default(Color);
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x853FCC", Offset = "0x853FCC", VA = "0x853FCC", Slot = "17")]
	protected override Vector3 GetCursorProjectedPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x8533C8", Offset = "0x8533C8", VA = "0x8533C8")]
	private void ScrollColor()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x852D60", Offset = "0x852D60", VA = "0x852D60")]
	private void ScrollColorOnRenderers(Color color)
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x85412C", Offset = "0x85412C", VA = "0x85412C")]
	private void ScrollColorOnRenderer(Material material, Color color)
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x8541F8", Offset = "0x8541F8", VA = "0x8541F8")]
	private void ScrollEmissiveOnRenderers(Color color)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x8542BC", Offset = "0x8542BC", VA = "0x8542BC")]
	private void ScrollEmissiveOnRenderer(Material material, Color color)
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x8543A8", Offset = "0x8543A8", VA = "0x8543A8", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x8544F4", Offset = "0x8544F4", VA = "0x8544F4")]
	public void OnRenderObject()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x854DAC", Offset = "0x854DAC", VA = "0x854DAC")]
	public ColorPicker()
	{
	}
}
[Token(Token = "0x2000091")]
public class Constellation : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000456")]
	public class Particle
	{
		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 pos;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int idx;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRInput.CursorIndex cursorFilter;

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0x7B51A0", Offset = "0x7B51A0", VA = "0x7B51A0")]
		public Particle(Vector3 _pos)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000457")]
	public class Edge
	{
		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int[] endpointIdxs;

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0x7B50D8", Offset = "0x7B50D8", VA = "0x7B50D8")]
		public Edge(Particle _p0, Particle _p1)
		{
		}
	}

	[Token(Token = "0x400048D")]
	private const float STAR_PUZZLE_LOAD_FUDGE = 2f;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StarPuzzleSettings m_settings;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera m_starPuzzleCamera;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private StarPuzzleInstance[] m_starPuzzleInstances;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_numPuzzlesSolved;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject m_selectedEmitter;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject m_trailSoundEmitter;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private StarPuzzleStar[] m_selectedStar;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] m_selectedStarOldPos;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3[] m_localMousePos;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 m_oldCameraScale;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 m_oldCameraPos;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_handUseBias;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private PrefabPool<StarPuzzleStarTarget> m_starTargetPool;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private PrefabPool<StarPuzzleStar> m_starPool;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PrefabPool<StarLine> m_starLinePool;

	[Token(Token = "0x400049D")]
	private const int MAX_PUZZLE_STARS = 40;

	[Token(Token = "0x400049E")]
	private const int MAX_PUZZLE_LINES = 40;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Foldable.TutorialType m_tutorialType;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool m_lockedByTutorial;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	private bool m_allPuzzlesSolved;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string m_puzzleName;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private string m_soundEvent;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TutorialText m_tutorialText2D;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public TutorialText m_tutorialTextVR;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74E498", Offset = "0x74E498")]
	private bool <InStarMode>k__BackingField;

	[Token(Token = "0x17000055")]
	public Camera StarPuzzleCamera
	{
		[Token(Token = "0x600042E")]
		[Address(RVA = "0x7B2950", Offset = "0x7B2950", VA = "0x7B2950")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000056")]
	public StarPuzzleStar[] SelectedStars
	{
		[Token(Token = "0x600042F")]
		[Address(RVA = "0x7B2958", Offset = "0x7B2958", VA = "0x7B2958")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000057")]
	public StarPuzzleInstance[] StarpuzzleInstances
	{
		[Token(Token = "0x6000430")]
		[Address(RVA = "0x7B2960", Offset = "0x7B2960", VA = "0x7B2960")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000058")]
	public Vector3[] LocalMousePos
	{
		[Token(Token = "0x6000431")]
		[Address(RVA = "0x7B2968", Offset = "0x7B2968", VA = "0x7B2968")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000059")]
	public PrefabPool<StarPuzzleStarTarget> StarTargetPool
	{
		[Token(Token = "0x6000432")]
		[Address(RVA = "0x7B2970", Offset = "0x7B2970", VA = "0x7B2970")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005A")]
	public PrefabPool<StarPuzzleStar> StarPool
	{
		[Token(Token = "0x6000433")]
		[Address(RVA = "0x7B2978", Offset = "0x7B2978", VA = "0x7B2978")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005B")]
	public PrefabPool<StarLine> StarLinePool
	{
		[Token(Token = "0x6000434")]
		[Address(RVA = "0x7B2980", Offset = "0x7B2980", VA = "0x7B2980")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005C")]
	public bool InStarMode
	{
		[Token(Token = "0x6000435")]
		[Address(RVA = "0x7B2988", Offset = "0x7B2988", VA = "0x7B2988")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756DFC", Offset = "0x756DFC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000436")]
		[Address(RVA = "0x7B2990", Offset = "0x7B2990", VA = "0x7B2990")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756E0C", Offset = "0x756E0C")]
		private set
		{
		}
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x7B299C", Offset = "0x7B299C", VA = "0x7B299C")]
	public void LoadFoldablePuzzle(FoldablePuzzle foldablePuzzle)
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x7B2B30", Offset = "0x7B2B30", VA = "0x7B2B30")]
	public void LoadStarPuzzle(StarPuzzle starPuzzle)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x7B2C60", Offset = "0x7B2C60", VA = "0x7B2C60")]
	public void RotateAllStars(float rotDegs)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x7B2CE4", Offset = "0x7B2CE4", VA = "0x7B2CE4")]
	public void EnterStarMode()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x7B31C8", Offset = "0x7B31C8", VA = "0x7B31C8")]
	private void DelayedPuzzleColoring()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x7B32C0", Offset = "0x7B32C0", VA = "0x7B32C0")]
	private void PlayBearTutorialSound()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x7B3390", Offset = "0x7B3390", VA = "0x7B3390")]
	private void DelayedHidingLines()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x7B34DC", Offset = "0x7B34DC", VA = "0x7B34DC")]
	private void PlayFoxTutorialSound()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x7B35AC", Offset = "0x7B35AC", VA = "0x7B35AC")]
	public Vector3 GetMeshCenter()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x7B3778", Offset = "0x7B3778", VA = "0x7B3778")]
	public void ExitStarMode()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x7B39A8", Offset = "0x7B39A8", VA = "0x7B39A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x7B3CA0", Offset = "0x7B3CA0", VA = "0x7B3CA0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x7B3E1C", Offset = "0x7B3E1C", VA = "0x7B3E1C")]
	private void UpdateSelectedEmitters(int cursorIdx)
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x7B3CD8", Offset = "0x7B3CD8", VA = "0x7B3CD8")]
	public void RealUpdate(GameInput gameInput, Camera camera)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x7B429C", Offset = "0x7B429C", VA = "0x7B429C")]
	public bool AllPuzzlesAligned()
	{
		return default(bool);
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x7B4328", Offset = "0x7B4328", VA = "0x7B4328")]
	public bool PuzzleInstancePreSolved()
	{
		return default(bool);
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x7B43F4", Offset = "0x7B43F4", VA = "0x7B43F4")]
	public void PuzzleInstanceSolved()
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x7B4450", Offset = "0x7B4450", VA = "0x7B4450")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x7B4540", Offset = "0x7B4540", VA = "0x7B4540")]
	private void SetCursorPos(int cursorIdx)
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x7B4094", Offset = "0x7B4094", VA = "0x7B4094")]
	private void UpdateSelectedParticleFromGame(int cursorIdx)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x7B3F64", Offset = "0x7B3F64", VA = "0x7B3F64")]
	public StarPuzzleStar GetSelectedStar(int cursorIdx)
	{
		return null;
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x7B4818", Offset = "0x7B4818", VA = "0x7B4818")]
	public void OnTouchUpFromGame(int cursorIdx)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x7B49EC", Offset = "0x7B49EC", VA = "0x7B49EC")]
	public void OnTouchUpShared(int cursorIdx)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x7B4BC4", Offset = "0x7B4BC4", VA = "0x7B4BC4")]
	public Vector3 GetLocalMousePos(int cursorIdx)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x7B4C14", Offset = "0x7B4C14", VA = "0x7B4C14")]
	public void OnTouchDown(int cursorIdx)
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x7B4DD8", Offset = "0x7B4DD8", VA = "0x7B4DD8")]
	public void SelectStar(StarPuzzleStar selected, int cursorIdx)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x7B4FD4", Offset = "0x7B4FD4", VA = "0x7B4FD4")]
	private void PlayStarTrail()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x7B4AC8", Offset = "0x7B4AC8", VA = "0x7B4AC8")]
	private void StopStarTrail()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x7B479C", Offset = "0x7B479C", VA = "0x7B479C")]
	private void SetStarTrailIntensity(float speed)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x7B3FA8", Offset = "0x7B3FA8", VA = "0x7B3FA8")]
	public void UpdateInput(GameInput gameInput)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x7B4844", Offset = "0x7B4844", VA = "0x7B4844")]
	private void UpdateSelectedAlignSounds(int cursorIdx)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x7B3090", Offset = "0x7B3090", VA = "0x7B3090")]
	private void ShowTutorial()
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x7B50D0", Offset = "0x7B50D0", VA = "0x7B50D0")]
	public Constellation()
	{
	}
}
[Token(Token = "0x2000092")]
public class ControlsDisplay : MonoBehaviour
{
	[Token(Token = "0x2000458")]
	public enum ControlsDisplayState
	{
		[Token(Token = "0x4001F15")]
		None,
		[Token(Token = "0x4001F16")]
		Display,
		[Token(Token = "0x4001F17")]
		ToSelect,
		[Token(Token = "0x4001F18")]
		Select
	}

	[Token(Token = "0x40004A7")]
	private const string kImageName = "RawImage";

	[Token(Token = "0x40004A8")]
	private const string kControllerImageName = "ControllerImage";

	[Token(Token = "0x40004A9")]
	private const string kOtherImageName = "OtherImage";

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ControlsDisplayState m_state;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ControlsDisplayAssets m_displayAssets;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ControlsDisplayAssets.ControlsDisplayForLanguage m_assets;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_canvas;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject m_canvasVR;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RawImage m_image;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RawImage m_controllerImage;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RawImage m_otherImage;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Text m_otherText;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 m_frozenPos;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Quaternion m_frozenRot;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool m_isFrozen;

	[Token(Token = "0x1700005D")]
	public ControlsDisplayState State
	{
		[Token(Token = "0x6000458")]
		[Address(RVA = "0x7B5300", Offset = "0x7B5300", VA = "0x7B5300")]
		get
		{
			return default(ControlsDisplayState);
		}
		[Token(Token = "0x6000459")]
		[Address(RVA = "0x7B5308", Offset = "0x7B5308", VA = "0x7B5308")]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	private GameObject Canvas
	{
		[Token(Token = "0x600045A")]
		[Address(RVA = "0x7B54F8", Offset = "0x7B54F8", VA = "0x7B54F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x7B5574", Offset = "0x7B5574", VA = "0x7B5574")]
	private void Awake()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x7B57F0", Offset = "0x7B57F0", VA = "0x7B57F0")]
	private void Start()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x7B5C84", Offset = "0x7B5C84", VA = "0x7B5C84")]
	private void Update()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x7B5F0C", Offset = "0x7B5F0C", VA = "0x7B5F0C")]
	private void UpdateSelect()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x7B5DF4", Offset = "0x7B5DF4", VA = "0x7B5DF4")]
	private void UpdateDisplay()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x7B6064", Offset = "0x7B6064", VA = "0x7B6064")]
	public void Freeze()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x7B60C8", Offset = "0x7B60C8", VA = "0x7B60C8")]
	public void UnFreeze()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x7B61F4", Offset = "0x7B61F4", VA = "0x7B61F4")]
	public void SetVisibility(bool isVisible)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x7B6020", Offset = "0x7B6020", VA = "0x7B6020")]
	private void ToggleVisibility()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x7B5B2C", Offset = "0x7B5B2C", VA = "0x7B5B2C")]
	private Texture GetImageForPlatform(VRTargetUtil.VRTarget platform, ControlsDisplayAssets.ControlsDisplayForLanguage assets)
	{
		return null;
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x7B5C68", Offset = "0x7B5C68", VA = "0x7B5C68")]
	private Texture GetSelectImageForPlatform(VRTargetUtil.VRTarget platform, ControlsDisplayAssets.ControlsDisplayForLanguage assets)
	{
		return null;
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x7B5A9C", Offset = "0x7B5A9C", VA = "0x7B5A9C")]
	private ControlsDisplayAssets.ControlsDisplayForLanguage GetAssetsForLanguage(SystemLanguage language)
	{
		return null;
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x7B5310", Offset = "0x7B5310", VA = "0x7B5310")]
	private void StateChanged()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x7B632C", Offset = "0x7B632C", VA = "0x7B632C")]
	public ControlsDisplay()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x7B6334", Offset = "0x7B6334", VA = "0x7B6334")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756E1C", Offset = "0x756E1C")]
	private void <StateChanged>b__33_0()
	{
	}
}
[Token(Token = "0x2000093")]
public class CreateModeCinematicControl : MonoBehaviour
{
	[Token(Token = "0x2000459")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74ADE0", Offset = "0x74ADE0")]
	private sealed class <ActivateScribble>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CreateModeCinematicControl <>4__this;

		[Token(Token = "0x17000378")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022D4")]
			[Address(RVA = "0x7B7C54", Offset = "0x7B7C54", VA = "0x7B7C54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000379")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022D6")]
			[Address(RVA = "0x7B7CC0", Offset = "0x7B7CC0", VA = "0x7B7CC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0x7B6C04", Offset = "0x7B6C04", VA = "0x7B6C04")]
		[DebuggerHidden]
		public <ActivateScribble>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0x7B7AC4", Offset = "0x7B7AC4", VA = "0x7B7AC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022D3")]
		[Address(RVA = "0x7B7AC8", Offset = "0x7B7AC8", VA = "0x7B7AC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0x7B7C5C", Offset = "0x7B7C5C", VA = "0x7B7C5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200045A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74ADF0", Offset = "0x74ADF0")]
	private sealed class <StartCinematic>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CreateModeCinematicControl <>4__this;

		[Token(Token = "0x1700037A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022DA")]
			[Address(RVA = "0x7B7E5C", Offset = "0x7B7E5C", VA = "0x7B7E5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022DC")]
			[Address(RVA = "0x7B7EC8", Offset = "0x7B7EC8", VA = "0x7B7EC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022D7")]
		[Address(RVA = "0x7B6CA4", Offset = "0x7B6CA4", VA = "0x7B6CA4")]
		[DebuggerHidden]
		public <StartCinematic>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x60022D8")]
		[Address(RVA = "0x7B7CC8", Offset = "0x7B7CC8", VA = "0x7B7CC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022D9")]
		[Address(RVA = "0x7B7CCC", Offset = "0x7B7CCC", VA = "0x7B7CCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022DB")]
		[Address(RVA = "0x7B7E64", Offset = "0x7B7E64", VA = "0x7B7E64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E4A8", Offset = "0x74E4A8")]
	public float m_levelCompleteAndCinematic;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_birdSingAndScribbleSpawn;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_scribbleAppearSound;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PhysicsRotate m_terrariumRotator;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform m_terrariumRoot;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 m_terrariumRootStartEulerAngles;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string m_birdScribbleCallSound;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform m_teleportBeacon;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform m_lookBeacon;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 m_teleportPosition;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Camera m_2dIntroCamera;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Camera m_2dHealingCamera;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Camera m_2dOutroCamera;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E4E0", Offset = "0x74E4E0")]
	public float m_teleportScaleValue;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 m_teleportScale;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 m_returnToCreateScale;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 m_returnToCreatePosition;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 m_returnToCreateLookAtPosition;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject m_scribbleCreate;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool m_cinematicHasStarted;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool m_zonesForcedActive;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	private bool m_teleportReturnStarted;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float m_timeOnAwake;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float m_timeSinceAwake;

	[Token(Token = "0x40004CE")]
	private const float kFadeSpeed = 0.5f;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E518", Offset = "0x74E518")]
	public float m_minutesUntilScribble;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float m_secondsUntilScribble;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E550", Offset = "0x74E550")]
	public GameObject m_heroAnimal;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E588", Offset = "0x74E588")]
	public GameObject[] m_heroAnimalHintGameObjects;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public UnityEvent m_OnTeleport;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public UnityEvent m_OnTeleportReturn;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool m_levelComplete;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	public static bool m_inCutscene;

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x7B635C", Offset = "0x7B635C", VA = "0x7B635C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0x7B670C", Offset = "0x7B670C", VA = "0x7B670C")]
	private void Start()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x7B697C", Offset = "0x7B697C", VA = "0x7B697C")]
	private void CalcWorldBounds()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x7B69DC", Offset = "0x7B69DC", VA = "0x7B69DC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x7B6A7C", Offset = "0x7B6A7C", VA = "0x7B6A7C")]
	public bool GetIsLevelComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x7B6A84", Offset = "0x7B6A84", VA = "0x7B6A84")]
	public void SetIsLevelComplete()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x7B6A90", Offset = "0x7B6A90", VA = "0x7B6A90")]
	private void DeactivateHeroAnimalHintGameObjects()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x7B6B90", Offset = "0x7B6B90", VA = "0x7B6B90")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x756E2C", Offset = "0x756E2C")]
	private IEnumerator ActivateScribble()
	{
		return null;
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x7B6C30", Offset = "0x7B6C30", VA = "0x7B6C30")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x756E90", Offset = "0x756E90")]
	private IEnumerator StartCinematic()
	{
		return null;
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x7B6CD0", Offset = "0x7B6CD0", VA = "0x7B6CD0")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x756EF4", Offset = "0x756EF4")]
	public void Teleport()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x7B7020", Offset = "0x7B7020", VA = "0x7B7020")]
	private void RecenterCamera()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x7B707C", Offset = "0x7B707C", VA = "0x7B707C")]
	private void TeleportReturnCallback()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x7B7298", Offset = "0x7B7298", VA = "0x7B7298")]
	private void TeleportReturn(object obj)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x7B7388", Offset = "0x7B7388", VA = "0x7B7388")]
	public void TriggerScribbleActivation()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0x7B73CC", Offset = "0x7B73CC", VA = "0x7B73CC")]
	public void ForceCreateModeLightingToCompletion()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0x7B746C", Offset = "0x7B746C", VA = "0x7B746C")]
	private void Update()
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0x7B758C", Offset = "0x7B758C", VA = "0x7B758C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0x7B79F0", Offset = "0x7B79F0", VA = "0x7B79F0")]
	public CreateModeCinematicControl()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x7B7A6C", Offset = "0x7B7A6C", VA = "0x7B7A6C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756F2C", Offset = "0x756F2C")]
	private void <Start>b__34_0()
	{
	}
}
[Token(Token = "0x2000094")]
public class CreateModeGrowableData : MonoBehaviour
{
	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E5D0", Offset = "0x74E5D0")]
	public GrowableTypeSet m_storyModeGrowableTypeSet;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E608", Offset = "0x74E608")]
	public GrowableTypeSet m_editModeGrowableTypeSet;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CreateModeGrowableData s_instance;

	[Token(Token = "0x1700005F")]
	public static GrowableTypeSet ActiveGrowableTypeSet
	{
		[Token(Token = "0x600047E")]
		[Address(RVA = "0x7B7F24", Offset = "0x7B7F24", VA = "0x7B7F24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x7B7ED0", Offset = "0x7B7ED0", VA = "0x7B7ED0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x7B7F84", Offset = "0x7B7F84", VA = "0x7B7F84")]
	public CreateModeGrowableData()
	{
	}
}
[Token(Token = "0x2000095")]
public class Dragonfly : PathMeshCritterMonoBehaviour
{
	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Renderer[] m_renderers;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int meshFrame;

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x7F28C4", Offset = "0x7F28C4", VA = "0x7F28C4", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x7F2928", Offset = "0x7F2928", VA = "0x7F2928", Slot = "9")]
	public override void Die()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x7F29C8", Offset = "0x7F29C8", VA = "0x7F29C8", Slot = "10")]
	protected override void Revive()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x7F2950", Offset = "0x7F2950", VA = "0x7F2950")]
	private void DisableMeshes()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x7F29D0", Offset = "0x7F29D0", VA = "0x7F29D0")]
	private void AnimateMesh()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x7F2A60", Offset = "0x7F2A60", VA = "0x7F2A60", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x7F2AAC", Offset = "0x7F2AAC", VA = "0x7F2AAC")]
	public Dragonfly()
	{
	}
}
[Token(Token = "0x2000096")]
public class Koi : PathMeshCritterMonoBehaviour
{
	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Animator m_animator;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public AnimationCurveScriptableObject m_tailFlopCurve;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public AnimationCurveScriptableObject m_turnIntensityCurve;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public AnimationCurveScriptableObject m_jumpToEatPositionCurve;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public AnimationCurveScriptableObject m_jumpToEatRotationCurve;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private int kLayerInverseMask;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private float m_jumpHeight;

	[Token(Token = "0x40004E3")]
	private const float kLocalTransSwimRotationMultiplier = 30f;

	[Token(Token = "0x40004E4")]
	private const float kLocalTransJumpRotationMultiplier = 90f;

	[Token(Token = "0x40004E5")]
	private const float kJumpToEatSafeLandingSqrMagDistance = 625f;

	[Token(Token = "0x40004E6")]
	private const float kJumpToEatRaycastStartHeight = 30f;

	[Token(Token = "0x40004E7")]
	private const float kJumpToEatRaycastDepth = 40f;

	[Token(Token = "0x40004E8")]
	private const string kLeanParam = "Lean";

	[Token(Token = "0x40004E9")]
	private const string kMoveParam = "Move";

	[Token(Token = "0x40004EA")]
	private const string kEatParam = "Eat";

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private int m_leanParamId;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private int m_moveParamId;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int m_eatParamId;

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x7DC52C", Offset = "0x7DC52C", VA = "0x7DC52C", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x7DC6AC", Offset = "0x7DC6AC", VA = "0x7DC6AC")]
	private void JumpEnd()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x7DC824", Offset = "0x7DC824", VA = "0x7DC824")]
	private void DriveKoiSwim()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x7DC91C", Offset = "0x7DC91C", VA = "0x7DC91C")]
	private void DriveKoiJump()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x7DCAFC", Offset = "0x7DCAFC", VA = "0x7DCAFC", Slot = "7")]
	protected override void Eat()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x7DCCCC", Offset = "0x7DCCCC", VA = "0x7DCCCC", Slot = "11")]
	protected override void StartInteraction(PathMeshCritterMonoBehaviour critterInteractor)
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x7DD1C4", Offset = "0x7DD1C4", VA = "0x7DD1C4")]
	public Koi()
	{
	}
}
[Token(Token = "0x2000097")]
public class KoiBaby : PathMeshCritterMonoBehaviour
{
	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Animator m_animator;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public AnimationCurveScriptableObject m_tailFlopCurve;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public AnimationCurveScriptableObject m_turnIntensityCurve;

	[Token(Token = "0x40004F1")]
	private const float kLocalTransSwimRotationMultiplier = 30f;

	[Token(Token = "0x40004F2")]
	private const string kAnimParamName = "Lean";

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int m_animParamId;

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x7DD1CC", Offset = "0x7DD1CC", VA = "0x7DD1CC", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x7DD2A4", Offset = "0x7DD2A4", VA = "0x7DD2A4")]
	private void DriveKoiSwim()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x7DD39C", Offset = "0x7DD39C", VA = "0x7DD39C")]
	public KoiBaby()
	{
	}
}
[Token(Token = "0x2000098")]
public class PathMeshCritterMonoBehaviour : MonoBehaviour
{
	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PathMeshType m_pathMeshType;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_pathMeshName;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E640", Offset = "0x74E640")]
	public float m_moveSpeed;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool m_pauseAtPathPoints;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E65C", Offset = "0x74E65C")]
	public float m_minPathPointPauseTime;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E674", Offset = "0x74E674")]
	public float m_maxPathPointPauseTime;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int m_maxNumberOfSpawns;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject m_critterToSpawn;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E68C", Offset = "0x74E68C")]
	public float m_curvedPathMeshMovementValue;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74E6A4", Offset = "0x74E6A4")]
	public float m_inheritRotationValue;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E6BC", Offset = "0x74E6BC")]
	public float m_aliveResetTime;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float m_eatResetTime;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float m_spawnResetTime;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public StateController m_aliveState;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public StateController m_eatState;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public StateController m_spawnState;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected PathMeshCritterMonoBehaviour m_currentCritterInteractor;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected float m_cachedCurvedPathMeshMovementValue;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected float m_cachedInheritRotationValue;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected Transform m_localTrans;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected MoveControl m_moveControl;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected readonly Vector3 m_localTransEulerAngles;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected float m_pathTurnAngle;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Collider m_collider;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected PathMesh m_pathMesh;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected int m_pathPointIndex;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int m_lastPathPointIndex;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3[] m_lastPositions;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private StateTimer m_pathPointPauseTimer;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool m_isPausedAtPathPoint;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	private bool m_isMarkedForDeath;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private PathPosition[] pathPositions;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private int[] pathPositionIndexesToAverage;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int m_remainingSpawns;

	[Token(Token = "0x4000516")]
	private const int kPathMeshRadiusMultiplier = 16;

	[Token(Token = "0x4000517")]
	private const float kPathTurnAngleDivisor = 120f;

	[Token(Token = "0x4000518")]
	private const float kPathTurnAngleSubtrahend = 360f;

	[Token(Token = "0x4000519")]
	private const float kBaseMoveSpeed = 1f;

	[Token(Token = "0x400051A")]
	private const int kNumPathPositions = 200;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private List<StateController> m_stateControllers;

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x813880", Offset = "0x813880", VA = "0x813880")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x813A68", Offset = "0x813A68", VA = "0x813A68", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x813F60", Offset = "0x813F60", VA = "0x813F60")]
	protected void InitializePointAxis()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x8141BC", Offset = "0x8141BC", VA = "0x8141BC")]
	protected void SetPathPositions()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x8144F0", Offset = "0x8144F0", VA = "0x8144F0")]
	private void SetColliderState(bool state)
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x814598", Offset = "0x814598", VA = "0x814598")]
	protected void EnableCollider()
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x813A60", Offset = "0x813A60", VA = "0x813A60")]
	public void DisableCollider()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x814404", Offset = "0x814404", VA = "0x814404")]
	protected Vector3 GetLocalPositionInTerrarium()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x8145A0", Offset = "0x8145A0", VA = "0x8145A0")]
	protected void GetNextPathPoint()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x814A1C", Offset = "0x814A1C", VA = "0x814A1C")]
	protected void GetClosestPathPoint()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x814468", Offset = "0x814468", VA = "0x814468")]
	protected Vector3 GetMoveToPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x8147E8", Offset = "0x8147E8", VA = "0x8147E8")]
	protected void MoveToPathPoint()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x8142F0", Offset = "0x8142F0", VA = "0x8142F0")]
	protected void Move()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x8147DC", Offset = "0x8147DC", VA = "0x8147DC")]
	protected void PauseAtPathPoint()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x814A6C", Offset = "0x814A6C", VA = "0x814A6C", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x814FAC", Offset = "0x814FAC", VA = "0x814FAC", Slot = "6")]
	protected virtual void Spawn()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x8151D8", Offset = "0x8151D8", VA = "0x8151D8", Slot = "7")]
	protected virtual void Eat()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x8151F8", Offset = "0x8151F8", VA = "0x8151F8")]
	public bool GetIsMarkedForDeath()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x815200", Offset = "0x815200", VA = "0x815200", Slot = "8")]
	public virtual void MarkForDeath()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x81520C", Offset = "0x81520C", VA = "0x81520C")]
	public bool GetIsMoving()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x81522C", Offset = "0x81522C", VA = "0x81522C", Slot = "9")]
	public virtual void Die()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x815274", Offset = "0x815274", VA = "0x815274", Slot = "10")]
	protected virtual void Revive()
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x8152A0", Offset = "0x8152A0", VA = "0x8152A0")]
	protected void NullCritterInteractor()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x8152A8", Offset = "0x8152A8", VA = "0x8152A8", Slot = "11")]
	protected virtual void StartInteraction(PathMeshCritterMonoBehaviour critterInteractor)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x8152B0", Offset = "0x8152B0", VA = "0x8152B0")]
	private void CheckCritterInteractor(GameObject interactor)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x8153A4", Offset = "0x8153A4", VA = "0x8153A4")]
	public void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x8153E0", Offset = "0x8153E0", VA = "0x8153E0")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x81541C", Offset = "0x81541C", VA = "0x81541C")]
	public PathMeshCritterMonoBehaviour()
	{
	}
}
[Token(Token = "0x2000099")]
public class CursorController2D : CursorControllerBase
{
	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CursorController2D _instance;

	[Token(Token = "0x400051D")]
	private const float VIEWPORT_SIZE_MULT_LERP_TIME = 1f;

	[Token(Token = "0x400051E")]
	private const float COLLIDER_RADIUS = 1.42f;

	[Token(Token = "0x400051F")]
	private const float MENU_COLLIDER_RADIUS = 0.1f;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float kSpeed;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float kCursorLerp;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float kEmitterViewportSize;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float kDistFromClipPlane;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private ParticleSystem m_emitter;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 m_cursorPos;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector3 m_viewportPosRaw;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Vector3 m_viewportPosFiltered;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float m_viewportSizeMultTimeChanged;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float m_oldViewportSizeMult;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float m_newViewportSizeMult;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float m_viewportSizeMult;

	[Token(Token = "0x17000060")]
	public static CursorController2D Instance
	{
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x7BB32C", Offset = "0x7BB32C", VA = "0x7BB32C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x7BB37C", Offset = "0x7BB37C", VA = "0x7BB37C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public override Vector3 WorldPosition
	{
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x7BB3D0", Offset = "0x7BB3D0", VA = "0x7BB3D0", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000062")]
	public Vector3 ViewportPos
	{
		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x7BB3DC", Offset = "0x7BB3DC", VA = "0x7BB3DC")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000063")]
	public Vector3 ProjectedPos
	{
		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x7BB3E8", Offset = "0x7BB3E8", VA = "0x7BB3E8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x7BB404", Offset = "0x7BB404", VA = "0x7BB404")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x7BB5E8", Offset = "0x7BB5E8", VA = "0x7BB5E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x7BB6C0", Offset = "0x7BB6C0", VA = "0x7BB6C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x7BB898", Offset = "0x7BB898", VA = "0x7BB898")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x7BB924", Offset = "0x7BB924", VA = "0x7BB924")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x7BBD88", Offset = "0x7BBD88", VA = "0x7BBD88")]
	public void SetViewportSizeMultiplier(float multiplier = 1f)
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x7BBCEC", Offset = "0x7BBCEC", VA = "0x7BBCEC")]
	private void UpdateViewPortSizeMult()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x7BBDC8", Offset = "0x7BBDC8", VA = "0x7BBDC8")]
	public void SetViewportPos(Vector3 viewportPos)
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x7BBDD8", Offset = "0x7BBDD8", VA = "0x7BBDD8", Slot = "7")]
	public override bool IsCursorVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x7BBE04", Offset = "0x7BBE04", VA = "0x7BBE04", Slot = "8")]
	protected override void ToggleCursor(bool visible)
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x7BBE60", Offset = "0x7BBE60", VA = "0x7BBE60")]
	public CursorController2D()
	{
	}
}
[Token(Token = "0x200009A")]
public class CursorControllerBase : MonoBehaviour
{
	[Token(Token = "0x400052D")]
	private const string MAIN_CAMERA_TAG = "MainCamera";

	[Token(Token = "0x400052E")]
	private const float COLLIDER_RADIUS = 1.5f;

	[Token(Token = "0x400052F")]
	private const float MENU_COLLIDER_RADIUS = 0.01f;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected readonly Vector3 kVectorZero;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected readonly Vector3 kVectorOne;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected readonly Vector3 kVectorUp;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected readonly Vector3 kVectorForward;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected readonly Vector3 kVectorRight;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected readonly Vector3 kViewportCenter;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Camera m_camera;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Animator m_cameraAnimator;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected bool m_isExitingLevel;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	protected bool m_lastShowCursor;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	private bool m_lastVisible;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected float m_speed;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected Vector3 m_viewportPosition;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Collider m_collider;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74E6F4", Offset = "0x74E6F4")]
	private Vector3 <ProjectionOrigin>k__BackingField;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74E704", Offset = "0x74E704")]
	private Vector3 <CurrentSpeed>k__BackingField;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74E714", Offset = "0x74E714")]
	private SimpleThrowablePhysicsObject <HeldThrowable>k__BackingField;

	[Token(Token = "0x17000064")]
	public Camera Camera
	{
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x7BBF70", Offset = "0x7BBF70", VA = "0x7BBF70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000065")]
	public virtual Vector3 WorldPosition
	{
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x7BBF78", Offset = "0x7BBF78", VA = "0x7BBF78", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000066")]
	public Vector3 ViewportPosition
	{
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x7BBFA4", Offset = "0x7BBFA4", VA = "0x7BBFA4")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x7BBFB0", Offset = "0x7BBFB0", VA = "0x7BBFB0")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000067")]
	public Vector3 ProjectionOrigin
	{
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x7BC044", Offset = "0x7BC044", VA = "0x7BC044")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756F3C", Offset = "0x756F3C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x7BC050", Offset = "0x7BC050", VA = "0x7BC050")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756F4C", Offset = "0x756F4C")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000068")]
	public virtual Vector3 CurrentSpeed
	{
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x7BC05C", Offset = "0x7BC05C", VA = "0x7BC05C", Slot = "5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756F5C", Offset = "0x756F5C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x7BC068", Offset = "0x7BC068", VA = "0x7BC068", Slot = "6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756F6C", Offset = "0x756F6C")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000069")]
	public SimpleThrowablePhysicsObject HeldThrowable
	{
		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x7BC074", Offset = "0x7BC074", VA = "0x7BC074")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756F7C", Offset = "0x756F7C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x7BC07C", Offset = "0x7BC07C", VA = "0x7BC07C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756F8C", Offset = "0x756F8C")]
		set
		{
		}
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x7BC084", Offset = "0x7BC084", VA = "0x7BC084")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x7BC0A0", Offset = "0x7BC0A0", VA = "0x7BC0A0", Slot = "7")]
	public virtual bool IsCursorVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x7BB4FC", Offset = "0x7BB4FC", VA = "0x7BB4FC")]
	protected void AddEventListeners()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x7BB7AC", Offset = "0x7BB7AC", VA = "0x7BB7AC")]
	protected void RemoveEventListeners()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x7BB6A8", Offset = "0x7BB6A8", VA = "0x7BB6A8")]
	public void ShowCursor(bool show)
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x7BC0A8", Offset = "0x7BC0A8", VA = "0x7BC0A8")]
	private void UnlockCursor(object obj)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x7BC138", Offset = "0x7BC138", VA = "0x7BC138")]
	private void DisableAndLockCursor(object obj)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x7BC1C8", Offset = "0x7BC1C8", VA = "0x7BC1C8")]
	protected void UpdateCameraReferences()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x7BC320", Offset = "0x7BC320", VA = "0x7BC320")]
	protected bool ShouldHideForCameraAnimation()
	{
		return default(bool);
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x7BB89C", Offset = "0x7BB89C", VA = "0x7BB89C")]
	protected void UpdateCursorVisibility()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x7BBE5C", Offset = "0x7BBE5C", VA = "0x7BBE5C", Slot = "8")]
	protected virtual void ToggleCursor(bool visible)
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x7BC410", Offset = "0x7BC410", VA = "0x7BC410", Slot = "9")]
	public virtual void OnCursorEnable()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x7BC414", Offset = "0x7BC414", VA = "0x7BC414", Slot = "10")]
	public virtual void OnCursorDisable()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x7BC418", Offset = "0x7BC418", VA = "0x7BC418", Slot = "11")]
	public virtual void SetViewportPosition(Vector2 newPosition)
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x7BC49C", Offset = "0x7BC49C", VA = "0x7BC49C")]
	public void UpdateCursorCollider(bool isOnMenu)
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x7BC598", Offset = "0x7BC598", VA = "0x7BC598", Slot = "12")]
	public virtual void Ping(bool ignoreVisibility)
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x7BC59C", Offset = "0x7BC59C", VA = "0x7BC59C", Slot = "13")]
	public virtual Vector3 ControllerInput()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x7BBE80", Offset = "0x7BBE80", VA = "0x7BBE80")]
	public CursorControllerBase()
	{
	}
}
[Token(Token = "0x200009B")]
public class CursorInputMonoBehaviourUpdater : MonoBehaviour
{
	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x7BE7F0", Offset = "0x7BE7F0", VA = "0x7BE7F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x7BE84C", Offset = "0x7BE84C", VA = "0x7BE84C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x7BE8A8", Offset = "0x7BE8A8", VA = "0x7BE8A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x7BEA38", Offset = "0x7BEA38", VA = "0x7BEA38")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x7BEBC8", Offset = "0x7BEBC8", VA = "0x7BEBC8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x7BED58", Offset = "0x7BED58", VA = "0x7BED58")]
	public CursorInputMonoBehaviourUpdater()
	{
	}
}
[Token(Token = "0x200009C")]
public class CursorProjector : MonoBehaviour
{
	[Token(Token = "0x4000541")]
	public const string TURN_RING_TAG = "TurnRing";

	[Token(Token = "0x4000542")]
	private const float GRAB_PROJECTION_FUDGE = -2f;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74E724", Offset = "0x74E724")]
	private bool <OverrideMode>k__BackingField;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74E734", Offset = "0x74E734")]
	private bool <OverrideSetDepth>k__BackingField;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_pos;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private LayerMask m_layerMask;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LayerMask m_waterMask;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private LayerMask m_throwableMask;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LayerMask m_paletteMask;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RaycastHit[] m_registeredHits;

	[Token(Token = "0x1700006A")]
	public bool OverrideMode
	{
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x7BF22C", Offset = "0x7BF22C", VA = "0x7BF22C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756F9C", Offset = "0x756F9C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x7BF234", Offset = "0x7BF234", VA = "0x7BF234")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756FAC", Offset = "0x756FAC")]
		set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public bool OverrideSetDepth
	{
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x7BF240", Offset = "0x7BF240", VA = "0x7BF240")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756FBC", Offset = "0x756FBC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x7BF248", Offset = "0x7BF248", VA = "0x7BF248")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756FCC", Offset = "0x756FCC")]
		set
		{
		}
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x7BF254", Offset = "0x7BF254", VA = "0x7BF254")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x7BF500", Offset = "0x7BF500", VA = "0x7BF500")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x7BF988", Offset = "0x7BF988", VA = "0x7BF988")]
	private bool IsTurnRingAndOccluding(int index, int lastIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x7BFA54", Offset = "0x7BFA54", VA = "0x7BFA54")]
	private bool IsWaterSurface(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x7BFAF4", Offset = "0x7BFAF4", VA = "0x7BFAF4")]
	private bool IsThrowable(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x7BFB94", Offset = "0x7BFB94", VA = "0x7BFB94")]
	private bool IsPalette(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x7BFC34", Offset = "0x7BFC34", VA = "0x7BFC34")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x7BFCD0", Offset = "0x7BFCD0", VA = "0x7BFCD0")]
	public CursorProjector()
	{
	}
}
[Token(Token = "0x200009D")]
public class DecorativeFillerControl : MonoBehaviour
{
	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E744", Offset = "0x74E744")]
	public int[] m_triggerValues;

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x7C0A40", Offset = "0x7C0A40", VA = "0x7C0A40")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x7C0AE0", Offset = "0x7C0AE0", VA = "0x7C0AE0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x7C0B80", Offset = "0x7C0B80", VA = "0x7C0B80")]
	public void CheckGrowablePopulation(object obj)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x7C0C88", Offset = "0x7C0C88", VA = "0x7C0C88")]
	public DecorativeFillerControl()
	{
	}
}
[Token(Token = "0x200009E")]
public class DelayBarn : MonoBehaviour
{
	[Token(Token = "0x200045B")]
	public delegate void OnDelayedCallback();

	[Token(Token = "0x200045C")]
	private class DelayedCallback
	{
		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m_timeLeft;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OnDelayedCallback m_callback;

		[Token(Token = "0x60022E1")]
		[Address(RVA = "0x7C12DC", Offset = "0x7C12DC", VA = "0x7C12DC")]
		public DelayedCallback()
		{
		}
	}

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<DelayedCallback> m_delayedCallbacks;

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x7B2FC0", Offset = "0x7B2FC0", VA = "0x7B2FC0")]
	public void AddDelayedCallback(float delayTime, OnDelayedCallback callback)
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x7C1098", Offset = "0x7C1098", VA = "0x7C1098")]
	public void CancelDelayedCallback(OnDelayedCallback callback)
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x7C12E4", Offset = "0x7C12E4", VA = "0x7C12E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x7C134C", Offset = "0x7C134C", VA = "0x7C134C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x7C1690", Offset = "0x7C1690", VA = "0x7C1690")]
	public DelayBarn()
	{
	}
}
[Token(Token = "0x200009F")]
public class DisplayControlsScene : MonoBehaviour
{
	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kDisplayTime;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ControlsDisplay m_controlsDisplay;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_controlsDisplayObject;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_displayTimer;

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x7F24A4", Offset = "0x7F24A4", VA = "0x7F24A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x7F254C", Offset = "0x7F254C", VA = "0x7F254C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x7F2654", Offset = "0x7F2654", VA = "0x7F2654")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x7F26FC", Offset = "0x7F26FC", VA = "0x7F26FC")]
	public DisplayControlsScene()
	{
	}
}
[Token(Token = "0x20000A0")]
public class EnergyBarn : CursorInputMonoBehaviour
{
	[Token(Token = "0x200045D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE00", Offset = "0x74AE00")]
	private sealed class <>c__DisplayClass39_0
	{
		[Token(Token = "0x4001F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float pointRatio;

		[Token(Token = "0x60022E2")]
		[Address(RVA = "0x7F419C", Offset = "0x7F419C", VA = "0x7F419C")]
		public <>c__DisplayClass39_0()
		{
		}

		[Token(Token = "0x60022E3")]
		[Address(RVA = "0x7F46F0", Offset = "0x7F46F0", VA = "0x7F46F0")]
		internal float <CursorUpdate>b__1(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60022E4")]
		[Address(RVA = "0x7F46F8", Offset = "0x7F46F8", VA = "0x7F46F8")]
		internal float <CursorUpdate>b__2(float t)
		{
			return default(float);
		}
	}

	[Serializable]
	[Token(Token = "0x200045E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE10", Offset = "0x74AE10")]
	private sealed class <>c
	{
		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<float, float> <>9__39_0;

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0x7F46DC", Offset = "0x7F46DC", VA = "0x7F46DC")]
		public <>c()
		{
		}

		[Token(Token = "0x60022E7")]
		[Address(RVA = "0x7F46E4", Offset = "0x7F46E4", VA = "0x7F46E4")]
		internal float <CursorUpdate>b__39_0(float t)
		{
			return default(float);
		}
	}

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_energyFadeRate;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_energyTimer;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_energyAddAmount;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_trailEnergyTimer;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float kRangeThreshold;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float kRangeThresholdSq;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float kMaxEnergyTimer;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float m_rayLength;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GestureData m_gestureData;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_currentPoint;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ZoneConductor[] m_zoneConductors;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E77C", Offset = "0x74E77C")]
	public Gradient m_colorGradient;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float kSpeedMinThreshold;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float kSpeedMaxThreshold;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float kSpeedMinThresholdSq;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float kSpeedMaxThresholdSq;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject m_lineObject;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private LineRenderer m_lineRender;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<Vector3> m_points;

	[Token(Token = "0x4000565")]
	private const float kAngleThreshold = 0.1f;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Quaternion m_lastRotation;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E7B4", Offset = "0x74E7B4")]
	public Material m_particleMaterial;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float kParticleStartSize;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float m_emitRate;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public int kPlayParticleEmitCount;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float m_particleVelPct;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public ParticleSystemSimulationSpace m_simulationSpace;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float m_emitTimer;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private ParticleSystem m_particleSystem;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Color m_emitColor;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public UnityEvent m_CompleteEvent;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Matrix4x4 m_initialTransform;

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x7F30D4", Offset = "0x7F30D4", VA = "0x7F30D4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x7F316C", Offset = "0x7F316C", VA = "0x7F316C")]
	private bool AddPoint(Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x7F3234", Offset = "0x7F3234", VA = "0x7F3234", Slot = "10")]
	protected override void CursorOnEnable()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x7F3404", Offset = "0x7F3404", VA = "0x7F3404", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x7F350C", Offset = "0x7F350C", VA = "0x7F350C")]
	private Vector3 PointToWorld(Vector3 pt)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x7F357C", Offset = "0x7F357C", VA = "0x7F357C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x7F388C", Offset = "0x7F388C", VA = "0x7F388C", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x7F39A8", Offset = "0x7F39A8", VA = "0x7F39A8", Slot = "18")]
	protected override bool CursorUpdate(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x7F41A4", Offset = "0x7F41A4", VA = "0x7F41A4")]
	private void EmitParticle(int cursorIdx, Vector3 pos, int particleCount)
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x7F43E8", Offset = "0x7F43E8", VA = "0x7F43E8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x7F4528", Offset = "0x7F4528", VA = "0x7F4528")]
	public EnergyBarn()
	{
	}
}
[Token(Token = "0x20000A1")]
public class EnergyInteractionEvent : MonoBehaviour
{
	[Token(Token = "0x200045F")]
	public struct EnergyEventData
	{
		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Growable growable;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 position;

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 velocity;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int cursorIndex;
	}

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Growable m_growable;

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x7F4700", Offset = "0x7F4700", VA = "0x7F4700")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x7F4758", Offset = "0x7F4758", VA = "0x7F4758")]
	public void OnPlayObject(Vector3 position, Vector3 velocity, int cursorIndex)
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x7F4844", Offset = "0x7F4844", VA = "0x7F4844")]
	public EnergyInteractionEvent()
	{
	}
}
[Token(Token = "0x20000A2")]
public class EventBarn : MonoBehaviour
{
	[Token(Token = "0x2000460")]
	public enum EventType
	{
		[Token(Token = "0x4001F29")]
		None,
		[Token(Token = "0x4001F2A")]
		LevelReadyToPlay,
		[Token(Token = "0x4001F2B")]
		StarPuzzleSolved,
		[Token(Token = "0x4001F2C")]
		NewGrowable,
		[Token(Token = "0x4001F2D")]
		Grow,
		[Token(Token = "0x4001F2E")]
		Ungrow,
		[Token(Token = "0x4001F2F")]
		CreateModeScribble,
		[Token(Token = "0x4001F30")]
		CreateMode2dCinematicStart,
		[Token(Token = "0x4001F31")]
		InteractionEvent,
		[Token(Token = "0x4001F32")]
		ChangeColorEvent,
		[Token(Token = "0x4001F33")]
		ChangeSizeEvent,
		[Token(Token = "0x4001F34")]
		ChangeShapeEvent,
		[Token(Token = "0x4001F35")]
		StampIconGrabbed,
		[Token(Token = "0x4001F36")]
		StampIconThrown,
		[Token(Token = "0x4001F37")]
		StampIconDestroyed,
		[Token(Token = "0x4001F38")]
		ResetTutorialStampIcon,
		[Token(Token = "0x4001F39")]
		PlayEvent,
		[Token(Token = "0x4001F3A")]
		ConstellationIsLoaded,
		[Token(Token = "0x4001F3B")]
		ShellClosed,
		[Token(Token = "0x4001F3C")]
		StartShellClosed,
		[Token(Token = "0x4001F3D")]
		SunIsOff,
		[Token(Token = "0x4001F3E")]
		EnergyEvent,
		[Token(Token = "0x4001F3F")]
		ActiveZoneIncrease,
		[Token(Token = "0x4001F40")]
		CreateMode2dCinematicFinished,
		[Token(Token = "0x4001F41")]
		BirdEnterScene,
		[Token(Token = "0x4001F42")]
		BirdExitScene,
		[Token(Token = "0x4001F43")]
		BirdSingFirstMelody,
		[Token(Token = "0x4001F44")]
		BirdPrepareToSingNextMelody,
		[Token(Token = "0x4001F45")]
		BirdSing,
		[Token(Token = "0x4001F46")]
		BirdCall,
		[Token(Token = "0x4001F47")]
		OwlSing,
		[Token(Token = "0x4001F48")]
		PodAligned,
		[Token(Token = "0x4001F49")]
		AnimalHealingStart,
		[Token(Token = "0x4001F4A")]
		ShellOpen,
		[Token(Token = "0x4001F4B")]
		StartShellOpen,
		[Token(Token = "0x4001F4C")]
		SwitchToStars,
		[Token(Token = "0x4001F4D")]
		KineticBirdIntroFinished,
		[Token(Token = "0x4001F4E")]
		ActivateTurnRing,
		[Token(Token = "0x4001F4F")]
		CreateModeSwirlActived,
		[Token(Token = "0x4001F50")]
		CreateModeTeleportedPlayer,
		[Token(Token = "0x4001F51")]
		CreateModeTeleportReturn,
		[Token(Token = "0x4001F52")]
		PodTouched,
		[Token(Token = "0x4001F53")]
		ResetPodPuzzleClues,
		[Token(Token = "0x4001F54")]
		TriggerShellOpen,
		[Token(Token = "0x4001F55")]
		TriggerShellClose,
		[Token(Token = "0x4001F56")]
		TutorialComplete,
		[Token(Token = "0x4001F57")]
		LevelChanged,
		[Token(Token = "0x4001F58")]
		StarPuzzleAligned,
		[Token(Token = "0x4001F59")]
		LevelExitCancelled,
		[Token(Token = "0x4001F5A")]
		TreasureEvent,
		[Token(Token = "0x4001F5B")]
		GrowablesLoaded,
		[Token(Token = "0x4001F5C")]
		ExitingLevel,
		[Token(Token = "0x4001F5D")]
		ControlsChanged,
		[Token(Token = "0x4001F5E")]
		TurnRingRotated,
		[Token(Token = "0x4001F5F")]
		SwitchToGround,
		[Token(Token = "0x4001F60")]
		SwitchToGroundComplete,
		[Token(Token = "0x4001F61")]
		OptionSubtitle,
		[Token(Token = "0x4001F62")]
		OptionMasterVolume,
		[Token(Token = "0x4001F63")]
		OptionMusicVolume,
		[Token(Token = "0x4001F64")]
		OptionSFXVolume,
		[Token(Token = "0x4001F65")]
		OptionNarrationVolume,
		[Token(Token = "0x4001F66")]
		OptionLanguage,
		[Token(Token = "0x4001F67")]
		OptionVibration,
		[Token(Token = "0x4001F68")]
		OptionBrightness,
		[Token(Token = "0x4001F69")]
		SubMenuActive,
		[Token(Token = "0x4001F6A")]
		SubMenuInactive,
		[Token(Token = "0x4001F6B")]
		Subtitle,
		[Token(Token = "0x4001F6C")]
		GameMenu,
		[Token(Token = "0x4001F6D")]
		HideHands
	}

	[Serializable]
	[Token(Token = "0x2000461")]
	public class SerializableEventType : SerializableEnum<EventType>
	{
		[Token(Token = "0x60022E8")]
		[Address(RVA = "0x7F5590", Offset = "0x7F5590", VA = "0x7F5590")]
		public SerializableEventType(EventType initialValue)
		{
		}
	}

	[Token(Token = "0x2000462")]
	public delegate void OnEvent(object obj);

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<EventType, OnEvent> m_eventListeners;

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x7F4E34", Offset = "0x7F4E34", VA = "0x7F4E34")]
	public void AddListener(SerializableEventType serializableEventType, OnEvent eventListener)
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x7F4FAC", Offset = "0x7F4FAC", VA = "0x7F4FAC")]
	public void RemoveListener(SerializableEventType serializableEventType, OnEvent eventListener)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x7F4E9C", Offset = "0x7F4E9C", VA = "0x7F4E9C")]
	public void AddListener(EventType eventType, OnEvent eventListener)
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x7F5014", Offset = "0x7F5014", VA = "0x7F5014")]
	public void RemoveListener(EventType eventType, OnEvent eventListener)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x7F22A0", Offset = "0x7F22A0", VA = "0x7F22A0")]
	public void Dispatch(EventType eventType, [Optional] object obj)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x7F54E0", Offset = "0x7F54E0", VA = "0x7F54E0")]
	public EventBarn()
	{
	}
}
[Token(Token = "0x20000A3")]
public class EventOnHeight : MonoBehaviour
{
	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_OnAboveHeight;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent m_OnBelowHeight;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_height;

	[Token(Token = "0x600050C")]
	[Address(RVA = "0x7F5668", Offset = "0x7F5668", VA = "0x7F5668")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x7F56C8", Offset = "0x7F56C8", VA = "0x7F56C8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x7F57A0", Offset = "0x7F57A0", VA = "0x7F57A0")]
	public EventOnHeight()
	{
	}
}
[Token(Token = "0x20000A4")]
public class FreeCursorController : CursorControllerBase
{
	[Token(Token = "0x4000577")]
	public const float GROWABLE_PLANT_DELAY = 2.5f;

	[Token(Token = "0x4000578")]
	private const float SMALL_NUMBER = 0.01f;

	[Token(Token = "0x4000579")]
	private const int RAYCAST_MAX_HITS = 8;

	[Token(Token = "0x400057A")]
	private const string FIRST_GROWABLE_TUTORIAL = "FirstGrowableTutorial";

	[Token(Token = "0x400057B")]
	private const float LASTINPUT_UNSET = float.MaxValue;

	[Token(Token = "0x400057C")]
	private const float CURSOR_VELOCITY_SCALE = 0.0001f;

	[Token(Token = "0x400057D")]
	private const float CONSTANT_CURSOR_Z_VELOCITY = 4f;

	[Token(Token = "0x400057E")]
	private const float ENGAGED_DISTANCE_FROM_GROUND = 1.5f;

	[Token(Token = "0x400057F")]
	private const float MAX_HORIZONTAL_TERRARIUM_ROTATION = 90f;

	[Token(Token = "0x4000580")]
	private const float MAX_VERTICAL_TERRARIUM_ROTATION = 2.2f;

	[Token(Token = "0x4000581")]
	private const float DEBUG_AXIS_HALF_LENGTH = 50f;

	[Token(Token = "0x4000582")]
	private const float DEFAULT_CURSOR_DISTANCE = 50f;

	[Token(Token = "0x4000583")]
	private const float STAR_PUZZLE_DEFAULT_CURSOR_DISTANCE = 100f;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Constellation m_constellation;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x74E7EC", Offset = "0x74E7EC")]
	public GameObject m_cursorParticles;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public ParticleSystem m_cursorRipples;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public ParticleSystem[] m_transitionableParticles;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool m_wasMoving;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E824", Offset = "0x74E824")]
	public float m_speedRampDuration;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E85C", Offset = "0x74E85C")]
	public float m_VRCursorSpeed;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x74E894", Offset = "0x74E894")]
	public AnimationCurve m_VRCursorAcceleration;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E8CC", Offset = "0x74E8CC")]
	public float m_2DCursorSpeed;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x74E904", Offset = "0x74E904")]
	public AnimationCurve m_2DCursorAcceleration;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public float m_MouseCursorSpeed;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float m_lastRayDistance;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float m_moveStartTime;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector3 m_direction;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private LayerMask m_projectionMask;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private LayerMask m_waterMask;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private LayerMask m_paletteMask;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private LayerMask m_starMask;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private RaycastHit[] m_hits;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool m_grabbedPalette;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private float m_grabbedPaletteDistance;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private GameObject m_grabbedThrowable;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E93C", Offset = "0x74E93C")]
	public float m_maxRayDistance;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public float m_starMaxRayDistance;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float m_distFromNearClipPlane;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float m_errorShakeStartTime;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float m_highlightPercentage;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float m_tripleHighlightSpeed;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74E974", Offset = "0x74E974")]
	public AnimationCurve m_highlightCurve;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E9AC", Offset = "0x74E9AC")]
	public float m_highlightSpeed;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74E9E4", Offset = "0x74E9E4")]
	public float m_2DHighlightRadius;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public float m_VRHighlightRadius;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74EA1C", Offset = "0x74EA1C")]
	public AnimationCurve m_errorShakeCurve;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public float m_errorShakeStrength;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	public float m_errorShakeDuration;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public string m_errorShakeSound;

	[Token(Token = "0x40005A8")]
	private const float VERTICAL_ROTATION_MODIFIER = 0.5f;

	[Token(Token = "0x40005A9")]
	private const float NODE_MOVEMENT_SPEED = 10f;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private readonly Vector3 kGamepadRotationMultiplier;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private PhysicsRotate m_activeTurnRing;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private Vector3 m_initialVirtualCursorPosition;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private float m_virtualCursorRotation;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float m_verticalRotation;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private bool m_ignoreInputDuringRotation;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private float m_lastInput;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private CameraOrbit2D m_activeCameraOrbit;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[HideInInspector]
	public bool m_usingTurnRing;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	public float m_maxHorizontalRotationSpeed;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public bool m_invertHorizontalRotation;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74EA64", Offset = "0x74EA64")]
	private bool <CanRotate>k__BackingField;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private float m_plantStartTime;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private float m_lastGrowableSelection;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private float m_growableSelectionCooldown;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private MaterialParamOscillator m_pickedStampOscillator;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private StampBarnSimple m_stampBarn;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private bool m_plantErrorLastFrame;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E9")]
	private bool m_planting;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74EA74", Offset = "0x74EA74")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74EA74", Offset = "0x74EA74")]
	public LayerMask m_growablePlacementMask;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public AnimationCurve m_plantingCurve;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[HideInInspector]
	public GamepadInput.GamepadButtons m_plantingButton;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74EAE4", Offset = "0x74EAE4")]
	private bool <SelectingStamp>k__BackingField;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[HideInInspector]
	public PlaceableStamp m_placeableStamp;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private bool m_healingCircleStarted;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x209")]
	private bool m_lastShowHealingCircleCursor;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private HealingControl m_healingControl;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private UnityEngine.SceneManagement.Scene m_currentScene;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	private bool m_isHealingScene;

	[Token(Token = "0x1700006C")]
	[HideInInspector]
	public bool CanRotate
	{
		[Token(Token = "0x600050F")]
		[Address(RVA = "0x7F7E38", Offset = "0x7F7E38", VA = "0x7F7E38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756FDC", Offset = "0x756FDC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000510")]
		[Address(RVA = "0x7F7E40", Offset = "0x7F7E40", VA = "0x7F7E40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756FEC", Offset = "0x756FEC")]
		set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public bool SelectingStamp
	{
		[Token(Token = "0x6000511")]
		[Address(RVA = "0x7F7E4C", Offset = "0x7F7E4C", VA = "0x7F7E4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756FFC", Offset = "0x756FFC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000512")]
		[Address(RVA = "0x7F7E54", Offset = "0x7F7E54", VA = "0x7F7E54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75700C", Offset = "0x75700C")]
		private set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public override Vector3 WorldPosition
	{
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x7F7E60", Offset = "0x7F7E60", VA = "0x7F7E60", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700006F")]
	private bool TutorialBegun
	{
		[Token(Token = "0x6000514")]
		[Address(RVA = "0x7F7FA8", Offset = "0x7F7FA8", VA = "0x7F7FA8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000070")]
	public float PlantCompletion
	{
		[Token(Token = "0x6000515")]
		[Address(RVA = "0x7F80D8", Offset = "0x7F80D8", VA = "0x7F80D8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000071")]
	private PhysicsRotate ActiveTurnRing
	{
		[Token(Token = "0x6000516")]
		[Address(RVA = "0x7F817C", Offset = "0x7F817C", VA = "0x7F817C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000072")]
	private bool Shaking
	{
		[Token(Token = "0x6000517")]
		[Address(RVA = "0x7F826C", Offset = "0x7F826C", VA = "0x7F826C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000073")]
	public StampBarnSimple StampBarn
	{
		[Token(Token = "0x6000518")]
		[Address(RVA = "0x7F82A4", Offset = "0x7F82A4", VA = "0x7F82A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000074")]
	private CameraOrbit2D ActiveCameraOrbit
	{
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x7F8358", Offset = "0x7F8358", VA = "0x7F8358")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000075")]
	private bool InStarMode
	{
		[Token(Token = "0x600051A")]
		[Address(RVA = "0x7F840C", Offset = "0x7F840C", VA = "0x7F840C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000076")]
	private HealingControl ActiveHealingControl
	{
		[Token(Token = "0x600051B")]
		[Address(RVA = "0x7F84A8", Offset = "0x7F84A8", VA = "0x7F84A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000077")]
	private bool InHealingCircle
	{
		[Token(Token = "0x600051C")]
		[Address(RVA = "0x7F873C", Offset = "0x7F873C", VA = "0x7F873C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000078")]
	private bool HighlightDecaying
	{
		[Token(Token = "0x600051D")]
		[Address(RVA = "0x7F8800", Offset = "0x7F8800", VA = "0x7F8800")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000079")]
	public override Vector3 CurrentSpeed
	{
		[Token(Token = "0x600051E")]
		[Address(RVA = "0x7F8810", Offset = "0x7F8810", VA = "0x7F8810", Slot = "5")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600051F")]
		[Address(RVA = "0x7F881C", Offset = "0x7F881C", VA = "0x7F881C", Slot = "6")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0x7F882C", Offset = "0x7F882C", VA = "0x7F882C")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x7F8918", Offset = "0x7F8918", VA = "0x7F8918")]
	public void Start()
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x7F8DF4", Offset = "0x7F8DF4", VA = "0x7F8DF4")]
	private void RepositionCursor(object obj)
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x7F8CEC", Offset = "0x7F8CEC", VA = "0x7F8CEC")]
	private void OnSceneLoaded(UnityEngine.SceneManagement.Scene loadedScene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0x7F905C", Offset = "0x7F905C", VA = "0x7F905C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0x7F9064", Offset = "0x7F9064", VA = "0x7F9064")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0x7F906C", Offset = "0x7F906C", VA = "0x7F906C", Slot = "7")]
	public override bool IsCursorVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0x7F9074", Offset = "0x7F9074", VA = "0x7F9074")]
	private float GetErrorShake()
	{
		return default(float);
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0x7F90CC", Offset = "0x7F90CC", VA = "0x7F90CC")]
	private Vector3 ProcessHits(int hitCount)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0x7F9580", Offset = "0x7F9580", VA = "0x7F9580")]
	private int Projection2D(Vector3 inputVector, float t, float rayDistance)
	{
		return default(int);
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0x7F8EB0", Offset = "0x7F8EB0", VA = "0x7F8EB0")]
	public void ResetVRCursorPosition()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0x7F9A84", Offset = "0x7F9A84", VA = "0x7F9A84")]
	private int ProjectionVR(Vector3 inputVector, float t, float rayDistance)
	{
		return default(int);
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0x7FA2CC", Offset = "0x7FA2CC", VA = "0x7FA2CC")]
	private void BeginHealingCircle()
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0x7FA394", Offset = "0x7FA394", VA = "0x7FA394")]
	private void UpdateHealingCircle()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0x7FA564", Offset = "0x7FA564", VA = "0x7FA564")]
	private void EndHealingCircle()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x7FA5F0", Offset = "0x7FA5F0", VA = "0x7FA5F0")]
	public void Update()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x7FAEF0", Offset = "0x7FAEF0", VA = "0x7FAEF0")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x7FB690", Offset = "0x7FB690", VA = "0x7FB690", Slot = "13")]
	public override Vector3 ControllerInput()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x7FAFB0", Offset = "0x7FAFB0", VA = "0x7FAFB0")]
	private void PlantInput()
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x7FADE0", Offset = "0x7FADE0", VA = "0x7FADE0")]
	private void HandleRotation(Vector2 rotationInput, float rotationSpeed = 1f)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x7FBB48", Offset = "0x7FBB48", VA = "0x7FBB48")]
	private void PickStamp(int stampIndex)
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0x7FB9A8", Offset = "0x7FB9A8", VA = "0x7FB9A8")]
	public void StartErrorShake()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0x7FBAAC", Offset = "0x7FBAAC", VA = "0x7FBAAC")]
	public void DropStamp()
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x7FBFFC", Offset = "0x7FBFFC", VA = "0x7FBFFC")]
	private void BeginTerrariumRotationInput()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0x7FBDA4", Offset = "0x7FBDA4", VA = "0x7FBDA4")]
	private void DuringTerrariumRotationInput(Vector2 input, float rotationSpeed)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x7FC204", Offset = "0x7FC204", VA = "0x7FC204")]
	private void EndTerrariumRotationInput()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0x7FC300", Offset = "0x7FC300", VA = "0x7FC300")]
	private bool IsTurnRingAndOccluding(int index, int lastIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0x7F94E4", Offset = "0x7F94E4", VA = "0x7F94E4")]
	private bool DidHitMask(LayerMask mask, int hitIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0x7FC3CC", Offset = "0x7FC3CC", VA = "0x7FC3CC", Slot = "8")]
	protected override void ToggleCursor(bool visible)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0x7FAC70", Offset = "0x7FAC70", VA = "0x7FAC70")]
	private void DecayCursorHighlight()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0x7FC420", Offset = "0x7FC420", VA = "0x7FC420")]
	public void SetCursorHighlight()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0x7FC4E0", Offset = "0x7FC4E0", VA = "0x7FC4E0", Slot = "12")]
	public override void Ping(bool ignoreVisibility)
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0x7FC5D4", Offset = "0x7FC5D4", VA = "0x7FC5D4")]
	public FreeCursorController()
	{
	}
}
[Token(Token = "0x20000A5")]
public class GamepadCursorCinematics : GamepadCursorNodeHandler
{
	[Token(Token = "0x40005C7")]
	private const string INTERACTIVE_CINEMATIC_NAME = "Interactive_Cinematic";

	[Token(Token = "0x40005C8")]
	private const string INTERACTIVE_CINEMATIC_SCENE = "Bird_Cutscene_3D";

	[Token(Token = "0x40005C9")]
	private const string OWL_CUTSCENE = "Owl_Create";

	[Token(Token = "0x40005CA")]
	private const string SCRIBBLE_VORTEX = "Scribble_Vortex_Create";

	[Token(Token = "0x40005CB")]
	private const string HEALING_CONTROL_TAG = "HealingControl";

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string m_sceneName;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<string> m_cutsceneName;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly List<string> m_healingCutsceneNames;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private InteractiveCinematic m_cinematic;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ScribbleInteractionEvent m_scribbleInteractionEvent;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private HealingControl m_healingControl;

	[Token(Token = "0x1700007A")]
	private InteractiveCinematic Cinematic
	{
		[Token(Token = "0x6000541")]
		[Address(RVA = "0x8D2178", Offset = "0x8D2178", VA = "0x8D2178")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007B")]
	private ScribbleInteractionEvent ScribbleInteraction
	{
		[Token(Token = "0x6000542")]
		[Address(RVA = "0x8D2364", Offset = "0x8D2364", VA = "0x8D2364")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007C")]
	private HealingControl ActiveHealingControl
	{
		[Token(Token = "0x6000543")]
		[Address(RVA = "0x8D2550", Offset = "0x8D2550", VA = "0x8D2550")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007D")]
	public override bool CanBeUsed
	{
		[Token(Token = "0x6000544")]
		[Address(RVA = "0x8D2730", Offset = "0x8D2730", VA = "0x8D2730", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007E")]
	private bool ContainsInteractiveCinematic
	{
		[Token(Token = "0x6000546")]
		[Address(RVA = "0x8D28F8", Offset = "0x8D28F8", VA = "0x8D28F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007F")]
	public bool HealingCircleStarted
	{
		[Token(Token = "0x6000547")]
		[Address(RVA = "0x8D2964", Offset = "0x8D2964", VA = "0x8D2964")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0x8D27FC", Offset = "0x8D27FC", VA = "0x8D27FC")]
	private bool InHealingControl(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0x8D29D4", Offset = "0x8D29D4", VA = "0x8D29D4", Slot = "6")]
	public override void Initialize()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0x8D2B64", Offset = "0x8D2B64", VA = "0x8D2B64", Slot = "15")]
	public override void ProcessEngageInput()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0x8D2A60", Offset = "0x8D2A60", VA = "0x8D2A60")]
	private void ResetScene()
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0x8D2E24", Offset = "0x8D2E24", VA = "0x8D2E24")]
	public void ProcessInput()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0x8D34AC", Offset = "0x8D34AC", VA = "0x8D34AC")]
	public void BeginHealingCircle(GamepadInput.AnalogStick stick, HealDirection direction)
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0x8D3450", Offset = "0x8D3450", VA = "0x8D3450")]
	public bool InHealingCircle()
	{
		return default(bool);
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0x8D3648", Offset = "0x8D3648", VA = "0x8D3648")]
	public void EndHealingCircle()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x8D3768", Offset = "0x8D3768", VA = "0x8D3768")]
	public GamepadCursorCinematics()
	{
	}
}
[Token(Token = "0x20000A6")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748794", Offset = "0x748794")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748794", Offset = "0x748794")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748794", Offset = "0x748794")]
public class GamepadCursorController : CursorControllerBase
{
	[Token(Token = "0x2000463")]
	public enum GamepadMode
	{
		[Token(Token = "0x4001F6F")]
		Normal,
		[Token(Token = "0x4001F70")]
		Edit,
		[Token(Token = "0x4001F71")]
		Kinetic,
		[Token(Token = "0x4001F72")]
		Star,
		[Token(Token = "0x4001F73")]
		LevelSelect,
		[Token(Token = "0x4001F74")]
		Cinematic,
		[Token(Token = "0x4001F75")]
		Menu,
		[Token(Token = "0x4001F76")]
		UI
	}

	[Token(Token = "0x40005D2")]
	private const float SMALL_NUMBER = 0.01f;

	[Token(Token = "0x40005D3")]
	private const int RAYCAST_MAX_HITS = 8;

	[Token(Token = "0x40005D4")]
	private const float GROUND_OFFSET = 2.5f;

	[Token(Token = "0x40005D5")]
	private const string TURN_RING_TAG = "TurnRing";

	[Token(Token = "0x40005D6")]
	private const float PROJECTION_HEIGHT = 100f;

	[Token(Token = "0x40005D7")]
	private const float NO_HIT_HEIGHT = -5f;

	[Token(Token = "0x40005D8")]
	private const float CURSOR_LERP_SCALAR = 0.1f;

	[Token(Token = "0x40005D9")]
	private const float LEVEL_SELECT_GAMEPAD_ROTATION_SPEED = 5f;

	[Token(Token = "0x40005DA")]
	private const float LASTINPUT_UNSET = float.MaxValue;

	[Token(Token = "0x40005DB")]
	public const float GROWABLE_PLANT_DELAY = 1f;

	[Token(Token = "0x40005DC")]
	private const string TURTLE_CREATE_SCENE_NAME = "Turtle_Create";

	[Token(Token = "0x40005DD")]
	private const string FIRST_GROWABLE_TUTORIAL = "FirstGrowableTutorial";

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GamepadInput.GamepadButtons m_activeFaceButton;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GamepadMode m_currentMode;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject m_particles;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject m_groundPlate;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private RaycastHit[] m_hits;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74EB04", Offset = "0x74EB04")]
	public LayerMask m_projectableTerrainMask;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74EB3C", Offset = "0x74EB3C")]
	public LayerMask m_growablePlacementMask;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private LayerMask m_projectionMask;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 m_projectionOrigin;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 m_previousPlateNormal;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private Vector3 m_previousPosition;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float m_maxMovementSpeed;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public bool m_snapSpeed;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public float m_maxHorizontalRotationSpeed;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public bool m_invertHorizontalRotation;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private StampBarnSimple m_stampBarn;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private MaterialParamOscillator m_pickedStampOscillator;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private PhysicsRotate m_activeTurnRing;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private CameraOrbit2D m_activeCameraOrbit;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[HideInInspector]
	public bool m_usingTurnRing;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private Vector3 m_initialVirtualCursorPosition;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float m_virtualCursorRotation;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float m_verticalRotation;

	[Token(Token = "0x40005F5")]
	private const float VERTICAL_ROTATION_MODIFIER = 0.5f;

	[Token(Token = "0x40005F6")]
	private const float NODE_MOVEMENT_SPEED = 10f;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool m_isPlacingStamp;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
	private bool m_deferredSwitchToNormal;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject m_nodeCursorCollider;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public ParticleSystem m_nodeCursorTravelParticles;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public ParticleSystem m_nodeCursorSelectionParticles;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Constellation m_constellation;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GamepadNodeMapper m_nodeMapper;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GamepadCursorEditMode m_editMode;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GamepadCursorKineticMode m_kineticMode;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GamepadCursorStarMode m_starMode;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public GamepadCursorLevelSelect m_levelSelectMode;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GamepadCursorCinematics m_cinematicsMode;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GamepadCursorMenu m_menuMode;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float m_plantStartTime;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private float m_lastInput;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private bool m_ignoreInputDuringRotation;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public AnimationCurve m_errorShakeCurve;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public float m_errorShakeStrength;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	public float m_errorShakeDuration;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public string m_errorShakeSound;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private float m_errorShakeStartTime;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private Vector2 m_errorShakeOffset;

	[Token(Token = "0x17000080")]
	private StampBarnSimple StampBarn
	{
		[Token(Token = "0x6000551")]
		[Address(RVA = "0x8D3914", Offset = "0x8D3914", VA = "0x8D3914")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000081")]
	private PhysicsRotate ActiveTurnRing
	{
		[Token(Token = "0x6000552")]
		[Address(RVA = "0x8D39C8", Offset = "0x8D39C8", VA = "0x8D39C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000082")]
	private CameraOrbit2D ActiveCameraOrbit
	{
		[Token(Token = "0x6000553")]
		[Address(RVA = "0x8D3AB8", Offset = "0x8D3AB8", VA = "0x8D3AB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000083")]
	private bool TutorialBegun
	{
		[Token(Token = "0x6000554")]
		[Address(RVA = "0x8D3B6C", Offset = "0x8D3B6C", VA = "0x8D3B6C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000084")]
	public override Vector3 WorldPosition
	{
		[Token(Token = "0x6000555")]
		[Address(RVA = "0x8D3CAC", Offset = "0x8D3CAC", VA = "0x8D3CAC", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000085")]
	public float PlantCompletion
	{
		[Token(Token = "0x6000556")]
		[Address(RVA = "0x8D3DA8", Offset = "0x8D3DA8", VA = "0x8D3DA8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000086")]
	private bool Shaking
	{
		[Token(Token = "0x6000557")]
		[Address(RVA = "0x8D3E28", Offset = "0x8D3E28", VA = "0x8D3E28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000087")]
	private int NodeCount
	{
		[Token(Token = "0x6000558")]
		[Address(RVA = "0x8D3E60", Offset = "0x8D3E60", VA = "0x8D3E60")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x8D3EBC", Offset = "0x8D3EBC", VA = "0x8D3EBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x8D3F84", Offset = "0x8D3F84", VA = "0x8D3F84")]
	private void SceneLoaded(UnityEngine.SceneManagement.Scene loadedScene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x8D4030", Offset = "0x8D4030", VA = "0x8D4030")]
	private void Start()
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x8D4118", Offset = "0x8D4118", VA = "0x8D4118")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x8D439C", Offset = "0x8D439C", VA = "0x8D439C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x8D4450", Offset = "0x8D4450", VA = "0x8D4450")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x8D4DDC", Offset = "0x8D4DDC", VA = "0x8D4DDC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x8D574C", Offset = "0x8D574C", VA = "0x8D574C")]
	public void UpdateParticles(Vector3 position, Vector3 newForward)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x8D57E8", Offset = "0x8D57E8", VA = "0x8D57E8")]
	public void RegisterGrowable(Growable newGrowable)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x8D59EC", Offset = "0x8D59EC", VA = "0x8D59EC")]
	public void ForceEditModeExit()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x8D5A04", Offset = "0x8D5A04", VA = "0x8D5A04")]
	public void ForceRemoveDetectedGrowable()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x8D5340", Offset = "0x8D5340", VA = "0x8D5340")]
	private void HandleRotation(Vector2 rotationInput, float rotationSpeed = 1f)
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x8D5668", Offset = "0x8D5668", VA = "0x8D5668")]
	private void NormalModeInput()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0x8D6360", Offset = "0x8D6360", VA = "0x8D6360")]
	private void PlantInput()
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x8D4198", Offset = "0x8D4198", VA = "0x8D4198")]
	private void SwitchMode(GamepadMode newMode)
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0x8D6D88", Offset = "0x8D6D88", VA = "0x8D6D88")]
	public void UpdateSelectedCursor()
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0x8D6DB8", Offset = "0x8D6DB8", VA = "0x8D6DB8")]
	public void AddNode(GameObject newNode)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0x8D6E80", Offset = "0x8D6E80", VA = "0x8D6E80")]
	public void RemoveNode(GameObject newNode)
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0x8D6FD4", Offset = "0x8D6FD4", VA = "0x8D6FD4")]
	public void HideSelectionVisual()
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0x8D5C74", Offset = "0x8D5C74", VA = "0x8D5C74")]
	private void BeginTerrariumRotationInput()
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0x8D5A30", Offset = "0x8D5A30", VA = "0x8D5A30")]
	private void DuringTerrariumRotationInput(Vector2 input, float rotationSpeed)
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x8D5E7C", Offset = "0x8D5E7C", VA = "0x8D5E7C")]
	private void EndTerrariumRotationInput()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0x8D6FE4", Offset = "0x8D6FE4", VA = "0x8D6FE4")]
	private void RotateWithTerrarium(float deltaRotation)
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x8D6A5C", Offset = "0x8D6A5C", VA = "0x8D6A5C")]
	private void PickStamp(int stampIndex, GamepadInput.GamepadButtons buttonPressed)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x8D6894", Offset = "0x8D6894", VA = "0x8D6894")]
	private void DropStamp()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x8D71BC", Offset = "0x8D71BC", VA = "0x8D71BC", Slot = "8")]
	protected override void ToggleCursor(bool visible)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x8D72E8", Offset = "0x8D72E8", VA = "0x8D72E8")]
	public void ToggleParticles(bool traveling)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x8D73C8", Offset = "0x8D73C8", VA = "0x8D73C8")]
	private void DisableAndLockCursor(object obj)
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0x8D73F8", Offset = "0x8D73F8", VA = "0x8D73F8", Slot = "7")]
	public override bool IsCursorVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0x8D541C", Offset = "0x8D541C", VA = "0x8D541C")]
	private void MovementInput()
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x8D5F78", Offset = "0x8D5F78", VA = "0x8D5F78")]
	private void ProjectOnTerrain()
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x8D7424", Offset = "0x8D7424", VA = "0x8D7424", Slot = "9")]
	public override void OnCursorEnable()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x8D7458", Offset = "0x8D7458", VA = "0x8D7458", Slot = "10")]
	public override void OnCursorDisable()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x8D74B0", Offset = "0x8D74B0", VA = "0x8D74B0")]
	public GamepadCursorController()
	{
	}
}
[Token(Token = "0x20000A7")]
public class GamepadCursorEditMode : GamepadCursorNodeHandler
{
	[Token(Token = "0x2000464")]
	public enum NodeType
	{
		[Token(Token = "0x4001F78")]
		Default,
		[Token(Token = "0x4001F79")]
		ColorPicker,
		[Token(Token = "0x4001F7A")]
		IKTargetMover,
		[Token(Token = "0x4001F7B")]
		Scaler
	}

	[Token(Token = "0x400060D")]
	private const float COLOR_PICKER_INPUT_THRESHOLD = 0.5f;

	[Token(Token = "0x400060E")]
	private const float EDIT_CURSOR_MAX_OFFSET = 5f;

	[Token(Token = "0x400060F")]
	private const float EDIT_COLOR_PICKER_OFFSET = 1f;

	[Token(Token = "0x4000610")]
	private const float NODE_MOVEMENT_SPEED = 10f;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public NodeType m_currentNodeType;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Growable.ControlStar m_currentControlStar;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 m_currentColorPickerOffset;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CursorInputMonoBehaviour m_currentNodeMonoBehaviour;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Growable m_detectedGrowable;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_isPendingEngage;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool m_isPendingDisengage;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private UnityEvent OnPendingEngageConsumed;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UnityEvent OnPendingDisengageConsumed;

	[Token(Token = "0x17000088")]
	public Growable DetectedGrowable
	{
		[Token(Token = "0x600057C")]
		[Address(RVA = "0x8D7524", Offset = "0x8D7524", VA = "0x8D7524")]
		get
		{
			return null;
		}
		[Token(Token = "0x600057D")]
		[Address(RVA = "0x8D58C4", Offset = "0x8D58C4", VA = "0x8D58C4")]
		set
		{
		}
	}

	[Token(Token = "0x17000089")]
	public override bool CanBeUsed
	{
		[Token(Token = "0x600057E")]
		[Address(RVA = "0x8D75A4", Offset = "0x8D75A4", VA = "0x8D75A4", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x8D7650", Offset = "0x8D7650", VA = "0x8D7650", Slot = "6")]
	public override void Initialize()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x8D79D4", Offset = "0x8D79D4", VA = "0x8D79D4", Slot = "7")]
	public override void Stop()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x8D7A8C", Offset = "0x8D7A8C", VA = "0x8D7A8C", Slot = "14")]
	public override void OnMovedToNode()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x8D7B48", Offset = "0x8D7B48", VA = "0x8D7B48", Slot = "12")]
	public override void OnNodeTraveling(float timeDelta)
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x8D7EA8", Offset = "0x8D7EA8", VA = "0x8D7EA8", Slot = "11")]
	public override void OnNotNodeTraveling()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x8D1C60", Offset = "0x8D1C60", VA = "0x8D1C60")]
	public bool ConsumePendingEngage()
	{
		return default(bool);
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x8D1AA8", Offset = "0x8D1AA8", VA = "0x8D1AA8")]
	public bool ConsumePendingDisengage()
	{
		return default(bool);
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x8D7F70", Offset = "0x8D7F70", VA = "0x8D7F70")]
	public void CreatePendingEngage()
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x8D7F7C", Offset = "0x8D7F7C", VA = "0x8D7F7C")]
	public void CreatePendingDisengage()
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x8D7F88", Offset = "0x8D7F88", VA = "0x8D7F88", Slot = "10")]
	protected override void UpdateCursorTravel(bool traveling, float timeDelta)
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x8D8058", Offset = "0x8D8058", VA = "0x8D8058")]
	private void DeferredNodeMove()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x8D8188", Offset = "0x8D8188", VA = "0x8D8188", Slot = "13")]
	protected override void OnValidMovementInput()
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x8D4498", Offset = "0x8D4498", VA = "0x8D4498")]
	public void ProcessGrowableNodeInput()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x8D7860", Offset = "0x8D7860", VA = "0x8D7860")]
	private void ProcessNewNodeType()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0x8D8194", Offset = "0x8D8194", VA = "0x8D8194")]
	public GamepadCursorEditMode()
	{
	}
}
[Token(Token = "0x20000A8")]
public class GamepadCursorKineticMode : GamepadCursorNodeHandler
{
	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SphereCollider m_oldPodCollider;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private SphereCollider m_podCollider;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 m_currentNodePosition;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 m_oldNodePosition;

	[Token(Token = "0x1700008A")]
	public override bool CanBeUsed
	{
		[Token(Token = "0x6000591")]
		[Address(RVA = "0x8D8A74", Offset = "0x8D8A74", VA = "0x8D8A74", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0x8D81B0", Offset = "0x8D81B0", VA = "0x8D81B0", Slot = "6")]
	public override void Initialize()
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0x8D8364", Offset = "0x8D8364", VA = "0x8D8364", Slot = "11")]
	public override void OnNotNodeTraveling()
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x8D8604", Offset = "0x8D8604", VA = "0x8D8604", Slot = "12")]
	public override void OnNodeTraveling(float timeDelta)
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x8D81D4", Offset = "0x8D81D4", VA = "0x8D81D4")]
	private void UpdatePodColliders()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x8D8BF8", Offset = "0x8D8BF8", VA = "0x8D8BF8", Slot = "14")]
	public override void OnMovedToNode()
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x8D8C1C", Offset = "0x8D8C1C", VA = "0x8D8C1C", Slot = "7")]
	public override void Stop()
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x8D8C94", Offset = "0x8D8C94", VA = "0x8D8C94")]
	public GamepadCursorKineticMode()
	{
	}
}
[Token(Token = "0x20000A9")]
public class GamepadCursorLevelSelect : GamepadCursorNodeHandler
{
	[Token(Token = "0x400061E")]
	private const string LEVEL_SELECT_SCENE = "Level_Select";

	[Token(Token = "0x1700008B")]
	public override bool CanBeUsed
	{
		[Token(Token = "0x6000597")]
		[Address(RVA = "0x8D8CC0", Offset = "0x8D8CC0", VA = "0x8D8CC0", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x8D8CB0", Offset = "0x8D8CB0", VA = "0x8D8CB0", Slot = "6")]
	public override void Initialize()
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x8D8D2C", Offset = "0x8D8D2C", VA = "0x8D8D2C")]
	public void UpdateLevelSelectInput()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x8D8D30", Offset = "0x8D8D30", VA = "0x8D8D30")]
	private void UpdateTerrarium()
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x8D8E38", Offset = "0x8D8E38", VA = "0x8D8E38", Slot = "14")]
	public override void OnMovedToNode()
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x8D8E5C", Offset = "0x8D8E5C", VA = "0x8D8E5C", Slot = "8")]
	public override void SetupCursor()
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0x8D8F7C", Offset = "0x8D8F7C", VA = "0x8D8F7C")]
	public GamepadCursorLevelSelect()
	{
	}
}
[Token(Token = "0x20000AA")]
public class GamepadCursorMenu : GamepadCursorNodeHandler
{
	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<string> m_menuSceneName;

	[Token(Token = "0x1700008C")]
	public override bool CanBeUsed
	{
		[Token(Token = "0x600059D")]
		[Address(RVA = "0x8D8F98", Offset = "0x8D8F98", VA = "0x8D8F98", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0x8D9044", Offset = "0x8D9044", VA = "0x8D9044")]
	public GamepadCursorMenu()
	{
	}
}
[Token(Token = "0x20000AB")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748848", Offset = "0x748848")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748848", Offset = "0x748848")]
public class GamepadCursorNodeHandler : MonoBehaviour
{
	[Token(Token = "0x2000465")]
	public enum Stick
	{
		[Token(Token = "0x4001F7D")]
		Right,
		[Token(Token = "0x4001F7E")]
		Left
	}

	[Token(Token = "0x4000620")]
	protected const float SMALL_NUMBER = 0.1f;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GamepadCursorController m_controller;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected GamepadNodeMapper m_nodeMapper;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Transform m_oldNodeTransform;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Transform m_currentNodeTransform;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Vector3 m_currentNodeInitialPos;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_nodeTravelTime;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected float m_nodeTravelStartTime;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected bool m_wasTravelingLastFrame;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected int m_previousNodeIndex;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected int m_deferredNodeMoveFramesLeft;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected bool m_waitingToMove;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected Stick m_nodeStick;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected bool m_allowEmptyNodeMaps;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool m_finishedTravelThisFrame;

	[Token(Token = "0x1700008D")]
	public virtual bool CanBeUsed
	{
		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x8D9148", Offset = "0x8D9148", VA = "0x8D9148", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008E")]
	protected virtual bool CanMoveNode
	{
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x8D9150", Offset = "0x8D9150", VA = "0x8D9150", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x8D9158", Offset = "0x8D9158", VA = "0x8D9158")]
	public void Awake()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x8D91C8", Offset = "0x8D91C8", VA = "0x8D91C8")]
	public void Update()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x8D2A1C", Offset = "0x8D2A1C", VA = "0x8D2A1C", Slot = "6")]
	public virtual void Initialize()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x8D7A7C", Offset = "0x8D7A7C", VA = "0x8D7A7C", Slot = "7")]
	public virtual void Stop()
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x8D8ED8", Offset = "0x8D8ED8", VA = "0x8D8ED8", Slot = "8")]
	public virtual void SetupCursor()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x8D91E4", Offset = "0x8D91E4", VA = "0x8D91E4", Slot = "9")]
	protected virtual void UpdateCursor()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x8D93EC", Offset = "0x8D93EC", VA = "0x8D93EC", Slot = "10")]
	protected virtual void UpdateCursorTravel(bool traveling, float timeDelta)
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x8D7D98", Offset = "0x8D7D98", VA = "0x8D7D98")]
	protected void ToggleParticles(bool traveling)
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x8D940C", Offset = "0x8D940C", VA = "0x8D940C", Slot = "11")]
	public virtual void OnNotNodeTraveling()
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x8D9530", Offset = "0x8D9530", VA = "0x8D9530", Slot = "12")]
	public virtual void OnNodeTraveling(float timeDelta)
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x8D5268", Offset = "0x8D5268", VA = "0x8D5268")]
	public bool UpdateNodeInput()
	{
		return default(bool);
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x8D985C", Offset = "0x8D985C", VA = "0x8D985C", Slot = "13")]
	protected virtual void OnValidMovementInput()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x8D96F8", Offset = "0x8D96F8", VA = "0x8D96F8")]
	private bool ProcessNodeMovementInput()
	{
		return default(bool);
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x8D8068", Offset = "0x8D8068", VA = "0x8D8068")]
	protected void MoveToSelectedNode()
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x8D7AFC", Offset = "0x8D7AFC", VA = "0x8D7AFC", Slot = "14")]
	public virtual void OnMovedToNode()
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x8D2D28", Offset = "0x8D2D28", VA = "0x8D2D28", Slot = "15")]
	public virtual void ProcessEngageInput()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x8D98F0", Offset = "0x8D98F0", VA = "0x8D98F0", Slot = "16")]
	public virtual void ProcessDisengageInput()
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x8D3784", Offset = "0x8D3784", VA = "0x8D3784")]
	public GamepadCursorNodeHandler()
	{
	}
}
[Token(Token = "0x20000AC")]
public class GamepadCursorStarMode : GamepadCursorNodeHandler
{
	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	private bool m_movingStar;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Hotspot m_currentHotspot;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private StarPuzzleStar m_currentStar;

	[Token(Token = "0x1700008F")]
	protected override bool CanMoveNode
	{
		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x8D99F0", Offset = "0x8D99F0", VA = "0x8D99F0", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000090")]
	public override bool CanBeUsed
	{
		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x8D9A00", Offset = "0x8D9A00", VA = "0x8D9A00", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x8D99EC", Offset = "0x8D99EC", VA = "0x8D99EC", Slot = "6")]
	public override void Initialize()
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x8D9AF8", Offset = "0x8D9AF8", VA = "0x8D9AF8", Slot = "15")]
	public override void ProcessEngageInput()
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x8D9BE4", Offset = "0x8D9BE4", VA = "0x8D9BE4", Slot = "16")]
	public override void ProcessDisengageInput()
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x8D4A54", Offset = "0x8D4A54", VA = "0x8D4A54")]
	public void ProcessStarMovementInput()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x8D9C74", Offset = "0x8D9C74", VA = "0x8D9C74", Slot = "7")]
	public override void Stop()
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x8D9CEC", Offset = "0x8D9CEC", VA = "0x8D9CEC")]
	public GamepadCursorStarMode()
	{
	}
}
[Token(Token = "0x20000AD")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7488D4", Offset = "0x7488D4")]
public class GestureRecorderVR : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GestureData m_gestureData;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer m_lineRenderer;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VRInput.CursorIndex m_cursorIndex;

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x8DE6AC", Offset = "0x8DE6AC", VA = "0x8DE6AC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x8DE708", Offset = "0x8DE708", VA = "0x8DE708")]
	private void UpdateLines()
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x8DE7EC", Offset = "0x8DE7EC", VA = "0x8DE7EC", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x8DE848", Offset = "0x8DE848", VA = "0x8DE848", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x8DEA28", Offset = "0x8DEA28", VA = "0x8DEA28")]
	public GestureRecorderVR()
	{
	}
}
[Token(Token = "0x20000AE")]
public class GrowableAudio : MonoBehaviour
{
	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_Arp_Object;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_noTouch;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_ArpResetTime;

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0x8E45C8", Offset = "0x8E45C8", VA = "0x8E45C8")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0x8E4664", Offset = "0x8E4664", VA = "0x8E4664")]
	public GrowableAudio()
	{
	}
}
[Token(Token = "0x20000AF")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748938", Offset = "0x748938")]
public class GrowableBarn : MonoBehaviour
{
	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GrowablePopulation m_GrowablePopulation;

	[Token(Token = "0x4000639")]
	private const int CLUSTER_POOL_SIZE = 20;

	[Token(Token = "0x400063A")]
	private const int kMaxCritterPopulation = 15;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly List<GrowableNode> m_growablesToCluster;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly List<GrowableCluster> m_clusterPool;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_clusterGo;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform m_growables;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform m_critters;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_numZones;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrowableType[] m_growableTypesBuffer;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_critterCheckRaycastMask;

	[Token(Token = "0x4000643")]
	private const float kCritterCheckRaycastHeight = 50f;

	[Token(Token = "0x4000644")]
	private const float kCritterCheckRaycastDepth = 100f;

	[Token(Token = "0x4000645")]
	private const float kCritterCheckRaycastRadius = 5f;

	[Token(Token = "0x4000646")]
	private const int kCritterCheckRaycastLimit = 5;

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0x8E46D4", Offset = "0x8E46D4", VA = "0x8E46D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0x8E48DC", Offset = "0x8E48DC", VA = "0x8E48DC")]
	public void InitializeGrowableBarn(GrowableType[] growableTypes)
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0x8E4BB4", Offset = "0x8E4BB4", VA = "0x8E4BB4")]
	public void PopulateClusterDepot()
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0x8E4D90", Offset = "0x8E4D90", VA = "0x8E4D90")]
	public bool CritterPopulationIsMaxed()
	{
		return default(bool);
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0x8E4BE4", Offset = "0x8E4BE4", VA = "0x8E4BE4")]
	public GrowableCluster SpawnCluster()
	{
		return null;
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x8E4E34", Offset = "0x8E4E34", VA = "0x8E4E34")]
	public GrowableCluster RequestNewCluster()
	{
		return null;
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x8E4F6C", Offset = "0x8E4F6C", VA = "0x8E4F6C")]
	public void AssignCluster(GrowableNode growableNode)
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x8E54F8", Offset = "0x8E54F8", VA = "0x8E54F8")]
	public void CritterCheck(GrowableNode growableNode)
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x8E5814", Offset = "0x8E5814", VA = "0x8E5814")]
	private bool CritterSpawnConditionCheck(int growableTypePopulation, CritterSpawnInfo critterSpawnInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x8E58C8", Offset = "0x8E58C8", VA = "0x8E58C8")]
	private void SpawnCritter(CritterSpawnInfo critterSpawnInfo, GrowableNode growableNode, Vector3 position)
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x8E5ABC", Offset = "0x8E5ABC", VA = "0x8E5ABC")]
	public void CullAllCritters()
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x8E5B58", Offset = "0x8E5B58", VA = "0x8E5B58")]
	public GrowableBarn()
	{
	}
}
[Token(Token = "0x20000B0")]
public class GrowableDataType : MonoBehaviour
{
	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_value;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] m_triggerValues;

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0x8E6A2C", Offset = "0x8E6A2C", VA = "0x8E6A2C")]
	public int CheckValueLessThanAndReturnBonusIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0x8E6A9C", Offset = "0x8E6A9C", VA = "0x8E6A9C")]
	public int CheckValueAndReturnBonusIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0x8E6B14", Offset = "0x8E6B14", VA = "0x8E6B14")]
	public GrowableDataType()
	{
	}
}
[Token(Token = "0x20000B1")]
public class GrowableEventWeights2D : MonoBehaviour
{
	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74EB84", Offset = "0x74EB84")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74EB84", Offset = "0x74EB84")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74EB84", Offset = "0x74EB84")]
	public float m_OnGrow;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74EC00", Offset = "0x74EC00")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74EC00", Offset = "0x74EC00")]
	public float m_OnInteract;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74EC58", Offset = "0x74EC58")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74EC58", Offset = "0x74EC58")]
	public float m_OnPlay;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74ECB0", Offset = "0x74ECB0")]
	public int m_activeZoneThreshold;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ZoneBarn m_zoneBarn;

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0x8E6B74", Offset = "0x8E6B74", VA = "0x8E6B74")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x8E6C34", Offset = "0x8E6C34", VA = "0x8E6C34")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x8E6D8C", Offset = "0x8E6D8C", VA = "0x8E6D8C")]
	public GrowableEventWeights2D()
	{
	}
}
[Token(Token = "0x20000B2")]
public class HapticPlayback : MonoBehaviour
{
	[Token(Token = "0x2000466")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE20", Offset = "0x74AE20")]
	private sealed class <>c__DisplayClass15_0
	{
		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HapticAsset hapticAsset;

		[Token(Token = "0x60022ED")]
		[Address(RVA = "0x908FD8", Offset = "0x908FD8", VA = "0x908FD8")]
		public <>c__DisplayClass15_0()
		{
		}

		[Token(Token = "0x60022EE")]
		[Address(RVA = "0x9095DC", Offset = "0x9095DC", VA = "0x9095DC")]
		internal float <Play>b__0(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60022EF")]
		[Address(RVA = "0x909608", Offset = "0x909608", VA = "0x909608")]
		internal float <Play>b__1(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60022F0")]
		[Address(RVA = "0x909634", Offset = "0x909634", VA = "0x909634")]
		internal float <Play>b__2(float t)
		{
			return default(float);
		}
	}

	[Serializable]
	[Token(Token = "0x2000467")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE30", Offset = "0x74AE30")]
	private sealed class <>c
	{
		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<float, float> <>9__17_0;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<float, float> <>9__17_1;

		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Func<float, float> <>9__17_2;

		[Token(Token = "0x60022F2")]
		[Address(RVA = "0x9095B0", Offset = "0x9095B0", VA = "0x9095B0")]
		public <>c()
		{
		}

		[Token(Token = "0x60022F3")]
		[Address(RVA = "0x9095B8", Offset = "0x9095B8", VA = "0x9095B8")]
		internal float <PlayTick>b__17_0(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60022F4")]
		[Address(RVA = "0x9095C4", Offset = "0x9095C4", VA = "0x9095C4")]
		internal float <PlayTick>b__17_1(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60022F5")]
		[Address(RVA = "0x9095D0", Offset = "0x9095D0", VA = "0x9095D0")]
		internal float <PlayTick>b__17_2(float t)
		{
			return default(float);
		}
	}

	[Token(Token = "0x400064E")]
	private const float QUEST_VIBRATION_TIME_MULT = 2f;

	[Token(Token = "0x400064F")]
	private const float QUEST_VIBRATION_AMPLITUDE = 0.1f;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly float[] m_startTime;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly float[] m_duration;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly bool[] m_looping;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Func<float, float>[] m_procedureFrequency;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Func<float, float>[] m_procedureAmplitude;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Func<float, float>[] m_procedurePulseDuration;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_hapticsCanPlay;

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0x9088C8", Offset = "0x9088C8", VA = "0x9088C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0x908968", Offset = "0x908968", VA = "0x908968")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0x908A08", Offset = "0x908A08", VA = "0x908A08")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0x908A88", Offset = "0x908A88", VA = "0x908A88")]
	private void OnVibrationOptionChange(object value)
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0x908B4C", Offset = "0x908B4C", VA = "0x908B4C")]
	public bool IsPlaying(VRInput.ControllerIndex controllerIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0x908CF0", Offset = "0x908CF0", VA = "0x908CF0")]
	private static int ControllerIndexToIndex(int controllerIndex)
	{
		return default(int);
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0x908D58", Offset = "0x908D58", VA = "0x908D58")]
	public void Play(HapticAsset hapticAsset, int controllerIndex, float durationTime, bool looping = false, [Optional] Func<float, float> procedureFreq, [Optional] Func<float, float> procedureAmp, [Optional] Func<float, float> procedurePulseDuration)
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x908C04", Offset = "0x908C04", VA = "0x908C04")]
	public void Stop(VRInput.ControllerIndex controllerIndex)
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0x908FE0", Offset = "0x908FE0", VA = "0x908FE0")]
	public void PlayTick(int controllerIndex)
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0x909218", Offset = "0x909218", VA = "0x909218")]
	private void HandleHaptics(int index, VRInput.ControllerIndex controllerIndex = VRInput.ControllerIndex.Left)
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0x9093F4", Offset = "0x9093F4", VA = "0x9093F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0x90948C", Offset = "0x90948C", VA = "0x90948C")]
	public HapticPlayback()
	{
	}
}
[Token(Token = "0x20000B3")]
public enum HealDirection
{
	[Token(Token = "0x4000658")]
	clockwise,
	[Token(Token = "0x4000659")]
	counterclockwise
}
[Token(Token = "0x20000B4")]
public class HealingControl : CursorInputMonoBehaviour
{
	[Token(Token = "0x2000468")]
	public enum ActorType
	{
		[Token(Token = "0x4001F85")]
		Unassigned,
		[Token(Token = "0x4001F86")]
		Bird,
		[Token(Token = "0x4001F87")]
		Turtle,
		[Token(Token = "0x4001F88")]
		Swan,
		[Token(Token = "0x4001F89")]
		Bear,
		[Token(Token = "0x4001F8A")]
		Fox,
		[Token(Token = "0x4001F8B")]
		Owl,
		[Token(Token = "0x4001F8C")]
		Moon
	}

	[Token(Token = "0x400065A")]
	private const float HEALING_STARS_RELATIVE_RADIUS = 0.45f;

	[Token(Token = "0x400065B")]
	private const int TRIGGER_SEQUENCE_COUNT = 10;

	[Token(Token = "0x400065C")]
	private const float MAX_FILL_SCALE = 0.9f;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Vector3 kVectorOne;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private readonly Vector3 kVectorZero;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private readonly Vector3 kVectorDown;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private readonly Color kActiveColor;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private readonly Color kInactiveColor;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74ECE8", Offset = "0x74ECE8")]
	public HealDirection m_healDirection;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool m_enableRaycast;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[ReadOnly]
	public float m_healingDebug;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float m_healingIncrement;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float m_healingIncrementGamepad;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float m_healingDecay;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float m_healingDirectionVfxSpinSpeed;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public HealingStarController[] m_healingStarsItems;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public ActorType m_actorType;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject m_actor;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ParticleSystem m_hitParticleSystem;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74ED30", Offset = "0x74ED30")]
	public string kHealingStartSound;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public string kHealingStopSound;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public string kSwirlAppearSound;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public string kSwirlDisappearSound;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public string kHealingTriggerSound;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public string kHealingAmountSoundParam;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74ED68", Offset = "0x74ED68")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74ED68", Offset = "0x74ED68")]
	public int m_healingSoundStep;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public string[] m_healingNotes;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74EDC0", Offset = "0x74EDC0")]
	public float m_healingStarsOffsetLength;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public UnityEvent m_OnHealingNote;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public UnityEvent m_OnHealingComplete;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[HideInInspector]
	public float m_CursorToRingDistance;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public float m_healingStarSize;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private bool m_isHealingSoundPlaying;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	[HideInInspector]
	public bool m_isHealingComplete;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
	private bool m_swirlAppearSoundHasPlayed;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x123")]
	private bool m_stopHealingDelayActive;

	[Token(Token = "0x400067E")]
	private const float TRIGGER_SEQUENCE_DURATION = 2f;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private int[] m_nextTrigger;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int m_currentTrigger;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private int m_previousTrigger;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Queue<int> m_triggerSequence;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float m_triggerSequenceStartTime;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private int m_layerMask;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float m_healing;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float m_normalizedHealing;

	[Token(Token = "0x4000687")]
	private const float kHealingMin = 0f;

	[Token(Token = "0x4000688")]
	private const float kHealingMax = 100f;

	[Token(Token = "0x4000689")]
	private const float kTurnOffHealingSoundDelay = 0.5f;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private int m_healingSoundIndex;

	[Token(Token = "0x400068B")]
	private const string kHealCubeLayerName = "HealingTrigger";

	[Token(Token = "0x400068C")]
	private const string kHealParam = "Healing";

	[Token(Token = "0x400068D")]
	private const string kVictoryParam = "Victory";

	[Token(Token = "0x400068E")]
	private const string kMaterialHealingParam = "_moon_transition";

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private AutoMoveAndRotate[] m_healingVisualizerRotators;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private ParticlePropertyDriver[] m_particlePropertyDrivers;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Animator m_animator;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private MeshCollider[] m_healingTriggerColliders;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private MeshRenderer[] m_healingTriggerRenderers;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private HealingStarController[] m_healingStars;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private GameObject m_healingFill;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[HideInInspector]
	public bool m_started;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private int m_cursorIndex;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[HideInInspector]
	public Action m_OnHealingCompleteAction;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private float m_healingTriggerInterval;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private Vector3 m_zeroVector3;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Vector2 m_zeroVector2;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private Vector3 m_upVector3;

	[Token(Token = "0x400069D")]
	private const float TIME_TO_PING = 5f;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private readonly float[] kTimeForPingMinMax;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private float m_timeForNextPing;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private float m_lastInteractionTime;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private float m_lastPingTime;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private int m_lastPingedStar;

	[Token(Token = "0x40006A3")]
	private const float kPs4HealingDecayReduction = 0.8f;

	[Token(Token = "0x17000091")]
	private float HealingDecay
	{
		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x909660", Offset = "0x909660", VA = "0x909660")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000092")]
	private float HealingIncrement
	{
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x909668", Offset = "0x909668", VA = "0x909668")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0x9096E4", Offset = "0x9096E4", VA = "0x9096E4")]
	public float GetHealing()
	{
		return default(float);
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x9096EC", Offset = "0x9096EC", VA = "0x9096EC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0x909788", Offset = "0x909788", VA = "0x909788")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x909990", Offset = "0x909990", VA = "0x909990", Slot = "16")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x9099FC", Offset = "0x9099FC", VA = "0x9099FC", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0x909F08", Offset = "0x909F08", VA = "0x909F08")]
	private void HealingFillLoadCompleted(AsyncOperation op)
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x90A118", Offset = "0x90A118", VA = "0x90A118")]
	private void UpdateHitParticles(Vector3 position)
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x90A16C", Offset = "0x90A16C", VA = "0x90A16C")]
	private void SetHealing(float value)
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x90A2E8", Offset = "0x90A2E8", VA = "0x90A2E8")]
	private void CheckStopHealingDelay()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0x90A394", Offset = "0x90A394", VA = "0x90A394")]
	public void SetStopHealingDelay()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0x90A650", Offset = "0x90A650", VA = "0x90A650")]
	public void SetHealingSoundVolumeToZero()
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0x909874", Offset = "0x909874", VA = "0x909874")]
	public void UpdateHealingVisualization()
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0x90A6C0", Offset = "0x90A6C0", VA = "0x90A6C0")]
	public void HealingVictory()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x90A75C", Offset = "0x90A75C", VA = "0x90A75C")]
	private void UnlockHealingAchievement()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x90A838", Offset = "0x90A838", VA = "0x90A838")]
	public void HealingComplete()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x90AB9C", Offset = "0x90AB9C", VA = "0x90AB9C")]
	private float AngleBetween(Vector3 to, Vector3 from)
	{
		return default(float);
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x90A458", Offset = "0x90A458", VA = "0x90A458")]
	private void UpdateHealingVisuals(Vector2 pos)
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x90ACD4", Offset = "0x90ACD4", VA = "0x90ACD4")]
	public void Heal(Vector2 pos)
	{
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x90ACFC", Offset = "0x90ACFC", VA = "0x90ACFC")]
	public void Heal(int cursorIndex)
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x90AFD0", Offset = "0x90AFD0", VA = "0x90AFD0")]
	public void CheckTrigger(int index, int cursorIndex)
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x90B110", Offset = "0x90B110", VA = "0x90B110", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x90B118", Offset = "0x90B118", VA = "0x90B118", Slot = "10")]
	protected override void CursorOnEnable()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x90B144", Offset = "0x90B144", VA = "0x90B144")]
	private void PlaySwirlAppearSound()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x90B214", Offset = "0x90B214", VA = "0x90B214")]
	private void HandleGamepadInput(int cursorIndex)
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0x90B21C", Offset = "0x90B21C", VA = "0x90B21C")]
	private void HandleVRInput(int cursorIndex)
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0x90A218", Offset = "0x90A218", VA = "0x90A218")]
	private void UpdateHealingFill()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x90B440", Offset = "0x90B440", VA = "0x90B440", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0x90AFA4", Offset = "0x90AFA4", VA = "0x90AFA4")]
	private void ResetStarsPing()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x90B604", Offset = "0x90B604", VA = "0x90B604")]
	private void PingNextStar()
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0x90B7DC", Offset = "0x90B7DC", VA = "0x90B7DC", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0x90AA44", Offset = "0x90AA44", VA = "0x90AA44")]
	private void SetHealingSound(bool isPlaying)
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0x90B850", Offset = "0x90B850", VA = "0x90B850")]
	public HealingControl()
	{
	}
}
[Token(Token = "0x20000B5")]
public class HealingStarController : MonoBehaviour
{
	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer m_emptyTexturePlane;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer m_filledTexturePlane;

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x90BD2C", Offset = "0x90BD2C", VA = "0x90BD2C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0x90BDBC", Offset = "0x90BDBC", VA = "0x90BDBC")]
	private void MakeActive(bool active)
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0x90B5FC", Offset = "0x90B5FC", VA = "0x90B5FC")]
	public void UpdateColor(bool active)
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0x90BEA0", Offset = "0x90BEA0", VA = "0x90BEA0")]
	public void Update()
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0x90BEFC", Offset = "0x90BEFC", VA = "0x90BEFC")]
	public string PrintData()
	{
		return null;
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0x90C1CC", Offset = "0x90C1CC", VA = "0x90C1CC")]
	public HealingStarController()
	{
	}
}
[Token(Token = "0x20000B6")]
public class HotspotBarn : MonoBehaviour
{
	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_hotspotCursorPrefab;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float kCursorMoveSpeed;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74EE38", Offset = "0x74EE38")]
	private bool <MoveCursorWithStick>k__BackingField;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Hotspot> m_hotspots;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Vector3> m_hotspotsViewport;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Hotspot m_selectedHotspot;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_isStickActivated;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool m_controllerUpIsPositive;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject m_hotspotCursor;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CursorProjector m_cursorProjector;

	[Token(Token = "0x40006B0")]
	private const float kMagnitudeForActivation = 0.1f;

	[Token(Token = "0x40006B1")]
	private const float kFitConePrecision = 0.5f;

	[Token(Token = "0x17000093")]
	public bool MoveCursorWithStick
	{
		[Token(Token = "0x6000609")]
		[Address(RVA = "0x90CB80", Offset = "0x90CB80", VA = "0x90CB80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75701C", Offset = "0x75701C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600060A")]
		[Address(RVA = "0x90CB88", Offset = "0x90CB88", VA = "0x90CB88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75702C", Offset = "0x75702C")]
		set
		{
		}
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x90C94C", Offset = "0x90C94C", VA = "0x90C94C")]
	public void AddHotspot(Hotspot hotspot)
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x90CAA4", Offset = "0x90CAA4", VA = "0x90CAA4")]
	public void RemoveHotspot(Hotspot hotspot)
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0x90CB94", Offset = "0x90CB94", VA = "0x90CB94")]
	public void SelectHotspot(Hotspot hotspot)
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0x90CB9C", Offset = "0x90CB9C", VA = "0x90CB9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0x90CBA8", Offset = "0x90CBA8", VA = "0x90CBA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0x90CCD4", Offset = "0x90CCD4", VA = "0x90CCD4")]
	private void UpdateHotspotFX()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0x90CD98", Offset = "0x90CD98", VA = "0x90CD98")]
	private void UpdateSelectionFromGamepad()
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0x90CE1C", Offset = "0x90CE1C", VA = "0x90CE1C")]
	private Vector2 GetLeftStick()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0x90CEDC", Offset = "0x90CEDC", VA = "0x90CEDC")]
	private void SelectHotspotFromDirection(Vector2 selectionDir)
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x90D1BC", Offset = "0x90D1BC", VA = "0x90D1BC")]
	private void UpdateMovementFromGamepad()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x90D348", Offset = "0x90D348", VA = "0x90D348")]
	private void UpdateInteractionFromGamepad()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0x90D448", Offset = "0x90D448", VA = "0x90D448")]
	private void Update()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0x90D47C", Offset = "0x90D47C", VA = "0x90D47C")]
	public HotspotBarn()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B7")]
public class InteractiveBeat
{
	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public string Name;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74EE58", Offset = "0x74EE58")]
	public CinematicActor m_actorToTouch;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74EE90", Offset = "0x74EE90")]
	public UnityEvent m_onAdvanceCinematic;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public bool m_touched;

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x7D607C", Offset = "0x7D607C", VA = "0x7D607C")]
	public InteractiveBeat()
	{
	}
}
[Token(Token = "0x20000B8")]
public class InteractiveCinematic : MonoBehaviour
{
	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InteractiveBeat[] m_interactiveBeats;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CinematicActor[] m_cinematicActors;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_currentBeat;

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x7D6084", Offset = "0x7D6084", VA = "0x7D6084")]
	private void Awake()
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0x7D60F8", Offset = "0x7D60F8", VA = "0x7D60F8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0x7D61CC", Offset = "0x7D61CC", VA = "0x7D61CC")]
	public void AdvanceCinematic()
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0x7D629C", Offset = "0x7D629C", VA = "0x7D629C")]
	public void CheckBeat(CinematicActor actor)
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0x7D6378", Offset = "0x7D6378", VA = "0x7D6378")]
	public InteractiveCinematic()
	{
	}
}
[Token(Token = "0x20000B9")]
public class IntroSplash : MonoBehaviour
{
	[Token(Token = "0x2000469")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE40", Offset = "0x74AE40")]
	private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntroSplash <>4__this;

		[Token(Token = "0x1700037C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022F9")]
			[Address(RVA = "0x7D666C", Offset = "0x7D666C", VA = "0x7D666C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022FB")]
			[Address(RVA = "0x7D66D8", Offset = "0x7D66D8", VA = "0x7D66D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022F6")]
		[Address(RVA = "0x7D64D8", Offset = "0x7D64D8", VA = "0x7D64D8")]
		[DebuggerHidden]
		public <Start>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60022F7")]
		[Address(RVA = "0x7D6518", Offset = "0x7D6518", VA = "0x7D6518", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022F8")]
		[Address(RVA = "0x7D651C", Offset = "0x7D651C", VA = "0x7D651C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022FA")]
		[Address(RVA = "0x7D6674", Offset = "0x7D6674", VA = "0x7D6674", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kSplashTime;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float kDelayStartTime;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator m_logoAnim;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_splashTimer;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_delayStartTimer;

	[Token(Token = "0x600061E")]
	[Address(RVA = "0x7D6380", Offset = "0x7D6380", VA = "0x7D6380")]
	private void Update()
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0x7D6464", Offset = "0x7D6464", VA = "0x7D6464")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75703C", Offset = "0x75703C")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0x7D6504", Offset = "0x7D6504", VA = "0x7D6504")]
	public IntroSplash()
	{
	}
}
[Token(Token = "0x20000BA")]
public class KartridgeAchievementSystem : AchievementSystem
{
	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Queue<string> m_achievementQueue;

	[Token(Token = "0x6000621")]
	[Address(RVA = "0x7D7E20", Offset = "0x7D7E20", VA = "0x7D7E20")]
	private string GetKartridgeAchievementID(AchievementsManager.ID id)
	{
		return null;
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0x7D7EA0", Offset = "0x7D7EA0", VA = "0x7D7EA0")]
	private void CallUnlockAchievement(string id)
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x7D7EA4", Offset = "0x7D7EA4", VA = "0x7D7EA4", Slot = "4")]
	public override void UnlockAchievement(AchievementsManager.ID id, bool queue = false)
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x7D7F3C", Offset = "0x7D7F3C", VA = "0x7D7F3C", Slot = "5")]
	public override void UnlockQueuedAchievements()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x7D7FB0", Offset = "0x7D7FB0", VA = "0x7D7FB0")]
	public KartridgeAchievementSystem()
	{
	}
}
[Token(Token = "0x20000BB")]
public class KineticIslandController : MonoBehaviour
{
	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ulong HashValue;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] m_islands;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform[] m_transformOffsets;

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x7D8028", Offset = "0x7D8028", VA = "0x7D8028")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x7D820C", Offset = "0x7D820C", VA = "0x7D820C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x7D8390", Offset = "0x7D8390", VA = "0x7D8390")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x7D8428", Offset = "0x7D8428", VA = "0x7D8428")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x7D8208", Offset = "0x7D8208", VA = "0x7D8208")]
	private void Setup()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0x7D84C0", Offset = "0x7D84C0", VA = "0x7D84C0")]
	public void SetInitialState()
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x7D8514", Offset = "0x7D8514", VA = "0x7D8514")]
	private void Depopulate(int index)
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x7D8680", Offset = "0x7D8680", VA = "0x7D8680")]
	public void Populate(int index)
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x7D87EC", Offset = "0x7D87EC", VA = "0x7D87EC")]
	public KineticIslandController()
	{
	}
}
[Token(Token = "0x20000BC")]
public class KineticToStarsSeq : MonoBehaviour
{
	[Token(Token = "0x200046A")]
	private enum VOType
	{
		[Token(Token = "0x4001F91")]
		None,
		[Token(Token = "0x4001F92")]
		Enter,
		[Token(Token = "0x4001F93")]
		Exit,
		[Token(Token = "0x4001F94")]
		Solved
	}

	[Token(Token = "0x200046B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE50", Offset = "0x74AE50")]
	private sealed class <>c__DisplayClass50_0
	{
		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public KineticToStarsSeq <>4__this;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string soundEvent;

		[Token(Token = "0x60022FC")]
		[Address(RVA = "0x7DB2BC", Offset = "0x7DB2BC", VA = "0x7DB2BC")]
		public <>c__DisplayClass50_0()
		{
		}

		[Token(Token = "0x60022FD")]
		[Address(RVA = "0x7DC50C", Offset = "0x7DC50C", VA = "0x7DC50C")]
		internal void <PlayVO>b__0()
		{
		}
	}

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ulong HashValue;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Foldable m_currentFoldable;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ListOfGameObjects m_worldToHide;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ListOfGameObjects m_worldToDisable;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool m_skipAnimTransitionToCreate;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Renderer> m_worldRenderers;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<GameObject> m_geoGroupToHide;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Collider> m_worldColliders;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<HaloHelper> m_haloHelpers;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TerrariumShellDissolveControl m_shell;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private KineticIslandController m_kineticIslandController;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Constellation m_constellation;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Bird m_bird;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private BirdEyeControl m_birdEyeControl;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 m_oldCameraPos;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Quaternion m_oldCameraRot;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool m_pendingStar;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int m_numPuzzles;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int m_numPuzzlesSolved;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform m_createTransform;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private ResourceRequest m_createTransformRequest;

	[Token(Token = "0x40006D7")]
	private const float kFadeSpeed = 1f;

	[Token(Token = "0x40006D8")]
	private const float kSwitchToStarsDelayTime = 1f;

	[Token(Token = "0x40006D9")]
	private const float kSwitchToGroundDelayTime = 1f;

	[Token(Token = "0x40006DA")]
	private const float kReleaseScribbleDelayTime = 6f;

	[Token(Token = "0x40006DB")]
	private const float kCameraTransitionTime = 10f;

	[Token(Token = "0x40006DC")]
	private const float kDelayAfterShellCloses = 3f;

	[Token(Token = "0x40006DD")]
	private const string kCreateTransformPath = "VRTransforms/VRTransform_Create";

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private string m_pendingSoundEvent;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74EED8", Offset = "0x74EED8")]
	public float m_shellCloseDelay;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float kDelayAfterBirdCall;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float kDelayBeforeBirdCall;

	[Token(Token = "0x17000094")]
	private TerrariumShellDissolveControl ShellRef
	{
		[Token(Token = "0x6000630")]
		[Address(RVA = "0x7DA474", Offset = "0x7DA474", VA = "0x7DA474")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000095")]
	private KineticIslandController KineticIslandControllerRef
	{
		[Token(Token = "0x6000631")]
		[Address(RVA = "0x7DA55C", Offset = "0x7DA55C", VA = "0x7DA55C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000096")]
	private Transform CreateTransform
	{
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x7DA644", Offset = "0x7DA644", VA = "0x7DA644")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000097")]
	public bool StarPuzzlePending
	{
		[Token(Token = "0x6000633")]
		[Address(RVA = "0x7DA72C", Offset = "0x7DA72C", VA = "0x7DA72C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000098")]
	public string CurrentStarPuzzleName
	{
		[Token(Token = "0x6000634")]
		[Address(RVA = "0x7D9FAC", Offset = "0x7D9FAC", VA = "0x7D9FAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0x7D9CE4", Offset = "0x7D9CE4", VA = "0x7D9CE4")]
	public void StartTransitionToStars(Foldable foldable)
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0x7DA734", Offset = "0x7DA734", VA = "0x7DA734")]
	public void ToggleWorld(int worldEnabled)
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0x7DAA6C", Offset = "0x7DAA6C", VA = "0x7DAA6C")]
	public void ContinueTransitionToStars()
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0x7DAB20", Offset = "0x7DAB20", VA = "0x7DAB20")]
	public void SwitchToStars()
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0x7DABE8", Offset = "0x7DABE8", VA = "0x7DABE8")]
	public void SwitchToStarsCallback()
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0x7DB0E8", Offset = "0x7DB0E8", VA = "0x7DB0E8")]
	private void PlaySoundEvent()
	{
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0x7DB1D8", Offset = "0x7DB1D8", VA = "0x7DB1D8")]
	private void PlaySoundEvent(string eventName)
	{
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0x7DAEF0", Offset = "0x7DAEF0", VA = "0x7DAEF0")]
	private void PlayVO(Foldable foldable, VOType type)
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0x7DB2C4", Offset = "0x7DB2C4", VA = "0x7DB2C4")]
	private void StartTransitionToGround(object obj)
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0x7DB414", Offset = "0x7DB414", VA = "0x7DB414")]
	public void PlaySound(string soundName)
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0x7DB4D8", Offset = "0x7DB4D8", VA = "0x7DB4D8")]
	public void EndOfLevel()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x7DB548", Offset = "0x7DB548", VA = "0x7DB548")]
	private void SwitchToGround()
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x7DB684", Offset = "0x7DB684", VA = "0x7DB684")]
	private void SwitchToGroundCallback()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x7DB958", Offset = "0x7DB958", VA = "0x7DB958")]
	private void OnShellClosed(object obj)
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0x7DA84C", Offset = "0x7DA84C", VA = "0x7DA84C")]
	private void ToggleGameObjects(bool isVisible)
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0x7DBAE0", Offset = "0x7DBAE0", VA = "0x7DBAE0")]
	private void SetConstellation(object obj)
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x7DBB70", Offset = "0x7DBB70", VA = "0x7DBB70")]
	private void PuzzleSolved(object obj)
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x7DBB7C", Offset = "0x7DBB7C", VA = "0x7DBB7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x7DBD80", Offset = "0x7DBD80", VA = "0x7DBD80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x7DC050", Offset = "0x7DC050", VA = "0x7DC050")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x7DC230", Offset = "0x7DC230", VA = "0x7DC230")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x7DC2C8", Offset = "0x7DC2C8", VA = "0x7DC2C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x7DC360", Offset = "0x7DC360", VA = "0x7DC360")]
	private void Update()
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0x7DC3AC", Offset = "0x7DC3AC", VA = "0x7DC3AC")]
	public KineticToStarsSeq()
	{
	}
}
[Token(Token = "0x20000BD")]
public class LevelSelectController : MonoBehaviour
{
	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string LastPlayedScene;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_rockyRing;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PhysicsRotate m_physicsRotateVR;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PhysicsRotate m_physicsRotateNoVR;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_nextLevelRotationDelay;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] m_moonFragments;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Collider m_collider;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_currentLevelIndex;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool m_currentLevelIsComplete;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool m_isLerping;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool m_selectionComplete;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_lerpTime;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_lerpTimeCap;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_currentRotationValue;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_targetRotationValue;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<LevelSelectTrigger> m_levelSelectTriggers;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AnimationCurve m_lerpCurve;

	[Token(Token = "0x600064E")]
	[Address(RVA = "0x7DD7E8", Offset = "0x7DD7E8", VA = "0x7DD7E8")]
	public bool GetSelectionComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x7DD7F0", Offset = "0x7DD7F0", VA = "0x7DD7F0")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x7DD874", Offset = "0x7DD874", VA = "0x7DD874")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x7DDAD8", Offset = "0x7DDAD8", VA = "0x7DDAD8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x7DDB78", Offset = "0x7DDB78", VA = "0x7DDB78")]
	public void SetSelectionComplete()
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x7DDC48", Offset = "0x7DDC48", VA = "0x7DDC48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0x7DE378", Offset = "0x7DE378", VA = "0x7DE378")]
	private int GetNextPlayableLevel()
	{
		return default(int);
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0x7DDAB8", Offset = "0x7DDAB8", VA = "0x7DDAB8")]
	public void SetColliderState(bool state)
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x7DE57C", Offset = "0x7DE57C", VA = "0x7DE57C")]
	private void DisableTurnRing(object obj)
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x7DDBAC", Offset = "0x7DDBAC", VA = "0x7DDBAC")]
	public void HideAllTriggers()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x7DE704", Offset = "0x7DE704", VA = "0x7DE704")]
	private void SetTriggerStateOnLevelToLoad()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x7DEAA0", Offset = "0x7DEAA0", VA = "0x7DEAA0")]
	public void SetLevelFromPhysicsRotation(int index)
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x7DEB54", Offset = "0x7DEB54", VA = "0x7DEB54")]
	private float GetRotationValueFromIndex(int index)
	{
		return default(float);
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x7DE41C", Offset = "0x7DE41C", VA = "0x7DE41C")]
	private void SetTurnRingRotation(int index, bool enablePhysics)
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0x7DE468", Offset = "0x7DE468", VA = "0x7DE468")]
	private void StartTurnRingRotationToNextLevel(int nextIndex)
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0x7DEC88", Offset = "0x7DEC88", VA = "0x7DEC88")]
	private void StartLerping()
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0x7DEBCC", Offset = "0x7DEBCC", VA = "0x7DEBCC")]
	private void AssignLocalEulerAngles(float rotation)
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0x7DED80", Offset = "0x7DED80", VA = "0x7DED80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x7DEEC0", Offset = "0x7DEEC0", VA = "0x7DEEC0")]
	public LevelSelectController()
	{
	}
}
[Token(Token = "0x20000BE")]
public class LunaSaveLoadBarn
{
	[Token(Token = "0x200046C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE60", Offset = "0x74AE60")]
	private sealed class <Initialize>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LunaSaveLoadBarn <>4__this;

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string <saveGameStringData>5__2;

		[Token(Token = "0x1700037E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002301")]
			[Address(RVA = "0x806D30", Offset = "0x806D30", VA = "0x806D30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002303")]
			[Address(RVA = "0x806D9C", Offset = "0x806D9C", VA = "0x806D9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0x804E78", Offset = "0x804E78", VA = "0x804E78")]
		[DebuggerHidden]
		public <Initialize>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0x80696C", Offset = "0x80696C", VA = "0x80696C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002300")]
		[Address(RVA = "0x806970", Offset = "0x806970", VA = "0x806970", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002302")]
		[Address(RVA = "0x806D38", Offset = "0x806D38", VA = "0x806D38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006F3")]
	private const string kSaveGameDataFilename = "SaveGameData.sav";

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private LunaSaveGameData m_saveGameData;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_isInitialized;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool m_isInitializing;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74EEF0", Offset = "0x74EEF0")]
	private bool <LoadError>k__BackingField;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, CreateModeStamp> m_stampsInLevel;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MonoBehaviour m_psvrEvents;

	[Token(Token = "0x17000099")]
	public bool LoadError
	{
		[Token(Token = "0x6000662")]
		[Address(RVA = "0x804A30", Offset = "0x804A30", VA = "0x804A30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7570A0", Offset = "0x7570A0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000663")]
		[Address(RVA = "0x804A38", Offset = "0x804A38", VA = "0x804A38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7570B0", Offset = "0x7570B0")]
		set
		{
		}
	}

	[Token(Token = "0x1700009A")]
	public bool IsInitializing
	{
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x804A44", Offset = "0x804A44", VA = "0x804A44")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700009B")]
	public bool MushroomComplete
	{
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x804A4C", Offset = "0x804A4C", VA = "0x804A4C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x804BC4", Offset = "0x804BC4", VA = "0x804BC4")]
	public bool GetIsInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x804BCC", Offset = "0x804BCC", VA = "0x804BCC")]
	public bool GetIsSavingAllowed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x804C8C", Offset = "0x804C8C", VA = "0x804C8C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x804C98", Offset = "0x804C98", VA = "0x804C98")]
	public void TerminateData()
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x804CA4", Offset = "0x804CA4", VA = "0x804CA4")]
	public void UnloadSavedata()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x804E04", Offset = "0x804E04", VA = "0x804E04")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7570C0", Offset = "0x7570C0")]
	public IEnumerator Initialize()
	{
		return null;
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x804D48", Offset = "0x804D48", VA = "0x804D48")]
	private LunaSaveGameData CreateNewSaveData()
	{
		return null;
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x804EA4", Offset = "0x804EA4", VA = "0x804EA4")]
	private bool IsKineticScene(UnityEngine.SceneManagement.Scene scene)
	{
		return default(bool);
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x804F10", Offset = "0x804F10", VA = "0x804F10")]
	private bool IsCreateScene(UnityEngine.SceneManagement.Scene scene)
	{
		return default(bool);
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x804F7C", Offset = "0x804F7C", VA = "0x804F7C")]
	public TimeSpan GetTimeSinceCurrentSceneLastModified()
	{
		return default(TimeSpan);
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x80511C", Offset = "0x80511C", VA = "0x80511C")]
	private void SaveCurrentScene(LunaSaveGameData saveGameData)
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x805BC8", Offset = "0x805BC8", VA = "0x805BC8")]
	public void SaveGameStateToFile()
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x805D94", Offset = "0x805D94", VA = "0x805D94")]
	private void WriteSaveDataToStorage(LunaSaveGameData saveGameData)
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x805C6C", Offset = "0x805C6C", VA = "0x805C6C")]
	public void SaveOptions(LunaSaveGameData saveGameData)
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x802B94", Offset = "0x802B94", VA = "0x802B94")]
	public LunaOptions GetOptions()
	{
		return null;
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x805E90", Offset = "0x805E90", VA = "0x805E90")]
	public LunaSaveGameKineticSceneData GetKineticData(string sceneName)
	{
		return null;
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x805EB0", Offset = "0x805EB0", VA = "0x805EB0")]
	public void ResetSaveData()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x8051E4", Offset = "0x8051E4", VA = "0x8051E4")]
	private LunaSaveGameKineticSceneData GetKineticData(LunaSaveGameData saveGameData, string sceneName)
	{
		return null;
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x80528C", Offset = "0x80528C", VA = "0x80528C")]
	private LunaSaveGameKineticSceneData AddKineticData(LunaSaveGameData saveGameData, string sceneName)
	{
		return null;
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x805EF0", Offset = "0x805EF0", VA = "0x805EF0")]
	public LunaSaveGameCreateSceneData GetCreateData(string sceneName)
	{
		return null;
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x805074", Offset = "0x805074", VA = "0x805074")]
	private LunaSaveGameCreateSceneData GetCreateData(LunaSaveGameData saveGameData, string sceneName)
	{
		return null;
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x8055EC", Offset = "0x8055EC", VA = "0x8055EC")]
	private LunaSaveGameCreateSceneData AddCreateData(LunaSaveGameData saveGameData, string sceneName)
	{
		return null;
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x805F10", Offset = "0x805F10", VA = "0x805F10")]
	private string LoadGameStateFromFile()
	{
		return null;
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x806010", Offset = "0x806010", VA = "0x806010")]
	private LunaSaveGameData LoadGameStateFromStringData(string stringData)
	{
		return null;
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x8060D8", Offset = "0x8060D8", VA = "0x8060D8")]
	public bool HasAnySavedProgress()
	{
		return default(bool);
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x806180", Offset = "0x806180", VA = "0x806180")]
	public void RestoreGameStateInLevel()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x8053FC", Offset = "0x8053FC", VA = "0x8053FC")]
	private void SaveKineticModeState(LunaSaveGameKineticSceneData kineticData)
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x80627C", Offset = "0x80627C", VA = "0x80627C")]
	private void RestoreKineticModeState(LunaSaveGameKineticSceneData kineticData)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x80575C", Offset = "0x80575C", VA = "0x80575C")]
	private void SaveCreateModeState(LunaSaveGameCreateSceneData createData)
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0x806810", Offset = "0x806810", VA = "0x806810")]
	private void BuildStampDictionary()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x8063B8", Offset = "0x8063B8", VA = "0x8063B8")]
	private void RestoreCreateModeState(LunaSaveGameCreateSceneData createData)
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x806964", Offset = "0x806964", VA = "0x806964")]
	public LunaSaveLoadBarn()
	{
	}
}
[Token(Token = "0x20000BF")]
public class MinSpecCursorInputMonoBehaviour : MonoBehaviour
{
	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SqrDistanceCheck;

	[Token(Token = "0x40006FB")]
	private const float kRefreshTime = 2f;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 kVector3Zero;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static MinSpecCursorInputMonoBehaviour[] m_LastActive;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CursorInputMonoBehaviour[] m_CursorInputMonoBehaviours;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider[] m_Colliders;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CCDIK[] m_CCDIK;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_forceToggle;

	[Token(Token = "0x4000702")]
	private const float kColliderDisableDelay = 0.5f;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_CurrentActivatedState;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Bounds m_LocalBounds;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Bounds m_WorldBounds;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool m_oncePerFrame;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Growable m_growable;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public bool m_ignoreMinspecUpdate;

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x809724", Offset = "0x809724", VA = "0x809724")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x8097C4", Offset = "0x8097C4", VA = "0x8097C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x809DAC", Offset = "0x809DAC", VA = "0x809DAC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x809CB8", Offset = "0x809CB8", VA = "0x809CB8")]
	public void CalcBounds()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x809E64", Offset = "0x809E64", VA = "0x809E64")]
	private void CalcWorldBounds()
	{
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x80A058", Offset = "0x80A058", VA = "0x80A058")]
	private void CalcLocalBounds()
	{
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0x8098BC", Offset = "0x8098BC", VA = "0x8098BC")]
	private void InitCursorInputMonoBehaviours()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0x809970", Offset = "0x809970", VA = "0x809970")]
	private void InitColliders()
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0x809A24", Offset = "0x809A24", VA = "0x809A24")]
	private void InitCCDIK()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0x80A2A4", Offset = "0x80A2A4", VA = "0x80A2A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0x80A604", Offset = "0x80A604", VA = "0x80A604")]
	private void OnTeleport(object obj)
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0x80A6A4", Offset = "0x80A6A4", VA = "0x80A6A4")]
	private void ForceToggleOff()
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0x809AD8", Offset = "0x809AD8", VA = "0x809AD8")]
	private void ActivateScripts(bool toggle)
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0x80A8A0", Offset = "0x80A8A0", VA = "0x80A8A0")]
	private void RegisterLastActive()
	{
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0x80A734", Offset = "0x80A734", VA = "0x80A734")]
	private bool IsLastActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0x80A6B0", Offset = "0x80A6B0", VA = "0x80A6B0")]
	private bool IsGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0x80AA98", Offset = "0x80AA98", VA = "0x80AA98")]
	public MinSpecCursorInputMonoBehaviour()
	{
	}
}
[Token(Token = "0x20000C0")]
public class MinSpecCursorInputMonoBehaviourRefresh : MonoBehaviour
{
	[Token(Token = "0x4000709")]
	private const float kCalcWorldBoundsTimer = 1f;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<MinSpecCursorInputMonoBehaviour> m_All;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_calcWorldBoundsTimer;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_oncePerFrame;

	[Token(Token = "0x6000698")]
	[Address(RVA = "0x80AB48", Offset = "0x80AB48", VA = "0x80AB48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0x809CD0", Offset = "0x809CD0", VA = "0x809CD0")]
	public static void Add(MinSpecCursorInputMonoBehaviour script)
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0x80AB74", Offset = "0x80AB74", VA = "0x80AB74")]
	public void Refresh()
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0x80ABAC", Offset = "0x80ABAC", VA = "0x80ABAC")]
	private void Update()
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0x80AC60", Offset = "0x80AC60", VA = "0x80AC60")]
	public static void CalcWorldBounds()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0x80AD50", Offset = "0x80AD50", VA = "0x80AD50")]
	public MinSpecCursorInputMonoBehaviourRefresh()
	{
	}
}
[Token(Token = "0x20000C1")]
public class MinSpecObjectDisable : MonoBehaviour
{
	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool kEnableOnMinSpec;

	[Token(Token = "0x600069F")]
	[Address(RVA = "0x80ADD4", Offset = "0x80ADD4", VA = "0x80ADD4")]
	private void Start()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x80AE2C", Offset = "0x80AE2C", VA = "0x80AE2C")]
	public MinSpecObjectDisable()
	{
	}
}
[Token(Token = "0x20000C2")]
public class MinSpecParticleSystem : MonoBehaviour
{
	[Token(Token = "0x400070E")]
	private const float kStartSizeMultiplier = 2f;

	[Token(Token = "0x400070F")]
	private const float kMaxParticlesMultiplier = 0.25f;

	[Token(Token = "0x4000710")]
	private const float kMaxViewportSize = 0.1f;

	[Token(Token = "0x4000711")]
	private const float kEmissionRateOverTimeMultiplier = 0.333f;

	[Token(Token = "0x4000712")]
	private const float kAlphaMultiplier = 1.5f;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 StartSize;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MaxParticles;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int MaxParticlesException;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float EmissionRateOverTime;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float AlphaMultiplier;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem m_ParticleSystem;

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0x80AE34", Offset = "0x80AE34", VA = "0x80AE34")]
	private void Start()
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0x80B8BC", Offset = "0x80B8BC", VA = "0x80B8BC")]
	private ParticleSystem.MinMaxGradient FixAlphas(ParticleSystem.MinMaxGradient gradient)
	{
		return default(ParticleSystem.MinMaxGradient);
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0x80B954", Offset = "0x80B954", VA = "0x80B954")]
	private Color FixAlpha(Color color)
	{
		return default(Color);
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x80B384", Offset = "0x80B384", VA = "0x80B384")]
	private void CheckIfDefaultValues()
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x80B644", Offset = "0x80B644", VA = "0x80B644")]
	private bool CheckIfSmallSystem(ParticleSystem particleSystem, int maxParticleCount)
	{
		return default(bool);
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x80BA10", Offset = "0x80BA10", VA = "0x80BA10")]
	public MinSpecParticleSystem()
	{
	}
}
[Token(Token = "0x20000C3")]
public enum BezierControlPointMode
{
	[Token(Token = "0x400071A")]
	Free,
	[Token(Token = "0x400071B")]
	Aligned,
	[Token(Token = "0x400071C")]
	Mirrored
}
[Token(Token = "0x20000C4")]
public class BezierSpline : MonoBehaviour
{
	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3[] points;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BezierControlPointMode[] modes;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool loop;

	[Token(Token = "0x1700009C")]
	public int GetControlPointCount
	{
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x844A48", Offset = "0x844A48", VA = "0x844A48")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700009D")]
	public int GetCurveCount
	{
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x844A68", Offset = "0x844A68", VA = "0x844A68")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700009E")]
	public bool Loop
	{
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x8452F0", Offset = "0x8452F0", VA = "0x8452F0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x8452F8", Offset = "0x8452F8", VA = "0x8452F8")]
		set
		{
		}
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x844AA4", Offset = "0x844AA4", VA = "0x844AA4")]
	public Vector3 GetControlPoint(int index)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x844AF4", Offset = "0x844AF4", VA = "0x844AF4")]
	public BezierControlPointMode GetControlPointMode(int index)
	{
		return default(BezierControlPointMode);
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x844B54", Offset = "0x844B54", VA = "0x844B54")]
	public Vector3 GetPoint(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x844E54", Offset = "0x844E54", VA = "0x844E54")]
	public Vector3 GetDirection(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x8450B0", Offset = "0x8450B0", VA = "0x8450B0")]
	private Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x845374", Offset = "0x845374", VA = "0x845374")]
	public void SetControlPoint(int index, Vector3 point)
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0x845B30", Offset = "0x845B30", VA = "0x845B30")]
	public void SetControlPointMode(int index, BezierControlPointMode mode)
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0x845838", Offset = "0x845838", VA = "0x845838")]
	private void EnforceMode(int index)
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x845BE0", Offset = "0x845BE0", VA = "0x845BE0")]
	public void AddCurve()
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x845E24", Offset = "0x845E24", VA = "0x845E24")]
	public void Reset()
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0x845FA8", Offset = "0x845FA8", VA = "0x845FA8")]
	public BezierSpline()
	{
	}
}
[Token(Token = "0x20000C5")]
public class JumpControl : MonoBehaviour
{
	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurveScriptableObject m_jumpCurve;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_jumpTransform;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_localPositionOnAwake;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_jumpMultiplier;

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0x7D7D70", Offset = "0x7D7D70", VA = "0x7D7D70")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x7D7DA8", Offset = "0x7D7DA8", VA = "0x7D7DA8")]
	public void SetJumpMultiplier(float value)
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x7D7DB0", Offset = "0x7D7DB0", VA = "0x7D7DB0")]
	public void DriveJump(float value)
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x7D7E10", Offset = "0x7D7E10", VA = "0x7D7E10")]
	public JumpControl()
	{
	}
}
[Token(Token = "0x20000C6")]
public class MoveEvent
{
	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent m_listenersPermanent;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_listenersTemporary;

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x80C444", Offset = "0x80C444", VA = "0x80C444")]
	public void AddListener(UnityAction action, bool isPermanent)
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x80C4C8", Offset = "0x80C4C8", VA = "0x80C4C8")]
	public void RemoveListener(UnityAction action, bool isPermanent)
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x80C5CC", Offset = "0x80C5CC", VA = "0x80C5CC")]
	public void Execute()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x80C564", Offset = "0x80C564", VA = "0x80C564")]
	public void Clear()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x80C3B0", Offset = "0x80C3B0", VA = "0x80C3B0")]
	public void ClearAll()
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x80C2B8", Offset = "0x80C2B8", VA = "0x80C2B8")]
	public MoveEvent()
	{
	}
}
[Token(Token = "0x20000C7")]
public enum MoveEventType
{
	[Token(Token = "0x4000727")]
	MoveStart,
	[Token(Token = "0x4000728")]
	MoveEnd,
	[Token(Token = "0x4000729")]
	MoveUpdate
}
[Token(Token = "0x20000C8")]
public class MoveControl : MonoBehaviour
{
	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MoveEvent[] m_moveEvents;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool m_isMoving;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_speed;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_startTime;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_percentComplete;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PointAxis m_pointAxis;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurveScriptableObject m_speedCurve;

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x80C06C", Offset = "0x80C06C", VA = "0x80C06C")]
	public PointAxis GetPointAxis()
	{
		return null;
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0x80C074", Offset = "0x80C074", VA = "0x80C074")]
	public void SetMoveSpeed(float moveSpeed)
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0x80C07C", Offset = "0x80C07C", VA = "0x80C07C")]
	public bool GetIsMoving()
	{
		return default(bool);
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0x80C084", Offset = "0x80C084", VA = "0x80C084")]
	public void SetIsMoving(bool isMoving)
	{
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x80C090", Offset = "0x80C090", VA = "0x80C090")]
	public float GetMovePercentComplete()
	{
		return default(float);
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0x80C098", Offset = "0x80C098", VA = "0x80C098")]
	public Vector3 GetCurrentPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0x80C0C8", Offset = "0x80C0C8", VA = "0x80C0C8")]
	public void SetStartPosition(Vector3 startPosition)
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0x80C150", Offset = "0x80C150", VA = "0x80C150")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0x80C340", Offset = "0x80C340", VA = "0x80C340")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x80C3EC", Offset = "0x80C3EC", VA = "0x80C3EC")]
	public void AddMoveEvent(MoveEventType moveEventType, UnityAction action, bool isPermanent = false)
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x80C470", Offset = "0x80C470", VA = "0x80C470")]
	public void RemoveMoveEvent(MoveEventType moveEventType, UnityAction action, bool isPermanent = false)
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x80C4F4", Offset = "0x80C4F4", VA = "0x80C4F4")]
	private void ClearAllTemporaryMoveEvents()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x80C580", Offset = "0x80C580", VA = "0x80C580")]
	private void CallEvent(MoveEventType moveEventType)
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x80C608", Offset = "0x80C608", VA = "0x80C608")]
	public void Move(Vector3 moveEndPosition)
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x80C678", Offset = "0x80C678", VA = "0x80C678")]
	private void Update()
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x80C788", Offset = "0x80C788", VA = "0x80C788")]
	public MoveControl()
	{
	}
}
[Token(Token = "0x20000C9")]
public class MoveNoise : MonoBehaviour
{
	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_amplitude;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_timeScale;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_noiseSpacing;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_noiseOffset;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_duration;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool m_applyNoiseToTransform;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool m_noiseIsConstant;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_cachedDuration;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 m_startPosition;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 m_noiseSlice;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_noiseValue;

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x80C7F0", Offset = "0x80C7F0", VA = "0x80C7F0")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x80C80C", Offset = "0x80C80C", VA = "0x80C80C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x80C894", Offset = "0x80C894", VA = "0x80C894")]
	public Vector3 GetNoiseValue()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x80C8A0", Offset = "0x80C8A0", VA = "0x80C8A0")]
	private void UpdateNoise(float multiplier = 1f)
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x80CA80", Offset = "0x80CA80", VA = "0x80CA80")]
	private void Update()
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x80CB60", Offset = "0x80CB60", VA = "0x80CB60")]
	public MoveNoise()
	{
	}
}
[Token(Token = "0x20000CA")]
public class PathMesh : MonoBehaviour
{
	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public string m_name;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<PathPoint> m_pathPoints;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public Color m_color;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_radius;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public PathMeshType m_pathMeshType;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_normalScale;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public List<PathMeshCritterMonoBehaviour> m_pathMeshCritters;

	[Token(Token = "0x4000743")]
	private const int kGetRandomLinkLimit = 10;

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x8125CC", Offset = "0x8125CC", VA = "0x8125CC")]
	public void SetOccupied(int index)
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x812650", Offset = "0x812650", VA = "0x812650")]
	public void SetEmpty(int index)
	{
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x8126D8", Offset = "0x8126D8", VA = "0x8126D8")]
	public bool GetIsEmpty(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x81275C", Offset = "0x81275C", VA = "0x81275C")]
	public void PathMeshSetup(string name, Color color)
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x8127FC", Offset = "0x8127FC", VA = "0x8127FC")]
	public void AddPathMeshCritter(PathMeshCritterMonoBehaviour pathMeshCritterMonoBehaviour)
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x812864", Offset = "0x812864", VA = "0x812864")]
	public void DeletePathPoint(int indexToDelete)
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x812A80", Offset = "0x812A80", VA = "0x812A80")]
	public void CreatePathMesh(List<VertexConnection> connectedPathMeshPoints, PathMeshType pathMeshType)
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x812C70", Offset = "0x812C70", VA = "0x812C70")]
	public int GetClosestEmptyPathPoint(Vector3 pos)
	{
		return default(int);
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x812DBC", Offset = "0x812DBC", VA = "0x812DBC")]
	public int GetRandomLink(int index, int exclude)
	{
		return default(int);
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x812F20", Offset = "0x812F20", VA = "0x812F20")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x812F98", Offset = "0x812F98", VA = "0x812F98")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x81327C", Offset = "0x81327C", VA = "0x81327C")]
	public PathMesh()
	{
	}
}
[Token(Token = "0x20000CB")]
public enum PathMeshType
{
	[Token(Token = "0x4000745")]
	pattern,
	[Token(Token = "0x4000746")]
	mesh
}
[Token(Token = "0x20000CC")]
public class PathMeshStartKit
{
	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PathMesh m_pathMesh;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_startIndex;

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x81358C", Offset = "0x81358C", VA = "0x81358C")]
	public PathMeshStartKit()
	{
	}
}
[Token(Token = "0x20000CD")]
public class PathMeshBarn : MonoBehaviour
{
	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<PathMesh> m_pathMeshes;

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x8132EC", Offset = "0x8132EC", VA = "0x8132EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x813350", Offset = "0x813350", VA = "0x813350")]
	public PathMesh AddPathMesh(string name, Color color)
	{
		return null;
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x813424", Offset = "0x813424", VA = "0x813424")]
	public PathMeshStartKit GetPathMesh(Vector3 queryPosition, string pathMeshName)
	{
		return null;
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x813594", Offset = "0x813594", VA = "0x813594")]
	public PathMeshStartKit GetClosestPathMesh(Vector3 queryPosition, PathMeshType pathMeshType)
	{
		return null;
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x813810", Offset = "0x813810", VA = "0x813810")]
	public PathMeshBarn()
	{
	}
}
[Serializable]
[Token(Token = "0x20000CE")]
public class PathPoint
{
	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int m_index;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool m_isEmpty;

	[Token(Token = "0x400074C")]
	private const int kGetRandomLinkLimit = 10;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<int> m_pathPointLinks;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 m_position;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 m_normal;

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x815538", Offset = "0x815538", VA = "0x815538")]
	public void SetIndex(int index)
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x8129B0", Offset = "0x8129B0", VA = "0x8129B0")]
	public void SetIndex(int index, int threshold)
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0x812B84", Offset = "0x812B84", VA = "0x812B84")]
	public PathPoint(int index, VertexConnection vc, string pathMeshName)
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x812E8C", Offset = "0x812E8C", VA = "0x812E8C")]
	public int GetRandomLink()
	{
		return default(int);
	}
}
[Token(Token = "0x20000CF")]
public class PathPosition
{
	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PathPosition link;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_position;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 m_aim;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 m_up;

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x815540", Offset = "0x815540", VA = "0x815540")]
	public void SetPosition(Vector3 pos)
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x81554C", Offset = "0x81554C", VA = "0x81554C")]
	public void SetAim(Vector3 aim)
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x815558", Offset = "0x815558", VA = "0x815558")]
	public void SetUp(Vector3 up)
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x814F60", Offset = "0x814F60", VA = "0x814F60")]
	public void GetLinkedData()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x813F58", Offset = "0x813F58", VA = "0x813F58")]
	public PathPosition()
	{
	}
}
[Token(Token = "0x20000D0")]
public enum SplineMoveType
{
	[Token(Token = "0x4000755")]
	Once,
	[Token(Token = "0x4000756")]
	OnceThenDeactivate,
	[Token(Token = "0x4000757")]
	Loop,
	[Token(Token = "0x4000758")]
	PingPong
}
[Token(Token = "0x20000D1")]
public class SplineMoveControl : MonoBehaviour
{
	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BezierSpline m_spline;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SplineMoveType mode;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurveScriptableObject m_speedCurve;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool m_moveForward;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool m_lookForward;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float m_duration;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_delay;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve m_scaleChange;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 m_rotationChange;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent m_OnDelayComplete;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent m_OnMoveComplete;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_progress;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 m_startingScale;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 m_startingRotation;

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0x8B6BA8", Offset = "0x8B6BA8", VA = "0x8B6BA8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0x8B6BE0", Offset = "0x8B6BE0", VA = "0x8B6BE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0x8B6C4C", Offset = "0x8B6C4C", VA = "0x8B6C4C")]
	private void Move()
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0x8B7020", Offset = "0x8B7020", VA = "0x8B7020")]
	private void Update()
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0x8B7090", Offset = "0x8B7090", VA = "0x8B7090")]
	public SplineMoveControl()
	{
	}
}
[Token(Token = "0x20000D2")]
public class VertexConnection
{
	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 m_position;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 m_normal;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<int> m_connections;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Vector3> m_normals;

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0x832978", Offset = "0x832978", VA = "0x832978")]
	public void AverageNormals()
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0x832AF0", Offset = "0x832AF0", VA = "0x832AF0")]
	public VertexConnection()
	{
	}
}
[Token(Token = "0x20000D3")]
public class LunaOptions
{
	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int m_masterVolume;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int m_musicVolume;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_sfxVolume;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int m_narratorVolume;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_subtitles;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public SystemLanguage m_language;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int m_brightness;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool m_vibration;

	[Token(Token = "0x1700009F")]
	public bool LegacyStoryMode
	{
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x8017AC", Offset = "0x8017AC", VA = "0x8017AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0x8017CC", Offset = "0x8017CC", VA = "0x8017CC")]
	public LunaSaveGameData.SavedOptions ToSavedOptions()
	{
		return null;
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0x8018DC", Offset = "0x8018DC", VA = "0x8018DC")]
	public static LunaOptions ToLunaOptions(LunaSaveGameData.SavedOptions options)
	{
		return null;
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0x8019A4", Offset = "0x8019A4", VA = "0x8019A4")]
	public static LunaOptions Default()
	{
		return null;
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0x801A38", Offset = "0x801A38", VA = "0x801A38")]
	private LunaOptions Copy()
	{
		return null;
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0x801AEC", Offset = "0x801AEC", VA = "0x801AEC")]
	private void AuditChange(object val1, object val2, EventBarn.EventType eventType)
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0x801B54", Offset = "0x801B54", VA = "0x801B54")]
	public void Copy(LunaOptions other)
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0x801994", Offset = "0x801994", VA = "0x801994")]
	public LunaOptions()
	{
	}
}
[Token(Token = "0x20000D4")]
public class LunaOptionsHandler : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200046D")]
	public class LanguageFontInfo
	{
		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SystemLanguage m_languageName;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Font m_font;

		[Token(Token = "0x6002304")]
		[Address(RVA = "0x80495C", Offset = "0x80495C", VA = "0x80495C")]
		public LanguageFontInfo()
		{
		}
	}

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LunaOptionsHandler m_instance;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static LunaOptions GameOptions;

	[Token(Token = "0x4000775")]
	private const float LOCAL_Z = 2f;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly Vector2 VECTOR2_ZERO;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly Vector2 INTRO_MIN_ANCHORS;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Vector2 INTRO_MAX_ANCHORS;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Vector2 MIN_ANCHORS;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Vector2 MAX_ANCHORS;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74EF70", Offset = "0x74EF70")]
	public LunaSlider m_masterVolume;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LunaSlider m_musicVolume;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LunaSlider m_sfxVolume;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LunaSlider m_narratorVolume;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74EFA8", Offset = "0x74EFA8")]
	public LunaToggle m_subtitles;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public LunaSelector m_language;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public LunaToggle m_storybookMode;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public LanguageFontInfo[] m_fonts;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74EFE0", Offset = "0x74EFE0")]
	public LunaSlider m_brightness;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public LunaToggle m_vibration;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74F018", Offset = "0x74F018")]
	public LunaButton m_apply;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LunaButton m_revert;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F050", Offset = "0x74F050")]
	public LunaButton m_backButton;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static LunaOptions m_dirtyOptions;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Collider[] m_childrenColliders;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74F088", Offset = "0x74F088")]
	private static bool <Dirty>k__BackingField;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool m_setStoryBookModeInternal;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Vector3 m_localPosition;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static EventBarn.EventType[] m_optionsEvents;

	[Token(Token = "0x170000A0")]
	public static LunaOptionsHandler Instance
	{
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x801DEC", Offset = "0x801DEC", VA = "0x801DEC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A1")]
	public static LunaOptions DirtyOptions
	{
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x801E54", Offset = "0x801E54", VA = "0x801E54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A2")]
	public static bool LegacyStoryMode
	{
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x801EBC", Offset = "0x801EBC", VA = "0x801EBC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A3")]
	public static bool Dirty
	{
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x801F70", Offset = "0x801F70", VA = "0x801F70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757124", Offset = "0x757124")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x801FD8", Offset = "0x801FD8", VA = "0x801FD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757134", Offset = "0x757134")]
		private set
		{
		}
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0x802048", Offset = "0x802048", VA = "0x802048")]
	public static void DispatchAllOptions()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0x80214C", Offset = "0x80214C", VA = "0x80214C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0x802608", Offset = "0x802608", VA = "0x802608")]
	private void UpdateIntroMode(UnityEngine.SceneManagement.Scene previousScene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0x80253C", Offset = "0x80253C", VA = "0x80253C")]
	private void SetupOptions()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0x802768", Offset = "0x802768", VA = "0x802768")]
	private void Update()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0x802888", Offset = "0x802888", VA = "0x802888")]
	private void SetOptionsValues(LunaOptions newOptions)
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0x80256C", Offset = "0x80256C", VA = "0x80256C")]
	private void LoadOptions()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x802BB4", Offset = "0x802BB4", VA = "0x802BB4")]
	public void ApplyChanges()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x802CB8", Offset = "0x802CB8", VA = "0x802CB8")]
	public void SetDefault()
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x802D94", Offset = "0x802D94", VA = "0x802D94")]
	public void RevertChanges()
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x802E6C", Offset = "0x802E6C", VA = "0x802E6C")]
	private Font GetFont(SystemLanguage lan)
	{
		return null;
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x802504", Offset = "0x802504", VA = "0x802504")]
	private void SetLanguages()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x802F94", Offset = "0x802F94", VA = "0x802F94")]
	private string GetGameObjectName(object obj)
	{
		return null;
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x803028", Offset = "0x803028", VA = "0x803028")]
	public void PrepareToShow()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x803158", Offset = "0x803158", VA = "0x803158")]
	public void PrepareToHide()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x803180", Offset = "0x803180", VA = "0x803180")]
	private void CheckToShowOptions(object obj)
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x8031F0", Offset = "0x8031F0", VA = "0x8031F0")]
	private void CheckToHideOptions(object obj)
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x803050", Offset = "0x803050", VA = "0x803050")]
	private void ToggleColliders(bool enabled)
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x803260", Offset = "0x803260", VA = "0x803260")]
	private void HandleMasterVolumeValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x803494", Offset = "0x803494", VA = "0x803494")]
	private void HandleMusicVolumeValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x8036C8", Offset = "0x8036C8", VA = "0x8036C8")]
	private void HandleSFXVolumeValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0x8038FC", Offset = "0x8038FC", VA = "0x8038FC")]
	private void HandleNarrationVolumeValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x803B84", Offset = "0x803B84", VA = "0x803B84")]
	private void HandleSubtitlesValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x803DEC", Offset = "0x803DEC", VA = "0x803DEC")]
	private void HandleStorybookModeValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0x80416C", Offset = "0x80416C", VA = "0x80416C")]
	private void HandleLanguageValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0x80435C", Offset = "0x80435C", VA = "0x80435C")]
	private void HandleBrightnessValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0x8045B0", Offset = "0x8045B0", VA = "0x8045B0")]
	private void HandleVibrationValueChanged(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0x8047C8", Offset = "0x8047C8", VA = "0x8047C8")]
	public LunaOptionsHandler()
	{
	}
}
[Token(Token = "0x20000D5")]
public class P_IslandTriggers : MonoBehaviour
{
	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_trees;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_lillies;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_daisies;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_fronds;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject m_grass;

	[Token(Token = "0x6000722")]
	[Address(RVA = "0x80F184", Offset = "0x80F184", VA = "0x80F184")]
	private void Start()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0x80F188", Offset = "0x80F188", VA = "0x80F188")]
	private void Update()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0x80F2B0", Offset = "0x80F2B0", VA = "0x80F2B0")]
	public P_IslandTriggers()
	{
	}
}
[Token(Token = "0x20000D6")]
public class ParticleEffects : MonoBehaviour
{
	[Token(Token = "0x4000793")]
	private const int CONTROL_STARS_POOL_SIZE = 11;

	[Token(Token = "0x4000794")]
	private const int HIGHLIGHT_STARS_POOL_SIZE = 6;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIControlStar m_controlStarPrefab;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UIControlStar m_highlightStarPrefab;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem[] m_allEmitters;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleSystem> m_activeEmitters;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<ParticleSystem> m_inactiveEmitters;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PrefabPool<UIControlStar> m_controlStars;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PrefabPool<UIControlStar> m_highlightStars;

	[Token(Token = "0x6000725")]
	[Address(RVA = "0x810628", Offset = "0x810628", VA = "0x810628")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x810764", Offset = "0x810764", VA = "0x810764")]
	private void Start()
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0x8107C4", Offset = "0x8107C4", VA = "0x8107C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0x810974", Offset = "0x810974", VA = "0x810974")]
	public void Play(string effectName, Transform trans)
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0x810B48", Offset = "0x810B48", VA = "0x810B48")]
	public void Play(string effectName, Vector3 pos, Vector3 rot)
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0x810AB0", Offset = "0x810AB0", VA = "0x810AB0")]
	private ParticleSystem GetBaseEmitter(string effectName)
	{
		return null;
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0x810CA4", Offset = "0x810CA4", VA = "0x810CA4")]
	public UIControlStar GetControlStar()
	{
		return null;
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0x810CFC", Offset = "0x810CFC", VA = "0x810CFC")]
	public void FreeControlStars()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0x810D54", Offset = "0x810D54", VA = "0x810D54")]
	public UIControlStar GetHighlightStar()
	{
		return null;
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0x810DAC", Offset = "0x810DAC", VA = "0x810DAC")]
	public void FreeHighlightStars()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x810E04", Offset = "0x810E04", VA = "0x810E04")]
	public ParticleEffects()
	{
	}
}
[Token(Token = "0x20000D7")]
public class ParticlesGravitator : MonoBehaviour
{
	[Token(Token = "0x400079C")]
	private const float GRAVITATOR_DELAY = 1f;

	[Token(Token = "0x400079D")]
	private const float REMAINING_PARTICLES_LIFETIME = 1.5f;

	[Token(Token = "0x400079E")]
	private const float PROXIMITY_CURVE_POWER = 4f;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F098", Offset = "0x74F098")]
	public float m_influenceSphere;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F0D0", Offset = "0x74F0D0")]
	public float m_orbitDistance;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F108", Offset = "0x74F108")]
	public float m_pullForce;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F140", Offset = "0x74F140")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74F140", Offset = "0x74F140")]
	public float m_orbitEntrySpeed;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F198", Offset = "0x74F198")]
	public float m_particleStartSpeed;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F1D0", Offset = "0x74F1D0")]
	public float m_maxEmissionRate;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_minLifetime;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float m_maxLifetime;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F208", Offset = "0x74F208")]
	public string kHealingPathEnergySound;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F240", Offset = "0x74F240")]
	public string kHealingPathEnergySoundParam;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F278", Offset = "0x74F278")]
	public float k2DCursorMaxViewportSizeMultiplier;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F2B0", Offset = "0x74F2B0")]
	public float kVRHandForcedEmissiveStrength;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private uint m_healingPathEnergySoundID;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_timeStarted;

	[Token(Token = "0x170000A4")]
	private bool IsActive
	{
		[Token(Token = "0x6000730")]
		[Address(RVA = "0x8114C0", Offset = "0x8114C0", VA = "0x8114C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A5")]
	public List<AffectParticlesByGravitator> AffectedParticles
	{
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x81150C", Offset = "0x81150C", VA = "0x81150C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A6")]
	public Vector3 RightVector
	{
		[Token(Token = "0x6000732")]
		[Address(RVA = "0x81155C", Offset = "0x81155C", VA = "0x81155C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000A7")]
	public Vector3 UpVector
	{
		[Token(Token = "0x6000733")]
		[Address(RVA = "0x811580", Offset = "0x811580", VA = "0x811580")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x8115A4", Offset = "0x8115A4", VA = "0x8115A4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x81168C", Offset = "0x81168C", VA = "0x81168C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x811690", Offset = "0x811690", VA = "0x811690")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x811A10", Offset = "0x811A10", VA = "0x811A10")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0x8115A8", Offset = "0x8115A8", VA = "0x8115A8")]
	private void Activate()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x811694", Offset = "0x811694", VA = "0x811694")]
	private void Shutdown()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x811A14", Offset = "0x811A14", VA = "0x811A14")]
	public void ProcessAffectedParticles()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x811EDC", Offset = "0x811EDC", VA = "0x811EDC")]
	public void ProcessAffectedCursors()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x811E50", Offset = "0x811E50", VA = "0x811E50")]
	private float ProximityToOrbit(float distanceToCenter)
	{
		return default(float);
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0x812354", Offset = "0x812354", VA = "0x812354")]
	public void Update()
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0x8123EC", Offset = "0x8123EC", VA = "0x8123EC")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0x812538", Offset = "0x812538", VA = "0x812538")]
	public ParticlesGravitator()
	{
	}
}
[Token(Token = "0x20000D8")]
public class PerformanceManager : MonoBehaviour
{
	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera m_mainCamera;

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x815564", Offset = "0x815564", VA = "0x815564")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0x815614", Offset = "0x815614", VA = "0x815614")]
	private void TurnOffImageEffectsOnMainCamera()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0x815778", Offset = "0x815778", VA = "0x815778")]
	public PerformanceManager()
	{
	}
}
[Token(Token = "0x20000D9")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x74899C", Offset = "0x74899C")]
public class CursorParticleTrigger : MonoBehaviour
{
	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kPushForce;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly List<ParticleSystem.Particle> m_enter;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem m_particleSystem;

	[Token(Token = "0x6000743")]
	[Address(RVA = "0x7BED60", Offset = "0x7BED60", VA = "0x7BED60")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0x7BEDB8", Offset = "0x7BEDB8", VA = "0x7BEDB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0x7BEE84", Offset = "0x7BEE84", VA = "0x7BEE84")]
	private void OnParticleTrigger()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0x7BF1B4", Offset = "0x7BF1B4", VA = "0x7BF1B4")]
	public CursorParticleTrigger()
	{
	}
}
[Token(Token = "0x20000DA")]
public class IKTargetmover : CursorInputMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200046E")]
	public class OnMoved : UnityEvent<Vector3>
	{
		[Token(Token = "0x6002305")]
		[Address(RVA = "0x7D4974", Offset = "0x7D4974", VA = "0x7D4974")]
		public OnMoved()
		{
		}
	}

	[Token(Token = "0x40007B1")]
	private const float SMALL_NUMBER = 0.01f;

	[Token(Token = "0x40007B2")]
	private const float MOVER_SPEED = 50f;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform target;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private IK m_IKSystem;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RotationLimit[] m_rotationLimits;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 m_originalPosition;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject m_soundObject;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public OnMoved m_OnMoved;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_framesToDisableIK;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private MinSpecCursorInputMonoBehaviour m_minSpecCursorInput;

	[Token(Token = "0x6000747")]
	[Address(RVA = "0x7D3F64", Offset = "0x7D3F64", VA = "0x7D3F64")]
	private void EnableIKSystems(bool enable)
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0x7D3FFC", Offset = "0x7D3FFC", VA = "0x7D3FFC", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0x7D4134", Offset = "0x7D4134", VA = "0x7D4134", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0x7D42CC", Offset = "0x7D42CC", VA = "0x7D42CC", Slot = "6")]
	public override void CursorOnReset()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x7D4318", Offset = "0x7D4318", VA = "0x7D4318")]
	public void ForceUpdateIK()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x7D4344", Offset = "0x7D4344", VA = "0x7D4344", Slot = "34")]
	public override void CursorInputLateUpdate()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x7D43F4", Offset = "0x7D43F4", VA = "0x7D43F4", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x7D44AC", Offset = "0x7D44AC", VA = "0x7D44AC", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x7D4678", Offset = "0x7D4678", VA = "0x7D4678", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x7D490C", Offset = "0x7D490C", VA = "0x7D490C")]
	public IKTargetmover()
	{
	}
}
[Token(Token = "0x20000DB")]
public class ImpactPlayer : CursorInputMonoBehaviour
{
	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem m_particleEffect;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float kHitVelocity;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string m_animationTriggerName;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Animator m_animator;

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x7D4A94", Offset = "0x7D4A94", VA = "0x7D4A94", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x7D4B20", Offset = "0x7D4B20", VA = "0x7D4B20", Slot = "4")]
	protected override bool ShouldIgnoreMutex()
	{
		return default(bool);
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x7D4B28", Offset = "0x7D4B28", VA = "0x7D4B28", Slot = "27")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x7D4C88", Offset = "0x7D4C88", VA = "0x7D4C88", Slot = "30")]
	protected override void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x7D4D60", Offset = "0x7D4D60", VA = "0x7D4D60", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x7D4B78", Offset = "0x7D4B78", VA = "0x7D4B78")]
	private void OnImpact(Vector3 velocity)
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x7D4DC0", Offset = "0x7D4DC0", VA = "0x7D4DC0")]
	public ImpactPlayer()
	{
	}
}
[Token(Token = "0x20000DC")]
public class InteractionBubble : MonoBehaviour
{
	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LayerMask m_iconLayer;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private LayerMask m_oldLayer;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly HashSet<Collider> m_lastColliders;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly List<Collider> m_colliderToRemove;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_radius;

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x7D4E28", Offset = "0x7D4E28", VA = "0x7D4E28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x7D4F10", Offset = "0x7D4F10", VA = "0x7D4F10")]
	private void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x7D4FFC", Offset = "0x7D4FFC", VA = "0x7D4FFC")]
	private void OnTriggerStay(Collider otherCollider)
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x7D50E8", Offset = "0x7D50E8", VA = "0x7D50E8")]
	private void OnTriggerExit(Collider otherCollider)
	{
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x7D51D4", Offset = "0x7D51D4", VA = "0x7D51D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x7D547C", Offset = "0x7D547C", VA = "0x7D547C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0x7D5690", Offset = "0x7D5690", VA = "0x7D5690")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0x7D57E8", Offset = "0x7D57E8", VA = "0x7D57E8")]
	public InteractionBubble()
	{
	}
}
[Token(Token = "0x20000DD")]
public class InteractionMutex : MonoBehaviour
{
	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InteractionMutex[] m_activeSelection;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnAquire;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnRelease;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_onReleaseInvoke;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private FreeCursorController m_cursorController;

	[Token(Token = "0x6000760")]
	[Address(RVA = "0x7D5880", Offset = "0x7D5880", VA = "0x7D5880")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0x7D5910", Offset = "0x7D5910", VA = "0x7D5910")]
	public void SetOnReleaseInvoke(bool set)
	{
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0x7D591C", Offset = "0x7D591C", VA = "0x7D591C")]
	public static bool IsInteracting(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0x7D59CC", Offset = "0x7D59CC", VA = "0x7D59CC")]
	public bool IsActive(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0x7D5A88", Offset = "0x7D5A88", VA = "0x7D5A88")]
	public bool AnyActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0x7D5B24", Offset = "0x7D5B24", VA = "0x7D5B24")]
	public bool Request(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0x7D5CB0", Offset = "0x7D5CB0", VA = "0x7D5CB0")]
	public void Release(int cursorIndex)
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0x7D5DD8", Offset = "0x7D5DD8", VA = "0x7D5DD8")]
	public void Update()
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x7D5F4C", Offset = "0x7D5F4C", VA = "0x7D5F4C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x7D5FDC", Offset = "0x7D5FDC", VA = "0x7D5FDC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0x7D606C", Offset = "0x7D606C", VA = "0x7D606C")]
	public InteractionMutex()
	{
	}
}
[Token(Token = "0x20000DE")]
public class PersistentSoundPlayer : MonoBehaviour
{
	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_startSoundEvent;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_stopSoundEvent;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_soundObject;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_wasSoundStarted;

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x815780", Offset = "0x815780", VA = "0x815780")]
	private void Awake()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0x815808", Offset = "0x815808", VA = "0x815808")]
	public void StartSoundEvent()
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0x8158E0", Offset = "0x8158E0", VA = "0x8158E0")]
	public void StopSoundEvent()
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0x8159B0", Offset = "0x8159B0", VA = "0x8159B0")]
	private void Start()
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0x8159B4", Offset = "0x8159B4", VA = "0x8159B4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x8159B8", Offset = "0x8159B8", VA = "0x8159B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0x8159BC", Offset = "0x8159BC", VA = "0x8159BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0x8159C0", Offset = "0x8159C0", VA = "0x8159C0")]
	public PersistentSoundPlayer()
	{
	}
}
[Token(Token = "0x20000DF")]
public class PhysicsAttachmentFall : MonoBehaviour
{
	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CapsuleCollider m_collider;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_fallTimer;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int m_fallTimerResetValue;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_hasFallen;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform m_parent;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform m_rootParent;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 m_localStartPosition;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 m_localStartRotation;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 m_parentLastRotation;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 m_scaleRef;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float m_parentRotationMagnitude;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float m_fallThreshold;

	[Token(Token = "0x6000773")]
	[Address(RVA = "0x8159C8", Offset = "0x8159C8", VA = "0x8159C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0x815AC8", Offset = "0x815AC8", VA = "0x815AC8")]
	private void Fall()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0x815B44", Offset = "0x815B44", VA = "0x815B44")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0x815C08", Offset = "0x815C08", VA = "0x815C08")]
	private void EvaluateParentRotation()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0x815D0C", Offset = "0x815D0C", VA = "0x815D0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0x815D84", Offset = "0x815D84", VA = "0x815D84")]
	public PhysicsAttachmentFall()
	{
	}
}
[Token(Token = "0x20000E0")]
public class PhysicsFixedJoint : PhysicsGenericJoint<FixedJoint>
{
	[Token(Token = "0x6000779")]
	[Address(RVA = "0x815DF8", Offset = "0x815DF8", VA = "0x815DF8", Slot = "36")]
	protected override void JointInit(FixedJoint joint)
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0x815DFC", Offset = "0x815DFC", VA = "0x815DFC")]
	public PhysicsFixedJoint()
	{
	}
}
[Token(Token = "0x20000E1")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748A00", Offset = "0x748A00")]
public class PhysicsForcePush : CursorInputMonoBehaviour
{
	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_forceMultiplier;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x600077B")]
	[Address(RVA = "0x815E4C", Offset = "0x815E4C", VA = "0x815E4C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0x815EA4", Offset = "0x815EA4", VA = "0x815EA4", Slot = "24")]
	protected override bool CursorOnCollisionEnter(int cursorIndex, Collision collision)
	{
		return default(bool);
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0x815F68", Offset = "0x815F68", VA = "0x815F68")]
	public PhysicsForcePush()
	{
	}
}
[Token(Token = "0x20000E2")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748A64", Offset = "0x748A64")]
public abstract class PhysicsGenericJoint<T> : CursorInputMonoBehaviour where T : Joint
{
	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool m_shapeMode;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float m_breakForce;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T[] m_joints;

	[Token(Token = "0x600077E")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600077F")]
	protected abstract void JointInit(T joint);

	[Token(Token = "0x6000780")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000781")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x6000782")]
	protected PhysicsGenericJoint()
	{
	}
}
[Token(Token = "0x20000E3")]
public class PhysicsLockPosition : MonoBehaviour
{
	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_localPos;

	[Token(Token = "0x6000783")]
	[Address(RVA = "0x815FD8", Offset = "0x815FD8", VA = "0x815FD8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0x816014", Offset = "0x816014", VA = "0x816014")]
	private void Update()
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x81604C", Offset = "0x81604C", VA = "0x81604C")]
	public PhysicsLockPosition()
	{
	}
}
[Token(Token = "0x20000E4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748AC8", Offset = "0x748AC8")]
public class PhysicsOnSleepChanged : MonoBehaviour
{
	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_onWake;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_stopSpeedThreshold;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_eventTime;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent m_onSleep;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_wasSleeping;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_eventTimer;

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x816054", Offset = "0x816054", VA = "0x816054")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x8160B4", Offset = "0x8160B4", VA = "0x8160B4")]
	private bool Stopped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x816130", Offset = "0x816130", VA = "0x816130")]
	private void Start()
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x816158", Offset = "0x816158", VA = "0x816158")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x816294", Offset = "0x816294", VA = "0x816294")]
	public PhysicsOnSleepChanged()
	{
	}
}
[Token(Token = "0x20000E5")]
public class PhysicsPendulum : CursorInputMonoBehaviour
{
	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F2E8", Offset = "0x74F2E8")]
	public Transform m_baseTransform;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F320", Offset = "0x74F320")]
	public float kAngularDrag;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F358", Offset = "0x74F358")]
	public float kGravity;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F390", Offset = "0x74F390")]
	public float kForceMultiplier;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_angularVelocity;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_angle;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_length;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_angularAcceleration;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 m_originalAngles;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F3C8", Offset = "0x74F3C8")]
	public float kStopTime;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F400", Offset = "0x74F400")]
	public float kStopThreshold;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_stopped;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_stoppedTime;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEvent OnStartSpin;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEvent OnStopSpin;

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x8162AC", Offset = "0x8162AC", VA = "0x8162AC")]
	public void SetGravity(float gravity)
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x8162B4", Offset = "0x8162B4", VA = "0x8162B4")]
	public void SetPushForce(float force)
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0x8162BC", Offset = "0x8162BC", VA = "0x8162BC", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0x816414", Offset = "0x816414", VA = "0x816414", Slot = "19")]
	protected override bool CursorFixedUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x816544", Offset = "0x816544", VA = "0x816544", Slot = "33")]
	public override void CursorInputFixedUpdate()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0x8166F0", Offset = "0x8166F0", VA = "0x8166F0", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0x816754", Offset = "0x816754", VA = "0x816754")]
	private void ApplyForce()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x816854", Offset = "0x816854", VA = "0x816854", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0x81685C", Offset = "0x81685C", VA = "0x81685C", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x816860", Offset = "0x816860", VA = "0x816860")]
	public PhysicsPendulum()
	{
	}
}
[Token(Token = "0x20000E6")]
public class PhysicsPunch : MonoBehaviour
{
	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_maxHitpoints;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_speedThreshold;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticAsset m_haptics;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_soundEvent;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent m_OnBreak;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_shakeSpeed;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_shakeTime;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_hitPoints;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_shakeRadius;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_hitTimer;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_shakeTimer;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_totalShakeTimer;

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x8168F0", Offset = "0x8168F0", VA = "0x8168F0")]
	private void Shake()
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0x816900", Offset = "0x816900", VA = "0x816900")]
	private void Update()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0x816A78", Offset = "0x816A78", VA = "0x816A78")]
	private void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0x816DBC", Offset = "0x816DBC", VA = "0x816DBC")]
	public PhysicsPunch()
	{
	}
}
[Token(Token = "0x20000E7")]
public class PhysicsRotate : CursorInputMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200046F")]
	public class OnRotate : UnityEvent<float>
	{
		[Token(Token = "0x6002306")]
		[Address(RVA = "0x8189F4", Offset = "0x8189F4", VA = "0x8189F4")]
		public OnRotate()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000470")]
	public class OnSnap : UnityEvent<int>
	{
		[Token(Token = "0x6002307")]
		[Address(RVA = "0x818A44", Offset = "0x818A44", VA = "0x818A44")]
		public OnSnap()
		{
		}
	}

	[Token(Token = "0x2000471")]
	private struct SnapIndexMultiplierBundle
	{
		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_index;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_multiplier;

		[Token(Token = "0x6002308")]
		[Address(RVA = "0x63C148", Offset = "0x63C148", VA = "0x63C148")]
		public SnapIndexMultiplierBundle(int index, float mult)
		{
		}
	}

	[Token(Token = "0x4000802")]
	private const float CURSOR_ROTATION_SPEED = 55f;

	[Token(Token = "0x4000803")]
	private const string TURN_RING_TAG = "TurnRing";

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform m_baseTransform;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float kMaxRotationSpeed;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float kMinRotationSpeed;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int kRotationMultiplier;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float k2DMinRotationToSnap;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float kVRMinRotationToSnap;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74F438", Offset = "0x74F438")]
	private Action <OnRotateUpdate>k__BackingField;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x74F448", Offset = "0x74F448")]
	public Vector3 m_plane;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 m_rotationAxis;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float kInnerRadius;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool m_disablePhysicsObjects;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public OnRotate m_onRotate;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public OnRotate m_onFinishRotate;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public OnSnap m_onFinishSnap;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float m_RotationDelta;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Quaternion[] m_startAngle;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3[] m_startPos;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Quaternion m_lastRotation;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 m_lastLocalEulerAngles;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector3 m_lastSnapLocalEulerAngles;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private readonly List<Rigidbody> savedRigidBodies;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private readonly List<Cloth> savedCloths;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float m_tickThreshold;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float m_tickAccumulator;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool m_snapOnRelease;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public int m_snapIncrements;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int m_snapTargetIndex;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float m_snapDegreeUnits;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Vector3 m_snapTargetLocalEulerAngles;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private AnimationCurve m_snapTransitionCurve;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public AnimationCurveScriptableObject m_nudgeTransitionCurve;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool m_isSnapping;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
	private bool m_isNudging;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12A")]
	private bool m_firstTimeSnapping;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private StateTimer m_snapTimer;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float m_virtualCursorAngle;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private Quaternion m_originalRotation;

	[Token(Token = "0x170000A8")]
	public float MinRotationToSnap
	{
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x816DF0", Offset = "0x816DF0", VA = "0x816DF0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000A9")]
	public Action OnRotateUpdate
	{
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x816E6C", Offset = "0x816E6C", VA = "0x816E6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757144", Offset = "0x757144")]
		get
		{
			return null;
		}
		[Token(Token = "0x600079B")]
		[Address(RVA = "0x816E74", Offset = "0x816E74", VA = "0x816E74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757154", Offset = "0x757154")]
		set
		{
		}
	}

	[Token(Token = "0x170000AA")]
	private bool CanInteractWithCursor
	{
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x816E7C", Offset = "0x816E7C", VA = "0x816E7C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0x816F28", Offset = "0x816F28", VA = "0x816F28", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0x816FD0", Offset = "0x816FD0", VA = "0x816FD0", Slot = "5")]
	protected override bool FilterCursorCollision(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0x8170C8", Offset = "0x8170C8", VA = "0x8170C8", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0x81715C", Offset = "0x81715C", VA = "0x81715C", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0x817590", Offset = "0x817590", VA = "0x817590", Slot = "13")]
	protected override void OnCursorReleased(int cursorIdx)
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x817790", Offset = "0x817790", VA = "0x817790")]
	private SnapIndexMultiplierBundle GetSnapIndexMultiplierBundle()
	{
		return default(SnapIndexMultiplierBundle);
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0x8178A8", Offset = "0x8178A8", VA = "0x8178A8")]
	private bool AreBorderIndexes(int a, int b)
	{
		return default(bool);
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0x8178D8", Offset = "0x8178D8", VA = "0x8178D8")]
	private void SnapStart()
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x817AF4", Offset = "0x817AF4", VA = "0x817AF4")]
	private void SnapEnd()
	{
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x817B60", Offset = "0x817B60", VA = "0x817B60")]
	private void ResetRigidBodies()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x817CA4", Offset = "0x817CA4", VA = "0x817CA4", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x817CCC", Offset = "0x817CCC", VA = "0x817CCC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x817D48", Offset = "0x817D48", VA = "0x817D48", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x818420", Offset = "0x818420", VA = "0x818420")]
	private void ClearClothMotion()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x8184C8", Offset = "0x8184C8", VA = "0x8184C8", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x81722C", Offset = "0x81722C", VA = "0x81722C")]
	public void BeginRotation(int cursorIdx, Collider otherCollider, Vector3 startPos)
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x817DAC", Offset = "0x817DAC", VA = "0x817DAC")]
	public void DuringRotation(int cursorIdx, Vector3 cursorPos)
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x81764C", Offset = "0x81764C", VA = "0x81764C")]
	public void EndRotation(int cursorIdx)
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x818880", Offset = "0x818880", VA = "0x818880")]
	public void ResetRotation()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x81889C", Offset = "0x81889C", VA = "0x81889C")]
	public PhysicsRotate()
	{
	}
}
[Token(Token = "0x20000E8")]
public class PhysicsScaler : CursorInputMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000472")]
	public class OnScaled : UnityEvent<float>
	{
		[Token(Token = "0x6002309")]
		[Address(RVA = "0x819D1C", Offset = "0x819D1C", VA = "0x819D1C")]
		public OnScaled()
		{
		}
	}

	[Token(Token = "0x4000829")]
	private const float SMALL_NUMBER = 0.01f;

	[Token(Token = "0x400082A")]
	private const float SCALER_SPEED = 7.8f;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform transformObject;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject m_soundObject;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Cloth m_cloth;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float kMinScale;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float kMaxScale;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] m_grabPos;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool m_disableCursorCollider;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 m_normalizedSize;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 m_originalScale;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_currentScaleValue;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_oldNormalizedScale;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float m_oldSculptAmount;

	[Token(Token = "0x4000837")]
	private const float kMaxScaleSpeed = 5f;

	[Token(Token = "0x4000838")]
	private const float kMaxSculptSpeed = 100f;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public OnScaled m_OnScaled;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool m_disabledPhysics;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Rigidbody[] m_rigidBodies;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Growable m_growable;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private MinSpecCursorInputMonoBehaviour m_minSpecCursorInput;

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x818BD0", Offset = "0x818BD0", VA = "0x818BD0", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x818F88", Offset = "0x818F88", VA = "0x818F88", Slot = "6")]
	public override void CursorOnReset()
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x818FB0", Offset = "0x818FB0", VA = "0x818FB0", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0x819248", Offset = "0x819248", VA = "0x819248", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0x819518", Offset = "0x819518", VA = "0x819518", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0x8197C0", Offset = "0x8197C0", VA = "0x8197C0", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x8199F4", Offset = "0x8199F4", VA = "0x8199F4", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x819134", Offset = "0x819134", VA = "0x819134")]
	private void StopResizeSound()
	{
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x819C78", Offset = "0x819C78", VA = "0x819C78", Slot = "16")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x819CA0", Offset = "0x819CA0", VA = "0x819CA0")]
	public PhysicsScaler()
	{
	}
}
[Token(Token = "0x20000E9")]
public class PhysicsScaleTransformEvent : MonoBehaviour
{
	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_minScale;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 m_maxScale;

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x818A94", Offset = "0x818A94", VA = "0x818A94")]
	public void Scale(float lerpAmount)
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x818B70", Offset = "0x818B70", VA = "0x818B70")]
	public PhysicsScaleTransformEvent()
	{
	}
}
[Token(Token = "0x20000EA")]
public class PhysicsSinJiggle : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F480", Offset = "0x74F480")]
	public float kBumpForce;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_bumpForce2dOverride;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F4B8", Offset = "0x74F4B8")]
	public float kFadeRate;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F4F0", Offset = "0x74F4F0")]
	public float kBounceFrequency;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float kMass;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public PhysicsSinJiggle m_baseSineJiggle;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F528", Offset = "0x74F528")]
	public float kMinAngle;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F560", Offset = "0x74F560")]
	public float kMaxAngle;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F598", Offset = "0x74F598")]
	public Vector3 m_axisScale;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_runTimeBumpForce;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 m_pushForce;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 m_acceleration;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 m_velocity;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 m_offset;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 m_originalOffset;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Quaternion m_lastScaledOffset;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 kZeroVector;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F5D0", Offset = "0x74F5D0")]
	public PlayObjectEvent.PlayObject m_playObject;

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x819D6C", Offset = "0x819D6C", VA = "0x819D6C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0x819E38", Offset = "0x819E38", VA = "0x819E38", Slot = "4")]
	protected override bool ShouldIgnoreMutex()
	{
		return default(bool);
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0x819E40", Offset = "0x819E40", VA = "0x819E40", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIdx, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0x81A070", Offset = "0x81A070", VA = "0x81A070", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0x81A5D8", Offset = "0x81A5D8", VA = "0x81A5D8")]
	public void AddForce(Vector3 force)
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0x81A68C", Offset = "0x81A68C", VA = "0x81A68C")]
	public PhysicsSinJiggle()
	{
	}
}
[Token(Token = "0x20000EB")]
public class PhysicsSpin : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PhysicsSpinBase m_baseTransform;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool m_disableOnEngaged;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float kForceMultiplier;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float kMass;

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0x81A7BC", Offset = "0x81A7BC", VA = "0x81A7BC", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0x81A7C4", Offset = "0x81A7C4", VA = "0x81A7C4", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0x81AA50", Offset = "0x81AA50", VA = "0x81AA50")]
	public PhysicsSpin()
	{
	}
}
[Token(Token = "0x20000EC")]
public class PhysicsSpinBase : MonoBehaviour
{
	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kAngularDrag;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float kMaxVelocity;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float kStopTime;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float kStopThreshold;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Space m_space;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_angularAcceleration;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_angularVelocity;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_stoppedTime;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool m_stopped;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnStartSpin;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent OnStopSpin;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_locked;

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0x81AA40", Offset = "0x81AA40", VA = "0x81AA40")]
	public void ApplyForce(float force)
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0x81AAC4", Offset = "0x81AAC4", VA = "0x81AAC4")]
	public void LockSpinning()
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0x81AB10", Offset = "0x81AB10", VA = "0x81AB10")]
	public void UnlockSpinning()
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0x81AB18", Offset = "0x81AB18", VA = "0x81AB18")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x81AD00", Offset = "0x81AD00", VA = "0x81AD00")]
	public PhysicsSpinBase()
	{
	}
}
[Token(Token = "0x20000ED")]
public class PhysicsSpring : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F608", Offset = "0x74F608")]
	public float kNudgeRadius;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F640", Offset = "0x74F640")]
	public float kSpringConstant;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F678", Offset = "0x74F678")]
	public float kSpringDamping;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float kRadiusPercentage;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F6B0", Offset = "0x74F6B0")]
	public float kBumpForce;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F6E8", Offset = "0x74F6E8")]
	public float kMass;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F720", Offset = "0x74F720")]
	public Vector3 kGrabScale;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F758", Offset = "0x74F758")]
	public Vector3 kSpringScale;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F790", Offset = "0x74F790")]
	public Vector3 kSpringMaxLimit;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F7C8", Offset = "0x74F7C8")]
	public Vector3 kSpringMinLimit;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F800", Offset = "0x74F800")]
	public bool m_WorldSpace;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	public bool m_disableGrabBehaviour;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F838", Offset = "0x74F838")]
	public Bool3 m_Mask;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F870", Offset = "0x74F870")]
	public float kSleepTime;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F8A8", Offset = "0x74F8A8")]
	public float kRestTolerance;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEvent m_OnStartMove;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public UnityEvent m_OnStopMove;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEvent m_OnReleaseGrab;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74F8E0", Offset = "0x74F8E0")]
	public GameObject m_soundObject;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public string m_grabStartSoundEvent;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public string m_grabStopSoundEvent;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public string m_displacementSoundParameter;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 m_springTargetLength;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 m_springVelocity;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 m_springAcceleration;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private Vector3 m_springLength;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Vector3 m_originalLocalPosition;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private Vector3 m_pushForce;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private PlaySoundOnCollision m_playSoundOnCollision;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float m_sleepTimer;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private bool m_atRest;

	[Token(Token = "0x170000AB")]
	public bool AtRest
	{
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x81AD1C", Offset = "0x81AD1C", VA = "0x81AD1C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x81AD24", Offset = "0x81AD24", VA = "0x81AD24", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x81AE38", Offset = "0x81AE38", VA = "0x81AE38", Slot = "31")]
	protected override void OnTriggerStay(Collider otherCollider)
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x81B080", Offset = "0x81B080", VA = "0x81B080", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0x81B1BC", Offset = "0x81B1BC", VA = "0x81B1BC", Slot = "22")]
	protected override bool CursorOnTriggerStay(int cursorIdx, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x81B2DC", Offset = "0x81B2DC", VA = "0x81B2DC", Slot = "33")]
	public override void CursorInputFixedUpdate()
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x81B88C", Offset = "0x81B88C", VA = "0x81B88C", Slot = "13")]
	protected override void OnCursorReleased(int cursorIdx)
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x81B9DC", Offset = "0x81B9DC", VA = "0x81B9DC", Slot = "19")]
	protected override bool CursorFixedUpdate(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0x81BDF4", Offset = "0x81BDF4", VA = "0x81BDF4", Slot = "10")]
	protected override void CursorOnEnable()
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x81BE28", Offset = "0x81BE28", VA = "0x81BE28", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x81AFC4", Offset = "0x81AFC4", VA = "0x81AFC4")]
	public void AddForce(Vector3 force)
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x81BE78", Offset = "0x81BE78", VA = "0x81BE78")]
	public PhysicsSpring()
	{
	}
}
[Token(Token = "0x20000EE")]
public class PhysicsSpringJoint : PhysicsGenericJoint<SpringJoint>
{
	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float m_spring;

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x922EA0", Offset = "0x922EA0", VA = "0x922EA0", Slot = "36")]
	protected override void JointInit(SpringJoint joint)
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x922EC4", Offset = "0x922EC4", VA = "0x922EC4")]
	public PhysicsSpringJoint()
	{
	}
}
[Token(Token = "0x20000EF")]
public class PhysicsTelescoping : CursorInputMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000473")]
	public class OnLengthChange : UnityEvent<float>
	{
		[Token(Token = "0x600230A")]
		[Address(RVA = "0x923BCC", Offset = "0x923BCC", VA = "0x923BCC")]
		public OnLengthChange()
		{
		}
	}

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] m_links;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject m_baseObject;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject m_soundObject;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string m_noteParameter;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float kForceMult;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float kMinLengthPercentage;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float kMaxLengthPercentage;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float kDamping;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent OnCursorInteractStart;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent OnCursorInteractStop;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int kNumScales;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public MeshRenderer m_highlightMesh;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public MeshRenderer m_grabMesh;

	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float[] m_currentLengths;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int m_linkIndexToScale;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float m_totalLength;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float m_grabLength;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float[] m_bumpForce;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float[] m_bumpVel;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float m_globalBumpForce;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float m_totalMax;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3[] m_cursorOffset;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public OnLengthChange[] m_onLengthChange;

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x922F1C", Offset = "0x922F1C", VA = "0x922F1C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x922FE8", Offset = "0x922FE8", VA = "0x922FE8", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x923164", Offset = "0x923164", VA = "0x923164", Slot = "14")]
	protected override void OnCursorOver(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x923210", Offset = "0x923210", VA = "0x923210", Slot = "15")]
	protected override void OnCursorLeave(int cursorIndex)
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x92322C", Offset = "0x92322C", VA = "0x92322C", Slot = "31")]
	protected override void OnTriggerStay(Collider otherCollider)
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x92332C", Offset = "0x92332C", VA = "0x92332C", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x9233CC", Offset = "0x9233CC", VA = "0x9233CC")]
	private static bool ActiveCursorStateHighlight(MeshRenderer meshRenderer, Func<int, bool> func)
	{
		return default(bool);
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x9234B8", Offset = "0x9234B8", VA = "0x9234B8", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x9235C8", Offset = "0x9235C8", VA = "0x9235C8", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x923B34", Offset = "0x923B34", VA = "0x923B34")]
	public PhysicsTelescoping()
	{
	}
}
[Token(Token = "0x20000F0")]
public class PlaySoundOnCollision : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000899")]
	private const string kTimeBetweenImpactsParameter = "Time_Between_Impacts";

	[Token(Token = "0x400089A")]
	private const string m_Arp_Object = "Create_Arp_Object";

	[Token(Token = "0x400089B")]
	private const string m_noTouch = "NoTouch";

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float kMinSoundVelocity;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float kMaxSoundVelocity;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string m_hitSoundEvent;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string m_dragStartSoundEvent;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string m_dragStopSoundEvent;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string m_velocityParameter;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string m_controllerVelocityParameter;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string m_ObjectType;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject m_soundObject;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_isColliding;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Collider m_collider;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float m_lastCollisionTime;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float m_timerAtLastCollision;

	[Token(Token = "0x40008A9")]
	private const float kMouseVelocityMult = 100f;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private uint m_playingHitSoundID;

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0x9260B4", Offset = "0x9260B4", VA = "0x9260B4")]
	public static float GetTimeBetweenImpactsValue()
	{
		return default(float);
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0x926114", Offset = "0x926114", VA = "0x926114")]
	public static void SetTimeBetweenImpactsParameter()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0x926194", Offset = "0x926194", VA = "0x926194")]
	public static void ResetTimeBetweenImpacts()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0x926208", Offset = "0x926208", VA = "0x926208", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0x9262C8", Offset = "0x9262C8", VA = "0x9262C8")]
	private void SetArpState()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x926350", Offset = "0x926350", VA = "0x926350")]
	private void UpdateVelocitySoundParams(Vector3 velocity)
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x926538", Offset = "0x926538", VA = "0x926538", Slot = "10")]
	protected override void CursorOnEnable()
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x926620", Offset = "0x926620", VA = "0x926620", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x926708", Offset = "0x926708", VA = "0x926708")]
	private bool HasDragSound()
	{
		return default(bool);
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x92653C", Offset = "0x92653C", VA = "0x92653C")]
	private void PlayDragStartSoundEvent()
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x926624", Offset = "0x926624", VA = "0x926624")]
	private void PlayDragStopSoundEvent()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x92672C", Offset = "0x92672C", VA = "0x92672C", Slot = "22")]
	protected override bool CursorOnTriggerStay(int cursorIdx, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x92678C", Offset = "0x92678C", VA = "0x92678C", Slot = "25")]
	protected override bool CursorOnCollisionStay(int cursorIndex, Collision collision)
	{
		return default(bool);
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x926800", Offset = "0x926800", VA = "0x926800", Slot = "14")]
	protected override void OnCursorOver(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x92680C", Offset = "0x92680C", VA = "0x92680C")]
	private void PlayCollisionSound()
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x926908", Offset = "0x926908", VA = "0x926908", Slot = "4")]
	protected override bool ShouldIgnoreMutex()
	{
		return default(bool);
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x926910", Offset = "0x926910", VA = "0x926910", Slot = "15")]
	protected override void OnCursorLeave(int cursorIndex)
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0x926914", Offset = "0x926914", VA = "0x926914")]
	private void OnCursorLeave()
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0x9269A4", Offset = "0x9269A4", VA = "0x9269A4", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0x9269F8", Offset = "0x9269F8", VA = "0x9269F8")]
	public PlaySoundOnCollision()
	{
	}
}
[Token(Token = "0x20000F1")]
public class SetAngularVelocitySoundParameter : MonoBehaviour
{
	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kMinAngularVelocity;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float kMaxAngularVelocity;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float kSoundParameterMax;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_angularvelocityParameter;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_soundObject;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool kOverrideSamplingRate;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float kSamplingRateHz;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_updateTime;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_updateTimer;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Quaternion m_lastRotation;

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0x8B2214", Offset = "0x8B2214", VA = "0x8B2214")]
	private void Start()
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0x8B22D4", Offset = "0x8B22D4", VA = "0x8B22D4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x8B249C", Offset = "0x8B249C", VA = "0x8B249C")]
	public SetAngularVelocitySoundParameter()
	{
	}
}
[Token(Token = "0x20000F2")]
public class SetImpactVelocitySoundParameter : CursorInputMonoBehaviour
{
	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float kHitMinSpeed;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float kHitMaxSpeed;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float kImpactCooldownTime;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float kSoundParameterMax;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string kSoundParameter;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string kSoundParameterHand;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject m_soundObject;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_impactTimer;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_minSpeedSq;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_maxSpeedSq;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_max;

	[Token(Token = "0x40008C0")]
	private const float kCursorMultiplier = 100f;

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x8B2C58", Offset = "0x8B2C58", VA = "0x8B2C58")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x8B2C6C", Offset = "0x8B2C6C", VA = "0x8B2C6C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x8B2D10", Offset = "0x8B2D10", VA = "0x8B2D10", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x8B2F24", Offset = "0x8B2F24", VA = "0x8B2F24", Slot = "24")]
	protected override bool CursorOnCollisionEnter(int cursorIndex, Collision collision)
	{
		return default(bool);
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x8B2D78", Offset = "0x8B2D78", VA = "0x8B2D78")]
	private void OnImpact(string soundParam, Vector3 velocity)
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x8B2FA0", Offset = "0x8B2FA0", VA = "0x8B2FA0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x8B2FE0", Offset = "0x8B2FE0", VA = "0x8B2FE0")]
	public SetImpactVelocitySoundParameter()
	{
	}
}
[Token(Token = "0x20000F3")]
public class SetVelocitySoundParameter : MonoBehaviour
{
	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kMinVelocity;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float kMaxVelocity;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_velocityParameter;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_lastPosition;

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x8B3228", Offset = "0x8B3228", VA = "0x8B3228")]
	private void Start()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x8B3264", Offset = "0x8B3264", VA = "0x8B3264")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x8B341C", Offset = "0x8B341C", VA = "0x8B341C")]
	public SetVelocitySoundParameter()
	{
	}
}
[Token(Token = "0x20000F4")]
public class SimpleRotate : CursorInputMonoBehaviour
{
	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform m_targetTransform;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 m_rotAxis;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent m_onRotateComplete;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] m_grabbedPos;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Quaternion[] m_grabbedRot;

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x8B4648", Offset = "0x8B4648", VA = "0x8B4648", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x8B46F8", Offset = "0x8B46F8", VA = "0x8B46F8", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x8B470C", Offset = "0x8B470C", VA = "0x8B470C", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x8B4938", Offset = "0x8B4938", VA = "0x8B4938")]
	public SimpleRotate()
	{
	}
}
[Token(Token = "0x20000F5")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748B2C", Offset = "0x748B2C")]
public class SimpleRotationLimit : MonoBehaviour
{
	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_rotationAngleLimits;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion m_startRot;

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x8B4A0C", Offset = "0x8B4A0C", VA = "0x8B4A0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x8B4A64", Offset = "0x8B4A64", VA = "0x8B4A64")]
	private void Start()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x8B4A9C", Offset = "0x8B4A9C", VA = "0x8B4A9C")]
	private void Update()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x8B4C70", Offset = "0x8B4C70", VA = "0x8B4C70")]
	public SimpleRotationLimit()
	{
	}
}
[Token(Token = "0x20000F6")]
public class VelocityEventTrigger : CursorInputMonoBehaviour
{
	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PlayObjectEvent.PlayObject m_playObject;

	[Token(Token = "0x600080C")]
	[Address(RVA = "0x8323C0", Offset = "0x8323C0", VA = "0x8323C0", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x8323C8", Offset = "0x8323C8", VA = "0x8323C8", Slot = "4")]
	protected override bool ShouldIgnoreMutex()
	{
		return default(bool);
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x8323D0", Offset = "0x8323D0", VA = "0x8323D0", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIdx, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x8324E0", Offset = "0x8324E0", VA = "0x8324E0", Slot = "24")]
	protected override bool CursorOnCollisionEnter(int cursorIdx, Collision collision)
	{
		return default(bool);
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x832530", Offset = "0x832530", VA = "0x832530")]
	public VelocityEventTrigger()
	{
	}
}
[Token(Token = "0x20000F7")]
public class VelocityPlayer : CursorInputMonoBehaviour
{
	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float kPlayVelocity;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float kPlayRate;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string kStartSound;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string kStopSound;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_playTimer;

	[Token(Token = "0x6000811")]
	[Address(RVA = "0x832598", Offset = "0x832598", VA = "0x832598", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0x8325A0", Offset = "0x8325A0", VA = "0x8325A0", Slot = "22")]
	protected override bool CursorOnTriggerStay(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0x832770", Offset = "0x832770", VA = "0x832770", Slot = "23")]
	protected override bool CursorOnTriggerExit(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0x83284C", Offset = "0x83284C", VA = "0x83284C", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0x832884", Offset = "0x832884", VA = "0x832884")]
	public VelocityPlayer()
	{
	}
}
[Token(Token = "0x20000F8")]
public static class PlayObjectEvent
{
	[Serializable]
	[Token(Token = "0x2000474")]
	public class PlayObject : UnityEvent<Vector3, Vector3, int>
	{
		[Token(Token = "0x600230B")]
		[Address(RVA = "0x925AD4", Offset = "0x925AD4", VA = "0x925AD4")]
		public PlayObject()
		{
		}
	}
}
[Token(Token = "0x20000F9")]
public class PrefabPool<T> where T : Component
{
	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Transform m_poolParent;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T m_prefab;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T[] m_instances;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private int m_numUsed;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private int m_numLoaded;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private int m_maxToLoadPerFrame;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool m_isFullyLoaded;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Action<T[]> OnLoadComplete;

	[Token(Token = "0x170000AC")]
	public bool IsLoaded
	{
		[Token(Token = "0x6000816")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000817")]
	public void Initialize(int poolSize, T prefab, Transform poolParent, int maxToLoadPerFrame = -1)
	{
	}

	[Token(Token = "0x6000818")]
	public void UpdateLoading()
	{
	}

	[Token(Token = "0x6000819")]
	public void StaggeredLoad(int maxToLoadPerFrame)
	{
	}

	[Token(Token = "0x600081A")]
	public T GetInstance()
	{
		return null;
	}

	[Token(Token = "0x600081B")]
	public void FreeAll()
	{
	}

	[Token(Token = "0x600081C")]
	public PrefabPool()
	{
	}
}
[Token(Token = "0x20000FA")]
public class PrePopulateGrowables : MonoBehaviour
{
	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_growable;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_quantity;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool m_isDirty;

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x93667C", Offset = "0x93667C", VA = "0x93667C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x936848", Offset = "0x936848", VA = "0x936848")]
	public PrePopulateGrowables()
	{
	}
}
[Token(Token = "0x20000FB")]
public class PrologueScene : MonoBehaviour
{
	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_superSphere;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator m_moonAnimation;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlaySoundEvent m_prologueAudio;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_timeToTransition;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_startTime;

	[Token(Token = "0x40008E3")]
	private const float kAudioDelay = 0.1f;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_animationDelayPSVR;

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x936860", Offset = "0x936860", VA = "0x936860")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0x936A08", Offset = "0x936A08", VA = "0x936A08")]
	public void Start()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0x936ACC", Offset = "0x936ACC", VA = "0x936ACC")]
	private void StartPrologue()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0x936BC8", Offset = "0x936BC8", VA = "0x936BC8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0x936960", Offset = "0x936960", VA = "0x936960")]
	private void ChangeLevel()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0x936C18", Offset = "0x936C18", VA = "0x936C18")]
	public PrologueScene()
	{
	}
}
[Token(Token = "0x20000FC")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748B90", Offset = "0x748B90")]
public class PullStarToReveal : CursorInputMonoBehaviour
{
	[Token(Token = "0x2000475")]
	private enum RevealState
	{
		[Token(Token = "0x4001FA0")]
		Closed,
		[Token(Token = "0x4001FA1")]
		PullingOpen,
		[Token(Token = "0x4001FA2")]
		Open,
		[Token(Token = "0x4001FA3")]
		PullingClosed
	}

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject m_highlightedStarPrefab;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject m_normalStarPrefab;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject m_stampOffset;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject m_sparkleEmitter;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform m_closedPalletStarOffset;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform m_openPalletStarOffset;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float kPullDistToReveal;

	[Token(Token = "0x40008EC")]
	private const float kTimeToAutoReveal = 15f;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Animator[] m_childAnimators;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject m_highlightedStar;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject m_normalStar;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private VRInput.CursorIndex m_cursorIdx;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float m_autoRevealTimer;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool m_isActivated;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool m_isSelected;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	private bool m_forceClosePending;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int m_otherCursorIdx;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private RevealState m_revealState;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PullStarToReveal s_palletMutexOwner;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool s_hasInitialGrowStarted;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	private static bool s_hasPalletBeenOpened;

	[Token(Token = "0x6000825")]
	[Address(RVA = "0x936C3C", Offset = "0x936C3C", VA = "0x936C3C")]
	public void ForceClosePallet()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0x936CAC", Offset = "0x936CAC", VA = "0x936CAC", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0x936D98", Offset = "0x936D98", VA = "0x936D98", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x936FD0", Offset = "0x936FD0", VA = "0x936FD0", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x937080", Offset = "0x937080", VA = "0x937080", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x937510", Offset = "0x937510", VA = "0x937510")]
	private void StartReveal()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x93795C", Offset = "0x93795C", VA = "0x93795C")]
	private void StartClosing()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x937644", Offset = "0x937644", VA = "0x937644")]
	private void FinishReveal()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x937A44", Offset = "0x937A44", VA = "0x937A44")]
	private void FinishClosing()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x93789C", Offset = "0x93789C", VA = "0x93789C")]
	private void PullOpenPallet(float pullLerp)
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x937C9C", Offset = "0x937C9C", VA = "0x937C9C")]
	private void PullClosedPallet(float pullLerp)
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x937D5C", Offset = "0x937D5C", VA = "0x937D5C", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x937E84", Offset = "0x937E84", VA = "0x937E84", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x937E8C", Offset = "0x937E8C", VA = "0x937E8C", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x937FA0", Offset = "0x937FA0", VA = "0x937FA0", Slot = "5")]
	protected override bool FilterCursorCollision(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x9380BC", Offset = "0x9380BC", VA = "0x9380BC", Slot = "14")]
	protected override void OnCursorOver(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x938204", Offset = "0x938204", VA = "0x938204", Slot = "15")]
	protected override void OnCursorLeave(int cursorIndex)
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x9382E0", Offset = "0x9382E0", VA = "0x9382E0")]
	public PullStarToReveal()
	{
	}
}
[Token(Token = "0x20000FD")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x748BF4", Offset = "0x748BF4")]
public class RampFog : MonoBehaviour
{
	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RampFogNode m_rampFogNode;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material m_material;

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float kBlendTime;

	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RampFogNode m_rampFogTargetNode;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_blendTimer;

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x939708", Offset = "0x939708", VA = "0x939708")]
	public void BlendToNewNode(RampFogNode fogNode)
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x939714", Offset = "0x939714", VA = "0x939714")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x939718", Offset = "0x939718", VA = "0x939718")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x939788", Offset = "0x939788", VA = "0x939788")]
	private void Update()
	{
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x9399B8", Offset = "0x9399B8", VA = "0x9399B8")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x939AD4", Offset = "0x939AD4", VA = "0x939AD4")]
	public RampFog()
	{
	}
}
[Token(Token = "0x20000FE")]
public class RemoveGrowableAtHeight : CursorInputMonoBehaviour
{
	[Token(Token = "0x2000476")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE70", Offset = "0x74AE70")]
	private sealed class <>c__DisplayClass20_0
	{
		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float amp;

		[Token(Token = "0x600230C")]
		[Address(RVA = "0x93A950", Offset = "0x93A950", VA = "0x93A950")]
		public <>c__DisplayClass20_0()
		{
		}

		[Token(Token = "0x600230D")]
		[Address(RVA = "0x93AA90", Offset = "0x93AA90", VA = "0x93AA90")]
		internal float <CursorUpdate>b__1(float t)
		{
			return default(float);
		}

		[Token(Token = "0x600230E")]
		[Address(RVA = "0x93AAA4", Offset = "0x93AAA4", VA = "0x93AAA4")]
		internal float <CursorUpdate>b__2(float t)
		{
			return default(float);
		}
	}

	[Serializable]
	[Token(Token = "0x2000477")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE80", Offset = "0x74AE80")]
	private sealed class <>c
	{
		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<float, float> <>9__20_0;

		[Token(Token = "0x6002310")]
		[Address(RVA = "0x93AA80", Offset = "0x93AA80", VA = "0x93AA80")]
		public <>c()
		{
		}

		[Token(Token = "0x6002311")]
		[Address(RVA = "0x93AA88", Offset = "0x93AA88", VA = "0x93AA88")]
		internal float <CursorUpdate>b__20_0(float t)
		{
			return default(float);
		}
	}

	[Token(Token = "0x40008FF")]
	private const float VIRTUAL_CURSOR_PULL_SPEED = 20f;

	[Token(Token = "0x4000900")]
	private const float SMALL_NUMBER = 0.1f;

	[Token(Token = "0x4000901")]
	private const float SHAKE_MAGNITUDE = 0.5f;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F918", Offset = "0x74F918")]
	public float m_removeHeight;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F950", Offset = "0x74F950")]
	public float m_showIconHeight;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F988", Offset = "0x74F988")]
	public float kScaleFactor;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74F9C0", Offset = "0x74F9C0")]
	public Transform m_offsetTransform;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 m_originalPosition;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74F9F8", Offset = "0x74F9F8")]
	private Mesh m_mesh;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FA30", Offset = "0x74FA30")]
	public Material m_material;

	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FA68", Offset = "0x74FA68")]
	public Color kMeshColor;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3[] m_grabbedPos;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private StampBarnSimple m_stampBarn;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Growable m_growable;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private MaterialPropertyBlock m_propsBlock;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float m_virtualCursorHeight;

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x939D54", Offset = "0x939D54", VA = "0x939D54", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x939F00", Offset = "0x939F00", VA = "0x939F00", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x939FF4", Offset = "0x939FF4", VA = "0x939FF4", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0x93A0BC", Offset = "0x93A0BC", VA = "0x93A0BC", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0x93A0E8", Offset = "0x93A0E8", VA = "0x93A0E8", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0x93A0C0", Offset = "0x93A0C0", VA = "0x93A0C0")]
	private void ResetPosition()
	{
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0x93A7E8", Offset = "0x93A7E8", VA = "0x93A7E8")]
	private void ShakeFeedback(float alpha)
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0x93A958", Offset = "0x93A958", VA = "0x93A958")]
	public RemoveGrowableAtHeight()
	{
	}
}
[Token(Token = "0x20000FF")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748C40", Offset = "0x748C40")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748C40", Offset = "0x748C40")]
public class RenderLayersAfterMainCamera : MonoBehaviour
{
	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask m_layers;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera m_camera;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera m_mainCamera;

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x93AAB4", Offset = "0x93AAB4", VA = "0x93AAB4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0x93AB10", Offset = "0x93AB10", VA = "0x93AB10")]
	private void SetupMainCamera()
	{
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0x93AC18", Offset = "0x93AC18", VA = "0x93AC18")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0x93AD30", Offset = "0x93AD30", VA = "0x93AD30")]
	public RenderLayersAfterMainCamera()
	{
	}
}
[Token(Token = "0x2000100")]
public class RevealIcons : MonoBehaviour
{
	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_stampOffset;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool m_lastEnable;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator[] m_childAnimators;

	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion m_rotation;

	[Token(Token = "0x4000916")]
	private const float m_deltaThreshold = 90f;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_totalDelta;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private VRInput.CursorIndex m_cursorIdx;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private StampBarnSimple m_stampBarnSimple;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int kCloseTriggerId;

	[Token(Token = "0x600084A")]
	[Address(RVA = "0x93AE7C", Offset = "0x93AE7C", VA = "0x93AE7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0x93AF98", Offset = "0x93AF98", VA = "0x93AF98")]
	public void OnRotate(float delta)
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x93AFA8", Offset = "0x93AFA8", VA = "0x93AFA8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x93AFB0", Offset = "0x93AFB0", VA = "0x93AFB0")]
	private void Start()
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0x93B07C", Offset = "0x93B07C", VA = "0x93B07C")]
	private void Update()
	{
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x93B22C", Offset = "0x93B22C", VA = "0x93B22C")]
	public void ToggleRevealAll()
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x93B23C", Offset = "0x93B23C", VA = "0x93B23C")]
	private void RevealAll(bool enable)
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x93B334", Offset = "0x93B334", VA = "0x93B334")]
	private void ActivateChildren(bool enable)
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x93B0BC", Offset = "0x93B0BC", VA = "0x93B0BC")]
	private void RotationReveal()
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x93B3E8", Offset = "0x93B3E8", VA = "0x93B3E8")]
	public RevealIcons()
	{
	}
}
[Token(Token = "0x2000101")]
public class RotateAround : MonoBehaviour
{
	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_rotationAxis;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float kRotSpeed;

	[Token(Token = "0x6000854")]
	[Address(RVA = "0x93BAB8", Offset = "0x93BAB8", VA = "0x93BAB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x93BB9C", Offset = "0x93BB9C", VA = "0x93BB9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x93BDBC", Offset = "0x93BDBC", VA = "0x93BDBC")]
	public RotateAround()
	{
	}
}
[Token(Token = "0x2000102")]
public class RotateIcons2D : MonoBehaviour
{
	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 kPalletRotation;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool m_flip;

	[Token(Token = "0x6000857")]
	[Address(RVA = "0x93BDCC", Offset = "0x93BDCC", VA = "0x93BDCC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x93BF80", Offset = "0x93BF80", VA = "0x93BF80")]
	public RotateIcons2D()
	{
	}
}
[Token(Token = "0x2000103")]
public class Scene : MonoBehaviour
{
	[Token(Token = "0x6000859")]
	[Address(RVA = "0x93C9D4", Offset = "0x93C9D4", VA = "0x93C9D4", Slot = "4")]
	public virtual void OnSceneUnload()
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x93CA6C", Offset = "0x93CA6C", VA = "0x93CA6C")]
	private void Start()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x93CAD0", Offset = "0x93CAD0", VA = "0x93CAD0")]
	public Scene()
	{
	}
}
[Token(Token = "0x2000104")]
public class ShadowboxScene : MonoBehaviour
{
	[Token(Token = "0x600085C")]
	[Address(RVA = "0x8B3784", Offset = "0x8B3784", VA = "0x8B3784")]
	private void Start()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x8B3844", Offset = "0x8B3844", VA = "0x8B3844")]
	private void Restart()
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x8B3904", Offset = "0x8B3904", VA = "0x8B3904")]
	public ShadowboxScene()
	{
	}
}
[Token(Token = "0x2000105")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748CCC", Offset = "0x748CCC")]
public class ShellTouchParticlesActivator : MonoBehaviour
{
	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string ShellTouchStartSound;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string ShellTouchEndSound;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshCollider m_meshCollider;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DelayedActionTrigger m_delayedActionTrigger;

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x8B390C", Offset = "0x8B390C", VA = "0x8B390C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x8B3964", Offset = "0x8B3964", VA = "0x8B3964")]
	private void Start()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x8B3A28", Offset = "0x8B3A28", VA = "0x8B3A28")]
	[SerializeField]
	public void RemoveParticlesActivator()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x8B3D28", Offset = "0x8B3D28", VA = "0x8B3D28")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x8B3F30", Offset = "0x8B3F30", VA = "0x8B3F30")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x8B4134", Offset = "0x8B4134", VA = "0x8B4134")]
	public ShellTouchParticlesActivator()
	{
	}
}
[Token(Token = "0x2000106")]
public class ShellTouchParticlesHandler : MonoBehaviour
{
	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<ShellTouchParticlesHandler> _activeHandlers;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string kTouchProximitySoundParam;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string kTouchSpeedSoundParam;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_previousPosition;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ShellTouchParticlesActivator m_activator;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem[] kParticleSystems;

	[Token(Token = "0x170000AD")]
	public static List<ShellTouchParticlesHandler> ActiveHandlers
	{
		[Token(Token = "0x6000865")]
		[Address(RVA = "0x8B419C", Offset = "0x8B419C", VA = "0x8B419C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x8B41EC", Offset = "0x8B41EC", VA = "0x8B41EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x8B42F8", Offset = "0x8B42F8", VA = "0x8B42F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x8B436C", Offset = "0x8B436C", VA = "0x8B436C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x8B3C98", Offset = "0x8B3C98", VA = "0x8B3C98")]
	public void SetParticlesActive(bool active)
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x8B4580", Offset = "0x8B4580", VA = "0x8B4580")]
	public ShellTouchParticlesHandler()
	{
	}
}
[Token(Token = "0x2000107")]
public class StampBarnSimple : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GrowableTypeSet m_growableTypeSet;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GrowableType[] m_sceneGrowableTypes;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CreateModeStamp[] m_stamps;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject m_multiPalleteRing;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly int[] m_selectedStampIdx;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly int[] m_selectedStampOverrideIdx;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject m_stampParent;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject m_stampIconParent;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public PlaceablePalette m_placeablePalette;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] m_iconSlotPrefabs;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public MaterialParamOscillator[] m_iconOscillators;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int m_stampGroup;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int m_stampGroupCount;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int m_amortizedStartCounter;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int m_amortizedStampCounter;

	[Token(Token = "0x170000AE")]
	public int CurrentStampGroup
	{
		[Token(Token = "0x600086B")]
		[Address(RVA = "0x8B7A7C", Offset = "0x8B7A7C", VA = "0x8B7A7C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x8B7A84", Offset = "0x8B7A84", VA = "0x8B7A84")]
	public CreateModeStamp GetSelectedStamp(int cursorIdx)
	{
		return null;
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0x8B7B14", Offset = "0x8B7B14", VA = "0x8B7B14")]
	public bool IsStampSelected(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x8B7B8C", Offset = "0x8B7B8C", VA = "0x8B7B8C")]
	public void SelectStamp(int cursorIdx, CreateModeStamp stamp)
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x8B7CC8", Offset = "0x8B7CC8", VA = "0x8B7CC8", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x8B7E24", Offset = "0x8B7E24", VA = "0x8B7E24", Slot = "7")]
	protected override bool CursorAmortizedStart(int callCount)
	{
		return default(bool);
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x8B8368", Offset = "0x8B8368", VA = "0x8B8368", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0x8B83D8", Offset = "0x8B83D8", VA = "0x8B83D8", Slot = "18")]
	protected override bool CursorUpdate(int cursorIdx)
	{
		return default(bool);
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x8B8428", Offset = "0x8B8428", VA = "0x8B8428")]
	private void UpdateStampOverride(int cursorIdx)
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0x8B856C", Offset = "0x8B856C", VA = "0x8B856C")]
	public void DeselectStamp(int cursorIdx)
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x8B84B4", Offset = "0x8B84B4", VA = "0x8B84B4")]
	private void SelectStamp(int cursorIdx, int selectedIdx)
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x8B85D8", Offset = "0x8B85D8", VA = "0x8B85D8")]
	public void SetStampGroup(int stampGroup)
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x8B8764", Offset = "0x8B8764", VA = "0x8B8764")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x757174", Offset = "0x757174")]
	public void NextStampGroup()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x8B8770", Offset = "0x8B8770", VA = "0x8B8770")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7571AC", Offset = "0x7571AC")]
	public void PrevStampGroup()
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x8B879C", Offset = "0x8B879C", VA = "0x8B879C")]
	public StampBarnSimple()
	{
	}
}
[Token(Token = "0x2000108")]
public class StarPuzzleInstance : MonoBehaviour
{
	[Token(Token = "0x2000478")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AE90", Offset = "0x74AE90")]
	private sealed class <LoadInactiveRipples>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StarPuzzleInstance <>4__this;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int count;

		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__2;

		[Token(Token = "0x17000380")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002315")]
			[Address(RVA = "0x8C1528", Offset = "0x8C1528", VA = "0x8C1528", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000381")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002317")]
			[Address(RVA = "0x8C1594", Offset = "0x8C1594", VA = "0x8C1594", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002312")]
		[Address(RVA = "0x8BDC74", Offset = "0x8BDC74", VA = "0x8BDC74")]
		[DebuggerHidden]
		public <LoadInactiveRipples>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x6002313")]
		[Address(RVA = "0x8C13E8", Offset = "0x8C13E8", VA = "0x8C13E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002314")]
		[Address(RVA = "0x8C13EC", Offset = "0x8C13EC", VA = "0x8C13EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002316")]
		[Address(RVA = "0x8C1530", Offset = "0x8C1530", VA = "0x8C1530", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000938")]
	private const int NONE_EXISTENT_INDEX = -1;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StarPuzzleSettings m_settings;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Constellation m_constellation;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private StarPuzzle m_starPuzzle;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private StarPattern m_starPatternScrambled;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private StarPuzzleTurnRing m_turnRing;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject m_iconMeshInstance;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<MaterialProperty> m_iconMeshTransitionProperties;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEventTrigger m_iconDisplayTrigger;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_iconFadeTimer;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public StarPuzzleStar[] m_stars;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int[,] m_starsNeighborsMap;

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private StarPuzzleStarTarget[] m_starTargets;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public StarLine[] m_starLines;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private StarLineRipple[] m_activeRipples;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Queue<StarLineRipple> m_inactiveRipples;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_isSolved;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool m_isCheatSolved;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	private bool m_pickedFirstStar;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float m_currentTimeToRegainColor;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Color m_defaultSocketColor;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Color m_defaultStarColor;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Color m_defaultLineColor;

	[Token(Token = "0x170000AF")]
	public StarPuzzle StarPuzzle
	{
		[Token(Token = "0x600087A")]
		[Address(RVA = "0x8BB550", Offset = "0x8BB550", VA = "0x8BB550")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B0")]
	public Constellation Constellation
	{
		[Token(Token = "0x600087B")]
		[Address(RVA = "0x8BB558", Offset = "0x8BB558", VA = "0x8BB558")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B1")]
	public StarPuzzleTurnRing TurnRing
	{
		[Token(Token = "0x600087C")]
		[Address(RVA = "0x8BB560", Offset = "0x8BB560", VA = "0x8BB560")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B2")]
	public bool IsSolved
	{
		[Token(Token = "0x600087D")]
		[Address(RVA = "0x8BB568", Offset = "0x8BB568", VA = "0x8BB568")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B3")]
	public GameObject IconMeshInstance
	{
		[Token(Token = "0x600087E")]
		[Address(RVA = "0x8BB570", Offset = "0x8BB570", VA = "0x8BB570")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0x8BB578", Offset = "0x8BB578", VA = "0x8BB578")]
	public void SetConstellation(Constellation constellation)
	{
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0x8BB5F0", Offset = "0x8BB5F0", VA = "0x8BB5F0")]
	public void SetCompletionOnIcon(float completion)
	{
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0x8BB604", Offset = "0x8BB604", VA = "0x8BB604")]
	public bool IsAnyStarSelected()
	{
		return default(bool);
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0x8BB6FC", Offset = "0x8BB6FC", VA = "0x8BB6FC")]
	private StarPattern CloneStarPattern(StarPattern starPattern)
	{
		return null;
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x8BB76C", Offset = "0x8BB76C", VA = "0x8BB76C")]
	public void SetStarPatterns(StarPuzzle starPuzzle)
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x8BC310", Offset = "0x8BC310", VA = "0x8BC310")]
	private void CreateIconInstance(StarPuzzle starPuzzle)
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x8BD390", Offset = "0x8BD390", VA = "0x8BD390")]
	private void DestroyIconInstance()
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0x8BD444", Offset = "0x8BD444", VA = "0x8BD444")]
	private void UpdateIconFade()
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0x8BD484", Offset = "0x8BD484", VA = "0x8BD484")]
	private int[] GetRandomIdxs(int numSourceIdxs, int numTargetIdxs)
	{
		return null;
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x8BBB40", Offset = "0x8BBB40", VA = "0x8BBB40")]
	private void ScrambleStarPattern(StarPattern starPattern, float scrambleDistMin, float scrambleDistMax, float scramblePercent)
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x8BD5D4", Offset = "0x8BD5D4", VA = "0x8BD5D4")]
	private void ToggleStarVisibility(bool isVisible)
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x8BD704", Offset = "0x8BD704", VA = "0x8BD704")]
	public void EnterStarMode()
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x8BD8D8", Offset = "0x8BD8D8", VA = "0x8BD8D8")]
	public void ExitStarMode()
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0x8BDB08", Offset = "0x8BDB08", VA = "0x8BDB08")]
	private void Awake()
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0x8BDBF0", Offset = "0x8BDBF0", VA = "0x8BDBF0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7571E4", Offset = "0x7571E4")]
	private IEnumerator LoadInactiveRipples(int count)
	{
		return null;
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x8BDCA0", Offset = "0x8BDCA0", VA = "0x8BDCA0")]
	private void ReplaceRipples()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x8BD8FC", Offset = "0x8BD8FC", VA = "0x8BD8FC")]
	private void ClearRipples()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0x8BDE40", Offset = "0x8BDE40", VA = "0x8BDE40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0x8BEDB8", Offset = "0x8BEDB8", VA = "0x8BEDB8")]
	public void OnAllPuzzlesSolved()
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0x8BD750", Offset = "0x8BD750", VA = "0x8BD750")]
	private void ActivateTurnRing()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0x8BEFF0", Offset = "0x8BEFF0", VA = "0x8BEFF0")]
	private void UnlockStarPuzzleAchievement()
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0x8BE544", Offset = "0x8BE544", VA = "0x8BE544")]
	private void UpdateSelectedDepth()
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0x8BF294", Offset = "0x8BF294", VA = "0x8BF294")]
	private Vector3 ClampNormalize(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0x8BE2E8", Offset = "0x8BE2E8", VA = "0x8BE2E8")]
	private void UpdateParticlesFromGame(float dt)
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0x8BF364", Offset = "0x8BF364", VA = "0x8BF364")]
	private Vector3 GetStarAttraction(StarPuzzleStar star)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0x8BFC6C", Offset = "0x8BFC6C", VA = "0x8BFC6C")]
	private Vector3 GetPlanarRepulsionFromOtherStars(StarPuzzleStar star)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0x8BF958", Offset = "0x8BF958", VA = "0x8BF958")]
	private Vector3 GetRepulsionFromOtherStars(StarPuzzleStar star)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0x8BF4A8", Offset = "0x8BF4A8", VA = "0x8BF4A8")]
	private Vector3 GetAttractionToStarTarget(StarPuzzleStar star)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0x8BC73C", Offset = "0x8BC73C", VA = "0x8BC73C")]
	private Vector3 CenterIconInViewport(Renderer iconRender)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0x8BC504", Offset = "0x8BC504", VA = "0x8BC504")]
	private float ScaleIconInViewport(Renderer iconRender)
	{
		return default(float);
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0x8BCBC8", Offset = "0x8BCBC8", VA = "0x8BCBC8")]
	private void KeepStarsInViewport()
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0x8BCF98", Offset = "0x8BCF98", VA = "0x8BCF98")]
	private void KeepTargetsInViewport()
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0x8BCD80", Offset = "0x8BCD80", VA = "0x8BCD80")]
	public void RotateStars(float rotDegs)
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0x8BC924", Offset = "0x8BC924", VA = "0x8BC924")]
	private void ApplyIconChangesToStars(float scaleMult, Vector3 center, Vector3 centerOffset)
	{
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0x8BFFD4", Offset = "0x8BFFD4", VA = "0x8BFFD4")]
	public bool IsStarAlignedOnWrong(StarPuzzleStar star)
	{
		return default(bool);
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0x8BE750", Offset = "0x8BE750", VA = "0x8BE750")]
	private void UpdateLineVisibility()
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0x8BD12C", Offset = "0x8BD12C", VA = "0x8BD12C")]
	private void UpdatePuzzleAlignment(bool initialSetup)
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0x8C03A4", Offset = "0x8C03A4", VA = "0x8C03A4")]
	public void SendLineRipples(StarLine line, float startLocation = 0.5f)
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0x8C0540", Offset = "0x8C0540", VA = "0x8C0540")]
	public StarLineRipple SendStarRipples(int originStarIndex)
	{
		return null;
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0x8C06AC", Offset = "0x8C06AC", VA = "0x8C06AC")]
	public StarPuzzleStar SelectStarNearCursor(int cursorIdx, float maxDistFromCursor = -1f)
	{
		return null;
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0x8C09D4", Offset = "0x8C09D4", VA = "0x8C09D4")]
	private void SetStarTrailIntensity(float speed)
	{
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0x8C0A50", Offset = "0x8C0A50", VA = "0x8C0A50")]
	private bool IsRayInRange(Ray ray)
	{
		return default(bool);
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0x8C0B0C", Offset = "0x8C0B0C", VA = "0x8C0B0C")]
	public void StartRegainColor()
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0x8BEA90", Offset = "0x8BEA90", VA = "0x8BEA90")]
	private void RegainColor()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0x8BBCE4", Offset = "0x8BBCE4", VA = "0x8BBCE4")]
	private void InitStarArrays()
	{
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0x8C117C", Offset = "0x8C117C", VA = "0x8C117C")]
	private void AddMapEntry(ref int[,] map, int key, int value)
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0x8BE218", Offset = "0x8BE218", VA = "0x8BE218")]
	private void UpdateTickleSounds(int cursorIdx)
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x8C13E0", Offset = "0x8C13E0", VA = "0x8C13E0")]
	public StarPuzzleInstance()
	{
	}
}
[Token(Token = "0x2000109")]
public class StarPuzzleTurnRing : MonoBehaviour
{
	[Token(Token = "0x400094F")]
	private const float PULSING_FUNCTION_POWER = 3f;

	[Token(Token = "0x4000950")]
	private const float PULSING_FUNCTION_MAX_VALUE = 1000f;

	[Token(Token = "0x4000951")]
	private const float CAMERA_TO_RING_LOOK_AT_THRESHOLD = 0.75f;

	[Token(Token = "0x4000952")]
	private const float SMALL_NUMBER = 0.1f;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 kOffsetFromMeshInVR;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float kAudioParamChangeSpeed;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float kMinPulseCooldown;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float kMaxPulseCooldown;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_ringTutorialGuide2D;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject m_ringTutorialGuideVR;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] m_turnRingParticlesContainers2D;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] m_turnRingParticlesContainersVR;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<ParticleSystem> m_turnRingParticleSystems;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform m_icon;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private StarPuzzleInstance m_puzzle;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_targetRotation;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_oldRoty;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool m_isTurning;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_initialSwipeSpeed;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_currentSwipeSpeed;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_swipeStartTime;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_isSolving;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_timeRemainingToSolve;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_timeSolved;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool m_completed;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	private bool m_hasReachedTarget;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_targetAudioParam;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float m_currentAudioParam;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Collider m_collider;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private SimpleRotate m_simpleRotate;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool m_tutorialIsActive;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private StarLineRipple m_currentPulseRipple;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool m_isFirstPulseRipple;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float m_timeRemainingForNextPulse;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int m_currentStarPuzzleIndex;

	[Token(Token = "0x170000B4")]
	public bool IsTurning
	{
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x8C2240", Offset = "0x8C2240", VA = "0x8C2240")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B5")]
	public bool IsSolving
	{
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x8C2248", Offset = "0x8C2248", VA = "0x8C2248")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B6")]
	public bool IsMirrored
	{
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x8C2250", Offset = "0x8C2250", VA = "0x8C2250")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B7")]
	private float TargetRotation
	{
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x8C2340", Offset = "0x8C2340", VA = "0x8C2340")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B8")]
	private bool LookingAtRing
	{
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x8C2388", Offset = "0x8C2388", VA = "0x8C2388")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B9")]
	private float CurrentRotation
	{
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x8C231C", Offset = "0x8C231C", VA = "0x8C231C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000BA")]
	private GameObject RingTutorialGuide
	{
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x8C2704", Offset = "0x8C2704", VA = "0x8C2704")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x8C2780", Offset = "0x8C2780", VA = "0x8C2780")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0x8BF124", Offset = "0x8BF124", VA = "0x8BF124")]
	public void Initialize(Transform icon, StarPuzzleInstance puzzle, float targetRotation, bool tutorialIsActive)
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0x8C283C", Offset = "0x8C283C", VA = "0x8C283C")]
	private void InitRingParticlesReference()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0x8C2C0C", Offset = "0x8C2C0C", VA = "0x8C2C0C")]
	public void ToggleRingParticlesEmission(bool emit)
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x8BF28C", Offset = "0x8BF28C", VA = "0x8BF28C")]
	public void PlayRingParticles()
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x8BEFE8", Offset = "0x8BEFE8", VA = "0x8BEFE8")]
	public void StopRingParticles()
	{
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x8C29C4", Offset = "0x8C29C4", VA = "0x8C29C4")]
	private void EnableRingTutorial()
	{
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x8C2CC0", Offset = "0x8C2CC0", VA = "0x8C2CC0")]
	private void PlayTutorialRingSound()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0x8C2B64", Offset = "0x8C2B64", VA = "0x8C2B64")]
	private void UpdateSimpleRotateState()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0x8C2D98", Offset = "0x8C2D98", VA = "0x8C2D98")]
	private void DisableRingTutorial()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0x8BE968", Offset = "0x8BE968", VA = "0x8BE968")]
	public bool IsSolved()
	{
		return default(bool);
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x8BA004", Offset = "0x8BA004", VA = "0x8BA004")]
	public float GetSwellingPercentage()
	{
		return default(float);
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x8C2E68", Offset = "0x8C2E68", VA = "0x8C2E68")]
	private float ClosenessToSolution()
	{
		return default(float);
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x8C2F58", Offset = "0x8C2F58", VA = "0x8C2F58")]
	private void UpdatePulsing()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x8C31C0", Offset = "0x8C31C0", VA = "0x8C31C0")]
	private void RotateByVelocity(float rotationVelocity)
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x8C3244", Offset = "0x8C3244", VA = "0x8C3244")]
	private void Update()
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x8C3DEC", Offset = "0x8C3DEC", VA = "0x8C3DEC")]
	private void Complete()
	{
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x8C3B80", Offset = "0x8C3B80", VA = "0x8C3B80")]
	private void RingExitSequence(float roty)
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x8C2548", Offset = "0x8C2548", VA = "0x8C2548")]
	private float CameraBasedRotationOffset()
	{
		return default(float);
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0x8C3FF8", Offset = "0x8C3FF8", VA = "0x8C3FF8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x8C40F0", Offset = "0x8C40F0", VA = "0x8C40F0")]
	public StarPuzzleTurnRing()
	{
	}
}
[Token(Token = "0x200010A")]
public class StayInBoundary : MonoBehaviour
{
	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kBoundaryRadius;

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0x8C44B0", Offset = "0x8C44B0", VA = "0x8C44B0")]
	private void Update()
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0x8C4590", Offset = "0x8C4590", VA = "0x8C4590")]
	public StayInBoundary()
	{
	}
}
[Token(Token = "0x200010B")]
public class StrandSystem : MonoBehaviour
{
	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StrandControl[] m_strandBeacons;

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0x798FE4", Offset = "0x798FE4", VA = "0x798FE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0x79903C", Offset = "0x79903C", VA = "0x79903C")]
	public void ScanForClosestBeacon(Vector3 pos)
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0x799370", Offset = "0x799370", VA = "0x799370")]
	public StrandSystem()
	{
	}
}
[Token(Token = "0x200010C")]
public class SubtitleManager : MonoBehaviour
{
	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SubtitleManager m_instance;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Canvas m_2dCanvas;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Canvas m_vrCanvas;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Canvas m_currentCanvas;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text m_text;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Localize m_localize;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_subDisplayed;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool m_menuActive;

	[Token(Token = "0x400097C")]
	private const string kStopmarker = "_STOP";

	[Token(Token = "0x170000BB")]
	public static SubtitleManager Instance
	{
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x799378", Offset = "0x799378", VA = "0x799378")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BC")]
	private bool SubtitleTestScene
	{
		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x7993C8", Offset = "0x7993C8", VA = "0x7993C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000BD")]
	private bool ShowSubtitles
	{
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x799434", Offset = "0x799434", VA = "0x799434")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0x7994E0", Offset = "0x7994E0", VA = "0x7994E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0x79966C", Offset = "0x79966C", VA = "0x79966C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0x7997A4", Offset = "0x7997A4", VA = "0x7997A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x799940", Offset = "0x799940", VA = "0x799940")]
	public void ApplyVRTranforms(Vector3 offset, Vector3 scale, Quaternion rotate)
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x799B48", Offset = "0x799B48", VA = "0x799B48")]
	private void ShowSubtitle(string id)
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x799C78", Offset = "0x799C78", VA = "0x799C78")]
	private void HideSubtitle()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0x799D50", Offset = "0x799D50", VA = "0x799D50")]
	private void ProcessMarkerInfo(string id, bool stop)
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x799D5C", Offset = "0x799D5C", VA = "0x799D5C")]
	private void OnSubtitle(object obj)
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0x799ED4", Offset = "0x799ED4", VA = "0x799ED4")]
	private void OnSubtitleOptionChange(object obj)
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x799F08", Offset = "0x799F08", VA = "0x799F08")]
	private void OnGameMenu(object obj)
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x79A014", Offset = "0x79A014", VA = "0x79A014")]
	private void OnSceneLoaded(UnityEngine.SceneManagement.Scene loadedScene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x79A018", Offset = "0x79A018", VA = "0x79A018")]
	public SubtitleManager()
	{
	}
}
[Token(Token = "0x200010D")]
public class SubtitleTestScene : MonoBehaviour
{
	[Token(Token = "0x2000479")]
	private enum TestCommand
	{
		[Token(Token = "0x4001FAD")]
		Increment,
		[Token(Token = "0x4001FAE")]
		Decrement
	}

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_background;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text m_currentLanguage;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text m_currentVO;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text m_currentStringId;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_currentLanguageIdx;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string[] kLanguages;

	[Token(Token = "0x4000983")]
	private const string kStopmarker = "_STOP";

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly string[] m_prologue;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly string[] m_bird;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly string[] m_turtle;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly string[] m_swan;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly string[] m_bear;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly string[] m_fox;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static readonly string[] m_owl;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static Dictionary<KeyCode, string[]> m_vo;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private KeyCode m_currentKeyCode;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_currentVOIdx;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string m_currentVOId;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string m_currentPlaying;

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0x79A020", Offset = "0x79A020", VA = "0x79A020")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x79A0D8", Offset = "0x79A0D8", VA = "0x79A0D8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x79A178", Offset = "0x79A178", VA = "0x79A178")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x79A4A8", Offset = "0x79A4A8", VA = "0x79A4A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x79A634", Offset = "0x79A634", VA = "0x79A634")]
	private void OnSubtitle(object obj)
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x79A808", Offset = "0x79A808", VA = "0x79A808")]
	private int ProcessLanguageIndex(TestCommand command)
	{
		return default(int);
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x79A1AC", Offset = "0x79A1AC", VA = "0x79A1AC")]
	private void UpdateLanguage(int newLanguage)
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x79A3F4", Offset = "0x79A3F4", VA = "0x79A3F4")]
	private void UpdateVOGroup(KeyCode code)
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x79AA38", Offset = "0x79AA38", VA = "0x79AA38")]
	private int ProcessVOIdx(TestCommand command)
	{
		return default(int);
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x79A908", Offset = "0x79A908", VA = "0x79A908")]
	private void UpdateVO(int idx)
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x79AB64", Offset = "0x79AB64", VA = "0x79AB64")]
	private void PlayVO()
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x79A4AC", Offset = "0x79A4AC", VA = "0x79A4AC")]
	private void HandleInput()
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x79AC44", Offset = "0x79AC44", VA = "0x79AC44")]
	public SubtitleTestScene()
	{
	}
}
[Token(Token = "0x200010E")]
public class SwapMaskedMaterials : MonoBehaviour
{
	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer m_renderer;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] m_maskedMaterials;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FAB0", Offset = "0x74FAB0")]
	public float m_swapHeight;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material[] m_unmaskedMaterials;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ColorPicker m_colorPicker;

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x79C6B0", Offset = "0x79C6B0", VA = "0x79C6B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x79C724", Offset = "0x79C724", VA = "0x79C724")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x79C768", Offset = "0x79C768", VA = "0x79C768")]
	public void SwapMaterials(bool isMasked)
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x79C830", Offset = "0x79C830", VA = "0x79C830")]
	public SwapMaskedMaterials()
	{
	}
}
[Token(Token = "0x200010F")]
public class TerrariumParticleWindController : MonoBehaviour
{
	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SphereCollider m_sphereCollider;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private WindZone m_wind;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem m_particleSys;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.CollisionModule m_coll;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_windDeactivationTimer;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int m_windDeactivationTimerTrigger;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_speedMultiplier;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_speed;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool m_windOn;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_lastPosition;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public VRInput.CursorIndex m_cursorIdx;

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x79E190", Offset = "0x79E190", VA = "0x79E190")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x79E220", Offset = "0x79E220", VA = "0x79E220")]
	private void Update()
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x79E43C", Offset = "0x79E43C", VA = "0x79E43C")]
	public TerrariumParticleWindController()
	{
	}
}
[Token(Token = "0x2000110")]
public class TerrariumProgressController : MonoBehaviour
{
	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TerrariumParticleWindController m_wind;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_progressDisplayObject;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleCollisionEvent[] m_collisionEvents;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material[] m_materials;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_progress;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_increment;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_decrement;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_incrementSnap;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color[] m_colors;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MeshRenderer[] m_turtles;

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0x79E4C0", Offset = "0x79E4C0", VA = "0x79E4C0")]
	private void popluateColorArray()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x79E5C8", Offset = "0x79E5C8", VA = "0x79E5C8")]
	private void TurtleControl(int num)
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0x79E668", Offset = "0x79E668", VA = "0x79E668")]
	private void Start()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x79E710", Offset = "0x79E710", VA = "0x79E710")]
	private void UpdateMaterial(float val)
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x79EA04", Offset = "0x79EA04", VA = "0x79EA04")]
	public void UpdateProgressRim()
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0x79EA14", Offset = "0x79EA14", VA = "0x79EA14")]
	private void Update()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x79EA54", Offset = "0x79EA54", VA = "0x79EA54")]
	public TerrariumProgressController()
	{
	}
}
[Token(Token = "0x2000111")]
public class TerrariumProgressParticleCollisionHandler : MonoBehaviour
{
	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TerrariumProgressController m_terrariumProgressController;

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0x79EAEC", Offset = "0x79EAEC", VA = "0x79EAEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0x79EB44", Offset = "0x79EB44", VA = "0x79EB44")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0x79EB68", Offset = "0x79EB68", VA = "0x79EB68")]
	public TerrariumProgressParticleCollisionHandler()
	{
	}
}
[Token(Token = "0x2000112")]
public class Condition : ScriptableObject
{
	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool m_isActive;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public string m_conditionalGameObjectPath;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected GameObject m_conditionalGameObject;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected TreasureBox m_treasureBox;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEvent m_OnConditionComplete;

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0x7B1F4C", Offset = "0x7B1F4C", VA = "0x7B1F4C", Slot = "4")]
	public virtual string ConditionalGameObjectEditorText()
	{
		return null;
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0x7B1F94", Offset = "0x7B1F94", VA = "0x7B1F94")]
	public void SetActive(bool value)
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0x7B1FA0", Offset = "0x7B1FA0", VA = "0x7B1FA0")]
	public void AddOnConditionCompleteListener(UnityAction action)
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0x7B1FBC", Offset = "0x7B1FBC", VA = "0x7B1FBC")]
	public void OnConditionComplete()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0x7B1FD0", Offset = "0x7B1FD0", VA = "0x7B1FD0", Slot = "5")]
	public virtual bool Check()
	{
		return default(bool);
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0x7B1FD8", Offset = "0x7B1FD8", VA = "0x7B1FD8", Slot = "6")]
	protected virtual void CheckOnConditionComplete()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0x7B201C", Offset = "0x7B201C", VA = "0x7B201C")]
	public void ValidateConditionalGameObject(bool cacheGameObject = false)
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0x7B2184", Offset = "0x7B2184", VA = "0x7B2184", Slot = "7")]
	public virtual void Initialize(TreasureBox treasure)
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0x7B2194", Offset = "0x7B2194", VA = "0x7B2194", Slot = "8")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0x7B2198", Offset = "0x7B2198", VA = "0x7B2198", Slot = "9")]
	public virtual void Destroy()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0x7B21B4", Offset = "0x7B21B4", VA = "0x7B21B4")]
	public Condition()
	{
	}
}
[Token(Token = "0x2000113")]
public enum GrowableEventType
{
	[Token(Token = "0x40009B1")]
	NewGrowable,
	[Token(Token = "0x40009B2")]
	Grow,
	[Token(Token = "0x40009B3")]
	Ungrow,
	[Token(Token = "0x40009B4")]
	PlayEvent,
	[Token(Token = "0x40009B5")]
	InteractionEvent,
	[Token(Token = "0x40009B6")]
	ChangeColorEvent,
	[Token(Token = "0x40009B7")]
	ChangeSizeEvent,
	[Token(Token = "0x40009B8")]
	ChangeShapeEvent
}
[Serializable]
[Token(Token = "0x2000114")]
public class SerializableGrowableEventType : SerializableEnum<GrowableEventType>
{
	[Token(Token = "0x6000909")]
	[Address(RVA = "0x8B20F4", Offset = "0x8B20F4", VA = "0x8B20F4")]
	public SerializableGrowableEventType(GrowableEventType initialValue)
	{
	}
}
[Token(Token = "0x2000115")]
public enum ZoneMatchStyle
{
	[Token(Token = "0x40009BA")]
	None,
	[Token(Token = "0x40009BB")]
	Specific,
	[Token(Token = "0x40009BC")]
	Subsequent,
	[Token(Token = "0x40009BD")]
	Additive
}
[Serializable]
[Token(Token = "0x2000116")]
public class SerializableZoneMatchStyle : SerializableEnum<ZoneMatchStyle>
{
	[Token(Token = "0x600090A")]
	[Address(RVA = "0x8B2154", Offset = "0x8B2154", VA = "0x8B2154")]
	public SerializableZoneMatchStyle(ZoneMatchStyle initialValue)
	{
	}
}
[Token(Token = "0x2000117")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748D30", Offset = "0x748D30")]
public class GrowableCondition : Condition
{
	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FAF8", Offset = "0x74FAF8")]
	public SerializableGrowableEventType m_growableEvent;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private EventBarn.EventType m_event;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FB30", Offset = "0x74FB30")]
	public int m_quota;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FB68", Offset = "0x74FB68")]
	public SerializableZoneMatchStyle m_zoneMatchStyle;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FBA0", Offset = "0x74FBA0")]
	public int m_zoneToMatch;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FBD8", Offset = "0x74FBD8")]
	public GrowableType m_growableType;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FC10", Offset = "0x74FC10")]
	public bool m_resetCountOnFail;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int m_lastZone;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int m_count;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int[] m_eventsPerZone;

	[Token(Token = "0x600090B")]
	[Address(RVA = "0x8E5F74", Offset = "0x8E5F74", VA = "0x8E5F74", Slot = "7")]
	public override void Initialize(TreasureBox treasure)
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0x8E61B0", Offset = "0x8E61B0", VA = "0x8E61B0", Slot = "4")]
	public override string ConditionalGameObjectEditorText()
	{
		return null;
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0x8E61F8", Offset = "0x8E61F8", VA = "0x8E61F8", Slot = "5")]
	public override bool Check()
	{
		return default(bool);
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x8E62C0", Offset = "0x8E62C0", VA = "0x8E62C0")]
	private void ValidateGrowableEventTypes()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x8E6518", Offset = "0x8E6518", VA = "0x8E6518")]
	private void ValidateZoneToMatch()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0x8E65BC", Offset = "0x8E65BC", VA = "0x8E65BC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0x8E6640", Offset = "0x8E6640", VA = "0x8E6640")]
	private void CheckResetProgress()
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x8E665C", Offset = "0x8E665C", VA = "0x8E665C")]
	private void Increment(object obj)
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x8E68E4", Offset = "0x8E68E4", VA = "0x8E68E4", Slot = "9")]
	public override void Destroy()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0x8E6994", Offset = "0x8E6994", VA = "0x8E6994")]
	public GrowableCondition()
	{
	}
}
[Token(Token = "0x2000118")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x748D40", Offset = "0x748D40")]
public class LookAtCondition : Condition
{
	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_timer;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_lookDuration;

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x7E17CC", Offset = "0x7E17CC", VA = "0x7E17CC", Slot = "4")]
	public override string ConditionalGameObjectEditorText()
	{
		return null;
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0x7E1814", Offset = "0x7E1814", VA = "0x7E1814", Slot = "5")]
	public override bool Check()
	{
		return default(bool);
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x7E1824", Offset = "0x7E1824", VA = "0x7E1824", Slot = "6")]
	protected override void CheckOnConditionComplete()
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x7E1860", Offset = "0x7E1860", VA = "0x7E1860")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x7E18E4", Offset = "0x7E18E4", VA = "0x7E18E4", Slot = "8")]
	public override void Update()
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x7E1A54", Offset = "0x7E1A54", VA = "0x7E1A54")]
	public LookAtCondition()
	{
	}
}
[Token(Token = "0x2000119")]
public enum TreasureState
{
	[Token(Token = "0x40009CB")]
	Locked,
	[Token(Token = "0x40009CC")]
	Unlocked,
	[Token(Token = "0x40009CD")]
	Revealed
}
[Token(Token = "0x200011A")]
public class TreasureBox : MonoBehaviour
{
	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_treasureName;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	public TreasureState m_treasureState;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Condition[] m_unlockConditions;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Condition[] m_instancedUnlockConditions;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Condition m_revealCondition;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Condition m_instancedRevealCondition;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool m_revealCanBeRepeated;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float m_revealRepeatCooldownTime;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_timer;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent m_OnUnlock;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent m_OnReveal;

	[Token(Token = "0x40009D9")]
	private const string kStateText = "Treasure {0} is {1}.";

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x7A3750", Offset = "0x7A3750", VA = "0x7A3750")]
	private void ValidateTreasureName()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x7A3818", Offset = "0x7A3818", VA = "0x7A3818")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x7A38A4", Offset = "0x7A38A4", VA = "0x7A38A4")]
	private void UpdateUnlockConditions()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x7A391C", Offset = "0x7A391C", VA = "0x7A391C")]
	private void CheckUnlockConditions()
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x7A39C4", Offset = "0x7A39C4", VA = "0x7A39C4")]
	private void UnlockTreasure()
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x7A3A04", Offset = "0x7A3A04", VA = "0x7A3A04")]
	private void DeactiveUnlockConditions()
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x7A3B04", Offset = "0x7A3B04", VA = "0x7A3B04")]
	private void DeactivateRevealCondition()
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x7A3A64", Offset = "0x7A3A64", VA = "0x7A3A64")]
	private void ActivateRevealCondition()
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0x7A3BC8", Offset = "0x7A3BC8", VA = "0x7A3BC8")]
	private void UpdateRevealCondition()
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0x7A3B90", Offset = "0x7A3B90", VA = "0x7A3B90")]
	private void RevealTreasure()
	{
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0x7A3BE8", Offset = "0x7A3BE8", VA = "0x7A3BE8")]
	private void SetTreasureState(TreasureState state)
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0x7A3BF0", Offset = "0x7A3BF0", VA = "0x7A3BF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0x7A3CA0", Offset = "0x7A3CA0", VA = "0x7A3CA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0x7A3F80", Offset = "0x7A3F80", VA = "0x7A3F80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0x7A4070", Offset = "0x7A4070", VA = "0x7A4070")]
	public TreasureBox()
	{
	}
}
[Token(Token = "0x200011B")]
public class TreasureEventCondition : Condition
{
	[Token(Token = "0x600092A")]
	[Address(RVA = "0x7A4078", Offset = "0x7A4078", VA = "0x7A4078", Slot = "7")]
	public override void Initialize(TreasureBox treasure)
	{
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0x7A412C", Offset = "0x7A412C", VA = "0x7A412C")]
	private void OnTreasureEvent(object obj)
	{
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0x7A4234", Offset = "0x7A4234", VA = "0x7A4234", Slot = "9")]
	public override void Destroy()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0x7A42E0", Offset = "0x7A42E0", VA = "0x7A42E0")]
	public TreasureEventCondition()
	{
	}
}
[Token(Token = "0x200011C")]
public class TreasureEventDispatcher : MonoBehaviour
{
	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_treasureName;

	[Token(Token = "0x600092E")]
	[Address(RVA = "0x7A42E8", Offset = "0x7A42E8", VA = "0x7A42E8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0x7A43AC", Offset = "0x7A43AC", VA = "0x7A43AC")]
	public void Dispatch()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0x7A43E4", Offset = "0x7A43E4", VA = "0x7A43E4")]
	public TreasureEventDispatcher()
	{
	}
}
[Token(Token = "0x200011D")]
public class TurtleStormheartScene : MonoBehaviour
{
	[Token(Token = "0x6000931")]
	[Address(RVA = "0x7A510C", Offset = "0x7A510C", VA = "0x7A510C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x7A51C8", Offset = "0x7A51C8", VA = "0x7A51C8")]
	public TurtleStormheartScene()
	{
	}
}
[Token(Token = "0x200011E")]
public abstract class AlphaFadeController : MonoBehaviour
{
	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve m_alphaCurve;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_animationDuration;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74FC58", Offset = "0x74FC58")]
	public float m_targetAlpha;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_curveStep;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_t;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_doneFading;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool m_fadingIn;

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x84200C", Offset = "0x84200C", VA = "0x84200C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x842024", Offset = "0x842024", VA = "0x842024")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x84205C", Offset = "0x84205C", VA = "0x84205C")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x842064", Offset = "0x842064", VA = "0x842064")]
	public void Update()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x842134", Offset = "0x842134", VA = "0x842134", Slot = "4")]
	protected virtual void SetAlpha(float alpha)
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x842138", Offset = "0x842138", VA = "0x842138")]
	protected AlphaFadeController()
	{
	}
}
[Token(Token = "0x200011F")]
public class AlternativeLocalization : MonoBehaviour
{
	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LunaSelector m_lunaSelector;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Localize m_localize;

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x842148", Offset = "0x842148", VA = "0x842148")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x8421DC", Offset = "0x8421DC", VA = "0x8421DC")]
	public void OnModifyLocalization()
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x84236C", Offset = "0x84236C", VA = "0x84236C")]
	public AlternativeLocalization()
	{
	}
}
[Token(Token = "0x2000120")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748D50", Offset = "0x748D50")]
public class CanvasAlphaFadeController : AlphaFadeController
{
	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CanvasGroup m_canvasGroup;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FC70", Offset = "0x74FC70")]
	public bool m_lockAlpha;

	[Token(Token = "0x600093C")]
	[Address(RVA = "0x84FADC", Offset = "0x84FADC", VA = "0x84FADC", Slot = "4")]
	protected override void SetAlpha(float alpha)
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0x84FB8C", Offset = "0x84FB8C", VA = "0x84FB8C")]
	public void SetLockAlpha(bool lockAlpha)
	{
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0x84FB98", Offset = "0x84FB98", VA = "0x84FB98")]
	public CanvasAlphaFadeController()
	{
	}
}
[Token(Token = "0x2000121")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748DB4", Offset = "0x748DB4")]
public class ImageAlphaFadeController : AlphaFadeController
{
	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image m_image;

	[Token(Token = "0x600093F")]
	[Address(RVA = "0x7D49C4", Offset = "0x7D49C4", VA = "0x7D49C4", Slot = "4")]
	protected override void SetAlpha(float alpha)
	{
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0x7D4A8C", Offset = "0x7D4A8C", VA = "0x7D4A8C")]
	public ImageAlphaFadeController()
	{
	}
}
[Token(Token = "0x2000122")]
public class LocalizationText : MonoBehaviour
{
	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text m_text;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_fontSizeRegular;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_fontSizeSmall;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SystemLanguage[] m_smallTextLanguages;

	[Token(Token = "0x6000941")]
	[Address(RVA = "0x7E13BC", Offset = "0x7E13BC", VA = "0x7E13BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x7E145C", Offset = "0x7E145C", VA = "0x7E145C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0x7E14FC", Offset = "0x7E14FC", VA = "0x7E14FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0x7E1500", Offset = "0x7E1500", VA = "0x7E1500")]
	private void SetTextSize()
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0x7E163C", Offset = "0x7E163C", VA = "0x7E163C")]
	private void OnLanguageChanged(object obj)
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0x7E1640", Offset = "0x7E1640", VA = "0x7E1640")]
	public LocalizationText()
	{
	}
}
[Token(Token = "0x2000123")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748E18", Offset = "0x748E18")]
public class LunaButton : CursorInputMonoBehaviour
{
	[Token(Token = "0x40009EB")]
	private const string BUTTON_SFX = "Seed_Pod_Scribble_Touch";

	[Token(Token = "0x40009EC")]
	private const float PARTICLES_CANVAS_RATIO = 100f;

	[Token(Token = "0x40009ED")]
	private const float MAX_TEXT_SCALE = 1.15f;

	[Token(Token = "0x40009EE")]
	private const float MIN_TEXT_SCALE = 1f;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem m_particles;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text m_text;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private BoxCollider m_collider;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LunaMenuHandler m_handler;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent m_action;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool m_requiresConfirmation;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text m_confirmationText;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FCA8", Offset = "0x74FCA8")]
	public bool m_interactable;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool m_disableForDemo;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	public bool m_disableForPAXDemo;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
	public bool m_hideOnLevelSelect;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74FCE0", Offset = "0x74FCE0")]
	private bool <Selected>k__BackingField;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly Color m_textDefaultColor;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly Color m_textDisabledColor;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float m_currentTextScale;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float m_textScaleStep;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool m_calledAction;

	[Token(Token = "0x170000BE")]
	public bool Selected
	{
		[Token(Token = "0x6000947")]
		[Address(RVA = "0x7E1A7C", Offset = "0x7E1A7C", VA = "0x7E1A7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757248", Offset = "0x757248")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x7E1A84", Offset = "0x7E1A84", VA = "0x7E1A84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757258", Offset = "0x757258")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0x7E1A90", Offset = "0x7E1A90", VA = "0x7E1A90", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0x7E1BDC", Offset = "0x7E1BDC", VA = "0x7E1BDC", Slot = "16")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0x7E1C64", Offset = "0x7E1C64", VA = "0x7E1C64")]
	private void HideIfLevelSelectScene(string sceneName)
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0x7E1D0C", Offset = "0x7E1D0C", VA = "0x7E1D0C")]
	private void OnSceneLoaded(UnityEngine.SceneManagement.Scene newScene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0x7E1D44", Offset = "0x7E1D44", VA = "0x7E1D44")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0x7E1E68", Offset = "0x7E1E68", VA = "0x7E1E68")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0x7E1D50", Offset = "0x7E1D50", VA = "0x7E1D50")]
	public void ToggleInteractable(bool interactable)
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0x7E1FF0", Offset = "0x7E1FF0", VA = "0x7E1FF0")]
	public void CallAction()
	{
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0x7E2134", Offset = "0x7E2134", VA = "0x7E2134")]
	private string GetConfirmationText()
	{
		return null;
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x7E22B4", Offset = "0x7E22B4", VA = "0x7E22B4", Slot = "14")]
	protected override void OnCursorOver(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x7E2400", Offset = "0x7E2400", VA = "0x7E2400", Slot = "15")]
	protected override void OnCursorLeave(int cursorIndex)
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x7E245C", Offset = "0x7E245C", VA = "0x7E245C", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x7E24A4", Offset = "0x7E24A4", VA = "0x7E24A4")]
	public void Update()
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x7E1F38", Offset = "0x7E1F38", VA = "0x7E1F38")]
	private void DeSelect()
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0x7E1F70", Offset = "0x7E1F70", VA = "0x7E1F70")]
	private void SetTextScale(float newScale)
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x7E22F8", Offset = "0x7E22F8", VA = "0x7E22F8")]
	private void ToggleParticles(bool active)
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x7E2660", Offset = "0x7E2660", VA = "0x7E2660")]
	public LunaButton()
	{
	}
}
[Serializable]
[Token(Token = "0x2000124")]
public class SceneUIContext
{
	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_sceneName;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LunaUICanvasTransform m_2DCanvasTransform;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LunaUICanvasTransform m_VRCanvasTransform;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_menuGameObject;

	[Token(Token = "0x600095A")]
	[Address(RVA = "0x8B123C", Offset = "0x8B123C", VA = "0x8B123C")]
	public SceneUIContext()
	{
	}
}
[Token(Token = "0x2000125")]
public delegate void UIContextChanged();
[Token(Token = "0x2000126")]
public class LunaMenuHandler : MonoBehaviour
{
	[Token(Token = "0x4000A04")]
	private const float SUBMENU_TRANSITION_DURATION = 0.5f;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly List<string> NO_MENU_SCENES;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SceneUIContext[] m_menuContextList;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_cameraOffset;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 m_canvasScale;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion m_canvasRotation;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int m_currentUIContext;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Collider m_canvasCollider;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ControlsDisplayAssets m_displayAssets;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ControlsDisplayAssets.ControlsDisplayForLanguage m_assets;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Camera m_currentCamera;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Animator m_currentCameraAnimator;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject m_confirmationPrompt;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text m_confirmationPromptTitle;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Localize m_confirmationPromptLocalize;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private LunaButton m_pendingButton;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool m_waitingOnCursorInitialization;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool m_menuIsActive;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool m_confirmIsActive;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FCF0", Offset = "0x74FCF0")]
	public GameObject m_mainMenu;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject m_startGame;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public LunaButton m_newGame;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public LunaButton m_continueGame;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public LunaButton m_options;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject m_exitGame;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FD28", Offset = "0x74FD28")]
	public RawImage m_controlsDisplay;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FD60", Offset = "0x74FD60")]
	public GameObject m_commonMenu;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FD98", Offset = "0x74FD98")]
	public bool m_healingSequence;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public SceneUIContext[] m_healingContext;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FDD0", Offset = "0x74FDD0")]
	public bool m_onStarPuzzle;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public SceneUIContext m_starPuzzleContext;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Material m_backgroundMaterialInstance;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Material m_confirmationMaterialInstance;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FE08", Offset = "0x74FE08")]
	public float m_fadeOutDuration;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private float m_fadeOutStartTime;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private bool m_pendingToggleMenu;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	private bool m_ignoreMenuRequest;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
	private bool m_goingToIntro;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x123")]
	private bool m_shellOpeningOrClosing;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private bool m_transitioningToHealing;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x125")]
	private bool m_exitingLevel;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FE40", Offset = "0x74FE40")]
	public CanvasGroup m_currentSubMenu;

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private CanvasGroup m_newSubMenu;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject m_exitButton;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float m_transitionStartTime;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private bool m_transitioningSubMenu;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private AlphaFadeController[] m_fadeControllers;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private LunaButton[] m_currentMenuButtons;

	[Token(Token = "0x170000BF")]
	private SceneUIContext CurrentMenuContext
	{
		[Token(Token = "0x6000961")]
		[Address(RVA = "0x7E333C", Offset = "0x7E333C", VA = "0x7E333C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C0")]
	private bool InCutscene
	{
		[Token(Token = "0x6000962")]
		[Address(RVA = "0x7E3388", Offset = "0x7E3388", VA = "0x7E3388")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000C1")]
	private bool MenuRequested
	{
		[Token(Token = "0x6000963")]
		[Address(RVA = "0x7E33F4", Offset = "0x7E33F4", VA = "0x7E33F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000C2")]
	public static bool MenuIsOpen
	{
		[Token(Token = "0x6000964")]
		[Address(RVA = "0x7E35F4", Offset = "0x7E35F4", VA = "0x7E35F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000001")]
	public event UIContextChanged OnMenuTransformChanged
	{
		[Token(Token = "0x600095F")]
		[Address(RVA = "0x7E31EC", Offset = "0x7E31EC", VA = "0x7E31EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757268", Offset = "0x757268")]
		add
		{
		}
		[Token(Token = "0x6000960")]
		[Address(RVA = "0x7E3294", Offset = "0x7E3294", VA = "0x7E3294")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757278", Offset = "0x757278")]
		remove
		{
		}
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0x7E365C", Offset = "0x7E365C", VA = "0x7E365C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0x7E4074", Offset = "0x7E4074", VA = "0x7E4074")]
	public void Update()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0x7E4D64", Offset = "0x7E4D64", VA = "0x7E4D64")]
	private void OnShellStartOpenOrClose(object obj)
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0x7E4DA0", Offset = "0x7E4DA0", VA = "0x7E4DA0")]
	private void OnShellFinishedOpenOrClose(object obj)
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0x7E4DA8", Offset = "0x7E4DA8", VA = "0x7E4DA8")]
	private void OnLanguageChanged(object obj)
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0x7E4E34", Offset = "0x7E4E34", VA = "0x7E4E34")]
	private void OnExitingLevel(object obj)
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x7E4E7C", Offset = "0x7E4E7C", VA = "0x7E4E7C")]
	private void OnTransitionToHealing(object obj)
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0x7E4E88", Offset = "0x7E4E88", VA = "0x7E4E88")]
	private void OnHealingStart(object obj)
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0x7E4EB8", Offset = "0x7E4EB8", VA = "0x7E4EB8")]
	private void OnTeleportCreateMode(object obj)
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0x7E4EBC", Offset = "0x7E4EBC", VA = "0x7E4EBC")]
	private void OnControlsChanged(object obj)
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0x7E4FA8", Offset = "0x7E4FA8", VA = "0x7E4FA8")]
	private void OnSwitchToStars(object obj)
	{
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0x7E4FFC", Offset = "0x7E4FFC", VA = "0x7E4FFC")]
	private void OnSwitchToGround(object obj)
	{
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0x7E5058", Offset = "0x7E5058", VA = "0x7E5058")]
	private void OnSwitchToGroundComplete(object obj)
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0x7E5060", Offset = "0x7E5060", VA = "0x7E5060")]
	private void SwitchOffStartPuzzleFlag()
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0x7E4600", Offset = "0x7E4600", VA = "0x7E4600")]
	private bool CanShowMenu()
	{
		return default(bool);
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0x7E3CC0", Offset = "0x7E3CC0", VA = "0x7E3CC0")]
	private void UpdateLanguageControls(SystemLanguage language)
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0x7E4EC8", Offset = "0x7E4EC8", VA = "0x7E4EC8")]
	public void UpdateControlsImage()
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0x7E3CE8", Offset = "0x7E3CE8", VA = "0x7E3CE8")]
	private void UpdateCurrentCamera()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0x7E51E8", Offset = "0x7E51E8", VA = "0x7E51E8")]
	public void OnSceneLoaded(UnityEngine.SceneManagement.Scene loadedScene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0x7E3D50", Offset = "0x7E3D50", VA = "0x7E3D50")]
	private void UpdateMenuContext(string sceneName)
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0x7E52B0", Offset = "0x7E52B0", VA = "0x7E52B0")]
	public void SwitchMenu()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0x7E4954", Offset = "0x7E4954", VA = "0x7E4954")]
	private void UseHealingTransform()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0x7E53E4", Offset = "0x7E53E4", VA = "0x7E53E4")]
	private void ApplyMenuTransform()
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0x7E4750", Offset = "0x7E4750", VA = "0x7E4750")]
	private void UpdateMenuTransform(LunaUICanvasTransform transformVR, LunaUICanvasTransform transform2D)
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0x7E4C70", Offset = "0x7E4C70", VA = "0x7E4C70")]
	public void ToggleMenu()
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0x7E5624", Offset = "0x7E5624", VA = "0x7E5624")]
	private void FadeOutMenuObjects()
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0x7E4304", Offset = "0x7E4304", VA = "0x7E4304")]
	private void SetMenuActive(bool active, bool useFade = true)
	{
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0x7E21DC", Offset = "0x7E21DC", VA = "0x7E21DC")]
	public void RequestConfirmation(LunaButton newPendingButton, string term)
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0x7E5698", Offset = "0x7E5698", VA = "0x7E5698")]
	public void Confirm()
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0x7E4CD4", Offset = "0x7E4CD4", VA = "0x7E4CD4")]
	public void Cancel()
	{
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0x7E5730", Offset = "0x7E5730", VA = "0x7E5730")]
	public void StartNewGame()
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0x7E5A1C", Offset = "0x7E5A1C", VA = "0x7E5A1C")]
	public void ContinueGame()
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0x7E5B84", Offset = "0x7E5B84", VA = "0x7E5B84")]
	public void BackToLevelSelect()
	{
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0x7E5C1C", Offset = "0x7E5C1C", VA = "0x7E5C1C")]
	public void BackToMainMenu()
	{
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0x7E5D30", Offset = "0x7E5D30", VA = "0x7E5D30")]
	public void ExitGame()
	{
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0x7E4A34", Offset = "0x7E4A34", VA = "0x7E4A34")]
	private void UpdateSubMenuTransition()
	{
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0x7E5D38", Offset = "0x7E5D38", VA = "0x7E5D38")]
	private void EndSubMenuTransition()
	{
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0x7E5E50", Offset = "0x7E5E50", VA = "0x7E5E50")]
	public void TransitionToSubMenu(CanvasGroup newSubMenu)
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0x7E5F30", Offset = "0x7E5F30", VA = "0x7E5F30")]
	private bool IsKineticScene(UnityEngine.SceneManagement.Scene scene)
	{
		return default(bool);
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0x7E5C18", Offset = "0x7E5C18", VA = "0x7E5C18")]
	private void ReturnQuality()
	{
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0x7E5068", Offset = "0x7E5068", VA = "0x7E5068")]
	private ControlsDisplayAssets.ControlsDisplayForLanguage GetAssetsForLanguage(SystemLanguage language)
	{
		return null;
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0x7E50F8", Offset = "0x7E50F8", VA = "0x7E50F8")]
	private Texture GetImageForPlatform(VRTargetUtil.VRTarget platform, ControlsDisplayAssets.ControlsDisplayForLanguage assets)
	{
		return null;
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0x7E5F9C", Offset = "0x7E5F9C", VA = "0x7E5F9C")]
	public LunaMenuHandler()
	{
	}
}
[Token(Token = "0x2000127")]
public class LunaSelector : MonoBehaviour
{
	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text m_selectorText;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Localize m_selectorLocalize;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RawImage m_arabicText;

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool m_cycling;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Action<MonoBehaviour, object> OnValuedChanged;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<string> m_values;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_currentValue;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int m_currentValueSelected;

	[Token(Token = "0x170000C3")]
	public string SelectedValue
	{
		[Token(Token = "0x6000990")]
		[Address(RVA = "0x806DA4", Offset = "0x806DA4", VA = "0x806DA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0x806E28", Offset = "0x806E28", VA = "0x806E28")]
	private void ValueChangedCallback(string value)
	{
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0x802EE8", Offset = "0x802EE8", VA = "0x802EE8")]
	public void SetValues(List<string> values)
	{
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0x806EA0", Offset = "0x806EA0", VA = "0x806EA0")]
	private void PickOption(int index)
	{
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0x806FBC", Offset = "0x806FBC", VA = "0x806FBC")]
	public void NextOption()
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0x807044", Offset = "0x807044", VA = "0x807044")]
	public void PreviousOption()
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0x802AD8", Offset = "0x802AD8", VA = "0x802AD8")]
	public void SetValue(object value)
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0x8070BC", Offset = "0x8070BC", VA = "0x8070BC")]
	public LunaSelector()
	{
	}
}
[Token(Token = "0x2000128")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748E7C", Offset = "0x748E7C")]
public class LunaSlider : LunaUIWidget
{
	[Token(Token = "0x4000A3D")]
	private const int NO_CURSOR_INDEX = -1;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly Vector3 kVectorRight;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LunaMenuHandler m_menuHandler;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public CanvasGroup m_canvasGroup;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public RectTransform m_knob;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public BoxCollider m_collider;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text m_sliderValueText;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEvent m_sliderMovedEvent;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public ParticleSystem m_lineParticles;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float m_lineParticlesSize;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public ParticleSystem m_knobParticles;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float m_knobParticlesSize;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private ParticleSystem.MainModule m_lineParticlesModule;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private ParticleSystem.MainModule m_knobParticlesModule;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int m_grabbingCursorIndex;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float m_halfSliderLength;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float m_positionOnSlider;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float m_canvasScale;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float m_inverseCanvasScale;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private int m_previousPercent;

	[Token(Token = "0x170000C4")]
	private Vector3 SliderAxis
	{
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x8070CC", Offset = "0x8070CC", VA = "0x8070CC")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000C5")]
	private Vector3 SliderPlaneNormal
	{
		[Token(Token = "0x6000999")]
		[Address(RVA = "0x8070F0", Offset = "0x8070F0", VA = "0x8070F0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000C6")]
	private Vector3 ColliderCenter
	{
		[Token(Token = "0x600099A")]
		[Address(RVA = "0x807114", Offset = "0x807114", VA = "0x807114")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0x807168", Offset = "0x807168", VA = "0x807168", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0x807468", Offset = "0x807468", VA = "0x807468", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0x80762C", Offset = "0x80762C", VA = "0x80762C", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0x807658", Offset = "0x807658", VA = "0x807658")]
	public void ToggleSliderParticles(bool toggleOn)
	{
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0x807710", Offset = "0x807710", VA = "0x807710")]
	public void Update()
	{
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0x8073B4", Offset = "0x8073B4", VA = "0x8073B4")]
	private void UpdateContext()
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0x8074A8", Offset = "0x8074A8", VA = "0x8074A8")]
	private void SnapSliderToCursor()
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x807280", Offset = "0x807280", VA = "0x807280")]
	private void SetSliderValue(float sliderValue)
	{
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x8078AC", Offset = "0x8078AC", VA = "0x8078AC")]
	private void SetSliderValue(int sliderValue)
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0x807770", Offset = "0x807770", VA = "0x807770")]
	private void SetKnobPosition(float positionOnSlider)
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0x8078C0", Offset = "0x8078C0", VA = "0x8078C0", Slot = "36")]
	public override void SetValue(object value)
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0x807964", Offset = "0x807964", VA = "0x807964")]
	public LunaSlider()
	{
	}
}
[Token(Token = "0x2000129")]
public class LunaToggle : LunaUIWidget
{
	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public Collider m_collider;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Animator m_buttonAnimator;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text m_onText;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text m_offText;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text m_title;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public RawImage m_button;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public RawImage m_buttonBackground;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_toggledOn;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Color m_enabledColor;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Color m_disabledColor;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool m_disabled;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
	private bool m_listenerAdded;

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0x807A48", Offset = "0x807A48", VA = "0x807A48", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x807B24", Offset = "0x807B24", VA = "0x807B24")]
	private void Toggle()
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x807C60", Offset = "0x807C60", VA = "0x807C60")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x807B34", Offset = "0x807B34", VA = "0x807B34")]
	private void SetToggle(bool toggle)
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x807D4C", Offset = "0x807D4C", VA = "0x807D4C")]
	public void SetDisabled()
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x807EE4", Offset = "0x807EE4", VA = "0x807EE4", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x808000", Offset = "0x808000", VA = "0x808000", Slot = "36")]
	public override void SetValue(object value)
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x807CC0", Offset = "0x807CC0", VA = "0x807CC0")]
	private void UpdateToggleText()
	{
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x80808C", Offset = "0x80808C", VA = "0x80808C")]
	private void OnLanguageChanged(object obj)
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x808090", Offset = "0x808090", VA = "0x808090")]
	public LunaToggle()
	{
	}
}
[Token(Token = "0x200012A")]
public abstract class LunaUIWidget : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action<MonoBehaviour, object> OnValuedChanged;

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0x807830", Offset = "0x807830", VA = "0x807830")]
	protected void ValueChangedCallback(MonoBehaviour widget, object value)
	{
	}

	[Token(Token = "0x60009B2")]
	public abstract void SetValue(object value);

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0x8079E0", Offset = "0x8079E0", VA = "0x8079E0")]
	protected LunaUIWidget()
	{
	}
}
[Token(Token = "0x200012B")]
[ExecuteInEditMode]
public class MatchCanvasSorting : MonoBehaviour
{
	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Canvas m_targetCanvas;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer m_renderer;

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0x808834", Offset = "0x808834", VA = "0x808834")]
	public void Start()
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0x808910", Offset = "0x808910", VA = "0x808910")]
	private void UpdateReferences()
	{
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0x808838", Offset = "0x808838", VA = "0x808838")]
	private void MatchSortingValues()
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0x8089A0", Offset = "0x8089A0", VA = "0x8089A0")]
	public void Update()
	{
	}

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0x8089D8", Offset = "0x8089D8", VA = "0x8089D8")]
	public MatchCanvasSorting()
	{
	}
}
[Token(Token = "0x200012C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748EF0", Offset = "0x748EF0")]
public class RawImageAlphaFadeController : AlphaFadeController
{
	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RawImage m_image;

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0x939BA8", Offset = "0x939BA8", VA = "0x939BA8", Slot = "4")]
	protected override void SetAlpha(float alpha)
	{
	}

	[Token(Token = "0x60009BA")]
	[Address(RVA = "0x939C70", Offset = "0x939C70", VA = "0x939C70")]
	public RawImageAlphaFadeController()
	{
	}
}
[Token(Token = "0x200012D")]
public class TestText : MonoBehaviour
{
	[Token(Token = "0x200047A")]
	private enum TestCommand
	{
		[Token(Token = "0x4001FB0")]
		Increment,
		[Token(Token = "0x4001FB1")]
		Decrement
	}

	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_testGroups;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text m_currentLanguage;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_currentGroupIdx;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int m_currentLanguageIdx;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string[] kLanguages;

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0x7A0650", Offset = "0x7A0650", VA = "0x7A0650")]
	private void Start()
	{
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0x7A0818", Offset = "0x7A0818", VA = "0x7A0818")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0x7A08D0", Offset = "0x7A08D0", VA = "0x7A08D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0x7A08D4", Offset = "0x7A08D4", VA = "0x7A08D4")]
	private void HandleInput()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0x7A09AC", Offset = "0x7A09AC", VA = "0x7A09AC")]
	private int ProcessTestGroupIndex(TestCommand command)
	{
		return default(int);
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x7A0770", Offset = "0x7A0770", VA = "0x7A0770")]
	private void UpdateTestGroup(int newGroup)
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0x7A0A14", Offset = "0x7A0A14", VA = "0x7A0A14")]
	private int ProcessLanguageIndex(TestCommand command)
	{
		return default(int);
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0x7A0B14", Offset = "0x7A0B14", VA = "0x7A0B14")]
	private void UpdateLanguage(int newLanguage)
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0x7A0D5C", Offset = "0x7A0D5C", VA = "0x7A0D5C")]
	public TestText()
	{
	}
}
[Token(Token = "0x200012E")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748F54", Offset = "0x748F54")]
public class TextAlphaFadeController : AlphaFadeController
{
	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text m_text;

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0x7A1D60", Offset = "0x7A1D60", VA = "0x7A1D60", Slot = "4")]
	protected override void SetAlpha(float alpha)
	{
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0x7A1E28", Offset = "0x7A1E28", VA = "0x7A1E28")]
	public TextAlphaFadeController()
	{
	}
}
[Token(Token = "0x200012F")]
public class TutorialText : MonoBehaviour
{
	[Token(Token = "0x4000A67")]
	private const float TOGGLE_SPEED = 1f;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FEB8", Offset = "0x74FEB8")]
	public float m_timeToAppear;

	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CanvasGroup m_canvasGroup;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FEF0", Offset = "0x74FEF0")]
	public EventBarn.EventType m_tutorialCompleteEvent;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_timeElapsed;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_active;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool m_tutorialCompleted;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_toggleMeter;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_listenersAdded;

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0x7A51D0", Offset = "0x7A51D0", VA = "0x7A51D0")]
	public void Awake()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0x7A51F0", Offset = "0x7A51F0", VA = "0x7A51F0")]
	public void Start()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0x7A52F0", Offset = "0x7A52F0", VA = "0x7A52F0")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0x7A51F4", Offset = "0x7A51F4", VA = "0x7A51F4")]
	private void AddListeners()
	{
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0x7A5300", Offset = "0x7A5300", VA = "0x7A5300")]
	private void RemoveListeners()
	{
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0x7A540C", Offset = "0x7A540C", VA = "0x7A540C")]
	private void TutorialCompleted(object obj)
	{
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0x7A5454", Offset = "0x7A5454", VA = "0x7A5454")]
	public void Update()
	{
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0x7A5508", Offset = "0x7A5508", VA = "0x7A5508")]
	private void UpdateToggle()
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0x7A5428", Offset = "0x7A5428", VA = "0x7A5428")]
	private void ToggleActive(bool active)
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0x7A55F8", Offset = "0x7A55F8", VA = "0x7A55F8")]
	public TutorialText()
	{
	}
}
[Token(Token = "0x2000130")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x748FB8", Offset = "0x748FB8")]
public class UIIcon : MonoBehaviour
{
	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite m_default;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite m_ps4;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite m_ps4Swapped;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Image m_image;

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0x7A58F0", Offset = "0x7A58F0", VA = "0x7A58F0")]
	public void Awake()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x7A5958", Offset = "0x7A5958", VA = "0x7A5958")]
	public UIIcon()
	{
	}
}
[Token(Token = "0x2000131")]
public class VicinitySprinkles : MonoBehaviour
{
	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_sprinkle;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_sprinkleCount;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_numSprinklesInBarn;

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x832B88", Offset = "0x832B88", VA = "0x832B88")]
	private void PopulateSprinkes()
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x832C74", Offset = "0x832C74", VA = "0x832C74")]
	private void Start()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x832C78", Offset = "0x832C78", VA = "0x832C78")]
	private void Update()
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x832C7C", Offset = "0x832C7C", VA = "0x832C7C")]
	public void DropSprinkle(Vector3 pos)
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x832C80", Offset = "0x832C80", VA = "0x832C80")]
	public VicinitySprinkles()
	{
	}
}
[Token(Token = "0x2000132")]
public class VRConfirm : MonoBehaviour
{
	[Token(Token = "0x200047B")]
	public enum MoveButton
	{
		[Token(Token = "0x4001FB3")]
		Select = 1,
		[Token(Token = "0x4001FB4")]
		Trigger = 2,
		[Token(Token = "0x4001FB5")]
		Move = 4,
		[Token(Token = "0x4001FB6")]
		Start = 8,
		[Token(Token = "0x4001FB7")]
		Triangle = 0x10,
		[Token(Token = "0x4001FB8")]
		Circle = 0x20,
		[Token(Token = "0x4001FB9")]
		Cross = 0x40,
		[Token(Token = "0x4001FBA")]
		Square = 0x80
	}

	[Token(Token = "0x200047C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AEA0", Offset = "0x74AEA0")]
	private sealed class <FadeCanvas>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRConfirm <>4__this;

		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float fadeTo;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action onFadeComplete;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <startTime>5__2;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <endTime>5__3;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <start>5__4;

		[Token(Token = "0x17000382")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600231B")]
			[Address(RVA = "0x7A7BD0", Offset = "0x7A7BD0", VA = "0x7A7BD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000383")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600231D")]
			[Address(RVA = "0x7A7C3C", Offset = "0x7A7C3C", VA = "0x7A7C3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002318")]
		[Address(RVA = "0x7A7A18", Offset = "0x7A7A18", VA = "0x7A7A18")]
		[DebuggerHidden]
		public <FadeCanvas>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6002319")]
		[Address(RVA = "0x7A7A5C", Offset = "0x7A7A5C", VA = "0x7A7A5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600231A")]
		[Address(RVA = "0x7A7A60", Offset = "0x7A7A60", VA = "0x7A7A60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600231C")]
		[Address(RVA = "0x7A7BD8", Offset = "0x7A7BD8", VA = "0x7A7BD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RawImage m_confirmButton;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RawImage m_cancelButton;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CanvasGroup m_canvasGroup;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool m_vrMode;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_allowInput;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool m_vrSetupCalled;

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool m_movesDetected;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	private bool m_errorMessage;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool m_switchedTo2DComplete;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool m_goingToVR;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	private bool m_goingTo2D;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	private bool m_request2D;

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_swapButtons;

	[Token(Token = "0x170000C7")]
	public static bool VRMode
	{
		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x7A754C", Offset = "0x7A754C", VA = "0x7A754C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x7A7604", Offset = "0x7A7604", VA = "0x7A7604")]
		protected set
		{
		}
	}

	[Token(Token = "0x170000C8")]
	private KeyCode ConfirmButton
	{
		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x7A765C", Offset = "0x7A765C", VA = "0x7A765C")]
		get
		{
			return default(KeyCode);
		}
	}

	[Token(Token = "0x170000C9")]
	private KeyCode CancelButton
	{
		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x7A7670", Offset = "0x7A7670", VA = "0x7A7670")]
		get
		{
			return default(KeyCode);
		}
	}

	[Token(Token = "0x170000CA")]
	private MoveButton MoveConfirmButton
	{
		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x7A7684", Offset = "0x7A7684", VA = "0x7A7684")]
		get
		{
			return default(MoveButton);
		}
	}

	[Token(Token = "0x170000CB")]
	private MoveButton MoveCancelButton
	{
		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x7A769C", Offset = "0x7A769C", VA = "0x7A769C")]
		get
		{
			return default(MoveButton);
		}
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0x7A76B4", Offset = "0x7A76B4", VA = "0x7A76B4")]
	private void SwapButtons()
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0x7A770C", Offset = "0x7A770C", VA = "0x7A770C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0x7A77A0", Offset = "0x7A77A0", VA = "0x7A77A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0x7A77A4", Offset = "0x7A77A4", VA = "0x7A77A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x7A77FC", Offset = "0x7A77FC", VA = "0x7A77FC")]
	private void UpdateInput()
	{
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0x7A7710", Offset = "0x7A7710", VA = "0x7A7710")]
	private void NextScene()
	{
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0x7A78EC", Offset = "0x7A78EC", VA = "0x7A78EC")]
	private void SetupVR()
	{
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0x7A78F0", Offset = "0x7A78F0", VA = "0x7A78F0")]
	private void FadeIn()
	{
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0x7A7860", Offset = "0x7A7860", VA = "0x7A7860")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0x7A797C", Offset = "0x7A797C", VA = "0x7A797C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x757288", Offset = "0x757288")]
	private IEnumerator FadeCanvas(float fadeTo, float duration, Action onFadeComplete)
	{
		return null;
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0x7A7A44", Offset = "0x7A7A44", VA = "0x7A7A44")]
	public VRConfirm()
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0x7A7A4C", Offset = "0x7A7A4C", VA = "0x7A7A4C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7572EC", Offset = "0x7572EC")]
	private void <FadeIn>b__32_0()
	{
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0x7A7A58", Offset = "0x7A7A58", VA = "0x7A7A58")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7572FC", Offset = "0x7572FC")]
	private void <FadeOut>b__33_0()
	{
	}
}
[Token(Token = "0x2000133")]
public class VelocityBank
{
	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3[] m_VelocityVectors;

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0x832070", Offset = "0x832070", VA = "0x832070")]
	public VelocityBank(int numVelocities)
	{
	}

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0x832174", Offset = "0x832174", VA = "0x832174")]
	public Vector3 GetAverageVelocity(Vector3 velocity)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000134")]
public class DistanceBank
{
	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float[] m_distances;

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0x7F270C", Offset = "0x7F270C", VA = "0x7F270C")]
	public DistanceBank(int numDistances)
	{
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x7F27D0", Offset = "0x7F27D0", VA = "0x7F27D0")]
	public float GetAverageDistance(float distance)
	{
		return default(float);
	}
}
[Token(Token = "0x2000135")]
public class VRHandController : MonoBehaviour
{
	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRHandController[] _instances;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_handMeshPrefab;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRInput.ControllerIndex m_controllerIndex;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material m_handMaterial;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve m_opacityDistanceCurve;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve m_emissiveDistanceCurve;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator m_handAnimator;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_cupID;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int m_pointID;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int m_grabID;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int m_pinchID;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_defaultID;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool m_hit;

	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int m_cursorLayer;

	[Token(Token = "0x4000A94")]
	private const int kVelocitySamples = 10;

	[Token(Token = "0x4000A95")]
	private const int kDistanceSamples = 10;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 m_lastPosition;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_emissiveStrengthOnStart;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_opacityOnStart;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_forceEmissive;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_forcedEmissiveStrength;

	[Token(Token = "0x4000A9B")]
	private const float kMaxBeaconDistanceVal = 10000f;

	[Token(Token = "0x4000A9C")]
	private const string kMatOpacityProperty = "_Opactity";

	[Token(Token = "0x4000A9D")]
	private const string kMatEmissiveProperty = "_EmissiveStrength";

	[Token(Token = "0x4000A9E")]
	private const string kMatVelocityProperty = "_Velocity";

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int m_matOpacityPropertyId;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int m_matEmissivePropertyId;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int m_matVelocityPropertyId;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Quaternion m_handMeshRotation;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private VelocityBank m_velocityBank;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private DistanceBank m_distanceBankAttract;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private DistanceBank m_distanceBankRepel;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private VRHandBeacon[] m_VrHandBeacons;

	[Token(Token = "0x170000CC")]
	public static VRHandController[] Instances
	{
		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x7A7D10", Offset = "0x7A7D10", VA = "0x7A7D10")]
		get
		{
			return null;
		}
		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x7A7D60", Offset = "0x7A7D60", VA = "0x7A7D60")]
		private set
		{
		}
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x7A7DB4", Offset = "0x7A7DB4", VA = "0x7A7DB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x7A81B0", Offset = "0x7A81B0", VA = "0x7A81B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0x7A82A4", Offset = "0x7A82A4", VA = "0x7A82A4")]
	private void CacheHandBeacons(object obj)
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0x7A8318", Offset = "0x7A8318", VA = "0x7A8318")]
	public void SetForcedEmissiveStrength(float forcedValue)
	{
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0x7A83A4", Offset = "0x7A83A4", VA = "0x7A83A4")]
	public void StopForcingEmissive()
	{
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0x7A83B4", Offset = "0x7A83B4", VA = "0x7A83B4")]
	private void ResetMaterialProperties()
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0x7A8474", Offset = "0x7A8474", VA = "0x7A8474")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0x7A8478", Offset = "0x7A8478", VA = "0x7A8478")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0x7A866C", Offset = "0x7A866C", VA = "0x7A866C")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0x7A86C0", Offset = "0x7A86C0", VA = "0x7A86C0")]
	private void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0x7A8710", Offset = "0x7A8710", VA = "0x7A8710")]
	private void OnHideHands(object obj)
	{
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0x7A87B4", Offset = "0x7A87B4", VA = "0x7A87B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0x7A93B4", Offset = "0x7A93B4", VA = "0x7A93B4")]
	public VRHandController()
	{
	}
}
[Token(Token = "0x2000136")]
public class WaterSoundController : MonoBehaviour
{
	[Token(Token = "0x60009FE")]
	[Address(RVA = "0x833610", Offset = "0x833610", VA = "0x833610")]
	private void Start()
	{
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0x8336F0", Offset = "0x8336F0", VA = "0x8336F0")]
	public void SetWaterDragSpeed(float speed)
	{
	}

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0x833788", Offset = "0x833788", VA = "0x833788")]
	public void WaterImpact(Vector3 contactPoint)
	{
	}

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0x8338AC", Offset = "0x8338AC", VA = "0x8338AC")]
	public WaterSoundController()
	{
	}
}
[Token(Token = "0x2000137")]
public class WorldCursor : MonoBehaviour
{
	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRInput.CursorIndex m_cursorIndex;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 m_vel;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_position;

	[Token(Token = "0x170000CD")]
	public Vector3 Position
	{
		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x8338B4", Offset = "0x8338B4", VA = "0x8338B4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000CE")]
	public Vector3 Velocity
	{
		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x8338C0", Offset = "0x8338C0", VA = "0x8338C0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0x8338CC", Offset = "0x8338CC", VA = "0x8338CC")]
	public Vector3 InverseTransformDirection(Vector3 dir)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0x833918", Offset = "0x833918", VA = "0x833918")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0x8339E8", Offset = "0x8339E8", VA = "0x8339E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0x833AEC", Offset = "0x833AEC", VA = "0x833AEC")]
	public WorldCursor()
	{
	}
}
[Token(Token = "0x2000138")]
internal class XboxLiveAchievementSystem : AchievementSystem
{
	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Queue<string> m_achievementQueue;

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0x834858", Offset = "0x834858", VA = "0x834858")]
	private string GetXboxLiveId(AchievementsManager.ID id)
	{
		return null;
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0x8348C4", Offset = "0x8348C4", VA = "0x8348C4")]
	private void QueueAchievement(string achievementId)
	{
	}

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0x83494C", Offset = "0x83494C", VA = "0x83494C", Slot = "5")]
	public override void UnlockQueuedAchievements()
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0x834A6C", Offset = "0x834A6C", VA = "0x834A6C", Slot = "4")]
	public override void UnlockAchievement(AchievementsManager.ID id, bool queue = false)
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0x8349C8", Offset = "0x8349C8", VA = "0x8349C8")]
	private void UnlockAchievement(string id)
	{
	}

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0x834AA8", Offset = "0x834AA8", VA = "0x834AA8")]
	public XboxLiveAchievementSystem()
	{
	}
}
[Token(Token = "0x2000139")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x74901C", Offset = "0x74901C")]
public class ZoneBarn : MonoBehaviour
{
	[Token(Token = "0x200047D")]
	public struct ZoneAndPctComplete
	{
		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_zone;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_thresholdCompletionPercent;
	}

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x74FF28", Offset = "0x74FF28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74FF28", Offset = "0x74FF28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FF28", Offset = "0x74FF28")]
	public float m_OnGrow;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74FFA4", Offset = "0x74FFA4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FFA4", Offset = "0x74FFA4")]
	public float m_OnInteract;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74FFFC", Offset = "0x74FFFC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74FFFC", Offset = "0x74FFFC")]
	public float m_OnPlay;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ZoneVOManager m_zoneVOManager;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	[SerializeField]
	private int m_numZonesActivated;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75008C", Offset = "0x75008C")]
	public int m_activeZoneThreshold;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7500C4", Offset = "0x7500C4")]
	[ReadOnly]
	[SerializeField]
	private float m_totalCompletionPercent;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x750120", Offset = "0x750120")]
	[ReadOnly]
	[SerializeField]
	private float m_thresholdCompletionPercent;

	[Token(Token = "0x4000AB3")]
	private const string kCreateZoneProgressAudioEvent = "Create_Zone_Progress";

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string[] m_createZoneProgressSounds;

	[Token(Token = "0x4000AB5")]
	private const int kCreateZoneProgressCheckMultiplier = 25;

	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_createZoneProgressSoundIterator;

	[Token(Token = "0x4000AB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<Growable>[] m_growablesByZone;

	[Token(Token = "0x4000AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Growable>[] m_sadGrowablesByZone;

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Dictionary<GrowableType, int> m_growablesByType;

	[Token(Token = "0x4000ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_normalZoneListenersAdded;

	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool m_sadStateZoneListenersAdded;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x75017C", Offset = "0x75017C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75017C", Offset = "0x75017C")]
	public bool m_checkZonePainting;

	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent m_OnActiveZoneThreshold;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ZoneControl[] m_ZoneControls;

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0x834D08", Offset = "0x834D08", VA = "0x834D08")]
	public List<Growable> GetGrowablesByZone(int zone)
	{
		return null;
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0x834D5C", Offset = "0x834D5C", VA = "0x834D5C")]
	public void AddGrowableToZone(Growable growable, int zone)
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0x834E10", Offset = "0x834E10", VA = "0x834E10")]
	public void AddSadGrowableToZone(Growable growable, int zone)
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0x834ED4", Offset = "0x834ED4", VA = "0x834ED4")]
	private bool RemoveSadGrowableFromZone(Growable growable, int zone)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0x834FC4", Offset = "0x834FC4", VA = "0x834FC4")]
	public ZoneControl[] GetZoneControls()
	{
		return null;
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0x834FCC", Offset = "0x834FCC", VA = "0x834FCC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0x835068", Offset = "0x835068", VA = "0x835068")]
	public void SwitchToEditModeGameplay()
	{
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0x83538C", Offset = "0x83538C", VA = "0x83538C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0x835898", Offset = "0x835898", VA = "0x835898")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0x835920", Offset = "0x835920", VA = "0x835920")]
	public void SetZoneSadStates()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0x835924", Offset = "0x835924", VA = "0x835924")]
	public void SetZoneStates(LookState state)
	{
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0x8359A8", Offset = "0x8359A8", VA = "0x8359A8")]
	public void ForceZonesActive()
	{
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0x835AA4", Offset = "0x835AA4", VA = "0x835AA4")]
	private void SetCreateZoneProgressAudioState(string state)
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0x83589C", Offset = "0x83589C", VA = "0x83589C")]
	private void CheckCreateZoneProgressAudioState()
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0x8351B4", Offset = "0x8351B4", VA = "0x8351B4")]
	private void RemoveNormalZoneListeners()
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0x835B18", Offset = "0x835B18", VA = "0x835B18")]
	private void RemoveSadZoneListeners()
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0x835BC8", Offset = "0x835BC8", VA = "0x835BC8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0x835BEC", Offset = "0x835BEC", VA = "0x835BEC")]
	private void RemoveSadGrowable(object obj)
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0x835D28", Offset = "0x835D28", VA = "0x835D28")]
	private void IncrementTotalZonesActivated(int activatingZone)
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0x835EEC", Offset = "0x835EEC", VA = "0x835EEC")]
	public void ForceActivateZones()
	{
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0x835FB8", Offset = "0x835FB8", VA = "0x835FB8")]
	private void SetProgress(Growable growable, float value)
	{
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0x83609C", Offset = "0x83609C", VA = "0x83609C")]
	private bool VerifyZoneExistence(Growable growable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0x83617C", Offset = "0x83617C", VA = "0x83617C")]
	private void CalculateProgress(object obj)
	{
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0x83631C", Offset = "0x83631C", VA = "0x83631C")]
	private void AddToGrowablesByZone(object obj)
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0x836424", Offset = "0x836424", VA = "0x836424")]
	private void CheckPlantingActions(Growable growable)
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0x836600", Offset = "0x836600", VA = "0x836600")]
	private void DecrementGrowables(Growable growable)
	{
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0x8364EC", Offset = "0x8364EC", VA = "0x8364EC")]
	private void UnlockPlantingAchievement(GrowableType growableType)
	{
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0x8366E8", Offset = "0x8366E8", VA = "0x8366E8")]
	private void RemoveFromGrowablesByZone(object obj)
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0x8367EC", Offset = "0x8367EC", VA = "0x8367EC")]
	public ZoneBarn()
	{
	}
}
[Token(Token = "0x200013A")]
public class ZoneConductor : MonoBehaviour
{
	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_energySwitchParam;

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_completeSoundEvent;

	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_energyFadeRate;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_energyAddAmount;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float kSpeedMinThreshold;

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float kSpeedMaxThreshold;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float kSpeedMinThresholdSq;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float kSpeedMaxThresholdSq;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_zoneCompleteThreshold;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly HashSet<int> m_activeZones;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_energy;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_activeZone;

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0x1337F50", Offset = "0x1337F50", VA = "0x1337F50")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0x1337F64", Offset = "0x1337F64", VA = "0x1337F64")]
	public static bool IsZoneActive(int zone)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0x1337FE8", Offset = "0x1337FE8", VA = "0x1337FE8")]
	public void SetEnergy(float energy)
	{
	}

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0x133806C", Offset = "0x133806C", VA = "0x133806C")]
	private void OnPlayObject(object obj)
	{
	}

	[Token(Token = "0x6000A2F")]
	[Address(RVA = "0x13381E4", Offset = "0x13381E4", VA = "0x13381E4")]
	private void OnActivateZone(object obj)
	{
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0x1338318", Offset = "0x1338318", VA = "0x1338318")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A31")]
	[Address(RVA = "0x1338468", Offset = "0x1338468", VA = "0x1338468")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0x1338554", Offset = "0x1338554", VA = "0x1338554")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0x133867C", Offset = "0x133867C", VA = "0x133867C")]
	public ZoneConductor()
	{
	}
}
[Token(Token = "0x200013B")]
public enum LookState
{
	[Token(Token = "0x4000ACC")]
	Neutral,
	[Token(Token = "0x4000ACD")]
	Sad
}
[Token(Token = "0x200013C")]
public class ZoneControl : MonoBehaviour
{
	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public Color m_zoneColor;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	public float m_zoneProgress;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string m_completeSoundEvent;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[ReadOnly]
	public LookState m_zoneState;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ActivateChildrenByProximity m_activateChildrenByProximity;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ZoneSoundtrack m_zoneSoundtrack;

	[Token(Token = "0x4000AD4")]
	private const float kZoneProgressCompleteValue = 100f;

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0x133870C", Offset = "0x133870C", VA = "0x133870C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0x1338764", Offset = "0x1338764", VA = "0x1338764")]
	public LookState GetZoneState()
	{
		return default(LookState);
	}

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0x133876C", Offset = "0x133876C", VA = "0x133876C")]
	public void SetZoneState(LookState state)
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0x1338798", Offset = "0x1338798", VA = "0x1338798")]
	public void ForceActivateZone()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0x133882C", Offset = "0x133882C", VA = "0x133882C")]
	public void SetZoneSoundtrack(ZoneSoundtrack zoneSoundtrack)
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0x1338834", Offset = "0x1338834", VA = "0x1338834")]
	public void RemoveSadState()
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0x13388CC", Offset = "0x13388CC", VA = "0x13388CC")]
	public bool SetProgress(float progress, Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0x1338AAC", Offset = "0x1338AAC", VA = "0x1338AAC")]
	public ZoneControl()
	{
	}
}
[Token(Token = "0x200013D")]
public static class ZoneData
{
	[NonSerialized]
	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	public static readonly Color[] m_colorPalette;
}
[Token(Token = "0x200013E")]
public class ZoneEnergy : MonoBehaviour
{
	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_ParticleEndValue_U;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int m_emitCountPerGrowable;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x75021C", Offset = "0x75021C")]
	public float m_mistSwirlMagnitude;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform m_terrariumRotator;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material[] materials;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture2D m_coordinateTexture;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject m_meshToBakeToTexture;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int m_resolution;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MeshCollider m_collider;

	[Token(Token = "0x4000ADF")]
	private const string kMistLayerName = "Mist";

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ParticleSystem[] m_particleSystemsPreSwirl;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ZoneBarn m_zoneBarn;

	[Token(Token = "0x4000AE2")]
	private const string kDirectionV_Property = "_Direction_V";

	[Token(Token = "0x4000AE3")]
	private const string kParticleEndValueU_Property = "_ParticleEndValue_U";

	[Token(Token = "0x4000AE4")]
	private const string kTerrariumRotationProperty = "_Rotation";

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string[] m_particleDistanceProperties;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int[] m_particleDistancePropertieIds;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_DirectionV_Property_ID;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int m_ParticleEndValueU_ID;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int m_TerrariumRotationProperty_ID;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool m_swirlComplete;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	private bool m_listenersAdded;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private SetPositionEventTrigger m_setPositionEventTrigger;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 kVector3Zero;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Quaternion m_PreviousRotation;

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0x1338EEC", Offset = "0x1338EEC", VA = "0x1338EEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0x1339220", Offset = "0x1339220", VA = "0x1339220")]
	private void RemoveListeners()
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0x1339368", Offset = "0x1339368", VA = "0x1339368")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0x133936C", Offset = "0x133936C", VA = "0x133936C")]
	public void DisableMistSystem()
	{
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0x1339398", Offset = "0x1339398", VA = "0x1339398")]
	private void OnTeleportedPlayer(object args)
	{
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0x133941C", Offset = "0x133941C", VA = "0x133941C")]
	public void SetSwirlComplete()
	{
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0x133945C", Offset = "0x133945C", VA = "0x133945C")]
	public void Emit(Growable growable, int count)
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0x1339570", Offset = "0x1339570", VA = "0x1339570")]
	private void EmitOnZoneIncrease(object obj)
	{
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0x1339878", Offset = "0x1339878", VA = "0x1339878")]
	private void RaycastToMesh(object obj)
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0x1339A38", Offset = "0x1339A38", VA = "0x1339A38")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0x1339CC8", Offset = "0x1339CC8", VA = "0x1339CC8")]
	public ZoneEnergy()
	{
	}
}
[Token(Token = "0x200013F")]
public class ZoneProgressVfxControl : MonoBehaviour
{
	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x750234", Offset = "0x750234")]
	public Light m_sunLight;

	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x75026C", Offset = "0x75026C")]
	public Gradient m_keyLightGradient;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Gradient m_ambientEquatorGradient;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Gradient m_ambientGroundGradient;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Gradient m_ambientSkyGradient;

	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7502A4", Offset = "0x7502A4")]
	public ParticlePropertyDriver[] m_particlePropertyDrivers;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7502DC", Offset = "0x7502DC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7502DC", Offset = "0x7502DC")]
	public AnimationCurve m_sunlightIntensityProgressCurve;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75033C", Offset = "0x75033C")]
	public AnimationCurve m_particleEmissionProgressCurve;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x750374", Offset = "0x750374")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750374", Offset = "0x750374")]
	public AnimationCurve m_sunlightIntensityTransitionCurve;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SceneLighting m_sceneLighting;

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_sunLightIntensity;

	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7503D4", Offset = "0x7503D4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7503D4", Offset = "0x7503D4")]
	public float m_transitionTime;

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_lerpTime;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_normalizedPercentComplete;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_normalizedPercentCompleteStart;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_normalizedPercentCompleteTarget;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_isLerping;

	[Token(Token = "0x4000B00")]
	private const float kProgressCompletionNormalizationMultipler = 0.01f;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_forceUpdateIncrement;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_forceUpdateValue;

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0x133AADC", Offset = "0x133AADC", VA = "0x133AADC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A4B")]
	[Address(RVA = "0x133ABE0", Offset = "0x133ABE0", VA = "0x133ABE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0x133AF40", Offset = "0x133AF40", VA = "0x133AF40")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0x133AC8C", Offset = "0x133AC8C", VA = "0x133AC8C")]
	private void UpdateVfx(float normalizedLerpTime = 0f)
	{
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0x133AFE0", Offset = "0x133AFE0", VA = "0x133AFE0")]
	public void SetLightingToCompletion()
	{
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0x133AFF0", Offset = "0x133AFF0", VA = "0x133AFF0")]
	public void OnLightingChange(object obj)
	{
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0x133B10C", Offset = "0x133B10C", VA = "0x133B10C")]
	private void ForceUpdateLighting()
	{
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0x133B1E4", Offset = "0x133B1E4", VA = "0x133B1E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0x133B2DC", Offset = "0x133B2DC", VA = "0x133B2DC")]
	public ZoneProgressVfxControl()
	{
	}
}
[Token(Token = "0x2000140")]
public class ZoneSoundtrack : MonoBehaviour
{
	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] m_musicStems;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_shuffle;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_stemCounter;

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0x133B2E4", Offset = "0x133B2E4", VA = "0x133B2E4")]
	private void Shuffle()
	{
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0x133B400", Offset = "0x133B400", VA = "0x133B400")]
	private string GetMusicStem()
	{
		return null;
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0x13389C4", Offset = "0x13389C4", VA = "0x13389C4")]
	public void PlayZoneMusic()
	{
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0x133B478", Offset = "0x133B478", VA = "0x133B478")]
	private void CheckShuffle()
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0x133B488", Offset = "0x133B488", VA = "0x133B488")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0x133B498", Offset = "0x133B498", VA = "0x133B498")]
	public ZoneSoundtrack()
	{
	}
}
[Token(Token = "0x2000141")]
public class ZoneVOManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200047E")]
	public struct SoundEvent
	{
		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_soundEvent;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_zonesNeeded;
	}

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SoundEvent[] m_soundEvents;

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0x133B5F0", Offset = "0x133B5F0", VA = "0x133B5F0")]
	public void UpdateVOManager(int zonesHealed)
	{
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0x133B734", Offset = "0x133B734", VA = "0x133B734")]
	public ZoneVOManager()
	{
	}
}
[Token(Token = "0x2000142")]
public class ActivateAnimator : MonoBehaviour
{
	[Token(Token = "0x4000B07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x4000B08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string triggerName;

	[Token(Token = "0x4000B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isBool;

	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool boolValue;

	[Token(Token = "0x4000B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool turnOnGameObject;

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xA4E34C", Offset = "0xA4E34C", VA = "0xA4E34C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xA4E3EC", Offset = "0xA4E3EC", VA = "0xA4E3EC")]
	public ActivateAnimator()
	{
	}
}
[Token(Token = "0x2000143")]
public class ActivateAnimChildren : MonoBehaviour
{
	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kActivateTimePerChild;

	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string kTriggerName;

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_forward;

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int m_nextActivateChild;

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_nextActivateChildTimer;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_activateTimer;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_nextActivateTime;

	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator[] m_children;

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0xA4E044", Offset = "0xA4E044", VA = "0xA4E044")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xA4E0E4", Offset = "0xA4E0E4", VA = "0xA4E0E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0xA4E238", Offset = "0xA4E238", VA = "0xA4E238")]
	private void ActivateChild(Animator animator)
	{
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0xA4E2E4", Offset = "0xA4E2E4", VA = "0xA4E2E4")]
	public ActivateAnimChildren()
	{
	}
}
[Token(Token = "0x2000144")]
public class ActivateChildrenByProximity : MonoBehaviour
{
	[Token(Token = "0x200047F")]
	public class ProximityChecker
	{
		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m_proximity;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject m_gameObject;

		[Token(Token = "0x600231E")]
		[Address(RVA = "0xA4E634", Offset = "0xA4E634", VA = "0xA4E634")]
		public ProximityChecker(GameObject go)
		{
		}

		[Token(Token = "0x600231F")]
		[Address(RVA = "0xA4EDB0", Offset = "0xA4EDB0", VA = "0xA4EDB0")]
		public float GetProximity()
		{
			return default(float);
		}

		[Token(Token = "0x6002320")]
		[Address(RVA = "0xA4E8C8", Offset = "0xA4E8C8", VA = "0xA4E8C8")]
		public void CalculateProximity(Vector3 position)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000480")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AEB0", Offset = "0x74AEB0")]
	private sealed class <>c
	{
		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<ProximityChecker> <>9__20_0;

		[Token(Token = "0x6002322")]
		[Address(RVA = "0xA4ED64", Offset = "0xA4ED64", VA = "0xA4ED64")]
		public <>c()
		{
		}

		[Token(Token = "0x6002323")]
		[Address(RVA = "0xA4ED6C", Offset = "0xA4ED6C", VA = "0xA4ED6C")]
		internal int <ActivateFromPosition>b__20_0(ProximityChecker a, ProximityChecker b)
		{
			return default(int);
		}
	}

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material m_material;

	[Token(Token = "0x4000B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_materialProperty;

	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_materialSadProperty;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_materialPropertyId;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int m_materialSadPropertyId;

	[Token(Token = "0x4000B19")]
	private const float kActivateTimePerChild = 0.1f;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_nextActivateChild;

	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int m_nextActivateChildTimer;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_activateTimer;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_materialTimer;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_nextActivateTime;

	[Token(Token = "0x4000B1F")]
	private const float m_materialTransitionDuration = 3f;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool m_animateMaterial;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool m_isInEditMode;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool m_activationHasStarted;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	private bool m_matAnimationIsComplete;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<ProximityChecker> m_proximityChecks;

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0xA4E3F4", Offset = "0xA4E3F4", VA = "0xA4E3F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xA4E740", Offset = "0xA4E740", VA = "0xA4E740")]
	public void SetEditMode()
	{
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0xA4E74C", Offset = "0xA4E74C", VA = "0xA4E74C")]
	public void ActivateFromPosition(Vector3 position)
	{
	}

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0xA4E9C0", Offset = "0xA4E9C0", VA = "0xA4E9C0")]
	public void SetActivationHasStarted()
	{
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0xA4E664", Offset = "0xA4E664", VA = "0xA4E664")]
	private void UpdateMaterialTransition()
	{
	}

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0xA4E9CC", Offset = "0xA4E9CC", VA = "0xA4E9CC")]
	public void MakeSad()
	{
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0xA4EA80", Offset = "0xA4EA80", VA = "0xA4EA80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0xA4EC78", Offset = "0xA4EC78", VA = "0xA4EC78")]
	public ActivateChildrenByProximity()
	{
	}
}
[Token(Token = "0x2000145")]
public class ActivateGameObject : MonoBehaviour
{
	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_targetGameObject;

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0xA4EDB8", Offset = "0xA4EDB8", VA = "0xA4EDB8")]
	public void ActivateGameobject()
	{
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0xA4EDF8", Offset = "0xA4EDF8", VA = "0xA4EDF8")]
	public ActivateGameObject()
	{
	}
}
[Token(Token = "0x2000146")]
public class ActivatePopulatedIslands : MonoBehaviour
{
	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] m_islands;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ActivatePopulatedIslands s_instance;

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0xA4EE00", Offset = "0xA4EE00", VA = "0xA4EE00")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0xA4EF4C", Offset = "0xA4EF4C", VA = "0xA4EF4C")]
	public void SetInitialState()
	{
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0xA4EFA0", Offset = "0xA4EFA0", VA = "0xA4EFA0")]
	private void Depopulate(int index)
	{
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0xA4F10C", Offset = "0xA4F10C", VA = "0xA4F10C")]
	public void Populate(int index)
	{
	}

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0xA4F278", Offset = "0xA4F278", VA = "0xA4F278")]
	public ActivatePopulatedIslands()
	{
	}
}
[Token(Token = "0x2000147")]
public class ActivateSceneEvent : MonoBehaviour
{
	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LoadSceneEvent m_loadSceneEvent;

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0xA4F280", Offset = "0xA4F280", VA = "0xA4F280")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0xA4F2B0", Offset = "0xA4F2B0", VA = "0xA4F2B0")]
	public ActivateSceneEvent()
	{
	}
}
[Token(Token = "0x2000148")]
public class ActivateSprinkleTier : MonoBehaviour
{
	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_protectTier;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool m_additiveTiers;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	private GameObject[] children;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_currentTier;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int m_childCount;

	[Token(Token = "0x6000A72")]
	[Address(RVA = "0xA4F2B8", Offset = "0xA4F2B8", VA = "0xA4F2B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0xA4F418", Offset = "0xA4F418", VA = "0xA4F418")]
	private void Activate(int tier)
	{
	}

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0xA4F560", Offset = "0xA4F560", VA = "0xA4F560")]
	public void ActivateTier(int tier)
	{
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0xA4F2F4", Offset = "0xA4F2F4", VA = "0xA4F2F4")]
	private void GetChildren()
	{
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0xA4F57C", Offset = "0xA4F57C", VA = "0xA4F57C")]
	public ActivateSprinkleTier()
	{
	}
}
[Token(Token = "0x2000149")]
public class AnimateScaleOnAwake : MonoBehaviour
{
	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve m_scaleAnimCurve;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_animTime;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_animatedScaleValue;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_randomScaleValue;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool m_randomScale;

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0x842FEC", Offset = "0x842FEC", VA = "0x842FEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0x84314C", Offset = "0x84314C", VA = "0x84314C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A79")]
	[Address(RVA = "0x8432B8", Offset = "0x8432B8", VA = "0x8432B8")]
	public AnimateScaleOnAwake()
	{
	}
}
[Token(Token = "0x200014A")]
public class AnimEventHandler : MonoBehaviour
{
	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_targetObject;

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0x8426F4", Offset = "0x8426F4", VA = "0x8426F4")]
	public void PlaySound(string soundName)
	{
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x842848", Offset = "0x842848", VA = "0x842848")]
	public void PlayHapticsRight(AnimationEvent hapticAnimEvent)
	{
	}

	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0x842960", Offset = "0x842960", VA = "0x842960")]
	public void PlayHapticsLeft(AnimationEvent hapticAnimEvent)
	{
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0x842A78", Offset = "0x842A78", VA = "0x842A78")]
	public void StopHapticsRight()
	{
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0x842AA8", Offset = "0x842AA8", VA = "0x842AA8")]
	public void StopHapticsLeft()
	{
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0x842AD8", Offset = "0x842AD8", VA = "0x842AD8")]
	public void EnableTargetObject()
	{
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x842AF8", Offset = "0x842AF8", VA = "0x842AF8")]
	public AnimEventHandler()
	{
	}
}
[Token(Token = "0x200014B")]
public class AnimStateTrigger : StateMachineBehaviour
{
	[Token(Token = "0x2000481")]
	public enum TriggerCondition
	{
		[Token(Token = "0x4001FCD")]
		OnStateEnter,
		[Token(Token = "0x4001FCE")]
		OnStateExit,
		[Token(Token = "0x4001FCF")]
		OnStateAlmostExit
	}

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TriggerCondition m_triggerCondition;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_methodName;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_almostExitTime;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool m_hasWarned;

	[Token(Token = "0x6000A81")]
	[Address(RVA = "0x842B00", Offset = "0x842B00", VA = "0x842B00", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0x842B34", Offset = "0x842B34", VA = "0x842B34", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x842B6C", Offset = "0x842B6C", VA = "0x842B6C", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x842C0C", Offset = "0x842C0C", VA = "0x842C0C")]
	public AnimStateTrigger()
	{
	}
}
[Token(Token = "0x200014C")]
public class ApplicationQuit : MonoBehaviour
{
	[Token(Token = "0x6000A85")]
	[Address(RVA = "0x8438F4", Offset = "0x8438F4", VA = "0x8438F4")]
	public void Quit()
	{
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0x8438FC", Offset = "0x8438FC", VA = "0x8438FC")]
	public ApplicationQuit()
	{
	}
}
[Token(Token = "0x200014D")]
public class BirdCutsceneHideCursors : MonoBehaviour
{
	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_didHideCursors;

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0x848C74", Offset = "0x848C74", VA = "0x848C74")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0x848CB4", Offset = "0x848CB4", VA = "0x848CB4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0x848CEC", Offset = "0x848CEC", VA = "0x848CEC")]
	public BirdCutsceneHideCursors()
	{
	}
}
[Token(Token = "0x200014E")]
public class ChangeLayer : MonoBehaviour
{
	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask m_layer;

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0x84FBA8", Offset = "0x84FBA8", VA = "0x84FBA8")]
	public void Execute()
	{
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x84FBF8", Offset = "0x84FBF8", VA = "0x84FBF8")]
	public ChangeLayer()
	{
	}
}
[Token(Token = "0x200014F")]
public class ChangeLevel : MonoBehaviour
{
	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color m_fadeColor;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_levelName;

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0x84FC00", Offset = "0x84FC00", VA = "0x84FC00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0x84FCB8", Offset = "0x84FCB8", VA = "0x84FCB8")]
	private void StopAllSounds()
	{
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0x84FD68", Offset = "0x84FD68", VA = "0x84FD68")]
	public ChangeLevel()
	{
	}
}
[Token(Token = "0x2000150")]
public class ChangeLevelEvent : MonoBehaviour
{
	[Token(Token = "0x2000482")]
	public delegate void LevelChangedCallback();

	[Token(Token = "0x2000483")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AEC0", Offset = "0x74AEC0")]
	private sealed class <WatchLevelLoad>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChangeLevelEvent <>4__this;

		[Token(Token = "0x17000384")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600232B")]
			[Address(RVA = "0x850780", Offset = "0x850780", VA = "0x850780", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000385")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600232D")]
			[Address(RVA = "0x8507EC", Offset = "0x8507EC", VA = "0x8507EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002328")]
		[Address(RVA = "0x850410", Offset = "0x850410", VA = "0x850410")]
		[DebuggerHidden]
		public <WatchLevelLoad>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0x8505E0", Offset = "0x8505E0", VA = "0x8505E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0x8505E4", Offset = "0x8505E4", VA = "0x8505E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0x850788", Offset = "0x850788", VA = "0x850788", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string m_levelName;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_levelNum;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LevelChangedCallback m_OnLevelChanged;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AsyncOperation m_loadingOperation;

	[Token(Token = "0x4000B40")]
	private const float kSecondsToWaitToActivateLevel = 3.8f;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_saveGame;

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0x84FD70", Offset = "0x84FD70", VA = "0x84FD70")]
	public void StartChangingLevels(string levelName, LevelChangedCallback onLevelChanged, Color fadeColor, bool saveGameData = true, bool stopSound = false)
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0x84FF0C", Offset = "0x84FF0C", VA = "0x84FF0C")]
	public void StartChangingLevels(int levelNum, LevelChangedCallback onLevelChanged, Color fadeColor, bool stopSound = false)
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0x85009C", Offset = "0x85009C", VA = "0x85009C")]
	private void SaveGame()
	{
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0x850110", Offset = "0x850110", VA = "0x850110")]
	public void Update()
	{
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0x85039C", Offset = "0x85039C", VA = "0x85039C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75730C", Offset = "0x75730C")]
	private IEnumerator WatchLevelLoad()
	{
		return null;
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0x85043C", Offset = "0x85043C", VA = "0x85043C")]
	public void OnFadedOut()
	{
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0x8505C0", Offset = "0x8505C0", VA = "0x8505C0")]
	private void OnSceneLoaded(UnityEngine.SceneManagement.Scene scene, LoadSceneMode loadSceneMode)
	{
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0x8505C8", Offset = "0x8505C8", VA = "0x8505C8")]
	public ChangeLevelEvent()
	{
	}
}
[Token(Token = "0x2000151")]
public class ChangeLevelOnEvent : MonoBehaviour
{
	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EventBarn.SerializableEventType m_eventType;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color m_fadeColor;

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0x850844", Offset = "0x850844", VA = "0x850844")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0x8508E8", Offset = "0x8508E8", VA = "0x8508E8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A99")]
	[Address(RVA = "0x85098C", Offset = "0x85098C", VA = "0x85098C")]
	private void ChangeLevel(object obj)
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0x8509F8", Offset = "0x8509F8", VA = "0x8509F8")]
	public ChangeLevelOnEvent()
	{
	}
}
[Token(Token = "0x2000152")]
public class ChangeLevelSMB : StateMachineBehaviour
{
	[Token(Token = "0x2000484")]
	public enum TriggerCondition
	{
		[Token(Token = "0x4001FD4")]
		OnStateEnter,
		[Token(Token = "0x4001FD5")]
		OnStateExit
	}

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TriggerCondition m_triggerCondition;

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_nextLevel;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_levelName;

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0x850A2C", Offset = "0x850A2C", VA = "0x850A2C", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0x850AD0", Offset = "0x850AD0", VA = "0x850AD0", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A9D")]
	[Address(RVA = "0x850A3C", Offset = "0x850A3C", VA = "0x850A3C")]
	private void ChangeLevel()
	{
	}

	[Token(Token = "0x6000A9E")]
	[Address(RVA = "0x850AE4", Offset = "0x850AE4", VA = "0x850AE4")]
	public ChangeLevelSMB()
	{
	}
}
[Token(Token = "0x2000153")]
public enum SplashType
{
	[Token(Token = "0x4000B48")]
	Water,
	[Token(Token = "0x4000B49")]
	Grass,
	[Token(Token = "0x4000B4A")]
	Sand,
	[Token(Token = "0x4000B4B")]
	Lily
}
[Token(Token = "0x2000154")]
public class CollisionSplash : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SplashType m_splashType;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool m_centerSplashOnThisObject;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 offset;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 m_splashRotation;

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0x85277C", Offset = "0x85277C", VA = "0x85277C", Slot = "14")]
	protected override void OnCursorOver(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0x852B80", Offset = "0x852B80", VA = "0x852B80", Slot = "27")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0x8527C0", Offset = "0x8527C0", VA = "0x8527C0")]
	private void Splash(Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0x852BE0", Offset = "0x852BE0", VA = "0x852BE0")]
	public CollisionSplash()
	{
	}
}
[Token(Token = "0x2000155")]
public class CreateModeScribbleEvent : MonoBehaviour
{
	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0x7B7F8C", Offset = "0x7B7F8C", VA = "0x7B7F8C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0x7B7FB8", Offset = "0x7B7FB8", VA = "0x7B7FB8")]
	public CreateModeScribbleEvent()
	{
	}
}
[Token(Token = "0x2000156")]
public class CutsceneTransitionHandler : MonoBehaviour
{
	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_cutsceneScribble;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SimpleScaleAnimator m_scribbleScaler;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject m_createSceneScribble;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject m_cutsceneContainer;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 m_cameraPositionBeforeCinematic;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion m_cameraRotationBeforeCinematic;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 m_cameraScaleBeforeCinematic;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Camera m_cameraBeforeCinematic;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SceneLighting m_sceneLighting;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Light m_sunlight;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Color m_ambientEquatorColorInCreate;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Color m_ambientGroundColorInCreate;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Color m_ambientSkyColorInCreate;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Color m_ambientEquatorColorInCinematic;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Color m_ambientGroundColorInCinematic;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Color m_ambientSkyColorInCinematic;

	[Token(Token = "0x4000B60")]
	private const string kVrTransformPath = "Cutscene_container/VRTransform";

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform m_VRTransform;

	[Token(Token = "0x4000B62")]
	private const float kFadeSpeed = 1f;

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0x7BFCD8", Offset = "0x7BFCD8", VA = "0x7BFCD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0x7BFF08", Offset = "0x7BFF08", VA = "0x7BFF08")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0x7BFFF4", Offset = "0x7BFFF4", VA = "0x7BFFF4")]
	private void StartCinematic(object obj)
	{
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0x7C0274", Offset = "0x7C0274", VA = "0x7C0274")]
	private void TransitionToCinematic()
	{
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0x7C053C", Offset = "0x7C053C", VA = "0x7C053C")]
	private void TransitionToCreate()
	{
	}

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0x7C0760", Offset = "0x7C0760", VA = "0x7C0760")]
	private void StartScribbleFade(object obj)
	{
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0x7C0864", Offset = "0x7C0864", VA = "0x7C0864")]
	private void ReturnToCreateMode()
	{
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0x7C0984", Offset = "0x7C0984", VA = "0x7C0984")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0x7C09A0", Offset = "0x7C09A0", VA = "0x7C09A0")]
	public CutsceneTransitionHandler()
	{
	}
}
[Token(Token = "0x2000157")]
public class DeactivateGameobjectOnAwake : MonoBehaviour
{
	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x7C09A8", Offset = "0x7C09A8", VA = "0x7C09A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x7C09EC", Offset = "0x7C09EC", VA = "0x7C09EC")]
	public DeactivateGameobjectOnAwake()
	{
	}
}
[Token(Token = "0x2000158")]
public class DeactivateGameobjectOnStart : MonoBehaviour
{
	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x7C09F4", Offset = "0x7C09F4", VA = "0x7C09F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0x7C0A38", Offset = "0x7C0A38", VA = "0x7C0A38")]
	public DeactivateGameobjectOnStart()
	{
	}
}
[Token(Token = "0x2000159")]
public class DelayedActionTrigger : MonoBehaviour
{
	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_addCallbackOnAwake;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_delayTime;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent m_eventsToTrigger;

	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_delayedCallbackInProgress;

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0x7C16D8", Offset = "0x7C16D8", VA = "0x7C16D8")]
	private void InvokeActions()
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0x7C1708", Offset = "0x7C1708", VA = "0x7C1708")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0x7C1718", Offset = "0x7C1718", VA = "0x7C1718")]
	public void SetDelayedCallback()
	{
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0x7C17CC", Offset = "0x7C17CC", VA = "0x7C17CC")]
	public void CancelDelayedCallback()
	{
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0x7C1864", Offset = "0x7C1864", VA = "0x7C1864")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0x7C1868", Offset = "0x7C1868", VA = "0x7C1868")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0x7C187C", Offset = "0x7C187C", VA = "0x7C187C")]
	public DelayedActionTrigger()
	{
	}
}
[Token(Token = "0x200015A")]
public class DeleteSaveDataAndRestartGame : MonoBehaviour
{
	[Token(Token = "0x4000B67")]
	private const string kStartLevel = "Bird_Create";

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0x7C188C", Offset = "0x7C188C", VA = "0x7C188C")]
	public void Execute()
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0x7C1960", Offset = "0x7C1960", VA = "0x7C1960")]
	public DeleteSaveDataAndRestartGame()
	{
	}
}
[Token(Token = "0x200015B")]
public class DestroyJoint : MonoBehaviour
{
	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Joint[] m_joints;

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0x7C1C58", Offset = "0x7C1C58", VA = "0x7C1C58")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0x7C1CB0", Offset = "0x7C1CB0", VA = "0x7C1CB0")]
	public void Execute()
	{
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0x7C1D98", Offset = "0x7C1D98", VA = "0x7C1D98")]
	public DestroyJoint()
	{
	}
}
[Token(Token = "0x200015C")]
public class DisableIfGamepadDetected : MonoBehaviour
{
	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_disableList;

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0x7F1934", Offset = "0x7F1934", VA = "0x7F1934")]
	public void Update()
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0x7F1A64", Offset = "0x7F1A64", VA = "0x7F1A64")]
	public DisableIfGamepadDetected()
	{
	}
}
[Token(Token = "0x200015D")]
public class DisableSprinkleCullerComponents : MonoBehaviour
{
	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Collider m_collider;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_colliderDeactivationTime;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_timeSinceAwake;

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0x7F1CD4", Offset = "0x7F1CD4", VA = "0x7F1CD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0x7F1D2C", Offset = "0x7F1D2C", VA = "0x7F1D2C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0x7F1DA4", Offset = "0x7F1DA4", VA = "0x7F1DA4")]
	public DisableSprinkleCullerComponents()
	{
	}
}
[Token(Token = "0x200015E")]
public class DisableStampIcon : MonoBehaviour
{
	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_dimmedValue;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_materialUnDimTime;

	[Token(Token = "0x4000B6F")]
	private const string kActiveSwitchProperty = "_ActiveSwitch";

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_ActiveSwitchPropertyID;

	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material m_material;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Collider m_collider;

	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_materialCached;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_materialDimmed;

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool m_colliderDisabled;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	private bool m_stampIconEnabled;

	[Token(Token = "0x4000B77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private StateTimer m_materialUnDimTimer;

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0x7F1DB4", Offset = "0x7F1DB4", VA = "0x7F1DB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0x7F1E3C", Offset = "0x7F1E3C", VA = "0x7F1E3C")]
	private void CacheMaterial()
	{
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0x7F1EAC", Offset = "0x7F1EAC", VA = "0x7F1EAC")]
	private void DimMaterial()
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0x7F1F60", Offset = "0x7F1F60", VA = "0x7F1F60")]
	private void DisableCollider()
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0x7F2010", Offset = "0x7F2010", VA = "0x7F2010")]
	public void EnableStampIcon()
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0x7F201C", Offset = "0x7F201C", VA = "0x7F201C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0x7F21A4", Offset = "0x7F21A4", VA = "0x7F21A4")]
	public DisableStampIcon()
	{
	}
}
[Token(Token = "0x200015F")]
public class DispatchFromAnimState : StateMachineBehaviour
{
	[Token(Token = "0x2000485")]
	public enum TriggerCondition
	{
		[Token(Token = "0x4001FD7")]
		OnStateEnter,
		[Token(Token = "0x4001FD8")]
		OnStateExit,
		[Token(Token = "0x4001FD9")]
		OnStateAlmostExit
	}

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TriggerCondition m_triggerCondition;

	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EventBarn.SerializableEventType m_eventType;

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_almostExitTime;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool m_hasWarned;

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0x7F21B4", Offset = "0x7F21B4", VA = "0x7F21B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0x7F21B8", Offset = "0x7F21B8", VA = "0x7F21B8", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0x7F2348", Offset = "0x7F2348", VA = "0x7F2348", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0x7F23D0", Offset = "0x7F23D0", VA = "0x7F23D0", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0x7F249C", Offset = "0x7F249C", VA = "0x7F249C")]
	public DispatchFromAnimState()
	{
	}
}
[Token(Token = "0x2000160")]
public class EnableStampIconMaterialTimer : MonoBehaviour
{
	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MaterialTimer m_materialTimer;

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0x7F2B1C", Offset = "0x7F2B1C", VA = "0x7F2B1C")]
	private bool CacheMaterialTimer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0x7F2BF0", Offset = "0x7F2BF0", VA = "0x7F2BF0")]
	public void EnableMaterialTimer()
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0x7F2C44", Offset = "0x7F2C44", VA = "0x7F2C44")]
	public EnableStampIconMaterialTimer()
	{
	}
}
[Token(Token = "0x2000161")]
public class EventBarnDispatcher : MonoBehaviour
{
	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EventBarn.SerializableEventType m_eventToDispatch;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_dispatchOnStart;

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0x7F55F0", Offset = "0x7F55F0", VA = "0x7F55F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0x7F5600", Offset = "0x7F5600", VA = "0x7F5600")]
	public void DispatchEvent()
	{
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0x7F5660", Offset = "0x7F5660", VA = "0x7F5660")]
	public EventBarnDispatcher()
	{
	}
}
[Token(Token = "0x2000162")]
public class FadeScreenEvent : MonoBehaviour
{
	[Token(Token = "0x2000486")]
	public delegate void FadedOutCallback();

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve m_defaultFadeCurve;

	[Token(Token = "0x4000B80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private FadedOutCallback m_OnFadedOut;

	[Token(Token = "0x4000B81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CameraFade m_cameraFadeVR;

	[Token(Token = "0x4000B82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AnimationCurve m_fadeCurve;

	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera m_oldCamera;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color m_fadeColor;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_fadeSpeed;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_fadeTimer;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_fadeTime;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool m_isPaused;

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0x7F59F4", Offset = "0x7F59F4", VA = "0x7F59F4")]
	public void PauseFade()
	{
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0x7F5A00", Offset = "0x7F5A00", VA = "0x7F5A00")]
	public void ResumeFade()
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0x7F5A08", Offset = "0x7F5A08", VA = "0x7F5A08")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0x7F5A14", Offset = "0x7F5A14", VA = "0x7F5A14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0x7F5B1C", Offset = "0x7F5B1C", VA = "0x7F5B1C")]
	public void StartFade(float fadeSpeed, FadedOutCallback onFadedOut, Color fadeColor)
	{
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0x7F5CA8", Offset = "0x7F5CA8", VA = "0x7F5CA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0x7F6190", Offset = "0x7F6190", VA = "0x7F6190")]
	public FadeScreenEvent()
	{
	}
}
[Token(Token = "0x2000163")]
public class FadeScreenTrigger : MonoBehaviour
{
	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fadeSpeed;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_fadeOnStart;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool m_ignoreFade;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color m_fadeColor;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent m_onFadeEvents;

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0x7F6378", Offset = "0x7F6378", VA = "0x7F6378")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0x7F6388", Offset = "0x7F6388", VA = "0x7F6388")]
	public void Fade()
	{
	}

	[Token(Token = "0x6000ADE")]
	[Address(RVA = "0x7F6474", Offset = "0x7F6474", VA = "0x7F6474")]
	private void OnFaded()
	{
	}

	[Token(Token = "0x6000ADF")]
	[Address(RVA = "0x7F64A8", Offset = "0x7F64A8", VA = "0x7F64A8")]
	public FadeScreenTrigger()
	{
	}
}
[Token(Token = "0x2000164")]
public class GrowableParticleSplash : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform m_root;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform m_particle;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem m_particleSys;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform m_scaleTransform;

	[Token(Token = "0x6000AE0")]
	[Address(RVA = "0x8E76E8", Offset = "0x8E76E8", VA = "0x8E76E8", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000AE1")]
	[Address(RVA = "0x8E777C", Offset = "0x8E777C", VA = "0x8E777C", Slot = "14")]
	protected override void OnCursorOver(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0x8E7820", Offset = "0x8E7820", VA = "0x8E7820", Slot = "27")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0x8E77C0", Offset = "0x8E77C0", VA = "0x8E77C0")]
	private void Splash(Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0x8E7880", Offset = "0x8E7880", VA = "0x8E7880")]
	public GrowableParticleSplash()
	{
	}
}
[Token(Token = "0x2000165")]
public class HealingOnTriggerEnter : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private HealingControl m_healingControl;

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Collider m_collider;

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0x90B9C8", Offset = "0x90B9C8", VA = "0x90B9C8")]
	public void Start()
	{
	}

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0x90BA20", Offset = "0x90BA20", VA = "0x90BA20", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0x90BA78", Offset = "0x90BA78", VA = "0x90BA78", Slot = "21")]
	protected override bool CursorOnTriggerEnter(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0x90BB00", Offset = "0x90BB00", VA = "0x90BB00", Slot = "23")]
	protected override bool CursorOnTriggerExit(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AE9")]
	[Address(RVA = "0x90BB58", Offset = "0x90BB58", VA = "0x90BB58", Slot = "22")]
	protected override bool CursorOnTriggerStay(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0x90BCC4", Offset = "0x90BCC4", VA = "0x90BCC4")]
	public HealingOnTriggerEnter()
	{
	}
}
[Serializable]
[Token(Token = "0x2000166")]
public class EventStringBundle
{
	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_event;

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0x7F57A8", Offset = "0x7F57A8", VA = "0x7F57A8")]
	public void Invoke()
	{
	}

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0x7F57BC", Offset = "0x7F57BC", VA = "0x7F57BC")]
	public EventStringBundle()
	{
	}
}
[Token(Token = "0x2000167")]
public class InvokeEvent : MonoBehaviour
{
	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EventStringBundle> m_events;

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0x7D77AC", Offset = "0x7D77AC", VA = "0x7D77AC")]
	public void CallInvokeEvent(string name)
	{
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0x7D78BC", Offset = "0x7D78BC", VA = "0x7D78BC")]
	public InvokeEvent()
	{
	}
}
[Token(Token = "0x2000168")]
public class LoadSceneEvent : MonoBehaviour
{
	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_sceneToLoad;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_activateOnLoad;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AsyncOperation m_loadingScene;

	[Token(Token = "0x170000CF")]
	public AsyncOperation LoadingScene
	{
		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x7E1344", Offset = "0x7E1344", VA = "0x7E1344")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0x7E134C", Offset = "0x7E134C", VA = "0x7E134C")]
	public void ActivateScene()
	{
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0x7E136C", Offset = "0x7E136C", VA = "0x7E136C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0x7E13B4", Offset = "0x7E13B4", VA = "0x7E13B4")]
	public LoadSceneEvent()
	{
	}
}
[Token(Token = "0x2000169")]
public class MulticountEvent : MonoBehaviour
{
	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_onCountEvent;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_triggerCount;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_count;

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0x80CBF0", Offset = "0x80CBF0", VA = "0x80CBF0")]
	public void Increment()
	{
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0x80CC38", Offset = "0x80CC38", VA = "0x80CC38")]
	public MulticountEvent()
	{
	}
}
[Token(Token = "0x200016A")]
public class OnAnyMouseInput : MonoBehaviour
{
	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_OnInput;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_LMB;

	[Token(Token = "0x4000B9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool m_RMB;

	[Token(Token = "0x4000BA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool m_scroll;

	[Token(Token = "0x4000BA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool m_repeat;

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0x80D508", Offset = "0x80D508", VA = "0x80D508")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0x80D5C4", Offset = "0x80D5C4", VA = "0x80D5C4")]
	public OnAnyMouseInput()
	{
	}
}
[Token(Token = "0x200016B")]
public class OnAwakeOnStart : MonoBehaviour
{
	[Token(Token = "0x4000BA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_OnAwake;

	[Token(Token = "0x4000BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent m_OnStart;

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0x80D5CC", Offset = "0x80D5CC", VA = "0x80D5CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0x80D5E0", Offset = "0x80D5E0", VA = "0x80D5E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0x80D5F4", Offset = "0x80D5F4", VA = "0x80D5F4")]
	public OnAwakeOnStart()
	{
	}
}
[Token(Token = "0x200016C")]
public enum TimeComponentToTrack
{
	[Token(Token = "0x4000BA5")]
	Days,
	[Token(Token = "0x4000BA6")]
	Hours,
	[Token(Token = "0x4000BA7")]
	Minutes,
	[Token(Token = "0x4000BA8")]
	Seconds
}
[Serializable]
[Token(Token = "0x200016D")]
public class TimeEventBundle
{
	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x75043C", Offset = "0x75043C")]
	public int m_units;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x750474", Offset = "0x750474")]
	public UnityEvent m_OnTimeUnitsPassed;

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0x7A2DCC", Offset = "0x7A2DCC", VA = "0x7A2DCC")]
	public void Invoke()
	{
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0x7A2DE0", Offset = "0x7A2DE0", VA = "0x7A2DE0")]
	public TimeEventBundle()
	{
	}
}
[Token(Token = "0x200016E")]
public class OnCheckTimeSinceSceneLastModified : MonoBehaviour
{
	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TimeComponentToTrack m_timeComponent;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TimeEventBundle[] m_timeEvents;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_triggerAllValidEvents;

	[Token(Token = "0x4000BAE")]
	private const string kTimeCheckMessage = "{0} has not been played in {1} days, {2} hours, {3} minutes and {4} seconds.";

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0x80D5FC", Offset = "0x80D5FC", VA = "0x80D5FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AFD")]
	[Address(RVA = "0x80D8F0", Offset = "0x80D8F0", VA = "0x80D8F0")]
	private void InvokeAllTimeEventBundles()
	{
	}

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0x80D964", Offset = "0x80D964", VA = "0x80D964")]
	private void InvokeTimeEventBundleWithGreatestTimeUnits(int totalTime)
	{
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0x80DA04", Offset = "0x80DA04", VA = "0x80DA04")]
	public OnCheckTimeSinceSceneLastModified()
	{
	}
}
[Token(Token = "0x200016F")]
public class OnCollisionPS : MonoBehaviour
{
	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem m_targetPS;

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0x80DA0C", Offset = "0x80DA0C", VA = "0x80DA0C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0x80DA28", Offset = "0x80DA28", VA = "0x80DA28")]
	public OnCollisionPS()
	{
	}
}
[Token(Token = "0x2000170")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749080", Offset = "0x749080")]
public class OnCursorGrab : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool m_isDisabledInDemo;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent m_onCursorGrabEvent;

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_listenerIsRemoved;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Hotspot m_hotspot;

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0x80DA30", Offset = "0x80DA30", VA = "0x80DA30")]
	public void RemoveListener()
	{
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0x80DA3C", Offset = "0x80DA3C", VA = "0x80DA3C", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0x80DB58", Offset = "0x80DB58", VA = "0x80DB58", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0x80DBF0", Offset = "0x80DBF0", VA = "0x80DBF0")]
	public void OnHotspotEngage()
	{
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0x80DC0C", Offset = "0x80DC0C", VA = "0x80DC0C")]
	public OnCursorGrab()
	{
	}
}
[Token(Token = "0x2000171")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7490E4", Offset = "0x7490E4")]
public class OnCursorGrabChangeToNextLevel : CursorInputMonoBehaviour
{
	[Token(Token = "0x6000B07")]
	[Address(RVA = "0x80DC74", Offset = "0x80DC74", VA = "0x80DC74", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0x80DCD0", Offset = "0x80DCD0", VA = "0x80DCD0")]
	public OnCursorGrabChangeToNextLevel()
	{
	}
}
[Token(Token = "0x2000172")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749148", Offset = "0x749148")]
public class OnCursorTrigger : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent m_onCursorEnter;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent m_onCursorExit;

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0x80DD38", Offset = "0x80DD38", VA = "0x80DD38", Slot = "15")]
	protected override void OnCursorLeave(int cursorIndex)
	{
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0x80DD4C", Offset = "0x80DD4C", VA = "0x80DD4C", Slot = "14")]
	protected override void OnCursorOver(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0x80DD74", Offset = "0x80DD74", VA = "0x80DD74")]
	public void OnNodeEnter()
	{
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0x80DD60", Offset = "0x80DD60", VA = "0x80DD60")]
	private void CursorEnter()
	{
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0x80DD88", Offset = "0x80DD88", VA = "0x80DD88")]
	public OnCursorTrigger()
	{
	}
}
[Token(Token = "0x2000173")]
public class OnSaveDataCheck : MonoBehaviour
{
	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneBundle m_sceneBundle;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_checkKineticData;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool m_checkCreateData;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SceneBundle.SceneObjectSerializer m_sceneToCheckIn;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent m_SaveDataIsTrue;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent m_SaveDataIsFalse;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7504AC", Offset = "0x7504AC")]
	public UnityEvent m_IsFalseAndGamepadDetected;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool m_InvokeOnStart;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool m_saveDataNotFound;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool m_triggeredGamepadEvent;

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0x80DE30", Offset = "0x80DE30", VA = "0x80DE30")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0x80DE44", Offset = "0x80DE44", VA = "0x80DE44")]
	private bool CurrentSceneIsSceneToCheckIn()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0x80DEB4", Offset = "0x80DEB4", VA = "0x80DEB4")]
	private bool CheckDataAgainstSaveType()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0x80DFB0", Offset = "0x80DFB0", VA = "0x80DFB0")]
	public void TryInvokeEvents()
	{
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0x80E014", Offset = "0x80E014", VA = "0x80E014")]
	private void TriggerGamepadEvent()
	{
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0x80E0A0", Offset = "0x80E0A0", VA = "0x80E0A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0x80E0B0", Offset = "0x80E0B0", VA = "0x80E0B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0x80E0C8", Offset = "0x80E0C8", VA = "0x80E0C8")]
	public OnSaveDataCheck()
	{
	}
}
[Token(Token = "0x2000174")]
public class OnTransformsInRange : MonoBehaviour
{
	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_transform;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] m_transformsToTrack;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_sqrMagRange;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool m_deactivateTransformsInRange;

	[Token(Token = "0x4000BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool m_disableTrackingIfAnyTransformIsInRange;

	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent m_OnAnyTransformInRange;

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent m_OnAllTransformsInRange;

	[Token(Token = "0x6000B16")]
	[Address(RVA = "0x80E0D8", Offset = "0x80E0D8", VA = "0x80E0D8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0x80E15C", Offset = "0x80E15C", VA = "0x80E15C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000B18")]
	[Address(RVA = "0x80E220", Offset = "0x80E220", VA = "0x80E220")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B19")]
	[Address(RVA = "0x80E2B0", Offset = "0x80E2B0", VA = "0x80E2B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B1A")]
	[Address(RVA = "0x80E4B4", Offset = "0x80E4B4", VA = "0x80E4B4")]
	public OnTransformsInRange()
	{
	}
}
[Token(Token = "0x2000175")]
public class OnValueEquals : MonoBehaviour
{
	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_targetValue;

	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_repeat;

	[Token(Token = "0x4000BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_value;

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent m_onTargetValue;

	[Token(Token = "0x6000B1B")]
	[Address(RVA = "0x80E4BC", Offset = "0x80E4BC", VA = "0x80E4BC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000B1C")]
	[Address(RVA = "0x80E4E0", Offset = "0x80E4E0", VA = "0x80E4E0")]
	public void AddValue()
	{
	}

	[Token(Token = "0x6000B1D")]
	[Address(RVA = "0x80E53C", Offset = "0x80E53C", VA = "0x80E53C")]
	public OnValueEquals()
	{
	}
}
[Token(Token = "0x2000176")]
public class PaletteBob : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_sinSpeed;

	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_sinAmp;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_sinTime;

	[Token(Token = "0x4000BCE")]
	private const float kMinSinVal = 0.01f;

	[Token(Token = "0x4000BCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_defaultPos;

	[Token(Token = "0x6000B1E")]
	[Address(RVA = "0x80F2B8", Offset = "0x80F2B8", VA = "0x80F2B8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0x80F354", Offset = "0x80F354", VA = "0x80F354", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0x80F3FC", Offset = "0x80F3FC", VA = "0x80F3FC", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0x80F5B0", Offset = "0x80F5B0", VA = "0x80F5B0")]
	public PaletteBob()
	{
	}
}
[Token(Token = "0x2000177")]
public class PaletteHover2D : MonoBehaviour
{
	[Token(Token = "0x4000BD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkinnedMeshRenderer m_renderer;

	[Token(Token = "0x4000BD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material m_material;

	[Token(Token = "0x4000BD2")]
	private const string kMasterEmissionParam = "_MasterEmission";

	[Token(Token = "0x4000BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_masterEmissionParamID;

	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_altScale;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_altEmissive;

	[Token(Token = "0x4000BD6")]
	private const float kDefaultEmissive = 0f;

	[Token(Token = "0x4000BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_defaultScale;

	[Token(Token = "0x4000BD8")]
	private const float kDistanceThreshold = 0.015f;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_distanceThresholdBorder;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AnimationCurve m_thresholdCurve;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Camera m_cam;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CameraOrbit2D m_cameraOrbit2D;

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_isInHoverRange;

	[Token(Token = "0x4000BDE")]
	private const string kHoverOpenSound = "Create_Palette_2D_Open";

	[Token(Token = "0x4000BDF")]
	private const string kHoverCloseSound = "Create_Palette_2D_Close";

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0x80F620", Offset = "0x80F620", VA = "0x80F620")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0x80F830", Offset = "0x80F830", VA = "0x80F830")]
	private bool CheckCameraOrbitState()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0x80F8CC", Offset = "0x80F8CC", VA = "0x80F8CC")]
	private void DriveScale(float v)
	{
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0x80F944", Offset = "0x80F944", VA = "0x80F944")]
	private void DriveEmissive(float v)
	{
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0x80F968", Offset = "0x80F968", VA = "0x80F968")]
	private void CheckHoverRange(float val)
	{
	}

	[Token(Token = "0x6000B27")]
	[Address(RVA = "0x80FB24", Offset = "0x80FB24", VA = "0x80FB24")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B28")]
	[Address(RVA = "0x80FD68", Offset = "0x80FD68", VA = "0x80FD68")]
	public PaletteHover2D()
	{
	}
}
[Token(Token = "0x2000178")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7491AC", Offset = "0x7491AC")]
public class PlaySoundCursorGrabRelease : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string m_grabSound;

	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string m_releaseSound;

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0x925B24", Offset = "0x925B24", VA = "0x925B24")]
	private void PlaySound(string sound)
	{
	}

	[Token(Token = "0x6000B2A")]
	[Address(RVA = "0x925C2C", Offset = "0x925C2C", VA = "0x925C2C", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0x925C34", Offset = "0x925C34", VA = "0x925C34", Slot = "13")]
	protected override void OnCursorReleased(int cursorIdx)
	{
	}

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0x925C3C", Offset = "0x925C3C", VA = "0x925C3C")]
	public PlaySoundCursorGrabRelease()
	{
	}
}
[Token(Token = "0x2000179")]
public class PlaySoundEvent : MonoBehaviour
{
	[Token(Token = "0x2000487")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AED0", Offset = "0x74AED0")]
	private sealed class <QueueDelayedSound>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlaySoundEvent <>4__this;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string sound;

		[Token(Token = "0x17000386")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002335")]
			[Address(RVA = "0x926040", Offset = "0x926040", VA = "0x926040", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000387")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002337")]
			[Address(RVA = "0x9260AC", Offset = "0x9260AC", VA = "0x9260AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002332")]
		[Address(RVA = "0x925F54", Offset = "0x925F54", VA = "0x925F54")]
		[DebuggerHidden]
		public <QueueDelayedSound>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6002333")]
		[Address(RVA = "0x925F88", Offset = "0x925F88", VA = "0x925F88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002334")]
		[Address(RVA = "0x925F8C", Offset = "0x925F8C", VA = "0x925F8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002336")]
		[Address(RVA = "0x926048", Offset = "0x926048", VA = "0x926048", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_soundEvent;

	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_playOnStart;

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_delay;

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0x925CC4", Offset = "0x925CC4", VA = "0x925CC4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0x925CD4", Offset = "0x925CD4", VA = "0x925CD4")]
	public void TriggerSoundEvent()
	{
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0x925EA0", Offset = "0x925EA0", VA = "0x925EA0")]
	public void TriggerSoundEvent(string sound)
	{
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0x925EFC", Offset = "0x925EFC", VA = "0x925EFC")]
	public void TriggerSoundEvent(string sound, float delay)
	{
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0x925D34", Offset = "0x925D34", VA = "0x925D34")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x757370", Offset = "0x757370")]
	private IEnumerator QueueDelayedSound(string sound, float delay)
	{
		return null;
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0x925DC4", Offset = "0x925DC4", VA = "0x925DC4")]
	public void Play(string sound)
	{
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0x925F80", Offset = "0x925F80", VA = "0x925F80")]
	public PlaySoundEvent()
	{
	}
}
[Token(Token = "0x200017A")]
public class PlaySoundSMB : StateMachineBehaviour
{
	[Token(Token = "0x2000488")]
	public enum TriggerCondition
	{
		[Token(Token = "0x4001FE0")]
		OnStateEnter,
		[Token(Token = "0x4001FE1")]
		OnStateExit
	}

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TriggerCondition m_triggerCondition;

	[Token(Token = "0x4000BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_soundName;

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0x926A9C", Offset = "0x926A9C", VA = "0x926A9C", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0x926BAC", Offset = "0x926BAC", VA = "0x926BAC", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0x926AE8", Offset = "0x926AE8", VA = "0x926AE8")]
	private void PlaySound(GameObject emittingObject)
	{
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0x926BFC", Offset = "0x926BFC", VA = "0x926BFC")]
	public PlaySoundSMB()
	{
	}
}
[Token(Token = "0x200017B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749210", Offset = "0x749210")]
public class ResizeBoxCollider : MonoBehaviour
{
	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_resizeOnStart;

	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BoxCollider m_boxCollider;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 m_alternateCenter;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 m_alternateSize;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 m_origCenter;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_origSize;

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0x93AD38", Offset = "0x93AD38", VA = "0x93AD38")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0x93ADCC", Offset = "0x93ADCC", VA = "0x93ADCC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0x93ADDC", Offset = "0x93ADDC", VA = "0x93ADDC")]
	public void Resize()
	{
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0x93AE28", Offset = "0x93AE28", VA = "0x93AE28")]
	public void ResetOriginalSize()
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0x93AE74", Offset = "0x93AE74", VA = "0x93AE74")]
	public ResizeBoxCollider()
	{
	}
}
[Token(Token = "0x200017C")]
public class ScribbleInteractionEvent : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PullStarToReveal m_leftPalletController;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PullStarToReveal m_rightPalletController;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string m_scribbleTouchSound;

	[Token(Token = "0x4000BF0")]
	private const float kFadeSpeed = 0.25f;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CreateModeCinematicControl m_createModeCinematicControl;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject m_rootGameObject;

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Animator m_sunAnimator;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool m_scribbleTriggered;

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0x8B1600", Offset = "0x8B1600", VA = "0x8B1600", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0x8B1804", Offset = "0x8B1804", VA = "0x8B1804", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0x8B18D0", Offset = "0x8B18D0", VA = "0x8B18D0", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0x8B190C", Offset = "0x8B190C", VA = "0x8B190C")]
	private void OnScribbleTriggered()
	{
	}

	[Token(Token = "0x6000B41")]
	[Address(RVA = "0x8B1C24", Offset = "0x8B1C24", VA = "0x8B1C24", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000B42")]
	[Address(RVA = "0x8B1C30", Offset = "0x8B1C30", VA = "0x8B1C30")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0x8B1C3C", Offset = "0x8B1C3C", VA = "0x8B1C3C")]
	private void OnFadedOut()
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0x8B1CE0", Offset = "0x8B1CE0", VA = "0x8B1CE0")]
	public ScribbleInteractionEvent()
	{
	}
}
[Token(Token = "0x200017D")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749274", Offset = "0x749274")]
public class SendInteractionEvent : MonoBehaviour
{
	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Growable m_growable;

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0x8B205C", Offset = "0x8B205C", VA = "0x8B205C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0x8B20B4", Offset = "0x8B20B4", VA = "0x8B20B4")]
	public void OnInteractionEvent()
	{
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0x8B20EC", Offset = "0x8B20EC", VA = "0x8B20EC")]
	public SendInteractionEvent()
	{
	}
}
[Token(Token = "0x200017E")]
public class SetAnimatorProperty : MonoBehaviour
{
	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string propertyName;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool boolValue;

	[Token(Token = "0x6000B48")]
	[Address(RVA = "0x8B24B8", Offset = "0x8B24B8", VA = "0x8B24B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0x8B24E0", Offset = "0x8B24E0", VA = "0x8B24E0")]
	public SetAnimatorProperty()
	{
	}
}
[Token(Token = "0x200017F")]
public class SetFadeOnEmitter : MonoBehaviour
{
	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7504E4", Offset = "0x7504E4")]
	public float m_alpha;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem m_emitter;

	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color m_originalColor;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MinMaxGradient m_originalGradient;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_lastAlpha;

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0x8B26A0", Offset = "0x8B26A0", VA = "0x8B26A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0x8B27BC", Offset = "0x8B27BC", VA = "0x8B27BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0x8B2948", Offset = "0x8B2948", VA = "0x8B2948")]
	private void UpdateColorOverLifetime(float alphaMult)
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0x8B2B6C", Offset = "0x8B2B6C", VA = "0x8B2B6C")]
	private Color GetColorWithAlpha(Color color, float alpha)
	{
		return default(Color);
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0x8B2B74", Offset = "0x8B2B74", VA = "0x8B2B74")]
	private Gradient SetAlphaOnGradient(Gradient gradient, Gradient originalGradient, float alpha)
	{
		return null;
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0x8B2C48", Offset = "0x8B2C48", VA = "0x8B2C48")]
	public SetFadeOnEmitter()
	{
	}
}
[Token(Token = "0x2000180")]
public class SetPositionEventTrigger : MonoBehaviour
{
	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_OnSetPosition;

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0x8B3060", Offset = "0x8B3060", VA = "0x8B3060")]
	public void SetPosition(Vector3 location)
	{
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0x8B30DC", Offset = "0x8B30DC", VA = "0x8B30DC")]
	public SetPositionEventTrigger()
	{
	}
}
[Token(Token = "0x2000181")]
public class SetupStampIconFXForTutorial : MonoBehaviour
{
	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleBundle m_particleBundle;

	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_baseFxScale;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_topFxScale;

	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_topFxPositionY;

	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleBundleInstance m_particleBundleInstanceBase;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleBundleInstance m_particleBundleInstanceTop;

	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_setupComplete;

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0x8B347C", Offset = "0x8B347C", VA = "0x8B347C")]
	private void SetupStampFX()
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0x8B364C", Offset = "0x8B364C", VA = "0x8B364C")]
	public void StopStampFX()
	{
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0x8B3688", Offset = "0x8B3688", VA = "0x8B3688")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0x8B3698", Offset = "0x8B3698", VA = "0x8B3698")]
	public SetupStampIconFXForTutorial()
	{
	}
}
[Token(Token = "0x2000182")]
public class ShowHideCursor2D : MonoBehaviour
{
	[Token(Token = "0x6000B56")]
	[Address(RVA = "0x8B45E8", Offset = "0x8B45E8", VA = "0x8B45E8")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0x8B4614", Offset = "0x8B4614", VA = "0x8B4614")]
	public void Show()
	{
	}

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0x8B4640", Offset = "0x8B4640", VA = "0x8B4640")]
	public ShowHideCursor2D()
	{
	}
}
[Token(Token = "0x2000183")]
public class SprinkleScatter : MonoBehaviour
{
	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] m_particles;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.ShapeModule m_shapeModule;

	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_particleSystemWasFound;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool m_isScattered;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_scatterRadius;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_origRadius;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int m_scatterTimerResetVal;

	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_scatterTimer;

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0x8B7134", Offset = "0x8B7134", VA = "0x8B7134")]
	public void Scatter()
	{
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0x8B71C4", Offset = "0x8B71C4", VA = "0x8B71C4")]
	private void UnScatter()
	{
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0x8B7244", Offset = "0x8B7244", VA = "0x8B7244")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0x8B7358", Offset = "0x8B7358", VA = "0x8B7358")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0x8B739C", Offset = "0x8B739C", VA = "0x8B739C")]
	public SprinkleScatter()
	{
	}
}
[Token(Token = "0x2000184")]
public class SprinkleVicinityRaycast : MonoBehaviour
{
	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_layerMask;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int m_sprinkleLayer;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_growableLayer;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SprinkleVicinityRaycast s_instance;

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0x8B74B8", Offset = "0x8B74B8", VA = "0x8B74B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0x8B7580", Offset = "0x8B7580", VA = "0x8B7580")]
	public Vector3 VicinityRaycast(Vector3 pos, string growSurfaceTag)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0x8B7720", Offset = "0x8B7720", VA = "0x8B7720")]
	private bool CheckResultingPosition(Vector3 pos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0x8B77BC", Offset = "0x8B77BC", VA = "0x8B77BC")]
	public Vector3 VicinityCheck(Vector3 center, float innerRadius, float outerRadius, string growSurfaceTag)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B62")]
	[Address(RVA = "0x8B78D8", Offset = "0x8B78D8", VA = "0x8B78D8")]
	private Vector3 RandomCircle(Vector3 center, float inner, float outer)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0x8B7A74", Offset = "0x8B7A74", VA = "0x8B7A74")]
	public SprinkleVicinityRaycast()
	{
	}
}
[Token(Token = "0x2000185")]
public class StrandControl : MonoBehaviour
{
	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool triggered;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] m_strandsToActivate;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool[] m_strandsForward;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 m_position;

	[Token(Token = "0x6000B64")]
	[Address(RVA = "0x798DB0", Offset = "0x798DB0", VA = "0x798DB0")]
	public float ReturnDistance(Vector3 pos)
	{
		return default(float);
	}

	[Token(Token = "0x6000B65")]
	[Address(RVA = "0x798E58", Offset = "0x798E58", VA = "0x798E58")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000B66")]
	[Address(RVA = "0x798F9C", Offset = "0x798F9C", VA = "0x798F9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0x798FD8", Offset = "0x798FD8", VA = "0x798FD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0x798FDC", Offset = "0x798FDC", VA = "0x798FDC")]
	public StrandControl()
	{
	}
}
[Token(Token = "0x2000186")]
public class TerrainParticleSplash : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem[] m_particleSys;

	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float m_splashOffset;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int[] m_numSplashParticles;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int[] m_numDragParticles;

	[Token(Token = "0x4000C1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool m_flatSurface;

	[Token(Token = "0x4000C1B")]
	private const float m_minDistanceBetweenFrames = 1f;

	[Token(Token = "0x4000C1C")]
	private const float m_dragSpeedMultiplier = 10f;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] m_lastFramePositions;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private WaterSoundController m_waterSoundController;

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0x79D7B8", Offset = "0x79D7B8", VA = "0x79D7B8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0x79D820", Offset = "0x79D820", VA = "0x79D820", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0x79D960", Offset = "0x79D960", VA = "0x79D960", Slot = "27")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0x79DB1C", Offset = "0x79DB1C", VA = "0x79DB1C", Slot = "14")]
	protected override void OnCursorOver(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0x79DBD8", Offset = "0x79DBD8", VA = "0x79DBD8", Slot = "15")]
	protected override void OnCursorLeave(int cursorIndex)
	{
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0x79DC6C", Offset = "0x79DC6C", VA = "0x79DC6C", Slot = "22")]
	protected override bool CursorOnTriggerStay(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0x79DA1C", Offset = "0x79DA1C", VA = "0x79DA1C")]
	public void Splash(Vector3 contactPoint, Vector3 contactNormal)
	{
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0x79DE8C", Offset = "0x79DE8C", VA = "0x79DE8C")]
	public void Drag(Vector3 collisionPoint, Vector3 dragNormal, float dragSpeed)
	{
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0x79DE94", Offset = "0x79DE94", VA = "0x79DE94")]
	private void Emit(Vector3 collisionPoint, Vector3 collisionNormal, int[] numParticles, float speed)
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0x79E128", Offset = "0x79E128", VA = "0x79E128")]
	public TerrainParticleSplash()
	{
	}
}
[Token(Token = "0x2000187")]
public class TurnOffParent : StateMachineBehaviour
{
	[Token(Token = "0x6000B73")]
	[Address(RVA = "0x7A43EC", Offset = "0x7A43EC", VA = "0x7A43EC", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0x7A4438", Offset = "0x7A4438", VA = "0x7A4438")]
	public TurnOffParent()
	{
	}
}
[Token(Token = "0x2000188")]
public class TurtleCreateGrowableTutorial : MonoBehaviour
{
	[Token(Token = "0x4000C1F")]
	private const float PING_OFFSET_DISTANCE = 2f;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool m_tutorialHasBegun;

	[Token(Token = "0x4000C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_activationDelay;

	[Token(Token = "0x4000C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_pingInterval;

	[Token(Token = "0x4000C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_treeIcon;

	[Token(Token = "0x4000C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Camera m_camera;

	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Growable m_growable;

	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_activating;

	[Token(Token = "0x4000C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_activationTime;

	[Token(Token = "0x4000C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_lastPingTime;

	[Token(Token = "0x4000C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int m_lastPingedTransform;

	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private InteractionMutex m_colorChangeMutex;

	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private InteractionMutex m_sizeChangeMutex;

	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private InteractionMutex m_shapeChangeMutex;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform[] m_starsTransforms;

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool m_IsChangeColorComplete;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool m_IsChangeSizeComplete;

	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	private bool m_IsChangeShapeComplete;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent m_OnTutorialComplete;

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0x7A4440", Offset = "0x7A4440", VA = "0x7A4440")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0x7A4610", Offset = "0x7A4610", VA = "0x7A4610")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0x7A47E8", Offset = "0x7A47E8", VA = "0x7A47E8")]
	private void ResetTreeStamp(object obj)
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0x7A48D4", Offset = "0x7A48D4", VA = "0x7A48D4")]
	private void StartActivation(object obj)
	{
	}

	[Token(Token = "0x6000B79")]
	[Address(RVA = "0x7A4A60", Offset = "0x7A4A60", VA = "0x7A4A60")]
	private void ReleaseInteractionMutex(InteractionMutex mutex)
	{
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0x7A4A90", Offset = "0x7A4A90", VA = "0x7A4A90")]
	private void ShowStars()
	{
	}

	[Token(Token = "0x6000B7B")]
	[Address(RVA = "0x7A4D3C", Offset = "0x7A4D3C", VA = "0x7A4D3C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000B7C")]
	[Address(RVA = "0x7A4F68", Offset = "0x7A4F68", VA = "0x7A4F68")]
	private void ChangeColorComplete(object obj)
	{
	}

	[Token(Token = "0x6000B7D")]
	[Address(RVA = "0x7A4FE4", Offset = "0x7A4FE4", VA = "0x7A4FE4")]
	private void ChangeSizeComplete(object obj)
	{
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0x7A5040", Offset = "0x7A5040", VA = "0x7A5040")]
	private void ChangeShapeComplete(object obj)
	{
	}

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0x7A4FC4", Offset = "0x7A4FC4", VA = "0x7A4FC4")]
	private void TutorialCheck()
	{
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0x7A509C", Offset = "0x7A509C", VA = "0x7A509C")]
	private void TutorialComplete()
	{
	}

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0x7A4DD0", Offset = "0x7A4DD0", VA = "0x7A4DD0")]
	private void PingNextStar()
	{
	}

	[Token(Token = "0x6000B82")]
	[Address(RVA = "0x7A50F8", Offset = "0x7A50F8", VA = "0x7A50F8")]
	public TurtleCreateGrowableTutorial()
	{
	}
}
[Token(Token = "0x2000189")]
public class UnityEventTrigger : MonoBehaviour
{
	[Token(Token = "0x4000C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EventBarn.SerializableEventType m_eventToListenFor;

	[Token(Token = "0x4000C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent m_eventsToTrigger;

	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_hasRegistered;

	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool m_triggerWhenEnabled;

	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool m_repeat;

	[Token(Token = "0x6000B83")]
	[Address(RVA = "0x7A5BE8", Offset = "0x7A5BE8", VA = "0x7A5BE8")]
	public void OnEvent(object obj)
	{
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0x7A5C40", Offset = "0x7A5C40", VA = "0x7A5C40")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0x7A5D28", Offset = "0x7A5D28", VA = "0x7A5D28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0x7A5D8C", Offset = "0x7A5D8C", VA = "0x7A5D8C")]
	public void RemoveListeners()
	{
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0x7A5E40", Offset = "0x7A5E40", VA = "0x7A5E40")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x7A5E44", Offset = "0x7A5E44", VA = "0x7A5E44")]
	public UnityEventTrigger()
	{
	}
}
[Token(Token = "0x200018A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7492D8", Offset = "0x7492D8")]
public class VRPalleteRotationReset : CursorInputMonoBehaviour
{
	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AnimationCurve m_slowInOutCurve;

	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float m_rotateSpeed;

	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_rotateTimer;

	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_isRotating;

	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Quaternion m_startRotation;

	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion m_endRotation;

	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool m_previousIsUsingVRController;

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x7ABD44", Offset = "0x7ABD44", VA = "0x7ABD44", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0x7ABEB0", Offset = "0x7ABEB0", VA = "0x7ABEB0", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x7AC23C", Offset = "0x7AC23C", VA = "0x7AC23C", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIdx, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x7AC244", Offset = "0x7AC244", VA = "0x7AC244", Slot = "13")]
	protected override void OnCursorReleased(int cursorIdx)
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x7AC0E4", Offset = "0x7AC0E4", VA = "0x7AC0E4")]
	private void ResetRotation()
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0x7AC248", Offset = "0x7AC248", VA = "0x7AC248")]
	public VRPalleteRotationReset()
	{
	}
}
[Token(Token = "0x200018B")]
public class AdditiveLoadRandomScene : MonoBehaviour
{
	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] scenesToLoad;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_currentPick;

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0xA4F7E8", Offset = "0xA4F7E8", VA = "0xA4F7E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0xA4F85C", Offset = "0xA4F85C", VA = "0xA4F85C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0xA4F9B0", Offset = "0xA4F9B0", VA = "0xA4F9B0")]
	public AdditiveLoadRandomScene()
	{
	}
}
[Token(Token = "0x200018C")]
public class AddRandomColor : MonoBehaviour
{
	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_materialIndex;

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material[] m_materials;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color[] m_colors;

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0xA4F584", Offset = "0xA4F584", VA = "0xA4F584")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0xA4F5F0", Offset = "0xA4F5F0", VA = "0xA4F5F0")]
	private void GetRandomColorFromArray()
	{
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0xA4F664", Offset = "0xA4F664", VA = "0xA4F664")]
	private void AddColor(Color myColor)
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0xA4F788", Offset = "0xA4F788", VA = "0xA4F788")]
	public AddRandomColor()
	{
	}
}
[Token(Token = "0x200018D")]
public class AkBasePathGetter
{
	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string DefaultBasePath;

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0xA59004", Offset = "0xA59004", VA = "0xA59004")]
	private static void GetCustomPlatformName(ref string platformName)
	{
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0xA59054", Offset = "0xA59054", VA = "0xA59054")]
	public static string GetPlatformName()
	{
		return null;
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0xA59100", Offset = "0xA59100", VA = "0xA59100")]
	public static string GetPlatformBasePath()
	{
		return null;
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0xA591BC", Offset = "0xA591BC", VA = "0xA591BC")]
	public static string GetFullSoundBankPath()
	{
		return null;
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0xA5933C", Offset = "0xA5933C", VA = "0xA5933C")]
	public static void FixSlashes(ref string path, char separatorChar, char badChar, bool addTrailingSlash)
	{
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0xA59288", Offset = "0xA59288", VA = "0xA59288")]
	public static void FixSlashes(ref string path)
	{
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0xA58CF8", Offset = "0xA58CF8", VA = "0xA58CF8")]
	public static string GetSoundbankBasePath()
	{
		return null;
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0xA59488", Offset = "0xA59488", VA = "0xA59488")]
	public AkBasePathGetter()
	{
	}
}
[Token(Token = "0x200018E")]
public class AlignBillboardWithCamera : MonoBehaviour
{
	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0x841F2C", Offset = "0x841F2C", VA = "0x841F2C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0x842004", Offset = "0x842004", VA = "0x842004")]
	public AlignBillboardWithCamera()
	{
	}
}
[Token(Token = "0x200018F")]
public class AnimateVRRig : MonoBehaviour
{
	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_startPos;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_startScale;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion m_startRot;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 m_targetPos;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_targetScale;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Quaternion m_targetRot;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_animTimer;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_animDuration;

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0x8432C8", Offset = "0x8432C8", VA = "0x8432C8")]
	public void SetTarget(Transform target, float duration)
	{
	}

	[Token(Token = "0x6000BA2")]
	[Address(RVA = "0x8433D4", Offset = "0x8433D4", VA = "0x8433D4")]
	public void Play()
	{
	}

	[Token(Token = "0x6000BA3")]
	[Address(RVA = "0x8433E0", Offset = "0x8433E0", VA = "0x8433E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BA4")]
	[Address(RVA = "0x8433EC", Offset = "0x8433EC", VA = "0x8433EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BA5")]
	[Address(RVA = "0x8435FC", Offset = "0x8435FC", VA = "0x8435FC")]
	public AnimateVRRig()
	{
	}
}
[Token(Token = "0x2000190")]
public class AnimatorParticlePropertyDriver : ParticlePropertyDriver
{
	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Animator m_animator;

	[Token(Token = "0x6000BA6")]
	[Address(RVA = "0x843800", Offset = "0x843800", VA = "0x843800")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BA7")]
	[Address(RVA = "0x843804", Offset = "0x843804", VA = "0x843804", Slot = "4")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000BA8")]
	[Address(RVA = "0x8438EC", Offset = "0x8438EC", VA = "0x8438EC")]
	public AnimatorParticlePropertyDriver()
	{
	}
}
[Token(Token = "0x2000191")]
public class ArcadeModeEvents : MonoBehaviour
{
	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0x843904", Offset = "0x843904", VA = "0x843904")]
	public ArcadeModeEvents()
	{
	}
}
[Token(Token = "0x2000192")]
public class BeeAnim : MonoBehaviour
{
	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float iX;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float iY;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _uvTieX;

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int _uvTieY;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _fps;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector2 _size;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer _myRenderer;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int _lastIndex;

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0x8447EC", Offset = "0x8447EC", VA = "0x8447EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BAB")]
	[Address(RVA = "0x8448F4", Offset = "0x8448F4", VA = "0x8448F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0x844A20", Offset = "0x844A20", VA = "0x844A20")]
	public BeeAnim()
	{
	}
}
[Token(Token = "0x2000193")]
public class Billboard : MonoBehaviour
{
	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_reverseFace;

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0x845FB0", Offset = "0x845FB0", VA = "0x845FB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0x8460D8", Offset = "0x8460D8", VA = "0x8460D8")]
	public Billboard()
	{
	}
}
[Serializable]
[Token(Token = "0x2000194")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x74933C", Offset = "0x74933C")]
public struct Bool3
{
	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool x;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public bool y;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public bool z;

	[Token(Token = "0x170000D0")]
	public bool Item
	{
		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x63C484", Offset = "0x63C484", VA = "0x63C484")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x63C48C", Offset = "0x63C48C", VA = "0x63C48C")]
		set
		{
		}
	}

	[Token(Token = "0x6000BAF")]
	[Address(RVA = "0x63C3EC", Offset = "0x63C3EC", VA = "0x63C3EC")]
	public Bool3(bool inX, bool inY, bool inZ)
	{
	}

	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0x63C408", Offset = "0x63C408", VA = "0x63C408")]
	public Bool3(bool init)
	{
	}

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0x63C41C", Offset = "0x63C41C", VA = "0x63C41C", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0x63C424", Offset = "0x63C424", VA = "0x63C424", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0x84D9A4", Offset = "0x84D9A4", VA = "0x84D9A4")]
	public static bool operator ==(Bool3 a, Bool3 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BB4")]
	[Address(RVA = "0x84DA00", Offset = "0x84DA00", VA = "0x84DA00")]
	public static bool operator !=(Bool3 a, Bool3 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BB5")]
	[Address(RVA = "0x84DA58", Offset = "0x84DA58", VA = "0x84DA58")]
	public static Bool3 operator &(Bool3 a, Bool3 b)
	{
		return default(Bool3);
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0x84DAA8", Offset = "0x84DAA8", VA = "0x84DAA8")]
	public static Bool3 operator |(Bool3 a, Bool3 b)
	{
		return default(Bool3);
	}

	[Token(Token = "0x6000BB7")]
	[Address(RVA = "0x84DAD4", Offset = "0x84DAD4", VA = "0x84DAD4")]
	public static bool operator true(Bool3 a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BB8")]
	[Address(RVA = "0x84DB24", Offset = "0x84DB24", VA = "0x84DB24")]
	public static bool operator false(Bool3 a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BB9")]
	[Address(RVA = "0x63C42C", Offset = "0x63C42C", VA = "0x63C42C")]
	public bool Any()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BBA")]
	[Address(RVA = "0x63C454", Offset = "0x63C454", VA = "0x63C454")]
	public bool All()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0x63C47C", Offset = "0x63C47C", VA = "0x63C47C", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000BBE")]
	[Address(RVA = "0x84DD90", Offset = "0x84DD90", VA = "0x84DD90")]
	public static Vector3 Select(Bool3 mask, Vector3 a, Vector3 b)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000195")]
public static class Bool3Extension
{
	[Token(Token = "0x6000BBF")]
	[Address(RVA = "0x84DDE0", Offset = "0x84DDE0", VA = "0x84DDE0")]
	public static Vector3 Select(this Vector3 a, Bool3 mask, Vector3 b)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000196")]
public class ChangeRenderQueue : MonoBehaviour
{
	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_renderQueue;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material m_material;

	[Token(Token = "0x6000BC0")]
	[Address(RVA = "0x850AEC", Offset = "0x850AEC", VA = "0x850AEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BC1")]
	[Address(RVA = "0x850B6C", Offset = "0x850B6C", VA = "0x850B6C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BC2")]
	[Address(RVA = "0x850B90", Offset = "0x850B90", VA = "0x850B90")]
	public ChangeRenderQueue()
	{
	}
}
[Token(Token = "0x2000197")]
public class CheckGrowMeshZoneColors : MonoBehaviour
{
	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0x850B98", Offset = "0x850B98", VA = "0x850B98")]
	private void LogZoneColorError(GameObject go)
	{
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x850C40", Offset = "0x850C40", VA = "0x850C40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x850CA8", Offset = "0x850CA8", VA = "0x850CA8")]
	public CheckGrowMeshZoneColors()
	{
	}
}
[Token(Token = "0x2000198")]
public class ConnectSphereColliders : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000489")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AEE0", Offset = "0x74AEE0")]
	private sealed class <>c
	{
		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<SphereCollider, bool> <>9__4_0;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<CapsuleCollider, bool> <>9__4_1;

		[Token(Token = "0x6002339")]
		[Address(RVA = "0x7B2830", Offset = "0x7B2830", VA = "0x7B2830")]
		public <>c()
		{
		}

		[Token(Token = "0x600233A")]
		[Address(RVA = "0x7B2838", Offset = "0x7B2838", VA = "0x7B2838")]
		internal bool <Start>b__4_0(SphereCollider sphereCollider)
		{
			return default(bool);
		}

		[Token(Token = "0x600233B")]
		[Address(RVA = "0x7B28C4", Offset = "0x7B28C4", VA = "0x7B28C4")]
		internal bool <Start>b__4_1(CapsuleCollider sphereCollider)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Cloth m_cloth;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ClothSphereColliderPair[] m_originalSphereColliders;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ClothSphereColliderPair[] m_sphereCollidersWithCursor;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider[] m_cursorCapsuleColliders;

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x7B221C", Offset = "0x7B221C", VA = "0x7B221C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x7B2624", Offset = "0x7B2624", VA = "0x7B2624")]
	private void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x7B2700", Offset = "0x7B2700", VA = "0x7B2700")]
	private void OnTriggerExit(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0x7B27C4", Offset = "0x7B27C4", VA = "0x7B27C4")]
	public ConnectSphereColliders()
	{
	}
}
[Token(Token = "0x2000199")]
public class ControlAmbientAnimations : MonoBehaviour
{
	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_minSpeed;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_maxSpeed;

	[Token(Token = "0x4000C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator[] m_animators;

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0x7B51F0", Offset = "0x7B51F0", VA = "0x7B51F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0x7B52C4", Offset = "0x7B52C4", VA = "0x7B52C4")]
	private void SetOffsetOnAnimator(Animator animator, float normalizedTime)
	{
	}

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0x7B52EC", Offset = "0x7B52EC", VA = "0x7B52EC")]
	public ControlAmbientAnimations()
	{
	}
}
[Token(Token = "0x200019A")]
public abstract class CursorInputMonoBehaviour : MonoBehaviour
{
	[Token(Token = "0x200048A")]
	public class CursorInputSort : IComparer<CursorInputMonoBehaviour>
	{
		[Token(Token = "0x600233C")]
		[Address(RVA = "0x7BE768", Offset = "0x7BE768", VA = "0x7BE768", Slot = "4")]
		public int Compare(CursorInputMonoBehaviour x, CursorInputMonoBehaviour y)
		{
			return default(int);
		}

		[Token(Token = "0x600233D")]
		[Address(RVA = "0x7BE6E8", Offset = "0x7BE6E8", VA = "0x7BE6E8")]
		public CursorInputSort()
		{
		}
	}

	[Token(Token = "0x4000C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int m_activeCursorIndex;

	[Token(Token = "0x4000C63")]
	private const int MAX_CURSORINPUTMONOBEHAVIOURS = 2000;

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly CursorInputMonoBehaviour[] ActiveCursorInputMonoBehaviours;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int m_numBehaviours;

	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int m_numActiveBehaviours;

	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static bool m_dirtyBehaviours;

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool[] m_grabbed;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool[] m_cursorIsOver;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private InteractionMutex m_cursorMutex;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool m_lateRelease;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_amortizedStart;

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int m_amortizedStartCalls;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static CursorInputSort m_cursorInputSort;

	[Token(Token = "0x170000D1")]
	public string ActiveCursorTag
	{
		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x7BC5A8", Offset = "0x7BC5A8", VA = "0x7BC5A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D2")]
	public int ActiveCursorIndex
	{
		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x7BC648", Offset = "0x7BC648", VA = "0x7BC648")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000D3")]
	public static int CursorInputLength
	{
		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x7BC650", Offset = "0x7BC650", VA = "0x7BC650")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000D4")]
	public static int CursorInputActive
	{
		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x7BC6B8", Offset = "0x7BC6B8", VA = "0x7BC6B8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000D5")]
	private bool[] GrabbedItem
	{
		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x7BC720", Offset = "0x7BC720", VA = "0x7BC720")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D6")]
	private bool[] CursorIsOver
	{
		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x7BC7AC", Offset = "0x7BC7AC", VA = "0x7BC7AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D7")]
	public bool AmortizedStart
	{
		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x7BC838", Offset = "0x7BC838", VA = "0x7BC838")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000D8")]
	public bool AnyGrabbed
	{
		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x7BCA24", Offset = "0x7BCA24", VA = "0x7BCA24")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000D9")]
	public bool Grabbed
	{
		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x7BCAD4", Offset = "0x7BCAD4", VA = "0x7BCAD4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000DA")]
	public bool Over
	{
		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x7BCB24", Offset = "0x7BCB24", VA = "0x7BCB24")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0x7BC840", Offset = "0x7BC840", VA = "0x7BC840")]
	public bool IsGrabbed(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0x7BC88C", Offset = "0x7BC88C", VA = "0x7BC88C")]
	public bool IsGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0x7BC8F8", Offset = "0x7BC8F8", VA = "0x7BC8F8")]
	public bool IsOver(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0x7BC944", Offset = "0x7BC944", VA = "0x7BC944")]
	public void ForceGrab(int cursorIndex)
	{
	}

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0x7BCB74", Offset = "0x7BCB74", VA = "0x7BCB74")]
	public static void ResetActiveBehaviours()
	{
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0x7BCBEC", Offset = "0x7BCBEC", VA = "0x7BCBEC")]
	public static void SortAndCountActiveBehaviours()
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0x7BCDDC", Offset = "0x7BCDDC", VA = "0x7BCDDC")]
	protected void SetCursorLayer()
	{
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0x7BCE88", Offset = "0x7BCE88", VA = "0x7BCE88", Slot = "4")]
	protected virtual bool ShouldIgnoreMutex()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0x7BCE90", Offset = "0x7BCE90", VA = "0x7BCE90", Slot = "5")]
	protected virtual bool FilterCursorCollision(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0x7BCE98", Offset = "0x7BCE98", VA = "0x7BCE98", Slot = "6")]
	public virtual void CursorOnReset()
	{
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0x7BCE9C", Offset = "0x7BCE9C", VA = "0x7BCE9C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0x7BCF18", Offset = "0x7BCF18", VA = "0x7BCF18")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0x7BD060", Offset = "0x7BD060", VA = "0x7BD060")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0x7BD178", Offset = "0x7BD178", VA = "0x7BD178")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0x7BD1CC", Offset = "0x7BD1CC", VA = "0x7BD1CC", Slot = "7")]
	protected virtual bool CursorAmortizedStart(int callCount)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0x7BD1D4", Offset = "0x7BD1D4", VA = "0x7BD1D4", Slot = "8")]
	protected virtual void CursorAwake()
	{
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0x7BD1D8", Offset = "0x7BD1D8", VA = "0x7BD1D8", Slot = "9")]
	protected virtual void CursorStart()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0x7BD1DC", Offset = "0x7BD1DC", VA = "0x7BD1DC", Slot = "10")]
	protected virtual void CursorOnEnable()
	{
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0x7BD1E0", Offset = "0x7BD1E0", VA = "0x7BD1E0", Slot = "11")]
	protected virtual void CursorOnDisable()
	{
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0x7BD1E4", Offset = "0x7BD1E4", VA = "0x7BD1E4", Slot = "12")]
	protected virtual void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0x7BD1E8", Offset = "0x7BD1E8", VA = "0x7BD1E8", Slot = "13")]
	protected virtual void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0x7BD1EC", Offset = "0x7BD1EC", VA = "0x7BD1EC", Slot = "14")]
	protected virtual void OnCursorOver(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0x7BD1F0", Offset = "0x7BD1F0", VA = "0x7BD1F0", Slot = "15")]
	protected virtual void OnCursorLeave(int cursorIndex)
	{
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0x7BD1F4", Offset = "0x7BD1F4", VA = "0x7BD1F4", Slot = "16")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0x7BD41C", Offset = "0x7BD41C", VA = "0x7BD41C")]
	protected Ray GetCursorRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0x7BD458", Offset = "0x7BD458", VA = "0x7BD458")]
	protected Vector3 GetCursorPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0x7BD48C", Offset = "0x7BD48C", VA = "0x7BD48C", Slot = "17")]
	protected virtual Vector3 GetCursorProjectedPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0x7BD4C0", Offset = "0x7BD4C0", VA = "0x7BD4C0")]
	protected Vector3 GetCursorVelWorld()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0x7BD4F4", Offset = "0x7BD4F4", VA = "0x7BD4F4")]
	protected Transform GetCursorTransform()
	{
		return null;
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0x7BD528", Offset = "0x7BD528", VA = "0x7BD528")]
	protected Vector3 InverseTransformDirection(Vector3 dir)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0x7BD584", Offset = "0x7BD584", VA = "0x7BD584")]
	protected float GetTimeSpentEngaged()
	{
		return default(float);
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0x7BD5B8", Offset = "0x7BD5B8", VA = "0x7BD5B8")]
	protected bool IsEngaged()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0x7BD5EC", Offset = "0x7BD5EC", VA = "0x7BD5EC")]
	protected bool EngageAction()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0x7BD620", Offset = "0x7BD620", VA = "0x7BD620")]
	protected bool EngageActionFromFixedUpdate()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0x7BD654", Offset = "0x7BD654", VA = "0x7BD654")]
	protected bool DisengageAction()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0x7BD688", Offset = "0x7BD688", VA = "0x7BD688")]
	protected bool DisengageActionFromFixedUpdate()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BFB")]
	[Address(RVA = "0x7BD6BC", Offset = "0x7BD6BC", VA = "0x7BD6BC")]
	protected Collider GetCursorCollider()
	{
		return null;
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0x7BD6F0", Offset = "0x7BD6F0", VA = "0x7BD6F0", Slot = "18")]
	protected virtual bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0x7BD6F8", Offset = "0x7BD6F8", VA = "0x7BD6F8", Slot = "19")]
	protected virtual bool CursorFixedUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0x7BD700", Offset = "0x7BD700", VA = "0x7BD700", Slot = "20")]
	protected virtual bool CursorLateUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0x7BD708", Offset = "0x7BD708", VA = "0x7BD708", Slot = "21")]
	protected virtual bool CursorOnTriggerEnter(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0x7BD710", Offset = "0x7BD710", VA = "0x7BD710", Slot = "22")]
	protected virtual bool CursorOnTriggerStay(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0x7BD718", Offset = "0x7BD718", VA = "0x7BD718", Slot = "23")]
	protected virtual bool CursorOnTriggerExit(int cursorIndex, Collider otherCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0x7BD720", Offset = "0x7BD720", VA = "0x7BD720", Slot = "24")]
	protected virtual bool CursorOnCollisionEnter(int cursorIndex, Collision collision)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0x7BD728", Offset = "0x7BD728", VA = "0x7BD728", Slot = "25")]
	protected virtual bool CursorOnCollisionStay(int cursorIndex, Collision collision)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0x7BD730", Offset = "0x7BD730", VA = "0x7BD730", Slot = "26")]
	protected virtual bool CursorOnCollisionExit(int cursorIndex, Collision collision)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0x7BD738", Offset = "0x7BD738", VA = "0x7BD738", Slot = "27")]
	protected virtual void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0x7BDA1C", Offset = "0x7BDA1C", VA = "0x7BDA1C", Slot = "28")]
	protected virtual void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0x7BDC44", Offset = "0x7BDC44", VA = "0x7BDC44", Slot = "29")]
	protected virtual void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x6000C08")]
	[Address(RVA = "0x7BDED4", Offset = "0x7BDED4", VA = "0x7BDED4", Slot = "30")]
	protected virtual void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000C09")]
	[Address(RVA = "0x7BD878", Offset = "0x7BD878", VA = "0x7BD878")]
	private bool CursorOverEnter(Collider otherCollider, int i)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C0A")]
	[Address(RVA = "0x7BDFE0", Offset = "0x7BDFE0", VA = "0x7BDFE0", Slot = "31")]
	protected virtual void OnTriggerStay(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0x7BDB34", Offset = "0x7BDB34", VA = "0x7BDB34")]
	private void CursorStay(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0x7BE0D0", Offset = "0x7BE0D0", VA = "0x7BE0D0", Slot = "32")]
	protected virtual void OnTriggerExit(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000C0D")]
	[Address(RVA = "0x7BDD4C", Offset = "0x7BDD4C", VA = "0x7BDD4C")]
	private void CursorOverExit(int cursorIndex)
	{
	}

	[Token(Token = "0x6000C0E")]
	[Address(RVA = "0x7BE1BC", Offset = "0x7BE1BC", VA = "0x7BE1BC", Slot = "33")]
	public virtual void CursorInputFixedUpdate()
	{
	}

	[Token(Token = "0x6000C0F")]
	[Address(RVA = "0x7BE26C", Offset = "0x7BE26C", VA = "0x7BE26C", Slot = "34")]
	public virtual void CursorInputLateUpdate()
	{
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0x7BE4AC", Offset = "0x7BE4AC", VA = "0x7BE4AC", Slot = "35")]
	public virtual void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000C11")]
	[Address(RVA = "0x7BE330", Offset = "0x7BE330", VA = "0x7BE330")]
	private void CursorRelease(int cursorIndex)
	{
	}

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0x7BE5CC", Offset = "0x7BE5CC", VA = "0x7BE5CC")]
	protected void ClearFlags()
	{
	}

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0x7B9A94", Offset = "0x7B9A94", VA = "0x7B9A94")]
	protected CursorInputMonoBehaviour()
	{
	}

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0x7BE6F0", Offset = "0x7BE6F0", VA = "0x7BE6F0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7573E4", Offset = "0x7573E4")]
	private bool <OnDestroy>b__57_0(CursorInputMonoBehaviour cursorInput)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x200019B")]
public class AnimatorDelayBundle
{
	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public string Name;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator m_animator;

	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_delayAnimator;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_postDelayTrigger;

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0x8437F8", Offset = "0x8437F8", VA = "0x8437F8")]
	public AnimatorDelayBundle()
	{
	}
}
[Token(Token = "0x200019C")]
public class DelayAnimators : MonoBehaviour
{
	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_delayTime;

	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimatorDelayBundle[] m_animatorsToDelay;

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0x7C0CE8", Offset = "0x7C0CE8", VA = "0x7C0CE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C18")]
	[Address(RVA = "0x7C0DFC", Offset = "0x7C0DFC", VA = "0x7C0DFC")]
	private void StartAnimators()
	{
	}

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0x7C0F34", Offset = "0x7C0F34", VA = "0x7C0F34")]
	private bool ValidateTriggerName(Animator animator, string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0x7C1008", Offset = "0x7C1008", VA = "0x7C1008")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0x7C116C", Offset = "0x7C116C", VA = "0x7C116C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0x7C12D4", Offset = "0x7C12D4", VA = "0x7C12D4")]
	public DelayAnimators()
	{
	}
}
[Token(Token = "0x200019D")]
public class DemoModifications
{
	[Token(Token = "0x4000C75")]
	private const int kMaxParticlesPerEmitter = 200;

	[Token(Token = "0x4000C76")]
	private const string kBirdCutsceneSceneName = "Bird_Cutscene_3D";

	[Token(Token = "0x4000C77")]
	private const string kBirdCreateStormSceneName = "Bird_Create_Storm";

	[Token(Token = "0x4000C78")]
	private const string kTurtleCreateSceneName = "Turtle_Create";

	[Token(Token = "0x4000C79")]
	private const string kTurtleKineticSceneName = "Turtle_Kinetic";

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0x7C1968", Offset = "0x7C1968", VA = "0x7C1968")]
	public static void ApplyDemoModifications(UnityEngine.SceneManagement.Scene scene)
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0x7C1A74", Offset = "0x7C1A74", VA = "0x7C1A74")]
	public static void ApplyBirdCreateStormModifications(UnityEngine.SceneManagement.Scene scene)
	{
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0x7C1A78", Offset = "0x7C1A78", VA = "0x7C1A78")]
	public static void ReduceParticlesInScene(UnityEngine.SceneManagement.Scene scene)
	{
	}

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0x7C1A70", Offset = "0x7C1A70", VA = "0x7C1A70")]
	public static void ApplyBirdCutsceneModifications(UnityEngine.SceneManagement.Scene scene)
	{
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0x7C1A6C", Offset = "0x7C1A6C", VA = "0x7C1A6C")]
	public static void ApplyTurtleKineticModifications()
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0x7C1A68", Offset = "0x7C1A68", VA = "0x7C1A68")]
	public static void ApplyTurtleCreateModifications(UnityEngine.SceneManagement.Scene turtleCreateScene)
	{
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0x7C1BBC", Offset = "0x7C1BBC", VA = "0x7C1BBC")]
	public static void ApplyChangeLevelModifications(ChangeLevel changeLevel)
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0x7C1C50", Offset = "0x7C1C50", VA = "0x7C1C50")]
	public DemoModifications()
	{
	}
}
[Token(Token = "0x200019E")]
public class DisableForVRTarget : MonoBehaviour
{
	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool[] ShouldDisableForTarget;

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0x7F16D0", Offset = "0x7F16D0", VA = "0x7F16D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0x7F1794", Offset = "0x7F1794", VA = "0x7F1794")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0x7F185C", Offset = "0x7F185C", VA = "0x7F185C")]
	public DisableForVRTarget()
	{
	}
}
[Token(Token = "0x200019F")]
public class DisableMonoBehaviourForVRTarget : MonoBehaviour
{
	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool[] ShouldDisableForTarget;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MonoBehaviour[] m_behavioursToDisable;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider[] m_colliders;

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0x7F1A6C", Offset = "0x7F1A6C", VA = "0x7F1A6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0x7F1BFC", Offset = "0x7F1BFC", VA = "0x7F1BFC")]
	public DisableMonoBehaviourForVRTarget()
	{
	}
}
[Token(Token = "0x20001A0")]
public class EngineLoader : MonoBehaviour
{
	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_engine;

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0x7F484C", Offset = "0x7F484C", VA = "0x7F484C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0x7F49A4", Offset = "0x7F49A4", VA = "0x7F49A4")]
	private void DumpSysInfo()
	{
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0x7F4CE4", Offset = "0x7F4CE4", VA = "0x7F4CE4")]
	public static bool IsMinSpec()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0x7F4CEC", Offset = "0x7F4CEC", VA = "0x7F4CEC")]
	public static bool IsQuest2()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0x7F4D58", Offset = "0x7F4D58", VA = "0x7F4D58")]
	public static void MinSpecReduceViewportScale()
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0x7F4D5C", Offset = "0x7F4D5C", VA = "0x7F4D5C")]
	public EngineLoader()
	{
	}
}
[Token(Token = "0x20001A1")]
public class FPSDisplay : MonoBehaviour
{
	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float _accumDelta;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int _frames;

	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text fpsGUIText;

	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _lastDisplayUpdate;

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0x7F57C4", Offset = "0x7F57C4", VA = "0x7F57C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0x7F582C", Offset = "0x7F582C", VA = "0x7F582C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0x7F59EC", Offset = "0x7F59EC", VA = "0x7F59EC")]
	public FPSDisplay()
	{
	}
}
[Token(Token = "0x20001A2")]
public static class GamepadHealingCircle
{
	[Token(Token = "0x200048B")]
	private enum Direction
	{
		[Token(Token = "0x4001FE6")]
		Clockwise,
		[Token(Token = "0x4001FE7")]
		AntiClockwise,
		[Token(Token = "0x4001FE8")]
		Unknown
	}

	[Token(Token = "0x200048C")]
	private class StickInfo
	{
		[Token(Token = "0x200066E")]
		private enum Slope
		{
			[Token(Token = "0x40022A0")]
			DownRight,
			[Token(Token = "0x40022A1")]
			DownLeft,
			[Token(Token = "0x40022A2")]
			UpLeft,
			[Token(Token = "0x40022A3")]
			UpRight,
			[Token(Token = "0x40022A4")]
			None
		}

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Direction m_dir;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 m_prev;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 m_pos;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Slope m_lastSlope;

		[Token(Token = "0x600233E")]
		[Address(RVA = "0x8D9FC0", Offset = "0x8D9FC0", VA = "0x8D9FC0")]
		public void Reset(bool resetHealingCircle = false)
		{
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0x8DA210", Offset = "0x8DA210", VA = "0x8DA210")]
		private Slope DetermineSlope(Vector2 pos, Vector2 prev)
		{
			return default(Slope);
		}

		[Token(Token = "0x6002340")]
		[Address(RVA = "0x8DA270", Offset = "0x8DA270", VA = "0x8DA270")]
		public Direction DetermineDirection(Vector2 pos, Vector2 prev)
		{
			return default(Direction);
		}

		[Token(Token = "0x6002341")]
		[Address(RVA = "0x8D9D74", Offset = "0x8D9D74", VA = "0x8D9D74")]
		public void UpdateCircle(Vector2 newPos)
		{
		}

		[Token(Token = "0x6002342")]
		[Address(RVA = "0x8DA17C", Offset = "0x8DA17C", VA = "0x8DA17C")]
		public StickInfo()
		{
		}
	}

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector2 m_zero;

	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<GamepadInput.AnalogStick, StickInfo> m_stickInfo;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static GamepadInput.AnalogStick m_currentStick;

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x8D9D08", Offset = "0x8D9D08", VA = "0x8D9D08")]
	public static void BeginHealingCircle(GamepadInput.AnalogStick stick)
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x8D3378", Offset = "0x8D3378", VA = "0x8D3378")]
	public static void UpdateHealingCircle(Vector2 pos)
	{
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x8D3584", Offset = "0x8D3584", VA = "0x8D3584")]
	public static bool InHealingCircle()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x8D36B4", Offset = "0x8D36B4", VA = "0x8D36B4")]
	public static void Reset()
	{
	}
}
[Token(Token = "0x20001A3")]
public class GamepadInput : MonoBehaviour
{
	[Token(Token = "0x200048D")]
	public enum GamepadButtons
	{
		[Token(Token = "0x4001FEE")]
		None = 0,
		[Token(Token = "0x4001FEF")]
		A = 1,
		[Token(Token = "0x4001FF0")]
		B = 2,
		[Token(Token = "0x4001FF1")]
		X = 4,
		[Token(Token = "0x4001FF2")]
		Y = 8,
		[Token(Token = "0x4001FF3")]
		LBumper = 16,
		[Token(Token = "0x4001FF4")]
		RBumper = 32,
		[Token(Token = "0x4001FF5")]
		LTrigger = 64,
		[Token(Token = "0x4001FF6")]
		RTrigger = 128,
		[Token(Token = "0x4001FF7")]
		Select = 256,
		[Token(Token = "0x4001FF8")]
		Start = 512,
		[Token(Token = "0x4001FF9")]
		LStick = 1024,
		[Token(Token = "0x4001FFA")]
		RStick = 2048,
		[Token(Token = "0x4001FFB")]
		DPadUp = 4096,
		[Token(Token = "0x4001FFC")]
		DPadDown = 8192,
		[Token(Token = "0x4001FFD")]
		DPadRight = 16384,
		[Token(Token = "0x4001FFE")]
		DPadLeft = 32768,
		[Token(Token = "0x4001FFF")]
		System = 65536,
		[Token(Token = "0x4002000")]
		Special = 131072,
		[Token(Token = "0x4002001")]
		MAX = 17
	}

	[Token(Token = "0x200048E")]
	public enum AnalogStick
	{
		[Token(Token = "0x4002003")]
		Left,
		[Token(Token = "0x4002004")]
		Right,
		[Token(Token = "0x4002005")]
		None
	}

	[Token(Token = "0x200048F")]
	private enum TriggerButton
	{
		[Token(Token = "0x4002007")]
		Left,
		[Token(Token = "0x4002008")]
		Right
	}

	[Token(Token = "0x2000490")]
	private enum ButtonState
	{
		[Token(Token = "0x400200A")]
		None,
		[Token(Token = "0x400200B")]
		Up,
		[Token(Token = "0x400200C")]
		Down,
		[Token(Token = "0x400200D")]
		Held
	}

	[Token(Token = "0x4000C86")]
	private const string GAMEPAD_PROFILES_PATH = "GamepadProfiles/";

	[Token(Token = "0x4000C87")]
	private const float DEFAULT_Y_AXIS_MODIFIER = 1f;

	[Token(Token = "0x4000C88")]
	private const float DEFAULT_AXIS_DEAD_ZONE = 0.04f;

	[Token(Token = "0x4000C89")]
	private const int JOYSTICK_BUTTONS_COUNT = 20;

	[Token(Token = "0x4000C8A")]
	private const int JOYSTICK_MIN_INDEX = 1;

	[Token(Token = "0x4000C8B")]
	private const int JOYSTICK_MAX_INDEX = 8;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly string NO_GAMEPAD;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly string[] IGNORED_CONTROLLERS;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string[] IGNORED_CONTROLLER_PREFIXES;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GamepadInput _instance;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75051C", Offset = "0x75051C")]
	private static bool <GamepadDetected>k__BackingField;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int kEngageButtons;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<GamepadButtons, KeyCode> m_buttonsDictionary;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75052C", Offset = "0x75052C")]
	private string <CurrentControllerName>k__BackingField;

	[Token(Token = "0x4000C94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_controllerIndex;

	[Token(Token = "0x4000C95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int m_joystickOffset;

	[Token(Token = "0x4000C96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_leftStickYModifier;

	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_rightStickYModifier;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_axisDeadZone;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private ButtonState m_leftTriggerState;

	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ButtonState m_rightTriggerState;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private ButtonState m_dPadUpState;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ButtonState m_dPadDownState;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private ButtonState m_dPadRightState;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ButtonState m_dPadLeftState;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool m_triggerDownL;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	private bool m_triggerDownR;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GamepadProfile m_currentProfile;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly Vector3 m_vectorZero;

	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int m_buttonFlags;

	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	private static bool m_swapConfirmButton;

	[Token(Token = "0x170000DB")]
	public static GamepadInput Instance
	{
		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x8DA450", Offset = "0x8DA450", VA = "0x8DA450")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000DC")]
	public static bool GamepadDetected
	{
		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x8DA4B8", Offset = "0x8DA4B8", VA = "0x8DA4B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7573F4", Offset = "0x7573F4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x8DA520", Offset = "0x8DA520", VA = "0x8DA520")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757404", Offset = "0x757404")]
		protected set
		{
		}
	}

	[Token(Token = "0x170000DD")]
	public static GamepadButtons ConfirmButton
	{
		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x8DA590", Offset = "0x8DA590", VA = "0x8DA590")]
		get
		{
			return default(GamepadButtons);
		}
	}

	[Token(Token = "0x170000DE")]
	public static GamepadButtons CancelButton
	{
		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x8DA604", Offset = "0x8DA604", VA = "0x8DA604")]
		get
		{
			return default(GamepadButtons);
		}
	}

	[Token(Token = "0x170000DF")]
	public static GamepadButtons MenuButton
	{
		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x8DA678", Offset = "0x8DA678", VA = "0x8DA678")]
		get
		{
			return default(GamepadButtons);
		}
	}

	[Token(Token = "0x170000E0")]
	public static GamepadButtons RecenterButton
	{
		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x8DA680", Offset = "0x8DA680", VA = "0x8DA680")]
		get
		{
			return default(GamepadButtons);
		}
	}

	[Token(Token = "0x170000E1")]
	public bool ConfirmButtonDown
	{
		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x8CC8F4", Offset = "0x8CC8F4", VA = "0x8CC8F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E2")]
	public bool ConfirmButtonUp
	{
		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x8DA688", Offset = "0x8DA688", VA = "0x8DA688")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E3")]
	public bool CancelButtonDown
	{
		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x8CC5B4", Offset = "0x8CC5B4", VA = "0x8CC5B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E4")]
	public bool CancelButtonUp
	{
		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x8DA6F4", Offset = "0x8DA6F4", VA = "0x8DA6F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E5")]
	public bool MenuButtonUp
	{
		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x8DA760", Offset = "0x8DA760", VA = "0x8DA760")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E6")]
	public bool MenuButtonDown
	{
		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x8DA7C8", Offset = "0x8DA7C8", VA = "0x8DA7C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E7")]
	public bool RecenterButtonDown
	{
		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x8DA830", Offset = "0x8DA830", VA = "0x8DA830")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E8")]
	public bool RecenterButtonUp
	{
		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x8DA898", Offset = "0x8DA898", VA = "0x8DA898")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E9")]
	public string CurrentControllerName
	{
		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x8DA900", Offset = "0x8DA900", VA = "0x8DA900")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757414", Offset = "0x757414")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x8DA908", Offset = "0x8DA908", VA = "0x8DA908")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757424", Offset = "0x757424")]
		private set
		{
		}
	}

	[Token(Token = "0x6000C49")]
	[Address(RVA = "0x8DA910", Offset = "0x8DA910", VA = "0x8DA910")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000C4A")]
	[Address(RVA = "0x8DAA04", Offset = "0x8DAA04", VA = "0x8DAA04")]
	private static string ParseControllerName(string name)
	{
		return null;
	}

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0x8DAA70", Offset = "0x8DAA70", VA = "0x8DAA70")]
	public bool UpdateControllerMapping(string controllerName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0x8DAF64", Offset = "0x8DAF64", VA = "0x8DAF64")]
	private bool IsIgnoredController(string controllerName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0x8DB038", Offset = "0x8DB038", VA = "0x8DB038")]
	public void UpdateGamepadDetection()
	{
	}

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0x8DB03C", Offset = "0x8DB03C", VA = "0x8DB03C")]
	private void IdleUpdate()
	{
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0x8DB39C", Offset = "0x8DB39C", VA = "0x8DB39C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000C50")]
	[Address(RVA = "0x8DB084", Offset = "0x8DB084", VA = "0x8DB084")]
	private void UpdateAxisButtonsState()
	{
	}

	[Token(Token = "0x6000C51")]
	[Address(RVA = "0x8DB6A8", Offset = "0x8DB6A8", VA = "0x8DB6A8")]
	private void UpdateAxisState(float axisValue, bool isPressed, ref ButtonState currentState)
	{
	}

	[Token(Token = "0x6000C52")]
	[Address(RVA = "0x8DB628", Offset = "0x8DB628", VA = "0x8DB628")]
	private float ApplyDeadZone(float axis)
	{
		return default(float);
	}

	[Token(Token = "0x6000C53")]
	[Address(RVA = "0x8DB788", Offset = "0x8DB788", VA = "0x8DB788")]
	private Vector2 ApplyDeadZone(Vector2 axisVector)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C54")]
	[Address(RVA = "0x8D3234", Offset = "0x8D3234", VA = "0x8D3234")]
	public Vector2 GetLeftStickAxis()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C55")]
	[Address(RVA = "0x8D30F0", Offset = "0x8D30F0", VA = "0x8D30F0")]
	public Vector2 GetRightStickAxis()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C56")]
	[Address(RVA = "0x8DB4E8", Offset = "0x8DB4E8", VA = "0x8DB4E8")]
	public Vector2 GetDPadAxis()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C57")]
	[Address(RVA = "0x8DB7CC", Offset = "0x8DB7CC", VA = "0x8DB7CC")]
	public float GetRightTriggerAxis()
	{
		return default(float);
	}

	[Token(Token = "0x6000C58")]
	[Address(RVA = "0x8DB86C", Offset = "0x8DB86C", VA = "0x8DB86C")]
	public float GetLeftTriggerAxis()
	{
		return default(float);
	}

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0x8DB90C", Offset = "0x8DB90C", VA = "0x8DB90C")]
	private bool ButtonIsAxis(GamepadButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0x8DB9C4", Offset = "0x8DB9C4", VA = "0x8DB9C4")]
	private bool GetAxisButtonState(GamepadButtons axisButton, ButtonState buttonEvent)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0x8DBA3C", Offset = "0x8DBA3C", VA = "0x8DBA3C")]
	private float GetTriggerAxis(TriggerButton button)
	{
		return default(float);
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0x8DBA70", Offset = "0x8DBA70", VA = "0x8DBA70")]
	private bool ProcessDownTriggerAxis(GamepadButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0x8DBAE0", Offset = "0x8DBAE0", VA = "0x8DBAE0")]
	private bool ProcessUpTriggerAxis(GamepadButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0x8DB244", Offset = "0x8DB244", VA = "0x8DB244")]
	public bool GetButtonHeld(GamepadButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0x8D6930", Offset = "0x8D6930", VA = "0x8D6930")]
	public bool GetButtonDown(GamepadButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0x8D6768", Offset = "0x8D6768", VA = "0x8D6768")]
	public bool GetButtonUp(GamepadButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0x8DBB58", Offset = "0x8DBB58", VA = "0x8DBB58")]
	private KeyCode GetJoystickSpecificKey(KeyCode key)
	{
		return default(KeyCode);
	}

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0x8DBB84", Offset = "0x8DBB84", VA = "0x8DBB84")]
	public bool AnyButtonPressed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C63")]
	[Address(RVA = "0x8DBB8C", Offset = "0x8DBB8C", VA = "0x8DBB8C")]
	public bool AnyEngageButtonPressed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0x8DBB94", Offset = "0x8DBB94", VA = "0x8DBB94")]
	public bool EngageHeld()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0x8D1DDC", Offset = "0x8D1DDC", VA = "0x8D1DDC")]
	public bool EngageDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0x8D1CA4", Offset = "0x8D1CA4", VA = "0x8D1CA4")]
	public bool EngageUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0x8D0C44", Offset = "0x8D0C44", VA = "0x8D0C44")]
	public void SetIdle()
	{
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0x8DBC30", Offset = "0x8DBC30", VA = "0x8DBC30")]
	public GamepadInput()
	{
	}
}
[Token(Token = "0x20001A4")]
public class GamepadInputTester : MonoBehaviour
{
	[Token(Token = "0x2000491")]
	private enum Side
	{
		[Token(Token = "0x400200F")]
		Left,
		[Token(Token = "0x4002010")]
		Right
	}

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color kButtonDownColor;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color kButtonUpColor;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text m_controllerName;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text m_buttonsPressed;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text m_axisActive;

	[Token(Token = "0x4000CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Image[] m_dPad;

	[Token(Token = "0x4000CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Image[] m_faceButtons;

	[Token(Token = "0x4000CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Image m_rightStick;

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Image m_leftStick;

	[Token(Token = "0x4000CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Image m_rightBumper;

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Image m_leftBumper;

	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Image m_rightTrigger;

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Image m_leftTrigger;

	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Image m_start;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Image m_select;

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Image m_system;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Image m_special;

	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 m_leftStickOrigin;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 m_rightStickOrigin;

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0x8DC0F4", Offset = "0x8DC0F4", VA = "0x8DC0F4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0x8DC15C", Offset = "0x8DC15C", VA = "0x8DC15C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0x8DCFF4", Offset = "0x8DCFF4", VA = "0x8DCFF4")]
	private void UpdateStick(Side theSide)
	{
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0x8DD368", Offset = "0x8DD368", VA = "0x8DD368")]
	private void UpdateButtonsPressed()
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0x8DD478", Offset = "0x8DD478", VA = "0x8DD478")]
	private void UpdateAxisActive()
	{
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0x8DD628", Offset = "0x8DD628", VA = "0x8DD628")]
	public GamepadInputTester()
	{
	}
}
[Token(Token = "0x20001A5")]
public class GamepadNodeMapper : MonoBehaviour
{
	[Token(Token = "0x2000492")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AEF0", Offset = "0x74AEF0")]
	private sealed class <>c__DisplayClass26_0
	{
		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject nodeToRemove;

		[Token(Token = "0x6002343")]
		[Address(RVA = "0x8DDB88", Offset = "0x8DDB88", VA = "0x8DDB88")]
		public <>c__DisplayClass26_0()
		{
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0x8DE080", Offset = "0x8DE080", VA = "0x8DE080")]
		internal bool <RemoveNode>b__0(GameObject n)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000CB8")]
	private const float MIN_DIRECTION_MAGNITUDE = 0.5f;

	[Token(Token = "0x4000CB9")]
	private const int INVALID_INDEX = -1;

	[Token(Token = "0x4000CBA")]
	private const int SIDES_COUNT = 8;

	[Token(Token = "0x4000CBB")]
	private const int MIN_NODE_COUNT = 2;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly float kAngleStep;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float kHalfAngleStep;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> m_nodes;

	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2[] m_projectedPositions;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Camera m_camera;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_updateInterval;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_lastUpdateTime;

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_currentNodeIndex;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int m_previousNodeIndex;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[,] m_adjacencyMatrix;

	[Token(Token = "0x170000EA")]
	public int CurrentNodeIndex
	{
		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x8DD66C", Offset = "0x8DD66C", VA = "0x8DD66C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x8DD674", Offset = "0x8DD674", VA = "0x8DD674")]
		set
		{
		}
	}

	[Token(Token = "0x170000EB")]
	public int PreviousNodeIndex
	{
		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x8DD680", Offset = "0x8DD680", VA = "0x8DD680")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0x8DD688", Offset = "0x8DD688", VA = "0x8DD688")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0x8DD70C", Offset = "0x8DD70C", VA = "0x8DD70C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0x8DDB58", Offset = "0x8DDB58", VA = "0x8DDB58")]
	public void Setup(GameObject[] nodes, Camera camera, int rootNodeIndex)
	{
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0x8DDB80", Offset = "0x8DDB80", VA = "0x8DDB80")]
	public void Setup(Camera camera, int rootNodeIndex)
	{
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0x8D752C", Offset = "0x8D752C", VA = "0x8D752C")]
	public void InitializeNodes(GameObject[] nodes)
	{
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0x8D6DE8", Offset = "0x8D6DE8", VA = "0x8D6DE8")]
	public void AddNode(GameObject newNode)
	{
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0x8D8B6C", Offset = "0x8D8B6C", VA = "0x8D8B6C")]
	public GameObject GetNode(int nodeIndex)
	{
		return null;
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0x8D6ECC", Offset = "0x8D6ECC", VA = "0x8D6ECC")]
	public int RemoveNode(GameObject nodeToRemove)
	{
		return default(int);
	}

	[Token(Token = "0x6000C7B")]
	[Address(RVA = "0x8D9860", Offset = "0x8D9860", VA = "0x8D9860")]
	public bool MoveToNeighbor(Vector2 direction)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0x8DDB90", Offset = "0x8DDB90", VA = "0x8DDB90")]
	private int GetSideFromDirection(Vector2 direction)
	{
		return default(int);
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0x8DDC94", Offset = "0x8DDC94", VA = "0x8DDC94")]
	private int GetClosestNeighbor(int nodeIndex, List<int> neighborsIndices)
	{
		return default(int);
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0x8DD75C", Offset = "0x8DD75C", VA = "0x8DD75C")]
	public void UpdateNodeNeighbors()
	{
	}

	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0x8DDE30", Offset = "0x8DDE30", VA = "0x8DDE30")]
	private void DrawDebugConnections()
	{
	}

	[Token(Token = "0x6000C80")]
	[Address(RVA = "0x8DE05C", Offset = "0x8DE05C", VA = "0x8DE05C")]
	public GamepadNodeMapper()
	{
	}
}
[Token(Token = "0x20001A6")]
public static class GizmosUtils
{
	[Token(Token = "0x6000C81")]
	[Address(RVA = "0x8DEA98", Offset = "0x8DEA98", VA = "0x8DEA98")]
	public static void DrawText(GUISkin guiSkin, string text, Vector3 position, [Optional] Color? color, int fontSize = 0)
	{
	}
}
[Token(Token = "0x20001A7")]
public class GpuWhitelist
{
	[Token(Token = "0x2000493")]
	public enum GPUVendor
	{
		[Token(Token = "0x4002013")]
		Intel,
		[Token(Token = "0x4002014")]
		NVIDIA,
		[Token(Token = "0x4002015")]
		AMD,
		[Token(Token = "0x4002016")]
		unknown
	}

	[Token(Token = "0x2000494")]
	public enum SystemPerformanceLevel
	{
		[Token(Token = "0x4002018")]
		Mainstream,
		[Token(Token = "0x4002019")]
		LowEndUltra,
		[Token(Token = "0x400201A")]
		Ultra,
		[Token(Token = "0x400201B")]
		HighEndUltra,
		[Token(Token = "0x400201C")]
		PS4,
		[Token(Token = "0x400201D")]
		Undefined
	}

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string[] MainstreamAMD;

	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string[] MainstreamNVIDIA;

	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string[] LowEndUltraAMD;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string[] LowEndUltraNVIDIA;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string[] UltraAMD3;

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string[] UltraNVIDIA3;

	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string[] UltraAMD4;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string[] UltraNVIDIA4;

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string[] HighEndUltraAMD;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string[] HighEndUltraNVIDIA;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string GPUVendorName;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string GPUTypeName;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string PerformanceLevelString;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static SystemPerformanceLevel PerformanceLevel;

	[Token(Token = "0x170000EC")]
	public static bool IsPerformanceLevelFound
	{
		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x8DEA9C", Offset = "0x8DEA9C", VA = "0x8DEA9C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0x8DEB0C", Offset = "0x8DEB0C", VA = "0x8DEB0C")]
	public static SystemPerformanceLevel EnsurePerformanceLevelFound([Optional] uint? graphicsDeviceVendorID, [Optional] string graphicsDeviceName, [Optional] uint? graphicsMemorySize)
	{
		return default(SystemPerformanceLevel);
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0x8DEBDC", Offset = "0x8DEBDC", VA = "0x8DEBDC")]
	public static SystemPerformanceLevel FindPerformanceLevel([Optional] uint? graphicsDeviceVendorID, [Optional] string graphicsDeviceName, [Optional] uint? graphicsMemorySize)
	{
		return default(SystemPerformanceLevel);
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0x8DFA44", Offset = "0x8DFA44", VA = "0x8DFA44")]
	public static GPUVendor GetGPUVendor([Optional] uint? graphicsDeviceVendorID)
	{
		return default(GPUVendor);
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0x8DFC2C", Offset = "0x8DFC2C", VA = "0x8DFC2C")]
	public static void LogSystemInfo([Optional] int? bucketNumber)
	{
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0x8E06B8", Offset = "0x8E06B8", VA = "0x8E06B8")]
	public GpuWhitelist()
	{
	}
}
[Token(Token = "0x20001A8")]
public class GradientCycler : TimeCycler
{
	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Gradient m_gradient;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Color m_color;

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0x8E1394", Offset = "0x8E1394", VA = "0x8E1394")]
	protected void InitGradient()
	{
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0x8E139C", Offset = "0x8E139C", VA = "0x8E139C")]
	protected void UpdateGradient()
	{
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0x8E13E0", Offset = "0x8E13E0", VA = "0x8E13E0")]
	public GradientCycler()
	{
	}
}
[Token(Token = "0x20001A9")]
public class HaloHelper : MonoBehaviour
{
	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Behaviour m_halo;

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0x9087E0", Offset = "0x9087E0", VA = "0x9087E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0x908878", Offset = "0x908878", VA = "0x908878")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0x908898", Offset = "0x908898", VA = "0x908898")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C8F")]
	[Address(RVA = "0x9088B8", Offset = "0x9088B8", VA = "0x9088B8")]
	public HaloHelper()
	{
	}
}
[Token(Token = "0x20001AA")]
public class HideOnShowCursor : MonoBehaviour
{
	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRInput.CursorIndex m_cursorIndex;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider m_colliderToHide;

	[Token(Token = "0x6000C90")]
	[Address(RVA = "0x90C1D4", Offset = "0x90C1D4", VA = "0x90C1D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C91")]
	[Address(RVA = "0x90C394", Offset = "0x90C394", VA = "0x90C394")]
	private void OnShowCursor(bool show, VRInput.CursorIndex cursorIndex)
	{
	}

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0x90C3E0", Offset = "0x90C3E0", VA = "0x90C3E0")]
	private void OnEnableCollision(bool enable, VRInput.CursorIndex cursorIndex)
	{
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0x90C498", Offset = "0x90C498", VA = "0x90C498")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0x90C608", Offset = "0x90C608", VA = "0x90C608")]
	public HideOnShowCursor()
	{
	}
}
[Token(Token = "0x20001AB")]
public struct HSLColor
{
	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float h;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float s;

	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float l;

	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float a;

	[Token(Token = "0x6000C95")]
	[Address(RVA = "0x63D4A0", Offset = "0x63D4A0", VA = "0x63D4A0")]
	public HSLColor(float h, float s, float l, float a)
	{
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0x63D4AC", Offset = "0x63D4AC", VA = "0x63D4AC")]
	public HSLColor(float h, float s, float l)
	{
	}

	[Token(Token = "0x6000C97")]
	[Address(RVA = "0x63D4C0", Offset = "0x63D4C0", VA = "0x63D4C0")]
	public HSLColor(Color c)
	{
	}

	[Token(Token = "0x6000C98")]
	[Address(RVA = "0x908440", Offset = "0x908440", VA = "0x908440")]
	public static HSLColor FromRGBA(Color c)
	{
		return default(HSLColor);
	}

	[Token(Token = "0x6000C99")]
	[Address(RVA = "0x63D4E8", Offset = "0x63D4E8", VA = "0x63D4E8")]
	public Color ToRGBA()
	{
		return default(Color);
	}

	[Token(Token = "0x6000C9A")]
	[Address(RVA = "0x9086CC", Offset = "0x9086CC", VA = "0x9086CC")]
	private static float Value(float n1, float n2, float hue)
	{
		return default(float);
	}

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0x9087B4", Offset = "0x9087B4", VA = "0x9087B4")]
	public static implicit operator HSLColor(Color src)
	{
		return default(HSLColor);
	}

	[Token(Token = "0x6000C9C")]
	[Address(RVA = "0x9087B8", Offset = "0x9087B8", VA = "0x9087B8")]
	public static implicit operator Color(HSLColor src)
	{
		return default(Color);
	}
}
[Token(Token = "0x20001AC")]
public class JitterVerts : MonoBehaviour
{
	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fps;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool kOverrideMaterialParams;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float kJitterScale;

	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float kJitterFreq;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float delta;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Material> allMats;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Material> allStandardMats;

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0x7D78C4", Offset = "0x7D78C4", VA = "0x7D78C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0x7D7A44", Offset = "0x7D7A44", VA = "0x7D7A44")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C9F")]
	[Address(RVA = "0x7D7CD4", Offset = "0x7D7CD4", VA = "0x7D7CD4")]
	public JitterVerts()
	{
	}
}
[Token(Token = "0x20001AD")]
public class LanguageManager : MonoBehaviour
{
	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<string> m_languages;

	[Token(Token = "0x170000ED")]
	public static List<string> Languages
	{
		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x7DD3A4", Offset = "0x7DD3A4", VA = "0x7DD3A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000CA1")]
	[Address(RVA = "0x7DD4B8", Offset = "0x7DD4B8", VA = "0x7DD4B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CA2")]
	[Address(RVA = "0x7DD558", Offset = "0x7DD558", VA = "0x7DD558")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CA3")]
	[Address(RVA = "0x7DD5F8", Offset = "0x7DD5F8", VA = "0x7DD5F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CA4")]
	[Address(RVA = "0x7DD67C", Offset = "0x7DD67C", VA = "0x7DD67C")]
	private void ChangeLanguage(string language)
	{
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0x7DD720", Offset = "0x7DD720", VA = "0x7DD720")]
	private void OnLanguageChanged(object obj)
	{
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0x7DD7E0", Offset = "0x7DD7E0", VA = "0x7DD7E0")]
	public LanguageManager()
	{
	}
}
[Serializable]
[Token(Token = "0x20001AE")]
public class LightBundle
{
	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Light m_light;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve m_transitionCurve;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_relativeIntensity;

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0x7E0A9C", Offset = "0x7E0A9C", VA = "0x7E0A9C")]
	public LightBundle()
	{
	}
}
[Token(Token = "0x20001AF")]
public class LightTransitionTimer : MonoBehaviour
{
	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x75053C", Offset = "0x75053C")]
	public LightBundle[] m_lightsToFadeOut;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LightBundle[] m_lightsToFadeIn;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x750574", Offset = "0x750574")]
	public Color m_ambientEquatorColor;

	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color m_ambientGroundColor;

	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color m_ambientSkyColor;

	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float m_duration;

	[Token(Token = "0x4000CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool m_driveAmbientLighting;

	[Token(Token = "0x4000CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool m_currentAmbientLightingValuesCached;

	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SceneLighting m_sceneLighting;

	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Color m_ambientEquatorStartColor;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Color m_ambientGroundStartColor;

	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Color m_ambientSkyStartColor;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private StateController m_stateController;

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public UnityEvent m_OnTransitionStart;

	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEvent m_OnTransitionComplete;

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0x7E0AA4", Offset = "0x7E0AA4", VA = "0x7E0AA4")]
	private void OnTransitionComplete()
	{
	}

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0x7E0ADC", Offset = "0x7E0ADC", VA = "0x7E0ADC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0x7E0BDC", Offset = "0x7E0BDC", VA = "0x7E0BDC")]
	private void StartTransition()
	{
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0x7E0C24", Offset = "0x7E0C24", VA = "0x7E0C24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0x7E0C28", Offset = "0x7E0C28", VA = "0x7E0C28")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0x7E0CB8", Offset = "0x7E0CB8", VA = "0x7E0CB8")]
	private void CacheAmbientLightingStartValues()
	{
	}

	[Token(Token = "0x6000CAE")]
	[Address(RVA = "0x7E0D24", Offset = "0x7E0D24", VA = "0x7E0D24")]
	private void UpdateAmbientSceneLighting(float time)
	{
	}

	[Token(Token = "0x6000CAF")]
	[Address(RVA = "0x7E0DE4", Offset = "0x7E0DE4", VA = "0x7E0DE4")]
	private void UpdateLights(LightBundle[] lightBundles, float time)
	{
	}

	[Token(Token = "0x6000CB0")]
	[Address(RVA = "0x7E0EF8", Offset = "0x7E0EF8", VA = "0x7E0EF8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0x7E0FDC", Offset = "0x7E0FDC", VA = "0x7E0FDC")]
	public LightTransitionTimer()
	{
	}
}
[Token(Token = "0x20001B0")]
public class LimitVelocity : MonoBehaviour
{
	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float kMaxVelocity;

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody[] m_rigidBodies;

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0x7E1054", Offset = "0x7E1054", VA = "0x7E1054")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CB3")]
	[Address(RVA = "0x7E10B0", Offset = "0x7E10B0", VA = "0x7E10B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0x7E11B4", Offset = "0x7E11B4", VA = "0x7E11B4")]
	public LimitVelocity()
	{
	}
}
[Token(Token = "0x20001B1")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749384", Offset = "0x749384")]
public class LineLinker : MonoBehaviour
{
	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer m_lineRenderer;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_anchorStart;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform m_anchorEnd;

	[Token(Token = "0x6000CB5")]
	[Address(RVA = "0x7E11C4", Offset = "0x7E11C4", VA = "0x7E11C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0x7E121C", Offset = "0x7E121C", VA = "0x7E121C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0x7E1334", Offset = "0x7E1334", VA = "0x7E1334")]
	public LineLinker()
	{
	}
}
[Token(Token = "0x20001B2")]
public class ListOfGameObjects : MonoBehaviour
{
	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] m_gameObjects;

	[Token(Token = "0x6000CB8")]
	[Address(RVA = "0x7E133C", Offset = "0x7E133C", VA = "0x7E133C")]
	public ListOfGameObjects()
	{
	}
}
[Token(Token = "0x20001B3")]
public class LockRotation : MonoBehaviour
{
	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion m_startRot;

	[Token(Token = "0x6000CB9")]
	[Address(RVA = "0x7E1654", Offset = "0x7E1654", VA = "0x7E1654")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0x7E1690", Offset = "0x7E1690", VA = "0x7E1690")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0x7E16C8", Offset = "0x7E16C8", VA = "0x7E16C8")]
	public LockRotation()
	{
	}
}
[Token(Token = "0x20001B4")]
[ExecuteInEditMode]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_target;

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0x7E16D0", Offset = "0x7E16D0", VA = "0x7E16D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0x7E17C4", Offset = "0x7E17C4", VA = "0x7E17C4")]
	public LookAt()
	{
	}
}
[Token(Token = "0x20001B5")]
public class LunaConstants
{
	[Token(Token = "0x4000D00")]
	public const string LUNA_ANDROID_APP_ID = "com.funomena.luna";

	[Token(Token = "0x4000D01")]
	public const string TURN_RING_TAG = "TurnRing";

	[Token(Token = "0x4000D02")]
	public const string HEALING_CONTROL_TAG = "HealingControl";

	[Token(Token = "0x4000D03")]
	public const string DEFAULT_LAYER = "Default";

	[Token(Token = "0x4000D04")]
	public const string NO_CAMERA_EFFECTS_LAYER = "NoCameraEffects";

	[Token(Token = "0x4000D05")]
	public const string DEFAULT_SORTING_LAYER = "Default";

	[Token(Token = "0x4000D06")]
	public const string UI_SORTING_LAYER = "UI";

	[Token(Token = "0x4000D07")]
	public const string INTRO_SCENE = "Intro";

	[Token(Token = "0x4000D08")]
	public const string INTROSPLASH_SCENE = "IntroSplash";

	[Token(Token = "0x4000D09")]
	public const string PROLOGUE_SCENE_NAME = "Prologue";

	[Token(Token = "0x4000D0A")]
	public const string BIRD_CREATE_SCENE_NAME = "Bird_Create";

	[Token(Token = "0x4000D0B")]
	public const string BIRD_CREATE_SCENE_NAME_3D = "Bird_Cutscene_3D";

	[Token(Token = "0x4000D0C")]
	public const string TURTLE_CREATE_SCENE_NAME = "Turtle_Create";

	[Token(Token = "0x4000D0D")]
	public const string TURTLE_KINETIC_SCENE_NAME = "Turtle_Kinetic";

	[Token(Token = "0x4000D0E")]
	public const string SWAN_CREATE_SCENE_NAME = "Swan_Create";

	[Token(Token = "0x4000D0F")]
	public const string SWAN_KINETIC_SCENE_NAME = "Swan_Kinetic";

	[Token(Token = "0x4000D10")]
	public const string BEAR_CREATE_SCENE_NAME = "Bear_Create";

	[Token(Token = "0x4000D11")]
	public const string BEAR_KINETIC_SCENE_NAME = "Bear_Kinetic";

	[Token(Token = "0x4000D12")]
	public const string FOX_CREATE_SCENE_NAME = "Fox_Create";

	[Token(Token = "0x4000D13")]
	public const string FOX_KINETIC_SCENE_NAME = "Fox_Kinetic";

	[Token(Token = "0x4000D14")]
	public const string OWL_CREATE_SCENE_NAME = "Owl_Create";

	[Token(Token = "0x4000D15")]
	public const string LEVEL_SELECT_SCENE_NAME = "Level_Select";

	[Token(Token = "0x4000D16")]
	public const string SPLASH_SCENE_NAME = "IntroSplash";

	[Token(Token = "0x4000D17")]
	public const string CONTROLS_SCENE_NAME = "DisplayControls";

	[Token(Token = "0x4000D18")]
	public const string SUBTITLE_TEST_SCENE_NAME = "SubtitleTest";

	[Token(Token = "0x4000D19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] m_introSceneNames;

	[Token(Token = "0x4000D1A")]
	public const string QUEEN_ANNES_LACE_STAMP_NAME = "QueenAnnsLace";

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] m_plantSceneNames;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] m_healingCutsceneNames;

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] m_kineticSceneNames;

	[Token(Token = "0x6000CBE")]
	[Address(RVA = "0x7E2728", Offset = "0x7E2728", VA = "0x7E2728")]
	private static bool IsSceneContained(string[] scenesArray, string sceneName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CBF")]
	[Address(RVA = "0x7E27B4", Offset = "0x7E27B4", VA = "0x7E27B4")]
	public static bool IsPlantScene(string sceneName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0x7E2824", Offset = "0x7E2824", VA = "0x7E2824")]
	public static bool IsHealingScene(string sceneName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0x7E2894", Offset = "0x7E2894", VA = "0x7E2894")]
	public static bool IsKineticScene(string sceneName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CC2")]
	[Address(RVA = "0x7E2904", Offset = "0x7E2904", VA = "0x7E2904")]
	public static bool IsIntroScene(string sceneName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CC3")]
	[Address(RVA = "0x7E2974", Offset = "0x7E2974", VA = "0x7E2974")]
	public LunaConstants()
	{
	}
}
[Token(Token = "0x20001B6")]
public class LunaGlobalCache : MonoBehaviour
{
	[Token(Token = "0x2000495")]
	public class CacheList
	{
		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<MonoBehaviour> m_cache;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> m_ids;

		[Token(Token = "0x6002345")]
		[Address(RVA = "0x7E2E58", Offset = "0x7E2E58", VA = "0x7E2E58")]
		public void Add(MonoBehaviour obj)
		{
		}

		[Token(Token = "0x6002346")]
		[Address(RVA = "0x7E2F28", Offset = "0x7E2F28", VA = "0x7E2F28")]
		public void Remove(MonoBehaviour obj)
		{
		}

		[Token(Token = "0x6002347")]
		[Address(RVA = "0x7E3074", Offset = "0x7E3074", VA = "0x7E3074")]
		public bool Contains(MonoBehaviour obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002348")]
		[Address(RVA = "0x7E2DC0", Offset = "0x7E2DC0", VA = "0x7E2DC0")]
		public CacheList()
		{
		}
	}

	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<ulong, CacheList> m_globalCache;

	[Token(Token = "0x6000CC5")]
	[Address(RVA = "0x7D80C0", Offset = "0x7D80C0", VA = "0x7D80C0")]
	public static void CacheObject(ulong key, MonoBehaviour obj)
	{
	}

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0x7D82A4", Offset = "0x7D82A4", VA = "0x7D82A4")]
	public static void RemoveFromCache(ulong key, MonoBehaviour obj)
	{
	}

	[Token(Token = "0x6000CC7")]
	public static T GetObjectFromCacheOfType<T>(ulong key) where T : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000CC8")]
	public static T[] GetObjectsFromCacheOfType<T>(ulong key) where T : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000CC9")]
	[Address(RVA = "0x7E2FF8", Offset = "0x7E2FF8", VA = "0x7E2FF8")]
	public LunaGlobalCache()
	{
	}
}
[Token(Token = "0x20001B7")]
public static class LunaLayerMasks
{
	[Token(Token = "0x4000D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int kGrowSurfaceMask;
}
[Token(Token = "0x20001B8")]
public class MaterialColorCycler : GradientCycler
{
	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material m_material;

	[Token(Token = "0x4000D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string m_property;

	[Token(Token = "0x4000D22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int m_propertyId;

	[Token(Token = "0x4000D23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Color m_defaultColor;

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0x8089E0", Offset = "0x8089E0", VA = "0x8089E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0x808A94", Offset = "0x808A94", VA = "0x808A94")]
	public void SetColorToDefault()
	{
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0x808AC0", Offset = "0x808AC0", VA = "0x808AC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CCF")]
	[Address(RVA = "0x808B00", Offset = "0x808B00", VA = "0x808B00")]
	public MaterialColorCycler()
	{
	}
}
[Token(Token = "0x20001B9")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7493F8", Offset = "0x7493F8")]
public class MaterialParamOscillator : MonoBehaviour
{
	[Token(Token = "0x4000D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer m_renderer;

	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_propertyName;

	[Token(Token = "0x4000D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_minValue;

	[Token(Token = "0x4000D27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_maxValue;

	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7505AC", Offset = "0x7505AC")]
	public float m_frequency;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7505E4", Offset = "0x7505E4")]
	public float m_timeToStop;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public float m_currentPropertyValue;

	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_timeStarted;

	[Token(Token = "0x4000D2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_shutDownPropertyValue;

	[Token(Token = "0x4000D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_timeStopStarted;

	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750610", Offset = "0x750610")]
	private bool <IsStopping>k__BackingField;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750620", Offset = "0x750620")]
	private bool <IsPlaying>k__BackingField;

	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool m_removeAfterStopping;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_twiceFrequency;

	[Token(Token = "0x170000EE")]
	public bool IsStopping
	{
		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x808B58", Offset = "0x808B58", VA = "0x808B58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757434", Offset = "0x757434")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x808B60", Offset = "0x808B60", VA = "0x808B60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757444", Offset = "0x757444")]
		private set
		{
		}
	}

	[Token(Token = "0x170000EF")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x808B6C", Offset = "0x808B6C", VA = "0x808B6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757454", Offset = "0x757454")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x808B74", Offset = "0x808B74", VA = "0x808B74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757464", Offset = "0x757464")]
		private set
		{
		}
	}

	[Token(Token = "0x6000CD4")]
	[Address(RVA = "0x808B80", Offset = "0x808B80", VA = "0x808B80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CD5")]
	[Address(RVA = "0x808BEC", Offset = "0x808BEC", VA = "0x808BEC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000CD6")]
	[Address(RVA = "0x808C40", Offset = "0x808C40", VA = "0x808C40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0x808DCC", Offset = "0x808DCC", VA = "0x808DCC")]
	private void SetPropertyValue(float value)
	{
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0x808EC4", Offset = "0x808EC4", VA = "0x808EC4")]
	public void Play(bool force = false)
	{
	}

	[Token(Token = "0x6000CD9")]
	[Address(RVA = "0x808BF4", Offset = "0x808BF4", VA = "0x808BF4")]
	public void Stop(bool force = false)
	{
	}

	[Token(Token = "0x6000CDA")]
	[Address(RVA = "0x808F14", Offset = "0x808F14", VA = "0x808F14")]
	public void StopImmediate()
	{
	}

	[Token(Token = "0x6000CDB")]
	[Address(RVA = "0x808FA4", Offset = "0x808FA4", VA = "0x808FA4")]
	public MaterialParamOscillator()
	{
	}
}
[Token(Token = "0x20001BA")]
public class MaterialProperty
{
	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material material;

	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int propertyId;

	[Token(Token = "0x6000CDC")]
	[Address(RVA = "0x808FC0", Offset = "0x808FC0", VA = "0x808FC0")]
	public MaterialProperty()
	{
	}
}
[Token(Token = "0x20001BB")]
public class MaterialSetter : MonoBehaviour
{
	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_property;

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_propertyId;

	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_startValue;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material[] m_materials;

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool m_setOnStart;

	[Token(Token = "0x6000CDD")]
	[Address(RVA = "0x808FC8", Offset = "0x808FC8", VA = "0x808FC8")]
	public void SetValue(float value)
	{
	}

	[Token(Token = "0x6000CDE")]
	[Address(RVA = "0x80906C", Offset = "0x80906C", VA = "0x80906C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0x809124", Offset = "0x809124", VA = "0x809124")]
	public MaterialSetter()
	{
	}
}
[Token(Token = "0x20001BC")]
public class MaterialTimer : MonoBehaviour
{
	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_property;

	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_propertyId;

	[Token(Token = "0x4000D3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_duration;

	[Token(Token = "0x4000D3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_time;

	[Token(Token = "0x4000D3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_startValue;

	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_endValue;

	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Color m_startColor;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Color m_endColor;

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material[] m_materials;

	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent m_OnTimerComplete;

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0x809134", Offset = "0x809134", VA = "0x809134")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0x80926C", Offset = "0x80926C", VA = "0x80926C")]
	public void SetStartFloatValue()
	{
	}

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0x8091C8", Offset = "0x8091C8", VA = "0x8091C8")]
	private void SetFloatProperty(float value)
	{
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0x809274", Offset = "0x809274", VA = "0x809274")]
	private void SetColorProperty(Color value)
	{
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0x809338", Offset = "0x809338", VA = "0x809338")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0x809498", Offset = "0x809498", VA = "0x809498")]
	public MaterialTimer()
	{
	}
}
[Token(Token = "0x20001BD")]
public class MoonParticleManager : MonoBehaviour
{
	[Token(Token = "0x4000D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Turtle;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool Swan;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool Bear;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool Fox;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool Bird;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool Owl;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool Full;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	public bool New;

	[Token(Token = "0x6000CE6")]
	[Address(RVA = "0x80BB04", Offset = "0x80BB04", VA = "0x80BB04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0x80BBAC", Offset = "0x80BBAC", VA = "0x80BBAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0x80BD94", Offset = "0x80BD94", VA = "0x80BD94")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0x80C064", Offset = "0x80C064", VA = "0x80C064")]
	public MoonParticleManager()
	{
	}
}
[Token(Token = "0x20001BE")]
public class NodeConnector : MonoBehaviour
{
	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_sourceGameObject;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_targetGameObject;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_targetNodeName;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool m_hasWorldTransform;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool m_resetLocalPosition;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool m_resetLocalRotation;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool m_resetLocalScale;

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0x80CC40", Offset = "0x80CC40", VA = "0x80CC40")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0x80CE74", Offset = "0x80CE74", VA = "0x80CE74")]
	public NodeConnector()
	{
	}
}
[Token(Token = "0x20001BF")]
public class OculusMixedReality : MonoBehaviour
{
	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0x80CFB0", Offset = "0x80CFB0", VA = "0x80CFB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0x80D17C", Offset = "0x80D17C", VA = "0x80D17C")]
	public OculusMixedReality()
	{
	}
}
[Token(Token = "0x20001C0")]
public class OculusMixedRealityIgnoreObject : MonoBehaviour
{
	[Token(Token = "0x4000D53")]
	private const string kOculusMRCPrefix = "OculusMRC_";

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0x80D184", Offset = "0x80D184", VA = "0x80D184")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0x80D230", Offset = "0x80D230", VA = "0x80D230")]
	public OculusMixedRealityIgnoreObject()
	{
	}
}
[Token(Token = "0x20001C1")]
public class OculusPlatformManager : MonoBehaviour
{
	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0x80D238", Offset = "0x80D238", VA = "0x80D238")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0x80D370", Offset = "0x80D370", VA = "0x80D370")]
	private void OnPlatformInitialized(Message message)
	{
	}

	[Token(Token = "0x6000CF2")]
	[Address(RVA = "0x80D40C", Offset = "0x80D40C", VA = "0x80D40C")]
	private void OnOculusEntitlementCheckComplete(Message message)
	{
	}

	[Token(Token = "0x6000CF3")]
	[Address(RVA = "0x80D500", Offset = "0x80D500", VA = "0x80D500")]
	public OculusPlatformManager()
	{
	}
}
[Token(Token = "0x20001C2")]
public class OverrideAnimation : MonoBehaviour
{
	[Token(Token = "0x2000496")]
	private struct AnimOverrideData
	{
		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform transform;

		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 lastPhysicsPosition;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Quaternion lastPhysicsRotation;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody rigidBody;

		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float animationWeight;
	}

	[Serializable]
	[Token(Token = "0x2000497")]
	public struct BlendData
	{
		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform blendTransform;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x755F6C", Offset = "0x755F6C")]
		public float animationWeight;
	}

	[Token(Token = "0x2000498")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AF00", Offset = "0x74AF00")]
	private sealed class <>c__DisplayClass18_0
	{
		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform child;

		[Token(Token = "0x6002349")]
		[Address(RVA = "0x80E85C", Offset = "0x80E85C", VA = "0x80E85C")]
		public <>c__DisplayClass18_0()
		{
		}

		[Token(Token = "0x600234A")]
		[Address(RVA = "0x80F00C", Offset = "0x80F00C", VA = "0x80F00C")]
		internal bool <AddAnimOverrideData>b__0(BlendData blendData)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator m_animator;

	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_animLayerName;

	[Token(Token = "0x4000D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_animLayer;

	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public BlendData[] m_blendObjects;

	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<AnimOverrideData> m_animOverrideData;

	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_animInterpolationSpeed;

	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent m_onLock;

	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent m_onUnlock;

	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_lockAnimation;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool m_resetToAnimPos;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ValueUpdater m_blendIn;

	[Token(Token = "0x4000D5F")]
	private const float kBlendInSpeed = 0.5f;

	[Token(Token = "0x170000F0")]
	public bool Locked
	{
		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x80E54C", Offset = "0x80E54C", VA = "0x80E54C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x80E554", Offset = "0x80E554", VA = "0x80E554")]
		set
		{
		}
	}

	[Token(Token = "0x6000CF6")]
	[Address(RVA = "0x80E5E0", Offset = "0x80E5E0", VA = "0x80E5E0")]
	public void ResetToAnimPos()
	{
	}

	[Token(Token = "0x6000CF7")]
	[Address(RVA = "0x80E61C", Offset = "0x80E61C", VA = "0x80E61C")]
	private void AddAnimOverrideData(Transform overrideTransform, float weight)
	{
	}

	[Token(Token = "0x6000CF8")]
	[Address(RVA = "0x80E864", Offset = "0x80E864", VA = "0x80E864")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CF9")]
	[Address(RVA = "0x80E8EC", Offset = "0x80E8EC", VA = "0x80E8EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CFA")]
	[Address(RVA = "0x80E930", Offset = "0x80E930", VA = "0x80E930")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0x80EC0C", Offset = "0x80EC0C", VA = "0x80EC0C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000CFC")]
	[Address(RVA = "0x80EF74", Offset = "0x80EF74", VA = "0x80EF74")]
	public OverrideAnimation()
	{
	}
}
[Token(Token = "0x20001C3")]
public class ParticleBundleInstance
{
	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ParticleSystem[] m_particleSystemInstances;

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0x80FD88", Offset = "0x80FD88", VA = "0x80FD88")]
	public ParticleBundleInstance(ParticleBundle particleBundle, Transform parent, Vector3 localPosition)
	{
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0x80FFE8", Offset = "0x80FFE8", VA = "0x80FFE8")]
	public void SetPosition(Vector3 position)
	{
	}

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0x810090", Offset = "0x810090", VA = "0x810090")]
	public void SetScale(Vector3 scale)
	{
	}

	[Token(Token = "0x6000D00")]
	[Address(RVA = "0x810138", Offset = "0x810138", VA = "0x810138")]
	public void SetColor(Color color)
	{
	}

	[Token(Token = "0x6000D01")]
	[Address(RVA = "0x810220", Offset = "0x810220", VA = "0x810220")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000D02")]
	[Address(RVA = "0x810294", Offset = "0x810294", VA = "0x810294")]
	public void Emit()
	{
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0x810308", Offset = "0x810308", VA = "0x810308")]
	public void Emit(Color color)
	{
	}
}
[Token(Token = "0x20001C4")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x74945C", Offset = "0x74945C")]
public class ParticleBundle : ScriptableObject
{
	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem[] m_particleSystemPrefabs;

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0x80FD80", Offset = "0x80FD80", VA = "0x80FD80")]
	public ParticleBundle()
	{
	}
}
[Token(Token = "0x20001C5")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x74946C", Offset = "0x74946C")]
public class ParticlePropertyDriver : MonoBehaviour
{
	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem m_particleSystem;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Gradient m_startColorGradient;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve m_rateOverTimeCurve;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve m_startSizeCurve;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve m_startSpeedCurve;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve m_startLifetimeCurve;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve m_sizeOverLifetimeCurve;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve m_noiseStrengthCurve;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve m_opacityOverLifetimeCurve;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool m_useColorOverProgress;

	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Gradient m_colorOverProgressA;

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Gradient m_colorOverProgressB;

	[Token(Token = "0x6000D05")]
	[Address(RVA = "0x810E0C", Offset = "0x810E0C", VA = "0x810E0C")]
	private void CheckIfParticleSystemIsCached()
	{
	}

	[Token(Token = "0x6000D06")]
	[Address(RVA = "0x810E9C", Offset = "0x810E9C", VA = "0x810E9C", Slot = "4")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000D07")]
	[Address(RVA = "0x810F44", Offset = "0x810F44", VA = "0x810F44")]
	public void SetDriverValue(float value)
	{
	}

	[Token(Token = "0x6000D08")]
	[Address(RVA = "0x811458", Offset = "0x811458", VA = "0x811458")]
	public ParticlePropertyDriver()
	{
	}
}
[Token(Token = "0x20001C6")]
public class PlatformCreditsManager : MonoBehaviour
{
	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x750630", Offset = "0x750630")]
	public GameObject m_PCCredits;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_PS4Credits;

	[Token(Token = "0x6000D09")]
	[Address(RVA = "0x92595C", Offset = "0x92595C", VA = "0x92595C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D0A")]
	[Address(RVA = "0x925994", Offset = "0x925994", VA = "0x925994")]
	private void ActivateCredits(GameObject credits)
	{
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0x925A2C", Offset = "0x925A2C", VA = "0x925A2C")]
	public PlatformCreditsManager()
	{
	}
}
[Token(Token = "0x20001C7")]
public class Vector3Lerp
{
	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 m_start;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 m_end;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_current;

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0x831E7C", Offset = "0x831E7C", VA = "0x831E7C")]
	public Vector3 GetStartPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D0D")]
	[Address(RVA = "0x831E88", Offset = "0x831E88", VA = "0x831E88")]
	public Vector3 GetEndPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D0E")]
	[Address(RVA = "0x831E94", Offset = "0x831E94", VA = "0x831E94")]
	public Vector3 GetCurrentPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D0F")]
	[Address(RVA = "0x831EA0", Offset = "0x831EA0", VA = "0x831EA0")]
	public void SetStartEndValues(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x6000D10")]
	[Address(RVA = "0x831EB0", Offset = "0x831EB0", VA = "0x831EB0")]
	public void SetStartPosition(Vector3 start)
	{
	}

	[Token(Token = "0x6000D11")]
	[Address(RVA = "0x831EBC", Offset = "0x831EBC", VA = "0x831EBC")]
	public void SetEndPosition(Vector3 end)
	{
	}

	[Token(Token = "0x6000D12")]
	[Address(RVA = "0x831EC8", Offset = "0x831EC8", VA = "0x831EC8")]
	public void SetCurrentPosition(Vector3 current)
	{
	}

	[Token(Token = "0x6000D13")]
	[Address(RVA = "0x831ED4", Offset = "0x831ED4", VA = "0x831ED4")]
	public void Lerp(float value)
	{
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0x831F90", Offset = "0x831F90", VA = "0x831F90")]
	public Vector3Lerp()
	{
	}
}
[Token(Token = "0x20001C8")]
public class PointAxis
{
	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3Lerp m_position;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3Lerp m_aim;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3Lerp m_up;

	[Token(Token = "0x4000D76")]
	private const float kAxisMultiplier = 10f;

	[Token(Token = "0x6000D15")]
	[Address(RVA = "0x926C04", Offset = "0x926C04", VA = "0x926C04")]
	public Vector3Lerp GetPosition()
	{
		return null;
	}

	[Token(Token = "0x6000D16")]
	[Address(RVA = "0x926C0C", Offset = "0x926C0C", VA = "0x926C0C")]
	public Vector3Lerp GetAim()
	{
		return null;
	}

	[Token(Token = "0x6000D17")]
	[Address(RVA = "0x926C14", Offset = "0x926C14", VA = "0x926C14")]
	public Vector3Lerp GetUp()
	{
		return null;
	}

	[Token(Token = "0x6000D18")]
	[Address(RVA = "0x926C1C", Offset = "0x926C1C", VA = "0x926C1C")]
	public Vector3[] GetOrthoUp()
	{
		return null;
	}

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0x926D58", Offset = "0x926D58", VA = "0x926D58")]
	public Vector3 GetCurrentPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0x926D7C", Offset = "0x926D7C", VA = "0x926D7C")]
	public void Lerp(float value)
	{
	}

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0x926DE0", Offset = "0x926DE0", VA = "0x926DE0")]
	public PointAxis()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C9")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7494D0", Offset = "0x7494D0")]
public class PropertyOverride : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000499")]
	public class PropertyEntry
	{
		[Token(Token = "0x4002028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string propertyPath;

		[Token(Token = "0x4002029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string value;

		[Token(Token = "0x400202A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object target;

		[Token(Token = "0x600234B")]
		[Address(RVA = "0x936C34", Offset = "0x936C34", VA = "0x936C34")]
		public PropertyEntry()
		{
		}
	}

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public PropertyEntry[] PropertyEntries;

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0x936C2C", Offset = "0x936C2C", VA = "0x936C2C")]
	public PropertyOverride()
	{
	}
}
[Token(Token = "0x20001CA")]
public static class PS4SaveInterface
{
	[Token(Token = "0x200049A")]
	public enum LoadState
	{
		[Token(Token = "0x400202C")]
		Ready,
		[Token(Token = "0x400202D")]
		Checking,
		[Token(Token = "0x400202E")]
		Loading,
		[Token(Token = "0x400202F")]
		Saving,
		[Token(Token = "0x4002030")]
		Error,
		[Token(Token = "0x4002031")]
		Finished
	}

	[Token(Token = "0x200049B")]
	public enum DialogState
	{
		[Token(Token = "0x4002033")]
		None,
		[Token(Token = "0x4002034")]
		Corrupted,
		[Token(Token = "0x4002035")]
		NoSpace,
		[Token(Token = "0x4002036")]
		Deleted
	}

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750678", Offset = "0x750678")]
	private static LoadState <GameLoadState>k__BackingField;

	[Token(Token = "0x170000F1")]
	public static LoadState GameLoadState
	{
		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x80F088", Offset = "0x80F088", VA = "0x80F088")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757474", Offset = "0x757474")]
		get
		{
			return default(LoadState);
		}
		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x80F0D8", Offset = "0x80F0D8", VA = "0x80F0D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757484", Offset = "0x757484")]
		private set
		{
		}
	}

	[Token(Token = "0x170000F2")]
	public static bool SavingAllowed
	{
		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x804C84", Offset = "0x804C84", VA = "0x804C84")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F3")]
	public static string SavedGameData
	{
		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x80F12C", Offset = "0x80F12C", VA = "0x80F12C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0x804C94", Offset = "0x804C94", VA = "0x804C94")]
	public static void Update()
	{
	}

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0x804CA0", Offset = "0x804CA0", VA = "0x804CA0")]
	public static void Terminate()
	{
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0x806D1C", Offset = "0x806D1C", VA = "0x806D1C")]
	public static void Initialize(MonoBehaviour psvrEvents)
	{
	}

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0x806D20", Offset = "0x806D20", VA = "0x806D20")]
	public static bool SaveFileExists()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0x806D28", Offset = "0x806D28", VA = "0x806D28")]
	public static void StartLoadRequest()
	{
	}

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0x805E8C", Offset = "0x805E8C", VA = "0x805E8C")]
	public static void SaveGame(string data)
	{
	}

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0x806D2C", Offset = "0x806D2C", VA = "0x806D2C")]
	public static void EndLoadRequest()
	{
	}
}
[Token(Token = "0x20001CB")]
public class PSVREvents : MonoBehaviour
{
	[Token(Token = "0x6000D28")]
	[Address(RVA = "0x80F17C", Offset = "0x80F17C", VA = "0x80F17C")]
	public PSVREvents()
	{
	}
}
[Token(Token = "0x20001CC")]
public class QuestEvents : MonoBehaviour
{
	[Token(Token = "0x4000D79")]
	private const float SHOW_HANDS_DELAY = 0.1f;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_wasHmdPresent;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool m_wasUserPresent;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool m_hadVrFocus;

	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	private bool m_hadInputFocus;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool s_gamePaused;

	[Token(Token = "0x170000F4")]
	private bool CanResume
	{
		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x938788", Offset = "0x938788", VA = "0x938788")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000D2A")]
	[Address(RVA = "0x93881C", Offset = "0x93881C", VA = "0x93881C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0x938B64", Offset = "0x938B64", VA = "0x938B64")]
	private void EntitlementCallback(Message msg)
	{
	}

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0x938C04", Offset = "0x938C04", VA = "0x938C04")]
	private void HandleHMDMounted()
	{
	}

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0x938D5C", Offset = "0x938D5C", VA = "0x938D5C")]
	private void HandleHMDUnmounted()
	{
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0x938D60", Offset = "0x938D60", VA = "0x938D60")]
	private void HandleInputFocusAcquired()
	{
	}

	[Token(Token = "0x6000D2F")]
	[Address(RVA = "0x938D64", Offset = "0x938D64", VA = "0x938D64")]
	private void HandleInputFocusLost()
	{
	}

	[Token(Token = "0x6000D30")]
	[Address(RVA = "0x938A44", Offset = "0x938A44", VA = "0x938A44")]
	private void PauseGame()
	{
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0x938C08", Offset = "0x938C08", VA = "0x938C08")]
	private void ResumeGame()
	{
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0x938D68", Offset = "0x938D68", VA = "0x938D68")]
	private void ShowHands()
	{
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0x938DE0", Offset = "0x938DE0", VA = "0x938DE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0x93920C", Offset = "0x93920C", VA = "0x93920C")]
	public QuestEvents()
	{
	}
}
[Token(Token = "0x20001CD")]
public class ReadOnlyAttribute : PropertyAttribute
{
	[Token(Token = "0x6000D35")]
	[Address(RVA = "0x939C78", Offset = "0x939C78", VA = "0x939C78")]
	public ReadOnlyAttribute()
	{
	}
}
[Token(Token = "0x20001CE")]
public class RecenterCamera : MonoBehaviour
{
	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750688", Offset = "0x750688")]
	private static Vector3 <Offset>k__BackingField;

	[Token(Token = "0x170000F5")]
	public static Vector3 Offset
	{
		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x939C80", Offset = "0x939C80", VA = "0x939C80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757494", Offset = "0x757494")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x939CD4", Offset = "0x939CD4", VA = "0x939CD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7574A4", Offset = "0x7574A4")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0x939D44", Offset = "0x939D44", VA = "0x939D44")]
	public void Recenter()
	{
	}

	[Token(Token = "0x6000D39")]
	[Address(RVA = "0x939D48", Offset = "0x939D48", VA = "0x939D48")]
	public void UpdateStart()
	{
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0x939D4C", Offset = "0x939D4C", VA = "0x939D4C")]
	public RecenterCamera()
	{
	}
}
[Token(Token = "0x20001CF")]
public class RefToValue<T>
{
	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T value;

	[Token(Token = "0x6000D3B")]
	public RefToValue()
	{
	}
}
[Token(Token = "0x20001D0")]
public class RotateTexture : MonoBehaviour
{
	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material animMat;

	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rotation;

	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float scale;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 offset;

	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 tiling;

	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material Material2SetMatrix;

	[Token(Token = "0x6000D3C")]
	[Address(RVA = "0x93BFE4", Offset = "0x93BFE4", VA = "0x93BFE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0x93C06C", Offset = "0x93C06C", VA = "0x93C06C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0x93C360", Offset = "0x93C360", VA = "0x93C360")]
	public RotateTexture()
	{
	}
}
[Token(Token = "0x20001D1")]
public static class SaveLoadUtility
{
	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0x93C3F8", Offset = "0x93C3F8", VA = "0x93C3F8")]
	public static string GetSaveDirectory()
	{
		return null;
	}

	[Token(Token = "0x6000D40")]
	[Address(RVA = "0x93C400", Offset = "0x93C400", VA = "0x93C400")]
	public static string GetFullSavePath(string filename)
	{
		return null;
	}

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0x93C45C", Offset = "0x93C45C", VA = "0x93C45C")]
	public static bool DoesFileExist(string filename)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0x93C4BC", Offset = "0x93C4BC", VA = "0x93C4BC")]
	public static void DeleteSaveData(string filename)
	{
	}

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0x93C51C", Offset = "0x93C51C", VA = "0x93C51C")]
	public static string ConvertDataToJson(object data)
	{
		return null;
	}

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0x93C528", Offset = "0x93C528", VA = "0x93C528")]
	public static bool SaveTextToDisk(string stringData, string filename)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0x93C72C", Offset = "0x93C72C", VA = "0x93C72C")]
	public static string LoadTextFromDisk(string filename)
	{
		return null;
	}

	[Token(Token = "0x6000D46")]
	public static T ConvertJsonToData<T>(string jsonText)
	{
		return (T)null;
	}
}
[Token(Token = "0x20001D2")]
public class ScaleCycler : TimeCycler
{
	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve m_scaleCurve;

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0x93C924", Offset = "0x93C924", VA = "0x93C924")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0x93C92C", Offset = "0x93C92C", VA = "0x93C92C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0x93C9CC", Offset = "0x93C9CC", VA = "0x93C9CC")]
	public ScaleCycler()
	{
	}
}
[Token(Token = "0x20001D3")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x74951C", Offset = "0x74951C")]
public class SceneBundle : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x200049C")]
	public class SceneObjectSerializer
	{
		[Token(Token = "0x4002037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[ReadOnly]
		public string SceneName;

		[Token(Token = "0x4002038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Object SceneObject;

		[Token(Token = "0x600234C")]
		[Address(RVA = "0x93CBF8", Offset = "0x93CBF8", VA = "0x93CBF8")]
		public void Validate()
		{
		}

		[Token(Token = "0x600234D")]
		[Address(RVA = "0x93CD0C", Offset = "0x93CD0C", VA = "0x93CD0C")]
		public SceneObjectSerializer()
		{
		}
	}

	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneObjectSerializer m_kinetic;

	[Token(Token = "0x4000D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SceneObjectSerializer m_create;

	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LunaSaveGameKineticSceneData m_kineticData;

	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LunaSaveGameCreateSceneData m_createData;

	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0x93CAD8", Offset = "0x93CAD8", VA = "0x93CAD8")]
	public void GetSceneData()
	{
	}

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0x93CB44", Offset = "0x93CB44", VA = "0x93CB44")]
	public bool HasKineticData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0x93CB54", Offset = "0x93CB54", VA = "0x93CB54")]
	public bool HasCreateData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0x93CB64", Offset = "0x93CB64", VA = "0x93CB64")]
	public bool IsCreateModeComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0x93CB84", Offset = "0x93CB84", VA = "0x93CB84")]
	public bool HasKineticOrCreateData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0x93CBA4", Offset = "0x93CBA4", VA = "0x93CBA4")]
	public bool HasKineticAndCreateData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0x93CBC4", Offset = "0x93CBC4", VA = "0x93CBC4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0x93CD04", Offset = "0x93CD04", VA = "0x93CD04")]
	public SceneBundle()
	{
	}
}
[Token(Token = "0x20001D4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x74952C", Offset = "0x74952C")]
public class ScreenshotUtil : MonoBehaviour
{
	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x750698", Offset = "0x750698")]
	public float kCustomFieldOfView;

	[Token(Token = "0x4000D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7506D0", Offset = "0x7506D0")]
	public int kCustomPixelWidth;

	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int kCustomPixelHeight;

	[Token(Token = "0x4000D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera m_camera;

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0x8B1244", Offset = "0x8B1244", VA = "0x8B1244")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0x8B129C", Offset = "0x8B129C", VA = "0x8B129C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0x8B15E4", Offset = "0x8B15E4", VA = "0x8B15E4")]
	public ScreenshotUtil()
	{
	}
}
[Token(Token = "0x20001D5")]
public static class ScribbleRefs
{
	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float m_scaleUpMult;

	[Token(Token = "0x4000D91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float m_scaleUpDuration;

	[Token(Token = "0x4000D92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float m_scaleUpFadeStart;
}
[Token(Token = "0x20001D6")]
public class ScrollTexture : MonoBehaviour
{
	[Token(Token = "0x4000D93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_propertyName;

	[Token(Token = "0x4000D94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_X_rate;

	[Token(Token = "0x4000D95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_Y_rate;

	[Token(Token = "0x4000D96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_X_offset;

	[Token(Token = "0x4000D97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_Y_offset;

	[Token(Token = "0x4000D98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_alt_offset;

	[Token(Token = "0x4000D99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material m_material;

	[Token(Token = "0x4000D9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_Y_animatedOffset;

	[Token(Token = "0x4000D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_X_animatedOffset;

	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_hasProperty;

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0x8B1DBC", Offset = "0x8B1DBC", VA = "0x8B1DBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0x8B1E5C", Offset = "0x8B1E5C", VA = "0x8B1E5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0x8B2004", Offset = "0x8B2004", VA = "0x8B2004")]
	public ScrollTexture()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D7")]
public class SerializableEnum<T> : ISerializationCallbackReceiver where T : struct, IConvertible
{
	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	protected string m_enumValueAsString;

	[Token(Token = "0x4000D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected T m_enumValue;

	[Token(Token = "0x170000F6")]
	public T Value
	{
		[Token(Token = "0x6000D59")]
		get
		{
			return (T)null;
		}
	}

	[Token(Token = "0x6000D5A")]
	public SerializableEnum()
	{
	}

	[Token(Token = "0x6000D5B")]
	public SerializableEnum(T initialValue)
	{
	}

	[Token(Token = "0x6000D5C")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000D5D")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000D5E")]
	protected void SetEnumFromString()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D8")]
public struct Vector3Serial
{
	[Token(Token = "0x4000D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000DA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000DA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0x63C350", Offset = "0x63C350", VA = "0x63C350")]
	public Vector3Serial(Vector3 vec)
	{
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0x63C35C", Offset = "0x63C35C", VA = "0x63C35C")]
	public Vector3 AsVector3()
	{
		return default(Vector3);
	}
}
[Serializable]
[Token(Token = "0x20001D9")]
public struct QuaternionSerial
{
	[Token(Token = "0x4000DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float w;

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0x63D944", Offset = "0x63D944", VA = "0x63D944")]
	public QuaternionSerial(Quaternion quat)
	{
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0x63D950", Offset = "0x63D950", VA = "0x63D950")]
	public Quaternion AsQuaternion()
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x20001DA")]
public class SetAsMainCamera : MonoBehaviour
{
	[Token(Token = "0x6000D63")]
	[Address(RVA = "0x8B24E8", Offset = "0x8B24E8", VA = "0x8B24E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0x8B2540", Offset = "0x8B2540", VA = "0x8B2540")]
	public SetAsMainCamera()
	{
	}
}
[Token(Token = "0x20001DB")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749590", Offset = "0x749590")]
public class SetConfigurableJointAngularDrive : MonoBehaviour
{
	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ConfigurableJoint m_configurableJoint;

	[Token(Token = "0x6000D65")]
	[Address(RVA = "0x8B2548", Offset = "0x8B2548", VA = "0x8B2548")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D66")]
	[Address(RVA = "0x8B25A0", Offset = "0x8B25A0", VA = "0x8B25A0")]
	public void SetAngularDriveX(float target)
	{
	}

	[Token(Token = "0x6000D67")]
	[Address(RVA = "0x8B261C", Offset = "0x8B261C", VA = "0x8B261C")]
	public void SetAngularDriveYZ(float target)
	{
	}

	[Token(Token = "0x6000D68")]
	[Address(RVA = "0x8B2698", Offset = "0x8B2698", VA = "0x8B2698")]
	public SetConfigurableJointAngularDrive()
	{
	}
}
[Token(Token = "0x20001DC")]
public class SetTransformOnStart : MonoBehaviour
{
	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_setPosition;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool m_setRotation;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool m_setScale;

	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 m_position;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 m_rotation;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 m_scale;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform m_transform;

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0x8B30E4", Offset = "0x8B30E4", VA = "0x8B30E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0x8B3220", Offset = "0x8B3220", VA = "0x8B3220")]
	public SetTransformOnStart()
	{
	}
}
[Token(Token = "0x20001DD")]
public class SimpleScaleAnimator
{
	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Transform m_transform;

	[Token(Token = "0x4000DAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_startScale;

	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_timer;

	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly float m_targetScaleMult;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private readonly float m_duration;

	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0x8B4C78", Offset = "0x8B4C78", VA = "0x8B4C78")]
	public SimpleScaleAnimator(Transform transform, float targetScaleMult, float duration)
	{
	}

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0x8B4CC0", Offset = "0x8B4CC0", VA = "0x8B4CC0")]
	public void Play()
	{
	}

	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0x8B4CFC", Offset = "0x8B4CFC", VA = "0x8B4CFC")]
	public void Update()
	{
	}
}
[Token(Token = "0x20001DE")]
public class SimpleThrowablePhysicsObject : CursorInputMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200049D")]
	public enum RespawnType
	{
		[Token(Token = "0x400203A")]
		SpawnReset,
		[Token(Token = "0x400203B")]
		SpawnDisable
	}

	[Token(Token = "0x200049E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AF10", Offset = "0x74AF10")]
	private sealed class <ResetIgnoreCollision>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400203C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int cursorIndex;

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SimpleThrowablePhysicsObject <>4__this;

		[Token(Token = "0x17000388")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002351")]
			[Address(RVA = "0x8B655C", Offset = "0x8B655C", VA = "0x8B655C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000389")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002353")]
			[Address(RVA = "0x8B65C8", Offset = "0x8B65C8", VA = "0x8B65C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600234E")]
		[Address(RVA = "0x8B4EA4", Offset = "0x8B4EA4", VA = "0x8B4EA4")]
		[DebuggerHidden]
		public <ResetIgnoreCollision>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600234F")]
		[Address(RVA = "0x8B645C", Offset = "0x8B645C", VA = "0x8B645C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002350")]
		[Address(RVA = "0x8B6460", Offset = "0x8B6460", VA = "0x8B6460", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002352")]
		[Address(RVA = "0x8B6564", Offset = "0x8B6564", VA = "0x8B6564", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750718", Offset = "0x750718")]
	public float kForceMultiplier;

	[Token(Token = "0x4000DB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750750", Offset = "0x750750")]
	public bool m_breakJoints;

	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750788", Offset = "0x750788")]
	public bool m_kinematic;

	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool[] m_startAttached;

	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float m_respawnHeight;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7507C0", Offset = "0x7507C0")]
	public RespawnType m_respawnType;

	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 m_originalPosition;

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion m_originalRotation;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private FixedJoint[] m_joints;

	[Token(Token = "0x4000DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string soundEvent;

	[Token(Token = "0x4000DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string m_grabSound;

	[Token(Token = "0x4000DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float kPlaybackRate;

	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Collider m_collider;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private MeshFilter m_meshFilter;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float m_audioTimer;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool m_isFalling;

	[Token(Token = "0x4000DC4")]
	private const float kRestSpeedSq = 0.1f;

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0x8B4E20", Offset = "0x8B4E20", VA = "0x8B4E20")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7574B4", Offset = "0x7574B4")]
	private IEnumerator ResetIgnoreCollision(int cursorIndex)
	{
		return null;
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0x8B4ED0", Offset = "0x8B4ED0", VA = "0x8B4ED0")]
	public void SetStartAttached(int cursorIndex, bool attached)
	{
	}

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0x8B4F18", Offset = "0x8B4F18", VA = "0x8B4F18", Slot = "8")]
	protected override void CursorAwake()
	{
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0x8B5064", Offset = "0x8B5064", VA = "0x8B5064", Slot = "9")]
	protected override void CursorStart()
	{
	}

	[Token(Token = "0x6000D72")]
	[Address(RVA = "0x8B50CC", Offset = "0x8B50CC", VA = "0x8B50CC", Slot = "11")]
	protected override void CursorOnDisable()
	{
	}

	[Token(Token = "0x6000D73")]
	[Address(RVA = "0x8B5370", Offset = "0x8B5370", VA = "0x8B5370", Slot = "10")]
	protected override void CursorOnEnable()
	{
	}

	[Token(Token = "0x6000D74")]
	[Address(RVA = "0x8B55EC", Offset = "0x8B55EC", VA = "0x8B55EC", Slot = "27")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000D75")]
	[Address(RVA = "0x8B5768", Offset = "0x8B5768", VA = "0x8B5768", Slot = "12")]
	protected override void OnCursorGrabbed(int cursorIndex, Collider otherCollider)
	{
	}

	[Token(Token = "0x6000D76")]
	[Address(RVA = "0x8B5438", Offset = "0x8B5438", VA = "0x8B5438")]
	private void GrabObject(int cursorIndex)
	{
	}

	[Token(Token = "0x6000D77")]
	[Address(RVA = "0x8B5B94", Offset = "0x8B5B94", VA = "0x8B5B94", Slot = "13")]
	protected override void OnCursorReleased(int cursorIndex)
	{
	}

	[Token(Token = "0x6000D78")]
	[Address(RVA = "0x8B5DC8", Offset = "0x8B5DC8", VA = "0x8B5DC8", Slot = "18")]
	protected override bool CursorUpdate(int cursorIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0x8B611C", Offset = "0x8B611C", VA = "0x8B611C", Slot = "35")]
	public override void CursorInputUpdate()
	{
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0x8B61DC", Offset = "0x8B61DC", VA = "0x8B61DC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0x8B5988", Offset = "0x8B5988", VA = "0x8B5988")]
	private void AddHeldThrowableReference()
	{
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0x8B5164", Offset = "0x8B5164", VA = "0x8B5164")]
	private void RemoveHeldThrowableReference()
	{
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0x8B63C0", Offset = "0x8B63C0", VA = "0x8B63C0")]
	public SimpleThrowablePhysicsObject()
	{
	}
}
[Token(Token = "0x20001DF")]
public static class SoundRefs
{
	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string none;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string waterImpact;

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string waterSplash;

	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string waterDrag;

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string dirtSplash;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string dirtDrag;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string grassSplash;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string grassDrag;

	[Token(Token = "0x4000DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string paletteOpen;

	[Token(Token = "0x4000DCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string paletteClose;

	[Token(Token = "0x4000DCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string paletteGrab;

	[Token(Token = "0x4000DD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string paletteNear;

	[Token(Token = "0x4000DD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string introAmbientSoundStart;

	[Token(Token = "0x4000DD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string introAmbientSoundStop;

	[Token(Token = "0x4000DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string introStarGrab;

	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string introStarSuccess;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string introStarFail;

	[Token(Token = "0x4000DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string introStarTransform;

	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string anyStarGrab;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static string growableSculptStart;

	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string growableSculptStop;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static string growableResizeStart;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static string growableResizeStop;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static string growableSculptSpeed;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static string growableSculptAmount;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static string growableResizeSpeed;

	[Token(Token = "0x4000DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static string growableResizeAmount;

	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static string birdPetStart;

	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static string birdPetStop;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static string birdPetSpeed;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static string createModeGrowFail;

	[Token(Token = "0x4000DE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static string createModeScribbleAppear;

	[Token(Token = "0x4000DE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public static string createModeTurtleScribbleTouch;

	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static string frogLandOnLily;

	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public static string sinkInWater;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static string starTotemAppearFrond;

	[Token(Token = "0x4000DE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static string starTotemAppearGrass;

	[Token(Token = "0x4000DEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public static string starTotemAppearLilypad;

	[Token(Token = "0x4000DEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public static string starTotemAppearTree;

	[Token(Token = "0x4000DEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public static string starTotemAppearTurtle;

	[Token(Token = "0x4000DED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public static string seedPodScribbleTouch;
}
[Token(Token = "0x20001E0")]
public class StartCamera : MonoBehaviour
{
	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0x8C4180", Offset = "0x8C4180", VA = "0x8C4180")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0x8C41FC", Offset = "0x8C41FC", VA = "0x8C41FC")]
	public StartCamera()
	{
	}
}
[Token(Token = "0x20001E1")]
public class StateController
{
	[Token(Token = "0x4000DEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool m_state;

	[Token(Token = "0x4000DEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StateTimer m_stateTimer;

	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEvent m_stateTimerCompleteEvent;

	[Token(Token = "0x6000D81")]
	[Address(RVA = "0x8C4204", Offset = "0x8C4204", VA = "0x8C4204")]
	public StateController()
	{
	}

	[Token(Token = "0x6000D82")]
	[Address(RVA = "0x8C42CC", Offset = "0x8C42CC", VA = "0x8C42CC")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000D83")]
	[Address(RVA = "0x8C42D4", Offset = "0x8C42D4", VA = "0x8C42D4")]
	public bool GetState()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D84")]
	[Address(RVA = "0x8C42DC", Offset = "0x8C42DC", VA = "0x8C42DC")]
	public void SetState(bool state)
	{
	}

	[Token(Token = "0x6000D85")]
	[Address(RVA = "0x8C42E8", Offset = "0x8C42E8", VA = "0x8C42E8")]
	public StateTimer GetTimer()
	{
		return null;
	}

	[Token(Token = "0x6000D86")]
	[Address(RVA = "0x8C42F0", Offset = "0x8C42F0", VA = "0x8C42F0")]
	public void AddTimerCompleteListener(UnityAction action)
	{
	}

	[Token(Token = "0x6000D87")]
	[Address(RVA = "0x8C430C", Offset = "0x8C430C", VA = "0x8C430C")]
	public void RemoveTimerCompleteListener(UnityAction action)
	{
	}

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0x8C4328", Offset = "0x8C4328", VA = "0x8C4328")]
	public void RemoveAllTimerCompleteListeners()
	{
	}

	[Token(Token = "0x6000D89")]
	[Address(RVA = "0x8C4344", Offset = "0x8C4344", VA = "0x8C4344")]
	public void Update()
	{
	}
}
[Serializable]
[Token(Token = "0x20001E2")]
public class StateTimer
{
	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float value;

	[Token(Token = "0x4000DF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float cap;

	[Token(Token = "0x6000D8A")]
	[Address(RVA = "0x8C42A0", Offset = "0x8C42A0", VA = "0x8C42A0")]
	public StateTimer()
	{
	}

	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0x8C4418", Offset = "0x8C4418", VA = "0x8C4418")]
	public StateTimer(float c)
	{
	}

	[Token(Token = "0x6000D8C")]
	[Address(RVA = "0x8C4450", Offset = "0x8C4450", VA = "0x8C4450")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000D8D")]
	[Address(RVA = "0x8C43CC", Offset = "0x8C43CC", VA = "0x8C43CC")]
	public bool IncrementCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D8E")]
	[Address(RVA = "0x8C4458", Offset = "0x8C4458", VA = "0x8C4458")]
	public void SetCap(float a)
	{
	}

	[Token(Token = "0x6000D8F")]
	[Address(RVA = "0x8C4460", Offset = "0x8C4460", VA = "0x8C4460")]
	public void RandomizeCap(float a, float b)
	{
	}

	[Token(Token = "0x6000D90")]
	[Address(RVA = "0x8C4488", Offset = "0x8C4488", VA = "0x8C4488")]
	public void RandomizeCap(Vector2 cap)
	{
	}
}
[Token(Token = "0x20001E3")]
public static class SystemLanguageConverter
{
	[Token(Token = "0x6000D91")]
	[Address(RVA = "0x79C840", Offset = "0x79C840", VA = "0x79C840")]
	public static SystemLanguage CorrectLanguage(SystemLanguage language)
	{
		return default(SystemLanguage);
	}

	[Token(Token = "0x6000D92")]
	[Address(RVA = "0x79C850", Offset = "0x79C850", VA = "0x79C850")]
	public static string UpdateLanguageName(string language)
	{
		return null;
	}

	[Token(Token = "0x6000D93")]
	[Address(RVA = "0x79C950", Offset = "0x79C950", VA = "0x79C950")]
	public static SystemLanguage ToSystemLanguage(string language)
	{
		return default(SystemLanguage);
	}

	[Token(Token = "0x6000D94")]
	[Address(RVA = "0x79CE08", Offset = "0x79CE08", VA = "0x79CE08")]
	public static string ToString(SystemLanguage language)
	{
		return null;
	}
}
[Token(Token = "0x20001E4")]
public class ThresholdEvent : MonoBehaviour
{
	[Token(Token = "0x4000DF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_thresholdValue;

	[Token(Token = "0x4000DF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_accumulator;

	[Token(Token = "0x4000DF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent m_OnPositiveThreshold;

	[Token(Token = "0x4000DF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent m_OnNegativeThreshold;

	[Token(Token = "0x6000D95")]
	[Address(RVA = "0x7A1E30", Offset = "0x7A1E30", VA = "0x7A1E30")]
	public void OnAccumulate(float value)
	{
	}

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0x7A1F08", Offset = "0x7A1F08", VA = "0x7A1F08")]
	public ThresholdEvent()
	{
	}
}
[Token(Token = "0x20001E5")]
public class TimeCycler : MonoBehaviour
{
	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_duration;

	[Token(Token = "0x4000DF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent m_onCycleComplete;

	[Token(Token = "0x4000DF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected float m_normalizedTime;

	[Token(Token = "0x4000DFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private StateTimer m_timer;

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0x7A2C60", Offset = "0x7A2C60", VA = "0x7A2C60")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000D98")]
	[Address(RVA = "0x7A2C84", Offset = "0x7A2C84", VA = "0x7A2C84")]
	protected void InitTimer()
	{
	}

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0x7A2CA8", Offset = "0x7A2CA8", VA = "0x7A2CA8")]
	protected void UpdateTimer()
	{
	}

	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0x7A2D64", Offset = "0x7A2D64", VA = "0x7A2D64")]
	public TimeCycler()
	{
	}
}
[Token(Token = "0x20001E6")]
public class TimeRamp : MonoBehaviour
{
	[Token(Token = "0x4000DFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7507F8", Offset = "0x7507F8")]
	public float speed;

	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool enable;

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0x7A2E48", Offset = "0x7A2E48", VA = "0x7A2E48")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0x7A2E68", Offset = "0x7A2E68", VA = "0x7A2E68")]
	public TimeRamp()
	{
	}
}
[Token(Token = "0x20001E7")]
public class TimerParticlePropertyDriver : ParticlePropertyDriver
{
	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float m_duration;

	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private StateTimer m_timer;

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0x7A2E80", Offset = "0x7A2E80", VA = "0x7A2E80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0x7A2EA4", Offset = "0x7A2EA4", VA = "0x7A2EA4", Slot = "4")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0x7A2F14", Offset = "0x7A2F14", VA = "0x7A2F14")]
	public TimerParticlePropertyDriver()
	{
	}
}
[Token(Token = "0x20001E8")]
public class TouchRotate : MonoBehaviour
{
	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0x7A2F7C", Offset = "0x7A2F7C", VA = "0x7A2F7C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0x7A2F80", Offset = "0x7A2F80", VA = "0x7A2F80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0x7A2F84", Offset = "0x7A2F84", VA = "0x7A2F84")]
	public TouchRotate()
	{
	}
}
[Token(Token = "0x20001E9")]
public class TrailRenderColorCycler : GradientCycler
{
	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private TrailRenderer m_trailRenderer;

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0x7A2F8C", Offset = "0x7A2F8C", VA = "0x7A2F8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0x7A2FF0", Offset = "0x7A2FF0", VA = "0x7A2FF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0x7A3044", Offset = "0x7A3044", VA = "0x7A3044")]
	public TrailRenderColorCycler()
	{
	}
}
[Token(Token = "0x20001EA")]
public class TransformAsMono : MonoBehaviour
{
	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_localPosition;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 m_localRotation;

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 m_localScale;

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0x7A35C8", Offset = "0x7A35C8", VA = "0x7A35C8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0x7A36C4", Offset = "0x7A36C4", VA = "0x7A36C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0x7A36C8", Offset = "0x7A36C8", VA = "0x7A36C8")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0x7A35CC", Offset = "0x7A35CC", VA = "0x7A35CC")]
	private void SetTransformFromMono()
	{
	}

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0x7A36CC", Offset = "0x7A36CC", VA = "0x7A36CC")]
	private void SetMonoFromTransform()
	{
	}

	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0x7A3748", Offset = "0x7A3748", VA = "0x7A3748")]
	public TransformAsMono()
	{
	}
}
[Token(Token = "0x20001EB")]
public static class Util
{
	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0x7A6080", Offset = "0x7A6080", VA = "0x7A6080")]
	public static GameObject FindChildByName(GameObject parent, string name, bool includeInactive = false, bool ignoreParent = true)
	{
		return null;
	}

	[Token(Token = "0x6000DAD")]
	public static List<T> FindChildrenContainingString<T>(Transform root, string str) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6000DAE")]
	public static T FindComponentInScene<T>(UnityEngine.SceneManagement.Scene scene) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6000DAF")]
	public static void FindComponentsInScene<T>(UnityEngine.SceneManagement.Scene scene, ref List<T> allComponents) where T : Component
	{
	}

	[Token(Token = "0x6000DB0")]
	[Address(RVA = "0x7A61F0", Offset = "0x7A61F0", VA = "0x7A61F0")]
	public static bool GetIsGameObjectNameUniqueInHierarchy(GameObject queryGameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DB1")]
	public static T SetComponent<T>(GameObject gameObject) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6000DB2")]
	[Address(RVA = "0x7A6458", Offset = "0x7A6458", VA = "0x7A6458")]
	public static void SetMainCamera(Camera mainCamera)
	{
	}

	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0x7A65AC", Offset = "0x7A65AC", VA = "0x7A65AC")]
	public static void CopyTransform(Transform from, Transform to)
	{
	}

	[Token(Token = "0x6000DB4")]
	[Address(RVA = "0x7A6624", Offset = "0x7A6624", VA = "0x7A6624")]
	public static void CopyWorldTransform(Transform from, Transform to)
	{
	}

	[Token(Token = "0x6000DB5")]
	[Address(RVA = "0x7A6684", Offset = "0x7A6684", VA = "0x7A6684")]
	public static void CopyCamera(Camera from, Camera to)
	{
	}

	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0x7A672C", Offset = "0x7A672C", VA = "0x7A672C")]
	public static void AttachAndPreserveTransform(Transform child, Transform newParent)
	{
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0x7A6818", Offset = "0x7A6818", VA = "0x7A6818")]
	public static bool GetCheat(KeyCode cheatCode)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0x7A6820", Offset = "0x7A6820", VA = "0x7A6820")]
	public static bool GetCheatHeld(KeyCode cheatCode)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0x7A6828", Offset = "0x7A6828", VA = "0x7A6828")]
	public static void SetAlphaOnMaterialProperty(MaterialProperty materialProperty, float alpha)
	{
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0x7A6888", Offset = "0x7A6888", VA = "0x7A6888")]
	public static void SetAlphaOnMaterialProperties(MaterialProperty[] materialProperties, float alpha)
	{
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0x7A6914", Offset = "0x7A6914", VA = "0x7A6914")]
	public static void SetAlphaOnMaterialProperties(List<MaterialProperty> materialProperties, float alpha)
	{
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0x7A69C0", Offset = "0x7A69C0", VA = "0x7A69C0")]
	public static void SetValueOnMaterialProperties(List<MaterialProperty> materialProperties, float value)
	{
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0x7A6AB0", Offset = "0x7A6AB0", VA = "0x7A6AB0")]
	public static int GetColorPropertyId(Material material)
	{
		return default(int);
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0x7A6BB4", Offset = "0x7A6BB4", VA = "0x7A6BB4")]
	public static void GetColorMaterialProperties(Material[] materials, List<MaterialProperty> materialProperties)
	{
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0x7A6CA8", Offset = "0x7A6CA8", VA = "0x7A6CA8")]
	public static void GetMaterialProperties(Material[] materials, List<MaterialProperty> materialProperties, int propertyId)
	{
	}

	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0x7A6DB0", Offset = "0x7A6DB0", VA = "0x7A6DB0")]
	public static void GetColorMaterialProperties(Renderer[] renderers, List<MaterialProperty> materialProperties)
	{
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0x7A6E34", Offset = "0x7A6E34", VA = "0x7A6E34")]
	public static void GetMaterialProperties(Renderer[] renderers, List<MaterialProperty> materialProperties, string propertyName)
	{
	}

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0x7A6ED4", Offset = "0x7A6ED4", VA = "0x7A6ED4")]
	public static float GetEmitRateFromEmitter(ParticleSystem emitter)
	{
		return default(float);
	}

	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0x7A6F30", Offset = "0x7A6F30", VA = "0x7A6F30")]
	public static void SetEmitRateOnEmitter(ParticleSystem emitter, float emitRate)
	{
	}

	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0x7A6F9C", Offset = "0x7A6F9C", VA = "0x7A6F9C")]
	public static void EnableEmissionOnEmitter(ParticleSystem emitter, bool enabled)
	{
	}

	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0x7A6FE0", Offset = "0x7A6FE0", VA = "0x7A6FE0")]
	public static void ToggleGameObject(GameObject gameObject, bool enabled)
	{
	}

	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0x7A7034", Offset = "0x7A7034", VA = "0x7A7034")]
	public static Vector3 ClosestPointOnSegment(Vector3 p, Vector3 a, Vector3 b)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0x7A7210", Offset = "0x7A7210", VA = "0x7A7210")]
	public static Vector3 ProjectOnCameraPlane(Vector3 worldPos, Camera camera, float planeDistFromCamera)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0x7A7258", Offset = "0x7A7258", VA = "0x7A7258")]
	public static float PointRayDistance(Vector3 point, Ray ray)
	{
		return default(float);
	}

	[Token(Token = "0x6000DC9")]
	[Address(RVA = "0x7A7378", Offset = "0x7A7378", VA = "0x7A7378")]
	public static float PointRayDistanceSq(Vector3 point, Ray ray)
	{
		return default(float);
	}

	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0x7A7498", Offset = "0x7A7498", VA = "0x7A7498")]
	public static float ClampLength(float number, float maxLength)
	{
		return default(float);
	}

	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0x7A74B8", Offset = "0x7A74B8", VA = "0x7A74B8")]
	public static void SetLayerRecursive(Transform transform, int layer)
	{
	}
}
[Token(Token = "0x20001EC")]
public class ValueUpdater
{
	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float CurrentValue;

	[Token(Token = "0x4000E04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float TargetValue;

	[Token(Token = "0x4000E05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x6000DCC")]
	[Address(RVA = "0x7ACA50", Offset = "0x7ACA50", VA = "0x7ACA50")]
	public ValueUpdater()
	{
	}

	[Token(Token = "0x6000DCD")]
	[Address(RVA = "0x7ACA80", Offset = "0x7ACA80", VA = "0x7ACA80")]
	public void Update()
	{
	}
}
[Token(Token = "0x20001ED")]
public class VolumeManager : MonoBehaviour
{
	[Token(Token = "0x6000DCE")]
	[Address(RVA = "0x832F08", Offset = "0x832F08", VA = "0x832F08")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DCF")]
	[Address(RVA = "0x83308C", Offset = "0x83308C", VA = "0x83308C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0x833210", Offset = "0x833210", VA = "0x833210")]
	private void OnMasterVolumeChanged(object obj)
	{
	}

	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0x8333A4", Offset = "0x8333A4", VA = "0x8333A4")]
	private void OnMusicVolumeChanged(object obj)
	{
	}

	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0x833470", Offset = "0x833470", VA = "0x833470")]
	private void OnSfxVolumeChanged(object obj)
	{
	}

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0x83353C", Offset = "0x83353C", VA = "0x83353C")]
	private void OnDialogVolumeChanged(object obj)
	{
	}

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0x8332DC", Offset = "0x8332DC", VA = "0x8332DC")]
	private void SetVolume(Audio.AudioChannel channel, int volume)
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0x833608", Offset = "0x833608", VA = "0x833608")]
	public VolumeManager()
	{
	}
}
[Token(Token = "0x20001EE")]
public enum BeaconType
{
	[Token(Token = "0x4000E07")]
	Attract,
	[Token(Token = "0x4000E08")]
	Repel,
	[Token(Token = "0x4000E09")]
	Neutral
}
[Token(Token = "0x20001EF")]
public class VRHandBeacon : MonoBehaviour
{
	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_beaconTransform;

	[Token(Token = "0x4000E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BeaconType m_beaconType;

	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0x7A7C44", Offset = "0x7A7C44", VA = "0x7A7C44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0x7A7CCC", Offset = "0x7A7CCC", VA = "0x7A7CCC")]
	public Vector3 GetPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0x7A7CE8", Offset = "0x7A7CE8", VA = "0x7A7CE8")]
	public void SetAttract()
	{
	}

	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0x7A7CF0", Offset = "0x7A7CF0", VA = "0x7A7CF0")]
	public void SetRepel()
	{
	}

	[Token(Token = "0x6000DDA")]
	[Address(RVA = "0x7A7CFC", Offset = "0x7A7CFC", VA = "0x7A7CFC")]
	public void SetNeutral()
	{
	}

	[Token(Token = "0x6000DDB")]
	[Address(RVA = "0x7A7D08", Offset = "0x7A7D08", VA = "0x7A7D08")]
	public VRHandBeacon()
	{
	}
}
[Token(Token = "0x20001F0")]
public class VRInput
{
	[Token(Token = "0x200049F")]
	public enum CursorIndex
	{
		[Token(Token = "0x4002041")]
		InvalidCursor = -1,
		[Token(Token = "0x4002042")]
		PrimaryCursor,
		[Token(Token = "0x4002043")]
		SecondaryCursor,
		[Token(Token = "0x4002044")]
		TertiaryCursor
	}

	[Token(Token = "0x20004A0")]
	public enum ControllerIndex
	{
		[Token(Token = "0x4002046")]
		Left,
		[Token(Token = "0x4002047")]
		Right
	}

	[Token(Token = "0x20004A1")]
	public static class AxisMappings
	{
		[Token(Token = "0x4002048")]
		public const string LeftStickHorizontal = "Axis1";

		[Token(Token = "0x4002049")]
		public const string LeftStickVertical = "Axis2";

		[Token(Token = "0x400204A")]
		public const string RightStickHorizontal = "Axis4";

		[Token(Token = "0x400204B")]
		public const string RightStickVertical = "Axis5";

		[Token(Token = "0x400204C")]
		public const string LeftTrigger = "Axis9";

		[Token(Token = "0x400204D")]
		public const string RightTrigger = "Axis10";

		[Token(Token = "0x400204E")]
		public const string LeftGrip = "Axis11";

		[Token(Token = "0x400204F")]
		public const string RightGrip = "Axis12";
	}

	[Token(Token = "0x20004A2")]
	public static class ButtonMappings
	{
		[Token(Token = "0x4002050")]
		public const KeyCode LeftTrigger = KeyCode.JoystickButton14;

		[Token(Token = "0x4002051")]
		public const KeyCode RightTrigger = KeyCode.JoystickButton15;

		[Token(Token = "0x4002052")]
		public const KeyCode LeftTrackpad = KeyCode.JoystickButton8;

		[Token(Token = "0x4002053")]
		public const KeyCode RightTrackpad = KeyCode.JoystickButton9;

		[Token(Token = "0x4002054")]
		public const KeyCode LeftIndexTouch = KeyCode.JoystickButton14;

		[Token(Token = "0x4002055")]
		public const KeyCode RightIndexTouch = KeyCode.JoystickButton15;

		[Token(Token = "0x4002056")]
		public const KeyCode ButtonA = KeyCode.JoystickButton0;

		[Token(Token = "0x4002057")]
		public const KeyCode ButtonB = KeyCode.JoystickButton1;

		[Token(Token = "0x4002058")]
		public const KeyCode ButtonX = KeyCode.JoystickButton2;

		[Token(Token = "0x4002059")]
		public const KeyCode ButtonY = KeyCode.JoystickButton3;
	}

	[Token(Token = "0x4000E0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750810", Offset = "0x750810")]
	private static bool <LeftTriggerDown>k__BackingField;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750820", Offset = "0x750820")]
	private static bool <LeftTriggerUp>k__BackingField;

	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750830", Offset = "0x750830")]
	private static bool <RightTriggerDown>k__BackingField;

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750840", Offset = "0x750840")]
	private static bool <RightTriggerUp>k__BackingField;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750850", Offset = "0x750850")]
	private static bool <LeftGripDown>k__BackingField;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750860", Offset = "0x750860")]
	private static bool <LeftGripUp>k__BackingField;

	[Token(Token = "0x4000E12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750870", Offset = "0x750870")]
	private static bool <RightGripDown>k__BackingField;

	[Token(Token = "0x4000E13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750880", Offset = "0x750880")]
	private static bool <RightGripUp>k__BackingField;

	[Token(Token = "0x4000E14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750890", Offset = "0x750890")]
	private static bool <LeftTriggerPressed>k__BackingField;

	[Token(Token = "0x4000E15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7508A0", Offset = "0x7508A0")]
	private static bool <RightTriggerPressed>k__BackingField;

	[Token(Token = "0x4000E16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7508B0", Offset = "0x7508B0")]
	private static bool <LeftGripPressed>k__BackingField;

	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7508C0", Offset = "0x7508C0")]
	private static bool <RightGripPressed>k__BackingField;

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7508D0", Offset = "0x7508D0")]
	private static float <LeftTrigger>k__BackingField;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7508E0", Offset = "0x7508E0")]
	private static float <RightTrigger>k__BackingField;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7508F0", Offset = "0x7508F0")]
	private static float <LeftGrip>k__BackingField;

	[Token(Token = "0x4000E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750900", Offset = "0x750900")]
	private static float <RightGrip>k__BackingField;

	[Token(Token = "0x4000E1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750910", Offset = "0x750910")]
	private static Vector2 <LeftStick>k__BackingField;

	[Token(Token = "0x4000E1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750920", Offset = "0x750920")]
	private static Vector2 <RightStick>k__BackingField;

	[Token(Token = "0x4000E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750930", Offset = "0x750930")]
	private static bool <LeftIndexTouch>k__BackingField;

	[Token(Token = "0x4000E1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750940", Offset = "0x750940")]
	private static bool <RightIndexTouch>k__BackingField;

	[Token(Token = "0x4000E20")]
	public const int CURSOR_COUNT_MAX = 2;

	[Token(Token = "0x4000E21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static int[] m_menuButtons;

	[Token(Token = "0x4000E22")]
	private const int JOYSTICK_BUTTONS_COUNT = 20;

	[Token(Token = "0x4000E23")]
	private const int JOYSTICK_MIN_INDEX = 1;

	[Token(Token = "0x4000E24")]
	private const int JOYSTICK_MAX_INDEX = 8;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static int m_leftIndex;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static int m_rightIndex;

	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static int m_leftIndexOffest;

	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private static int m_rightIndexOffset;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static KeyCode[] m_androidMenuButtons;

	[Token(Token = "0x170000F7")]
	public static bool ToggleButtonDown
	{
		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x7A93BC", Offset = "0x7A93BC", VA = "0x7A93BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F8")]
	public static bool LeftTriggerDown
	{
		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x7A93C8", Offset = "0x7A93C8", VA = "0x7A93C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757518", Offset = "0x757518")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x7A9430", Offset = "0x7A9430", VA = "0x7A9430")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757528", Offset = "0x757528")]
		private set
		{
		}
	}

	[Token(Token = "0x170000F9")]
	public static bool LeftTriggerUp
	{
		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x7A94A0", Offset = "0x7A94A0", VA = "0x7A94A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757538", Offset = "0x757538")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x7A9508", Offset = "0x7A9508", VA = "0x7A9508")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757548", Offset = "0x757548")]
		private set
		{
		}
	}

	[Token(Token = "0x170000FA")]
	public static bool RightTriggerDown
	{
		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x7A9578", Offset = "0x7A9578", VA = "0x7A9578")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757558", Offset = "0x757558")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x7A95E0", Offset = "0x7A95E0", VA = "0x7A95E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757568", Offset = "0x757568")]
		private set
		{
		}
	}

	[Token(Token = "0x170000FB")]
	public static bool RightTriggerUp
	{
		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x7A9650", Offset = "0x7A9650", VA = "0x7A9650")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757578", Offset = "0x757578")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x7A96B8", Offset = "0x7A96B8", VA = "0x7A96B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757588", Offset = "0x757588")]
		private set
		{
		}
	}

	[Token(Token = "0x170000FC")]
	public static bool LeftGripDown
	{
		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x7A9728", Offset = "0x7A9728", VA = "0x7A9728")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757598", Offset = "0x757598")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x7A9790", Offset = "0x7A9790", VA = "0x7A9790")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7575A8", Offset = "0x7575A8")]
		private set
		{
		}
	}

	[Token(Token = "0x170000FD")]
	public static bool LeftGripUp
	{
		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x7A9800", Offset = "0x7A9800", VA = "0x7A9800")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7575B8", Offset = "0x7575B8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x7A9868", Offset = "0x7A9868", VA = "0x7A9868")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7575C8", Offset = "0x7575C8")]
		private set
		{
		}
	}

	[Token(Token = "0x170000FE")]
	public static bool RightGripDown
	{
		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x7A98D8", Offset = "0x7A98D8", VA = "0x7A98D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7575D8", Offset = "0x7575D8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x7A9940", Offset = "0x7A9940", VA = "0x7A9940")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7575E8", Offset = "0x7575E8")]
		private set
		{
		}
	}

	[Token(Token = "0x170000FF")]
	public static bool RightGripUp
	{
		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x7A99B0", Offset = "0x7A99B0", VA = "0x7A99B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7575F8", Offset = "0x7575F8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x7A9A18", Offset = "0x7A9A18", VA = "0x7A9A18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757608", Offset = "0x757608")]
		private set
		{
		}
	}

	[Token(Token = "0x17000100")]
	public static bool LeftTriggerPressed
	{
		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x7A9A88", Offset = "0x7A9A88", VA = "0x7A9A88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757618", Offset = "0x757618")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x7A9AF0", Offset = "0x7A9AF0", VA = "0x7A9AF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757628", Offset = "0x757628")]
		private set
		{
		}
	}

	[Token(Token = "0x17000101")]
	public static bool RightTriggerPressed
	{
		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x7A9B60", Offset = "0x7A9B60", VA = "0x7A9B60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757638", Offset = "0x757638")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x7A9BC8", Offset = "0x7A9BC8", VA = "0x7A9BC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757648", Offset = "0x757648")]
		private set
		{
		}
	}

	[Token(Token = "0x17000102")]
	public static bool LeftGripPressed
	{
		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x7A9C38", Offset = "0x7A9C38", VA = "0x7A9C38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757658", Offset = "0x757658")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x7A9CA0", Offset = "0x7A9CA0", VA = "0x7A9CA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757668", Offset = "0x757668")]
		private set
		{
		}
	}

	[Token(Token = "0x17000103")]
	public static bool RightGripPressed
	{
		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x7A9D10", Offset = "0x7A9D10", VA = "0x7A9D10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757678", Offset = "0x757678")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x7A9D78", Offset = "0x7A9D78", VA = "0x7A9D78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757688", Offset = "0x757688")]
		private set
		{
		}
	}

	[Token(Token = "0x17000104")]
	public static float LeftTrigger
	{
		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x7A9DE8", Offset = "0x7A9DE8", VA = "0x7A9DE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757698", Offset = "0x757698")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x7A9E50", Offset = "0x7A9E50", VA = "0x7A9E50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7576A8", Offset = "0x7576A8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000105")]
	public static float RightTrigger
	{
		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x7A9EC4", Offset = "0x7A9EC4", VA = "0x7A9EC4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7576B8", Offset = "0x7576B8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x7A9F2C", Offset = "0x7A9F2C", VA = "0x7A9F2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7576C8", Offset = "0x7576C8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000106")]
	public static float LeftGrip
	{
		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x7A9FA0", Offset = "0x7A9FA0", VA = "0x7A9FA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7576D8", Offset = "0x7576D8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x7AA008", Offset = "0x7AA008", VA = "0x7AA008")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7576E8", Offset = "0x7576E8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000107")]
	public static float RightGrip
	{
		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x7AA07C", Offset = "0x7AA07C", VA = "0x7AA07C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7576F8", Offset = "0x7576F8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x7AA0E4", Offset = "0x7AA0E4", VA = "0x7AA0E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757708", Offset = "0x757708")]
		private set
		{
		}
	}

	[Token(Token = "0x17000108")]
	public static Vector2 LeftStick
	{
		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x7AA158", Offset = "0x7AA158", VA = "0x7AA158")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757718", Offset = "0x757718")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x7AA1C0", Offset = "0x7AA1C0", VA = "0x7AA1C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757728", Offset = "0x757728")]
		private set
		{
		}
	}

	[Token(Token = "0x17000109")]
	public static Vector2 RightStick
	{
		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x7AA238", Offset = "0x7AA238", VA = "0x7AA238")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757738", Offset = "0x757738")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x7AA2A0", Offset = "0x7AA2A0", VA = "0x7AA2A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757748", Offset = "0x757748")]
		private set
		{
		}
	}

	[Token(Token = "0x1700010A")]
	public static bool LeftIndexTouch
	{
		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x7AA318", Offset = "0x7AA318", VA = "0x7AA318")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757758", Offset = "0x757758")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x7AA380", Offset = "0x7AA380", VA = "0x7AA380")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757768", Offset = "0x757768")]
		private set
		{
		}
	}

	[Token(Token = "0x1700010B")]
	public static bool RightIndexTouch
	{
		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x7AA3F0", Offset = "0x7AA3F0", VA = "0x7AA3F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757778", Offset = "0x757778")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x7AA458", Offset = "0x7AA458", VA = "0x7AA458")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757788", Offset = "0x757788")]
		private set
		{
		}
	}

	[Token(Token = "0x1700010C")]
	public static int CursorCount
	{
		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x79D8F4", Offset = "0x79D8F4", VA = "0x79D8F4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700010D")]
	public static int[] MenuButtons
	{
		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x7AA874", Offset = "0x7AA874", VA = "0x7AA874")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700010E")]
	public static bool MenuButtonPressed
	{
		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x7AAF64", Offset = "0x7AAF64", VA = "0x7AAF64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700010F")]
	public static bool TriggersPressed
	{
		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x7AAFF0", Offset = "0x7AAFF0", VA = "0x7AAFF0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000E06")]
	[Address(RVA = "0x7AA4C8", Offset = "0x7AA4C8", VA = "0x7AA4C8")]
	public static void ForEachCursor(Func<int, bool> func)
	{
	}

	[Token(Token = "0x6000E07")]
	public static void ForEachCursor<T>(Func<int, T, bool> func, T param)
	{
	}

	[Token(Token = "0x6000E08")]
	[Address(RVA = "0x7AA56C", Offset = "0x7AA56C", VA = "0x7AA56C")]
	public static void ForEachCursor(Func<int, bool> func, ref int activeCursorIndex)
	{
	}

	[Token(Token = "0x6000E09")]
	public static void ForEachCursor<T>(Func<int, T, bool> func, T param, ref int activeCursorIndex)
	{
	}

	[Token(Token = "0x6000E0A")]
	[Address(RVA = "0x7AA628", Offset = "0x7AA628", VA = "0x7AA628")]
	public static bool EitherVRControllerPresent()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E0B")]
	[Address(RVA = "0x7AA6EC", Offset = "0x7AA6EC", VA = "0x7AA6EC")]
	public static bool ControllerPresent(ControllerIndex hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E0C")]
	[Address(RVA = "0x7A9338", Offset = "0x7A9338", VA = "0x7A9338")]
	public static int GetControllerIndex(ControllerIndex hand)
	{
		return default(int);
	}

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0x7AA7E8", Offset = "0x7AA7E8", VA = "0x7AA7E8")]
	public static void HapticPulse(float frequency, float amplitude, ControllerIndex controller)
	{
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0x7AA8DC", Offset = "0x7AA8DC", VA = "0x7AA8DC")]
	public static KeyCode GetRecenterButton(ControllerIndex index)
	{
		return default(KeyCode);
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0x7AAA24", Offset = "0x7AAA24", VA = "0x7AAA24")]
	public static int CursorIndexToControllerIndex(int cursorIdx)
	{
		return default(int);
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0x7AAAD8", Offset = "0x7AAAD8", VA = "0x7AAAD8")]
	public static CursorIndex ControllerIndexToCursorIndex(ControllerIndex controllerIdx)
	{
		return default(CursorIndex);
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0x7AAB84", Offset = "0x7AAB84", VA = "0x7AAB84")]
	public static CursorIndex ControllerIndexToCursorIndex(int controllerIdx)
	{
		return default(CursorIndex);
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0x7AAC24", Offset = "0x7AAC24", VA = "0x7AAC24")]
	public static void UpdateControllerIndex()
	{
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0x7AAA00", Offset = "0x7AAA00", VA = "0x7AAA00")]
	private static KeyCode GetSpecificKey(KeyCode key, int index, int offset)
	{
		return default(KeyCode);
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0x7AAE7C", Offset = "0x7AAE7C", VA = "0x7AAE7C")]
	private static bool CheckMenuButtonPressed(ControllerIndex index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0x7AB078", Offset = "0x7AB078", VA = "0x7AB078")]
	public static void UpdateInputState()
	{
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0x7ABC44", Offset = "0x7ABC44", VA = "0x7ABC44")]
	public VRInput()
	{
	}
}
[Token(Token = "0x20001F1")]
public class VRTargetUtil
{
	[Token(Token = "0x20004A3")]
	public enum VRTarget
	{
		[Token(Token = "0x400205B")]
		NoVR,
		[Token(Token = "0x400205C")]
		OculusVR,
		[Token(Token = "0x400205D")]
		SteamVR,
		[Token(Token = "0x400205E")]
		WindowsMR,
		[Token(Token = "0x400205F")]
		PSVR
	}

	[Token(Token = "0x4000E2A")]
	private const VRTarget m_Target = VRTarget.OculusVR;

	[Token(Token = "0x4000E2B")]
	private const bool m_isDemo = false;

	[Token(Token = "0x4000E2C")]
	private const bool m_paxDemo = false;

	[Token(Token = "0x4000E2D")]
	private const bool m_useSteamworks = false;

	[Token(Token = "0x4000E2E")]
	private const bool m_useKartridge = false;

	[Token(Token = "0x4000E2F")]
	private const bool m_arcadeMode = false;

	[Token(Token = "0x4000E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool m_releaseMode;

	[Token(Token = "0x4000E31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static VRTarget m_currentVRDeviceType;

	[Token(Token = "0x17000110")]
	public static VRTarget CurrentVRTarget
	{
		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x7AC2B8", Offset = "0x7AC2B8", VA = "0x7AC2B8")]
		get
		{
			return default(VRTarget);
		}
	}

	[Token(Token = "0x17000111")]
	public static VRTarget CurrentChosenVRTarget
	{
		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x7AC320", Offset = "0x7AC320", VA = "0x7AC320")]
		get
		{
			return default(VRTarget);
		}
	}

	[Token(Token = "0x17000112")]
	public static VRTarget CurrentVRDeviceType
	{
		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x7AC328", Offset = "0x7AC328", VA = "0x7AC328")]
		get
		{
			return default(VRTarget);
		}
	}

	[Token(Token = "0x17000113")]
	public static bool IsDemo
	{
		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x7AC390", Offset = "0x7AC390", VA = "0x7AC390")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000114")]
	public static bool PaxDemo
	{
		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x7AC398", Offset = "0x7AC398", VA = "0x7AC398")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000115")]
	public static bool ReleaseMode
	{
		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x7AC3A0", Offset = "0x7AC3A0", VA = "0x7AC3A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000116")]
	public static bool UseSteamworks
	{
		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x7AC408", Offset = "0x7AC408", VA = "0x7AC408")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000117")]
	public static bool UseKartridge
	{
		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x7AC410", Offset = "0x7AC410", VA = "0x7AC410")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000118")]
	public static bool IsVR
	{
		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x7998D8", Offset = "0x7998D8", VA = "0x7998D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000119")]
	public static bool IsNotVR
	{
		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x7AC418", Offset = "0x7AC418", VA = "0x7AC418")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700011A")]
	public static bool ArcadeMode
	{
		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x7AC480", Offset = "0x7AC480", VA = "0x7AC480")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000E26")]
	[Address(RVA = "0x7AC488", Offset = "0x7AC488", VA = "0x7AC488")]
	public static void SetCurrentVRDeviceType()
	{
	}

	[Token(Token = "0x6000E27")]
	[Address(RVA = "0x7AC56C", Offset = "0x7AC56C", VA = "0x7AC56C")]
	private static VRTarget GetVRDeviceTypeFromModel()
	{
		return default(VRTarget);
	}

	[Token(Token = "0x6000E28")]
	[Address(RVA = "0x7AC650", Offset = "0x7AC650", VA = "0x7AC650")]
	public VRTargetUtil()
	{
	}
}
[Token(Token = "0x20001F2")]
public class VRTransformOffset : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004A4")]
	public struct VROffset
	{
		[Token(Token = "0x4002060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 m_positionOffset;

		[Token(Token = "0x4002061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 m_rotationOffset;

		[Token(Token = "0x4002062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 m_scale;
	}

	[Token(Token = "0x4000E32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VROffset[] vrOffsets;

	[Token(Token = "0x6000E2A")]
	[Address(RVA = "0x7AC6B8", Offset = "0x7AC6B8", VA = "0x7AC6B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E2B")]
	[Address(RVA = "0x7AC978", Offset = "0x7AC978", VA = "0x7AC978")]
	public VRTransformOffset()
	{
	}
}
[Token(Token = "0x20001F3")]
public class XboxLiveAchievementManager
{
	[Token(Token = "0x20004A5")]
	public static class AchievementIds
	{
		[Token(Token = "0x4002063")]
		public const string ShyFriend = "23";

		[Token(Token = "0x4002064")]
		public const string RememberAndRebuild = "24";

		[Token(Token = "0x4002065")]
		public const string GracefulCompanion = "25";

		[Token(Token = "0x4002066")]
		public const string StrongPartner = "26";

		[Token(Token = "0x4002067")]
		public const string CleverConfidante = "27";

		[Token(Token = "0x4002068")]
		public const string Acknowledgement = "28";

		[Token(Token = "0x4002069")]
		public const string Humility = "29";

		[Token(Token = "0x400206A")]
		public const string LettingGo = "30";

		[Token(Token = "0x400206B")]
		public const string Honesty = "31";

		[Token(Token = "0x400206C")]
		public const string WelcomeToMyPad = "33";

		[Token(Token = "0x400206D")]
		public const string FunWithFungi = "34";

		[Token(Token = "0x400206E")]
		public const string ACharmingPlace = "35";

		[Token(Token = "0x400206F")]
		public const string QueensPleasure = "36";

		[Token(Token = "0x4002070")]
		public const string FeatheredFriend = "38";

		[Token(Token = "0x4002071")]
		public const string StarCrossed = "39";

		[Token(Token = "0x4002072")]
		public const string Acceptance = "40";

		[Token(Token = "0x4002073")]
		public const string ThatsAmore = "41";
	}

	[Token(Token = "0x4000E33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Queue<string> m_achievementQueue;

	[Token(Token = "0x6000E2C")]
	[Address(RVA = "0x83467C", Offset = "0x83467C", VA = "0x83467C")]
	public void UnlockAchievement(string achievementId)
	{
	}

	[Token(Token = "0x6000E2D")]
	[Address(RVA = "0x834704", Offset = "0x834704", VA = "0x834704")]
	public void QueueAchievement(string achievementId)
	{
	}

	[Token(Token = "0x6000E2E")]
	[Address(RVA = "0x83476C", Offset = "0x83476C", VA = "0x83476C")]
	public void UnlockQueuedAchievements()
	{
	}

	[Token(Token = "0x6000E2F")]
	[Address(RVA = "0x8347E8", Offset = "0x8347E8", VA = "0x8347E8")]
	public XboxLiveAchievementManager()
	{
	}
}
[Token(Token = "0x20001F4")]
public class XboxLiveGameSaveInterface
{
	[Token(Token = "0x20004A6")]
	public enum CloudLoadStatus
	{
		[Token(Token = "0x4002075")]
		Inactive,
		[Token(Token = "0x4002076")]
		LoadInProgress,
		[Token(Token = "0x4002077")]
		LoadSuccess,
		[Token(Token = "0x4002078")]
		LoadFail
	}

	[Token(Token = "0x20004A7")]
	public enum ReadyStatus
	{
		[Token(Token = "0x400207A")]
		Offline,
		[Token(Token = "0x400207B")]
		Waiting,
		[Token(Token = "0x400207C")]
		Ready,
		[Token(Token = "0x400207D")]
		Fail
	}

	[Token(Token = "0x4000E34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private CloudLoadStatus m_cloudLoadStatus;

	[Token(Token = "0x4000E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private ReadyStatus m_readyStatus;

	[Token(Token = "0x6000E30")]
	[Address(RVA = "0x834C20", Offset = "0x834C20", VA = "0x834C20")]
	public CloudLoadStatus GetCloudLoadStatus()
	{
		return default(CloudLoadStatus);
	}

	[Token(Token = "0x6000E31")]
	[Address(RVA = "0x834C28", Offset = "0x834C28", VA = "0x834C28")]
	public ReadyStatus GetReadyStatus()
	{
		return default(ReadyStatus);
	}

	[Token(Token = "0x6000E32")]
	[Address(RVA = "0x834C30", Offset = "0x834C30", VA = "0x834C30")]
	public void SetStatus(ReadyStatus status)
	{
	}

	[Token(Token = "0x6000E33")]
	[Address(RVA = "0x834C38", Offset = "0x834C38", VA = "0x834C38")]
	public XboxLiveGameSaveInterface()
	{
	}
}
[Token(Token = "0x20001F5")]
public class XboxLiveManager : MonoBehaviour
{
	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_isSigningIn;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool m_userHasSignedOut;

	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private XboxLiveAchievementManager m_xblAchievementManager;

	[Token(Token = "0x4000E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private XboxLiveGameSaveInterface m_xblGameSaveInterface;

	[Token(Token = "0x1700011B")]
	public XboxLiveGameSaveInterface GameSaveInterface
	{
		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x834C40", Offset = "0x834C40", VA = "0x834C40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700011C")]
	public XboxLiveAchievementManager AchievementManager
	{
		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x834C48", Offset = "0x834C48", VA = "0x834C48")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E36")]
	[Address(RVA = "0x834C50", Offset = "0x834C50", VA = "0x834C50")]
	public void AttemptCloudSave(string saveData)
	{
	}

	[Token(Token = "0x6000E37")]
	[Address(RVA = "0x834C54", Offset = "0x834C54", VA = "0x834C54")]
	public void StartCloudLoad()
	{
	}

	[Token(Token = "0x6000E38")]
	[Address(RVA = "0x834C58", Offset = "0x834C58", VA = "0x834C58")]
	public XboxLiveGameSaveInterface.CloudLoadStatus GetCloudLoadStatus()
	{
		return default(XboxLiveGameSaveInterface.CloudLoadStatus);
	}

	[Token(Token = "0x6000E39")]
	[Address(RVA = "0x834C60", Offset = "0x834C60", VA = "0x834C60")]
	public string GetCloudLoadStringData()
	{
		return null;
	}

	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0x834C68", Offset = "0x834C68", VA = "0x834C68")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0x834C6C", Offset = "0x834C6C", VA = "0x834C6C")]
	public void TrySigningIn()
	{
	}

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0x834C70", Offset = "0x834C70", VA = "0x834C70")]
	public void Update()
	{
	}

	[Token(Token = "0x6000E3D")]
	[Address(RVA = "0x834C80", Offset = "0x834C80", VA = "0x834C80")]
	public void OnActualUserSignedOut()
	{
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0x834C84", Offset = "0x834C84", VA = "0x834C84")]
	public XboxLiveManager()
	{
	}
}
[Token(Token = "0x20001F6")]
public struct GazeEventArgs
{
	[Token(Token = "0x4000E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float distance;
}
[Token(Token = "0x20001F7")]
public delegate void GazeEventHandler(object sender, GazeEventArgs e);
[Token(Token = "0x20001F8")]
public class SteamVR_GazeTracker : MonoBehaviour
{
	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isInGaze;

	[Token(Token = "0x4000E3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float gazeInCutoff;

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float gazeOutCutoff;

	[Token(Token = "0x4000E40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform hmdTrackedObject;

	[Token(Token = "0x14000002")]
	public event GazeEventHandler GazeOn
	{
		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x95EF78", Offset = "0x95EF78", VA = "0x95EF78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757798", Offset = "0x757798")]
		add
		{
		}
		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x95F01C", Offset = "0x95F01C", VA = "0x95F01C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7577A8", Offset = "0x7577A8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event GazeEventHandler GazeOff
	{
		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x95F0C0", Offset = "0x95F0C0", VA = "0x95F0C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7577B8", Offset = "0x7577B8")]
		add
		{
		}
		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x95F164", Offset = "0x95F164", VA = "0x95F164")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7577C8", Offset = "0x7577C8")]
		remove
		{
		}
	}

	[Token(Token = "0x6000E47")]
	[Address(RVA = "0x95F208", Offset = "0x95F208", VA = "0x95F208")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E48")]
	[Address(RVA = "0x95F20C", Offset = "0x95F20C", VA = "0x95F20C", Slot = "4")]
	public virtual void OnGazeOn(GazeEventArgs e)
	{
	}

	[Token(Token = "0x6000E49")]
	[Address(RVA = "0x95F228", Offset = "0x95F228", VA = "0x95F228", Slot = "5")]
	public virtual void OnGazeOff(GazeEventArgs e)
	{
	}

	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0x95F244", Offset = "0x95F244", VA = "0x95F244")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0x95F5B4", Offset = "0x95F5B4", VA = "0x95F5B4")]
	public SteamVR_GazeTracker()
	{
	}
}
[Token(Token = "0x20001F9")]
public struct PointerEventArgs
{
	[Token(Token = "0x4000E41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint controllerIndex;

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint flags;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float distance;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform target;
}
[Token(Token = "0x20001FA")]
public delegate void PointerEventHandler(object sender, PointerEventArgs e);
[Token(Token = "0x20001FB")]
public class SteamVR_LaserPointer : MonoBehaviour
{
	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool active;

	[Token(Token = "0x4000E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color color;

	[Token(Token = "0x4000E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float thickness;

	[Token(Token = "0x4000E48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject holder;

	[Token(Token = "0x4000E49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject pointer;

	[Token(Token = "0x4000E4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isActive;

	[Token(Token = "0x4000E4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool addRigidBody;

	[Token(Token = "0x4000E4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform reference;

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform previousContact;

	[Token(Token = "0x14000004")]
	public event PointerEventHandler PointerIn
	{
		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x9604AC", Offset = "0x9604AC", VA = "0x9604AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7577D8", Offset = "0x7577D8")]
		add
		{
		}
		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x960550", Offset = "0x960550", VA = "0x960550")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7577E8", Offset = "0x7577E8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event PointerEventHandler PointerOut
	{
		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x9605F4", Offset = "0x9605F4", VA = "0x9605F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7577F8", Offset = "0x7577F8")]
		add
		{
		}
		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x960698", Offset = "0x960698", VA = "0x960698")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757808", Offset = "0x757808")]
		remove
		{
		}
	}

	[Token(Token = "0x6000E54")]
	[Address(RVA = "0x96073C", Offset = "0x96073C", VA = "0x96073C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E55")]
	[Address(RVA = "0x960B04", Offset = "0x960B04", VA = "0x960B04", Slot = "4")]
	public virtual void OnPointerIn(PointerEventArgs e)
	{
	}

	[Token(Token = "0x6000E56")]
	[Address(RVA = "0x960B48", Offset = "0x960B48", VA = "0x960B48", Slot = "5")]
	public virtual void OnPointerOut(PointerEventArgs e)
	{
	}

	[Token(Token = "0x6000E57")]
	[Address(RVA = "0x960B8C", Offset = "0x960B8C", VA = "0x960B8C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0x96100C", Offset = "0x96100C", VA = "0x96100C")]
	public SteamVR_LaserPointer()
	{
	}
}
[Token(Token = "0x20001FC")]
public class SteamVR_Teleporter : MonoBehaviour
{
	[Token(Token = "0x20004A8")]
	public enum TeleportType
	{
		[Token(Token = "0x400207F")]
		TeleportTypeUseTerrain,
		[Token(Token = "0x4002080")]
		TeleportTypeUseCollider,
		[Token(Token = "0x4002081")]
		TeleportTypeUseZeroY
	}

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool teleportOnClick;

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public TeleportType teleportType;

	[Token(Token = "0x1700011D")]
	private Transform reference
	{
		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x96E52C", Offset = "0x96E52C", VA = "0x96E52C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0x96E5CC", Offset = "0x96E5CC", VA = "0x96E5CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0x96E840", Offset = "0x96E840", VA = "0x96E840")]
	private void DoClick(object sender, ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0x96EBE0", Offset = "0x96EBE0", VA = "0x96EBE0")]
	public SteamVR_Teleporter()
	{
	}
}
[Token(Token = "0x20001FD")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7495F4", Offset = "0x7495F4")]
public class SteamVR_TestThrow : MonoBehaviour
{
	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody attachPoint;

	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SteamVR_TrackedObject trackedObj;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private FixedJoint joint;

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0x96FCEC", Offset = "0x96FCEC", VA = "0x96FCEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0x96FD44", Offset = "0x96FD44", VA = "0x96FD44")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0x970084", Offset = "0x970084", VA = "0x970084")]
	public SteamVR_TestThrow()
	{
	}
}
[Token(Token = "0x20001FE")]
public class SteamVR_TestTrackedCamera : MonoBehaviour
{
	[Token(Token = "0x4000E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Token(Token = "0x4000E57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x4000E58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool undistorted;

	[Token(Token = "0x4000E59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool cropped;

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0x97008C", Offset = "0x97008C", VA = "0x97008C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E61")]
	[Address(RVA = "0x970150", Offset = "0x970150", VA = "0x970150")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000E62")]
	[Address(RVA = "0x970250", Offset = "0x970250", VA = "0x970250")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0x9705E8", Offset = "0x9705E8", VA = "0x9705E8")]
	public SteamVR_TestTrackedCamera()
	{
	}
}
[Token(Token = "0x20001FF")]
public struct ClickedEventArgs
{
	[Token(Token = "0x4000E5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint controllerIndex;

	[Token(Token = "0x4000E5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint flags;

	[Token(Token = "0x4000E5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float padX;

	[Token(Token = "0x4000E5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float padY;
}
[Token(Token = "0x2000200")]
public delegate void ClickedEventHandler(object sender, ClickedEventArgs e);
[Token(Token = "0x2000201")]
public class SteamVR_TrackedController : MonoBehaviour
{
	[Token(Token = "0x4000E5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public uint controllerIndex;

	[Token(Token = "0x4000E5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRControllerState_t controllerState;

	[Token(Token = "0x4000E60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool triggerPressed;

	[Token(Token = "0x4000E61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool steamPressed;

	[Token(Token = "0x4000E62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool menuPressed;

	[Token(Token = "0x4000E63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool padPressed;

	[Token(Token = "0x4000E64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool padTouched;

	[Token(Token = "0x4000E65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool gripped;

	[Token(Token = "0x14000006")]
	public event ClickedEventHandler MenuButtonClicked
	{
		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x9710EC", Offset = "0x9710EC", VA = "0x9710EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757818", Offset = "0x757818")]
		add
		{
		}
		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x971190", Offset = "0x971190", VA = "0x971190")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757828", Offset = "0x757828")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event ClickedEventHandler MenuButtonUnclicked
	{
		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x971234", Offset = "0x971234", VA = "0x971234")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757838", Offset = "0x757838")]
		add
		{
		}
		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x9712D8", Offset = "0x9712D8", VA = "0x9712D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757848", Offset = "0x757848")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event ClickedEventHandler TriggerClicked
	{
		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x96E79C", Offset = "0x96E79C", VA = "0x96E79C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757858", Offset = "0x757858")]
		add
		{
		}
		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x97137C", Offset = "0x97137C", VA = "0x97137C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757868", Offset = "0x757868")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event ClickedEventHandler TriggerUnclicked
	{
		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x971420", Offset = "0x971420", VA = "0x971420")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757878", Offset = "0x757878")]
		add
		{
		}
		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x9714C4", Offset = "0x9714C4", VA = "0x9714C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757888", Offset = "0x757888")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event ClickedEventHandler SteamClicked
	{
		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x971568", Offset = "0x971568", VA = "0x971568")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757898", Offset = "0x757898")]
		add
		{
		}
		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x97160C", Offset = "0x97160C", VA = "0x97160C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7578A8", Offset = "0x7578A8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event ClickedEventHandler PadClicked
	{
		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x9716B0", Offset = "0x9716B0", VA = "0x9716B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7578B8", Offset = "0x7578B8")]
		add
		{
		}
		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x971754", Offset = "0x971754", VA = "0x971754")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7578C8", Offset = "0x7578C8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event ClickedEventHandler PadUnclicked
	{
		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x9717F8", Offset = "0x9717F8", VA = "0x9717F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7578D8", Offset = "0x7578D8")]
		add
		{
		}
		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x97189C", Offset = "0x97189C", VA = "0x97189C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7578E8", Offset = "0x7578E8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event ClickedEventHandler PadTouched
	{
		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x971940", Offset = "0x971940", VA = "0x971940")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7578F8", Offset = "0x7578F8")]
		add
		{
		}
		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x9719E4", Offset = "0x9719E4", VA = "0x9719E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757908", Offset = "0x757908")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event ClickedEventHandler PadUntouched
	{
		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x971A88", Offset = "0x971A88", VA = "0x971A88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757918", Offset = "0x757918")]
		add
		{
		}
		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x971B2C", Offset = "0x971B2C", VA = "0x971B2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757928", Offset = "0x757928")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event ClickedEventHandler Gripped
	{
		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x971BD0", Offset = "0x971BD0", VA = "0x971BD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757938", Offset = "0x757938")]
		add
		{
		}
		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x971C74", Offset = "0x971C74", VA = "0x971C74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757948", Offset = "0x757948")]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event ClickedEventHandler Ungripped
	{
		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x971D18", Offset = "0x971D18", VA = "0x971D18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757958", Offset = "0x757958")]
		add
		{
		}
		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x971DBC", Offset = "0x971DBC", VA = "0x971DBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757968", Offset = "0x757968")]
		remove
		{
		}
	}

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0x971E60", Offset = "0x971E60", VA = "0x971E60", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0x971FAC", Offset = "0x971FAC", VA = "0x971FAC")]
	public void SetDeviceIndex(int index)
	{
	}

	[Token(Token = "0x6000E80")]
	[Address(RVA = "0x971FB4", Offset = "0x971FB4", VA = "0x971FB4", Slot = "5")]
	public virtual void OnTriggerClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E81")]
	[Address(RVA = "0x971FE0", Offset = "0x971FE0", VA = "0x971FE0", Slot = "6")]
	public virtual void OnTriggerUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E82")]
	[Address(RVA = "0x97200C", Offset = "0x97200C", VA = "0x97200C", Slot = "7")]
	public virtual void OnMenuClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E83")]
	[Address(RVA = "0x972038", Offset = "0x972038", VA = "0x972038", Slot = "8")]
	public virtual void OnMenuUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0x972064", Offset = "0x972064", VA = "0x972064", Slot = "9")]
	public virtual void OnSteamClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0x972090", Offset = "0x972090", VA = "0x972090", Slot = "10")]
	public virtual void OnPadClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0x9720BC", Offset = "0x9720BC", VA = "0x9720BC", Slot = "11")]
	public virtual void OnPadUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0x9720E8", Offset = "0x9720E8", VA = "0x9720E8", Slot = "12")]
	public virtual void OnPadTouched(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0x972114", Offset = "0x972114", VA = "0x972114", Slot = "13")]
	public virtual void OnPadUntouched(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0x972140", Offset = "0x972140", VA = "0x972140", Slot = "14")]
	public virtual void OnGripped(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0x97216C", Offset = "0x97216C", VA = "0x97216C", Slot = "15")]
	public virtual void OnUngripped(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0x972198", Offset = "0x972198", VA = "0x972198", Slot = "16")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0x97248C", Offset = "0x97248C", VA = "0x97248C")]
	public SteamVR_TrackedController()
	{
	}
}
[Token(Token = "0x2000202")]
public class SteamVR : IDisposable
{
	[Token(Token = "0x4000E71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool _enabled;

	[Token(Token = "0x4000E72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SteamVR _instance;

	[Token(Token = "0x4000E73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750A40", Offset = "0x750A40")]
	private CVRSystem <hmd>k__BackingField;

	[Token(Token = "0x4000E74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750A50", Offset = "0x750A50")]
	private CVRCompositor <compositor>k__BackingField;

	[Token(Token = "0x4000E75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750A60", Offset = "0x750A60")]
	private CVROverlay <overlay>k__BackingField;

	[Token(Token = "0x4000E76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750A70", Offset = "0x750A70")]
	private static bool <initializing>k__BackingField;

	[Token(Token = "0x4000E77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750A80", Offset = "0x750A80")]
	private static bool <calibrating>k__BackingField;

	[Token(Token = "0x4000E78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750A90", Offset = "0x750A90")]
	private static bool <outOfRange>k__BackingField;

	[Token(Token = "0x4000E79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static bool[] connected;

	[Token(Token = "0x4000E7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750AA0", Offset = "0x750AA0")]
	private float <sceneWidth>k__BackingField;

	[Token(Token = "0x4000E7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750AB0", Offset = "0x750AB0")]
	private float <sceneHeight>k__BackingField;

	[Token(Token = "0x4000E7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750AC0", Offset = "0x750AC0")]
	private float <aspect>k__BackingField;

	[Token(Token = "0x4000E7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750AD0", Offset = "0x750AD0")]
	private float <fieldOfView>k__BackingField;

	[Token(Token = "0x4000E7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750AE0", Offset = "0x750AE0")]
	private Vector2 <tanHalfFov>k__BackingField;

	[Token(Token = "0x4000E7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750AF0", Offset = "0x750AF0")]
	private VRTextureBounds_t[] <textureBounds>k__BackingField;

	[Token(Token = "0x4000E80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750B00", Offset = "0x750B00")]
	private SteamVR_Utils.RigidTransform[] <eyes>k__BackingField;

	[Token(Token = "0x4000E81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ETextureType textureType;

	[Token(Token = "0x1700011E")]
	public static bool active
	{
		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x8C45A8", Offset = "0x8C45A8", VA = "0x8C45A8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700011F")]
	public static bool enabled
	{
		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x8C4618", Offset = "0x8C4618", VA = "0x8C4618")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x8C46B4", Offset = "0x8C46B4", VA = "0x8C46B4")]
		set
		{
		}
	}

	[Token(Token = "0x17000120")]
	public static SteamVR instance
	{
		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x8C47FC", Offset = "0x8C47FC", VA = "0x8C47FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000121")]
	public static bool usingNativeSupport
	{
		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x8C4B38", Offset = "0x8C4B38", VA = "0x8C4B38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000122")]
	public CVRSystem hmd
	{
		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x8C5514", Offset = "0x8C5514", VA = "0x8C5514")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757978", Offset = "0x757978")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x8C551C", Offset = "0x8C551C", VA = "0x8C551C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757988", Offset = "0x757988")]
		private set
		{
		}
	}

	[Token(Token = "0x17000123")]
	public CVRCompositor compositor
	{
		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x8C5524", Offset = "0x8C5524", VA = "0x8C5524")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757998", Offset = "0x757998")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x8C552C", Offset = "0x8C552C", VA = "0x8C552C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7579A8", Offset = "0x7579A8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000124")]
	public CVROverlay overlay
	{
		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x8C5534", Offset = "0x8C5534", VA = "0x8C5534")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7579B8", Offset = "0x7579B8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x8C553C", Offset = "0x8C553C", VA = "0x8C553C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7579C8", Offset = "0x7579C8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000125")]
	public static bool initializing
	{
		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x8C5544", Offset = "0x8C5544", VA = "0x8C5544")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7579D8", Offset = "0x7579D8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x8C55AC", Offset = "0x8C55AC", VA = "0x8C55AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7579E8", Offset = "0x7579E8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000126")]
	public static bool calibrating
	{
		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x8C561C", Offset = "0x8C561C", VA = "0x8C561C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7579F8", Offset = "0x7579F8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x8C5684", Offset = "0x8C5684", VA = "0x8C5684")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A08", Offset = "0x757A08")]
		private set
		{
		}
	}

	[Token(Token = "0x17000127")]
	public static bool outOfRange
	{
		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x8C56F4", Offset = "0x8C56F4", VA = "0x8C56F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A18", Offset = "0x757A18")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x8C575C", Offset = "0x8C575C", VA = "0x8C575C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A28", Offset = "0x757A28")]
		private set
		{
		}
	}

	[Token(Token = "0x17000128")]
	public float sceneWidth
	{
		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x8C57CC", Offset = "0x8C57CC", VA = "0x8C57CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A38", Offset = "0x757A38")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x8C57D4", Offset = "0x8C57D4", VA = "0x8C57D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A48", Offset = "0x757A48")]
		private set
		{
		}
	}

	[Token(Token = "0x17000129")]
	public float sceneHeight
	{
		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x8C57DC", Offset = "0x8C57DC", VA = "0x8C57DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A58", Offset = "0x757A58")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x8C57E4", Offset = "0x8C57E4", VA = "0x8C57E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A68", Offset = "0x757A68")]
		private set
		{
		}
	}

	[Token(Token = "0x1700012A")]
	public float aspect
	{
		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x8C57EC", Offset = "0x8C57EC", VA = "0x8C57EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A78", Offset = "0x757A78")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x8C57F4", Offset = "0x8C57F4", VA = "0x8C57F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A88", Offset = "0x757A88")]
		private set
		{
		}
	}

	[Token(Token = "0x1700012B")]
	public float fieldOfView
	{
		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x8C57FC", Offset = "0x8C57FC", VA = "0x8C57FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757A98", Offset = "0x757A98")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x8C5804", Offset = "0x8C5804", VA = "0x8C5804")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757AA8", Offset = "0x757AA8")]
		private set
		{
		}
	}

	[Token(Token = "0x1700012C")]
	public Vector2 tanHalfFov
	{
		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x8C580C", Offset = "0x8C580C", VA = "0x8C580C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757AB8", Offset = "0x757AB8")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x8C5814", Offset = "0x8C5814", VA = "0x8C5814")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757AC8", Offset = "0x757AC8")]
		private set
		{
		}
	}

	[Token(Token = "0x1700012D")]
	public VRTextureBounds_t[] textureBounds
	{
		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x8C581C", Offset = "0x8C581C", VA = "0x8C581C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757AD8", Offset = "0x757AD8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x8C5824", Offset = "0x8C5824", VA = "0x8C5824")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757AE8", Offset = "0x757AE8")]
		private set
		{
		}
	}

	[Token(Token = "0x1700012E")]
	public SteamVR_Utils.RigidTransform[] eyes
	{
		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x8C582C", Offset = "0x8C582C", VA = "0x8C582C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757AF8", Offset = "0x757AF8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x8C5834", Offset = "0x8C5834", VA = "0x8C5834")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757B08", Offset = "0x757B08")]
		private set
		{
		}
	}

	[Token(Token = "0x1700012F")]
	public string hmd_TrackingSystemName
	{
		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x8C583C", Offset = "0x8C583C", VA = "0x8C583C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000130")]
	public string hmd_ModelNumber
	{
		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x8C599C", Offset = "0x8C599C", VA = "0x8C599C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000131")]
	public string hmd_SerialNumber
	{
		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x8C59A8", Offset = "0x8C59A8", VA = "0x8C59A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000132")]
	public float hmd_SecondsFromVsyncToPhotons
	{
		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x8C59B4", Offset = "0x8C59B4", VA = "0x8C59B4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000133")]
	public float hmd_DisplayFrequency
	{
		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x8C5A00", Offset = "0x8C5A00", VA = "0x8C5A00")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000E92")]
	[Address(RVA = "0x8C4914", Offset = "0x8C4914", VA = "0x8C4914")]
	private static SteamVR CreateInstance()
	{
		return null;
	}

	[Token(Token = "0x6000E93")]
	[Address(RVA = "0x8C4BA4", Offset = "0x8C4BA4", VA = "0x8C4BA4")]
	private static void ReportError(EVRInitError error)
	{
	}

	[Token(Token = "0x6000EB3")]
	[Address(RVA = "0x8C5A0C", Offset = "0x8C5A0C", VA = "0x8C5A0C")]
	public string GetTrackedDeviceString(uint deviceId)
	{
		return null;
	}

	[Token(Token = "0x6000EB4")]
	[Address(RVA = "0x8C5848", Offset = "0x8C5848", VA = "0x8C5848")]
	public string GetStringProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return null;
	}

	[Token(Token = "0x6000EB5")]
	[Address(RVA = "0x8C59C0", Offset = "0x8C59C0", VA = "0x8C59C0")]
	public float GetFloatProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return default(float);
	}

	[Token(Token = "0x6000EB6")]
	[Address(RVA = "0x8C5AFC", Offset = "0x8C5AFC", VA = "0x8C5AFC")]
	private void OnInitializing(bool initializing)
	{
	}

	[Token(Token = "0x6000EB7")]
	[Address(RVA = "0x8C5BB0", Offset = "0x8C5BB0", VA = "0x8C5BB0")]
	private void OnCalibrating(bool calibrating)
	{
	}

	[Token(Token = "0x6000EB8")]
	[Address(RVA = "0x8C5C64", Offset = "0x8C5C64", VA = "0x8C5C64")]
	private void OnOutOfRange(bool outOfRange)
	{
	}

	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0x8C5D18", Offset = "0x8C5D18", VA = "0x8C5D18")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0x8C5DC4", Offset = "0x8C5DC4", VA = "0x8C5DC4")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0x8C4CF8", Offset = "0x8C4CF8", VA = "0x8C4CF8")]
	private SteamVR()
	{
	}

	[Token(Token = "0x6000EBC")]
	[Address(RVA = "0x8C6268", Offset = "0x8C6268", VA = "0x8C6268", Slot = "1")]
	~SteamVR()
	{
	}

	[Token(Token = "0x6000EBD")]
	[Address(RVA = "0x8C6520", Offset = "0x8C6520", VA = "0x8C6520", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000EBE")]
	[Address(RVA = "0x8C62D8", Offset = "0x8C62D8", VA = "0x8C62D8")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000EBF")]
	[Address(RVA = "0x8C4754", Offset = "0x8C4754", VA = "0x8C4754")]
	public static void SafeDispose()
	{
	}
}
[Token(Token = "0x2000203")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749658", Offset = "0x749658")]
public class SteamVR_Camera : MonoBehaviour
{
	[Token(Token = "0x4000E82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform _head;

	[Token(Token = "0x4000E83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750B20", Offset = "0x750B20")]
	private Camera <camera>k__BackingField;

	[Token(Token = "0x4000E84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform _ears;

	[Token(Token = "0x4000E85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool wireframe;

	[Token(Token = "0x4000E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Hashtable values;

	[Token(Token = "0x4000E87")]
	private const string eyeSuffix = " (eye)";

	[Token(Token = "0x4000E88")]
	private const string earsSuffix = " (ears)";

	[Token(Token = "0x4000E89")]
	private const string headSuffix = " (head)";

	[Token(Token = "0x4000E8A")]
	private const string originSuffix = " (origin)";

	[Token(Token = "0x17000134")]
	public Transform head
	{
		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x8C6608", Offset = "0x8C6608", VA = "0x8C6608")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000135")]
	public Transform offset
	{
		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x8C6610", Offset = "0x8C6610", VA = "0x8C6610")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000136")]
	public Transform origin
	{
		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x8C6618", Offset = "0x8C6618", VA = "0x8C6618")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000137")]
	public Camera camera
	{
		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x8C6634", Offset = "0x8C6634", VA = "0x8C6634")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757B18", Offset = "0x757B18")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x8C663C", Offset = "0x8C663C", VA = "0x8C663C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757B28", Offset = "0x757B28")]
		private set
		{
		}
	}

	[Token(Token = "0x17000138")]
	public Transform ears
	{
		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x8C6644", Offset = "0x8C6644", VA = "0x8C6644")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000139")]
	public static float sceneResolutionScale
	{
		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x8C66D4", Offset = "0x8C66D4", VA = "0x8C66D4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x8C66DC", Offset = "0x8C66DC", VA = "0x8C66DC")]
		set
		{
		}
	}

	[Token(Token = "0x1700013A")]
	public string baseName
	{
		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x8C7880", Offset = "0x8C7880", VA = "0x8C7880")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0x8C664C", Offset = "0x8C664C", VA = "0x8C664C")]
	public Ray GetRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0x8C66E4", Offset = "0x8C66E4", VA = "0x8C66E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0x8C66EC", Offset = "0x8C66EC", VA = "0x8C66EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0x8C720C", Offset = "0x8C720C", VA = "0x8C720C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0x8C7268", Offset = "0x8C7268", VA = "0x8C7268")]
	public void ForceLast()
	{
	}

	[Token(Token = "0x6000ECF")]
	[Address(RVA = "0x8C6A48", Offset = "0x8C6A48", VA = "0x8C6A48")]
	public void Expand()
	{
	}

	[Token(Token = "0x6000ED0")]
	[Address(RVA = "0x8C7958", Offset = "0x8C7958", VA = "0x8C7958")]
	public void Collapse()
	{
	}

	[Token(Token = "0x6000ED1")]
	[Address(RVA = "0x8C7DCC", Offset = "0x8C7DCC", VA = "0x8C7DCC")]
	public SteamVR_Camera()
	{
	}
}
[Token(Token = "0x2000204")]
[ExecuteInEditMode]
public class SteamVR_CameraFlip : MonoBehaviour
{
	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0x8C7DD4", Offset = "0x8C7DD4", VA = "0x8C7DD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0x8C7E70", Offset = "0x8C7E70", VA = "0x8C7E70")]
	public SteamVR_CameraFlip()
	{
	}
}
[Token(Token = "0x2000205")]
[ExecuteInEditMode]
public class SteamVR_CameraMask : MonoBehaviour
{
	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0x8C7E78", Offset = "0x8C7E78", VA = "0x8C7E78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0x8C7F14", Offset = "0x8C7F14", VA = "0x8C7F14")]
	public SteamVR_CameraMask()
	{
	}
}
[Token(Token = "0x2000206")]
public class SteamVR_Controller
{
	[Token(Token = "0x20004A9")]
	public class ButtonMask
	{
		[Token(Token = "0x4002082")]
		public const ulong System = 1uL;

		[Token(Token = "0x4002083")]
		public const ulong ApplicationMenu = 2uL;

		[Token(Token = "0x4002084")]
		public const ulong Grip = 4uL;

		[Token(Token = "0x4002085")]
		public const ulong Axis0 = 4294967296uL;

		[Token(Token = "0x4002086")]
		public const ulong Axis1 = 8589934592uL;

		[Token(Token = "0x4002087")]
		public const ulong Axis2 = 17179869184uL;

		[Token(Token = "0x4002088")]
		public const ulong Axis3 = 34359738368uL;

		[Token(Token = "0x4002089")]
		public const ulong Axis4 = 68719476736uL;

		[Token(Token = "0x400208A")]
		public const ulong Touchpad = 4294967296uL;

		[Token(Token = "0x400208B")]
		public const ulong Trigger = 8589934592uL;

		[Token(Token = "0x6002354")]
		[Address(RVA = "0x8C866C", Offset = "0x8C866C", VA = "0x8C866C")]
		public ButtonMask()
		{
		}
	}

	[Token(Token = "0x20004AA")]
	public class Device
	{
		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755F94", Offset = "0x755F94")]
		private uint <index>k__BackingField;

		[Token(Token = "0x400208D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755FA4", Offset = "0x755FA4")]
		private bool <valid>k__BackingField;

		[Token(Token = "0x400208E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VRControllerState_t state;

		[Token(Token = "0x400208F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRControllerState_t prevState;

		[Token(Token = "0x4002090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TrackedDevicePose_t pose;

		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int prevFrameCount;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float hairTriggerDelta;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float hairTriggerLimit;

		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool hairTriggerState;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		private bool hairTriggerPrevState;

		[Token(Token = "0x1700038A")]
		public uint index
		{
			[Token(Token = "0x6002356")]
			[Address(RVA = "0x8C8674", Offset = "0x8C8674", VA = "0x8C8674")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A940", Offset = "0x75A940")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6002357")]
			[Address(RVA = "0x8C867C", Offset = "0x8C867C", VA = "0x8C867C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A950", Offset = "0x75A950")]
			private set
			{
			}
		}

		[Token(Token = "0x1700038B")]
		public bool valid
		{
			[Token(Token = "0x6002358")]
			[Address(RVA = "0x8C8684", Offset = "0x8C8684", VA = "0x8C8684")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A960", Offset = "0x75A960")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002359")]
			[Address(RVA = "0x8C868C", Offset = "0x8C868C", VA = "0x8C868C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A970", Offset = "0x75A970")]
			private set
			{
			}
		}

		[Token(Token = "0x1700038C")]
		public bool connected
		{
			[Token(Token = "0x600235A")]
			[Address(RVA = "0x8C8640", Offset = "0x8C8640", VA = "0x8C8640")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700038D")]
		public bool hasTracking
		{
			[Token(Token = "0x600235B")]
			[Address(RVA = "0x8C8698", Offset = "0x8C8698", VA = "0x8C8698")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700038E")]
		public bool outOfRange
		{
			[Token(Token = "0x600235C")]
			[Address(RVA = "0x8C86BC", Offset = "0x8C86BC", VA = "0x8C86BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700038F")]
		public bool calibrating
		{
			[Token(Token = "0x600235D")]
			[Address(RVA = "0x8C86F4", Offset = "0x8C86F4", VA = "0x8C86F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000390")]
		public bool uninitialized
		{
			[Token(Token = "0x600235E")]
			[Address(RVA = "0x8C8724", Offset = "0x8C8724", VA = "0x8C8724")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000391")]
		public SteamVR_Utils.RigidTransform transform
		{
			[Token(Token = "0x600235F")]
			[Address(RVA = "0x8C85E0", Offset = "0x8C85E0", VA = "0x8C85E0")]
			get
			{
				return default(SteamVR_Utils.RigidTransform);
			}
		}

		[Token(Token = "0x17000392")]
		public Vector3 velocity
		{
			[Token(Token = "0x6002360")]
			[Address(RVA = "0x8C8750", Offset = "0x8C8750", VA = "0x8C8750")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000393")]
		public Vector3 angularVelocity
		{
			[Token(Token = "0x6002361")]
			[Address(RVA = "0x8C87A0", Offset = "0x8C87A0", VA = "0x8C87A0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6002355")]
		[Address(RVA = "0x8C8074", Offset = "0x8C8074", VA = "0x8C8074")]
		public Device(uint i)
		{
		}

		[Token(Token = "0x6002362")]
		[Address(RVA = "0x8C87F4", Offset = "0x8C87F4", VA = "0x8C87F4")]
		public VRControllerState_t GetState()
		{
			return default(VRControllerState_t);
		}

		[Token(Token = "0x6002363")]
		[Address(RVA = "0x8C8838", Offset = "0x8C8838", VA = "0x8C8838")]
		public VRControllerState_t GetPrevState()
		{
			return default(VRControllerState_t);
		}

		[Token(Token = "0x6002364")]
		[Address(RVA = "0x8C887C", Offset = "0x8C887C", VA = "0x8C887C")]
		public TrackedDevicePose_t GetPose()
		{
			return default(TrackedDevicePose_t);
		}

		[Token(Token = "0x6002365")]
		[Address(RVA = "0x8C80E8", Offset = "0x8C80E8", VA = "0x8C80E8")]
		public void Update()
		{
		}

		[Token(Token = "0x6002366")]
		[Address(RVA = "0x8C89AC", Offset = "0x8C89AC", VA = "0x8C89AC")]
		public bool GetPress(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6002367")]
		[Address(RVA = "0x8C89DC", Offset = "0x8C89DC", VA = "0x8C89DC")]
		public bool GetPressDown(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6002368")]
		[Address(RVA = "0x8C8A20", Offset = "0x8C8A20", VA = "0x8C8A20")]
		public bool GetPressUp(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6002369")]
		[Address(RVA = "0x8C8A64", Offset = "0x8C8A64", VA = "0x8C8A64")]
		public bool GetPress(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x600236A")]
		[Address(RVA = "0x8C8A9C", Offset = "0x8C8A9C", VA = "0x8C8A9C")]
		public bool GetPressDown(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x600236B")]
		[Address(RVA = "0x8C8AE8", Offset = "0x8C8AE8", VA = "0x8C8AE8")]
		public bool GetPressUp(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x600236C")]
		[Address(RVA = "0x8C8B34", Offset = "0x8C8B34", VA = "0x8C8B34")]
		public bool GetTouch(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600236D")]
		[Address(RVA = "0x8C8B64", Offset = "0x8C8B64", VA = "0x8C8B64")]
		public bool GetTouchDown(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600236E")]
		[Address(RVA = "0x8C8BA8", Offset = "0x8C8BA8", VA = "0x8C8BA8")]
		public bool GetTouchUp(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600236F")]
		[Address(RVA = "0x8C8BEC", Offset = "0x8C8BEC", VA = "0x8C8BEC")]
		public bool GetTouch(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6002370")]
		[Address(RVA = "0x8C8C24", Offset = "0x8C8C24", VA = "0x8C8C24")]
		public bool GetTouchDown(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0x8C8C70", Offset = "0x8C8C70", VA = "0x8C8C70")]
		public bool GetTouchUp(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6002372")]
		[Address(RVA = "0x8C8CBC", Offset = "0x8C8CBC", VA = "0x8C8CBC")]
		public Vector2 GetAxis(EVRButtonId buttonId = EVRButtonId.k_EButton_Axis0)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002373")]
		[Address(RVA = "0x8C8D98", Offset = "0x8C8D98", VA = "0x8C8D98")]
		public void TriggerHapticPulse(ushort durationMicroSec = 500, EVRButtonId buttonId = EVRButtonId.k_EButton_Axis0)
		{
		}

		[Token(Token = "0x6002374")]
		[Address(RVA = "0x8C88AC", Offset = "0x8C88AC", VA = "0x8C88AC")]
		private void UpdateHairTrigger()
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0x8C8E34", Offset = "0x8C8E34", VA = "0x8C8E34")]
		public bool GetHairTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0x8C8E58", Offset = "0x8C8E58", VA = "0x8C8E58")]
		public bool GetHairTriggerDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0x8C8E94", Offset = "0x8C8E94", VA = "0x8C8E94")]
		public bool GetHairTriggerUp()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20004AB")]
	public enum DeviceRelation
	{
		[Token(Token = "0x4002097")]
		First,
		[Token(Token = "0x4002098")]
		Leftmost,
		[Token(Token = "0x4002099")]
		Rightmost,
		[Token(Token = "0x400209A")]
		FarthestLeft,
		[Token(Token = "0x400209B")]
		FarthestRight
	}

	[Token(Token = "0x4000E8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Device[] devices;

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0x8C7F1C", Offset = "0x8C7F1C", VA = "0x8C7F1C")]
	public static Device Input(int deviceIndex)
	{
		return null;
	}

	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0x8C80AC", Offset = "0x8C80AC", VA = "0x8C80AC")]
	public static void Update()
	{
	}

	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0x8C8274", Offset = "0x8C8274", VA = "0x8C8274")]
	public static int GetDeviceIndex(DeviceRelation relation, ETrackedDeviceClass deviceClass = ETrackedDeviceClass.Controller, int relativeTo = 0)
	{
		return default(int);
	}

	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0x8C8664", Offset = "0x8C8664", VA = "0x8C8664")]
	public SteamVR_Controller()
	{
	}
}
[Token(Token = "0x2000207")]
public class SteamVR_ControllerManager : MonoBehaviour
{
	[Token(Token = "0x4000E8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject left;

	[Token(Token = "0x4000E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject right;

	[Token(Token = "0x4000E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750B40", Offset = "0x750B40")]
	public GameObject[] objects;

	[Token(Token = "0x4000E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750B78", Offset = "0x750B78")]
	public bool assignAllBeforeIdentified;

	[Token(Token = "0x4000E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private uint[] indices;

	[Token(Token = "0x4000E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool[] connected;

	[Token(Token = "0x4000E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private uint leftIndex;

	[Token(Token = "0x4000E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private uint rightIndex;

	[Token(Token = "0x4000E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SteamVR_Events.Action inputFocusAction;

	[Token(Token = "0x4000E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SteamVR_Events.Action deviceConnectedAction;

	[Token(Token = "0x4000E96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SteamVR_Events.Action trackedDeviceRoleChangedAction;

	[Token(Token = "0x4000E97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string hiddenPrefix;

	[Token(Token = "0x4000E98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string hiddenPostfix;

	[Token(Token = "0x4000E99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string[] labels;

	[Token(Token = "0x6000EDA")]
	[Address(RVA = "0x8C8ED0", Offset = "0x8C8ED0", VA = "0x8C8ED0")]
	private void SetUniqueObject(GameObject o, int index)
	{
	}

	[Token(Token = "0x6000EDB")]
	[Address(RVA = "0x8C8FE8", Offset = "0x8C8FE8", VA = "0x8C8FE8")]
	public void UpdateTargets()
	{
	}

	[Token(Token = "0x6000EDC")]
	[Address(RVA = "0x8C9128", Offset = "0x8C9128", VA = "0x8C9128")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EDD")]
	[Address(RVA = "0x8C912C", Offset = "0x8C912C", VA = "0x8C912C")]
	private SteamVR_ControllerManager()
	{
	}

	[Token(Token = "0x6000EDE")]
	[Address(RVA = "0x8C946C", Offset = "0x8C946C", VA = "0x8C946C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000EDF")]
	[Address(RVA = "0x8C9A38", Offset = "0x8C9A38", VA = "0x8C9A38")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000EE0")]
	[Address(RVA = "0x8C9A90", Offset = "0x8C9A90", VA = "0x8C9A90")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0x8C9E60", Offset = "0x8C9E60", VA = "0x8C9E60")]
	private void HideObject(Transform t, string name)
	{
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0x8C9D64", Offset = "0x8C9D64", VA = "0x8C9D64")]
	private void ShowObject(Transform t, string name)
	{
	}

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0x8C9FD4", Offset = "0x8C9FD4", VA = "0x8C9FD4")]
	private void SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex)
	{
	}

	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0x8CA240", Offset = "0x8CA240", VA = "0x8CA240")]
	private void OnTrackedDeviceRoleChanged(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0x8C991C", Offset = "0x8C991C", VA = "0x8C991C")]
	private void OnDeviceConnected(int index, bool connected)
	{
	}

	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0x8C964C", Offset = "0x8C964C", VA = "0x8C964C")]
	public void Refresh()
	{
	}
}
[Token(Token = "0x2000208")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7496DC", Offset = "0x7496DC")]
public class SteamVR_Ears : MonoBehaviour
{
	[Token(Token = "0x4000E9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_Camera vrcam;

	[Token(Token = "0x4000E9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool usingSpeakers;

	[Token(Token = "0x4000E9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion offset;

	[Token(Token = "0x6000EE8")]
	[Address(RVA = "0x8CA368", Offset = "0x8CA368", VA = "0x8CA368")]
	private void OnNewPosesApplied()
	{
	}

	[Token(Token = "0x6000EE9")]
	[Address(RVA = "0x8CA4D8", Offset = "0x8CA4D8", VA = "0x8CA4D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000EEA")]
	[Address(RVA = "0x8CA67C", Offset = "0x8CA67C", VA = "0x8CA67C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0x8CA74C", Offset = "0x8CA74C", VA = "0x8CA74C")]
	public SteamVR_Ears()
	{
	}
}
[Token(Token = "0x2000209")]
public static class SteamVR_Events
{
	[Token(Token = "0x20004AC")]
	public abstract class Action
	{
		[Token(Token = "0x17000394")]
		public bool enabled
		{
			[Token(Token = "0x6002379")]
			[Address(RVA = "0x95B974", Offset = "0x95B974", VA = "0x95B974")]
			set
			{
			}
		}

		[Token(Token = "0x6002378")]
		public abstract void Enable(bool enabled);

		[Token(Token = "0x600237A")]
		[Address(RVA = "0x95B984", Offset = "0x95B984", VA = "0x95B984")]
		protected Action()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20004AD")]
	public class ActionNoArgs : Action
	{
		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Event _event;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityAction action;

		[Token(Token = "0x600237B")]
		[Address(RVA = "0x95B98C", Offset = "0x95B98C", VA = "0x95B98C")]
		public ActionNoArgs(Event _event, UnityAction action)
		{
		}

		[Token(Token = "0x600237C")]
		[Address(RVA = "0x95B9C4", Offset = "0x95B9C4", VA = "0x95B9C4", Slot = "4")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20004AE")]
	public class Action<T> : Action
	{
		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T> _event;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T> action;

		[Token(Token = "0x600237D")]
		public Action(Event<T> _event, UnityAction<T> action)
		{
		}

		[Token(Token = "0x600237E")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20004AF")]
	public class Action<T0, T1> : Action
	{
		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T0, T1> _event;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T0, T1> action;

		[Token(Token = "0x600237F")]
		public Action(Event<T0, T1> _event, UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x6002380")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20004B0")]
	public class Action<T0, T1, T2> : Action
	{
		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T0, T1, T2> _event;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T0, T1, T2> action;

		[Token(Token = "0x6002381")]
		public Action(Event<T0, T1, T2> _event, UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x6002382")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Token(Token = "0x20004B1")]
	public class Event : UnityEvent
	{
		[Token(Token = "0x6002383")]
		[Address(RVA = "0x95B9F4", Offset = "0x95B9F4", VA = "0x95B9F4")]
		public void Listen(UnityAction action)
		{
		}

		[Token(Token = "0x6002384")]
		[Address(RVA = "0x95B9FC", Offset = "0x95B9FC", VA = "0x95B9FC")]
		public void Remove(UnityAction action)
		{
		}

		[Token(Token = "0x6002385")]
		[Address(RVA = "0x95BA04", Offset = "0x95BA04", VA = "0x95BA04")]
		public void Send()
		{
		}

		[Token(Token = "0x6002386")]
		[Address(RVA = "0x95BA0C", Offset = "0x95BA0C", VA = "0x95BA0C")]
		public Event()
		{
		}
	}

	[Token(Token = "0x20004B2")]
	public class Event<T> : UnityEvent<T>
	{
		[Token(Token = "0x6002387")]
		public void Listen(UnityAction<T> action)
		{
		}

		[Token(Token = "0x6002388")]
		public void Remove(UnityAction<T> action)
		{
		}

		[Token(Token = "0x6002389")]
		public void Send(T arg0)
		{
		}

		[Token(Token = "0x600238A")]
		public Event()
		{
		}
	}

	[Token(Token = "0x20004B3")]
	public class Event<T0, T1> : UnityEvent<T0, T1>
	{
		[Token(Token = "0x600238B")]
		public void Listen(UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x600238C")]
		public void Remove(UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x600238D")]
		public void Send(T0 arg0, T1 arg1)
		{
		}

		[Token(Token = "0x600238E")]
		public Event()
		{
		}
	}

	[Token(Token = "0x20004B4")]
	public class Event<T0, T1, T2> : UnityEvent<T0, T1, T2>
	{
		[Token(Token = "0x600238F")]
		public void Listen(UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x6002390")]
		public void Remove(UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x6002391")]
		public void Send(T0 arg0, T1 arg1, T2 arg2)
		{
		}

		[Token(Token = "0x6002392")]
		public Event()
		{
		}
	}

	[Token(Token = "0x4000E9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Event<bool> Calibrating;

	[Token(Token = "0x4000E9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Event<int, bool> DeviceConnected;

	[Token(Token = "0x4000E9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Event<Color, float, bool> Fade;

	[Token(Token = "0x4000EA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Event FadeReady;

	[Token(Token = "0x4000EA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Event<bool> HideRenderModels;

	[Token(Token = "0x4000EA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Event<bool> Initializing;

	[Token(Token = "0x4000EA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Event<bool> InputFocus;

	[Token(Token = "0x4000EA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Event<bool> Loading;

	[Token(Token = "0x4000EA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Event<float> LoadingFadeIn;

	[Token(Token = "0x4000EA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Event<float> LoadingFadeOut;

	[Token(Token = "0x4000EA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Event<TrackedDevicePose_t[]> NewPoses;

	[Token(Token = "0x4000EA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Event NewPosesApplied;

	[Token(Token = "0x4000EA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Event<bool> OutOfRange;

	[Token(Token = "0x4000EAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Event<SteamVR_RenderModel, bool> RenderModelLoaded;

	[Token(Token = "0x4000EAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static Dictionary<EVREventType, Event<VREvent_t>> systemEvents;

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0x8CA754", Offset = "0x8CA754", VA = "0x8CA754")]
	public static Action CalibratingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EED")]
	[Address(RVA = "0x8C931C", Offset = "0x8C931C", VA = "0x8C931C")]
	public static Action DeviceConnectedAction(UnityAction<int, bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0x8CA7F8", Offset = "0x8CA7F8", VA = "0x8CA7F8")]
	public static Action FadeAction(UnityAction<Color, float, bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0x8CA89C", Offset = "0x8CA89C", VA = "0x8CA89C")]
	public static Action FadeReadyAction(UnityAction action)
	{
		return null;
	}

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0x8CA938", Offset = "0x8CA938", VA = "0x8CA938")]
	public static Action HideRenderModelsAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0x8CA9DC", Offset = "0x8CA9DC", VA = "0x8CA9DC")]
	public static Action InitializingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0x8C9278", Offset = "0x8C9278", VA = "0x8C9278")]
	public static Action InputFocusAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EF3")]
	[Address(RVA = "0x8CAA80", Offset = "0x8CAA80", VA = "0x8CAA80")]
	public static Action LoadingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EF4")]
	[Address(RVA = "0x8CAB24", Offset = "0x8CAB24", VA = "0x8CAB24")]
	public static Action LoadingFadeInAction(UnityAction<float> action)
	{
		return null;
	}

	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0x8CABC8", Offset = "0x8CABC8", VA = "0x8CABC8")]
	public static Action LoadingFadeOutAction(UnityAction<float> action)
	{
		return null;
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0x8CAC6C", Offset = "0x8CAC6C", VA = "0x8CAC6C")]
	public static Action NewPosesAction(UnityAction<TrackedDevicePose_t[]> action)
	{
		return null;
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0x8CAD10", Offset = "0x8CAD10", VA = "0x8CAD10")]
	public static Action NewPosesAppliedAction(UnityAction action)
	{
		return null;
	}

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0x8CADAC", Offset = "0x8CADAC", VA = "0x8CADAC")]
	public static Action OutOfRangeAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0x8CAE50", Offset = "0x8CAE50", VA = "0x8CAE50")]
	public static Action RenderModelLoadedAction(UnityAction<SteamVR_RenderModel, bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0x8CAEF4", Offset = "0x8CAEF4", VA = "0x8CAEF4")]
	public static Event<VREvent_t> System(EVREventType eventType)
	{
		return null;
	}

	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0x8C93C0", Offset = "0x8C93C0", VA = "0x8C93C0")]
	public static Action SystemAction(EVREventType eventType, UnityAction<VREvent_t> action)
	{
		return null;
	}
}
[Token(Token = "0x200020A")]
public class SteamVR_ExternalCamera : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004B5")]
	public struct Config
	{
		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rx;

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float ry;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rz;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fov;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float near;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float far;

		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sceneResolutionScale;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float frameSkip;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float nearOffset;

		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float farOffset;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float hmdOffset;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float r;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float g;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float b;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float a;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool disableStandardAssets;
	}

	[Token(Token = "0x4000EAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Config config;

	[Token(Token = "0x4000EAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string configPath;

	[Token(Token = "0x4000EAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private FileSystemWatcher watcher;

	[Token(Token = "0x4000EAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Camera cam;

	[Token(Token = "0x4000EB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform target;

	[Token(Token = "0x4000EB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject clipQuad;

	[Token(Token = "0x4000EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Material clipMaterial;

	[Token(Token = "0x4000EB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Material colorMat;

	[Token(Token = "0x4000EB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Material alphaMat;

	[Token(Token = "0x4000EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Camera[] cameras;

	[Token(Token = "0x4000EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rect[] cameraRects;

	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float sceneResolutionScale;

	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0x95BA14", Offset = "0x95BA14", VA = "0x95BA14")]
	public void ReadConfig()
	{
	}

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0x95C5B8", Offset = "0x95C5B8", VA = "0x95C5B8")]
	private void OnChanged(object source, FileSystemEventArgs e)
	{
	}

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0x95C5BC", Offset = "0x95C5BC", VA = "0x95C5BC")]
	public void AttachToCamera(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0x95CB78", Offset = "0x95CB78", VA = "0x95CB78")]
	public float GetTargetDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6000F01")]
	[Address(RVA = "0x95CE2C", Offset = "0x95CE2C", VA = "0x95CE2C")]
	public void RenderNear()
	{
	}

	[Token(Token = "0x6000F02")]
	[Address(RVA = "0x95D580", Offset = "0x95D580", VA = "0x95D580")]
	public void RenderFar()
	{
	}

	[Token(Token = "0x6000F03")]
	[Address(RVA = "0x95D6A0", Offset = "0x95D6A0", VA = "0x95D6A0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000F04")]
	[Address(RVA = "0x95D6A4", Offset = "0x95D6A4", VA = "0x95D6A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F05")]
	[Address(RVA = "0x95D8FC", Offset = "0x95D8FC", VA = "0x95D8FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F06")]
	[Address(RVA = "0x95DA40", Offset = "0x95DA40", VA = "0x95DA40")]
	public SteamVR_ExternalCamera()
	{
	}
}
[Token(Token = "0x200020B")]
public class SteamVR_Fade : MonoBehaviour
{
	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color currentColor;

	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color targetColor;

	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color deltaColor;

	[Token(Token = "0x4000EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool fadeOverlay;

	[Token(Token = "0x4000EBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material fadeMaterial;

	[Token(Token = "0x4000EBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int fadeMaterialColorID;

	[Token(Token = "0x6000F07")]
	[Address(RVA = "0x95DA48", Offset = "0x95DA48", VA = "0x95DA48")]
	public static void Start(Color newColor, float duration, bool fadeOverlay = false)
	{
	}

	[Token(Token = "0x6000F08")]
	[Address(RVA = "0x95DB0C", Offset = "0x95DB0C", VA = "0x95DB0C")]
	public static void View(Color newColor, float duration)
	{
	}

	[Token(Token = "0x6000F09")]
	[Address(RVA = "0x95DBD4", Offset = "0x95DBD4", VA = "0x95DBD4")]
	public void OnStartFade(Color newColor, float duration, bool fadeOverlay)
	{
	}

	[Token(Token = "0x6000F0A")]
	[Address(RVA = "0x95DC3C", Offset = "0x95DC3C", VA = "0x95DC3C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F0B")]
	[Address(RVA = "0x95DE00", Offset = "0x95DE00", VA = "0x95DE00")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F0C")]
	[Address(RVA = "0x95DEC8", Offset = "0x95DEC8", VA = "0x95DEC8")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000F0D")]
	[Address(RVA = "0x95E200", Offset = "0x95E200", VA = "0x95E200")]
	public SteamVR_Fade()
	{
	}
}
[Token(Token = "0x200020C")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749740", Offset = "0x749740")]
public class SteamVR_Frustum : MonoBehaviour
{
	[Token(Token = "0x4000EBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_TrackedObject.EIndex index;

	[Token(Token = "0x4000EBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fovLeft;

	[Token(Token = "0x4000EC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fovRight;

	[Token(Token = "0x4000EC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float fovTop;

	[Token(Token = "0x4000EC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fovBottom;

	[Token(Token = "0x4000EC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float nearZ;

	[Token(Token = "0x4000EC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float farZ;

	[Token(Token = "0x6000F0F")]
	[Address(RVA = "0x95E338", Offset = "0x95E338", VA = "0x95E338")]
	public void UpdateModel()
	{
	}

	[Token(Token = "0x6000F10")]
	[Address(RVA = "0x95EB18", Offset = "0x95EB18", VA = "0x95EB18")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x6000F11")]
	[Address(RVA = "0x95ECD8", Offset = "0x95ECD8", VA = "0x95ECD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F12")]
	[Address(RVA = "0x95EDC8", Offset = "0x95EDC8", VA = "0x95EDC8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F13")]
	[Address(RVA = "0x95EEB4", Offset = "0x95EEB4", VA = "0x95EEB4")]
	public SteamVR_Frustum()
	{
	}
}
[Token(Token = "0x200020D")]
[ExecuteInEditMode]
public class SteamVR_GameView : MonoBehaviour
{
	[Token(Token = "0x6000F14")]
	[Address(RVA = "0x95EED4", Offset = "0x95EED4", VA = "0x95EED4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F15")]
	[Address(RVA = "0x95EF70", Offset = "0x95EF70", VA = "0x95EF70")]
	public SteamVR_GameView()
	{
	}
}
[Token(Token = "0x200020E")]
public class SteamVR_IK : MonoBehaviour
{
	[Token(Token = "0x4000EC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000EC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform start;

	[Token(Token = "0x4000EC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform joint;

	[Token(Token = "0x4000EC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform end;

	[Token(Token = "0x4000EC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform poleVector;

	[Token(Token = "0x4000ECA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform upVector;

	[Token(Token = "0x4000ECB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float blendPct;

	[Token(Token = "0x4000ECC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Transform startXform;

	[Token(Token = "0x4000ECD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Transform jointXform;

	[Token(Token = "0x4000ECE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Transform endXform;

	[Token(Token = "0x6000F16")]
	[Address(RVA = "0x95F5D0", Offset = "0x95F5D0", VA = "0x95F5D0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000F17")]
	[Address(RVA = "0x95FF90", Offset = "0x95FF90", VA = "0x95FF90")]
	public static bool Solve(Vector3 start, Vector3 end, Vector3 poleVector, float jointDist, float targetDist, ref Vector3 result, out Vector3 forward, out Vector3 up)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F18")]
	[Address(RVA = "0x96049C", Offset = "0x96049C", VA = "0x96049C")]
	public SteamVR_IK()
	{
	}
}
[Token(Token = "0x200020F")]
public class SteamVR_LoadLevel : MonoBehaviour
{
	[Token(Token = "0x20004B6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AF20", Offset = "0x74AF20")]
	private sealed class <LoadLevel>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_LoadLevel <>4__this;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CVROverlay <overlay>5__2;

		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <fadedForeground>5__3;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CVRCompositor <compositor>5__4;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_Controller.Device <hmd>5__5;

		[Token(Token = "0x17000395")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002396")]
			[Address(RVA = "0x963734", Offset = "0x963734", VA = "0x963734", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000396")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002398")]
			[Address(RVA = "0x9637A0", Offset = "0x9637A0", VA = "0x9637A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002393")]
		[Address(RVA = "0x961E14", Offset = "0x961E14", VA = "0x961E14")]
		[DebuggerHidden]
		public <LoadLevel>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6002394")]
		[Address(RVA = "0x962554", Offset = "0x962554", VA = "0x962554", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002395")]
		[Address(RVA = "0x962558", Offset = "0x962558", VA = "0x962558", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002397")]
		[Address(RVA = "0x96373C", Offset = "0x96373C", VA = "0x96373C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000ECF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SteamVR_LoadLevel _active;

	[Token(Token = "0x4000ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string levelName;

	[Token(Token = "0x4000ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string internalProcessPath;

	[Token(Token = "0x4000ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string internalProcessArgs;

	[Token(Token = "0x4000ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool loadAdditive;

	[Token(Token = "0x4000ED4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool loadAsync;

	[Token(Token = "0x4000ED5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture loadingScreen;

	[Token(Token = "0x4000ED6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture progressBarEmpty;

	[Token(Token = "0x4000ED7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture progressBarFull;

	[Token(Token = "0x4000ED8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float loadingScreenWidthInMeters;

	[Token(Token = "0x4000ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float progressBarWidthInMeters;

	[Token(Token = "0x4000EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float loadingScreenDistance;

	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform loadingScreenTransform;

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform progressBarTransform;

	[Token(Token = "0x4000EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture front;

	[Token(Token = "0x4000EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Texture back;

	[Token(Token = "0x4000EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Texture left;

	[Token(Token = "0x4000EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Texture right;

	[Token(Token = "0x4000EE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Texture top;

	[Token(Token = "0x4000EE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Texture bottom;

	[Token(Token = "0x4000EE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Color backgroundColor;

	[Token(Token = "0x4000EE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool showGrid;

	[Token(Token = "0x4000EE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float fadeOutTime;

	[Token(Token = "0x4000EE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float fadeInTime;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float postLoadSettleTime;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float loadingScreenFadeInTime;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float loadingScreenFadeOutTime;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float fadeRate;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float alpha;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private AsyncOperation async;

	[Token(Token = "0x4000EED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private RenderTexture renderTexture;

	[Token(Token = "0x4000EEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private ulong loadingScreenOverlayHandle;

	[Token(Token = "0x4000EEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ulong progressBarOverlayHandle;

	[Token(Token = "0x4000EF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool autoTriggerOnEnable;

	[Token(Token = "0x1700013B")]
	public static bool loading
	{
		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x961028", Offset = "0x961028", VA = "0x961028")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700013C")]
	public static float progress
	{
		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x9610C0", Offset = "0x9610C0", VA = "0x9610C0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700013D")]
	public static Texture progressTexture
	{
		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x9611D8", Offset = "0x9611D8", VA = "0x9611D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000F1C")]
	[Address(RVA = "0x9612B4", Offset = "0x9612B4", VA = "0x9612B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F1D")]
	[Address(RVA = "0x9612C4", Offset = "0x9612C4", VA = "0x9612C4")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000F1E")]
	[Address(RVA = "0x9613D0", Offset = "0x9613D0", VA = "0x9613D0")]
	public static void Begin(string levelName, bool showGrid = false, float fadeOutTime = 0.5f, float r = 0f, float g = 0f, float b = 0f, float a = 1f)
	{
	}

	[Token(Token = "0x6000F1F")]
	[Address(RVA = "0x9614F0", Offset = "0x9614F0", VA = "0x9614F0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000F20")]
	[Address(RVA = "0x961CAC", Offset = "0x961CAC", VA = "0x961CAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F21")]
	[Address(RVA = "0x96135C", Offset = "0x96135C", VA = "0x96135C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x757B38", Offset = "0x757B38")]
	private IEnumerator LoadLevel()
	{
		return null;
	}

	[Token(Token = "0x6000F22")]
	[Address(RVA = "0x961940", Offset = "0x961940", VA = "0x961940")]
	private ulong GetOverlayHandle(string overlayName, Transform transform, float widthInMeters = 1f)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000F23")]
	[Address(RVA = "0x9624EC", Offset = "0x9624EC", VA = "0x9624EC")]
	public SteamVR_LoadLevel()
	{
	}
}
[Token(Token = "0x2000210")]
public class SteamVR_Menu : MonoBehaviour
{
	[Token(Token = "0x4000EF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture cursor;

	[Token(Token = "0x4000EF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture background;

	[Token(Token = "0x4000EF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture logo;

	[Token(Token = "0x4000EF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float logoHeight;

	[Token(Token = "0x4000EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float menuOffset;

	[Token(Token = "0x4000EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 scaleLimits;

	[Token(Token = "0x4000EF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float scaleRate;

	[Token(Token = "0x4000EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SteamVR_Overlay overlay;

	[Token(Token = "0x4000EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Camera overlayCam;

	[Token(Token = "0x4000EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector4 uvOffset;

	[Token(Token = "0x4000EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float distance;

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750BE0", Offset = "0x750BE0")]
	private float <scale>k__BackingField;

	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string scaleLimitX;

	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string scaleLimitY;

	[Token(Token = "0x4000EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string scaleRateText;

	[Token(Token = "0x4000F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private CursorLockMode savedCursorLockState;

	[Token(Token = "0x4000F01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool savedCursorVisible;

	[Token(Token = "0x1700013E")]
	public RenderTexture texture
	{
		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x9637A8", Offset = "0x9637A8", VA = "0x9637A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700013F")]
	public float scale
	{
		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x963878", Offset = "0x963878", VA = "0x963878")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757B9C", Offset = "0x757B9C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x963880", Offset = "0x963880", VA = "0x963880")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757BAC", Offset = "0x757BAC")]
		private set
		{
		}
	}

	[Token(Token = "0x6000F28")]
	[Address(RVA = "0x963888", Offset = "0x963888", VA = "0x963888")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F29")]
	[Address(RVA = "0x963A04", Offset = "0x963A04", VA = "0x963A04")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0x9655B0", Offset = "0x9655B0", VA = "0x9655B0")]
	public void ShowMenu()
	{
	}

	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0x965494", Offset = "0x965494", VA = "0x965494")]
	public void HideMenu()
	{
	}

	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0x965980", Offset = "0x965980", VA = "0x965980")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0x9653A8", Offset = "0x9653A8", VA = "0x9653A8")]
	private void SetScale(float scale)
	{
	}

	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0x965918", Offset = "0x965918", VA = "0x965918")]
	private void SaveCursorState()
	{
	}

	[Token(Token = "0x6000F2F")]
	[Address(RVA = "0x965950", Offset = "0x965950", VA = "0x965950")]
	private void RestoreCursorState()
	{
	}

	[Token(Token = "0x6000F30")]
	[Address(RVA = "0x965B50", Offset = "0x965B50", VA = "0x965B50")]
	public SteamVR_Menu()
	{
	}
}
[Token(Token = "0x2000211")]
public class SteamVR_Overlay : MonoBehaviour
{
	[Token(Token = "0x20004B7")]
	public struct IntersectionResults
	{
		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 point;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 normal;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 UVs;

		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;
	}

	[Token(Token = "0x4000F02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture texture;

	[Token(Token = "0x4000F03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool curved;

	[Token(Token = "0x4000F04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool antialias;

	[Token(Token = "0x4000F05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool highquality;

	[Token(Token = "0x4000F06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750BF0", Offset = "0x750BF0")]
	public float scale;

	[Token(Token = "0x4000F07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750C28", Offset = "0x750C28")]
	public float distance;

	[Token(Token = "0x4000F08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750C60", Offset = "0x750C60")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x750C60", Offset = "0x750C60")]
	public float alpha;

	[Token(Token = "0x4000F09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 uvOffset;

	[Token(Token = "0x4000F0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 mouseScale;

	[Token(Token = "0x4000F0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector2 curvedRange;

	[Token(Token = "0x4000F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VROverlayInputMethod inputMethod;

	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750CB4", Offset = "0x750CB4")]
	private static SteamVR_Overlay <instance>k__BackingField;

	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ulong handle;

	[Token(Token = "0x17000140")]
	public static SteamVR_Overlay instance
	{
		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x965BA4", Offset = "0x965BA4", VA = "0x965BA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757BBC", Offset = "0x757BBC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x965BF4", Offset = "0x965BF4", VA = "0x965BF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757BCC", Offset = "0x757BCC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000141")]
	public static string key
	{
		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x961E40", Offset = "0x961E40", VA = "0x961E40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000F34")]
	[Address(RVA = "0x965C48", Offset = "0x965C48", VA = "0x965C48")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F35")]
	[Address(RVA = "0x965D9C", Offset = "0x965D9C", VA = "0x965D9C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F36")]
	[Address(RVA = "0x965E58", Offset = "0x965E58", VA = "0x965E58")]
	public void UpdateOverlay()
	{
	}

	[Token(Token = "0x6000F37")]
	[Address(RVA = "0x9662A0", Offset = "0x9662A0", VA = "0x9662A0")]
	public bool PollNextEvent(ref VREvent_t pEvent)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F38")]
	[Address(RVA = "0x9663AC", Offset = "0x9663AC", VA = "0x9663AC")]
	public bool ComputeIntersection(Vector3 source, Vector3 direction, ref IntersectionResults results)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F39")]
	[Address(RVA = "0x96656C", Offset = "0x96656C", VA = "0x96656C")]
	public SteamVR_Overlay()
	{
	}
}
[Token(Token = "0x2000212")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7497E0", Offset = "0x7497E0")]
public class SteamVR_PlayArea : MonoBehaviour
{
	[Token(Token = "0x20004B8")]
	public enum Size
	{
		[Token(Token = "0x40020C3")]
		Calibrated,
		[Token(Token = "0x40020C4")]
		_400x300,
		[Token(Token = "0x40020C5")]
		_300x225,
		[Token(Token = "0x40020C6")]
		_200x150
	}

	[Token(Token = "0x20004B9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AF30", Offset = "0x74AF30")]
	private sealed class <UpdateBounds>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_PlayArea <>4__this;

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CVRChaperone <chaperone>5__2;

		[Token(Token = "0x17000397")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600239C")]
			[Address(RVA = "0x967794", Offset = "0x967794", VA = "0x967794", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000398")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600239E")]
			[Address(RVA = "0x967800", Offset = "0x967800", VA = "0x967800", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002399")]
		[Address(RVA = "0x967618", Offset = "0x967618", VA = "0x967618")]
		[DebuggerHidden]
		public <UpdateBounds>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600239A")]
		[Address(RVA = "0x967690", Offset = "0x967690", VA = "0x967690", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0x967694", Offset = "0x967694", VA = "0x967694", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600239D")]
		[Address(RVA = "0x96779C", Offset = "0x96779C", VA = "0x96779C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float borderThickness;

	[Token(Token = "0x4000F10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wireframeHeight;

	[Token(Token = "0x4000F11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool drawWireframeWhenSelectedOnly;

	[Token(Token = "0x4000F12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool drawInGame;

	[Token(Token = "0x4000F13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Size size;

	[Token(Token = "0x4000F14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color color;

	[Token(Token = "0x4000F15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Vector3[] vertices;

	[Token(Token = "0x6000F3A")]
	[Address(RVA = "0x966644", Offset = "0x966644", VA = "0x966644")]
	public static bool GetBounds(Size size, ref HmdQuad_t pRect)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0x9669F0", Offset = "0x9669F0", VA = "0x9669F0")]
	public void BuildMesh()
	{
	}

	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0x967240", Offset = "0x967240", VA = "0x967240")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000F3D")]
	[Address(RVA = "0x9674E0", Offset = "0x9674E0", VA = "0x9674E0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000F3E")]
	[Address(RVA = "0x967250", Offset = "0x967250", VA = "0x967250")]
	public void DrawWireframe()
	{
	}

	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0x9674F0", Offset = "0x9674F0", VA = "0x9674F0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000F40")]
	[Address(RVA = "0x9675A4", Offset = "0x9675A4", VA = "0x9675A4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x757BDC", Offset = "0x757BDC")]
	private IEnumerator UpdateBounds()
	{
		return null;
	}

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0x967644", Offset = "0x967644", VA = "0x967644")]
	public SteamVR_PlayArea()
	{
	}
}
[Token(Token = "0x2000213")]
public class SteamVR_Render : MonoBehaviour
{
	[Token(Token = "0x20004BA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AF40", Offset = "0x74AF40")]
	private sealed class <RenderLoop>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_Render <>4__this;

		[Token(Token = "0x17000399")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60023A2")]
			[Address(RVA = "0x96A330", Offset = "0x96A330", VA = "0x96A330", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023A4")]
			[Address(RVA = "0x96A39C", Offset = "0x96A39C", VA = "0x96A39C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600239F")]
		[Address(RVA = "0x967F6C", Offset = "0x967F6C", VA = "0x967F6C")]
		[DebuggerHidden]
		public <RenderLoop>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60023A0")]
		[Address(RVA = "0x96A178", Offset = "0x96A178", VA = "0x96A178", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60023A1")]
		[Address(RVA = "0x96A17C", Offset = "0x96A17C", VA = "0x96A17C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023A3")]
		[Address(RVA = "0x96A338", Offset = "0x96A338", VA = "0x96A338", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool pauseGameWhenDashboardIsVisible;

	[Token(Token = "0x4000F17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool lockPhysicsUpdateRateToRenderFrequency;

	[Token(Token = "0x4000F18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SteamVR_ExternalCamera externalCamera;

	[Token(Token = "0x4000F19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string externalCameraConfigPath;

	[Token(Token = "0x4000F1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ETrackingUniverseOrigin trackingSpace;

	[Token(Token = "0x4000F1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750CD4", Offset = "0x750CD4")]
	private static EVREye <eye>k__BackingField;

	[Token(Token = "0x4000F1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SteamVR_Render _instance;

	[Token(Token = "0x4000F1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool isQuitting;

	[Token(Token = "0x4000F1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SteamVR_Camera[] cameras;

	[Token(Token = "0x4000F1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TrackedDevicePose_t[] poses;

	[Token(Token = "0x4000F20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TrackedDevicePose_t[] gamePoses;

	[Token(Token = "0x4000F21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private static bool _pauseRendering;

	[Token(Token = "0x4000F22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaitForEndOfFrame waitForEndOfFrame;

	[Token(Token = "0x4000F23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float sceneResolutionScale;

	[Token(Token = "0x4000F24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timeScale;

	[Token(Token = "0x17000142")]
	public static EVREye eye
	{
		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x967808", Offset = "0x967808", VA = "0x967808")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757C40", Offset = "0x757C40")]
		get
		{
			return default(EVREye);
		}
		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x967858", Offset = "0x967858", VA = "0x967858")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757C50", Offset = "0x757C50")]
		private set
		{
		}
	}

	[Token(Token = "0x17000143")]
	public static SteamVR_Render instance
	{
		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x962360", Offset = "0x962360", VA = "0x962360")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000144")]
	public static bool pauseRendering
	{
		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x967EA8", Offset = "0x967EA8", VA = "0x967EA8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x963624", Offset = "0x963624", VA = "0x963624")]
		set
		{
		}
	}

	[Token(Token = "0x6000F45")]
	[Address(RVA = "0x9678AC", Offset = "0x9678AC", VA = "0x9678AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F46")]
	[Address(RVA = "0x9678FC", Offset = "0x9678FC", VA = "0x9678FC")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000F47")]
	[Address(RVA = "0x967974", Offset = "0x967974", VA = "0x967974")]
	public static void Add(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x6000F48")]
	[Address(RVA = "0x967BF0", Offset = "0x967BF0", VA = "0x967BF0")]
	public static void Remove(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x6000F49")]
	[Address(RVA = "0x961EB8", Offset = "0x961EB8", VA = "0x961EB8")]
	public static SteamVR_Camera Top()
	{
		return null;
	}

	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0x9679E8", Offset = "0x9679E8", VA = "0x9679E8")]
	private void AddInternal(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0x967C9C", Offset = "0x967C9C", VA = "0x967C9C")]
	private void RemoveInternal(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0x967E54", Offset = "0x967E54", VA = "0x967E54")]
	private SteamVR_Camera TopInternal()
	{
		return null;
	}

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0x967EF8", Offset = "0x967EF8", VA = "0x967EF8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x757C60", Offset = "0x757C60")]
	private IEnumerator RenderLoop()
	{
		return null;
	}

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0x967F98", Offset = "0x967F98", VA = "0x967F98")]
	private void RenderExternalCamera()
	{
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0x9680DC", Offset = "0x9680DC", VA = "0x9680DC")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x6000F52")]
	[Address(RVA = "0x96814C", Offset = "0x96814C", VA = "0x96814C")]
	private void OnQuit(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x6000F53")]
	[Address(RVA = "0x968154", Offset = "0x968154", VA = "0x968154")]
	private string GetScreenshotFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames screenshotPropertyFilename)
	{
		return null;
	}

	[Token(Token = "0x6000F54")]
	[Address(RVA = "0x9682A8", Offset = "0x9682A8", VA = "0x9682A8")]
	private void OnRequestScreenshot(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x6000F55")]
	[Address(RVA = "0x9695F8", Offset = "0x9695F8", VA = "0x9695F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F56")]
	[Address(RVA = "0x96988C", Offset = "0x96988C", VA = "0x96988C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F57")]
	[Address(RVA = "0x969A50", Offset = "0x969A50", VA = "0x969A50")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0x969BB8", Offset = "0x969BB8", VA = "0x969BB8")]
	public void UpdatePoses()
	{
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0x969C98", Offset = "0x969C98", VA = "0x969C98")]
	private void OnBeforeRender()
	{
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0x969C9C", Offset = "0x969C9C", VA = "0x969C9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0x96A0AC", Offset = "0x96A0AC", VA = "0x96A0AC")]
	public SteamVR_Render()
	{
	}
}
[Token(Token = "0x2000214")]
[ExecuteInEditMode]
public class SteamVR_RenderModel : MonoBehaviour
{
	[Token(Token = "0x20004BB")]
	public class RenderModel
	{
		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755FB4", Offset = "0x755FB4")]
		private Mesh <mesh>k__BackingField;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755FC4", Offset = "0x755FC4")]
		private Material <material>k__BackingField;

		[Token(Token = "0x1700039B")]
		public Mesh mesh
		{
			[Token(Token = "0x60023A6")]
			[Address(RVA = "0x96DBC4", Offset = "0x96DBC4", VA = "0x96DBC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AA70", Offset = "0x75AA70")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023A7")]
			[Address(RVA = "0x96DBCC", Offset = "0x96DBCC", VA = "0x96DBCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AA80", Offset = "0x75AA80")]
			private set
			{
			}
		}

		[Token(Token = "0x1700039C")]
		public Material material
		{
			[Token(Token = "0x60023A8")]
			[Address(RVA = "0x96DBD4", Offset = "0x96DBD4", VA = "0x96DBD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AA90", Offset = "0x75AA90")]
			get
			{
				return null;
			}
			[Token(Token = "0x60023A9")]
			[Address(RVA = "0x96DBDC", Offset = "0x96DBDC", VA = "0x96DBDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AAA0", Offset = "0x75AAA0")]
			private set
			{
			}
		}

		[Token(Token = "0x60023A5")]
		[Address(RVA = "0x96C9F8", Offset = "0x96C9F8", VA = "0x96C9F8")]
		public RenderModel(Mesh mesh, Material material)
		{
		}
	}

	[Token(Token = "0x20004BC")]
	public sealed class RenderModelInterfaceHolder : IDisposable
	{
		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool needsShutdown;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool failedLoadInterface;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CVRRenderModels _instance;

		[Token(Token = "0x1700039D")]
		public CVRRenderModels instance
		{
			[Token(Token = "0x60023AA")]
			[Address(RVA = "0x96B4C4", Offset = "0x96B4C4", VA = "0x96B4C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0x96DBE4", Offset = "0x96DBE4", VA = "0x96DBE4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0x96ADE8", Offset = "0x96ADE8", VA = "0x96ADE8")]
		public RenderModelInterfaceHolder()
		{
		}
	}

	[Token(Token = "0x20004BD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AF50", Offset = "0x74AF50")]
	private sealed class <SetModelAsync>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string renderModelName;

		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_RenderModel <>4__this;

		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderModelInterfaceHolder <holder>5__2;

		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CVRRenderModels <renderModels>5__3;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string[] <renderModelNames>5__4;

		[Token(Token = "0x1700039E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60023B1")]
			[Address(RVA = "0x96DB50", Offset = "0x96DB50", VA = "0x96DB50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023B3")]
			[Address(RVA = "0x96DBBC", Offset = "0x96DBBC", VA = "0x96DBBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023AD")]
		[Address(RVA = "0x96A7B4", Offset = "0x96A7B4", VA = "0x96A7B4")]
		[DebuggerHidden]
		public <SetModelAsync>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60023AE")]
		[Address(RVA = "0x96D180", Offset = "0x96D180", VA = "0x96D180", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60023AF")]
		[Address(RVA = "0x96D25C", Offset = "0x96D25C", VA = "0x96D25C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023B0")]
		[Address(RVA = "0x96D19C", Offset = "0x96D19C", VA = "0x96D19C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60023B2")]
		[Address(RVA = "0x96DB58", Offset = "0x96DB58", VA = "0x96DB58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20004BE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AF60", Offset = "0x74AF60")]
	private sealed class <FreeRenderModel>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr pRenderModel;

		[Token(Token = "0x170003A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60023B7")]
			[Address(RVA = "0x96D10C", Offset = "0x96D10C", VA = "0x96D10C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023B9")]
			[Address(RVA = "0x96D178", Offset = "0x96D178", VA = "0x96D178", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023B4")]
		[Address(RVA = "0x96CA30", Offset = "0x96CA30", VA = "0x96CA30")]
		[DebuggerHidden]
		public <FreeRenderModel>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60023B5")]
		[Address(RVA = "0x96CF74", Offset = "0x96CF74", VA = "0x96CF74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60023B6")]
		[Address(RVA = "0x96CF78", Offset = "0x96CF78", VA = "0x96CF78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023B8")]
		[Address(RVA = "0x96D114", Offset = "0x96D114", VA = "0x96D114", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_TrackedObject.EIndex index;

	[Token(Token = "0x4000F26")]
	public const string modelOverrideWarning = "Model override is really only meant to be used in the scene view for lining things up; using it at runtime is discouraged.  Use tracked device index instead to ensure the correct model is displayed for all users.";

	[Token(Token = "0x4000F27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750CE4", Offset = "0x750CE4")]
	public string modelOverride;

	[Token(Token = "0x4000F28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750D1C", Offset = "0x750D1C")]
	public Shader shader;

	[Token(Token = "0x4000F29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750D54", Offset = "0x750D54")]
	public bool verbose;

	[Token(Token = "0x4000F2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750D8C", Offset = "0x750D8C")]
	public bool createComponents;

	[Token(Token = "0x4000F2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750DC4", Offset = "0x750DC4")]
	public bool updateDynamically;

	[Token(Token = "0x4000F2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public RenderModel_ControllerMode_State_t controllerModeState;

	[Token(Token = "0x4000F2D")]
	public const string k_localTransformName = "attach";

	[Token(Token = "0x4000F2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750DFC", Offset = "0x750DFC")]
	private string <renderModelName>k__BackingField;

	[Token(Token = "0x4000F2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Hashtable models;

	[Token(Token = "0x4000F30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Hashtable materials;

	[Token(Token = "0x4000F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SteamVR_Events.Action deviceConnectedAction;

	[Token(Token = "0x4000F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SteamVR_Events.Action hideRenderModelsAction;

	[Token(Token = "0x4000F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SteamVR_Events.Action modelSkinSettingsHaveChangedAction;

	[Token(Token = "0x4000F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<int, string> nameCache;

	[Token(Token = "0x17000145")]
	public string renderModelName
	{
		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x96A3A4", Offset = "0x96A3A4", VA = "0x96A3A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757CC4", Offset = "0x757CC4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x96A3AC", Offset = "0x96A3AC", VA = "0x96A3AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757CD4", Offset = "0x757CD4")]
		private set
		{
		}
	}

	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0x96A3B4", Offset = "0x96A3B4", VA = "0x96A3B4")]
	private void OnModelSkinSettingsHaveChanged(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0x96A5E0", Offset = "0x96A5E0", VA = "0x96A5E0")]
	private void OnHideRenderModels(bool hidden)
	{
	}

	[Token(Token = "0x6000F60")]
	[Address(RVA = "0x96A71C", Offset = "0x96A71C", VA = "0x96A71C")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x6000F61")]
	[Address(RVA = "0x96A424", Offset = "0x96A424", VA = "0x96A424")]
	public void UpdateModel()
	{
	}

	[Token(Token = "0x6000F62")]
	[Address(RVA = "0x96A734", Offset = "0x96A734", VA = "0x96A734")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x757CE4", Offset = "0x757CE4")]
	private IEnumerator SetModelAsync(string renderModelName)
	{
		return null;
	}

	[Token(Token = "0x6000F63")]
	[Address(RVA = "0x96A7E0", Offset = "0x96A7E0", VA = "0x96A7E0")]
	private bool SetModel(string renderModelName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F64")]
	[Address(RVA = "0x96BA78", Offset = "0x96BA78", VA = "0x96BA78")]
	private RenderModel LoadRenderModel(CVRRenderModels renderModels, string renderModelName, string baseName)
	{
		return null;
	}

	[Token(Token = "0x6000F65")]
	[Address(RVA = "0x96C984", Offset = "0x96C984", VA = "0x96C984")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x757D48", Offset = "0x757D48")]
	private IEnumerator FreeRenderModel(IntPtr pRenderModel)
	{
		return null;
	}

	[Token(Token = "0x6000F66")]
	[Address(RVA = "0x96CA5C", Offset = "0x96CA5C", VA = "0x96CA5C")]
	public Transform FindComponent(string componentName)
	{
		return null;
	}

	[Token(Token = "0x6000F67")]
	[Address(RVA = "0x96ACA8", Offset = "0x96ACA8", VA = "0x96ACA8")]
	private void StripMesh(GameObject go)
	{
	}

	[Token(Token = "0x6000F68")]
	[Address(RVA = "0x96ADF0", Offset = "0x96ADF0", VA = "0x96ADF0")]
	private bool LoadComponents(RenderModelInterfaceHolder holder, string renderModelName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F69")]
	[Address(RVA = "0x96CB00", Offset = "0x96CB00", VA = "0x96CB00")]
	private SteamVR_RenderModel()
	{
	}

	[Token(Token = "0x6000F6A")]
	[Address(RVA = "0x96CC4C", Offset = "0x96CC4C", VA = "0x96CC4C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F6B")]
	[Address(RVA = "0x96CD74", Offset = "0x96CD74", VA = "0x96CD74")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F6C")]
	[Address(RVA = "0x96CDD8", Offset = "0x96CDD8", VA = "0x96CDD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F6D")]
	[Address(RVA = "0x96B624", Offset = "0x96B624", VA = "0x96B624")]
	public void UpdateComponents(CVRRenderModels renderModels)
	{
	}

	[Token(Token = "0x6000F6E")]
	[Address(RVA = "0x96CE5C", Offset = "0x96CE5C", VA = "0x96CE5C")]
	public void SetDeviceIndex(int index)
	{
	}

	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0x96C574", Offset = "0x96C574", VA = "0x96C574")]
	private static void Sleep()
	{
	}

	[Token(Token = "0x6000F70")]
	[Address(RVA = "0x96C580", Offset = "0x96C580", VA = "0x96C580")]
	private RenderModel_t MarshalRenderModel(IntPtr pRenderModel)
	{
		return default(RenderModel_t);
	}

	[Token(Token = "0x6000F71")]
	[Address(RVA = "0x96C794", Offset = "0x96C794", VA = "0x96C794")]
	private RenderModel_TextureMap_t MarshalRenderModel_TextureMap(IntPtr pRenderModel)
	{
		return default(RenderModel_TextureMap_t);
	}
}
[Token(Token = "0x2000215")]
public class SteamVR_Skybox : MonoBehaviour
{
	[Token(Token = "0x20004BF")]
	public enum CellSize
	{
		[Token(Token = "0x40020DE")]
		x1024,
		[Token(Token = "0x40020DF")]
		x64,
		[Token(Token = "0x40020E0")]
		x32,
		[Token(Token = "0x40020E1")]
		x16,
		[Token(Token = "0x40020E2")]
		x8
	}

	[Token(Token = "0x4000F35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture front;

	[Token(Token = "0x4000F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture back;

	[Token(Token = "0x4000F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture left;

	[Token(Token = "0x4000F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture right;

	[Token(Token = "0x4000F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture top;

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture bottom;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CellSize StereoCellSize;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float StereoIpdMm;

	[Token(Token = "0x6000F73")]
	[Address(RVA = "0x96DC5C", Offset = "0x96DC5C", VA = "0x96DC5C")]
	public void SetTextureByIndex(int i, Texture t)
	{
	}

	[Token(Token = "0x6000F74")]
	[Address(RVA = "0x96DCB0", Offset = "0x96DCB0", VA = "0x96DCB0")]
	public Texture GetTextureByIndex(int i)
	{
		return null;
	}

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0x963280", Offset = "0x963280", VA = "0x963280")]
	public static void SetOverride([Optional] Texture front, [Optional] Texture back, [Optional] Texture left, [Optional] Texture right, [Optional] Texture top, [Optional] Texture bottom)
	{
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0x9636BC", Offset = "0x9636BC", VA = "0x9636BC")]
	public static void ClearOverride()
	{
	}

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0x96DD0C", Offset = "0x96DD0C", VA = "0x96DD0C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0x96DD20", Offset = "0x96DD20", VA = "0x96DD20")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0x96DD24", Offset = "0x96DD24", VA = "0x96DD24")]
	public SteamVR_Skybox()
	{
	}
}
[Token(Token = "0x2000216")]
[ExecuteInEditMode]
public class SteamVR_SphericalProjection : MonoBehaviour
{
	[Token(Token = "0x4000F3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material material;

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0x96DD38", Offset = "0x96DD38", VA = "0x96DD38")]
	public void Set(Vector3 N, float phi0, float phi1, float theta0, float theta1, Vector3 uAxis, Vector3 uOrigin, float uScale, Vector3 vAxis, Vector3 vOrigin, float vScale)
	{
	}

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0x96E0DC", Offset = "0x96E0DC", VA = "0x96E0DC")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0x96E16C", Offset = "0x96E16C", VA = "0x96E16C")]
	public SteamVR_SphericalProjection()
	{
	}
}
[Token(Token = "0x2000217")]
public class SteamVR_Stats : MonoBehaviour
{
	[Token(Token = "0x4000F3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GUIText text;

	[Token(Token = "0x4000F3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color fadeColor;

	[Token(Token = "0x4000F40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fadeDuration;

	[Token(Token = "0x4000F41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private double lastUpdate;

	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0x96E174", Offset = "0x96E174", VA = "0x96E174")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0x96E29C", Offset = "0x96E29C", VA = "0x96E29C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F7F")]
	[Address(RVA = "0x96E4F0", Offset = "0x96E4F0", VA = "0x96E4F0")]
	public SteamVR_Stats()
	{
	}
}
[Token(Token = "0x2000218")]
public class SteamVR_TestController : MonoBehaviour
{
	[Token(Token = "0x4000F42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<int> controllerIndices;

	[Token(Token = "0x4000F43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EVRButtonId[] buttonIds;

	[Token(Token = "0x4000F44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EVRButtonId[] axisIds;

	[Token(Token = "0x4000F45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform point;

	[Token(Token = "0x4000F46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform pointer;

	[Token(Token = "0x6000F80")]
	[Address(RVA = "0x96EBF0", Offset = "0x96EBF0", VA = "0x96EBF0")]
	private void OnDeviceConnected(int index, bool connected)
	{
	}

	[Token(Token = "0x6000F81")]
	[Address(RVA = "0x96F1A4", Offset = "0x96F1A4", VA = "0x96F1A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F82")]
	[Address(RVA = "0x96F26C", Offset = "0x96F26C", VA = "0x96F26C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F83")]
	[Address(RVA = "0x96EDA4", Offset = "0x96EDA4", VA = "0x96EDA4")]
	private void PrintControllerStatus(int index)
	{
	}

	[Token(Token = "0x6000F84")]
	[Address(RVA = "0x96F334", Offset = "0x96F334", VA = "0x96F334")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F85")]
	[Address(RVA = "0x96FBFC", Offset = "0x96FBFC", VA = "0x96FBFC")]
	public SteamVR_TestController()
	{
	}
}
[Token(Token = "0x2000219")]
public class SteamVR_TrackedCamera
{
	[Token(Token = "0x20004C0")]
	public class VideoStreamTexture
	{
		[Token(Token = "0x40020E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755FD4", Offset = "0x755FD4")]
		private bool <undistorted>k__BackingField;

		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755FE4", Offset = "0x755FE4")]
		private VRTextureBounds_t <frameBounds>k__BackingField;

		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D _texture;

		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int prevFrameCount;

		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint glTextureId;

		[Token(Token = "0x40020E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private VideoStream videostream;

		[Token(Token = "0x40020E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CameraVideoStreamFrameHeader_t header;

		[Token(Token = "0x170003A2")]
		public bool undistorted
		{
			[Token(Token = "0x60023BB")]
			[Address(RVA = "0x970C38", Offset = "0x970C38", VA = "0x970C38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AB50", Offset = "0x75AB50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60023BC")]
			[Address(RVA = "0x970C40", Offset = "0x970C40", VA = "0x970C40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AB60", Offset = "0x75AB60")]
			private set
			{
			}
		}

		[Token(Token = "0x170003A3")]
		public uint deviceIndex
		{
			[Token(Token = "0x60023BD")]
			[Address(RVA = "0x970C4C", Offset = "0x970C4C", VA = "0x970C4C")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170003A4")]
		public bool hasCamera
		{
			[Token(Token = "0x60023BE")]
			[Address(RVA = "0x970130", Offset = "0x970130", VA = "0x970130")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A5")]
		public bool hasTracking
		{
			[Token(Token = "0x60023BF")]
			[Address(RVA = "0x970568", Offset = "0x970568", VA = "0x970568")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A6")]
		public uint frameId
		{
			[Token(Token = "0x60023C0")]
			[Address(RVA = "0x970FD4", Offset = "0x970FD4", VA = "0x970FD4")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170003A7")]
		public VRTextureBounds_t frameBounds
		{
			[Token(Token = "0x60023C1")]
			[Address(RVA = "0x970FF8", Offset = "0x970FF8", VA = "0x970FF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AB70", Offset = "0x75AB70")]
			get
			{
				return default(VRTextureBounds_t);
			}
			[Token(Token = "0x60023C2")]
			[Address(RVA = "0x971004", Offset = "0x971004", VA = "0x971004")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AB80", Offset = "0x75AB80")]
			private set
			{
			}
		}

		[Token(Token = "0x170003A8")]
		public EVRTrackedCameraFrameType frameType
		{
			[Token(Token = "0x60023C3")]
			[Address(RVA = "0x971010", Offset = "0x971010", VA = "0x971010")]
			get
			{
				return default(EVRTrackedCameraFrameType);
			}
		}

		[Token(Token = "0x170003A9")]
		public Texture2D texture
		{
			[Token(Token = "0x60023C4")]
			[Address(RVA = "0x970544", Offset = "0x970544", VA = "0x970544")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003AA")]
		public SteamVR_Utils.RigidTransform transform
		{
			[Token(Token = "0x60023C5")]
			[Address(RVA = "0x97058C", Offset = "0x97058C", VA = "0x97058C")]
			get
			{
				return default(SteamVR_Utils.RigidTransform);
			}
		}

		[Token(Token = "0x170003AB")]
		public Vector3 velocity
		{
			[Token(Token = "0x60023C6")]
			[Address(RVA = "0x971018", Offset = "0x971018", VA = "0x971018")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170003AC")]
		public Vector3 angularVelocity
		{
			[Token(Token = "0x60023C7")]
			[Address(RVA = "0x971068", Offset = "0x971068", VA = "0x971068")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60023BA")]
		[Address(RVA = "0x97074C", Offset = "0x97074C", VA = "0x97074C")]
		public VideoStreamTexture(uint deviceIndex, bool undistorted)
		{
		}

		[Token(Token = "0x60023C8")]
		[Address(RVA = "0x9710BC", Offset = "0x9710BC", VA = "0x9710BC")]
		public TrackedDevicePose_t GetPose()
		{
			return default(TrackedDevicePose_t);
		}

		[Token(Token = "0x60023C9")]
		[Address(RVA = "0x970118", Offset = "0x970118", VA = "0x970118")]
		public ulong Acquire()
		{
			return default(ulong);
		}

		[Token(Token = "0x60023CA")]
		[Address(RVA = "0x9701A4", Offset = "0x9701A4", VA = "0x9701A4")]
		public ulong Release()
		{
			return default(ulong);
		}

		[Token(Token = "0x60023CB")]
		[Address(RVA = "0x970C6C", Offset = "0x970C6C", VA = "0x970C6C")]
		private void Update()
		{
		}
	}

	[Token(Token = "0x20004C1")]
	private class VideoStream
	{
		[Token(Token = "0x40020EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755FF4", Offset = "0x755FF4")]
		private uint <deviceIndex>k__BackingField;

		[Token(Token = "0x40020EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong _handle;

		[Token(Token = "0x40020EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _hasCamera;

		[Token(Token = "0x40020ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ulong refCount;

		[Token(Token = "0x170003AD")]
		public uint deviceIndex
		{
			[Token(Token = "0x60023CD")]
			[Address(RVA = "0x970AD4", Offset = "0x970AD4", VA = "0x970AD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75AB90", Offset = "0x75AB90")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60023CE")]
			[Address(RVA = "0x970ADC", Offset = "0x970ADC", VA = "0x970ADC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75ABA0", Offset = "0x75ABA0")]
			private set
			{
			}
		}

		[Token(Token = "0x170003AE")]
		public ulong handle
		{
			[Token(Token = "0x60023CF")]
			[Address(RVA = "0x970AE4", Offset = "0x970AE4", VA = "0x970AE4")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x170003AF")]
		public bool hasCamera
		{
			[Token(Token = "0x60023D0")]
			[Address(RVA = "0x970AEC", Offset = "0x970AEC", VA = "0x970AEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60023CC")]
		[Address(RVA = "0x970A28", Offset = "0x970A28", VA = "0x970A28")]
		public VideoStream(uint deviceIndex)
		{
		}

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0x970AF4", Offset = "0x970AF4", VA = "0x970AF4")]
		public ulong Acquire()
		{
			return default(ulong);
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0x970B94", Offset = "0x970B94", VA = "0x970B94")]
		public ulong Release()
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x4000F47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VideoStreamTexture[] distorted;

	[Token(Token = "0x4000F48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static VideoStreamTexture[] undistorted;

	[Token(Token = "0x4000F49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static VideoStream[] videostreams;

	[Token(Token = "0x6000F86")]
	[Address(RVA = "0x9705F8", Offset = "0x9705F8", VA = "0x9705F8")]
	public static VideoStreamTexture Distorted(int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x6000F87")]
	[Address(RVA = "0x97079C", Offset = "0x97079C", VA = "0x97079C")]
	public static VideoStreamTexture Undistorted(int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x6000F88")]
	[Address(RVA = "0x970104", Offset = "0x970104", VA = "0x970104")]
	public static VideoStreamTexture Source(bool undistorted, int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x6000F89")]
	[Address(RVA = "0x9708F0", Offset = "0x9708F0", VA = "0x9708F0")]
	private static VideoStream Stream(uint deviceIndex)
	{
		return null;
	}

	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0x970ACC", Offset = "0x970ACC", VA = "0x970ACC")]
	public SteamVR_TrackedCamera()
	{
	}
}
[Token(Token = "0x200021A")]
public class SteamVR_TrackedObject : MonoBehaviour
{
	[Token(Token = "0x20004C2")]
	public enum EIndex
	{
		[Token(Token = "0x40020EF")]
		None = -1,
		[Token(Token = "0x40020F0")]
		Hmd,
		[Token(Token = "0x40020F1")]
		Device1,
		[Token(Token = "0x40020F2")]
		Device2,
		[Token(Token = "0x40020F3")]
		Device3,
		[Token(Token = "0x40020F4")]
		Device4,
		[Token(Token = "0x40020F5")]
		Device5,
		[Token(Token = "0x40020F6")]
		Device6,
		[Token(Token = "0x40020F7")]
		Device7,
		[Token(Token = "0x40020F8")]
		Device8,
		[Token(Token = "0x40020F9")]
		Device9,
		[Token(Token = "0x40020FA")]
		Device10,
		[Token(Token = "0x40020FB")]
		Device11,
		[Token(Token = "0x40020FC")]
		Device12,
		[Token(Token = "0x40020FD")]
		Device13,
		[Token(Token = "0x40020FE")]
		Device14,
		[Token(Token = "0x40020FF")]
		Device15
	}

	[Token(Token = "0x4000F4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EIndex index;

	[Token(Token = "0x4000F4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750E0C", Offset = "0x750E0C")]
	public Transform origin;

	[Token(Token = "0x4000F4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750E44", Offset = "0x750E44")]
	private bool <isValid>k__BackingField;

	[Token(Token = "0x4000F4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SteamVR_Events.Action newPosesAction;

	[Token(Token = "0x17000146")]
	public bool isValid
	{
		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x972494", Offset = "0x972494", VA = "0x972494")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757DAC", Offset = "0x757DAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x97249C", Offset = "0x97249C", VA = "0x97249C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757DBC", Offset = "0x757DBC")]
		private set
		{
		}
	}

	[Token(Token = "0x6000F8D")]
	[Address(RVA = "0x9724A8", Offset = "0x9724A8", VA = "0x9724A8")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0x972718", Offset = "0x972718", VA = "0x972718")]
	private SteamVR_TrackedObject()
	{
	}

	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0x9727C8", Offset = "0x9727C8", VA = "0x9727C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F90")]
	[Address(RVA = "0x972878", Offset = "0x972878", VA = "0x972878")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F91")]
	[Address(RVA = "0x9728B4", Offset = "0x9728B4", VA = "0x9728B4")]
	public void SetDeviceIndex(int index)
	{
	}
}
[Token(Token = "0x200021B")]
[ExecuteInEditMode]
public class SteamVR_UpdatePoses : MonoBehaviour
{
	[Token(Token = "0x6000F92")]
	[Address(RVA = "0x97299C", Offset = "0x97299C", VA = "0x97299C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F93")]
	[Address(RVA = "0x972A38", Offset = "0x972A38", VA = "0x972A38")]
	public SteamVR_UpdatePoses()
	{
	}
}
[Token(Token = "0x200021C")]
public static class SteamVR_Utils
{
	[Serializable]
	[Token(Token = "0x20004C3")]
	public struct RigidTransform
	{
		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 pos;

		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion rot;

		[Token(Token = "0x170003B0")]
		public static RigidTransform identity
		{
			[Token(Token = "0x60023D3")]
			[Address(RVA = "0x9737B4", Offset = "0x9737B4", VA = "0x9737B4")]
			get
			{
				return default(RigidTransform);
			}
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0x973884", Offset = "0x973884", VA = "0x973884")]
		public static RigidTransform FromLocal(Transform t)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0x63DD74", Offset = "0x63DD74", VA = "0x63DD74")]
		public RigidTransform(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0x63DD88", Offset = "0x63DD88", VA = "0x63DD88")]
		public RigidTransform(Transform t)
		{
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0x63DD90", Offset = "0x63DD90", VA = "0x63DD90")]
		public RigidTransform(Transform from, Transform to)
		{
		}

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0x63DD98", Offset = "0x63DD98", VA = "0x63DD98")]
		public RigidTransform(HmdMatrix34_t pose)
		{
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0x63DDD4", Offset = "0x63DDD4", VA = "0x63DDD4")]
		public RigidTransform(HmdMatrix44_t pose)
		{
		}

		[Token(Token = "0x60023DA")]
		[Address(RVA = "0x63DE18", Offset = "0x63DE18", VA = "0x63DE18")]
		public HmdMatrix44_t ToHmdMatrix44()
		{
			return default(HmdMatrix44_t);
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0x63DE20", Offset = "0x63DE20", VA = "0x63DE20")]
		public HmdMatrix34_t ToHmdMatrix34()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0x63DE28", Offset = "0x63DE28", VA = "0x63DE28", Slot = "0")]
		public override bool Equals(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0x63DE30", Offset = "0x63DE30", VA = "0x63DE30", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0x974000", Offset = "0x974000", VA = "0x974000")]
		public static bool operator ==(RigidTransform a, RigidTransform b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0x974138", Offset = "0x974138", VA = "0x974138")]
		public static bool operator !=(RigidTransform a, RigidTransform b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0x974270", Offset = "0x974270", VA = "0x974270")]
		public static RigidTransform operator *(RigidTransform a, RigidTransform b)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0x63DE6C", Offset = "0x63DE6C", VA = "0x63DE6C")]
		public void Inverse()
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0x63DE74", Offset = "0x63DE74", VA = "0x63DE74")]
		public RigidTransform GetInverse()
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x60023E3")]
		[Address(RVA = "0x63DE7C", Offset = "0x63DE7C", VA = "0x63DE7C")]
		public void Multiply(RigidTransform a, RigidTransform b)
		{
		}

		[Token(Token = "0x60023E4")]
		[Address(RVA = "0x63DEC4", Offset = "0x63DEC4", VA = "0x63DEC4")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60023E5")]
		[Address(RVA = "0x63DECC", Offset = "0x63DECC", VA = "0x63DECC")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60023E6")]
		[Address(RVA = "0x97489C", Offset = "0x97489C", VA = "0x97489C")]
		public static Vector3 operator *(RigidTransform t, Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60023E7")]
		[Address(RVA = "0x9748A0", Offset = "0x9748A0", VA = "0x9748A0")]
		public static RigidTransform Interpolate(RigidTransform a, RigidTransform b, float t)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x60023E8")]
		[Address(RVA = "0x63DED4", Offset = "0x63DED4", VA = "0x63DED4")]
		public void Interpolate(RigidTransform to, float t)
		{
		}
	}

	[Token(Token = "0x20004C4")]
	public delegate object SystemFn(CVRSystem system, params object[] args);

	[Token(Token = "0x6000F94")]
	[Address(RVA = "0x972A40", Offset = "0x972A40", VA = "0x972A40")]
	public static Quaternion Slerp(Quaternion A, Quaternion B, float t)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000F95")]
	[Address(RVA = "0x972C0C", Offset = "0x972C0C", VA = "0x972C0C")]
	public static Vector3 Lerp(Vector3 A, Vector3 B, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F96")]
	[Address(RVA = "0x972C64", Offset = "0x972C64", VA = "0x972C64")]
	public static float Lerp(float A, float B, float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000F97")]
	[Address(RVA = "0x972C74", Offset = "0x972C74", VA = "0x972C74")]
	public static double Lerp(double A, double B, double t)
	{
		return default(double);
	}

	[Token(Token = "0x6000F98")]
	[Address(RVA = "0x972C84", Offset = "0x972C84", VA = "0x972C84")]
	public static float InverseLerp(Vector3 A, Vector3 B, Vector3 result)
	{
		return default(float);
	}

	[Token(Token = "0x6000F99")]
	[Address(RVA = "0x972D88", Offset = "0x972D88", VA = "0x972D88")]
	public static float InverseLerp(float A, float B, float result)
	{
		return default(float);
	}

	[Token(Token = "0x6000F9A")]
	[Address(RVA = "0x972D98", Offset = "0x972D98", VA = "0x972D98")]
	public static double InverseLerp(double A, double B, double result)
	{
		return default(double);
	}

	[Token(Token = "0x6000F9B")]
	[Address(RVA = "0x972DA8", Offset = "0x972DA8", VA = "0x972DA8")]
	public static float Saturate(float A)
	{
		return default(float);
	}

	[Token(Token = "0x6000F9C")]
	[Address(RVA = "0x972DC4", Offset = "0x972DC4", VA = "0x972DC4")]
	public static Vector2 Saturate(Vector2 A)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000F9D")]
	[Address(RVA = "0x972E10", Offset = "0x972E10", VA = "0x972E10")]
	public static float Abs(float A)
	{
		return default(float);
	}

	[Token(Token = "0x6000F9E")]
	[Address(RVA = "0x972E20", Offset = "0x972E20", VA = "0x972E20")]
	public static Vector2 Abs(Vector2 A)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000F9F")]
	[Address(RVA = "0x972E64", Offset = "0x972E64", VA = "0x972E64")]
	private static float _copysign(float sizeval, float signval)
	{
		return default(float);
	}

	[Token(Token = "0x6000FA0")]
	[Address(RVA = "0x972F20", Offset = "0x972F20", VA = "0x972F20")]
	public static Quaternion GetRotation(this Matrix4x4 matrix)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0x9730EC", Offset = "0x9730EC", VA = "0x9730EC")]
	public static Vector3 GetPosition(this Matrix4x4 matrix)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0x973128", Offset = "0x973128", VA = "0x973128")]
	public static Vector3 GetScale(this Matrix4x4 m)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0x973260", Offset = "0x973260", VA = "0x973260")]
	public static object CallSystemFn(SystemFn fn, params object[] args)
	{
		return null;
	}

	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0x968488", Offset = "0x968488", VA = "0x968488")]
	public static void TakeStereoScreenshot(uint screenshotHandle, GameObject target, int cellSize, float ipd, ref string previewFilename, ref string VRFilename)
	{
	}
}
[Token(Token = "0x200021D")]
public enum AkAudioAPI
{
	[Token(Token = "0x4000F4F")]
	AkAudioAPI_AAudio = 1,
	[Token(Token = "0x4000F50")]
	AkAudioAPI_OpenSL_ES,
	[Token(Token = "0x4000F51")]
	AkAudioAPI_Default
}
[Token(Token = "0x200021E")]
public class AkCommunicationSettings : IDisposable
{
	[Token(Token = "0x4000F52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000F53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000147")]
	public uint uPoolSize
	{
		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xA5F61C", Offset = "0xA5F61C", VA = "0xA5F61C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xA5E838", Offset = "0xA5E838", VA = "0xA5E838")]
		set
		{
		}
	}

	[Token(Token = "0x17000148")]
	public ushort uDiscoveryBroadcastPort
	{
		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xA5F688", Offset = "0xA5F688", VA = "0xA5F688")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xA5E8B4", Offset = "0xA5E8B4", VA = "0xA5E8B4")]
		set
		{
		}
	}

	[Token(Token = "0x17000149")]
	public ushort uCommandPort
	{
		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xA5F6F4", Offset = "0xA5F6F4", VA = "0xA5F6F4")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xA5E930", Offset = "0xA5E930", VA = "0xA5E930")]
		set
		{
		}
	}

	[Token(Token = "0x1700014A")]
	public ushort uNotificationPort
	{
		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xA5F760", Offset = "0xA5F760", VA = "0xA5F760")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xA5E9AC", Offset = "0xA5E9AC", VA = "0xA5E9AC")]
		set
		{
		}
	}

	[Token(Token = "0x1700014B")]
	public bool bInitSystemLib
	{
		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xA5F7CC", Offset = "0xA5F7CC", VA = "0xA5F7CC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xA5EA28", Offset = "0xA5EA28", VA = "0xA5EA28")]
		set
		{
		}
	}

	[Token(Token = "0x1700014C")]
	public string szAppNetworkName
	{
		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xA5F838", Offset = "0xA5F838", VA = "0xA5F838")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xA5EAA4", Offset = "0xA5EAA4", VA = "0xA5EAA4")]
		set
		{
		}
	}

	[Token(Token = "0x6000FA5")]
	[Address(RVA = "0xA5F3A4", Offset = "0xA5F3A4", VA = "0xA5F3A4")]
	internal AkCommunicationSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6000FA6")]
	[Address(RVA = "0xA5F3E4", Offset = "0xA5F3E4", VA = "0xA5F3E4")]
	internal static IntPtr getCPtr(AkCommunicationSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000FA7")]
	[Address(RVA = "0xA5F434", Offset = "0xA5F434", VA = "0xA5F434", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6000FA8")]
	[Address(RVA = "0xA5F468", Offset = "0xA5F468", VA = "0xA5F468", Slot = "1")]
	~AkCommunicationSettings()
	{
	}

	[Token(Token = "0x6000FA9")]
	[Address(RVA = "0xA5F4DC", Offset = "0xA5F4DC", VA = "0xA5F4DC", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6000FAA")]
	[Address(RVA = "0xA597C4", Offset = "0xA597C4", VA = "0xA597C4")]
	public AkCommunicationSettings()
	{
	}
}
[Token(Token = "0x200021F")]
public enum AkMemPoolAttributes
{
	[Token(Token = "0x4000F55")]
	AkNoAlloc = 0,
	[Token(Token = "0x4000F56")]
	AkMalloc = 1,
	[Token(Token = "0x4000F57")]
	AkAllocMask = 1,
	[Token(Token = "0x4000F58")]
	AkFixedSizeBlocksMode = 8,
	[Token(Token = "0x4000F59")]
	AkBlockMgmtMask = 8
}
[Token(Token = "0x2000220")]
public class AkPlatformInitSettings : IDisposable
{
	[Token(Token = "0x4000F5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000F5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700014D")]
	public AkThreadProperties threadLEngine
	{
		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x99DF04", Offset = "0x99DF04", VA = "0x99DF04")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x99DE74", Offset = "0x99DE74", VA = "0x99DE74")]
		set
		{
		}
	}

	[Token(Token = "0x1700014E")]
	public AkThreadProperties threadOutputMgr
	{
		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x99E044", Offset = "0x99E044", VA = "0x99E044")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x99DFB4", Offset = "0x99DFB4", VA = "0x99DFB4")]
		set
		{
		}
	}

	[Token(Token = "0x1700014F")]
	public AkThreadProperties threadBankManager
	{
		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x99E184", Offset = "0x99E184", VA = "0x99E184")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x99E0F4", Offset = "0x99E0F4", VA = "0x99E0F4")]
		set
		{
		}
	}

	[Token(Token = "0x17000150")]
	public AkThreadProperties threadMonitor
	{
		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x99E2C4", Offset = "0x99E2C4", VA = "0x99E2C4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x99E234", Offset = "0x99E234", VA = "0x99E234")]
		set
		{
		}
	}

	[Token(Token = "0x17000151")]
	public float fLEngineDefaultPoolRatioThreshold
	{
		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x99E3F0", Offset = "0x99E3F0", VA = "0x99E3F0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x99E374", Offset = "0x99E374", VA = "0x99E374")]
		set
		{
		}
	}

	[Token(Token = "0x17000152")]
	public uint uLEngineDefaultPoolSize
	{
		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x99E4D8", Offset = "0x99E4D8", VA = "0x99E4D8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x99E45C", Offset = "0x99E45C", VA = "0x99E45C")]
		set
		{
		}
	}

	[Token(Token = "0x17000153")]
	public AkAudioAPI eAudioAPI
	{
		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x99E5C0", Offset = "0x99E5C0", VA = "0x99E5C0")]
		get
		{
			return default(AkAudioAPI);
		}
		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x99E544", Offset = "0x99E544", VA = "0x99E544")]
		set
		{
		}
	}

	[Token(Token = "0x17000154")]
	public uint uSampleRate
	{
		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x99E6A8", Offset = "0x99E6A8", VA = "0x99E6A8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x99E62C", Offset = "0x99E62C", VA = "0x99E62C")]
		set
		{
		}
	}

	[Token(Token = "0x17000155")]
	public ushort uNumRefillsInVoice
	{
		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x99E790", Offset = "0x99E790", VA = "0x99E790")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x99E714", Offset = "0x99E714", VA = "0x99E714")]
		set
		{
		}
	}

	[Token(Token = "0x17000156")]
	public uint uChannelMask
	{
		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x99E878", Offset = "0x99E878", VA = "0x99E878")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x99E7FC", Offset = "0x99E7FC", VA = "0x99E7FC")]
		set
		{
		}
	}

	[Token(Token = "0x17000157")]
	public bool bRoundFrameSizeToHWSize
	{
		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x99E960", Offset = "0x99E960", VA = "0x99E960")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x99E8E4", Offset = "0x99E8E4", VA = "0x99E8E4")]
		set
		{
		}
	}

	[Token(Token = "0x6000FB7")]
	[Address(RVA = "0x991CD0", Offset = "0x991CD0", VA = "0x991CD0")]
	internal AkPlatformInitSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6000FB8")]
	[Address(RVA = "0x991BD0", Offset = "0x991BD0", VA = "0x991BD0")]
	internal static IntPtr getCPtr(AkPlatformInitSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0x99DC8C", Offset = "0x99DC8C", VA = "0x99DC8C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0x99DCC0", Offset = "0x99DCC0", VA = "0x99DCC0", Slot = "1")]
	~AkPlatformInitSettings()
	{
	}

	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0x99DD34", Offset = "0x99DD34", VA = "0x99DD34", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6000FD2")]
	[Address(RVA = "0x99E9CC", Offset = "0x99E9CC", VA = "0x99E9CC")]
	public AkPlatformInitSettings()
	{
	}
}
[Token(Token = "0x2000221")]
public class AkSoundEngine
{
	[Token(Token = "0x20004C5")]
	public delegate ulong GameObjectHashFunction(GameObject gameObject);

	[Token(Token = "0x20004C6")]
	private class AutoObject
	{
		[Token(Token = "0x4002102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameObject gameObject;

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0xFAA680", Offset = "0xFAA680", VA = "0xFAA680")]
		public AutoObject(GameObject go)
		{
		}

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0xFAA780", Offset = "0xFAA780", VA = "0xFAA780", Slot = "1")]
		~AutoObject()
		{
		}
	}

	[Token(Token = "0x4000F5C")]
	public const int AK_SIMD_ALIGNMENT = 16;

	[Token(Token = "0x4000F5D")]
	public const int AK_BUFFER_ALIGNMENT = 16;

	[Token(Token = "0x4000F5E")]
	public const int AK_MAX_PATH = 260;

	[Token(Token = "0x4000F5F")]
	public const int AK_BANK_PLATFORM_DATA_ALIGNMENT = 16;

	[Token(Token = "0x4000F60")]
	public const uint AK_INVALID_PLUGINID = uint.MaxValue;

	[Token(Token = "0x4000F61")]
	public const ulong AK_INVALID_GAME_OBJECT = ulong.MaxValue;

	[Token(Token = "0x4000F62")]
	public const uint AK_INVALID_UNIQUE_ID = 0u;

	[Token(Token = "0x4000F63")]
	public const uint AK_INVALID_RTPC_ID = 0u;

	[Token(Token = "0x4000F64")]
	public const uint AK_INVALID_LISTENER_INDEX = uint.MaxValue;

	[Token(Token = "0x4000F65")]
	public const uint AK_INVALID_PLAYING_ID = 0u;

	[Token(Token = "0x4000F66")]
	public const uint AK_DEFAULT_SWITCH_STATE = 0u;

	[Token(Token = "0x4000F67")]
	public const int AK_INVALID_POOL_ID = -1;

	[Token(Token = "0x4000F68")]
	public const int AK_DEFAULT_POOL_ID = -1;

	[Token(Token = "0x4000F69")]
	public const uint AK_INVALID_AUX_ID = 0u;

	[Token(Token = "0x4000F6A")]
	public const uint AK_INVALID_FILE_ID = uint.MaxValue;

	[Token(Token = "0x4000F6B")]
	public const uint AK_INVALID_DEVICE_ID = uint.MaxValue;

	[Token(Token = "0x4000F6C")]
	public const uint AK_INVALID_BANK_ID = 0u;

	[Token(Token = "0x4000F6D")]
	public const uint AK_FALLBACK_ARGUMENTVALUE_ID = 0u;

	[Token(Token = "0x4000F6E")]
	public const uint AK_INVALID_CHANNELMASK = 0u;

	[Token(Token = "0x4000F6F")]
	public const uint AK_INVALID_OUTPUT_DEVICE_ID = 0u;

	[Token(Token = "0x4000F70")]
	public const uint AK_MIXER_FX_SLOT = uint.MaxValue;

	[Token(Token = "0x4000F71")]
	public const ulong AK_DEFAULT_LISTENER_OBJ = 0uL;

	[Token(Token = "0x4000F72")]
	public const uint AK_DEFAULT_PRIORITY = 50u;

	[Token(Token = "0x4000F73")]
	public const uint AK_MIN_PRIORITY = 0u;

	[Token(Token = "0x4000F74")]
	public const uint AK_MAX_PRIORITY = 100u;

	[Token(Token = "0x4000F75")]
	public const uint AK_DEFAULT_BANK_IO_PRIORITY = 50u;

	[Token(Token = "0x4000F76")]
	public const double AK_DEFAULT_BANK_THROUGHPUT = 1048.576;

	[Token(Token = "0x4000F77")]
	public const uint AKCOMPANYID_AUDIOKINETIC = 0u;

	[Token(Token = "0x4000F78")]
	public const uint AK_LISTENERS_MASK_ALL = uint.MaxValue;

	[Token(Token = "0x4000F79")]
	public const int NULL = 0;

	[Token(Token = "0x4000F7A")]
	public const int AKCURVEINTERPOLATION_NUM_STORAGE_BIT = 5;

	[Token(Token = "0x4000F7B")]
	public const int AK_MAX_LANGUAGE_NAME_SIZE = 32;

	[Token(Token = "0x4000F7C")]
	public const int AKCOMPANYID_PLUGINDEV_MIN = 64;

	[Token(Token = "0x4000F7D")]
	public const int AKCOMPANYID_PLUGINDEV_MAX = 255;

	[Token(Token = "0x4000F7E")]
	public const int AKCOMPANYID_AUDIOKINETIC_EXTERNAL = 1;

	[Token(Token = "0x4000F7F")]
	public const int AKCOMPANYID_MCDSP = 256;

	[Token(Token = "0x4000F80")]
	public const int AKCOMPANYID_WAVEARTS = 257;

	[Token(Token = "0x4000F81")]
	public const int AKCOMPANYID_PHONETICARTS = 258;

	[Token(Token = "0x4000F82")]
	public const int AKCOMPANYID_IZOTOPE = 259;

	[Token(Token = "0x4000F83")]
	public const int AKCOMPANYID_CRANKCASEAUDIO = 261;

	[Token(Token = "0x4000F84")]
	public const int AKCOMPANYID_IOSONO = 262;

	[Token(Token = "0x4000F85")]
	public const int AKCOMPANYID_AUROTECHNOLOGIES = 263;

	[Token(Token = "0x4000F86")]
	public const int AKCOMPANYID_DOLBY = 264;

	[Token(Token = "0x4000F87")]
	public const int AKCOMPANYID_TWOBIGEARS = 265;

	[Token(Token = "0x4000F88")]
	public const int AKCOMPANYID_OCULUS = 266;

	[Token(Token = "0x4000F89")]
	public const int AKCOMPANYID_BLUERIPPLESOUND = 267;

	[Token(Token = "0x4000F8A")]
	public const int AKCOMPANYID_ENZIEN = 268;

	[Token(Token = "0x4000F8B")]
	public const int AKCOMPANYID_KROTOS = 269;

	[Token(Token = "0x4000F8C")]
	public const int AKCOMPANYID_NURULIZE = 270;

	[Token(Token = "0x4000F8D")]
	public const int AKCOMPANYID_SUPERPOWERED = 271;

	[Token(Token = "0x4000F8E")]
	public const int AKCOMPANYID_GOOGLE = 272;

	[Token(Token = "0x4000F8F")]
	public const int AKCOMPANYID_VISISONICS = 277;

	[Token(Token = "0x4000F90")]
	public const int AKCODECID_BANK = 0;

	[Token(Token = "0x4000F91")]
	public const int AKCODECID_PCM = 1;

	[Token(Token = "0x4000F92")]
	public const int AKCODECID_ADPCM = 2;

	[Token(Token = "0x4000F93")]
	public const int AKCODECID_XMA = 3;

	[Token(Token = "0x4000F94")]
	public const int AKCODECID_VORBIS = 4;

	[Token(Token = "0x4000F95")]
	public const int AKCODECID_WIIADPCM = 5;

	[Token(Token = "0x4000F96")]
	public const int AKCODECID_PCMEX = 7;

	[Token(Token = "0x4000F97")]
	public const int AKCODECID_EXTERNAL_SOURCE = 8;

	[Token(Token = "0x4000F98")]
	public const int AKCODECID_XWMA = 9;

	[Token(Token = "0x4000F99")]
	public const int AKCODECID_AAC = 10;

	[Token(Token = "0x4000F9A")]
	public const int AKCODECID_FILE_PACKAGE = 11;

	[Token(Token = "0x4000F9B")]
	public const int AKCODECID_ATRAC9 = 12;

	[Token(Token = "0x4000F9C")]
	public const int AKCODECID_VAG = 13;

	[Token(Token = "0x4000F9D")]
	public const int AKCODECID_PROFILERCAPTURE = 14;

	[Token(Token = "0x4000F9E")]
	public const int AKCODECID_ANALYSISFILE = 15;

	[Token(Token = "0x4000F9F")]
	public const int AKCODECID_MIDI = 16;

	[Token(Token = "0x4000FA0")]
	public const int AKCODECID_OPUSNX = 17;

	[Token(Token = "0x4000FA1")]
	public const int AKCODECID_CAF = 18;

	[Token(Token = "0x4000FA2")]
	public const int AKCODECID_AKOPUS = 19;

	[Token(Token = "0x4000FA3")]
	public const int AKPLUGINID_METER = 129;

	[Token(Token = "0x4000FA4")]
	public const int AKPLUGINID_RECORDER = 132;

	[Token(Token = "0x4000FA5")]
	public const int AKEXTENSIONID_SPATIALAUDIO = 800;

	[Token(Token = "0x4000FA6")]
	public const int AKEXTENSIONID_INTERACTIVEMUSIC = 801;

	[Token(Token = "0x4000FA7")]
	public const int AKEXTENSIONID_EVENTMGRTHREAD = 900;

	[Token(Token = "0x4000FA8")]
	public const int AK_WAVE_FORMAT_VAG = 65531;

	[Token(Token = "0x4000FA9")]
	public const int AK_WAVE_FORMAT_AT9 = 65532;

	[Token(Token = "0x4000FAA")]
	public const int AK_WAVE_FORMAT_VORBIS = 65535;

	[Token(Token = "0x4000FAB")]
	public const int AK_WAVE_FORMAT_AAC = 43712;

	[Token(Token = "0x4000FAC")]
	public const int AK_WAVE_FORMAT_OPUSNX = 12345;

	[Token(Token = "0x4000FAD")]
	public const int AK_WAVE_FORMAT_OPUS = 12352;

	[Token(Token = "0x4000FAE")]
	public const int WAVE_FORMAT_XMA2 = 358;

	[Token(Token = "0x4000FAF")]
	public const int AK_PANNER_NUM_STORAGE_BITS = 3;

	[Token(Token = "0x4000FB0")]
	public const int AK_POSSOURCE_NUM_STORAGE_BITS = 3;

	[Token(Token = "0x4000FB1")]
	public const int AK_SPAT_NUM_STORAGE_BITS = 3;

	[Token(Token = "0x4000FB2")]
	public const int AK_MAX_BITS_METERING_FLAGS = 5;

	[Token(Token = "0x4000FB3")]
	public const int AK_OS_STRUCT_ALIGN = 4;

	[Token(Token = "0x4000FB4")]
	public const int AK_64B_OS_STRUCT_ALIGN = 8;

	[Token(Token = "0x4000FB5")]
	public const bool AK_ASYNC_OPEN_DEFAULT = false;

	[Token(Token = "0x4000FB6")]
	public const int AK_COMM_DEFAULT_DISCOVERY_PORT = 24024;

	[Token(Token = "0x4000FB7")]
	public const int AK_MIDI_EVENT_TYPE_INVALID = 0;

	[Token(Token = "0x4000FB8")]
	public const int AK_MIDI_EVENT_TYPE_NOTE_OFF = 128;

	[Token(Token = "0x4000FB9")]
	public const int AK_MIDI_EVENT_TYPE_NOTE_ON = 144;

	[Token(Token = "0x4000FBA")]
	public const int AK_MIDI_EVENT_TYPE_NOTE_AFTERTOUCH = 160;

	[Token(Token = "0x4000FBB")]
	public const int AK_MIDI_EVENT_TYPE_CONTROLLER = 176;

	[Token(Token = "0x4000FBC")]
	public const int AK_MIDI_EVENT_TYPE_PROGRAM_CHANGE = 192;

	[Token(Token = "0x4000FBD")]
	public const int AK_MIDI_EVENT_TYPE_CHANNEL_AFTERTOUCH = 208;

	[Token(Token = "0x4000FBE")]
	public const int AK_MIDI_EVENT_TYPE_PITCH_BEND = 224;

	[Token(Token = "0x4000FBF")]
	public const int AK_MIDI_EVENT_TYPE_SYSEX = 240;

	[Token(Token = "0x4000FC0")]
	public const int AK_MIDI_EVENT_TYPE_ESCAPE = 247;

	[Token(Token = "0x4000FC1")]
	public const int AK_MIDI_EVENT_TYPE_META = 255;

	[Token(Token = "0x4000FC2")]
	public const int AK_MIDI_CC_BANK_SELECT_COARSE = 0;

	[Token(Token = "0x4000FC3")]
	public const int AK_MIDI_CC_MOD_WHEEL_COARSE = 1;

	[Token(Token = "0x4000FC4")]
	public const int AK_MIDI_CC_BREATH_CTRL_COARSE = 2;

	[Token(Token = "0x4000FC5")]
	public const int AK_MIDI_CC_CTRL_3_COARSE = 3;

	[Token(Token = "0x4000FC6")]
	public const int AK_MIDI_CC_FOOT_PEDAL_COARSE = 4;

	[Token(Token = "0x4000FC7")]
	public const int AK_MIDI_CC_PORTAMENTO_COARSE = 5;

	[Token(Token = "0x4000FC8")]
	public const int AK_MIDI_CC_DATA_ENTRY_COARSE = 6;

	[Token(Token = "0x4000FC9")]
	public const int AK_MIDI_CC_VOLUME_COARSE = 7;

	[Token(Token = "0x4000FCA")]
	public const int AK_MIDI_CC_BALANCE_COARSE = 8;

	[Token(Token = "0x4000FCB")]
	public const int AK_MIDI_CC_CTRL_9_COARSE = 9;

	[Token(Token = "0x4000FCC")]
	public const int AK_MIDI_CC_PAN_POSITION_COARSE = 10;

	[Token(Token = "0x4000FCD")]
	public const int AK_MIDI_CC_EXPRESSION_COARSE = 11;

	[Token(Token = "0x4000FCE")]
	public const int AK_MIDI_CC_EFFECT_CTRL_1_COARSE = 12;

	[Token(Token = "0x4000FCF")]
	public const int AK_MIDI_CC_EFFECT_CTRL_2_COARSE = 13;

	[Token(Token = "0x4000FD0")]
	public const int AK_MIDI_CC_CTRL_14_COARSE = 14;

	[Token(Token = "0x4000FD1")]
	public const int AK_MIDI_CC_CTRL_15_COARSE = 15;

	[Token(Token = "0x4000FD2")]
	public const int AK_MIDI_CC_GEN_SLIDER_1 = 16;

	[Token(Token = "0x4000FD3")]
	public const int AK_MIDI_CC_GEN_SLIDER_2 = 17;

	[Token(Token = "0x4000FD4")]
	public const int AK_MIDI_CC_GEN_SLIDER_3 = 18;

	[Token(Token = "0x4000FD5")]
	public const int AK_MIDI_CC_GEN_SLIDER_4 = 19;

	[Token(Token = "0x4000FD6")]
	public const int AK_MIDI_CC_CTRL_20_COARSE = 20;

	[Token(Token = "0x4000FD7")]
	public const int AK_MIDI_CC_CTRL_21_COARSE = 21;

	[Token(Token = "0x4000FD8")]
	public const int AK_MIDI_CC_CTRL_22_COARSE = 22;

	[Token(Token = "0x4000FD9")]
	public const int AK_MIDI_CC_CTRL_23_COARSE = 23;

	[Token(Token = "0x4000FDA")]
	public const int AK_MIDI_CC_CTRL_24_COARSE = 24;

	[Token(Token = "0x4000FDB")]
	public const int AK_MIDI_CC_CTRL_25_COARSE = 25;

	[Token(Token = "0x4000FDC")]
	public const int AK_MIDI_CC_CTRL_26_COARSE = 26;

	[Token(Token = "0x4000FDD")]
	public const int AK_MIDI_CC_CTRL_27_COARSE = 27;

	[Token(Token = "0x4000FDE")]
	public const int AK_MIDI_CC_CTRL_28_COARSE = 28;

	[Token(Token = "0x4000FDF")]
	public const int AK_MIDI_CC_CTRL_29_COARSE = 29;

	[Token(Token = "0x4000FE0")]
	public const int AK_MIDI_CC_CTRL_30_COARSE = 30;

	[Token(Token = "0x4000FE1")]
	public const int AK_MIDI_CC_CTRL_31_COARSE = 31;

	[Token(Token = "0x4000FE2")]
	public const int AK_MIDI_CC_BANK_SELECT_FINE = 32;

	[Token(Token = "0x4000FE3")]
	public const int AK_MIDI_CC_MOD_WHEEL_FINE = 33;

	[Token(Token = "0x4000FE4")]
	public const int AK_MIDI_CC_BREATH_CTRL_FINE = 34;

	[Token(Token = "0x4000FE5")]
	public const int AK_MIDI_CC_CTRL_3_FINE = 35;

	[Token(Token = "0x4000FE6")]
	public const int AK_MIDI_CC_FOOT_PEDAL_FINE = 36;

	[Token(Token = "0x4000FE7")]
	public const int AK_MIDI_CC_PORTAMENTO_FINE = 37;

	[Token(Token = "0x4000FE8")]
	public const int AK_MIDI_CC_DATA_ENTRY_FINE = 38;

	[Token(Token = "0x4000FE9")]
	public const int AK_MIDI_CC_VOLUME_FINE = 39;

	[Token(Token = "0x4000FEA")]
	public const int AK_MIDI_CC_BALANCE_FINE = 40;

	[Token(Token = "0x4000FEB")]
	public const int AK_MIDI_CC_CTRL_9_FINE = 41;

	[Token(Token = "0x4000FEC")]
	public const int AK_MIDI_CC_PAN_POSITION_FINE = 42;

	[Token(Token = "0x4000FED")]
	public const int AK_MIDI_CC_EXPRESSION_FINE = 43;

	[Token(Token = "0x4000FEE")]
	public const int AK_MIDI_CC_EFFECT_CTRL_1_FINE = 44;

	[Token(Token = "0x4000FEF")]
	public const int AK_MIDI_CC_EFFECT_CTRL_2_FINE = 45;

	[Token(Token = "0x4000FF0")]
	public const int AK_MIDI_CC_CTRL_14_FINE = 46;

	[Token(Token = "0x4000FF1")]
	public const int AK_MIDI_CC_CTRL_15_FINE = 47;

	[Token(Token = "0x4000FF2")]
	public const int AK_MIDI_CC_CTRL_20_FINE = 52;

	[Token(Token = "0x4000FF3")]
	public const int AK_MIDI_CC_CTRL_21_FINE = 53;

	[Token(Token = "0x4000FF4")]
	public const int AK_MIDI_CC_CTRL_22_FINE = 54;

	[Token(Token = "0x4000FF5")]
	public const int AK_MIDI_CC_CTRL_23_FINE = 55;

	[Token(Token = "0x4000FF6")]
	public const int AK_MIDI_CC_CTRL_24_FINE = 56;

	[Token(Token = "0x4000FF7")]
	public const int AK_MIDI_CC_CTRL_25_FINE = 57;

	[Token(Token = "0x4000FF8")]
	public const int AK_MIDI_CC_CTRL_26_FINE = 58;

	[Token(Token = "0x4000FF9")]
	public const int AK_MIDI_CC_CTRL_27_FINE = 59;

	[Token(Token = "0x4000FFA")]
	public const int AK_MIDI_CC_CTRL_28_FINE = 60;

	[Token(Token = "0x4000FFB")]
	public const int AK_MIDI_CC_CTRL_29_FINE = 61;

	[Token(Token = "0x4000FFC")]
	public const int AK_MIDI_CC_CTRL_30_FINE = 62;

	[Token(Token = "0x4000FFD")]
	public const int AK_MIDI_CC_CTRL_31_FINE = 63;

	[Token(Token = "0x4000FFE")]
	public const int AK_MIDI_CC_HOLD_PEDAL = 64;

	[Token(Token = "0x4000FFF")]
	public const int AK_MIDI_CC_PORTAMENTO_ON_OFF = 65;

	[Token(Token = "0x4001000")]
	public const int AK_MIDI_CC_SUSTENUTO_PEDAL = 66;

	[Token(Token = "0x4001001")]
	public const int AK_MIDI_CC_SOFT_PEDAL = 67;

	[Token(Token = "0x4001002")]
	public const int AK_MIDI_CC_LEGATO_PEDAL = 68;

	[Token(Token = "0x4001003")]
	public const int AK_MIDI_CC_HOLD_PEDAL_2 = 69;

	[Token(Token = "0x4001004")]
	public const int AK_MIDI_CC_SOUND_VARIATION = 70;

	[Token(Token = "0x4001005")]
	public const int AK_MIDI_CC_SOUND_TIMBRE = 71;

	[Token(Token = "0x4001006")]
	public const int AK_MIDI_CC_SOUND_RELEASE_TIME = 72;

	[Token(Token = "0x4001007")]
	public const int AK_MIDI_CC_SOUND_ATTACK_TIME = 73;

	[Token(Token = "0x4001008")]
	public const int AK_MIDI_CC_SOUND_BRIGHTNESS = 74;

	[Token(Token = "0x4001009")]
	public const int AK_MIDI_CC_SOUND_CTRL_6 = 75;

	[Token(Token = "0x400100A")]
	public const int AK_MIDI_CC_SOUND_CTRL_7 = 76;

	[Token(Token = "0x400100B")]
	public const int AK_MIDI_CC_SOUND_CTRL_8 = 77;

	[Token(Token = "0x400100C")]
	public const int AK_MIDI_CC_SOUND_CTRL_9 = 78;

	[Token(Token = "0x400100D")]
	public const int AK_MIDI_CC_SOUND_CTRL_10 = 79;

	[Token(Token = "0x400100E")]
	public const int AK_MIDI_CC_GENERAL_BUTTON_1 = 80;

	[Token(Token = "0x400100F")]
	public const int AK_MIDI_CC_GENERAL_BUTTON_2 = 81;

	[Token(Token = "0x4001010")]
	public const int AK_MIDI_CC_GENERAL_BUTTON_3 = 82;

	[Token(Token = "0x4001011")]
	public const int AK_MIDI_CC_GENERAL_BUTTON_4 = 83;

	[Token(Token = "0x4001012")]
	public const int AK_MIDI_CC_REVERB_LEVEL = 91;

	[Token(Token = "0x4001013")]
	public const int AK_MIDI_CC_TREMOLO_LEVEL = 92;

	[Token(Token = "0x4001014")]
	public const int AK_MIDI_CC_CHORUS_LEVEL = 93;

	[Token(Token = "0x4001015")]
	public const int AK_MIDI_CC_CELESTE_LEVEL = 94;

	[Token(Token = "0x4001016")]
	public const int AK_MIDI_CC_PHASER_LEVEL = 95;

	[Token(Token = "0x4001017")]
	public const int AK_MIDI_CC_DATA_BUTTON_P1 = 96;

	[Token(Token = "0x4001018")]
	public const int AK_MIDI_CC_DATA_BUTTON_M1 = 97;

	[Token(Token = "0x4001019")]
	public const int AK_MIDI_CC_NON_REGISTER_COARSE = 98;

	[Token(Token = "0x400101A")]
	public const int AK_MIDI_CC_NON_REGISTER_FINE = 99;

	[Token(Token = "0x400101B")]
	public const int AK_MIDI_CC_ALL_SOUND_OFF = 120;

	[Token(Token = "0x400101C")]
	public const int AK_MIDI_CC_ALL_CONTROLLERS_OFF = 121;

	[Token(Token = "0x400101D")]
	public const int AK_MIDI_CC_LOCAL_KEYBOARD = 122;

	[Token(Token = "0x400101E")]
	public const int AK_MIDI_CC_ALL_NOTES_OFF = 123;

	[Token(Token = "0x400101F")]
	public const int AK_MIDI_CC_OMNI_MODE_OFF = 124;

	[Token(Token = "0x4001020")]
	public const int AK_MIDI_CC_OMNI_MODE_ON = 125;

	[Token(Token = "0x4001021")]
	public const int AK_MIDI_CC_OMNI_MONOPHONIC_ON = 126;

	[Token(Token = "0x4001022")]
	public const int AK_MIDI_CC_OMNI_POLYPHONIC_ON = 127;

	[Token(Token = "0x4001023")]
	public const int AK_SPEAKER_FRONT_LEFT = 1;

	[Token(Token = "0x4001024")]
	public const int AK_SPEAKER_FRONT_RIGHT = 2;

	[Token(Token = "0x4001025")]
	public const int AK_SPEAKER_FRONT_CENTER = 4;

	[Token(Token = "0x4001026")]
	public const int AK_SPEAKER_LOW_FREQUENCY = 8;

	[Token(Token = "0x4001027")]
	public const int AK_SPEAKER_BACK_LEFT = 16;

	[Token(Token = "0x4001028")]
	public const int AK_SPEAKER_BACK_RIGHT = 32;

	[Token(Token = "0x4001029")]
	public const int AK_SPEAKER_BACK_CENTER = 256;

	[Token(Token = "0x400102A")]
	public const int AK_SPEAKER_SIDE_LEFT = 512;

	[Token(Token = "0x400102B")]
	public const int AK_SPEAKER_SIDE_RIGHT = 1024;

	[Token(Token = "0x400102C")]
	public const int AK_SPEAKER_TOP = 2048;

	[Token(Token = "0x400102D")]
	public const int AK_SPEAKER_HEIGHT_FRONT_LEFT = 4096;

	[Token(Token = "0x400102E")]
	public const int AK_SPEAKER_HEIGHT_FRONT_CENTER = 8192;

	[Token(Token = "0x400102F")]
	public const int AK_SPEAKER_HEIGHT_FRONT_RIGHT = 16384;

	[Token(Token = "0x4001030")]
	public const int AK_SPEAKER_HEIGHT_BACK_LEFT = 32768;

	[Token(Token = "0x4001031")]
	public const int AK_SPEAKER_HEIGHT_BACK_CENTER = 65536;

	[Token(Token = "0x4001032")]
	public const int AK_SPEAKER_HEIGHT_BACK_RIGHT = 131072;

	[Token(Token = "0x4001033")]
	public const int AK_SPEAKER_SETUP_MONO = 4;

	[Token(Token = "0x4001034")]
	public const int AK_SPEAKER_SETUP_0POINT1 = 8;

	[Token(Token = "0x4001035")]
	public const int AK_SPEAKER_SETUP_1POINT1 = 12;

	[Token(Token = "0x4001036")]
	public const int AK_SPEAKER_SETUP_STEREO = 3;

	[Token(Token = "0x4001037")]
	public const int AK_SPEAKER_SETUP_2POINT1 = 11;

	[Token(Token = "0x4001038")]
	public const int AK_SPEAKER_SETUP_3STEREO = 7;

	[Token(Token = "0x4001039")]
	public const int AK_SPEAKER_SETUP_3POINT1 = 15;

	[Token(Token = "0x400103A")]
	public const int AK_SPEAKER_SETUP_4 = 1539;

	[Token(Token = "0x400103B")]
	public const int AK_SPEAKER_SETUP_4POINT1 = 1547;

	[Token(Token = "0x400103C")]
	public const int AK_SPEAKER_SETUP_5 = 1543;

	[Token(Token = "0x400103D")]
	public const int AK_SPEAKER_SETUP_5POINT1 = 1551;

	[Token(Token = "0x400103E")]
	public const int AK_SPEAKER_SETUP_6 = 1587;

	[Token(Token = "0x400103F")]
	public const int AK_SPEAKER_SETUP_6POINT1 = 1595;

	[Token(Token = "0x4001040")]
	public const int AK_SPEAKER_SETUP_7 = 1591;

	[Token(Token = "0x4001041")]
	public const int AK_SPEAKER_SETUP_7POINT1 = 1599;

	[Token(Token = "0x4001042")]
	public const int AK_SPEAKER_SETUP_SURROUND = 259;

	[Token(Token = "0x4001043")]
	public const int AK_SPEAKER_SETUP_DPL2 = 1539;

	[Token(Token = "0x4001044")]
	public const int AK_SPEAKER_SETUP_HEIGHT_4 = 184320;

	[Token(Token = "0x4001045")]
	public const int AK_SPEAKER_SETUP_HEIGHT_5 = 192512;

	[Token(Token = "0x4001046")]
	public const int AK_SPEAKER_SETUP_HEIGHT_ALL = 258048;

	[Token(Token = "0x4001047")]
	public const int AK_SPEAKER_SETUP_AURO_222 = 22019;

	[Token(Token = "0x4001048")]
	public const int AK_SPEAKER_SETUP_AURO_8 = 185859;

	[Token(Token = "0x4001049")]
	public const int AK_SPEAKER_SETUP_AURO_9 = 185863;

	[Token(Token = "0x400104A")]
	public const int AK_SPEAKER_SETUP_AURO_9POINT1 = 185871;

	[Token(Token = "0x400104B")]
	public const int AK_SPEAKER_SETUP_AURO_10 = 187911;

	[Token(Token = "0x400104C")]
	public const int AK_SPEAKER_SETUP_AURO_10POINT1 = 187919;

	[Token(Token = "0x400104D")]
	public const int AK_SPEAKER_SETUP_AURO_11 = 196103;

	[Token(Token = "0x400104E")]
	public const int AK_SPEAKER_SETUP_AURO_11POINT1 = 196111;

	[Token(Token = "0x400104F")]
	public const int AK_SPEAKER_SETUP_AURO_11_740 = 185911;

	[Token(Token = "0x4001050")]
	public const int AK_SPEAKER_SETUP_AURO_11POINT1_740 = 185919;

	[Token(Token = "0x4001051")]
	public const int AK_SPEAKER_SETUP_AURO_13_751 = 196151;

	[Token(Token = "0x4001052")]
	public const int AK_SPEAKER_SETUP_AURO_13POINT1_751 = 196159;

	[Token(Token = "0x4001053")]
	public const int AK_SPEAKER_SETUP_DOLBY_5_0_2 = 22023;

	[Token(Token = "0x4001054")]
	public const int AK_SPEAKER_SETUP_DOLBY_5_1_2 = 22031;

	[Token(Token = "0x4001055")]
	public const int AK_SPEAKER_SETUP_DOLBY_6_0_2 = 22067;

	[Token(Token = "0x4001056")]
	public const int AK_SPEAKER_SETUP_DOLBY_6_1_2 = 22075;

	[Token(Token = "0x4001057")]
	public const int AK_SPEAKER_SETUP_DOLBY_6_0_4 = 185907;

	[Token(Token = "0x4001058")]
	public const int AK_SPEAKER_SETUP_DOLBY_6_1_4 = 185915;

	[Token(Token = "0x4001059")]
	public const int AK_SPEAKER_SETUP_DOLBY_7_0_2 = 22071;

	[Token(Token = "0x400105A")]
	public const int AK_SPEAKER_SETUP_DOLBY_7_1_2 = 22079;

	[Token(Token = "0x400105B")]
	public const int AK_SPEAKER_SETUP_DOLBY_7_0_4 = 185911;

	[Token(Token = "0x400105C")]
	public const int AK_SPEAKER_SETUP_DOLBY_7_1_4 = 185919;

	[Token(Token = "0x400105D")]
	public const int AK_SPEAKER_SETUP_ALL_SPEAKERS = 261951;

	[Token(Token = "0x400105E")]
	public const int AK_IDX_SETUP_FRONT_LEFT = 0;

	[Token(Token = "0x400105F")]
	public const int AK_IDX_SETUP_FRONT_RIGHT = 1;

	[Token(Token = "0x4001060")]
	public const int AK_IDX_SETUP_CENTER = 2;

	[Token(Token = "0x4001061")]
	public const int AK_IDX_SETUP_NOCENTER_BACK_LEFT = 2;

	[Token(Token = "0x4001062")]
	public const int AK_IDX_SETUP_NOCENTER_BACK_RIGHT = 3;

	[Token(Token = "0x4001063")]
	public const int AK_IDX_SETUP_NOCENTER_SIDE_LEFT = 4;

	[Token(Token = "0x4001064")]
	public const int AK_IDX_SETUP_NOCENTER_SIDE_RIGHT = 5;

	[Token(Token = "0x4001065")]
	public const int AK_IDX_SETUP_WITHCENTER_BACK_LEFT = 3;

	[Token(Token = "0x4001066")]
	public const int AK_IDX_SETUP_WITHCENTER_BACK_RIGHT = 4;

	[Token(Token = "0x4001067")]
	public const int AK_IDX_SETUP_WITHCENTER_SIDE_LEFT = 5;

	[Token(Token = "0x4001068")]
	public const int AK_IDX_SETUP_WITHCENTER_SIDE_RIGHT = 6;

	[Token(Token = "0x4001069")]
	public const int AK_IDX_SETUP_0_LFE = 0;

	[Token(Token = "0x400106A")]
	public const int AK_IDX_SETUP_1_CENTER = 0;

	[Token(Token = "0x400106B")]
	public const int AK_IDX_SETUP_1_LFE = 1;

	[Token(Token = "0x400106C")]
	public const int AK_IDX_SETUP_2_LEFT = 0;

	[Token(Token = "0x400106D")]
	public const int AK_IDX_SETUP_2_RIGHT = 1;

	[Token(Token = "0x400106E")]
	public const int AK_IDX_SETUP_2_LFE = 2;

	[Token(Token = "0x400106F")]
	public const int AK_IDX_SETUP_3_LEFT = 0;

	[Token(Token = "0x4001070")]
	public const int AK_IDX_SETUP_3_RIGHT = 1;

	[Token(Token = "0x4001071")]
	public const int AK_IDX_SETUP_3_CENTER = 2;

	[Token(Token = "0x4001072")]
	public const int AK_IDX_SETUP_3_LFE = 3;

	[Token(Token = "0x4001073")]
	public const int AK_IDX_SETUP_4_FRONTLEFT = 0;

	[Token(Token = "0x4001074")]
	public const int AK_IDX_SETUP_4_FRONTRIGHT = 1;

	[Token(Token = "0x4001075")]
	public const int AK_IDX_SETUP_4_REARLEFT = 2;

	[Token(Token = "0x4001076")]
	public const int AK_IDX_SETUP_4_REARRIGHT = 3;

	[Token(Token = "0x4001077")]
	public const int AK_IDX_SETUP_4_LFE = 4;

	[Token(Token = "0x4001078")]
	public const int AK_IDX_SETUP_5_FRONTLEFT = 0;

	[Token(Token = "0x4001079")]
	public const int AK_IDX_SETUP_5_FRONTRIGHT = 1;

	[Token(Token = "0x400107A")]
	public const int AK_IDX_SETUP_5_CENTER = 2;

	[Token(Token = "0x400107B")]
	public const int AK_IDX_SETUP_5_REARLEFT = 3;

	[Token(Token = "0x400107C")]
	public const int AK_IDX_SETUP_5_REARRIGHT = 4;

	[Token(Token = "0x400107D")]
	public const int AK_IDX_SETUP_5_LFE = 5;

	[Token(Token = "0x400107E")]
	public const int AK_IDX_SETUP_6_FRONTLEFT = 0;

	[Token(Token = "0x400107F")]
	public const int AK_IDX_SETUP_6_FRONTRIGHT = 1;

	[Token(Token = "0x4001080")]
	public const int AK_IDX_SETUP_6_REARLEFT = 2;

	[Token(Token = "0x4001081")]
	public const int AK_IDX_SETUP_6_REARRIGHT = 3;

	[Token(Token = "0x4001082")]
	public const int AK_IDX_SETUP_6_SIDELEFT = 4;

	[Token(Token = "0x4001083")]
	public const int AK_IDX_SETUP_6_SIDERIGHT = 5;

	[Token(Token = "0x4001084")]
	public const int AK_IDX_SETUP_6_LFE = 6;

	[Token(Token = "0x4001085")]
	public const int AK_IDX_SETUP_7_FRONTLEFT = 0;

	[Token(Token = "0x4001086")]
	public const int AK_IDX_SETUP_7_FRONTRIGHT = 1;

	[Token(Token = "0x4001087")]
	public const int AK_IDX_SETUP_7_CENTER = 2;

	[Token(Token = "0x4001088")]
	public const int AK_IDX_SETUP_7_REARLEFT = 3;

	[Token(Token = "0x4001089")]
	public const int AK_IDX_SETUP_7_REARRIGHT = 4;

	[Token(Token = "0x400108A")]
	public const int AK_IDX_SETUP_7_SIDELEFT = 5;

	[Token(Token = "0x400108B")]
	public const int AK_IDX_SETUP_7_SIDERIGHT = 6;

	[Token(Token = "0x400108C")]
	public const int AK_IDX_SETUP_7_LFE = 7;

	[Token(Token = "0x400108D")]
	public const int AK_SPEAKER_SETUP_0_1 = 8;

	[Token(Token = "0x400108E")]
	public const int AK_SPEAKER_SETUP_1_0_CENTER = 4;

	[Token(Token = "0x400108F")]
	public const int AK_SPEAKER_SETUP_1_1_CENTER = 12;

	[Token(Token = "0x4001090")]
	public const int AK_SPEAKER_SETUP_2_0 = 3;

	[Token(Token = "0x4001091")]
	public const int AK_SPEAKER_SETUP_2_1 = 11;

	[Token(Token = "0x4001092")]
	public const int AK_SPEAKER_SETUP_3_0 = 7;

	[Token(Token = "0x4001093")]
	public const int AK_SPEAKER_SETUP_3_1 = 15;

	[Token(Token = "0x4001094")]
	public const int AK_SPEAKER_SETUP_FRONT = 7;

	[Token(Token = "0x4001095")]
	public const int AK_SPEAKER_SETUP_4_0 = 1539;

	[Token(Token = "0x4001096")]
	public const int AK_SPEAKER_SETUP_4_1 = 1547;

	[Token(Token = "0x4001097")]
	public const int AK_SPEAKER_SETUP_5_0 = 1543;

	[Token(Token = "0x4001098")]
	public const int AK_SPEAKER_SETUP_5_1 = 1551;

	[Token(Token = "0x4001099")]
	public const int AK_SPEAKER_SETUP_6_0 = 1587;

	[Token(Token = "0x400109A")]
	public const int AK_SPEAKER_SETUP_6_1 = 1595;

	[Token(Token = "0x400109B")]
	public const int AK_SPEAKER_SETUP_7_0 = 1591;

	[Token(Token = "0x400109C")]
	public const int AK_SPEAKER_SETUP_7_1 = 1599;

	[Token(Token = "0x400109D")]
	public const int AK_SPEAKER_SETUP_DEFAULT_PLANE = 1599;

	[Token(Token = "0x400109E")]
	public const int AK_SUPPORTED_STANDARD_CHANNEL_MASK = 261951;

	[Token(Token = "0x400109F")]
	public const int AK_STANDARD_MAX_NUM_CHANNELS = 8;

	[Token(Token = "0x40010A0")]
	public const int AK_NUM_SAMPLED_SPHERE_POINTS = 32;

	[Token(Token = "0x40010A1")]
	public const int AK_MAX_NUM_TEXTURE = 4;

	[Token(Token = "0x40010A2")]
	public const int AK_MAX_REFLECT_ORDER = 4;

	[Token(Token = "0x40010A3")]
	public const int AK_MAX_REFLECTION_PATH_LENGTH = 6;

	[Token(Token = "0x40010A4")]
	public const int AK_MAX_SOUND_PROPAGATION_DEPTH = 8;

	[Token(Token = "0x40010A5")]
	public const double AK_DEFAULT_DIFFR_SHADOW_DEGREES = 30.0;

	[Token(Token = "0x40010A6")]
	public const double AK_DEFAULT_DIFFR_SHADOW_ATTEN = 2.0;

	[Token(Token = "0x40010A7")]
	public const double AK_DEFAULT_MOVEMENT_THRESHOLD = 1.0;

	[Token(Token = "0x40010A8")]
	public const double AK_SA_EPSILON = 0.001;

	[Token(Token = "0x40010A9")]
	public const double AK_SA_DIFFRACTION_EPSILON = 0.1;

	[Token(Token = "0x40010AA")]
	public const double AK_SA_PLANE_THICKNESS_RATIO = 0.005;

	[Token(Token = "0x40010AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameObjectHashFunction gameObjectHash;

	[Token(Token = "0x40010AC")]
	public const string Deprecation_2018_1_2 = "This functionality is deprecated as of Wwise v2018.1.2 and will be removed in a future release.";

	[Token(Token = "0x40010AD")]
	public const string Deprecation_2018_1_6 = "This functionality is deprecated as of Wwise v2018.1.6 and will be removed in a future release.";

	[Token(Token = "0x40010AE")]
	public const string Deprecation_2019_1_1 = "This functionality is deprecated as of Wwise v2019.1.1 and will be removed in a future release.";

	[Token(Token = "0x40010AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly HashSet<ulong> RegisteredGameObjects;

	[Token(Token = "0x17000158")]
	public static uint AK_SOUNDBANK_VERSION
	{
		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x9A86F4", Offset = "0x9A86F4", VA = "0x9A86F4")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000159")]
	public static ushort AK_INT
	{
		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x9A8754", Offset = "0x9A8754", VA = "0x9A8754")]
		get
		{
			return default(ushort);
		}
	}

	[Token(Token = "0x1700015A")]
	public static ushort AK_FLOAT
	{
		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x9A87B4", Offset = "0x9A87B4", VA = "0x9A87B4")]
		get
		{
			return default(ushort);
		}
	}

	[Token(Token = "0x1700015B")]
	public static byte AK_INTERLEAVED
	{
		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x9A8814", Offset = "0x9A8814", VA = "0x9A8814")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x1700015C")]
	public static byte AK_NONINTERLEAVED
	{
		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x9A8874", Offset = "0x9A8874", VA = "0x9A8874")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x1700015D")]
	public static uint AK_LE_NATIVE_BITSPERSAMPLE
	{
		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x9A88D4", Offset = "0x9A88D4", VA = "0x9A88D4")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700015E")]
	public static uint AK_LE_NATIVE_SAMPLETYPE
	{
		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x9A8934", Offset = "0x9A8934", VA = "0x9A8934")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700015F")]
	public static uint AK_LE_NATIVE_INTERLEAVE
	{
		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x9A8994", Offset = "0x9A8994", VA = "0x9A8994")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000160")]
	public static byte AK_INVALID_MIDI_CHANNEL
	{
		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x9B137C", Offset = "0x9B137C", VA = "0x9B137C")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000161")]
	public static byte AK_INVALID_MIDI_NOTE
	{
		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x9B13DC", Offset = "0x9B13DC", VA = "0x9B13DC")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000162")]
	public static float kDefaultMaxPathLength
	{
		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x9B3240", Offset = "0x9B3240", VA = "0x9B3240")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000163")]
	public static uint kDefaultDiffractionMaxEdges
	{
		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x9B32A0", Offset = "0x9B32A0", VA = "0x9B32A0")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000164")]
	public static uint kDefaultDiffractionMaxPaths
	{
		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x9B3300", Offset = "0x9B3300", VA = "0x9B3300")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000165")]
	public static float kMaxDiffraction
	{
		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x9B3360", Offset = "0x9B3360", VA = "0x9B3360")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000166")]
	public static uint kListenerDiffractionMaxEdges
	{
		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x9B33C0", Offset = "0x9B33C0", VA = "0x9B33C0")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000167")]
	public static uint kListenerDiffractionMaxPaths
	{
		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x9B3420", Offset = "0x9B3420", VA = "0x9B3420")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000168")]
	public static uint kPortalToPortalDiffractionMaxPaths
	{
		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x9B3480", Offset = "0x9B3480", VA = "0x9B3480")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000169")]
	public static int g_SpatialAudioPoolId
	{
		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x9B3548", Offset = "0x9B3548", VA = "0x9B3548")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x9B34E0", Offset = "0x9B34E0", VA = "0x9B34E0")]
		set
		{
		}
	}

	[Token(Token = "0x1700016A")]
	public static GameObjectHashFunction GameObjectHash
	{
		[Token(Token = "0x6001128")]
		[Address(RVA = "0x9B5428", Offset = "0x9B5428", VA = "0x9B5428")]
		set
		{
		}
	}

	[Token(Token = "0x6000FDB")]
	[Address(RVA = "0x9A89F4", Offset = "0x9A89F4", VA = "0x9A89F4")]
	public static uint DynamicSequenceOpen(GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, AkDynamicSequenceType in_eDynamicSequenceType)
	{
		return default(uint);
	}

	[Token(Token = "0x6000FDC")]
	[Address(RVA = "0x9A8B5C", Offset = "0x9A8B5C", VA = "0x9A8B5C")]
	public static uint DynamicSequenceOpen(GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie)
	{
		return default(uint);
	}

	[Token(Token = "0x6000FDD")]
	[Address(RVA = "0x9A8CBC", Offset = "0x9A8CBC", VA = "0x9A8CBC")]
	public static uint DynamicSequenceOpen(GameObject in_gameObjectID)
	{
		return default(uint);
	}

	[Token(Token = "0x6000FDE")]
	[Address(RVA = "0x9A8D98", Offset = "0x9A8D98", VA = "0x9A8D98")]
	public static AKRESULT DynamicSequenceClose(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FDF")]
	[Address(RVA = "0x9A8E00", Offset = "0x9A8E00", VA = "0x9A8E00")]
	public static AKRESULT DynamicSequencePlay(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE0")]
	[Address(RVA = "0x9A8E80", Offset = "0x9A8E80", VA = "0x9A8E80")]
	public static AKRESULT DynamicSequencePlay(uint in_playingID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0x9A8EF8", Offset = "0x9A8EF8", VA = "0x9A8EF8")]
	public static AKRESULT DynamicSequencePlay(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0x9A8F60", Offset = "0x9A8F60", VA = "0x9A8F60")]
	public static AKRESULT DynamicSequencePause(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE3")]
	[Address(RVA = "0x9A8FE0", Offset = "0x9A8FE0", VA = "0x9A8FE0")]
	public static AKRESULT DynamicSequencePause(uint in_playingID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0x9A9058", Offset = "0x9A9058", VA = "0x9A9058")]
	public static AKRESULT DynamicSequencePause(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE5")]
	[Address(RVA = "0x9A90C0", Offset = "0x9A90C0", VA = "0x9A90C0")]
	public static AKRESULT DynamicSequenceResume(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0x9A9140", Offset = "0x9A9140", VA = "0x9A9140")]
	public static AKRESULT DynamicSequenceResume(uint in_playingID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE7")]
	[Address(RVA = "0x9A91B8", Offset = "0x9A91B8", VA = "0x9A91B8")]
	public static AKRESULT DynamicSequenceResume(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0x9A9220", Offset = "0x9A9220", VA = "0x9A9220")]
	public static AKRESULT DynamicSequenceStop(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0x9A92A0", Offset = "0x9A92A0", VA = "0x9A92A0")]
	public static AKRESULT DynamicSequenceStop(uint in_playingID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0x9A9318", Offset = "0x9A9318", VA = "0x9A9318")]
	public static AKRESULT DynamicSequenceStop(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0x9A9380", Offset = "0x9A9380", VA = "0x9A9380")]
	public static AKRESULT DynamicSequenceBreak(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0x9A93E8", Offset = "0x9A93E8", VA = "0x9A93E8")]
	public static AKRESULT DynamicSequenceGetPauseTimes(uint in_playingID, out uint out_uTime, out uint out_uDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FED")]
	[Address(RVA = "0x9A9468", Offset = "0x9A9468", VA = "0x9A9468")]
	public static AkPlaylist DynamicSequenceLockPlaylist(uint in_playingID)
	{
		return null;
	}

	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0x9A9510", Offset = "0x9A9510", VA = "0x9A9510")]
	public static AKRESULT DynamicSequenceUnlockPlaylist(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0x98ECFC", Offset = "0x98ECFC", VA = "0x98ECFC")]
	public static bool IsInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FF0")]
	[Address(RVA = "0x9A9578", Offset = "0x9A9578", VA = "0x9A9578")]
	public static AKRESULT GetAudioSettings(AkAudioSettings out_audioSettings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FF1")]
	[Address(RVA = "0x9A95F4", Offset = "0x9A95F4", VA = "0x9A95F4")]
	public static AkChannelConfig GetSpeakerConfiguration(ulong in_idOutput)
	{
		return null;
	}

	[Token(Token = "0x6000FF2")]
	[Address(RVA = "0x9A9690", Offset = "0x9A9690", VA = "0x9A9690")]
	public static AkChannelConfig GetSpeakerConfiguration()
	{
		return null;
	}

	[Token(Token = "0x6000FF3")]
	[Address(RVA = "0x9A9724", Offset = "0x9A9724", VA = "0x9A9724")]
	public static AKRESULT GetPanningRule(out int out_ePanningRule, ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FF4")]
	[Address(RVA = "0x9A979C", Offset = "0x9A979C", VA = "0x9A979C")]
	public static AKRESULT GetPanningRule(out int out_ePanningRule)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FF5")]
	[Address(RVA = "0x9A9804", Offset = "0x9A9804", VA = "0x9A9804")]
	public static AKRESULT SetPanningRule(AkPanningRule in_ePanningRule, ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FF6")]
	[Address(RVA = "0x9A987C", Offset = "0x9A987C", VA = "0x9A987C")]
	public static AKRESULT SetPanningRule(AkPanningRule in_ePanningRule)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FF7")]
	[Address(RVA = "0x9A98E4", Offset = "0x9A98E4", VA = "0x9A98E4")]
	public static AKRESULT GetSpeakerAngles(float[] io_pfSpeakerAngles, ref uint io_uNumAngles, out float out_fHeightAngle, ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FF8")]
	[Address(RVA = "0x9A9974", Offset = "0x9A9974", VA = "0x9A9974")]
	public static AKRESULT GetSpeakerAngles(float[] io_pfSpeakerAngles, ref uint io_uNumAngles, out float out_fHeightAngle)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FF9")]
	[Address(RVA = "0x9A99F4", Offset = "0x9A99F4", VA = "0x9A99F4")]
	public static AKRESULT SetSpeakerAngles(float[] in_pfSpeakerAngles, uint in_uNumAngles, float in_fHeightAngle, ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FFA")]
	[Address(RVA = "0x9A9A84", Offset = "0x9A9A84", VA = "0x9A9A84")]
	public static AKRESULT SetSpeakerAngles(float[] in_pfSpeakerAngles, uint in_uNumAngles, float in_fHeightAngle)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FFB")]
	[Address(RVA = "0x9A9B0C", Offset = "0x9A9B0C", VA = "0x9A9B0C")]
	public static AKRESULT SetVolumeThreshold(float in_fVolumeThresholdDB)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FFC")]
	[Address(RVA = "0x9A9B7C", Offset = "0x9A9B7C", VA = "0x9A9B7C")]
	public static AKRESULT SetMaxNumVoicesLimit(ushort in_maxNumberVoices)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FFD")]
	[Address(RVA = "0x9A9BE4", Offset = "0x9A9BE4", VA = "0x9A9BE4")]
	public static AKRESULT RenderAudio(bool in_bAllowSyncRender)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FFE")]
	[Address(RVA = "0x9A9C4C", Offset = "0x9A9C4C", VA = "0x9A9C4C")]
	public static AKRESULT RenderAudio()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000FFF")]
	[Address(RVA = "0x9A9CAC", Offset = "0x9A9CAC", VA = "0x9A9CAC")]
	public static AKRESULT RegisterPluginDLL(string in_DllName, string in_DllPath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001000")]
	[Address(RVA = "0x9A9D24", Offset = "0x9A9D24", VA = "0x9A9D24")]
	public static AKRESULT RegisterPluginDLL(string in_DllName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001001")]
	[Address(RVA = "0x9A9D8C", Offset = "0x9A9D8C", VA = "0x9A9D8C")]
	public static uint GetIDFromString(string in_pszString)
	{
		return default(uint);
	}

	[Token(Token = "0x6001002")]
	[Address(RVA = "0x9A9DF4", Offset = "0x9A9DF4", VA = "0x9A9DF4")]
	public static uint PostEvent(uint in_eventID, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources, uint in_PlayingID)
	{
		return default(uint);
	}

	[Token(Token = "0x6001003")]
	[Address(RVA = "0x9A9F94", Offset = "0x9A9F94", VA = "0x9A9F94")]
	public static uint PostEvent(uint in_eventID, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources)
	{
		return default(uint);
	}

	[Token(Token = "0x6001004")]
	[Address(RVA = "0x9AA124", Offset = "0x9AA124", VA = "0x9AA124")]
	public static uint PostEvent(uint in_eventID, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie)
	{
		return default(uint);
	}

	[Token(Token = "0x6001005")]
	[Address(RVA = "0x9AA28C", Offset = "0x9AA28C", VA = "0x9AA28C")]
	public static uint PostEvent(uint in_eventID, GameObject in_gameObjectID)
	{
		return default(uint);
	}

	[Token(Token = "0x6001006")]
	[Address(RVA = "0x9AA378", Offset = "0x9AA378", VA = "0x9AA378")]
	public static uint PostEvent(string in_pszEventName, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources, uint in_PlayingID)
	{
		return default(uint);
	}

	[Token(Token = "0x6001007")]
	[Address(RVA = "0x9AA518", Offset = "0x9AA518", VA = "0x9AA518")]
	public static uint PostEvent(string in_pszEventName, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources)
	{
		return default(uint);
	}

	[Token(Token = "0x6001008")]
	[Address(RVA = "0x9AA6A8", Offset = "0x9AA6A8", VA = "0x9AA6A8")]
	public static uint PostEvent(string in_pszEventName, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie)
	{
		return default(uint);
	}

	[Token(Token = "0x6001009")]
	[Address(RVA = "0x9AA810", Offset = "0x9AA810", VA = "0x9AA810")]
	public static uint PostEvent(string in_pszEventName, GameObject in_gameObjectID)
	{
		return default(uint);
	}

	[Token(Token = "0x600100A")]
	[Address(RVA = "0x9AA8FC", Offset = "0x9AA8FC", VA = "0x9AA8FC")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600100B")]
	[Address(RVA = "0x9AA9DC", Offset = "0x9AA9DC", VA = "0x9AA9DC")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600100C")]
	[Address(RVA = "0x9AAAAC", Offset = "0x9AAAAC", VA = "0x9AAAAC")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600100D")]
	[Address(RVA = "0x9AAB74", Offset = "0x9AAB74", VA = "0x9AAB74")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600100E")]
	[Address(RVA = "0x9AAC2C", Offset = "0x9AAC2C", VA = "0x9AAC2C")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600100F")]
	[Address(RVA = "0x9AACA4", Offset = "0x9AACA4", VA = "0x9AACA4")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001010")]
	[Address(RVA = "0x9AAD84", Offset = "0x9AAD84", VA = "0x9AAD84")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001011")]
	[Address(RVA = "0x9AAE54", Offset = "0x9AAE54", VA = "0x9AAE54")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001012")]
	[Address(RVA = "0x9AAF1C", Offset = "0x9AAF1C", VA = "0x9AAF1C")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001013")]
	[Address(RVA = "0x9AAFD4", Offset = "0x9AAFD4", VA = "0x9AAFD4")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001014")]
	[Address(RVA = "0x9AB04C", Offset = "0x9AB04C", VA = "0x9AB04C")]
	public static AKRESULT PostMIDIOnEvent(uint in_eventID, GameObject in_gameObjectID, AkMIDIPostArray in_pPosts, ushort in_uNumPosts)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001015")]
	[Address(RVA = "0x9AB124", Offset = "0x9AB124", VA = "0x9AB124")]
	public static AKRESULT StopMIDIOnEvent(uint in_eventID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001016")]
	[Address(RVA = "0x9AB1D4", Offset = "0x9AB1D4", VA = "0x9AB1D4")]
	public static AKRESULT StopMIDIOnEvent(uint in_eventID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001017")]
	[Address(RVA = "0x9AB23C", Offset = "0x9AB23C", VA = "0x9AB23C")]
	public static AKRESULT StopMIDIOnEvent()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001018")]
	[Address(RVA = "0x9AB29C", Offset = "0x9AB29C", VA = "0x9AB29C")]
	public static AKRESULT PinEventInStreamCache(uint in_eventID, sbyte in_uActivePriority, sbyte in_uInactivePriority)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001019")]
	[Address(RVA = "0x9AB31C", Offset = "0x9AB31C", VA = "0x9AB31C")]
	public static AKRESULT PinEventInStreamCache(string in_pszEventName, sbyte in_uActivePriority, sbyte in_uInactivePriority)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600101A")]
	[Address(RVA = "0x9AB39C", Offset = "0x9AB39C", VA = "0x9AB39C")]
	public static AKRESULT UnpinEventInStreamCache(uint in_eventID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600101B")]
	[Address(RVA = "0x9AB404", Offset = "0x9AB404", VA = "0x9AB404")]
	public static AKRESULT UnpinEventInStreamCache(string in_pszEventName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600101C")]
	[Address(RVA = "0x9AB46C", Offset = "0x9AB46C", VA = "0x9AB46C")]
	public static AKRESULT GetBufferStatusForPinnedEvent(uint in_eventID, out float out_fPercentBuffered, out int out_bCachePinnedMemoryFull)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600101D")]
	[Address(RVA = "0x9AB4EC", Offset = "0x9AB4EC", VA = "0x9AB4EC")]
	public static AKRESULT GetBufferStatusForPinnedEvent(string in_pszEventName, out float out_fPercentBuffered, out int out_bCachePinnedMemoryFull)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600101E")]
	[Address(RVA = "0x9AB56C", Offset = "0x9AB56C", VA = "0x9AB56C")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, int in_iPosition, bool in_bSeekToNearestMarker, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600101F")]
	[Address(RVA = "0x9AB63C", Offset = "0x9AB63C", VA = "0x9AB63C")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, int in_iPosition, bool in_bSeekToNearestMarker)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001020")]
	[Address(RVA = "0x9AB704", Offset = "0x9AB704", VA = "0x9AB704")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, int in_iPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001021")]
	[Address(RVA = "0x9AB7BC", Offset = "0x9AB7BC", VA = "0x9AB7BC")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, int in_iPosition, bool in_bSeekToNearestMarker, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001022")]
	[Address(RVA = "0x9AB88C", Offset = "0x9AB88C", VA = "0x9AB88C")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, int in_iPosition, bool in_bSeekToNearestMarker)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001023")]
	[Address(RVA = "0x9AB954", Offset = "0x9AB954", VA = "0x9AB954")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, int in_iPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001024")]
	[Address(RVA = "0x9ABA0C", Offset = "0x9ABA0C", VA = "0x9ABA0C")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, float in_fPercent, bool in_bSeekToNearestMarker, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001025")]
	[Address(RVA = "0x9ABAE4", Offset = "0x9ABAE4", VA = "0x9ABAE4")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, float in_fPercent, bool in_bSeekToNearestMarker)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001026")]
	[Address(RVA = "0x9ABBAC", Offset = "0x9ABBAC", VA = "0x9ABBAC")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, float in_fPercent)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001027")]
	[Address(RVA = "0x9ABC6C", Offset = "0x9ABC6C", VA = "0x9ABC6C")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, float in_fPercent, bool in_bSeekToNearestMarker, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001028")]
	[Address(RVA = "0x9ABD44", Offset = "0x9ABD44", VA = "0x9ABD44")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, float in_fPercent, bool in_bSeekToNearestMarker)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001029")]
	[Address(RVA = "0x9ABE0C", Offset = "0x9ABE0C", VA = "0x9ABE0C")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, float in_fPercent)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600102A")]
	[Address(RVA = "0x9ABECC", Offset = "0x9ABECC", VA = "0x9ABECC")]
	public static void CancelEventCallbackCookie(object in_pCookie)
	{
	}

	[Token(Token = "0x600102B")]
	[Address(RVA = "0x9ABF34", Offset = "0x9ABF34", VA = "0x9ABF34")]
	public static void CancelEventCallbackGameObject(GameObject in_gameObjectID)
	{
	}

	[Token(Token = "0x600102C")]
	[Address(RVA = "0x9ABFD4", Offset = "0x9ABFD4", VA = "0x9ABFD4")]
	public static void CancelEventCallback(uint in_playingID)
	{
	}

	[Token(Token = "0x600102D")]
	[Address(RVA = "0x9AC03C", Offset = "0x9AC03C", VA = "0x9AC03C")]
	public static AKRESULT GetSourcePlayPosition(uint in_PlayingID, out int out_puPosition, bool in_bExtrapolate)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0x9AC0BC", Offset = "0x9AC0BC", VA = "0x9AC0BC")]
	public static AKRESULT GetSourcePlayPosition(uint in_PlayingID, out int out_puPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600102F")]
	[Address(RVA = "0x9AC134", Offset = "0x9AC134", VA = "0x9AC134")]
	public static AKRESULT GetSourceStreamBuffering(uint in_PlayingID, out int out_buffering, out int out_bIsBuffering)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001030")]
	[Address(RVA = "0x9AC1B4", Offset = "0x9AC1B4", VA = "0x9AC1B4")]
	public static void StopAll(GameObject in_gameObjectID)
	{
	}

	[Token(Token = "0x6001031")]
	[Address(RVA = "0x9AC254", Offset = "0x9AC254", VA = "0x9AC254")]
	public static void StopAll()
	{
	}

	[Token(Token = "0x6001032")]
	[Address(RVA = "0x9AC2B4", Offset = "0x9AC2B4", VA = "0x9AC2B4")]
	public static void StopPlayingID(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
	}

	[Token(Token = "0x6001033")]
	[Address(RVA = "0x9AC334", Offset = "0x9AC334", VA = "0x9AC334")]
	public static void StopPlayingID(uint in_playingID, int in_uTransitionDuration)
	{
	}

	[Token(Token = "0x6001034")]
	[Address(RVA = "0x9AC3AC", Offset = "0x9AC3AC", VA = "0x9AC3AC")]
	public static void StopPlayingID(uint in_playingID)
	{
	}

	[Token(Token = "0x6001035")]
	[Address(RVA = "0x9AC414", Offset = "0x9AC414", VA = "0x9AC414")]
	public static void ExecuteActionOnPlayingID(AkActionOnEventType in_ActionType, uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
	}

	[Token(Token = "0x6001036")]
	[Address(RVA = "0x9AC4A4", Offset = "0x9AC4A4", VA = "0x9AC4A4")]
	public static void ExecuteActionOnPlayingID(AkActionOnEventType in_ActionType, uint in_playingID, int in_uTransitionDuration)
	{
	}

	[Token(Token = "0x6001037")]
	[Address(RVA = "0x9AC524", Offset = "0x9AC524", VA = "0x9AC524")]
	public static void ExecuteActionOnPlayingID(AkActionOnEventType in_ActionType, uint in_playingID)
	{
	}

	[Token(Token = "0x6001038")]
	[Address(RVA = "0x9AC59C", Offset = "0x9AC59C", VA = "0x9AC59C")]
	public static void SetRandomSeed(uint in_uSeed)
	{
	}

	[Token(Token = "0x6001039")]
	[Address(RVA = "0x9AC604", Offset = "0x9AC604", VA = "0x9AC604")]
	public static void MuteBackgroundMusic(bool in_bMute)
	{
	}

	[Token(Token = "0x600103A")]
	[Address(RVA = "0x9AC66C", Offset = "0x9AC66C", VA = "0x9AC66C")]
	public static bool GetBackgroundMusicMute()
	{
		return default(bool);
	}

	[Token(Token = "0x600103B")]
	[Address(RVA = "0x9AC6CC", Offset = "0x9AC6CC", VA = "0x9AC6CC")]
	public static AKRESULT SendPluginCustomGameData(uint in_busID, GameObject in_busObjectID, AkPluginType in_eType, uint in_uCompanyID, uint in_uPluginID, IntPtr in_pData, uint in_uSizeInBytes)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600103C")]
	[Address(RVA = "0x9AC7B4", Offset = "0x9AC7B4", VA = "0x9AC7B4")]
	public static AKRESULT UnregisterAllGameObj()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600103D")]
	[Address(RVA = "0x9AC814", Offset = "0x9AC814", VA = "0x9AC814")]
	public static AKRESULT SetMultiplePositions(GameObject in_GameObjectID, AkPositionArray in_pPositions, ushort in_NumPositions, AkMultiPositionType in_eMultiPositionType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600103E")]
	[Address(RVA = "0x9AC8E0", Offset = "0x9AC8E0", VA = "0x9AC8E0")]
	public static AKRESULT SetMultiplePositions(GameObject in_GameObjectID, AkPositionArray in_pPositions, ushort in_NumPositions)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600103F")]
	[Address(RVA = "0x9AC99C", Offset = "0x9AC99C", VA = "0x9AC99C")]
	public static AKRESULT SetMultiplePositions(GameObject in_GameObjectID, AkChannelEmitterArray in_pPositions, ushort in_NumPositions, AkMultiPositionType in_eMultiPositionType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001040")]
	[Address(RVA = "0x9ACA68", Offset = "0x9ACA68", VA = "0x9ACA68")]
	public static AKRESULT SetMultiplePositions(GameObject in_GameObjectID, AkChannelEmitterArray in_pPositions, ushort in_NumPositions)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001041")]
	[Address(RVA = "0x9ACB24", Offset = "0x9ACB24", VA = "0x9ACB24")]
	public static AKRESULT SetScalingFactor(GameObject in_GameObjectID, float in_fAttenuationScalingFactor)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001042")]
	[Address(RVA = "0x9ACBCC", Offset = "0x9ACBCC", VA = "0x9ACBCC")]
	public static AKRESULT ClearBanks()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001043")]
	[Address(RVA = "0x9ACC2C", Offset = "0x9ACC2C", VA = "0x9ACC2C")]
	public static AKRESULT SetBankLoadIOSettings(float in_fThroughput, sbyte in_priority)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001044")]
	[Address(RVA = "0x9ACCA4", Offset = "0x9ACCA4", VA = "0x9ACCA4")]
	public static AKRESULT LoadBank(string in_pszString, int in_memPoolId, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001045")]
	[Address(RVA = "0x9ACD24", Offset = "0x9ACD24", VA = "0x9ACD24")]
	public static AKRESULT LoadBank(uint in_bankID, int in_memPoolId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001046")]
	[Address(RVA = "0x99955C", Offset = "0x99955C", VA = "0x99955C")]
	public static AKRESULT LoadBank(IntPtr in_pInMemoryBankPtr, uint in_uInMemoryBankSize, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001047")]
	[Address(RVA = "0x9ACD9C", Offset = "0x9ACD9C", VA = "0x9ACD9C")]
	public static AKRESULT LoadBank(IntPtr in_pInMemoryBankPtr, uint in_uInMemoryBankSize, int in_uPoolForBankMedia, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001048")]
	[Address(RVA = "0x9ACE2C", Offset = "0x9ACE2C", VA = "0x9ACE2C")]
	public static AKRESULT LoadBank(string in_pszString, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, int in_memPoolId, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001049")]
	[Address(RVA = "0x9ACF10", Offset = "0x9ACF10", VA = "0x9ACF10")]
	public static AKRESULT LoadBank(uint in_bankID, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, int in_memPoolId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600104A")]
	[Address(RVA = "0x9ACFEC", Offset = "0x9ACFEC", VA = "0x9ACFEC")]
	public static AKRESULT LoadBank(IntPtr in_pInMemoryBankPtr, uint in_uInMemoryBankSize, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600104B")]
	[Address(RVA = "0x9AD0D0", Offset = "0x9AD0D0", VA = "0x9AD0D0")]
	public static AKRESULT LoadBank(IntPtr in_pInMemoryBankPtr, uint in_uInMemoryBankSize, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, int in_uPoolForBankMedia, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600104C")]
	[Address(RVA = "0x9AD1C4", Offset = "0x9AD1C4", VA = "0x9AD1C4")]
	public static AKRESULT UnloadBank(string in_pszString, IntPtr in_pInMemoryBankPtr, out int out_pMemPoolId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600104D")]
	[Address(RVA = "0x9AD244", Offset = "0x9AD244", VA = "0x9AD244")]
	public static AKRESULT UnloadBank(string in_pszString, IntPtr in_pInMemoryBankPtr)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600104E")]
	[Address(RVA = "0x9AD2BC", Offset = "0x9AD2BC", VA = "0x9AD2BC")]
	public static AKRESULT UnloadBank(uint in_bankID, IntPtr in_pInMemoryBankPtr, out int out_pMemPoolId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600104F")]
	[Address(RVA = "0x999300", Offset = "0x999300", VA = "0x999300")]
	public static AKRESULT UnloadBank(uint in_bankID, IntPtr in_pInMemoryBankPtr)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001050")]
	[Address(RVA = "0x9AD33C", Offset = "0x9AD33C", VA = "0x9AD33C")]
	public static AKRESULT UnloadBank(string in_pszString, IntPtr in_pInMemoryBankPtr, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001051")]
	[Address(RVA = "0x9AD418", Offset = "0x9AD418", VA = "0x9AD418")]
	public static AKRESULT UnloadBank(uint in_bankID, IntPtr in_pInMemoryBankPtr, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001052")]
	[Address(RVA = "0x9AD4F4", Offset = "0x9AD4F4", VA = "0x9AD4F4")]
	public static void CancelBankCallbackCookie(object in_pCookie)
	{
	}

	[Token(Token = "0x6001053")]
	[Address(RVA = "0x9AD55C", Offset = "0x9AD55C", VA = "0x9AD55C")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, string in_pszString, AkBankContent in_uFlags)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001054")]
	[Address(RVA = "0x9AD5DC", Offset = "0x9AD5DC", VA = "0x9AD5DC")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, string in_pszString)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001055")]
	[Address(RVA = "0x9AD654", Offset = "0x9AD654", VA = "0x9AD654")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, uint in_bankID, AkBankContent in_uFlags)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001056")]
	[Address(RVA = "0x9AD6D4", Offset = "0x9AD6D4", VA = "0x9AD6D4")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, uint in_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001057")]
	[Address(RVA = "0x9AD74C", Offset = "0x9AD74C", VA = "0x9AD74C")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, string in_pszString, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, AkBankContent in_uFlags)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001058")]
	[Address(RVA = "0x9AD830", Offset = "0x9AD830", VA = "0x9AD830")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, string in_pszString, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001059")]
	[Address(RVA = "0x9AD90C", Offset = "0x9AD90C", VA = "0x9AD90C")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, uint in_bankID, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, AkBankContent in_uFlags)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600105A")]
	[Address(RVA = "0x9AD9F0", Offset = "0x9AD9F0", VA = "0x9AD9F0")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, uint in_bankID, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600105B")]
	[Address(RVA = "0x9ADACC", Offset = "0x9ADACC", VA = "0x9ADACC")]
	public static AKRESULT ClearPreparedEvents()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600105C")]
	[Address(RVA = "0x9ADB2C", Offset = "0x9ADB2C", VA = "0x9ADB2C")]
	public static AKRESULT PrepareEvent(AkPreparationType in_PreparationType, string[] in_ppszString, uint in_uNumEvent)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600105D")]
	[Address(RVA = "0x9ADDDC", Offset = "0x9ADDDC", VA = "0x9ADDDC")]
	public static AKRESULT PrepareEvent(AkPreparationType in_PreparationType, uint[] in_pEventID, uint in_uNumEvent)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600105E")]
	[Address(RVA = "0x9ADE5C", Offset = "0x9ADE5C", VA = "0x9ADE5C")]
	public static AKRESULT PrepareEvent(AkPreparationType in_PreparationType, string[] in_ppszString, uint in_uNumEvent, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600105F")]
	[Address(RVA = "0x9AE170", Offset = "0x9AE170", VA = "0x9AE170")]
	public static AKRESULT PrepareEvent(AkPreparationType in_PreparationType, uint[] in_pEventID, uint in_uNumEvent, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001060")]
	[Address(RVA = "0x9AE254", Offset = "0x9AE254", VA = "0x9AE254")]
	public static AKRESULT SetMedia(AkSourceSettingsArray in_pSourceSettings, uint in_uNumSourceSettings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001061")]
	[Address(RVA = "0x9AE2DC", Offset = "0x9AE2DC", VA = "0x9AE2DC")]
	public static AKRESULT UnsetMedia(AkSourceSettingsArray in_pSourceSettings, uint in_uNumSourceSettings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001062")]
	[Address(RVA = "0x9AE364", Offset = "0x9AE364", VA = "0x9AE364")]
	public static AKRESULT PrepareGameSyncs(AkPreparationType in_PreparationType, AkGroupType in_eGameSyncType, string in_pszGroupName, string[] in_ppszGameSyncName, uint in_uNumGameSyncs)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001063")]
	[Address(RVA = "0x9AE624", Offset = "0x9AE624", VA = "0x9AE624")]
	public static AKRESULT PrepareGameSyncs(AkPreparationType in_PreparationType, AkGroupType in_eGameSyncType, uint in_GroupID, uint[] in_paGameSyncID, uint in_uNumGameSyncs)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001064")]
	[Address(RVA = "0x9AE6BC", Offset = "0x9AE6BC", VA = "0x9AE6BC")]
	public static AKRESULT PrepareGameSyncs(AkPreparationType in_PreparationType, AkGroupType in_eGameSyncType, string in_pszGroupName, string[] in_ppszGameSyncName, uint in_uNumGameSyncs, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001065")]
	[Address(RVA = "0x9AE9E8", Offset = "0x9AE9E8", VA = "0x9AE9E8")]
	public static AKRESULT PrepareGameSyncs(AkPreparationType in_PreparationType, AkGroupType in_eGameSyncType, uint in_GroupID, uint[] in_paGameSyncID, uint in_uNumGameSyncs, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001066")]
	[Address(RVA = "0x98E994", Offset = "0x98E994", VA = "0x98E994")]
	public static AKRESULT AddListener(GameObject in_emitterGameObj, GameObject in_listenerGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001067")]
	[Address(RVA = "0x98EE4C", Offset = "0x98EE4C", VA = "0x98EE4C")]
	public static AKRESULT RemoveListener(GameObject in_emitterGameObj, GameObject in_listenerGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001068")]
	[Address(RVA = "0x9AEAE4", Offset = "0x9AEAE4", VA = "0x9AEAE4")]
	public static AKRESULT AddDefaultListener(GameObject in_listenerGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001069")]
	[Address(RVA = "0x9AEB84", Offset = "0x9AEB84", VA = "0x9AEB84")]
	public static AKRESULT RemoveDefaultListener(GameObject in_listenerGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600106A")]
	[Address(RVA = "0x98E8F4", Offset = "0x98E8F4", VA = "0x98E8F4")]
	public static AKRESULT ResetListenersToDefault(GameObject in_emitterGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600106B")]
	[Address(RVA = "0x9AEC24", Offset = "0x9AEC24", VA = "0x9AEC24")]
	public static AKRESULT SetListenerSpatialization(GameObject in_uListenerID, bool in_bSpatialized, AkChannelConfig in_channelConfig, float[] in_pVolumeOffsets)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600106C")]
	[Address(RVA = "0x9AED00", Offset = "0x9AED00", VA = "0x9AED00")]
	public static AKRESULT SetListenerSpatialization(GameObject in_uListenerID, bool in_bSpatialized, AkChannelConfig in_channelConfig)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600106D")]
	[Address(RVA = "0x9AEDCC", Offset = "0x9AEDCC", VA = "0x9AEDCC")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600106E")]
	[Address(RVA = "0x9AEEAC", Offset = "0x9AEEAC", VA = "0x9AEEAC")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600106F")]
	[Address(RVA = "0x9AEF84", Offset = "0x9AEF84", VA = "0x9AEF84")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001070")]
	[Address(RVA = "0x9AF04C", Offset = "0x9AF04C", VA = "0x9AF04C")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001071")]
	[Address(RVA = "0x9AF10C", Offset = "0x9AF10C", VA = "0x9AF10C")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001072")]
	[Address(RVA = "0x9AF184", Offset = "0x9AF184", VA = "0x9AF184")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001073")]
	[Address(RVA = "0x9AF264", Offset = "0x9AF264", VA = "0x9AF264")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001074")]
	[Address(RVA = "0x9AF33C", Offset = "0x9AF33C", VA = "0x9AF33C")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001075")]
	[Address(RVA = "0x9AF404", Offset = "0x9AF404", VA = "0x9AF404")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001076")]
	[Address(RVA = "0x9AF4C4", Offset = "0x9AF4C4", VA = "0x9AF4C4")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001077")]
	[Address(RVA = "0x9AF53C", Offset = "0x9AF53C", VA = "0x9AF53C")]
	public static AKRESULT SetRTPCValueByPlayingID(uint in_rtpcID, float in_value, uint in_playingID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001078")]
	[Address(RVA = "0x9AF5E4", Offset = "0x9AF5E4", VA = "0x9AF5E4")]
	public static AKRESULT SetRTPCValueByPlayingID(uint in_rtpcID, float in_value, uint in_playingID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001079")]
	[Address(RVA = "0x9AF684", Offset = "0x9AF684", VA = "0x9AF684")]
	public static AKRESULT SetRTPCValueByPlayingID(uint in_rtpcID, float in_value, uint in_playingID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600107A")]
	[Address(RVA = "0x9AF714", Offset = "0x9AF714", VA = "0x9AF714")]
	public static AKRESULT SetRTPCValueByPlayingID(uint in_rtpcID, float in_value, uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600107B")]
	[Address(RVA = "0x9AF79C", Offset = "0x9AF79C", VA = "0x9AF79C")]
	public static AKRESULT SetRTPCValueByPlayingID(string in_pszRtpcName, float in_value, uint in_playingID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600107C")]
	[Address(RVA = "0x9AF844", Offset = "0x9AF844", VA = "0x9AF844")]
	public static AKRESULT SetRTPCValueByPlayingID(string in_pszRtpcName, float in_value, uint in_playingID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600107D")]
	[Address(RVA = "0x9AF8E4", Offset = "0x9AF8E4", VA = "0x9AF8E4")]
	public static AKRESULT SetRTPCValueByPlayingID(string in_pszRtpcName, float in_value, uint in_playingID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600107E")]
	[Address(RVA = "0x9AF974", Offset = "0x9AF974", VA = "0x9AF974")]
	public static AKRESULT SetRTPCValueByPlayingID(string in_pszRtpcName, float in_value, uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600107F")]
	[Address(RVA = "0x9AF9FC", Offset = "0x9AF9FC", VA = "0x9AF9FC")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001080")]
	[Address(RVA = "0x9AFACC", Offset = "0x9AFACC", VA = "0x9AFACC")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001081")]
	[Address(RVA = "0x9AFB94", Offset = "0x9AFB94", VA = "0x9AFB94")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001082")]
	[Address(RVA = "0x9AFC4C", Offset = "0x9AFC4C", VA = "0x9AFC4C")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001083")]
	[Address(RVA = "0x9AFCFC", Offset = "0x9AFCFC", VA = "0x9AFCFC")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001084")]
	[Address(RVA = "0x9AFD64", Offset = "0x9AFD64", VA = "0x9AFD64")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001085")]
	[Address(RVA = "0x9AFE34", Offset = "0x9AFE34", VA = "0x9AFE34")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001086")]
	[Address(RVA = "0x9AFEFC", Offset = "0x9AFEFC", VA = "0x9AFEFC")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001087")]
	[Address(RVA = "0x9AFFB4", Offset = "0x9AFFB4", VA = "0x9AFFB4")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001088")]
	[Address(RVA = "0x9B0064", Offset = "0x9B0064", VA = "0x9B0064")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001089")]
	[Address(RVA = "0x9B00CC", Offset = "0x9B00CC", VA = "0x9B00CC")]
	public static AKRESULT SetSwitch(uint in_switchGroup, uint in_switchState, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600108A")]
	[Address(RVA = "0x9B0184", Offset = "0x9B0184", VA = "0x9B0184")]
	public static AKRESULT SetSwitch(string in_pszSwitchGroup, string in_pszSwitchState, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600108B")]
	[Address(RVA = "0x9B023C", Offset = "0x9B023C", VA = "0x9B023C")]
	public static AKRESULT PostTrigger(uint in_triggerID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600108C")]
	[Address(RVA = "0x9B02EC", Offset = "0x9B02EC", VA = "0x9B02EC")]
	public static AKRESULT PostTrigger(string in_pszTrigger, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600108D")]
	[Address(RVA = "0x9B039C", Offset = "0x9B039C", VA = "0x9B039C")]
	public static AKRESULT SetState(uint in_stateGroup, uint in_state)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600108E")]
	[Address(RVA = "0x9B0414", Offset = "0x9B0414", VA = "0x9B0414")]
	public static AKRESULT SetState(string in_pszStateGroup, string in_pszState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600108F")]
	[Address(RVA = "0x9B048C", Offset = "0x9B048C", VA = "0x9B048C")]
	public static AKRESULT SetGameObjectAuxSendValues(GameObject in_gameObjectID, AkAuxSendArray in_aAuxSendValues, uint in_uNumSendValues)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001090")]
	[Address(RVA = "0x9B0554", Offset = "0x9B0554", VA = "0x9B0554")]
	public static AKRESULT SetGameObjectOutputBusVolume(GameObject in_emitterObjID, GameObject in_listenerObjID, float in_fControlValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001091")]
	[Address(RVA = "0x9B062C", Offset = "0x9B062C", VA = "0x9B062C")]
	public static AKRESULT SetActorMixerEffect(uint in_audioNodeID, uint in_uFXIndex, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001092")]
	[Address(RVA = "0x9B06AC", Offset = "0x9B06AC", VA = "0x9B06AC")]
	public static AKRESULT SetBusEffect(uint in_audioNodeID, uint in_uFXIndex, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001093")]
	[Address(RVA = "0x9B072C", Offset = "0x9B072C", VA = "0x9B072C")]
	public static AKRESULT SetBusEffect(string in_pszBusName, uint in_uFXIndex, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001094")]
	[Address(RVA = "0x9B07AC", Offset = "0x9B07AC", VA = "0x9B07AC")]
	public static AKRESULT SetMixer(uint in_audioNodeID, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001095")]
	[Address(RVA = "0x9B0824", Offset = "0x9B0824", VA = "0x9B0824")]
	public static AKRESULT SetMixer(string in_pszBusName, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001096")]
	[Address(RVA = "0x9B089C", Offset = "0x9B089C", VA = "0x9B089C")]
	public static AKRESULT SetBusConfig(uint in_audioNodeID, AkChannelConfig in_channelConfig)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001097")]
	[Address(RVA = "0x9B0928", Offset = "0x9B0928", VA = "0x9B0928")]
	public static AKRESULT SetBusConfig(string in_pszBusName, AkChannelConfig in_channelConfig)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001098")]
	[Address(RVA = "0x9B09B4", Offset = "0x9B09B4", VA = "0x9B09B4")]
	public static AKRESULT SetObjectObstructionAndOcclusion(GameObject in_EmitterID, GameObject in_ListenerID, float in_fObstructionLevel, float in_fOcclusionLevel)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001099")]
	[Address(RVA = "0x9B0A94", Offset = "0x9B0A94", VA = "0x9B0A94")]
	public static AKRESULT SetMultipleObstructionAndOcclusion(GameObject in_EmitterID, GameObject in_uListenerID, AkObstructionOcclusionValuesArray in_fObstructionOcclusionValues, uint in_uNumOcclusionObstruction)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600109A")]
	[Address(RVA = "0x9B0B84", Offset = "0x9B0B84", VA = "0x9B0B84")]
	public static AKRESULT StartOutputCapture(string in_CaptureFileName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600109B")]
	[Address(RVA = "0x9B0BEC", Offset = "0x9B0BEC", VA = "0x9B0BEC")]
	public static AKRESULT StopOutputCapture()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600109C")]
	[Address(RVA = "0x9B0C4C", Offset = "0x9B0C4C", VA = "0x9B0C4C")]
	public static AKRESULT AddOutputCaptureMarker(string in_MarkerText)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600109D")]
	[Address(RVA = "0x9B0CB4", Offset = "0x9B0CB4", VA = "0x9B0CB4")]
	public static AKRESULT StartProfilerCapture(string in_CaptureFileName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600109E")]
	[Address(RVA = "0x9B0D1C", Offset = "0x9B0D1C", VA = "0x9B0D1C")]
	public static AKRESULT StopProfilerCapture()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600109F")]
	[Address(RVA = "0x9B0D7C", Offset = "0x9B0D7C", VA = "0x9B0D7C")]
	public static AKRESULT RemoveOutput(ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010A0")]
	[Address(RVA = "0x9B0DE4", Offset = "0x9B0DE4", VA = "0x9B0DE4")]
	public static AKRESULT ReplaceOutput(AkOutputSettings in_Settings, ulong in_outputDeviceId, out ulong out_pOutputDeviceId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010A1")]
	[Address(RVA = "0x9B0E90", Offset = "0x9B0E90", VA = "0x9B0E90")]
	public static AKRESULT ReplaceOutput(AkOutputSettings in_Settings, ulong in_outputDeviceId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010A2")]
	[Address(RVA = "0x9B0F34", Offset = "0x9B0F34", VA = "0x9B0F34")]
	public static ulong GetOutputID(uint in_idShareset, uint in_idDevice)
	{
		return default(ulong);
	}

	[Token(Token = "0x60010A3")]
	[Address(RVA = "0x9B0FAC", Offset = "0x9B0FAC", VA = "0x9B0FAC")]
	public static ulong GetOutputID(string in_szShareSet, uint in_idDevice)
	{
		return default(ulong);
	}

	[Token(Token = "0x60010A4")]
	[Address(RVA = "0x9B1024", Offset = "0x9B1024", VA = "0x9B1024")]
	public static AKRESULT SetBusDevice(uint in_idBus, uint in_idNewDevice)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010A5")]
	[Address(RVA = "0x9B109C", Offset = "0x9B109C", VA = "0x9B109C")]
	public static AKRESULT SetBusDevice(string in_BusName, string in_DeviceName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010A6")]
	[Address(RVA = "0x9B1114", Offset = "0x9B1114", VA = "0x9B1114")]
	public static AKRESULT SetOutputVolume(ulong in_idOutput, float in_fVolume)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010A7")]
	[Address(RVA = "0x9B118C", Offset = "0x9B118C", VA = "0x9B118C")]
	public static AKRESULT GetDeviceSpatialAudioSupport(uint in_idDevice)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010A8")]
	[Address(RVA = "0x9B11F4", Offset = "0x9B11F4", VA = "0x9B11F4")]
	public static AKRESULT Suspend(bool in_bRenderAnyway)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010A9")]
	[Address(RVA = "0x9B125C", Offset = "0x9B125C", VA = "0x9B125C")]
	public static AKRESULT Suspend()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010AA")]
	[Address(RVA = "0x9B12BC", Offset = "0x9B12BC", VA = "0x9B12BC")]
	public static AKRESULT WakeupFromSuspend()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010AB")]
	[Address(RVA = "0x9B131C", Offset = "0x9B131C", VA = "0x9B131C")]
	public static uint GetBufferTick()
	{
		return default(uint);
	}

	[Token(Token = "0x60010AE")]
	[Address(RVA = "0x9B143C", Offset = "0x9B143C", VA = "0x9B143C")]
	public static AKRESULT GetPlayingSegmentInfo(uint in_PlayingID, AkSegmentInfo out_segmentInfo, bool in_bExtrapolate)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010AF")]
	[Address(RVA = "0x9B14E8", Offset = "0x9B14E8", VA = "0x9B14E8")]
	public static AKRESULT GetPlayingSegmentInfo(uint in_PlayingID, AkSegmentInfo out_segmentInfo)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B0")]
	[Address(RVA = "0x9B158C", Offset = "0x9B158C", VA = "0x9B158C")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID, uint in_audioNodeID, bool in_bIsBus)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B1")]
	[Address(RVA = "0x9B166C", Offset = "0x9B166C", VA = "0x9B166C")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID, uint in_audioNodeID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B2")]
	[Address(RVA = "0x9B173C", Offset = "0x9B173C", VA = "0x9B173C")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B3")]
	[Address(RVA = "0x9B1804", Offset = "0x9B1804", VA = "0x9B1804")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B4")]
	[Address(RVA = "0x9B1884", Offset = "0x9B1884", VA = "0x9B1884")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B5")]
	[Address(RVA = "0x9B18FC", Offset = "0x9B18FC", VA = "0x9B18FC")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID, uint in_audioNodeID, bool in_bIsBus)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B6")]
	[Address(RVA = "0x9B19DC", Offset = "0x9B19DC", VA = "0x9B19DC")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID, uint in_audioNodeID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B7")]
	[Address(RVA = "0x9B1AAC", Offset = "0x9B1AAC", VA = "0x9B1AAC")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B8")]
	[Address(RVA = "0x9B1B74", Offset = "0x9B1B74", VA = "0x9B1B74")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010B9")]
	[Address(RVA = "0x9B1BF4", Offset = "0x9B1BF4", VA = "0x9B1BF4")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010BA")]
	[Address(RVA = "0x9B1C6C", Offset = "0x9B1C6C", VA = "0x9B1C6C")]
	public static int GetTimeStamp()
	{
		return default(int);
	}

	[Token(Token = "0x60010BB")]
	[Address(RVA = "0x9B1CCC", Offset = "0x9B1CCC", VA = "0x9B1CCC")]
	public static uint GetNumNonZeroBits(uint in_uWord)
	{
		return default(uint);
	}

	[Token(Token = "0x60010BC")]
	[Address(RVA = "0x9B1D34", Offset = "0x9B1D34", VA = "0x9B1D34")]
	public static void AkGetDefaultHighPriorityThreadProperties(AkThreadProperties out_threadProperties)
	{
	}

	[Token(Token = "0x60010BD")]
	[Address(RVA = "0x9B1DB0", Offset = "0x9B1DB0", VA = "0x9B1DB0")]
	public static uint ResolveDialogueEvent(uint in_eventID, uint[] in_aArgumentValues, uint in_uNumArguments, uint in_idSequence)
	{
		return default(uint);
	}

	[Token(Token = "0x60010BE")]
	[Address(RVA = "0x9B1E40", Offset = "0x9B1E40", VA = "0x9B1E40")]
	public static uint ResolveDialogueEvent(uint in_eventID, uint[] in_aArgumentValues, uint in_uNumArguments)
	{
		return default(uint);
	}

	[Token(Token = "0x60010BF")]
	[Address(RVA = "0x9B1EC0", Offset = "0x9B1EC0", VA = "0x9B1EC0")]
	public static AKRESULT GetDialogueEventCustomPropertyValue(uint in_eventID, uint in_uPropID, out int out_iValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C0")]
	[Address(RVA = "0x9B1F40", Offset = "0x9B1F40", VA = "0x9B1F40")]
	public static AKRESULT GetDialogueEventCustomPropertyValue(uint in_eventID, uint in_uPropID, out float out_fValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C1")]
	[Address(RVA = "0x9B1FC0", Offset = "0x9B1FC0", VA = "0x9B1FC0")]
	public static AKRESULT GetPosition(GameObject in_GameObjectID, AkTransform out_rPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C2")]
	[Address(RVA = "0x9B2078", Offset = "0x9B2078", VA = "0x9B2078")]
	public static AKRESULT GetListenerPosition(GameObject in_uIndex, AkTransform out_rPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C3")]
	[Address(RVA = "0x9B213C", Offset = "0x9B213C", VA = "0x9B213C")]
	public static AKRESULT GetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID, uint in_playingID, out float out_rValue, ref int io_rValueType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C4")]
	[Address(RVA = "0x9B220C", Offset = "0x9B220C", VA = "0x9B220C")]
	public static AKRESULT GetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID, uint in_playingID, out float out_rValue, ref int io_rValueType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C5")]
	[Address(RVA = "0x9B22DC", Offset = "0x9B22DC", VA = "0x9B22DC")]
	public static AKRESULT GetSwitch(uint in_switchGroup, GameObject in_gameObjectID, out uint out_rSwitchState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C6")]
	[Address(RVA = "0x9B2394", Offset = "0x9B2394", VA = "0x9B2394")]
	public static AKRESULT GetSwitch(string in_pstrSwitchGroupName, GameObject in_GameObj, out uint out_rSwitchState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C7")]
	[Address(RVA = "0x9B2444", Offset = "0x9B2444", VA = "0x9B2444")]
	public static AKRESULT GetState(uint in_stateGroup, out uint out_rState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C8")]
	[Address(RVA = "0x9B24BC", Offset = "0x9B24BC", VA = "0x9B24BC")]
	public static AKRESULT GetState(string in_pstrStateGroupName, out uint out_rState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010C9")]
	[Address(RVA = "0x9B2534", Offset = "0x9B2534", VA = "0x9B2534")]
	public static AKRESULT GetGameObjectAuxSendValues(GameObject in_gameObjectID, AkAuxSendArray out_paAuxSendValues, ref uint io_ruNumSendValues)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010CA")]
	[Address(RVA = "0x9B25FC", Offset = "0x9B25FC", VA = "0x9B25FC")]
	public static AKRESULT GetGameObjectDryLevelValue(GameObject in_EmitterID, GameObject in_ListenerID, out float out_rfControlValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010CB")]
	[Address(RVA = "0x9B26CC", Offset = "0x9B26CC", VA = "0x9B26CC")]
	public static AKRESULT GetObjectObstructionAndOcclusion(GameObject in_EmitterID, GameObject in_ListenerID, out float out_rfObstructionLevel, out float out_rfOcclusionLevel)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010CC")]
	[Address(RVA = "0x9B27AC", Offset = "0x9B27AC", VA = "0x9B27AC")]
	public static AKRESULT QueryAudioObjectIDs(uint in_eventID, ref uint io_ruNumItems, AkObjectInfoArray out_aObjectInfos)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010CD")]
	[Address(RVA = "0x9B283C", Offset = "0x9B283C", VA = "0x9B283C")]
	public static AKRESULT QueryAudioObjectIDs(string in_pszEventName, ref uint io_ruNumItems, AkObjectInfoArray out_aObjectInfos)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010CE")]
	[Address(RVA = "0x9B28CC", Offset = "0x9B28CC", VA = "0x9B28CC")]
	public static AKRESULT GetPositioningInfo(uint in_ObjectID, AkPositioningInfo out_rPositioningInfo)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010CF")]
	[Address(RVA = "0x9B2970", Offset = "0x9B2970", VA = "0x9B2970")]
	public static bool GetIsGameObjectActive(GameObject in_GameObjId)
	{
		return default(bool);
	}

	[Token(Token = "0x60010D0")]
	[Address(RVA = "0x9B2A10", Offset = "0x9B2A10", VA = "0x9B2A10")]
	public static float GetMaxRadius(GameObject in_GameObjId)
	{
		return default(float);
	}

	[Token(Token = "0x60010D1")]
	[Address(RVA = "0x9B2AB0", Offset = "0x9B2AB0", VA = "0x9B2AB0")]
	public static uint GetEventIDFromPlayingID(uint in_playingID)
	{
		return default(uint);
	}

	[Token(Token = "0x60010D2")]
	[Address(RVA = "0x9B2B18", Offset = "0x9B2B18", VA = "0x9B2B18")]
	public static ulong GetGameObjectFromPlayingID(uint in_playingID)
	{
		return default(ulong);
	}

	[Token(Token = "0x60010D3")]
	[Address(RVA = "0x9B2B80", Offset = "0x9B2B80", VA = "0x9B2B80")]
	public static AKRESULT GetPlayingIDsFromGameObject(GameObject in_GameObjId, ref uint io_ruNumIDs, uint[] out_aPlayingIDs)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010D4")]
	[Address(RVA = "0x9B2C38", Offset = "0x9B2C38", VA = "0x9B2C38")]
	public static AKRESULT GetCustomPropertyValue(uint in_ObjectID, uint in_uPropID, out int out_iValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010D5")]
	[Address(RVA = "0x9B2CB8", Offset = "0x9B2CB8", VA = "0x9B2CB8")]
	public static AKRESULT GetCustomPropertyValue(uint in_ObjectID, uint in_uPropID, out float out_fValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010D6")]
	[Address(RVA = "0x9B2D38", Offset = "0x9B2D38", VA = "0x9B2D38")]
	public static void AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(ref uint io_uChannelMask)
	{
	}

	[Token(Token = "0x60010D7")]
	[Address(RVA = "0x9B2DA0", Offset = "0x9B2DA0", VA = "0x9B2DA0")]
	public static void AK_SPEAKER_SETUP_FIX_REAR_TO_SIDE(ref uint io_uChannelMask)
	{
	}

	[Token(Token = "0x60010D8")]
	[Address(RVA = "0x9B2E08", Offset = "0x9B2E08", VA = "0x9B2E08")]
	public static void AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(ref uint io_uChannelMask)
	{
	}

	[Token(Token = "0x60010D9")]
	[Address(RVA = "0x9B2E70", Offset = "0x9B2E70", VA = "0x9B2E70")]
	public static byte ChannelMaskToNumChannels(uint in_uChannelMask)
	{
		return default(byte);
	}

	[Token(Token = "0x60010DA")]
	[Address(RVA = "0x9B2ED8", Offset = "0x9B2ED8", VA = "0x9B2ED8")]
	public static uint ChannelMaskFromNumChannels(uint in_uNumChannels)
	{
		return default(uint);
	}

	[Token(Token = "0x60010DB")]
	[Address(RVA = "0x9B2F40", Offset = "0x9B2F40", VA = "0x9B2F40")]
	public static byte ChannelBitToIndex(uint in_uChannelBit, uint in_uChannelMask)
	{
		return default(byte);
	}

	[Token(Token = "0x60010DC")]
	[Address(RVA = "0x9B2FB8", Offset = "0x9B2FB8", VA = "0x9B2FB8")]
	public static bool HasSurroundChannels(uint in_uChannelMask)
	{
		return default(bool);
	}

	[Token(Token = "0x60010DD")]
	[Address(RVA = "0x9B3020", Offset = "0x9B3020", VA = "0x9B3020")]
	public static bool HasStrictlyOnePairOfSurroundChannels(uint in_uChannelMask)
	{
		return default(bool);
	}

	[Token(Token = "0x60010DE")]
	[Address(RVA = "0x9B3088", Offset = "0x9B3088", VA = "0x9B3088")]
	public static bool HasSideAndRearChannels(uint in_uChannelMask)
	{
		return default(bool);
	}

	[Token(Token = "0x60010DF")]
	[Address(RVA = "0x9B30F0", Offset = "0x9B30F0", VA = "0x9B30F0")]
	public static bool HasHeightChannels(uint in_uChannelMask)
	{
		return default(bool);
	}

	[Token(Token = "0x60010E0")]
	[Address(RVA = "0x9B3158", Offset = "0x9B3158", VA = "0x9B3158")]
	public static uint BackToSideChannels(uint in_uChannelMask)
	{
		return default(uint);
	}

	[Token(Token = "0x60010E1")]
	[Address(RVA = "0x9B31C0", Offset = "0x9B31C0", VA = "0x9B31C0")]
	public static uint StdChannelIndexToDisplayIndex(AkChannelOrdering in_eOrdering, uint in_uChannelMask, uint in_uChannelIdx)
	{
		return default(uint);
	}

	[Token(Token = "0x60010EB")]
	[Address(RVA = "0x9B35A8", Offset = "0x9B35A8", VA = "0x9B35A8")]
	public static int GetPoolID()
	{
		return default(int);
	}

	[Token(Token = "0x60010EC")]
	[Address(RVA = "0x9B3608", Offset = "0x9B3608", VA = "0x9B3608")]
	public static AKRESULT RegisterEmitter(GameObject in_gameObjectID, AkEmitterSettings in_settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010ED")]
	[Address(RVA = "0x9B36CC", Offset = "0x9B36CC", VA = "0x9B36CC")]
	public static AKRESULT UnregisterEmitter(GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010EE")]
	[Address(RVA = "0x9B376C", Offset = "0x9B376C", VA = "0x9B376C")]
	public static AKRESULT SetEmitterAuxSendValues(GameObject in_gameObjectID, AkAuxSendArray in_pAuxSends, uint in_uNumAux)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010EF")]
	[Address(RVA = "0x9B3834", Offset = "0x9B3834", VA = "0x9B3834")]
	public static AKRESULT SetImageSource(uint in_srcID, AkImageSourceSettings in_info, uint in_AuxBusID, ulong in_roomID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F0")]
	[Address(RVA = "0x9B3930", Offset = "0x9B3930", VA = "0x9B3930")]
	public static AKRESULT SetImageSource(uint in_srcID, AkImageSourceSettings in_info, uint in_AuxBusID, ulong in_roomID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F1")]
	[Address(RVA = "0x9B39EC", Offset = "0x9B39EC", VA = "0x9B39EC")]
	public static AKRESULT RemoveImageSource(uint in_srcID, uint in_AuxBusID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F2")]
	[Address(RVA = "0x9B3AA4", Offset = "0x9B3AA4", VA = "0x9B3AA4")]
	public static AKRESULT RemoveImageSource(uint in_srcID, uint in_AuxBusID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F3")]
	[Address(RVA = "0x9B3B1C", Offset = "0x9B3B1C", VA = "0x9B3B1C")]
	public static AKRESULT RemoveGeometry(ulong in_SetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F4")]
	[Address(RVA = "0x9B3B84", Offset = "0x9B3B84", VA = "0x9B3B84")]
	public static AKRESULT QueryReflectionPaths(GameObject in_gameObjectID, AkVector out_listenerPos, AkVector out_emitterPos, AkReflectionPathInfoArray out_aPaths, out uint io_uArraySize)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F5")]
	[Address(RVA = "0x9A4F14", Offset = "0x9A4F14", VA = "0x9A4F14")]
	public static AKRESULT RemoveRoom(ulong in_RoomID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F6")]
	[Address(RVA = "0x9B3C84", Offset = "0x9B3C84", VA = "0x9B3C84")]
	public static AKRESULT RemovePortal(ulong in_PortalID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F7")]
	[Address(RVA = "0x9B3CEC", Offset = "0x9B3CEC", VA = "0x9B3CEC")]
	public static AKRESULT SetGameObjectInRoom(GameObject in_gameObjectID, ulong in_CurrentRoomID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F8")]
	[Address(RVA = "0x9B3D9C", Offset = "0x9B3D9C", VA = "0x9B3D9C")]
	public static AKRESULT SetEmitterObstructionAndOcclusion(GameObject in_gameObjectID, float in_fObstruction, float in_fOcclusion)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010F9")]
	[Address(RVA = "0x9A7648", Offset = "0x9A7648", VA = "0x9A7648")]
	public static AKRESULT SetPortalObstructionAndOcclusion(ulong in_PortalID, float in_fObstruction, float in_fOcclusion)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010FA")]
	[Address(RVA = "0x9B3E54", Offset = "0x9B3E54", VA = "0x9B3E54")]
	public static AKRESULT QueryWetDiffraction(ulong in_portal, out float out_wetDiffraction)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010FB")]
	[Address(RVA = "0x9B3ECC", Offset = "0x9B3ECC", VA = "0x9B3ECC")]
	public static AKRESULT GetFastPathSettings(AkInitSettings in_settings, AkPlatformInitSettings in_pfSettings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60010FC")]
	[Address(RVA = "0x993184", Offset = "0x993184", VA = "0x993184")]
	public static void SetErrorLogger(AkLogger.ErrorLoggerInteropDelegate logger)
	{
	}

	[Token(Token = "0x60010FD")]
	[Address(RVA = "0x99335C", Offset = "0x99335C", VA = "0x99335C")]
	public static void SetErrorLogger()
	{
	}

	[Token(Token = "0x60010FE")]
	[Address(RVA = "0x9B3F9C", Offset = "0x9B3F9C", VA = "0x9B3F9C")]
	public static void SetAudioInputCallbacks(AkAudioInputManager.AudioSamplesInteropDelegate getAudioSamples, AkAudioInputManager.AudioFormatInteropDelegate getAudioFormat)
	{
	}

	[Token(Token = "0x60010FF")]
	[Address(RVA = "0x9B4014", Offset = "0x9B4014", VA = "0x9B4014")]
	public static AKRESULT Init(AkInitializationSettings settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001100")]
	[Address(RVA = "0x9B40A8", Offset = "0x9B40A8", VA = "0x9B40A8")]
	public static AKRESULT InitSpatialAudio(AkSpatialAudioInitSettings settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001101")]
	[Address(RVA = "0x9B4124", Offset = "0x9B4124", VA = "0x9B4124")]
	public static AKRESULT InitCommunication(AkCommunicationSettings settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001102")]
	[Address(RVA = "0x9B41A0", Offset = "0x9B41A0", VA = "0x9B41A0")]
	public static void Term()
	{
	}

	[Token(Token = "0x6001103")]
	[Address(RVA = "0x9B4200", Offset = "0x9B4200", VA = "0x9B4200")]
	public static AKRESULT RegisterGameObjInternal(GameObject in_GameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001104")]
	[Address(RVA = "0x9B4298", Offset = "0x9B4298", VA = "0x9B4298")]
	public static AKRESULT UnregisterGameObjInternal(GameObject in_GameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001105")]
	[Address(RVA = "0x9B4330", Offset = "0x9B4330", VA = "0x9B4330")]
	public static AKRESULT RegisterGameObjInternal_WithName(GameObject in_GameObj, string in_pszObjName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001106")]
	[Address(RVA = "0x9B43D8", Offset = "0x9B43D8", VA = "0x9B43D8")]
	public static AKRESULT SetBasePath(string in_pszBasePath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001107")]
	[Address(RVA = "0x9B4440", Offset = "0x9B4440", VA = "0x9B4440")]
	public static AKRESULT SetCurrentLanguage(string in_pszAudioSrcPath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001108")]
	[Address(RVA = "0x9B44A8", Offset = "0x9B44A8", VA = "0x9B44A8")]
	public static AKRESULT LoadFilePackage(string in_pszFilePackageName, out uint out_uPackageID, int in_memPoolID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001109")]
	[Address(RVA = "0x9B4528", Offset = "0x9B4528", VA = "0x9B4528")]
	public static AKRESULT AddBasePath(string in_pszBasePath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600110A")]
	[Address(RVA = "0x9B4590", Offset = "0x9B4590", VA = "0x9B4590")]
	public static AKRESULT SetGameName(string in_GameName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600110B")]
	[Address(RVA = "0x9B45F8", Offset = "0x9B45F8", VA = "0x9B45F8")]
	public static AKRESULT SetDecodedBankPath(string in_DecodedPath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600110C")]
	[Address(RVA = "0x9B4660", Offset = "0x9B4660", VA = "0x9B4660")]
	public static AKRESULT LoadAndDecodeBank(string in_pszString, bool in_bSaveDecodedBank, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600110D")]
	[Address(RVA = "0x9B46E0", Offset = "0x9B46E0", VA = "0x9B46E0")]
	public static AKRESULT LoadAndDecodeBankFromMemory(IntPtr in_BankData, uint in_BankDataSize, bool in_bSaveDecodedBank, string in_DecodedBankName, bool in_bIsLanguageSpecific, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600110E")]
	[Address(RVA = "0x998EEC", Offset = "0x998EEC", VA = "0x998EEC")]
	public static string GetCurrentLanguage()
	{
		return null;
	}

	[Token(Token = "0x600110F")]
	[Address(RVA = "0x9B4788", Offset = "0x9B4788", VA = "0x9B4788")]
	public static AKRESULT UnloadFilePackage(uint in_uPackageID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001110")]
	[Address(RVA = "0x9B47F0", Offset = "0x9B47F0", VA = "0x9B47F0")]
	public static AKRESULT UnloadAllFilePackages()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001111")]
	[Address(RVA = "0x9B4850", Offset = "0x9B4850", VA = "0x9B4850")]
	public static AKRESULT SetObjectPosition(GameObject in_GameObjectID, float PosX, float PosY, float PosZ, float FrontX, float FrontY, float FrontZ, float TopX, float TopY, float TopZ)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001112")]
	[Address(RVA = "0x9B4958", Offset = "0x9B4958", VA = "0x9B4958")]
	public static AKRESULT GetSourceMultiplePlayPositions(uint in_PlayingID, uint[] out_audioNodeID, uint[] out_mediaID, int[] out_msTime, ref uint io_pcPositions, bool in_bExtrapolate)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001113")]
	[Address(RVA = "0x98EA5C", Offset = "0x98EA5C", VA = "0x98EA5C")]
	public static AKRESULT SetListeners(GameObject in_emitterGameObj, ulong[] in_pListenerGameObjs, uint in_uNumListeners)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001114")]
	[Address(RVA = "0x9B4A00", Offset = "0x9B4A00", VA = "0x9B4A00")]
	public static AKRESULT SetDefaultListeners(ulong[] in_pListenerObjs, uint in_uNumListeners)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001115")]
	[Address(RVA = "0x9B4A78", Offset = "0x9B4A78", VA = "0x9B4A78")]
	public static AKRESULT AddOutput(AkOutputSettings in_Settings, out ulong out_pDeviceID, ulong[] in_pListenerIDs, uint in_uNumListeners)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001116")]
	[Address(RVA = "0x9B4B34", Offset = "0x9B4B34", VA = "0x9B4B34")]
	public static void GetDefaultStreamSettings(AkStreamMgrSettings out_settings)
	{
	}

	[Token(Token = "0x6001117")]
	[Address(RVA = "0x9B4BB0", Offset = "0x9B4BB0", VA = "0x9B4BB0")]
	public static void GetDefaultDeviceSettings(AkDeviceSettings out_settings)
	{
	}

	[Token(Token = "0x6001118")]
	[Address(RVA = "0x9B4C2C", Offset = "0x9B4C2C", VA = "0x9B4C2C")]
	public static void GetDefaultMusicSettings(AkMusicSettings out_settings)
	{
	}

	[Token(Token = "0x6001119")]
	[Address(RVA = "0x9B4CC0", Offset = "0x9B4CC0", VA = "0x9B4CC0")]
	public static void GetDefaultInitSettings(AkInitSettings out_settings)
	{
	}

	[Token(Token = "0x600111A")]
	[Address(RVA = "0x9B4D54", Offset = "0x9B4D54", VA = "0x9B4D54")]
	public static void GetDefaultPlatformInitSettings(AkPlatformInitSettings out_settings)
	{
	}

	[Token(Token = "0x600111B")]
	[Address(RVA = "0x9B4DE8", Offset = "0x9B4DE8", VA = "0x9B4DE8")]
	public static uint GetMajorMinorVersion()
	{
		return default(uint);
	}

	[Token(Token = "0x600111C")]
	[Address(RVA = "0x9B4E48", Offset = "0x9B4E48", VA = "0x9B4E48")]
	public static uint GetSubminorBuildVersion()
	{
		return default(uint);
	}

	[Token(Token = "0x600111D")]
	[Address(RVA = "0x9B4EA8", Offset = "0x9B4EA8", VA = "0x9B4EA8")]
	public static AKRESULT QueryIndirectPaths(GameObject in_gameObjectID, AkPathParams arg1, AkReflectionPathInfoArray paths, uint numPaths)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600111E")]
	[Address(RVA = "0x9B4FAC", Offset = "0x9B4FAC", VA = "0x9B4FAC")]
	public static AKRESULT QueryDiffractionPaths(GameObject in_gameObjectID, AkPathParams arg1, AkDiffractionPathInfoArray paths, uint numPaths)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600111F")]
	[Address(RVA = "0x9A6344", Offset = "0x9A6344", VA = "0x9A6344")]
	public static AKRESULT SetRoomPortal(ulong in_PortalID, AkTransform Transform, AkVector Extent, bool bEnabled, ulong FrontRoom, ulong BackRoom)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001120")]
	[Address(RVA = "0x9A4AD0", Offset = "0x9A4AD0", VA = "0x9A4AD0")]
	public static AKRESULT SetRoom(ulong in_RoomID, AkRoomParams in_roomParams, string in_pName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001121")]
	[Address(RVA = "0x9B50B0", Offset = "0x9B50B0", VA = "0x9B50B0")]
	public static AKRESULT RegisterSpatialAudioListener(GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001122")]
	[Address(RVA = "0x9B5150", Offset = "0x9B5150", VA = "0x9B5150")]
	public static AKRESULT UnregisterSpatialAudioListener(GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001123")]
	[Address(RVA = "0x9B51F0", Offset = "0x9B51F0", VA = "0x9B51F0")]
	public static AKRESULT SetGeometry(ulong in_GeomSetID, AkTriangleArray Triangles, uint NumTriangles, AkVertexArray Vertices, uint NumVertices, AkAcousticSurfaceArray Surfaces, uint NumSurfaces, ulong RoomID, bool EnableDiffraction, bool EnableDiffractionOnBoundaryEdges)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001124")]
	[Address(RVA = "0x998BD4", Offset = "0x998BD4", VA = "0x998BD4")]
	public static string StringFromIntPtrString(IntPtr ptr)
	{
		return null;
	}

	[Token(Token = "0x6001125")]
	[Address(RVA = "0x9B5328", Offset = "0x9B5328", VA = "0x9B5328")]
	public static string StringFromIntPtrWString(IntPtr ptr)
	{
		return null;
	}

	[Token(Token = "0x6001126")]
	[Address(RVA = "0x99109C", Offset = "0x99109C", VA = "0x99109C")]
	public static string StringFromIntPtrOSString(IntPtr ptr)
	{
		return null;
	}

	[Token(Token = "0x6001127")]
	[Address(RVA = "0x9B5390", Offset = "0x9B5390", VA = "0x9B5390")]
	private static ulong InternalGameObjectHash(GameObject gameObject)
	{
		return default(ulong);
	}

	[Token(Token = "0x6001129")]
	[Address(RVA = "0x997F18", Offset = "0x997F18", VA = "0x997F18")]
	public static ulong GetAkGameObjectID(GameObject gameObject)
	{
		return default(ulong);
	}

	[Token(Token = "0x600112A")]
	[Address(RVA = "0x9B54C4", Offset = "0x9B54C4", VA = "0x9B54C4")]
	public static AKRESULT RegisterGameObj(GameObject gameObject)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600112B")]
	[Address(RVA = "0x9B5618", Offset = "0x9B5618", VA = "0x9B5618")]
	public static AKRESULT RegisterGameObj(GameObject gameObject, string name)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600112C")]
	[Address(RVA = "0x9B56D4", Offset = "0x9B56D4", VA = "0x9B56D4")]
	public static AKRESULT UnregisterGameObj(GameObject gameObject)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600112D")]
	[Address(RVA = "0x9B5828", Offset = "0x9B5828", VA = "0x9B5828")]
	public static AKRESULT SetObjectPosition(GameObject gameObject, Transform transform)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600112E")]
	[Address(RVA = "0x9B59B4", Offset = "0x9B59B4", VA = "0x9B59B4")]
	public static AKRESULT SetObjectPosition(GameObject gameObject, Vector3 position, Vector3 forward, Vector3 up)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600112F")]
	[Address(RVA = "0x9B5AB8", Offset = "0x9B5AB8", VA = "0x9B5AB8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x757DFC", Offset = "0x757DFC")]
	public static uint PostEvent(uint eventId, GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, object cookie, uint numSources, AkExternalSourceInfo externalSources, uint playingId)
	{
		return default(uint);
	}

	[Token(Token = "0x6001130")]
	[Address(RVA = "0x9B5C00", Offset = "0x9B5C00", VA = "0x9B5C00")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x757E34", Offset = "0x757E34")]
	public static uint PostEvent(uint eventId, GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, object cookie, uint numSources, AkExternalSourceInfo externalSources)
	{
		return default(uint);
	}

	[Token(Token = "0x6001131")]
	[Address(RVA = "0x9B5D84", Offset = "0x9B5D84", VA = "0x9B5D84")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x757E6C", Offset = "0x757E6C")]
	public static uint PostEvent(string eventName, GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, object cookie, uint numSources, AkExternalSourceInfo externalSources, uint playingId)
	{
		return default(uint);
	}

	[Token(Token = "0x6001132")]
	[Address(RVA = "0x9B5ECC", Offset = "0x9B5ECC", VA = "0x9B5ECC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x757EA4", Offset = "0x757EA4")]
	public static uint PostEvent(string eventName, GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, object cookie, uint numSources, AkExternalSourceInfo externalSources)
	{
		return default(uint);
	}

	[Token(Token = "0x6001133")]
	[Address(RVA = "0x997F94", Offset = "0x997F94", VA = "0x997F94")]
	public static void PreGameObjectAPICall(GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6001134")]
	[Address(RVA = "0x9B6050", Offset = "0x9B6050", VA = "0x9B6050")]
	private static void PreGameObjectAPICallUserHook(GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6001135")]
	[Address(RVA = "0x9B5570", Offset = "0x9B5570", VA = "0x9B5570")]
	private static void PostRegisterGameObjUserHook(AKRESULT result, GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6001136")]
	[Address(RVA = "0x9B5780", Offset = "0x9B5780", VA = "0x9B5780")]
	private static void PostUnregisterGameObjUserHook(AKRESULT result, GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6001137")]
	[Address(RVA = "0x9B6198", Offset = "0x9B6198", VA = "0x9B6198")]
	private static void AutoRegister(GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6001138")]
	[Address(RVA = "0x9B6114", Offset = "0x9B6114", VA = "0x9B6114")]
	private static bool IsInRegisteredList(ulong id)
	{
		return default(bool);
	}

	[Token(Token = "0x6001139")]
	[Address(RVA = "0x9B62B0", Offset = "0x9B62B0", VA = "0x9B62B0")]
	public static bool IsGameObjectRegistered(GameObject in_gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x600113A")]
	[Address(RVA = "0x9B6318", Offset = "0x9B6318", VA = "0x9B6318")]
	public AkSoundEngine()
	{
	}
}
[Token(Token = "0x2000222")]
internal class AkSoundEnginePINVOKE
{
	[Token(Token = "0x600113C")]
	[Address(RVA = "0xFAB2A4", Offset = "0xFAB2A4", VA = "0xFAB2A4")]
	static AkSoundEnginePINVOKE()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600113D")]
	[Address(RVA = "0xFAB2A8", Offset = "0xFAB2A8", VA = "0xFAB2A8")]
	public static extern uint CSharp_AK_SOUNDBANK_VERSION_get();

	[PreserveSig]
	[Token(Token = "0x600113E")]
	[Address(RVA = "0xFAB330", Offset = "0xFAB330", VA = "0xFAB330")]
	public static extern void CSharp_AkAudioSettings_uNumSamplesPerFrame_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600113F")]
	[Address(RVA = "0xFAB3D8", Offset = "0xFAB3D8", VA = "0xFAB3D8")]
	public static extern uint CSharp_AkAudioSettings_uNumSamplesPerFrame_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001140")]
	[Address(RVA = "0xFAB470", Offset = "0xFAB470", VA = "0xFAB470")]
	public static extern void CSharp_AkAudioSettings_uNumSamplesPerSecond_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001141")]
	[Address(RVA = "0xFAB518", Offset = "0xFAB518", VA = "0xFAB518")]
	public static extern uint CSharp_AkAudioSettings_uNumSamplesPerSecond_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001142")]
	[Address(RVA = "0xFAB5B0", Offset = "0xFAB5B0", VA = "0xFAB5B0")]
	public static extern IntPtr CSharp_new_AkAudioSettings();

	[PreserveSig]
	[Token(Token = "0x6001143")]
	[Address(RVA = "0xFAB638", Offset = "0xFAB638", VA = "0xFAB638")]
	public static extern void CSharp_delete_AkAudioSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001144")]
	[Address(RVA = "0xFAB6D0", Offset = "0xFAB6D0", VA = "0xFAB6D0")]
	public static extern void CSharp_AkVector_Zero(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001145")]
	[Address(RVA = "0xFAB768", Offset = "0xFAB768", VA = "0xFAB768")]
	public static extern void CSharp_AkVector_X_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001146")]
	[Address(RVA = "0xFAB810", Offset = "0xFAB810", VA = "0xFAB810")]
	public static extern float CSharp_AkVector_X_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001147")]
	[Address(RVA = "0xFAB8A8", Offset = "0xFAB8A8", VA = "0xFAB8A8")]
	public static extern void CSharp_AkVector_Y_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001148")]
	[Address(RVA = "0xFAB950", Offset = "0xFAB950", VA = "0xFAB950")]
	public static extern float CSharp_AkVector_Y_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001149")]
	[Address(RVA = "0xFAB9E8", Offset = "0xFAB9E8", VA = "0xFAB9E8")]
	public static extern void CSharp_AkVector_Z_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600114A")]
	[Address(RVA = "0xFABA90", Offset = "0xFABA90", VA = "0xFABA90")]
	public static extern float CSharp_AkVector_Z_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600114B")]
	[Address(RVA = "0xFABB28", Offset = "0xFABB28", VA = "0xFABB28")]
	public static extern IntPtr CSharp_new_AkVector();

	[PreserveSig]
	[Token(Token = "0x600114C")]
	[Address(RVA = "0xFABBB0", Offset = "0xFABBB0", VA = "0xFABBB0")]
	public static extern void CSharp_delete_AkVector(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600114D")]
	[Address(RVA = "0xFABC48", Offset = "0xFABC48", VA = "0xFABC48")]
	public static extern IntPtr CSharp_AkTransform_Position(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600114E")]
	[Address(RVA = "0xFABCE0", Offset = "0xFABCE0", VA = "0xFABCE0")]
	public static extern IntPtr CSharp_AkTransform_OrientationFront(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600114F")]
	[Address(RVA = "0xFABD78", Offset = "0xFABD78", VA = "0xFABD78")]
	public static extern IntPtr CSharp_AkTransform_OrientationTop(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001150")]
	[Address(RVA = "0xFABE10", Offset = "0xFABE10", VA = "0xFABE10")]
	public static extern void CSharp_AkTransform_Set__SWIG_0(IntPtr jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6001151")]
	[Address(RVA = "0xFABED0", Offset = "0xFABED0", VA = "0xFABED0")]
	public static extern void CSharp_AkTransform_Set__SWIG_1(IntPtr jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10);

	[PreserveSig]
	[Token(Token = "0x6001152")]
	[Address(RVA = "0xFABFD0", Offset = "0xFABFD0", VA = "0xFABFD0")]
	public static extern void CSharp_AkTransform_SetPosition__SWIG_0(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001153")]
	[Address(RVA = "0xFAC078", Offset = "0xFAC078", VA = "0xFAC078")]
	public static extern void CSharp_AkTransform_SetPosition__SWIG_1(IntPtr jarg1, float jarg2, float jarg3, float jarg4);

	[PreserveSig]
	[Token(Token = "0x6001154")]
	[Address(RVA = "0xFAC138", Offset = "0xFAC138", VA = "0xFAC138")]
	public static extern void CSharp_AkTransform_SetOrientation__SWIG_0(IntPtr jarg1, IntPtr jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6001155")]
	[Address(RVA = "0xFAC1E8", Offset = "0xFAC1E8", VA = "0xFAC1E8")]
	public static extern void CSharp_AkTransform_SetOrientation__SWIG_1(IntPtr jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);

	[PreserveSig]
	[Token(Token = "0x6001156")]
	[Address(RVA = "0xFAC2C8", Offset = "0xFAC2C8", VA = "0xFAC2C8")]
	public static extern IntPtr CSharp_new_AkTransform();

	[PreserveSig]
	[Token(Token = "0x6001157")]
	[Address(RVA = "0xFAC350", Offset = "0xFAC350", VA = "0xFAC350")]
	public static extern void CSharp_delete_AkTransform(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001158")]
	[Address(RVA = "0xFAC3E8", Offset = "0xFAC3E8", VA = "0xFAC3E8")]
	public static extern void CSharp_AkObstructionOcclusionValues_occlusion_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001159")]
	[Address(RVA = "0xFAC490", Offset = "0xFAC490", VA = "0xFAC490")]
	public static extern float CSharp_AkObstructionOcclusionValues_occlusion_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600115A")]
	[Address(RVA = "0xFAC528", Offset = "0xFAC528", VA = "0xFAC528")]
	public static extern void CSharp_AkObstructionOcclusionValues_obstruction_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600115B")]
	[Address(RVA = "0xFAC5D0", Offset = "0xFAC5D0", VA = "0xFAC5D0")]
	public static extern float CSharp_AkObstructionOcclusionValues_obstruction_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600115C")]
	[Address(RVA = "0xFAC668", Offset = "0xFAC668", VA = "0xFAC668")]
	public static extern void CSharp_AkObstructionOcclusionValues_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600115D")]
	[Address(RVA = "0xFAC700", Offset = "0xFAC700", VA = "0xFAC700")]
	public static extern int CSharp_AkObstructionOcclusionValues_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x600115E")]
	[Address(RVA = "0xFAC788", Offset = "0xFAC788", VA = "0xFAC788")]
	public static extern void CSharp_AkObstructionOcclusionValues_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600115F")]
	[Address(RVA = "0xFAC830", Offset = "0xFAC830", VA = "0xFAC830")]
	public static extern IntPtr CSharp_new_AkObstructionOcclusionValues();

	[PreserveSig]
	[Token(Token = "0x6001160")]
	[Address(RVA = "0xFAC8B8", Offset = "0xFAC8B8", VA = "0xFAC8B8")]
	public static extern void CSharp_delete_AkObstructionOcclusionValues(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001161")]
	[Address(RVA = "0xFAC950", Offset = "0xFAC950", VA = "0xFAC950")]
	public static extern void CSharp_AkChannelEmitter_position_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001162")]
	[Address(RVA = "0xFAC9F8", Offset = "0xFAC9F8", VA = "0xFAC9F8")]
	public static extern IntPtr CSharp_AkChannelEmitter_position_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001163")]
	[Address(RVA = "0xFACA90", Offset = "0xFACA90", VA = "0xFACA90")]
	public static extern void CSharp_AkChannelEmitter_uInputChannels_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001164")]
	[Address(RVA = "0xFACB38", Offset = "0xFACB38", VA = "0xFACB38")]
	public static extern uint CSharp_AkChannelEmitter_uInputChannels_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001165")]
	[Address(RVA = "0xFACBD0", Offset = "0xFACBD0", VA = "0xFACBD0")]
	public static extern void CSharp_delete_AkChannelEmitter(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001166")]
	[Address(RVA = "0xFACC68", Offset = "0xFACC68", VA = "0xFACC68")]
	public static extern void CSharp_AkAuxSendValue_listenerID_set(IntPtr jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6001167")]
	[Address(RVA = "0xFACD10", Offset = "0xFACD10", VA = "0xFACD10")]
	public static extern ulong CSharp_AkAuxSendValue_listenerID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001168")]
	[Address(RVA = "0xFACDA8", Offset = "0xFACDA8", VA = "0xFACDA8")]
	public static extern void CSharp_AkAuxSendValue_auxBusID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001169")]
	[Address(RVA = "0xFACE50", Offset = "0xFACE50", VA = "0xFACE50")]
	public static extern uint CSharp_AkAuxSendValue_auxBusID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600116A")]
	[Address(RVA = "0xFACEE8", Offset = "0xFACEE8", VA = "0xFACEE8")]
	public static extern void CSharp_AkAuxSendValue_fControlValue_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600116B")]
	[Address(RVA = "0xFACF90", Offset = "0xFACF90", VA = "0xFACF90")]
	public static extern float CSharp_AkAuxSendValue_fControlValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600116C")]
	[Address(RVA = "0xFAD028", Offset = "0xFAD028", VA = "0xFAD028")]
	public static extern void CSharp_AkAuxSendValue_Set(IntPtr jarg1, ulong jarg2, uint jarg3, float jarg4);

	[PreserveSig]
	[Token(Token = "0x600116D")]
	[Address(RVA = "0xFAD0E8", Offset = "0xFAD0E8", VA = "0xFAD0E8")]
	public static extern bool CSharp_AkAuxSendValue_IsSame(IntPtr jarg1, ulong jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x600116E")]
	[Address(RVA = "0xFAD1A0", Offset = "0xFAD1A0", VA = "0xFAD1A0")]
	public static extern int CSharp_AkAuxSendValue_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x600116F")]
	[Address(RVA = "0xFAD228", Offset = "0xFAD228", VA = "0xFAD228")]
	public static extern void CSharp_delete_AkAuxSendValue(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001170")]
	[Address(RVA = "0xFAD2C0", Offset = "0xFAD2C0", VA = "0xFAD2C0")]
	public static extern IntPtr CSharp_new_AkRamp__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6001171")]
	[Address(RVA = "0xFAD348", Offset = "0xFAD348", VA = "0xFAD348")]
	public static extern IntPtr CSharp_new_AkRamp__SWIG_1(float jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001172")]
	[Address(RVA = "0xFAD3EC", Offset = "0xFAD3EC", VA = "0xFAD3EC")]
	public static extern void CSharp_AkRamp_fPrev_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001173")]
	[Address(RVA = "0xFAD494", Offset = "0xFAD494", VA = "0xFAD494")]
	public static extern float CSharp_AkRamp_fPrev_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001174")]
	[Address(RVA = "0xFAD52C", Offset = "0xFAD52C", VA = "0xFAD52C")]
	public static extern void CSharp_AkRamp_fNext_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001175")]
	[Address(RVA = "0xFAD5D4", Offset = "0xFAD5D4", VA = "0xFAD5D4")]
	public static extern float CSharp_AkRamp_fNext_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001176")]
	[Address(RVA = "0xFAD66C", Offset = "0xFAD66C", VA = "0xFAD66C")]
	public static extern void CSharp_delete_AkRamp(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001177")]
	[Address(RVA = "0xFAD704", Offset = "0xFAD704", VA = "0xFAD704")]
	public static extern ushort CSharp_AK_INT_get();

	[PreserveSig]
	[Token(Token = "0x6001178")]
	[Address(RVA = "0xFAD78C", Offset = "0xFAD78C", VA = "0xFAD78C")]
	public static extern ushort CSharp_AK_FLOAT_get();

	[PreserveSig]
	[Token(Token = "0x6001179")]
	[Address(RVA = "0xFAD814", Offset = "0xFAD814", VA = "0xFAD814")]
	public static extern byte CSharp_AK_INTERLEAVED_get();

	[PreserveSig]
	[Token(Token = "0x600117A")]
	[Address(RVA = "0xFAD89C", Offset = "0xFAD89C", VA = "0xFAD89C")]
	public static extern byte CSharp_AK_NONINTERLEAVED_get();

	[PreserveSig]
	[Token(Token = "0x600117B")]
	[Address(RVA = "0xFAD924", Offset = "0xFAD924", VA = "0xFAD924")]
	public static extern uint CSharp_AK_LE_NATIVE_BITSPERSAMPLE_get();

	[PreserveSig]
	[Token(Token = "0x600117C")]
	[Address(RVA = "0xFAD9AC", Offset = "0xFAD9AC", VA = "0xFAD9AC")]
	public static extern uint CSharp_AK_LE_NATIVE_SAMPLETYPE_get();

	[PreserveSig]
	[Token(Token = "0x600117D")]
	[Address(RVA = "0xFADA34", Offset = "0xFADA34", VA = "0xFADA34")]
	public static extern uint CSharp_AK_LE_NATIVE_INTERLEAVE_get();

	[PreserveSig]
	[Token(Token = "0x600117E")]
	[Address(RVA = "0xFADABC", Offset = "0xFADABC", VA = "0xFADABC")]
	public static extern void CSharp_AkAudioFormat_uSampleRate_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600117F")]
	[Address(RVA = "0xFADB64", Offset = "0xFADB64", VA = "0xFADB64")]
	public static extern uint CSharp_AkAudioFormat_uSampleRate_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001180")]
	[Address(RVA = "0xFADBFC", Offset = "0xFADBFC", VA = "0xFADBFC")]
	public static extern void CSharp_AkAudioFormat_channelConfig_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001181")]
	[Address(RVA = "0xFADCA4", Offset = "0xFADCA4", VA = "0xFADCA4")]
	public static extern IntPtr CSharp_AkAudioFormat_channelConfig_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001182")]
	[Address(RVA = "0xFADD3C", Offset = "0xFADD3C", VA = "0xFADD3C")]
	public static extern void CSharp_AkAudioFormat_uBitsPerSample_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001183")]
	[Address(RVA = "0xFADDE4", Offset = "0xFADDE4", VA = "0xFADDE4")]
	public static extern uint CSharp_AkAudioFormat_uBitsPerSample_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001184")]
	[Address(RVA = "0xFADE7C", Offset = "0xFADE7C", VA = "0xFADE7C")]
	public static extern void CSharp_AkAudioFormat_uBlockAlign_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001185")]
	[Address(RVA = "0xFADF24", Offset = "0xFADF24", VA = "0xFADF24")]
	public static extern uint CSharp_AkAudioFormat_uBlockAlign_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001186")]
	[Address(RVA = "0xFADFBC", Offset = "0xFADFBC", VA = "0xFADFBC")]
	public static extern void CSharp_AkAudioFormat_uTypeID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001187")]
	[Address(RVA = "0xFAE064", Offset = "0xFAE064", VA = "0xFAE064")]
	public static extern uint CSharp_AkAudioFormat_uTypeID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001188")]
	[Address(RVA = "0xFAE0FC", Offset = "0xFAE0FC", VA = "0xFAE0FC")]
	public static extern void CSharp_AkAudioFormat_uInterleaveID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001189")]
	[Address(RVA = "0xFAE1A4", Offset = "0xFAE1A4", VA = "0xFAE1A4")]
	public static extern uint CSharp_AkAudioFormat_uInterleaveID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600118A")]
	[Address(RVA = "0xFAE23C", Offset = "0xFAE23C", VA = "0xFAE23C")]
	public static extern uint CSharp_AkAudioFormat_GetNumChannels(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600118B")]
	[Address(RVA = "0xFAE2D4", Offset = "0xFAE2D4", VA = "0xFAE2D4")]
	public static extern uint CSharp_AkAudioFormat_GetBitsPerSample(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600118C")]
	[Address(RVA = "0xFAE36C", Offset = "0xFAE36C", VA = "0xFAE36C")]
	public static extern uint CSharp_AkAudioFormat_GetBlockAlign(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600118D")]
	[Address(RVA = "0xFAE404", Offset = "0xFAE404", VA = "0xFAE404")]
	public static extern uint CSharp_AkAudioFormat_GetTypeID(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600118E")]
	[Address(RVA = "0xFAE49C", Offset = "0xFAE49C", VA = "0xFAE49C")]
	public static extern uint CSharp_AkAudioFormat_GetInterleaveID(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600118F")]
	[Address(RVA = "0xFAE534", Offset = "0xFAE534", VA = "0xFAE534")]
	public static extern void CSharp_AkAudioFormat_SetAll(IntPtr jarg1, uint jarg2, IntPtr jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7);

	[PreserveSig]
	[Token(Token = "0x6001190")]
	[Address(RVA = "0xFAE614", Offset = "0xFAE614", VA = "0xFAE614")]
	public static extern bool CSharp_AkAudioFormat_IsChannelConfigSupported(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001191")]
	[Address(RVA = "0xFAE6B4", Offset = "0xFAE6B4", VA = "0xFAE6B4")]
	public static extern IntPtr CSharp_new_AkAudioFormat();

	[PreserveSig]
	[Token(Token = "0x6001192")]
	[Address(RVA = "0xFAE73C", Offset = "0xFAE73C", VA = "0xFAE73C")]
	public static extern void CSharp_delete_AkAudioFormat(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001193")]
	[Address(RVA = "0xFAE7D4", Offset = "0xFAE7D4", VA = "0xFAE7D4")]
	public static extern void CSharp_AkIterator_pItem_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001194")]
	[Address(RVA = "0xFAE87C", Offset = "0xFAE87C", VA = "0xFAE87C")]
	public static extern IntPtr CSharp_AkIterator_pItem_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001195")]
	[Address(RVA = "0xFAE914", Offset = "0xFAE914", VA = "0xFAE914")]
	public static extern IntPtr CSharp_AkIterator_NextIter(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001196")]
	[Address(RVA = "0xFAE9AC", Offset = "0xFAE9AC", VA = "0xFAE9AC")]
	public static extern IntPtr CSharp_AkIterator_PrevIter(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001197")]
	[Address(RVA = "0xFAEA44", Offset = "0xFAEA44", VA = "0xFAEA44")]
	public static extern IntPtr CSharp_AkIterator_GetItem(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001198")]
	[Address(RVA = "0xFAEADC", Offset = "0xFAEADC", VA = "0xFAEADC")]
	public static extern bool CSharp_AkIterator_IsEqualTo(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001199")]
	[Address(RVA = "0xFAEB8C", Offset = "0xFAEB8C", VA = "0xFAEB8C")]
	public static extern bool CSharp_AkIterator_IsDifferentFrom(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600119A")]
	[Address(RVA = "0xFAEC3C", Offset = "0xFAEC3C", VA = "0xFAEC3C")]
	public static extern IntPtr CSharp_new_AkIterator();

	[PreserveSig]
	[Token(Token = "0x600119B")]
	[Address(RVA = "0xFAECC4", Offset = "0xFAECC4", VA = "0xFAECC4")]
	public static extern void CSharp_delete_AkIterator(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600119C")]
	[Address(RVA = "0xFAED5C", Offset = "0xFAED5C", VA = "0xFAED5C")]
	public static extern int CSharp__ArrayPoolDefault_Get();

	[PreserveSig]
	[Token(Token = "0x600119D")]
	[Address(RVA = "0xFAEDE4", Offset = "0xFAEDE4", VA = "0xFAEDE4")]
	public static extern IntPtr CSharp_new__ArrayPoolDefault();

	[PreserveSig]
	[Token(Token = "0x600119E")]
	[Address(RVA = "0xFAEE6C", Offset = "0xFAEE6C", VA = "0xFAEE6C")]
	public static extern void CSharp_delete__ArrayPoolDefault(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600119F")]
	[Address(RVA = "0xFAEF04", Offset = "0xFAEF04", VA = "0xFAEF04")]
	public static extern int CSharp__ArrayPoolLEngineDefault_Get();

	[PreserveSig]
	[Token(Token = "0x60011A0")]
	[Address(RVA = "0xFAEF8C", Offset = "0xFAEF8C", VA = "0xFAEF8C")]
	public static extern IntPtr CSharp_new__ArrayPoolLEngineDefault();

	[PreserveSig]
	[Token(Token = "0x60011A1")]
	[Address(RVA = "0xFAF014", Offset = "0xFAF014", VA = "0xFAF014")]
	public static extern void CSharp_delete__ArrayPoolLEngineDefault(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011A2")]
	[Address(RVA = "0xFAF0AC", Offset = "0xFAF0AC", VA = "0xFAF0AC")]
	public static extern IntPtr CSharp_new_AkPlaylistItem__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x60011A3")]
	[Address(RVA = "0xFAF134", Offset = "0xFAF134", VA = "0xFAF134")]
	public static extern IntPtr CSharp_new_AkPlaylistItem__SWIG_1(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011A4")]
	[Address(RVA = "0xFAF1CC", Offset = "0xFAF1CC", VA = "0xFAF1CC")]
	public static extern void CSharp_delete_AkPlaylistItem(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011A5")]
	[Address(RVA = "0xFAF264", Offset = "0xFAF264", VA = "0xFAF264")]
	public static extern IntPtr CSharp_AkPlaylistItem_Assign(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011A6")]
	[Address(RVA = "0xFAF30C", Offset = "0xFAF30C", VA = "0xFAF30C")]
	public static extern bool CSharp_AkPlaylistItem_IsEqualTo(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011A7")]
	[Address(RVA = "0xFAF3BC", Offset = "0xFAF3BC", VA = "0xFAF3BC")]
	public static extern int CSharp_AkPlaylistItem_SetExternalSources(IntPtr jarg1, uint jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x60011A8")]
	[Address(RVA = "0xFAF46C", Offset = "0xFAF46C", VA = "0xFAF46C")]
	public static extern void CSharp_AkPlaylistItem_audioNodeID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011A9")]
	[Address(RVA = "0xFAF514", Offset = "0xFAF514", VA = "0xFAF514")]
	public static extern uint CSharp_AkPlaylistItem_audioNodeID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011AA")]
	[Address(RVA = "0xFAF5AC", Offset = "0xFAF5AC", VA = "0xFAF5AC")]
	public static extern void CSharp_AkPlaylistItem_msDelay_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60011AB")]
	[Address(RVA = "0xFAF654", Offset = "0xFAF654", VA = "0xFAF654")]
	public static extern int CSharp_AkPlaylistItem_msDelay_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011AC")]
	[Address(RVA = "0xFAF6EC", Offset = "0xFAF6EC", VA = "0xFAF6EC")]
	public static extern void CSharp_AkPlaylistItem_pCustomInfo_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011AD")]
	[Address(RVA = "0xFAF794", Offset = "0xFAF794", VA = "0xFAF794")]
	public static extern IntPtr CSharp_AkPlaylistItem_pCustomInfo_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011AE")]
	[Address(RVA = "0xFAF82C", Offset = "0xFAF82C", VA = "0xFAF82C")]
	public static extern IntPtr CSharp_new_AkPlaylistArray();

	[PreserveSig]
	[Token(Token = "0x60011AF")]
	[Address(RVA = "0xFAF8B4", Offset = "0xFAF8B4", VA = "0xFAF8B4")]
	public static extern void CSharp_delete_AkPlaylistArray(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011B0")]
	[Address(RVA = "0xFAF94C", Offset = "0xFAF94C", VA = "0xFAF94C")]
	public static extern IntPtr CSharp_AkPlaylistArray_Begin(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011B1")]
	[Address(RVA = "0xFAF9E4", Offset = "0xFAF9E4", VA = "0xFAF9E4")]
	public static extern IntPtr CSharp_AkPlaylistArray_End(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011B2")]
	[Address(RVA = "0xFAFA7C", Offset = "0xFAFA7C", VA = "0xFAFA7C")]
	public static extern IntPtr CSharp_AkPlaylistArray_FindEx(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011B3")]
	[Address(RVA = "0xFAFB24", Offset = "0xFAFB24", VA = "0xFAFB24")]
	public static extern IntPtr CSharp_AkPlaylistArray_Erase__SWIG_0(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011B4")]
	[Address(RVA = "0xFAFBCC", Offset = "0xFAFBCC", VA = "0xFAFBCC")]
	public static extern void CSharp_AkPlaylistArray_Erase__SWIG_1(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011B5")]
	[Address(RVA = "0xFAFC74", Offset = "0xFAFC74", VA = "0xFAFC74")]
	public static extern IntPtr CSharp_AkPlaylistArray_EraseSwap(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011B6")]
	[Address(RVA = "0xFAFD1C", Offset = "0xFAFD1C", VA = "0xFAFD1C")]
	public static extern int CSharp_AkPlaylistArray_Reserve(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011B7")]
	[Address(RVA = "0xFAFDC4", Offset = "0xFAFDC4", VA = "0xFAFDC4")]
	public static extern uint CSharp_AkPlaylistArray_Reserved(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011B8")]
	[Address(RVA = "0xFAFE5C", Offset = "0xFAFE5C", VA = "0xFAFE5C")]
	public static extern void CSharp_AkPlaylistArray_Term(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011B9")]
	[Address(RVA = "0xFAFEF4", Offset = "0xFAFEF4", VA = "0xFAFEF4")]
	public static extern uint CSharp_AkPlaylistArray_Length(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011BA")]
	[Address(RVA = "0xFAFF8C", Offset = "0xFAFF8C", VA = "0xFAFF8C")]
	public static extern IntPtr CSharp_AkPlaylistArray_Data(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011BB")]
	[Address(RVA = "0xFB0024", Offset = "0xFB0024", VA = "0xFB0024")]
	public static extern bool CSharp_AkPlaylistArray_IsEmpty(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011BC")]
	[Address(RVA = "0xFB00C4", Offset = "0xFB00C4", VA = "0xFB00C4")]
	public static extern IntPtr CSharp_AkPlaylistArray_Exists(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011BD")]
	[Address(RVA = "0xFB016C", Offset = "0xFB016C", VA = "0xFB016C")]
	public static extern IntPtr CSharp_AkPlaylistArray_AddLast__SWIG_0(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011BE")]
	[Address(RVA = "0xFB0204", Offset = "0xFB0204", VA = "0xFB0204")]
	public static extern IntPtr CSharp_AkPlaylistArray_AddLast__SWIG_1(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011BF")]
	[Address(RVA = "0xFB02AC", Offset = "0xFB02AC", VA = "0xFB02AC")]
	public static extern IntPtr CSharp_AkPlaylistArray_Last(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011C0")]
	[Address(RVA = "0xFB0344", Offset = "0xFB0344", VA = "0xFB0344")]
	public static extern void CSharp_AkPlaylistArray_RemoveLast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011C1")]
	[Address(RVA = "0xFB03DC", Offset = "0xFB03DC", VA = "0xFB03DC")]
	public static extern int CSharp_AkPlaylistArray_Remove(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011C2")]
	[Address(RVA = "0xFB0484", Offset = "0xFB0484", VA = "0xFB0484")]
	public static extern int CSharp_AkPlaylistArray_RemoveSwap(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011C3")]
	[Address(RVA = "0xFB052C", Offset = "0xFB052C", VA = "0xFB052C")]
	public static extern void CSharp_AkPlaylistArray_RemoveAll(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011C4")]
	[Address(RVA = "0xFB05C4", Offset = "0xFB05C4", VA = "0xFB05C4")]
	public static extern IntPtr CSharp_AkPlaylistArray_ItemAtIndex(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011C5")]
	[Address(RVA = "0xFB066C", Offset = "0xFB066C", VA = "0xFB066C")]
	public static extern IntPtr CSharp_AkPlaylistArray_Insert(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011C6")]
	[Address(RVA = "0xFB0714", Offset = "0xFB0714", VA = "0xFB0714")]
	public static extern bool CSharp_AkPlaylistArray_GrowArray__SWIG_0(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011C7")]
	[Address(RVA = "0xFB07C4", Offset = "0xFB07C4", VA = "0xFB07C4")]
	public static extern bool CSharp_AkPlaylistArray_GrowArray__SWIG_1(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011C8")]
	[Address(RVA = "0xFB0864", Offset = "0xFB0864", VA = "0xFB0864")]
	public static extern bool CSharp_AkPlaylistArray_Resize(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011C9")]
	[Address(RVA = "0xFB0914", Offset = "0xFB0914", VA = "0xFB0914")]
	public static extern void CSharp_AkPlaylistArray_Transfer(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011CA")]
	[Address(RVA = "0xFB09BC", Offset = "0xFB09BC", VA = "0xFB09BC")]
	public static extern int CSharp_AkPlaylistArray_Copy(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011CB")]
	[Address(RVA = "0xFB0A64", Offset = "0xFB0A64", VA = "0xFB0A64")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_0(IntPtr jarg1, uint jarg2, int jarg3, IntPtr jarg4, uint jarg5, IntPtr jarg6);

	[PreserveSig]
	[Token(Token = "0x60011CC")]
	[Address(RVA = "0xFB0B3C", Offset = "0xFB0B3C", VA = "0xFB0B3C")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_1(IntPtr jarg1, uint jarg2, int jarg3, IntPtr jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x60011CD")]
	[Address(RVA = "0xFB0C04", Offset = "0xFB0C04", VA = "0xFB0C04")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_2(IntPtr jarg1, uint jarg2, int jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x60011CE")]
	[Address(RVA = "0xFB0CC4", Offset = "0xFB0CC4", VA = "0xFB0CC4")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_3(IntPtr jarg1, uint jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x60011CF")]
	[Address(RVA = "0xFB0D74", Offset = "0xFB0D74", VA = "0xFB0D74")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_4(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011D0")]
	[Address(RVA = "0xFB0E1C", Offset = "0xFB0E1C", VA = "0xFB0E1C")]
	public static extern IntPtr CSharp_new_AkPlaylist();

	[PreserveSig]
	[Token(Token = "0x60011D1")]
	[Address(RVA = "0xFB0EA4", Offset = "0xFB0EA4", VA = "0xFB0EA4")]
	public static extern void CSharp_delete_AkPlaylist(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011D2")]
	[Address(RVA = "0xFB0F3C", Offset = "0xFB0F3C", VA = "0xFB0F3C")]
	public static extern uint CSharp_DynamicSequenceOpen__SWIG_0(ulong jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x60011D3")]
	[Address(RVA = "0xFB1004", Offset = "0xFB1004", VA = "0xFB1004")]
	public static extern uint CSharp_DynamicSequenceOpen__SWIG_1(ulong jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x60011D4")]
	[Address(RVA = "0xFB10C4", Offset = "0xFB10C4", VA = "0xFB10C4")]
	public static extern uint CSharp_DynamicSequenceOpen__SWIG_2(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60011D5")]
	[Address(RVA = "0xFB115C", Offset = "0xFB115C", VA = "0xFB115C")]
	public static extern int CSharp_DynamicSequenceClose(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60011D6")]
	[Address(RVA = "0xFB11F4", Offset = "0xFB11F4", VA = "0xFB11F4")]
	public static extern int CSharp_DynamicSequencePlay__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x60011D7")]
	[Address(RVA = "0xFB12A4", Offset = "0xFB12A4", VA = "0xFB12A4")]
	public static extern int CSharp_DynamicSequencePlay__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60011D8")]
	[Address(RVA = "0xFB134C", Offset = "0xFB134C", VA = "0xFB134C")]
	public static extern int CSharp_DynamicSequencePlay__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60011D9")]
	[Address(RVA = "0xFB13E4", Offset = "0xFB13E4", VA = "0xFB13E4")]
	public static extern int CSharp_DynamicSequencePause__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x60011DA")]
	[Address(RVA = "0xFB1494", Offset = "0xFB1494", VA = "0xFB1494")]
	public static extern int CSharp_DynamicSequencePause__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60011DB")]
	[Address(RVA = "0xFB153C", Offset = "0xFB153C", VA = "0xFB153C")]
	public static extern int CSharp_DynamicSequencePause__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60011DC")]
	[Address(RVA = "0xFB15D4", Offset = "0xFB15D4", VA = "0xFB15D4")]
	public static extern int CSharp_DynamicSequenceResume__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x60011DD")]
	[Address(RVA = "0xFB1684", Offset = "0xFB1684", VA = "0xFB1684")]
	public static extern int CSharp_DynamicSequenceResume__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60011DE")]
	[Address(RVA = "0xFB172C", Offset = "0xFB172C", VA = "0xFB172C")]
	public static extern int CSharp_DynamicSequenceResume__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60011DF")]
	[Address(RVA = "0xFB17C4", Offset = "0xFB17C4", VA = "0xFB17C4")]
	public static extern int CSharp_DynamicSequenceStop__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x60011E0")]
	[Address(RVA = "0xFB1874", Offset = "0xFB1874", VA = "0xFB1874")]
	public static extern int CSharp_DynamicSequenceStop__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60011E1")]
	[Address(RVA = "0xFB191C", Offset = "0xFB191C", VA = "0xFB191C")]
	public static extern int CSharp_DynamicSequenceStop__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60011E2")]
	[Address(RVA = "0xFB19B4", Offset = "0xFB19B4", VA = "0xFB19B4")]
	public static extern int CSharp_DynamicSequenceBreak(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60011E3")]
	[Address(RVA = "0xFB1A4C", Offset = "0xFB1A4C", VA = "0xFB1A4C")]
	public static extern int CSharp_DynamicSequenceGetPauseTimes(uint jarg1, out uint jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60011E4")]
	[Address(RVA = "0xFB1AFC", Offset = "0xFB1AFC", VA = "0xFB1AFC")]
	public static extern IntPtr CSharp_DynamicSequenceLockPlaylist(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60011E5")]
	[Address(RVA = "0xFB1B94", Offset = "0xFB1B94", VA = "0xFB1B94")]
	public static extern int CSharp_DynamicSequenceUnlockPlaylist(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60011E6")]
	[Address(RVA = "0xFB1C2C", Offset = "0xFB1C2C", VA = "0xFB1C2C")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x60011E7")]
	[Address(RVA = "0xFB1CB4", Offset = "0xFB1CB4", VA = "0xFB1CB4")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_1(string jarg1, uint jarg2, IntPtr jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x60011E8")]
	[Address(RVA = "0xFB1D8C", Offset = "0xFB1D8C", VA = "0xFB1D8C")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_2(string jarg1, uint jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x60011E9")]
	[Address(RVA = "0xFB1E54", Offset = "0xFB1E54", VA = "0xFB1E54")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_3(string jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011EA")]
	[Address(RVA = "0xFB1F14", Offset = "0xFB1F14", VA = "0xFB1F14")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_4(string jarg1);

	[PreserveSig]
	[Token(Token = "0x60011EB")]
	[Address(RVA = "0xFB1FC4", Offset = "0xFB1FC4", VA = "0xFB1FC4")]
	public static extern void CSharp_AkOutputSettings_audioDeviceShareset_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011EC")]
	[Address(RVA = "0xFB206C", Offset = "0xFB206C", VA = "0xFB206C")]
	public static extern uint CSharp_AkOutputSettings_audioDeviceShareset_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011ED")]
	[Address(RVA = "0xFB2104", Offset = "0xFB2104", VA = "0xFB2104")]
	public static extern void CSharp_AkOutputSettings_idDevice_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011EE")]
	[Address(RVA = "0xFB21AC", Offset = "0xFB21AC", VA = "0xFB21AC")]
	public static extern uint CSharp_AkOutputSettings_idDevice_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011EF")]
	[Address(RVA = "0xFB2244", Offset = "0xFB2244", VA = "0xFB2244")]
	public static extern void CSharp_AkOutputSettings_ePanningRule_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60011F0")]
	[Address(RVA = "0xFB22EC", Offset = "0xFB22EC", VA = "0xFB22EC")]
	public static extern int CSharp_AkOutputSettings_ePanningRule_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011F1")]
	[Address(RVA = "0xFB2384", Offset = "0xFB2384", VA = "0xFB2384")]
	public static extern void CSharp_AkOutputSettings_channelConfig_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60011F2")]
	[Address(RVA = "0xFB242C", Offset = "0xFB242C", VA = "0xFB242C")]
	public static extern IntPtr CSharp_AkOutputSettings_channelConfig_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011F3")]
	[Address(RVA = "0xFB24C4", Offset = "0xFB24C4", VA = "0xFB24C4")]
	public static extern void CSharp_delete_AkOutputSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011F4")]
	[Address(RVA = "0xFB255C", Offset = "0xFB255C", VA = "0xFB255C")]
	public static extern void CSharp_AkTaskContext_uIdxThread_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011F5")]
	[Address(RVA = "0xFB2604", Offset = "0xFB2604", VA = "0xFB2604")]
	public static extern uint CSharp_AkTaskContext_uIdxThread_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011F6")]
	[Address(RVA = "0xFB269C", Offset = "0xFB269C", VA = "0xFB269C")]
	public static extern IntPtr CSharp_new_AkTaskContext();

	[PreserveSig]
	[Token(Token = "0x60011F7")]
	[Address(RVA = "0xFB2724", Offset = "0xFB2724", VA = "0xFB2724")]
	public static extern void CSharp_delete_AkTaskContext(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011F8")]
	[Address(RVA = "0xFB27BC", Offset = "0xFB27BC", VA = "0xFB27BC")]
	public static extern void CSharp_AkInitSettings_uMaxNumPaths_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011F9")]
	[Address(RVA = "0xFB2864", Offset = "0xFB2864", VA = "0xFB2864")]
	public static extern uint CSharp_AkInitSettings_uMaxNumPaths_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011FA")]
	[Address(RVA = "0xFB28FC", Offset = "0xFB28FC", VA = "0xFB28FC")]
	public static extern void CSharp_AkInitSettings_uDefaultPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011FB")]
	[Address(RVA = "0xFB29A4", Offset = "0xFB29A4", VA = "0xFB29A4")]
	public static extern uint CSharp_AkInitSettings_uDefaultPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011FC")]
	[Address(RVA = "0xFB2A3C", Offset = "0xFB2A3C", VA = "0xFB2A3C")]
	public static extern void CSharp_AkInitSettings_fDefaultPoolRatioThreshold_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60011FD")]
	[Address(RVA = "0xFB2AE4", Offset = "0xFB2AE4", VA = "0xFB2AE4")]
	public static extern float CSharp_AkInitSettings_fDefaultPoolRatioThreshold_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60011FE")]
	[Address(RVA = "0xFB2B7C", Offset = "0xFB2B7C", VA = "0xFB2B7C")]
	public static extern void CSharp_AkInitSettings_uCommandQueueSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60011FF")]
	[Address(RVA = "0xFB2C24", Offset = "0xFB2C24", VA = "0xFB2C24")]
	public static extern uint CSharp_AkInitSettings_uCommandQueueSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001200")]
	[Address(RVA = "0xFB2CBC", Offset = "0xFB2CBC", VA = "0xFB2CBC")]
	public static extern void CSharp_AkInitSettings_uPrepareEventMemoryPoolID_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001201")]
	[Address(RVA = "0xFB2D64", Offset = "0xFB2D64", VA = "0xFB2D64")]
	public static extern int CSharp_AkInitSettings_uPrepareEventMemoryPoolID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001202")]
	[Address(RVA = "0xFB2DFC", Offset = "0xFB2DFC", VA = "0xFB2DFC")]
	public static extern void CSharp_AkInitSettings_bEnableGameSyncPreparation_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6001203")]
	[Address(RVA = "0xFB2EA4", Offset = "0xFB2EA4", VA = "0xFB2EA4")]
	public static extern bool CSharp_AkInitSettings_bEnableGameSyncPreparation_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001204")]
	[Address(RVA = "0xFB2F44", Offset = "0xFB2F44", VA = "0xFB2F44")]
	public static extern void CSharp_AkInitSettings_uContinuousPlaybackLookAhead_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001205")]
	[Address(RVA = "0xFB2FEC", Offset = "0xFB2FEC", VA = "0xFB2FEC")]
	public static extern uint CSharp_AkInitSettings_uContinuousPlaybackLookAhead_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001206")]
	[Address(RVA = "0xFB3084", Offset = "0xFB3084", VA = "0xFB3084")]
	public static extern void CSharp_AkInitSettings_uNumSamplesPerFrame_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001207")]
	[Address(RVA = "0xFB312C", Offset = "0xFB312C", VA = "0xFB312C")]
	public static extern uint CSharp_AkInitSettings_uNumSamplesPerFrame_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001208")]
	[Address(RVA = "0xFB31C4", Offset = "0xFB31C4", VA = "0xFB31C4")]
	public static extern void CSharp_AkInitSettings_uMonitorPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001209")]
	[Address(RVA = "0xFB326C", Offset = "0xFB326C", VA = "0xFB326C")]
	public static extern uint CSharp_AkInitSettings_uMonitorPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600120A")]
	[Address(RVA = "0xFB3304", Offset = "0xFB3304", VA = "0xFB3304")]
	public static extern void CSharp_AkInitSettings_uMonitorQueuePoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600120B")]
	[Address(RVA = "0xFB33AC", Offset = "0xFB33AC", VA = "0xFB33AC")]
	public static extern uint CSharp_AkInitSettings_uMonitorQueuePoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600120C")]
	[Address(RVA = "0xFB3444", Offset = "0xFB3444", VA = "0xFB3444")]
	public static extern void CSharp_AkInitSettings_settingsMainOutput_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600120D")]
	[Address(RVA = "0xFB34EC", Offset = "0xFB34EC", VA = "0xFB34EC")]
	public static extern IntPtr CSharp_AkInitSettings_settingsMainOutput_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600120E")]
	[Address(RVA = "0xFB3584", Offset = "0xFB3584", VA = "0xFB3584")]
	public static extern void CSharp_AkInitSettings_uMaxHardwareTimeoutMs_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600120F")]
	[Address(RVA = "0xFB362C", Offset = "0xFB362C", VA = "0xFB362C")]
	public static extern uint CSharp_AkInitSettings_uMaxHardwareTimeoutMs_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001210")]
	[Address(RVA = "0xFB36C4", Offset = "0xFB36C4", VA = "0xFB36C4")]
	public static extern void CSharp_AkInitSettings_bUseSoundBankMgrThread_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6001211")]
	[Address(RVA = "0xFB376C", Offset = "0xFB376C", VA = "0xFB376C")]
	public static extern bool CSharp_AkInitSettings_bUseSoundBankMgrThread_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001212")]
	[Address(RVA = "0xFB380C", Offset = "0xFB380C", VA = "0xFB380C")]
	public static extern void CSharp_AkInitSettings_bUseLEngineThread_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6001213")]
	[Address(RVA = "0xFB38B4", Offset = "0xFB38B4", VA = "0xFB38B4")]
	public static extern bool CSharp_AkInitSettings_bUseLEngineThread_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001214")]
	[Address(RVA = "0xFB3954", Offset = "0xFB3954", VA = "0xFB3954")]
	public static extern void CSharp_AkInitSettings_szPluginDLLPath_set(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6001215")]
	[Address(RVA = "0xFB3A10", Offset = "0xFB3A10", VA = "0xFB3A10")]
	public static extern IntPtr CSharp_AkInitSettings_szPluginDLLPath_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001216")]
	[Address(RVA = "0xFB3AA8", Offset = "0xFB3AA8", VA = "0xFB3AA8")]
	public static extern void CSharp_AkInitSettings_eFloorPlane_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001217")]
	[Address(RVA = "0xFB3B50", Offset = "0xFB3B50", VA = "0xFB3B50")]
	public static extern int CSharp_AkInitSettings_eFloorPlane_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001218")]
	[Address(RVA = "0xFB3BE8", Offset = "0xFB3BE8", VA = "0xFB3BE8")]
	public static extern IntPtr CSharp_new_AkInitSettings();

	[PreserveSig]
	[Token(Token = "0x6001219")]
	[Address(RVA = "0xFB3C70", Offset = "0xFB3C70", VA = "0xFB3C70")]
	public static extern void CSharp_delete_AkInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600121A")]
	[Address(RVA = "0xFB3D08", Offset = "0xFB3D08", VA = "0xFB3D08")]
	public static extern void CSharp_AkSourceSettings_sourceID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600121B")]
	[Address(RVA = "0xFB3DB0", Offset = "0xFB3DB0", VA = "0xFB3DB0")]
	public static extern uint CSharp_AkSourceSettings_sourceID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600121C")]
	[Address(RVA = "0xFB3E48", Offset = "0xFB3E48", VA = "0xFB3E48")]
	public static extern void CSharp_AkSourceSettings_pMediaMemory_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600121D")]
	[Address(RVA = "0xFB3EF0", Offset = "0xFB3EF0", VA = "0xFB3EF0")]
	public static extern IntPtr CSharp_AkSourceSettings_pMediaMemory_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600121E")]
	[Address(RVA = "0xFB3F88", Offset = "0xFB3F88", VA = "0xFB3F88")]
	public static extern void CSharp_AkSourceSettings_uMediaSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600121F")]
	[Address(RVA = "0xFB4030", Offset = "0xFB4030", VA = "0xFB4030")]
	public static extern uint CSharp_AkSourceSettings_uMediaSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001220")]
	[Address(RVA = "0xFB40C8", Offset = "0xFB40C8", VA = "0xFB40C8")]
	public static extern void CSharp_AkSourceSettings_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001221")]
	[Address(RVA = "0xFB4160", Offset = "0xFB4160", VA = "0xFB4160")]
	public static extern int CSharp_AkSourceSettings_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6001222")]
	[Address(RVA = "0xFB41E8", Offset = "0xFB41E8", VA = "0xFB41E8")]
	public static extern void CSharp_AkSourceSettings_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001223")]
	[Address(RVA = "0xFB4290", Offset = "0xFB4290", VA = "0xFB4290")]
	public static extern IntPtr CSharp_new_AkSourceSettings();

	[PreserveSig]
	[Token(Token = "0x6001224")]
	[Address(RVA = "0xFB4318", Offset = "0xFB4318", VA = "0xFB4318")]
	public static extern void CSharp_delete_AkSourceSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001225")]
	[Address(RVA = "0xFB43B0", Offset = "0xFB43B0", VA = "0xFB43B0")]
	public static extern bool CSharp_IsInitialized();

	[PreserveSig]
	[Token(Token = "0x6001226")]
	[Address(RVA = "0xFB4440", Offset = "0xFB4440", VA = "0xFB4440")]
	public static extern int CSharp_GetAudioSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001227")]
	[Address(RVA = "0xFB44D8", Offset = "0xFB44D8", VA = "0xFB44D8")]
	public static extern IntPtr CSharp_GetSpeakerConfiguration__SWIG_0(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001228")]
	[Address(RVA = "0xFB4570", Offset = "0xFB4570", VA = "0xFB4570")]
	public static extern IntPtr CSharp_GetSpeakerConfiguration__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6001229")]
	[Address(RVA = "0xFB45F8", Offset = "0xFB45F8", VA = "0xFB45F8")]
	public static extern int CSharp_GetPanningRule__SWIG_0(out int jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x600122A")]
	[Address(RVA = "0xFB46A0", Offset = "0xFB46A0", VA = "0xFB46A0")]
	public static extern int CSharp_GetPanningRule__SWIG_1(out int jarg1);

	[PreserveSig]
	[Token(Token = "0x600122B")]
	[Address(RVA = "0xFB4738", Offset = "0xFB4738", VA = "0xFB4738")]
	public static extern int CSharp_SetPanningRule__SWIG_0(int jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x600122C")]
	[Address(RVA = "0xFB47E0", Offset = "0xFB47E0", VA = "0xFB47E0")]
	public static extern int CSharp_SetPanningRule__SWIG_1(int jarg1);

	[PreserveSig]
	[Token(Token = "0x600122D")]
	[Address(RVA = "0xFB4878", Offset = "0xFB4878", VA = "0xFB4878")]
	public static extern int CSharp_GetSpeakerAngles__SWIG_0([In][Out] float[] jarg1, ref uint jarg2, out float jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x600122E")]
	[Address(RVA = "0xFB4940", Offset = "0xFB4940", VA = "0xFB4940")]
	public static extern int CSharp_GetSpeakerAngles__SWIG_1([In][Out] float[] jarg1, ref uint jarg2, out float jarg3);

	[PreserveSig]
	[Token(Token = "0x600122F")]
	[Address(RVA = "0xFB49F8", Offset = "0xFB49F8", VA = "0xFB49F8")]
	public static extern int CSharp_SetSpeakerAngles__SWIG_0([In] float[] jarg1, uint jarg2, float jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x6001230")]
	[Address(RVA = "0xFB4AC0", Offset = "0xFB4AC0", VA = "0xFB4AC0")]
	public static extern int CSharp_SetSpeakerAngles__SWIG_1([In] float[] jarg1, uint jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6001231")]
	[Address(RVA = "0xFB4B80", Offset = "0xFB4B80", VA = "0xFB4B80")]
	public static extern int CSharp_SetVolumeThreshold(float jarg1);

	[PreserveSig]
	[Token(Token = "0x6001232")]
	[Address(RVA = "0xFB4C1C", Offset = "0xFB4C1C", VA = "0xFB4C1C")]
	public static extern int CSharp_SetMaxNumVoicesLimit(ushort jarg1);

	[PreserveSig]
	[Token(Token = "0x6001233")]
	[Address(RVA = "0xFB4CB4", Offset = "0xFB4CB4", VA = "0xFB4CB4")]
	public static extern int CSharp_RenderAudio__SWIG_0(bool jarg1);

	[PreserveSig]
	[Token(Token = "0x6001234")]
	[Address(RVA = "0xFB4D4C", Offset = "0xFB4D4C", VA = "0xFB4D4C")]
	public static extern int CSharp_RenderAudio__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6001235")]
	[Address(RVA = "0xFB4DD4", Offset = "0xFB4DD4", VA = "0xFB4DD4")]
	public static extern int CSharp_RegisterPluginDLL__SWIG_0(string jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6001236")]
	[Address(RVA = "0xFB4EAC", Offset = "0xFB4EAC", VA = "0xFB4EAC")]
	public static extern int CSharp_RegisterPluginDLL__SWIG_1(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6001237")]
	[Address(RVA = "0xFB4F5C", Offset = "0xFB4F5C", VA = "0xFB4F5C")]
	public static extern uint CSharp_GetIDFromString(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6001238")]
	[Address(RVA = "0xFB500C", Offset = "0xFB500C", VA = "0xFB500C")]
	public static extern uint CSharp_PostEvent__SWIG_0(uint jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5, uint jarg6, IntPtr jarg7, uint jarg8);

	[PreserveSig]
	[Token(Token = "0x6001239")]
	[Address(RVA = "0xFB50FC", Offset = "0xFB50FC", VA = "0xFB50FC")]
	public static extern uint CSharp_PostEvent__SWIG_1(uint jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5, uint jarg6, IntPtr jarg7);

	[PreserveSig]
	[Token(Token = "0x600123A")]
	[Address(RVA = "0xFB51DC", Offset = "0xFB51DC", VA = "0xFB51DC")]
	public static extern uint CSharp_PostEvent__SWIG_2(uint jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5);

	[PreserveSig]
	[Token(Token = "0x600123B")]
	[Address(RVA = "0xFB52A4", Offset = "0xFB52A4", VA = "0xFB52A4")]
	public static extern uint CSharp_PostEvent__SWIG_3(uint jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x600123C")]
	[Address(RVA = "0xFB534C", Offset = "0xFB534C", VA = "0xFB534C")]
	public static extern uint CSharp_PostEvent__SWIG_4(string jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5, uint jarg6, IntPtr jarg7, uint jarg8);

	[PreserveSig]
	[Token(Token = "0x600123D")]
	[Address(RVA = "0xFB5454", Offset = "0xFB5454", VA = "0xFB5454")]
	public static extern uint CSharp_PostEvent__SWIG_5(string jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5, uint jarg6, IntPtr jarg7);

	[PreserveSig]
	[Token(Token = "0x600123E")]
	[Address(RVA = "0xFB554C", Offset = "0xFB554C", VA = "0xFB554C")]
	public static extern uint CSharp_PostEvent__SWIG_6(string jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5);

	[PreserveSig]
	[Token(Token = "0x600123F")]
	[Address(RVA = "0xFB562C", Offset = "0xFB562C", VA = "0xFB562C")]
	public static extern uint CSharp_PostEvent__SWIG_7(string jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6001240")]
	[Address(RVA = "0xFB56EC", Offset = "0xFB56EC", VA = "0xFB56EC")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_0(uint jarg1, int jarg2, ulong jarg3, int jarg4, int jarg5, uint jarg6);

	[PreserveSig]
	[Token(Token = "0x6001241")]
	[Address(RVA = "0xFB57C4", Offset = "0xFB57C4", VA = "0xFB57C4")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_1(uint jarg1, int jarg2, ulong jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6001242")]
	[Address(RVA = "0xFB588C", Offset = "0xFB588C", VA = "0xFB588C")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_2(uint jarg1, int jarg2, ulong jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6001243")]
	[Address(RVA = "0xFB594C", Offset = "0xFB594C", VA = "0xFB594C")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_3(uint jarg1, int jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6001244")]
	[Address(RVA = "0xFB59FC", Offset = "0xFB59FC", VA = "0xFB59FC")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_4(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001245")]
	[Address(RVA = "0xFB5AA4", Offset = "0xFB5AA4", VA = "0xFB5AA4")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_5(string jarg1, int jarg2, ulong jarg3, int jarg4, int jarg5, uint jarg6);

	[PreserveSig]
	[Token(Token = "0x6001246")]
	[Address(RVA = "0xFB5B94", Offset = "0xFB5B94", VA = "0xFB5B94")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_6(string jarg1, int jarg2, ulong jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6001247")]
	[Address(RVA = "0xFB5C74", Offset = "0xFB5C74", VA = "0xFB5C74")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_7(string jarg1, int jarg2, ulong jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6001248")]
	[Address(RVA = "0xFB5D4C", Offset = "0xFB5D4C", VA = "0xFB5D4C")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_8(string jarg1, int jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6001249")]
	[Address(RVA = "0xFB5E14", Offset = "0xFB5E14", VA = "0xFB5E14")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_9(string jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x600124A")]
	[Address(RVA = "0xFB5ED4", Offset = "0xFB5ED4", VA = "0xFB5ED4")]
	public static extern int CSharp_PostMIDIOnEvent(uint jarg1, ulong jarg2, IntPtr jarg3, ushort jarg4);

	[PreserveSig]
	[Token(Token = "0x600124B")]
	[Address(RVA = "0xFB5F94", Offset = "0xFB5F94", VA = "0xFB5F94")]
	public static extern int CSharp_StopMIDIOnEvent__SWIG_0(uint jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x600124C")]
	[Address(RVA = "0xFB603C", Offset = "0xFB603C", VA = "0xFB603C")]
	public static extern int CSharp_StopMIDIOnEvent__SWIG_1(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600124D")]
	[Address(RVA = "0xFB60D4", Offset = "0xFB60D4", VA = "0xFB60D4")]
	public static extern int CSharp_StopMIDIOnEvent__SWIG_2();

	[PreserveSig]
	[Token(Token = "0x600124E")]
	[Address(RVA = "0xFB615C", Offset = "0xFB615C", VA = "0xFB615C")]
	public static extern int CSharp_PinEventInStreamCache__SWIG_0(uint jarg1, sbyte jarg2, sbyte jarg3);

	[PreserveSig]
	[Token(Token = "0x600124F")]
	[Address(RVA = "0xFB620C", Offset = "0xFB620C", VA = "0xFB620C")]
	public static extern int CSharp_PinEventInStreamCache__SWIG_1(string jarg1, sbyte jarg2, sbyte jarg3);

	[PreserveSig]
	[Token(Token = "0x6001250")]
	[Address(RVA = "0xFB62D4", Offset = "0xFB62D4", VA = "0xFB62D4")]
	public static extern int CSharp_UnpinEventInStreamCache__SWIG_0(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001251")]
	[Address(RVA = "0xFB636C", Offset = "0xFB636C", VA = "0xFB636C")]
	public static extern int CSharp_UnpinEventInStreamCache__SWIG_1(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6001252")]
	[Address(RVA = "0xFB641C", Offset = "0xFB641C", VA = "0xFB641C")]
	public static extern int CSharp_GetBufferStatusForPinnedEvent__SWIG_0(uint jarg1, out float jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001253")]
	[Address(RVA = "0xFB64CC", Offset = "0xFB64CC", VA = "0xFB64CC")]
	public static extern int CSharp_GetBufferStatusForPinnedEvent__SWIG_1(string jarg1, out float jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001254")]
	[Address(RVA = "0xFB6594", Offset = "0xFB6594", VA = "0xFB6594")]
	public static extern int CSharp_SeekOnEvent__SWIG_0(uint jarg1, ulong jarg2, int jarg3, bool jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6001255")]
	[Address(RVA = "0xFB665C", Offset = "0xFB665C", VA = "0xFB665C")]
	public static extern int CSharp_SeekOnEvent__SWIG_1(uint jarg1, ulong jarg2, int jarg3, bool jarg4);

	[PreserveSig]
	[Token(Token = "0x6001256")]
	[Address(RVA = "0xFB671C", Offset = "0xFB671C", VA = "0xFB671C")]
	public static extern int CSharp_SeekOnEvent__SWIG_2(uint jarg1, ulong jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001257")]
	[Address(RVA = "0xFB67CC", Offset = "0xFB67CC", VA = "0xFB67CC")]
	public static extern int CSharp_SeekOnEvent__SWIG_3(string jarg1, ulong jarg2, int jarg3, bool jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6001258")]
	[Address(RVA = "0xFB68AC", Offset = "0xFB68AC", VA = "0xFB68AC")]
	public static extern int CSharp_SeekOnEvent__SWIG_4(string jarg1, ulong jarg2, int jarg3, bool jarg4);

	[PreserveSig]
	[Token(Token = "0x6001259")]
	[Address(RVA = "0xFB6984", Offset = "0xFB6984", VA = "0xFB6984")]
	public static extern int CSharp_SeekOnEvent__SWIG_5(string jarg1, ulong jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x600125A")]
	[Address(RVA = "0xFB6A4C", Offset = "0xFB6A4C", VA = "0xFB6A4C")]
	public static extern int CSharp_SeekOnEvent__SWIG_6(uint jarg1, ulong jarg2, float jarg3, bool jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x600125B")]
	[Address(RVA = "0xFB6B1C", Offset = "0xFB6B1C", VA = "0xFB6B1C")]
	public static extern int CSharp_SeekOnEvent__SWIG_7(uint jarg1, ulong jarg2, float jarg3, bool jarg4);

	[PreserveSig]
	[Token(Token = "0x600125C")]
	[Address(RVA = "0xFB6BDC", Offset = "0xFB6BDC", VA = "0xFB6BDC")]
	public static extern int CSharp_SeekOnEvent__SWIG_8(uint jarg1, ulong jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x600125D")]
	[Address(RVA = "0xFB6C94", Offset = "0xFB6C94", VA = "0xFB6C94")]
	public static extern int CSharp_SeekOnEvent__SWIG_9(string jarg1, ulong jarg2, float jarg3, bool jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x600125E")]
	[Address(RVA = "0xFB6D7C", Offset = "0xFB6D7C", VA = "0xFB6D7C")]
	public static extern int CSharp_SeekOnEvent__SWIG_10(string jarg1, ulong jarg2, float jarg3, bool jarg4);

	[PreserveSig]
	[Token(Token = "0x600125F")]
	[Address(RVA = "0xFB6E54", Offset = "0xFB6E54", VA = "0xFB6E54")]
	public static extern int CSharp_SeekOnEvent__SWIG_11(string jarg1, ulong jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6001260")]
	[Address(RVA = "0xFB6F24", Offset = "0xFB6F24", VA = "0xFB6F24")]
	public static extern void CSharp_CancelEventCallbackCookie(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001261")]
	[Address(RVA = "0xFB6FBC", Offset = "0xFB6FBC", VA = "0xFB6FBC")]
	public static extern void CSharp_CancelEventCallbackGameObject(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001262")]
	[Address(RVA = "0xFB7054", Offset = "0xFB7054", VA = "0xFB7054")]
	public static extern void CSharp_CancelEventCallback(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001263")]
	[Address(RVA = "0xFB70EC", Offset = "0xFB70EC", VA = "0xFB70EC")]
	public static extern int CSharp_GetSourcePlayPosition__SWIG_0(uint jarg1, out int jarg2, bool jarg3);

	[PreserveSig]
	[Token(Token = "0x6001264")]
	[Address(RVA = "0xFB719C", Offset = "0xFB719C", VA = "0xFB719C")]
	public static extern int CSharp_GetSourcePlayPosition__SWIG_1(uint jarg1, out int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001265")]
	[Address(RVA = "0xFB7244", Offset = "0xFB7244", VA = "0xFB7244")]
	public static extern int CSharp_GetSourceStreamBuffering(uint jarg1, out int jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001266")]
	[Address(RVA = "0xFB72F4", Offset = "0xFB72F4", VA = "0xFB72F4")]
	public static extern void CSharp_StopAll__SWIG_0(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001267")]
	[Address(RVA = "0xFB738C", Offset = "0xFB738C", VA = "0xFB738C")]
	public static extern void CSharp_StopAll__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6001268")]
	[Address(RVA = "0xFB7414", Offset = "0xFB7414", VA = "0xFB7414")]
	public static extern void CSharp_StopPlayingID__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001269")]
	[Address(RVA = "0xFB74C4", Offset = "0xFB74C4", VA = "0xFB74C4")]
	public static extern void CSharp_StopPlayingID__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x600126A")]
	[Address(RVA = "0xFB756C", Offset = "0xFB756C", VA = "0xFB756C")]
	public static extern void CSharp_StopPlayingID__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600126B")]
	[Address(RVA = "0xFB7604", Offset = "0xFB7604", VA = "0xFB7604")]
	public static extern void CSharp_ExecuteActionOnPlayingID__SWIG_0(int jarg1, uint jarg2, int jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x600126C")]
	[Address(RVA = "0xFB76C4", Offset = "0xFB76C4", VA = "0xFB76C4")]
	public static extern void CSharp_ExecuteActionOnPlayingID__SWIG_1(int jarg1, uint jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x600126D")]
	[Address(RVA = "0xFB7774", Offset = "0xFB7774", VA = "0xFB7774")]
	public static extern void CSharp_ExecuteActionOnPlayingID__SWIG_2(int jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600126E")]
	[Address(RVA = "0xFB781C", Offset = "0xFB781C", VA = "0xFB781C")]
	public static extern void CSharp_SetRandomSeed(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600126F")]
	[Address(RVA = "0xFB78B4", Offset = "0xFB78B4", VA = "0xFB78B4")]
	public static extern void CSharp_MuteBackgroundMusic(bool jarg1);

	[PreserveSig]
	[Token(Token = "0x6001270")]
	[Address(RVA = "0xFB794C", Offset = "0xFB794C", VA = "0xFB794C")]
	public static extern bool CSharp_GetBackgroundMusicMute();

	[PreserveSig]
	[Token(Token = "0x6001271")]
	[Address(RVA = "0xFB79DC", Offset = "0xFB79DC", VA = "0xFB79DC")]
	public static extern int CSharp_SendPluginCustomGameData(uint jarg1, ulong jarg2, int jarg3, uint jarg4, uint jarg5, IntPtr jarg6, uint jarg7);

	[PreserveSig]
	[Token(Token = "0x6001272")]
	[Address(RVA = "0xFB7ABC", Offset = "0xFB7ABC", VA = "0xFB7ABC")]
	public static extern int CSharp_UnregisterAllGameObj();

	[PreserveSig]
	[Token(Token = "0x6001273")]
	[Address(RVA = "0xFB7B44", Offset = "0xFB7B44", VA = "0xFB7B44")]
	public static extern int CSharp_SetMultiplePositions__SWIG_0(ulong jarg1, IntPtr jarg2, ushort jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6001274")]
	[Address(RVA = "0xFB7C04", Offset = "0xFB7C04", VA = "0xFB7C04")]
	public static extern int CSharp_SetMultiplePositions__SWIG_1(ulong jarg1, IntPtr jarg2, ushort jarg3);

	[PreserveSig]
	[Token(Token = "0x6001275")]
	[Address(RVA = "0xFB7CB4", Offset = "0xFB7CB4", VA = "0xFB7CB4")]
	public static extern int CSharp_SetMultiplePositions__SWIG_2(ulong jarg1, IntPtr jarg2, ushort jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6001276")]
	[Address(RVA = "0xFB7D74", Offset = "0xFB7D74", VA = "0xFB7D74")]
	public static extern int CSharp_SetMultiplePositions__SWIG_3(ulong jarg1, IntPtr jarg2, ushort jarg3);

	[PreserveSig]
	[Token(Token = "0x6001277")]
	[Address(RVA = "0xFB7E24", Offset = "0xFB7E24", VA = "0xFB7E24")]
	public static extern int CSharp_SetScalingFactor(ulong jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001278")]
	[Address(RVA = "0xFB7ECC", Offset = "0xFB7ECC", VA = "0xFB7ECC")]
	public static extern int CSharp_ClearBanks();

	[PreserveSig]
	[Token(Token = "0x6001279")]
	[Address(RVA = "0xFB7F54", Offset = "0xFB7F54", VA = "0xFB7F54")]
	public static extern int CSharp_SetBankLoadIOSettings(float jarg1, sbyte jarg2);

	[PreserveSig]
	[Token(Token = "0x600127A")]
	[Address(RVA = "0xFB7FFC", Offset = "0xFB7FFC", VA = "0xFB7FFC")]
	public static extern int CSharp_LoadBank__SWIG_0(string jarg1, int jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x600127B")]
	[Address(RVA = "0xFB80C4", Offset = "0xFB80C4", VA = "0xFB80C4")]
	public static extern int CSharp_LoadBank__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x600127C")]
	[Address(RVA = "0xFB816C", Offset = "0xFB816C", VA = "0xFB816C")]
	public static extern int CSharp_LoadBank__SWIG_2(IntPtr jarg1, uint jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x600127D")]
	[Address(RVA = "0xFB821C", Offset = "0xFB821C", VA = "0xFB821C")]
	public static extern int CSharp_LoadBank__SWIG_3(IntPtr jarg1, uint jarg2, int jarg3, out uint jarg4);

	[PreserveSig]
	[Token(Token = "0x600127E")]
	[Address(RVA = "0xFB82DC", Offset = "0xFB82DC", VA = "0xFB82DC")]
	public static extern int CSharp_LoadBank__SWIG_4(string jarg1, IntPtr jarg2, IntPtr jarg3, int jarg4, out uint jarg5);

	[PreserveSig]
	[Token(Token = "0x600127F")]
	[Address(RVA = "0xFB83BC", Offset = "0xFB83BC", VA = "0xFB83BC")]
	public static extern int CSharp_LoadBank__SWIG_5(uint jarg1, IntPtr jarg2, IntPtr jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6001280")]
	[Address(RVA = "0xFB847C", Offset = "0xFB847C", VA = "0xFB847C")]
	public static extern int CSharp_LoadBank__SWIG_6(IntPtr jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4, out uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6001281")]
	[Address(RVA = "0xFB8544", Offset = "0xFB8544", VA = "0xFB8544")]
	public static extern int CSharp_LoadBank__SWIG_7(IntPtr jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4, int jarg5, out uint jarg6);

	[PreserveSig]
	[Token(Token = "0x6001282")]
	[Address(RVA = "0xFB861C", Offset = "0xFB861C", VA = "0xFB861C")]
	public static extern int CSharp_UnloadBank__SWIG_0(string jarg1, IntPtr jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001283")]
	[Address(RVA = "0xFB86E4", Offset = "0xFB86E4", VA = "0xFB86E4")]
	public static extern int CSharp_UnloadBank__SWIG_1(string jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001284")]
	[Address(RVA = "0xFB87A4", Offset = "0xFB87A4", VA = "0xFB87A4")]
	public static extern int CSharp_UnloadBank__SWIG_2(uint jarg1, IntPtr jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001285")]
	[Address(RVA = "0xFB8854", Offset = "0xFB8854", VA = "0xFB8854")]
	public static extern int CSharp_UnloadBank__SWIG_3(uint jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001286")]
	[Address(RVA = "0xFB88FC", Offset = "0xFB88FC", VA = "0xFB88FC")]
	public static extern int CSharp_UnloadBank__SWIG_4(string jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6001287")]
	[Address(RVA = "0xFB89D4", Offset = "0xFB89D4", VA = "0xFB89D4")]
	public static extern int CSharp_UnloadBank__SWIG_5(uint jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6001288")]
	[Address(RVA = "0xFB8A94", Offset = "0xFB8A94", VA = "0xFB8A94")]
	public static extern void CSharp_CancelBankCallbackCookie(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001289")]
	[Address(RVA = "0xFB8B2C", Offset = "0xFB8B2C", VA = "0xFB8B2C")]
	public static extern int CSharp_PrepareBank__SWIG_0(int jarg1, string jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x600128A")]
	[Address(RVA = "0xFB8BF8", Offset = "0xFB8BF8", VA = "0xFB8BF8")]
	public static extern int CSharp_PrepareBank__SWIG_1(int jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x600128B")]
	[Address(RVA = "0xFB8CBC", Offset = "0xFB8CBC", VA = "0xFB8CBC")]
	public static extern int CSharp_PrepareBank__SWIG_2(int jarg1, uint jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x600128C")]
	[Address(RVA = "0xFB8D6C", Offset = "0xFB8D6C", VA = "0xFB8D6C")]
	public static extern int CSharp_PrepareBank__SWIG_3(int jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600128D")]
	[Address(RVA = "0xFB8E14", Offset = "0xFB8E14", VA = "0xFB8E14")]
	public static extern int CSharp_PrepareBank__SWIG_4(int jarg1, string jarg2, IntPtr jarg3, IntPtr jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x600128E")]
	[Address(RVA = "0xFB8EF8", Offset = "0xFB8EF8", VA = "0xFB8EF8")]
	public static extern int CSharp_PrepareBank__SWIG_5(int jarg1, string jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x600128F")]
	[Address(RVA = "0xFB8FD4", Offset = "0xFB8FD4", VA = "0xFB8FD4")]
	public static extern int CSharp_PrepareBank__SWIG_6(int jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6001290")]
	[Address(RVA = "0xFB909C", Offset = "0xFB909C", VA = "0xFB909C")]
	public static extern int CSharp_PrepareBank__SWIG_7(int jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6001291")]
	[Address(RVA = "0xFB915C", Offset = "0xFB915C", VA = "0xFB915C")]
	public static extern int CSharp_ClearPreparedEvents();

	[PreserveSig]
	[Token(Token = "0x6001292")]
	[Address(RVA = "0xFB91E4", Offset = "0xFB91E4", VA = "0xFB91E4")]
	public static extern int CSharp_PrepareEvent__SWIG_0(int jarg1, IntPtr jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001293")]
	[Address(RVA = "0xFB9294", Offset = "0xFB9294", VA = "0xFB9294")]
	public static extern int CSharp_PrepareEvent__SWIG_1(int jarg1, [In] uint[] jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001294")]
	[Address(RVA = "0xFB934C", Offset = "0xFB934C", VA = "0xFB934C")]
	public static extern int CSharp_PrepareEvent__SWIG_2(int jarg1, IntPtr jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5);

	[PreserveSig]
	[Token(Token = "0x6001295")]
	[Address(RVA = "0xFB9414", Offset = "0xFB9414", VA = "0xFB9414")]
	public static extern int CSharp_PrepareEvent__SWIG_3(int jarg1, [In] uint[] jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5);

	[PreserveSig]
	[Token(Token = "0x6001296")]
	[Address(RVA = "0xFB94E4", Offset = "0xFB94E4", VA = "0xFB94E4")]
	public static extern int CSharp_SetMedia(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001297")]
	[Address(RVA = "0xFB958C", Offset = "0xFB958C", VA = "0xFB958C")]
	public static extern int CSharp_UnsetMedia(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001298")]
	[Address(RVA = "0xFB9634", Offset = "0xFB9634", VA = "0xFB9634")]
	public static extern int CSharp_PrepareGameSyncs__SWIG_0(int jarg1, int jarg2, string jarg3, IntPtr jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6001299")]
	[Address(RVA = "0xFB9718", Offset = "0xFB9718", VA = "0xFB9718")]
	public static extern int CSharp_PrepareGameSyncs__SWIG_1(int jarg1, int jarg2, uint jarg3, [In] uint[] jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x600129A")]
	[Address(RVA = "0xFB97E8", Offset = "0xFB97E8", VA = "0xFB97E8")]
	public static extern int CSharp_PrepareGameSyncs__SWIG_2(int jarg1, int jarg2, string jarg3, IntPtr jarg4, uint jarg5, IntPtr jarg6, IntPtr jarg7);

	[PreserveSig]
	[Token(Token = "0x600129B")]
	[Address(RVA = "0xFB98E4", Offset = "0xFB98E4", VA = "0xFB98E4")]
	public static extern int CSharp_PrepareGameSyncs__SWIG_3(int jarg1, int jarg2, uint jarg3, [In] uint[] jarg4, uint jarg5, IntPtr jarg6, IntPtr jarg7);

	[PreserveSig]
	[Token(Token = "0x600129C")]
	[Address(RVA = "0xFB99CC", Offset = "0xFB99CC", VA = "0xFB99CC")]
	public static extern int CSharp_AddListener(ulong jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x600129D")]
	[Address(RVA = "0xFB9A74", Offset = "0xFB9A74", VA = "0xFB9A74")]
	public static extern int CSharp_RemoveListener(ulong jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x600129E")]
	[Address(RVA = "0xFB9B1C", Offset = "0xFB9B1C", VA = "0xFB9B1C")]
	public static extern int CSharp_AddDefaultListener(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x600129F")]
	[Address(RVA = "0xFB9BB4", Offset = "0xFB9BB4", VA = "0xFB9BB4")]
	public static extern int CSharp_RemoveDefaultListener(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60012A0")]
	[Address(RVA = "0xFB9C4C", Offset = "0xFB9C4C", VA = "0xFB9C4C")]
	public static extern int CSharp_ResetListenersToDefault(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60012A1")]
	[Address(RVA = "0xFB9CE4", Offset = "0xFB9CE4", VA = "0xFB9CE4")]
	public static extern int CSharp_SetListenerSpatialization__SWIG_0(ulong jarg1, bool jarg2, IntPtr jarg3, [In] float[] jarg4);

	[PreserveSig]
	[Token(Token = "0x60012A2")]
	[Address(RVA = "0xFB9DAC", Offset = "0xFB9DAC", VA = "0xFB9DAC")]
	public static extern int CSharp_SetListenerSpatialization__SWIG_1(ulong jarg1, bool jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x60012A3")]
	[Address(RVA = "0xFB9E5C", Offset = "0xFB9E5C", VA = "0xFB9E5C")]
	public static extern int CSharp_SetRTPCValue__SWIG_0(uint jarg1, float jarg2, ulong jarg3, int jarg4, int jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x60012A4")]
	[Address(RVA = "0xFB9F34", Offset = "0xFB9F34", VA = "0xFB9F34")]
	public static extern int CSharp_SetRTPCValue__SWIG_1(uint jarg1, float jarg2, ulong jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x60012A5")]
	[Address(RVA = "0xFBA004", Offset = "0xFBA004", VA = "0xFBA004")]
	public static extern int CSharp_SetRTPCValue__SWIG_2(uint jarg1, float jarg2, ulong jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x60012A6")]
	[Address(RVA = "0xFBA0C4", Offset = "0xFBA0C4", VA = "0xFBA0C4")]
	public static extern int CSharp_SetRTPCValue__SWIG_3(uint jarg1, float jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x60012A7")]
	[Address(RVA = "0xFBA17C", Offset = "0xFBA17C", VA = "0xFBA17C")]
	public static extern int CSharp_SetRTPCValue__SWIG_4(uint jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60012A8")]
	[Address(RVA = "0xFBA224", Offset = "0xFBA224", VA = "0xFBA224")]
	public static extern int CSharp_SetRTPCValue__SWIG_5(string jarg1, float jarg2, ulong jarg3, int jarg4, int jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x60012A9")]
	[Address(RVA = "0xFBA314", Offset = "0xFBA314", VA = "0xFBA314")]
	public static extern int CSharp_SetRTPCValue__SWIG_6(string jarg1, float jarg2, ulong jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x60012AA")]
	[Address(RVA = "0xFBA3FC", Offset = "0xFBA3FC", VA = "0xFBA3FC")]
	public static extern int CSharp_SetRTPCValue__SWIG_7(string jarg1, float jarg2, ulong jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x60012AB")]
	[Address(RVA = "0xFBA4D4", Offset = "0xFBA4D4", VA = "0xFBA4D4")]
	public static extern int CSharp_SetRTPCValue__SWIG_8(string jarg1, float jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x60012AC")]
	[Address(RVA = "0xFBA5A4", Offset = "0xFBA5A4", VA = "0xFBA5A4")]
	public static extern int CSharp_SetRTPCValue__SWIG_9(string jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60012AD")]
	[Address(RVA = "0xFBA664", Offset = "0xFBA664", VA = "0xFBA664")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_0(uint jarg1, float jarg2, uint jarg3, int jarg4, int jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x60012AE")]
	[Address(RVA = "0xFBA73C", Offset = "0xFBA73C", VA = "0xFBA73C")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_1(uint jarg1, float jarg2, uint jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x60012AF")]
	[Address(RVA = "0xFBA80C", Offset = "0xFBA80C", VA = "0xFBA80C")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_2(uint jarg1, float jarg2, uint jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x60012B0")]
	[Address(RVA = "0xFBA8CC", Offset = "0xFBA8CC", VA = "0xFBA8CC")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_3(uint jarg1, float jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60012B1")]
	[Address(RVA = "0xFBA984", Offset = "0xFBA984", VA = "0xFBA984")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_4(string jarg1, float jarg2, uint jarg3, int jarg4, int jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x60012B2")]
	[Address(RVA = "0xFBAA74", Offset = "0xFBAA74", VA = "0xFBAA74")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_5(string jarg1, float jarg2, uint jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x60012B3")]
	[Address(RVA = "0xFBAB5C", Offset = "0xFBAB5C", VA = "0xFBAB5C")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_6(string jarg1, float jarg2, uint jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x60012B4")]
	[Address(RVA = "0xFBAC34", Offset = "0xFBAC34", VA = "0xFBAC34")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_7(string jarg1, float jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60012B5")]
	[Address(RVA = "0xFBAD04", Offset = "0xFBAD04", VA = "0xFBAD04")]
	public static extern int CSharp_ResetRTPCValue__SWIG_0(uint jarg1, ulong jarg2, int jarg3, int jarg4, bool jarg5);

	[PreserveSig]
	[Token(Token = "0x60012B6")]
	[Address(RVA = "0xFBADCC", Offset = "0xFBADCC", VA = "0xFBADCC")]
	public static extern int CSharp_ResetRTPCValue__SWIG_1(uint jarg1, ulong jarg2, int jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x60012B7")]
	[Address(RVA = "0xFBAE8C", Offset = "0xFBAE8C", VA = "0xFBAE8C")]
	public static extern int CSharp_ResetRTPCValue__SWIG_2(uint jarg1, ulong jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x60012B8")]
	[Address(RVA = "0xFBAF3C", Offset = "0xFBAF3C", VA = "0xFBAF3C")]
	public static extern int CSharp_ResetRTPCValue__SWIG_3(uint jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x60012B9")]
	[Address(RVA = "0xFBAFE4", Offset = "0xFBAFE4", VA = "0xFBAFE4")]
	public static extern int CSharp_ResetRTPCValue__SWIG_4(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60012BA")]
	[Address(RVA = "0xFBB07C", Offset = "0xFBB07C", VA = "0xFBB07C")]
	public static extern int CSharp_ResetRTPCValue__SWIG_5(string jarg1, ulong jarg2, int jarg3, int jarg4, bool jarg5);

	[PreserveSig]
	[Token(Token = "0x60012BB")]
	[Address(RVA = "0xFBB15C", Offset = "0xFBB15C", VA = "0xFBB15C")]
	public static extern int CSharp_ResetRTPCValue__SWIG_6(string jarg1, ulong jarg2, int jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x60012BC")]
	[Address(RVA = "0xFBB234", Offset = "0xFBB234", VA = "0xFBB234")]
	public static extern int CSharp_ResetRTPCValue__SWIG_7(string jarg1, ulong jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x60012BD")]
	[Address(RVA = "0xFBB2FC", Offset = "0xFBB2FC", VA = "0xFBB2FC")]
	public static extern int CSharp_ResetRTPCValue__SWIG_8(string jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x60012BE")]
	[Address(RVA = "0xFBB3BC", Offset = "0xFBB3BC", VA = "0xFBB3BC")]
	public static extern int CSharp_ResetRTPCValue__SWIG_9(string jarg1);

	[PreserveSig]
	[Token(Token = "0x60012BF")]
	[Address(RVA = "0xFBB46C", Offset = "0xFBB46C", VA = "0xFBB46C")]
	public static extern int CSharp_SetSwitch__SWIG_0(uint jarg1, uint jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x60012C0")]
	[Address(RVA = "0xFBB51C", Offset = "0xFBB51C", VA = "0xFBB51C")]
	public static extern int CSharp_SetSwitch__SWIG_1(string jarg1, string jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x60012C1")]
	[Address(RVA = "0xFBB5F8", Offset = "0xFBB5F8", VA = "0xFBB5F8")]
	public static extern int CSharp_PostTrigger__SWIG_0(uint jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x60012C2")]
	[Address(RVA = "0xFBB6A0", Offset = "0xFBB6A0", VA = "0xFBB6A0")]
	public static extern int CSharp_PostTrigger__SWIG_1(string jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x60012C3")]
	[Address(RVA = "0xFBB760", Offset = "0xFBB760", VA = "0xFBB760")]
	public static extern int CSharp_SetState__SWIG_0(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60012C4")]
	[Address(RVA = "0xFBB808", Offset = "0xFBB808", VA = "0xFBB808")]
	public static extern int CSharp_SetState__SWIG_1(string jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x60012C5")]
	[Address(RVA = "0xFBB8E0", Offset = "0xFBB8E0", VA = "0xFBB8E0")]
	public static extern int CSharp_SetGameObjectAuxSendValues(ulong jarg1, IntPtr jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60012C6")]
	[Address(RVA = "0xFBB990", Offset = "0xFBB990", VA = "0xFBB990")]
	public static extern int CSharp_SetGameObjectOutputBusVolume(ulong jarg1, ulong jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x60012C7")]
	[Address(RVA = "0xFBBA48", Offset = "0xFBBA48", VA = "0xFBBA48")]
	public static extern int CSharp_SetActorMixerEffect(uint jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60012C8")]
	[Address(RVA = "0xFBBAF8", Offset = "0xFBBAF8", VA = "0xFBBAF8")]
	public static extern int CSharp_SetBusEffect__SWIG_0(uint jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60012C9")]
	[Address(RVA = "0xFBBBA8", Offset = "0xFBBBA8", VA = "0xFBBBA8")]
	public static extern int CSharp_SetBusEffect__SWIG_1(string jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60012CA")]
	[Address(RVA = "0xFBBC70", Offset = "0xFBBC70", VA = "0xFBBC70")]
	public static extern int CSharp_SetMixer__SWIG_0(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60012CB")]
	[Address(RVA = "0xFBBD18", Offset = "0xFBBD18", VA = "0xFBBD18")]
	public static extern int CSharp_SetMixer__SWIG_1(string jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60012CC")]
	[Address(RVA = "0xFBBDD8", Offset = "0xFBBDD8", VA = "0xFBBDD8")]
	public static extern int CSharp_SetBusConfig__SWIG_0(uint jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60012CD")]
	[Address(RVA = "0xFBBE80", Offset = "0xFBBE80", VA = "0xFBBE80")]
	public static extern int CSharp_SetBusConfig__SWIG_1(string jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60012CE")]
	[Address(RVA = "0xFBBF40", Offset = "0xFBBF40", VA = "0xFBBF40")]
	public static extern int CSharp_SetObjectObstructionAndOcclusion(ulong jarg1, ulong jarg2, float jarg3, float jarg4);

	[PreserveSig]
	[Token(Token = "0x60012CF")]
	[Address(RVA = "0xFBC000", Offset = "0xFBC000", VA = "0xFBC000")]
	public static extern int CSharp_SetMultipleObstructionAndOcclusion(ulong jarg1, ulong jarg2, IntPtr jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x60012D0")]
	[Address(RVA = "0xFBC0C0", Offset = "0xFBC0C0", VA = "0xFBC0C0")]
	public static extern int CSharp_StartOutputCapture(string jarg1);

	[PreserveSig]
	[Token(Token = "0x60012D1")]
	[Address(RVA = "0xFBC170", Offset = "0xFBC170", VA = "0xFBC170")]
	public static extern int CSharp_StopOutputCapture();

	[PreserveSig]
	[Token(Token = "0x60012D2")]
	[Address(RVA = "0xFBC1F8", Offset = "0xFBC1F8", VA = "0xFBC1F8")]
	public static extern int CSharp_AddOutputCaptureMarker(string jarg1);

	[PreserveSig]
	[Token(Token = "0x60012D3")]
	[Address(RVA = "0xFBC2A8", Offset = "0xFBC2A8", VA = "0xFBC2A8")]
	public static extern int CSharp_StartProfilerCapture(string jarg1);

	[PreserveSig]
	[Token(Token = "0x60012D4")]
	[Address(RVA = "0xFBC358", Offset = "0xFBC358", VA = "0xFBC358")]
	public static extern int CSharp_StopProfilerCapture();

	[PreserveSig]
	[Token(Token = "0x60012D5")]
	[Address(RVA = "0xFBC3E0", Offset = "0xFBC3E0", VA = "0xFBC3E0")]
	public static extern int CSharp_RemoveOutput(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60012D6")]
	[Address(RVA = "0xFBC478", Offset = "0xFBC478", VA = "0xFBC478")]
	public static extern int CSharp_ReplaceOutput__SWIG_0(IntPtr jarg1, ulong jarg2, out ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x60012D7")]
	[Address(RVA = "0xFBC528", Offset = "0xFBC528", VA = "0xFBC528")]
	public static extern int CSharp_ReplaceOutput__SWIG_1(IntPtr jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x60012D8")]
	[Address(RVA = "0xFBC5D0", Offset = "0xFBC5D0", VA = "0xFBC5D0")]
	public static extern ulong CSharp_GetOutputID__SWIG_0(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60012D9")]
	[Address(RVA = "0xFBC678", Offset = "0xFBC678", VA = "0xFBC678")]
	public static extern ulong CSharp_GetOutputID__SWIG_1(string jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60012DA")]
	[Address(RVA = "0xFBC738", Offset = "0xFBC738", VA = "0xFBC738")]
	public static extern int CSharp_SetBusDevice__SWIG_0(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60012DB")]
	[Address(RVA = "0xFBC7E0", Offset = "0xFBC7E0", VA = "0xFBC7E0")]
	public static extern int CSharp_SetBusDevice__SWIG_1(string jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x60012DC")]
	[Address(RVA = "0xFBC8B8", Offset = "0xFBC8B8", VA = "0xFBC8B8")]
	public static extern int CSharp_SetOutputVolume(ulong jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60012DD")]
	[Address(RVA = "0xFBC960", Offset = "0xFBC960", VA = "0xFBC960")]
	public static extern int CSharp_GetDeviceSpatialAudioSupport(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60012DE")]
	[Address(RVA = "0xFBC9F8", Offset = "0xFBC9F8", VA = "0xFBC9F8")]
	public static extern int CSharp_Suspend__SWIG_0(bool jarg1);

	[PreserveSig]
	[Token(Token = "0x60012DF")]
	[Address(RVA = "0xFBCA90", Offset = "0xFBCA90", VA = "0xFBCA90")]
	public static extern int CSharp_Suspend__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x60012E0")]
	[Address(RVA = "0xFBCB18", Offset = "0xFBCB18", VA = "0xFBCB18")]
	public static extern int CSharp_WakeupFromSuspend();

	[PreserveSig]
	[Token(Token = "0x60012E1")]
	[Address(RVA = "0xFBCBA0", Offset = "0xFBCBA0", VA = "0xFBCBA0")]
	public static extern uint CSharp_GetBufferTick();

	[PreserveSig]
	[Token(Token = "0x60012E2")]
	[Address(RVA = "0xFBCC28", Offset = "0xFBCC28", VA = "0xFBCC28")]
	public static extern void CSharp_AkSegmentInfo_iCurrentPosition_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60012E3")]
	[Address(RVA = "0xFBCCD0", Offset = "0xFBCCD0", VA = "0xFBCCD0")]
	public static extern int CSharp_AkSegmentInfo_iCurrentPosition_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012E4")]
	[Address(RVA = "0xFBCD68", Offset = "0xFBCD68", VA = "0xFBCD68")]
	public static extern void CSharp_AkSegmentInfo_iPreEntryDuration_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60012E5")]
	[Address(RVA = "0xFBCE10", Offset = "0xFBCE10", VA = "0xFBCE10")]
	public static extern int CSharp_AkSegmentInfo_iPreEntryDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012E6")]
	[Address(RVA = "0xFBCEA8", Offset = "0xFBCEA8", VA = "0xFBCEA8")]
	public static extern void CSharp_AkSegmentInfo_iActiveDuration_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60012E7")]
	[Address(RVA = "0xFBCF50", Offset = "0xFBCF50", VA = "0xFBCF50")]
	public static extern int CSharp_AkSegmentInfo_iActiveDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012E8")]
	[Address(RVA = "0xFBCFE8", Offset = "0xFBCFE8", VA = "0xFBCFE8")]
	public static extern void CSharp_AkSegmentInfo_iPostExitDuration_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60012E9")]
	[Address(RVA = "0xFBD090", Offset = "0xFBD090", VA = "0xFBD090")]
	public static extern int CSharp_AkSegmentInfo_iPostExitDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012EA")]
	[Address(RVA = "0xFBD128", Offset = "0xFBD128", VA = "0xFBD128")]
	public static extern void CSharp_AkSegmentInfo_iRemainingLookAheadTime_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60012EB")]
	[Address(RVA = "0xFBD1D0", Offset = "0xFBD1D0", VA = "0xFBD1D0")]
	public static extern int CSharp_AkSegmentInfo_iRemainingLookAheadTime_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012EC")]
	[Address(RVA = "0xFBD268", Offset = "0xFBD268", VA = "0xFBD268")]
	public static extern void CSharp_AkSegmentInfo_fBeatDuration_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60012ED")]
	[Address(RVA = "0xFBD310", Offset = "0xFBD310", VA = "0xFBD310")]
	public static extern float CSharp_AkSegmentInfo_fBeatDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012EE")]
	[Address(RVA = "0xFBD3A8", Offset = "0xFBD3A8", VA = "0xFBD3A8")]
	public static extern void CSharp_AkSegmentInfo_fBarDuration_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60012EF")]
	[Address(RVA = "0xFBD450", Offset = "0xFBD450", VA = "0xFBD450")]
	public static extern float CSharp_AkSegmentInfo_fBarDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012F0")]
	[Address(RVA = "0xFBD4E8", Offset = "0xFBD4E8", VA = "0xFBD4E8")]
	public static extern void CSharp_AkSegmentInfo_fGridDuration_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60012F1")]
	[Address(RVA = "0xFBD590", Offset = "0xFBD590", VA = "0xFBD590")]
	public static extern float CSharp_AkSegmentInfo_fGridDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012F2")]
	[Address(RVA = "0xFBD628", Offset = "0xFBD628", VA = "0xFBD628")]
	public static extern void CSharp_AkSegmentInfo_fGridOffset_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60012F3")]
	[Address(RVA = "0xFBD6D0", Offset = "0xFBD6D0", VA = "0xFBD6D0")]
	public static extern float CSharp_AkSegmentInfo_fGridOffset_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012F4")]
	[Address(RVA = "0xFBD768", Offset = "0xFBD768", VA = "0xFBD768")]
	public static extern IntPtr CSharp_new_AkSegmentInfo();

	[PreserveSig]
	[Token(Token = "0x60012F5")]
	[Address(RVA = "0xFBD7F0", Offset = "0xFBD7F0", VA = "0xFBD7F0")]
	public static extern void CSharp_delete_AkSegmentInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012F6")]
	[Address(RVA = "0xFBD888", Offset = "0xFBD888", VA = "0xFBD888")]
	public static extern byte CSharp_AK_INVALID_MIDI_CHANNEL_get();

	[PreserveSig]
	[Token(Token = "0x60012F7")]
	[Address(RVA = "0xFBD910", Offset = "0xFBD910", VA = "0xFBD910")]
	public static extern byte CSharp_AK_INVALID_MIDI_NOTE_get();

	[PreserveSig]
	[Token(Token = "0x60012F8")]
	[Address(RVA = "0xFBD998", Offset = "0xFBD998", VA = "0xFBD998")]
	public static extern void CSharp_AkMIDIEvent_byChan_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x60012F9")]
	[Address(RVA = "0xFBDA40", Offset = "0xFBDA40", VA = "0xFBDA40")]
	public static extern byte CSharp_AkMIDIEvent_byChan_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012FA")]
	[Address(RVA = "0xFBDAD8", Offset = "0xFBDAD8", VA = "0xFBDAD8")]
	public static extern void CSharp_AkMIDIEvent_tGen_byParam1_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x60012FB")]
	[Address(RVA = "0xFBDB80", Offset = "0xFBDB80", VA = "0xFBDB80")]
	public static extern byte CSharp_AkMIDIEvent_tGen_byParam1_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012FC")]
	[Address(RVA = "0xFBDC18", Offset = "0xFBDC18", VA = "0xFBDC18")]
	public static extern void CSharp_AkMIDIEvent_tGen_byParam2_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x60012FD")]
	[Address(RVA = "0xFBDCC0", Offset = "0xFBDCC0", VA = "0xFBDCC0")]
	public static extern byte CSharp_AkMIDIEvent_tGen_byParam2_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60012FE")]
	[Address(RVA = "0xFBDD58", Offset = "0xFBDD58", VA = "0xFBDD58")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tGen();

	[PreserveSig]
	[Token(Token = "0x60012FF")]
	[Address(RVA = "0xFBDDE0", Offset = "0xFBDDE0", VA = "0xFBDDE0")]
	public static extern void CSharp_delete_AkMIDIEvent_tGen(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001300")]
	[Address(RVA = "0xFBDE78", Offset = "0xFBDE78", VA = "0xFBDE78")]
	public static extern void CSharp_AkMIDIEvent_tNoteOnOff_byNote_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001301")]
	[Address(RVA = "0xFBDF20", Offset = "0xFBDF20", VA = "0xFBDF20")]
	public static extern byte CSharp_AkMIDIEvent_tNoteOnOff_byNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001302")]
	[Address(RVA = "0xFBDFB8", Offset = "0xFBDFB8", VA = "0xFBDFB8")]
	public static extern void CSharp_AkMIDIEvent_tNoteOnOff_byVelocity_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001303")]
	[Address(RVA = "0xFBE060", Offset = "0xFBE060", VA = "0xFBE060")]
	public static extern byte CSharp_AkMIDIEvent_tNoteOnOff_byVelocity_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001304")]
	[Address(RVA = "0xFBE0F8", Offset = "0xFBE0F8", VA = "0xFBE0F8")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tNoteOnOff();

	[PreserveSig]
	[Token(Token = "0x6001305")]
	[Address(RVA = "0xFBE180", Offset = "0xFBE180", VA = "0xFBE180")]
	public static extern void CSharp_delete_AkMIDIEvent_tNoteOnOff(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001306")]
	[Address(RVA = "0xFBE218", Offset = "0xFBE218", VA = "0xFBE218")]
	public static extern void CSharp_AkMIDIEvent_tCc_byCc_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001307")]
	[Address(RVA = "0xFBE2C0", Offset = "0xFBE2C0", VA = "0xFBE2C0")]
	public static extern byte CSharp_AkMIDIEvent_tCc_byCc_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001308")]
	[Address(RVA = "0xFBE358", Offset = "0xFBE358", VA = "0xFBE358")]
	public static extern void CSharp_AkMIDIEvent_tCc_byValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001309")]
	[Address(RVA = "0xFBE400", Offset = "0xFBE400", VA = "0xFBE400")]
	public static extern byte CSharp_AkMIDIEvent_tCc_byValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600130A")]
	[Address(RVA = "0xFBE498", Offset = "0xFBE498", VA = "0xFBE498")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tCc();

	[PreserveSig]
	[Token(Token = "0x600130B")]
	[Address(RVA = "0xFBE520", Offset = "0xFBE520", VA = "0xFBE520")]
	public static extern void CSharp_delete_AkMIDIEvent_tCc(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600130C")]
	[Address(RVA = "0xFBE5B8", Offset = "0xFBE5B8", VA = "0xFBE5B8")]
	public static extern void CSharp_AkMIDIEvent_tPitchBend_byValueLsb_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x600130D")]
	[Address(RVA = "0xFBE660", Offset = "0xFBE660", VA = "0xFBE660")]
	public static extern byte CSharp_AkMIDIEvent_tPitchBend_byValueLsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600130E")]
	[Address(RVA = "0xFBE6F8", Offset = "0xFBE6F8", VA = "0xFBE6F8")]
	public static extern void CSharp_AkMIDIEvent_tPitchBend_byValueMsb_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x600130F")]
	[Address(RVA = "0xFBE7A0", Offset = "0xFBE7A0", VA = "0xFBE7A0")]
	public static extern byte CSharp_AkMIDIEvent_tPitchBend_byValueMsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001310")]
	[Address(RVA = "0xFBE838", Offset = "0xFBE838", VA = "0xFBE838")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tPitchBend();

	[PreserveSig]
	[Token(Token = "0x6001311")]
	[Address(RVA = "0xFBE8C0", Offset = "0xFBE8C0", VA = "0xFBE8C0")]
	public static extern void CSharp_delete_AkMIDIEvent_tPitchBend(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001312")]
	[Address(RVA = "0xFBE958", Offset = "0xFBE958", VA = "0xFBE958")]
	public static extern void CSharp_AkMIDIEvent_tNoteAftertouch_byNote_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001313")]
	[Address(RVA = "0xFBEA00", Offset = "0xFBEA00", VA = "0xFBEA00")]
	public static extern byte CSharp_AkMIDIEvent_tNoteAftertouch_byNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001314")]
	[Address(RVA = "0xFBEA98", Offset = "0xFBEA98", VA = "0xFBEA98")]
	public static extern void CSharp_AkMIDIEvent_tNoteAftertouch_byValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001315")]
	[Address(RVA = "0xFBEB40", Offset = "0xFBEB40", VA = "0xFBEB40")]
	public static extern byte CSharp_AkMIDIEvent_tNoteAftertouch_byValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001316")]
	[Address(RVA = "0xFBEBD8", Offset = "0xFBEBD8", VA = "0xFBEBD8")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tNoteAftertouch();

	[PreserveSig]
	[Token(Token = "0x6001317")]
	[Address(RVA = "0xFBEC60", Offset = "0xFBEC60", VA = "0xFBEC60")]
	public static extern void CSharp_delete_AkMIDIEvent_tNoteAftertouch(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001318")]
	[Address(RVA = "0xFBECF8", Offset = "0xFBECF8", VA = "0xFBECF8")]
	public static extern void CSharp_AkMIDIEvent_tChanAftertouch_byValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001319")]
	[Address(RVA = "0xFBEDA0", Offset = "0xFBEDA0", VA = "0xFBEDA0")]
	public static extern byte CSharp_AkMIDIEvent_tChanAftertouch_byValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600131A")]
	[Address(RVA = "0xFBEE38", Offset = "0xFBEE38", VA = "0xFBEE38")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tChanAftertouch();

	[PreserveSig]
	[Token(Token = "0x600131B")]
	[Address(RVA = "0xFBEEC0", Offset = "0xFBEEC0", VA = "0xFBEEC0")]
	public static extern void CSharp_delete_AkMIDIEvent_tChanAftertouch(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600131C")]
	[Address(RVA = "0xFBEF58", Offset = "0xFBEF58", VA = "0xFBEF58")]
	public static extern void CSharp_AkMIDIEvent_tProgramChange_byProgramNum_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x600131D")]
	[Address(RVA = "0xFBF000", Offset = "0xFBF000", VA = "0xFBF000")]
	public static extern byte CSharp_AkMIDIEvent_tProgramChange_byProgramNum_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600131E")]
	[Address(RVA = "0xFBF098", Offset = "0xFBF098", VA = "0xFBF098")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tProgramChange();

	[PreserveSig]
	[Token(Token = "0x600131F")]
	[Address(RVA = "0xFBF120", Offset = "0xFBF120", VA = "0xFBF120")]
	public static extern void CSharp_delete_AkMIDIEvent_tProgramChange(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001320")]
	[Address(RVA = "0xFBF1B8", Offset = "0xFBF1B8", VA = "0xFBF1B8")]
	public static extern void CSharp_AkMIDIEvent_Gen_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001321")]
	[Address(RVA = "0xFBF260", Offset = "0xFBF260", VA = "0xFBF260")]
	public static extern IntPtr CSharp_AkMIDIEvent_Gen_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001322")]
	[Address(RVA = "0xFBF2F8", Offset = "0xFBF2F8", VA = "0xFBF2F8")]
	public static extern void CSharp_AkMIDIEvent_Cc_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001323")]
	[Address(RVA = "0xFBF3A0", Offset = "0xFBF3A0", VA = "0xFBF3A0")]
	public static extern IntPtr CSharp_AkMIDIEvent_Cc_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001324")]
	[Address(RVA = "0xFBF438", Offset = "0xFBF438", VA = "0xFBF438")]
	public static extern void CSharp_AkMIDIEvent_NoteOnOff_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001325")]
	[Address(RVA = "0xFBF4E0", Offset = "0xFBF4E0", VA = "0xFBF4E0")]
	public static extern IntPtr CSharp_AkMIDIEvent_NoteOnOff_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001326")]
	[Address(RVA = "0xFBF578", Offset = "0xFBF578", VA = "0xFBF578")]
	public static extern void CSharp_AkMIDIEvent_PitchBend_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001327")]
	[Address(RVA = "0xFBF620", Offset = "0xFBF620", VA = "0xFBF620")]
	public static extern IntPtr CSharp_AkMIDIEvent_PitchBend_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001328")]
	[Address(RVA = "0xFBF6B8", Offset = "0xFBF6B8", VA = "0xFBF6B8")]
	public static extern void CSharp_AkMIDIEvent_NoteAftertouch_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001329")]
	[Address(RVA = "0xFBF760", Offset = "0xFBF760", VA = "0xFBF760")]
	public static extern IntPtr CSharp_AkMIDIEvent_NoteAftertouch_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600132A")]
	[Address(RVA = "0xFBF7F8", Offset = "0xFBF7F8", VA = "0xFBF7F8")]
	public static extern void CSharp_AkMIDIEvent_ChanAftertouch_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600132B")]
	[Address(RVA = "0xFBF8A0", Offset = "0xFBF8A0", VA = "0xFBF8A0")]
	public static extern IntPtr CSharp_AkMIDIEvent_ChanAftertouch_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600132C")]
	[Address(RVA = "0xFBF938", Offset = "0xFBF938", VA = "0xFBF938")]
	public static extern void CSharp_AkMIDIEvent_ProgramChange_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600132D")]
	[Address(RVA = "0xFBF9E0", Offset = "0xFBF9E0", VA = "0xFBF9E0")]
	public static extern IntPtr CSharp_AkMIDIEvent_ProgramChange_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600132E")]
	[Address(RVA = "0xFBFA78", Offset = "0xFBFA78", VA = "0xFBFA78")]
	public static extern void CSharp_AkMIDIEvent_byType_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x600132F")]
	[Address(RVA = "0xFBFB20", Offset = "0xFBFB20", VA = "0xFBFB20")]
	public static extern int CSharp_AkMIDIEvent_byType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001330")]
	[Address(RVA = "0xFBFBB8", Offset = "0xFBFBB8", VA = "0xFBFBB8")]
	public static extern void CSharp_AkMIDIEvent_byOnOffNote_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001331")]
	[Address(RVA = "0xFBFC60", Offset = "0xFBFC60", VA = "0xFBFC60")]
	public static extern byte CSharp_AkMIDIEvent_byOnOffNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001332")]
	[Address(RVA = "0xFBFCF8", Offset = "0xFBFCF8", VA = "0xFBFCF8")]
	public static extern void CSharp_AkMIDIEvent_byVelocity_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001333")]
	[Address(RVA = "0xFBFDA0", Offset = "0xFBFDA0", VA = "0xFBFDA0")]
	public static extern byte CSharp_AkMIDIEvent_byVelocity_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001334")]
	[Address(RVA = "0xFBFE38", Offset = "0xFBFE38", VA = "0xFBFE38")]
	public static extern void CSharp_AkMIDIEvent_byCc_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001335")]
	[Address(RVA = "0xFBFEE0", Offset = "0xFBFEE0", VA = "0xFBFEE0")]
	public static extern int CSharp_AkMIDIEvent_byCc_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001336")]
	[Address(RVA = "0xFBFF78", Offset = "0xFBFF78", VA = "0xFBFF78")]
	public static extern void CSharp_AkMIDIEvent_byCcValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001337")]
	[Address(RVA = "0xFC0020", Offset = "0xFC0020", VA = "0xFC0020")]
	public static extern byte CSharp_AkMIDIEvent_byCcValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001338")]
	[Address(RVA = "0xFC00B8", Offset = "0xFC00B8", VA = "0xFC00B8")]
	public static extern void CSharp_AkMIDIEvent_byValueLsb_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001339")]
	[Address(RVA = "0xFC0160", Offset = "0xFC0160", VA = "0xFC0160")]
	public static extern byte CSharp_AkMIDIEvent_byValueLsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600133A")]
	[Address(RVA = "0xFC01F8", Offset = "0xFC01F8", VA = "0xFC01F8")]
	public static extern void CSharp_AkMIDIEvent_byValueMsb_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x600133B")]
	[Address(RVA = "0xFC02A0", Offset = "0xFC02A0", VA = "0xFC02A0")]
	public static extern byte CSharp_AkMIDIEvent_byValueMsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600133C")]
	[Address(RVA = "0xFC0338", Offset = "0xFC0338", VA = "0xFC0338")]
	public static extern void CSharp_AkMIDIEvent_byAftertouchNote_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x600133D")]
	[Address(RVA = "0xFC03E0", Offset = "0xFC03E0", VA = "0xFC03E0")]
	public static extern byte CSharp_AkMIDIEvent_byAftertouchNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600133E")]
	[Address(RVA = "0xFC0478", Offset = "0xFC0478", VA = "0xFC0478")]
	public static extern void CSharp_AkMIDIEvent_byNoteAftertouchValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x600133F")]
	[Address(RVA = "0xFC0520", Offset = "0xFC0520", VA = "0xFC0520")]
	public static extern byte CSharp_AkMIDIEvent_byNoteAftertouchValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001340")]
	[Address(RVA = "0xFC05B8", Offset = "0xFC05B8", VA = "0xFC05B8")]
	public static extern void CSharp_AkMIDIEvent_byChanAftertouchValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001341")]
	[Address(RVA = "0xFC0660", Offset = "0xFC0660", VA = "0xFC0660")]
	public static extern byte CSharp_AkMIDIEvent_byChanAftertouchValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001342")]
	[Address(RVA = "0xFC06F8", Offset = "0xFC06F8", VA = "0xFC06F8")]
	public static extern void CSharp_AkMIDIEvent_byProgramNum_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001343")]
	[Address(RVA = "0xFC07A0", Offset = "0xFC07A0", VA = "0xFC07A0")]
	public static extern byte CSharp_AkMIDIEvent_byProgramNum_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001344")]
	[Address(RVA = "0xFC0838", Offset = "0xFC0838", VA = "0xFC0838")]
	public static extern IntPtr CSharp_new_AkMIDIEvent();

	[PreserveSig]
	[Token(Token = "0x6001345")]
	[Address(RVA = "0xFC08C0", Offset = "0xFC08C0", VA = "0xFC08C0")]
	public static extern void CSharp_delete_AkMIDIEvent(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001346")]
	[Address(RVA = "0xFC0958", Offset = "0xFC0958", VA = "0xFC0958")]
	public static extern void CSharp_AkMIDIPost_uOffset_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001347")]
	[Address(RVA = "0xFC0A00", Offset = "0xFC0A00", VA = "0xFC0A00")]
	public static extern uint CSharp_AkMIDIPost_uOffset_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001348")]
	[Address(RVA = "0xFC0A98", Offset = "0xFC0A98", VA = "0xFC0A98")]
	public static extern int CSharp_AkMIDIPost_PostOnEvent(IntPtr jarg1, uint jarg2, ulong jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6001349")]
	[Address(RVA = "0xFC0B58", Offset = "0xFC0B58", VA = "0xFC0B58")]
	public static extern void CSharp_AkMIDIPost_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600134A")]
	[Address(RVA = "0xFC0C00", Offset = "0xFC0C00", VA = "0xFC0C00")]
	public static extern int CSharp_AkMIDIPost_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x600134B")]
	[Address(RVA = "0xFC0C88", Offset = "0xFC0C88", VA = "0xFC0C88")]
	public static extern IntPtr CSharp_new_AkMIDIPost();

	[PreserveSig]
	[Token(Token = "0x600134C")]
	[Address(RVA = "0xFC0D10", Offset = "0xFC0D10", VA = "0xFC0D10")]
	public static extern void CSharp_delete_AkMIDIPost(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600134D")]
	[Address(RVA = "0xFC0DA8", Offset = "0xFC0DA8", VA = "0xFC0DA8")]
	public static extern IntPtr CSharp_new_AkMemSettings();

	[PreserveSig]
	[Token(Token = "0x600134E")]
	[Address(RVA = "0xFC0E30", Offset = "0xFC0E30", VA = "0xFC0E30")]
	public static extern void CSharp_AkMemSettings_uMaxNumPools_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600134F")]
	[Address(RVA = "0xFC0ED8", Offset = "0xFC0ED8", VA = "0xFC0ED8")]
	public static extern uint CSharp_AkMemSettings_uMaxNumPools_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001350")]
	[Address(RVA = "0xFC0F70", Offset = "0xFC0F70", VA = "0xFC0F70")]
	public static extern void CSharp_AkMemSettings_uDebugFlags_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001351")]
	[Address(RVA = "0xFC1018", Offset = "0xFC1018", VA = "0xFC1018")]
	public static extern uint CSharp_AkMemSettings_uDebugFlags_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001352")]
	[Address(RVA = "0xFC10B0", Offset = "0xFC10B0", VA = "0xFC10B0")]
	public static extern void CSharp_delete_AkMemSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001353")]
	[Address(RVA = "0xFC1148", Offset = "0xFC1148", VA = "0xFC1148")]
	public static extern void CSharp_AkMusicSettings_fStreamingLookAheadRatio_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001354")]
	[Address(RVA = "0xFC11F0", Offset = "0xFC11F0", VA = "0xFC11F0")]
	public static extern float CSharp_AkMusicSettings_fStreamingLookAheadRatio_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001355")]
	[Address(RVA = "0xFC1288", Offset = "0xFC1288", VA = "0xFC1288")]
	public static extern IntPtr CSharp_new_AkMusicSettings();

	[PreserveSig]
	[Token(Token = "0x6001356")]
	[Address(RVA = "0xFC1310", Offset = "0xFC1310", VA = "0xFC1310")]
	public static extern void CSharp_delete_AkMusicSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001357")]
	[Address(RVA = "0xFC13A8", Offset = "0xFC13A8", VA = "0xFC13A8")]
	public static extern int CSharp_GetPlayingSegmentInfo__SWIG_0(uint jarg1, IntPtr jarg2, bool jarg3);

	[PreserveSig]
	[Token(Token = "0x6001358")]
	[Address(RVA = "0xFC1458", Offset = "0xFC1458", VA = "0xFC1458")]
	public static extern int CSharp_GetPlayingSegmentInfo__SWIG_1(uint jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001359")]
	[Address(RVA = "0xFC1500", Offset = "0xFC1500", VA = "0xFC1500")]
	public static extern IntPtr CSharp_AkSerializedCallbackHeader_pPackage_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600135A")]
	[Address(RVA = "0xFC1598", Offset = "0xFC1598", VA = "0xFC1598")]
	public static extern IntPtr CSharp_AkSerializedCallbackHeader_pNext_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600135B")]
	[Address(RVA = "0xFC1630", Offset = "0xFC1630", VA = "0xFC1630")]
	public static extern int CSharp_AkSerializedCallbackHeader_eType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600135C")]
	[Address(RVA = "0xFC16C8", Offset = "0xFC16C8", VA = "0xFC16C8")]
	public static extern IntPtr CSharp_AkSerializedCallbackHeader_GetData(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600135D")]
	[Address(RVA = "0xFC1760", Offset = "0xFC1760", VA = "0xFC1760")]
	public static extern IntPtr CSharp_new_AkSerializedCallbackHeader();

	[PreserveSig]
	[Token(Token = "0x600135E")]
	[Address(RVA = "0xFC17E8", Offset = "0xFC17E8", VA = "0xFC17E8")]
	public static extern void CSharp_delete_AkSerializedCallbackHeader(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600135F")]
	[Address(RVA = "0xFC1880", Offset = "0xFC1880", VA = "0xFC1880")]
	public static extern IntPtr CSharp_AkCallbackInfo_pCookie_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001360")]
	[Address(RVA = "0xFC1918", Offset = "0xFC1918", VA = "0xFC1918")]
	public static extern ulong CSharp_AkCallbackInfo_gameObjID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001361")]
	[Address(RVA = "0xFC19B0", Offset = "0xFC19B0", VA = "0xFC19B0")]
	public static extern IntPtr CSharp_new_AkCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6001362")]
	[Address(RVA = "0xFC1A38", Offset = "0xFC1A38", VA = "0xFC1A38")]
	public static extern void CSharp_delete_AkCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001363")]
	[Address(RVA = "0xFC1AD0", Offset = "0xFC1AD0", VA = "0xFC1AD0")]
	public static extern uint CSharp_AkEventCallbackInfo_playingID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001364")]
	[Address(RVA = "0xFC1B68", Offset = "0xFC1B68", VA = "0xFC1B68")]
	public static extern uint CSharp_AkEventCallbackInfo_eventID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001365")]
	[Address(RVA = "0xFC1C00", Offset = "0xFC1C00", VA = "0xFC1C00")]
	public static extern IntPtr CSharp_new_AkEventCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6001366")]
	[Address(RVA = "0xFC1C88", Offset = "0xFC1C88", VA = "0xFC1C88")]
	public static extern void CSharp_delete_AkEventCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001367")]
	[Address(RVA = "0xFC1D20", Offset = "0xFC1D20", VA = "0xFC1D20")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byChan_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001368")]
	[Address(RVA = "0xFC1DB8", Offset = "0xFC1DB8", VA = "0xFC1DB8")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byParam1_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001369")]
	[Address(RVA = "0xFC1E50", Offset = "0xFC1E50", VA = "0xFC1E50")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byParam2_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600136A")]
	[Address(RVA = "0xFC1EE8", Offset = "0xFC1EE8", VA = "0xFC1EE8")]
	public static extern int CSharp_AkMIDIEventCallbackInfo_byType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600136B")]
	[Address(RVA = "0xFC1F80", Offset = "0xFC1F80", VA = "0xFC1F80")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byOnOffNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600136C")]
	[Address(RVA = "0xFC2018", Offset = "0xFC2018", VA = "0xFC2018")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byVelocity_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600136D")]
	[Address(RVA = "0xFC20B0", Offset = "0xFC20B0", VA = "0xFC20B0")]
	public static extern int CSharp_AkMIDIEventCallbackInfo_byCc_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600136E")]
	[Address(RVA = "0xFC2148", Offset = "0xFC2148", VA = "0xFC2148")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byCcValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600136F")]
	[Address(RVA = "0xFC21E0", Offset = "0xFC21E0", VA = "0xFC21E0")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byValueLsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001370")]
	[Address(RVA = "0xFC2278", Offset = "0xFC2278", VA = "0xFC2278")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byValueMsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001371")]
	[Address(RVA = "0xFC2310", Offset = "0xFC2310", VA = "0xFC2310")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byAftertouchNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001372")]
	[Address(RVA = "0xFC23A8", Offset = "0xFC23A8", VA = "0xFC23A8")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byNoteAftertouchValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001373")]
	[Address(RVA = "0xFC2440", Offset = "0xFC2440", VA = "0xFC2440")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byChanAftertouchValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001374")]
	[Address(RVA = "0xFC24D8", Offset = "0xFC24D8", VA = "0xFC24D8")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byProgramNum_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001375")]
	[Address(RVA = "0xFC2570", Offset = "0xFC2570", VA = "0xFC2570")]
	public static extern IntPtr CSharp_new_AkMIDIEventCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6001376")]
	[Address(RVA = "0xFC25F8", Offset = "0xFC25F8", VA = "0xFC25F8")]
	public static extern void CSharp_delete_AkMIDIEventCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001377")]
	[Address(RVA = "0xFC2690", Offset = "0xFC2690", VA = "0xFC2690")]
	public static extern uint CSharp_AkMarkerCallbackInfo_uIdentifier_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001378")]
	[Address(RVA = "0xFC2728", Offset = "0xFC2728", VA = "0xFC2728")]
	public static extern uint CSharp_AkMarkerCallbackInfo_uPosition_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001379")]
	[Address(RVA = "0xFC27C0", Offset = "0xFC27C0", VA = "0xFC27C0")]
	public static extern IntPtr CSharp_AkMarkerCallbackInfo_strLabel_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600137A")]
	[Address(RVA = "0xFC2858", Offset = "0xFC2858", VA = "0xFC2858")]
	public static extern IntPtr CSharp_new_AkMarkerCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x600137B")]
	[Address(RVA = "0xFC28E0", Offset = "0xFC28E0", VA = "0xFC28E0")]
	public static extern void CSharp_delete_AkMarkerCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600137C")]
	[Address(RVA = "0xFC2978", Offset = "0xFC2978", VA = "0xFC2978")]
	public static extern float CSharp_AkDurationCallbackInfo_fDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600137D")]
	[Address(RVA = "0xFC2A10", Offset = "0xFC2A10", VA = "0xFC2A10")]
	public static extern float CSharp_AkDurationCallbackInfo_fEstimatedDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600137E")]
	[Address(RVA = "0xFC2AA8", Offset = "0xFC2AA8", VA = "0xFC2AA8")]
	public static extern uint CSharp_AkDurationCallbackInfo_audioNodeID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600137F")]
	[Address(RVA = "0xFC2B40", Offset = "0xFC2B40", VA = "0xFC2B40")]
	public static extern uint CSharp_AkDurationCallbackInfo_mediaID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001380")]
	[Address(RVA = "0xFC2BD8", Offset = "0xFC2BD8", VA = "0xFC2BD8")]
	public static extern bool CSharp_AkDurationCallbackInfo_bStreaming_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001381")]
	[Address(RVA = "0xFC2C78", Offset = "0xFC2C78", VA = "0xFC2C78")]
	public static extern IntPtr CSharp_new_AkDurationCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6001382")]
	[Address(RVA = "0xFC2D00", Offset = "0xFC2D00", VA = "0xFC2D00")]
	public static extern void CSharp_delete_AkDurationCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001383")]
	[Address(RVA = "0xFC2D98", Offset = "0xFC2D98", VA = "0xFC2D98")]
	public static extern uint CSharp_AkDynamicSequenceItemCallbackInfo_playingID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001384")]
	[Address(RVA = "0xFC2E30", Offset = "0xFC2E30", VA = "0xFC2E30")]
	public static extern uint CSharp_AkDynamicSequenceItemCallbackInfo_audioNodeID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001385")]
	[Address(RVA = "0xFC2EC8", Offset = "0xFC2EC8", VA = "0xFC2EC8")]
	public static extern IntPtr CSharp_AkDynamicSequenceItemCallbackInfo_pCustomInfo_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001386")]
	[Address(RVA = "0xFC2F60", Offset = "0xFC2F60", VA = "0xFC2F60")]
	public static extern IntPtr CSharp_new_AkDynamicSequenceItemCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6001387")]
	[Address(RVA = "0xFC2FE8", Offset = "0xFC2FE8", VA = "0xFC2FE8")]
	public static extern void CSharp_delete_AkDynamicSequenceItemCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001388")]
	[Address(RVA = "0xFC3080", Offset = "0xFC3080", VA = "0xFC3080")]
	public static extern uint CSharp_AkMusicSyncCallbackInfo_playingID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001389")]
	[Address(RVA = "0xFC3118", Offset = "0xFC3118", VA = "0xFC3118")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iCurrentPosition_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600138A")]
	[Address(RVA = "0xFC31B0", Offset = "0xFC31B0", VA = "0xFC31B0")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iPreEntryDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600138B")]
	[Address(RVA = "0xFC3248", Offset = "0xFC3248", VA = "0xFC3248")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iActiveDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600138C")]
	[Address(RVA = "0xFC32E0", Offset = "0xFC32E0", VA = "0xFC32E0")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iPostExitDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600138D")]
	[Address(RVA = "0xFC3378", Offset = "0xFC3378", VA = "0xFC3378")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iRemainingLookAheadTime_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600138E")]
	[Address(RVA = "0xFC3410", Offset = "0xFC3410", VA = "0xFC3410")]
	public static extern float CSharp_AkMusicSyncCallbackInfo_segmentInfo_fBeatDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600138F")]
	[Address(RVA = "0xFC34A8", Offset = "0xFC34A8", VA = "0xFC34A8")]
	public static extern float CSharp_AkMusicSyncCallbackInfo_segmentInfo_fBarDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001390")]
	[Address(RVA = "0xFC3540", Offset = "0xFC3540", VA = "0xFC3540")]
	public static extern float CSharp_AkMusicSyncCallbackInfo_segmentInfo_fGridDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001391")]
	[Address(RVA = "0xFC35D8", Offset = "0xFC35D8", VA = "0xFC35D8")]
	public static extern float CSharp_AkMusicSyncCallbackInfo_segmentInfo_fGridOffset_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001392")]
	[Address(RVA = "0xFC3670", Offset = "0xFC3670", VA = "0xFC3670")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_musicSyncType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001393")]
	[Address(RVA = "0xFC3708", Offset = "0xFC3708", VA = "0xFC3708")]
	public static extern IntPtr CSharp_AkMusicSyncCallbackInfo_userCueName_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001394")]
	[Address(RVA = "0xFC37A0", Offset = "0xFC37A0", VA = "0xFC37A0")]
	public static extern IntPtr CSharp_new_AkMusicSyncCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6001395")]
	[Address(RVA = "0xFC3828", Offset = "0xFC3828", VA = "0xFC3828")]
	public static extern void CSharp_delete_AkMusicSyncCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001396")]
	[Address(RVA = "0xFC38C0", Offset = "0xFC38C0", VA = "0xFC38C0")]
	public static extern uint CSharp_AkMusicPlaylistCallbackInfo_playlistID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001397")]
	[Address(RVA = "0xFC3958", Offset = "0xFC3958", VA = "0xFC3958")]
	public static extern uint CSharp_AkMusicPlaylistCallbackInfo_uNumPlaylistItems_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001398")]
	[Address(RVA = "0xFC39F0", Offset = "0xFC39F0", VA = "0xFC39F0")]
	public static extern uint CSharp_AkMusicPlaylistCallbackInfo_uPlaylistSelection_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001399")]
	[Address(RVA = "0xFC3A88", Offset = "0xFC3A88", VA = "0xFC3A88")]
	public static extern uint CSharp_AkMusicPlaylistCallbackInfo_uPlaylistItemDone_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600139A")]
	[Address(RVA = "0xFC3B20", Offset = "0xFC3B20", VA = "0xFC3B20")]
	public static extern IntPtr CSharp_new_AkMusicPlaylistCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x600139B")]
	[Address(RVA = "0xFC3BA8", Offset = "0xFC3BA8", VA = "0xFC3BA8")]
	public static extern void CSharp_delete_AkMusicPlaylistCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600139C")]
	[Address(RVA = "0xFC3C40", Offset = "0xFC3C40", VA = "0xFC3C40")]
	public static extern uint CSharp_AkBankCallbackInfo_bankID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600139D")]
	[Address(RVA = "0xFC3CD8", Offset = "0xFC3CD8", VA = "0xFC3CD8")]
	public static extern IntPtr CSharp_AkBankCallbackInfo_inMemoryBankPtr_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600139E")]
	[Address(RVA = "0xFC3D70", Offset = "0xFC3D70", VA = "0xFC3D70")]
	public static extern int CSharp_AkBankCallbackInfo_loadResult_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600139F")]
	[Address(RVA = "0xFC3E08", Offset = "0xFC3E08", VA = "0xFC3E08")]
	public static extern int CSharp_AkBankCallbackInfo_memPoolId_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013A0")]
	[Address(RVA = "0xFC3EA0", Offset = "0xFC3EA0", VA = "0xFC3EA0")]
	public static extern IntPtr CSharp_new_AkBankCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x60013A1")]
	[Address(RVA = "0xFC3F28", Offset = "0xFC3F28", VA = "0xFC3F28")]
	public static extern void CSharp_delete_AkBankCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013A2")]
	[Address(RVA = "0xFC3FC0", Offset = "0xFC3FC0", VA = "0xFC3FC0")]
	public static extern int CSharp_AkMonitoringCallbackInfo_errorCode_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013A3")]
	[Address(RVA = "0xFC4058", Offset = "0xFC4058", VA = "0xFC4058")]
	public static extern int CSharp_AkMonitoringCallbackInfo_errorLevel_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013A4")]
	[Address(RVA = "0xFC40F0", Offset = "0xFC40F0", VA = "0xFC40F0")]
	public static extern uint CSharp_AkMonitoringCallbackInfo_playingID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013A5")]
	[Address(RVA = "0xFC4188", Offset = "0xFC4188", VA = "0xFC4188")]
	public static extern ulong CSharp_AkMonitoringCallbackInfo_gameObjID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013A6")]
	[Address(RVA = "0xFC4220", Offset = "0xFC4220", VA = "0xFC4220")]
	public static extern IntPtr CSharp_AkMonitoringCallbackInfo_message_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013A7")]
	[Address(RVA = "0xFC42B8", Offset = "0xFC42B8", VA = "0xFC42B8")]
	public static extern IntPtr CSharp_new_AkMonitoringCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x60013A8")]
	[Address(RVA = "0xFC4340", Offset = "0xFC4340", VA = "0xFC4340")]
	public static extern void CSharp_delete_AkMonitoringCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013A9")]
	[Address(RVA = "0xFC43D8", Offset = "0xFC43D8", VA = "0xFC43D8")]
	public static extern bool CSharp_AkAudioInterruptionCallbackInfo_bEnterInterruption_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013AA")]
	[Address(RVA = "0xFC4478", Offset = "0xFC4478", VA = "0xFC4478")]
	public static extern IntPtr CSharp_new_AkAudioInterruptionCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x60013AB")]
	[Address(RVA = "0xFC4500", Offset = "0xFC4500", VA = "0xFC4500")]
	public static extern void CSharp_delete_AkAudioInterruptionCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013AC")]
	[Address(RVA = "0xFC4598", Offset = "0xFC4598", VA = "0xFC4598")]
	public static extern bool CSharp_AkAudioSourceChangeCallbackInfo_bOtherAudioPlaying_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013AD")]
	[Address(RVA = "0xFC4638", Offset = "0xFC4638", VA = "0xFC4638")]
	public static extern IntPtr CSharp_new_AkAudioSourceChangeCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x60013AE")]
	[Address(RVA = "0xFC46C0", Offset = "0xFC46C0", VA = "0xFC46C0")]
	public static extern void CSharp_delete_AkAudioSourceChangeCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013AF")]
	[Address(RVA = "0xFC4758", Offset = "0xFC4758", VA = "0xFC4758")]
	public static extern int CSharp_AkCallbackSerializer_Init(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60013B0")]
	[Address(RVA = "0xFC4800", Offset = "0xFC4800", VA = "0xFC4800")]
	public static extern void CSharp_AkCallbackSerializer_Term();

	[PreserveSig]
	[Token(Token = "0x60013B1")]
	[Address(RVA = "0xFC4888", Offset = "0xFC4888", VA = "0xFC4888")]
	public static extern IntPtr CSharp_AkCallbackSerializer_Lock();

	[PreserveSig]
	[Token(Token = "0x60013B2")]
	[Address(RVA = "0xFC4910", Offset = "0xFC4910", VA = "0xFC4910")]
	public static extern void CSharp_AkCallbackSerializer_SetLocalOutput(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60013B3")]
	[Address(RVA = "0xFC49A8", Offset = "0xFC49A8", VA = "0xFC49A8")]
	public static extern void CSharp_AkCallbackSerializer_Unlock();

	[PreserveSig]
	[Token(Token = "0x60013B4")]
	[Address(RVA = "0xFC4A30", Offset = "0xFC4A30", VA = "0xFC4A30")]
	public static extern int CSharp_AkCallbackSerializer_AudioSourceChangeCallbackFunc(bool jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60013B5")]
	[Address(RVA = "0xFC4AD8", Offset = "0xFC4AD8", VA = "0xFC4AD8")]
	public static extern IntPtr CSharp_new_AkCallbackSerializer();

	[PreserveSig]
	[Token(Token = "0x60013B6")]
	[Address(RVA = "0xFC4B60", Offset = "0xFC4B60", VA = "0xFC4B60")]
	public static extern void CSharp_delete_AkCallbackSerializer(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013B7")]
	[Address(RVA = "0xFC4BF8", Offset = "0xFC4BF8", VA = "0xFC4BF8")]
	public static extern int CSharp_PostCode__SWIG_0(int jarg1, int jarg2, uint jarg3, ulong jarg4, uint jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x60013B8")]
	[Address(RVA = "0xFC4CD0", Offset = "0xFC4CD0", VA = "0xFC4CD0")]
	public static extern int CSharp_PostCode__SWIG_1(int jarg1, int jarg2, uint jarg3, ulong jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x60013B9")]
	[Address(RVA = "0xFC4D98", Offset = "0xFC4D98", VA = "0xFC4D98")]
	public static extern int CSharp_PostCode__SWIG_2(int jarg1, int jarg2, uint jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x60013BA")]
	[Address(RVA = "0xFC4E58", Offset = "0xFC4E58", VA = "0xFC4E58")]
	public static extern int CSharp_PostCode__SWIG_3(int jarg1, int jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60013BB")]
	[Address(RVA = "0xFC4F08", Offset = "0xFC4F08", VA = "0xFC4F08")]
	public static extern int CSharp_PostCode__SWIG_4(int jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60013BC")]
	[Address(RVA = "0xFC4FB0", Offset = "0xFC4FB0", VA = "0xFC4FB0")]
	public static extern int CSharp_PostString__SWIG_0(string jarg1, int jarg2, uint jarg3, ulong jarg4, uint jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x60013BD")]
	[Address(RVA = "0xFC50A0", Offset = "0xFC50A0", VA = "0xFC50A0")]
	public static extern int CSharp_PostString__SWIG_1(string jarg1, int jarg2, uint jarg3, ulong jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x60013BE")]
	[Address(RVA = "0xFC5180", Offset = "0xFC5180", VA = "0xFC5180")]
	public static extern int CSharp_PostString__SWIG_2(string jarg1, int jarg2, uint jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x60013BF")]
	[Address(RVA = "0xFC5258", Offset = "0xFC5258", VA = "0xFC5258")]
	public static extern int CSharp_PostString__SWIG_3(string jarg1, int jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60013C0")]
	[Address(RVA = "0xFC5320", Offset = "0xFC5320", VA = "0xFC5320")]
	public static extern int CSharp_PostString__SWIG_4(string jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60013C1")]
	[Address(RVA = "0xFC53E0", Offset = "0xFC53E0", VA = "0xFC53E0")]
	public static extern int CSharp_GetTimeStamp();

	[PreserveSig]
	[Token(Token = "0x60013C2")]
	[Address(RVA = "0xFC5468", Offset = "0xFC5468", VA = "0xFC5468")]
	public static extern uint CSharp_GetNumNonZeroBits(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x60013C3")]
	[Address(RVA = "0xFC5500", Offset = "0xFC5500", VA = "0xFC5500")]
	public static extern void CSharp_AkGetDefaultHighPriorityThreadProperties(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013C4")]
	[Address(RVA = "0xFC5598", Offset = "0xFC5598", VA = "0xFC5598")]
	public static extern uint CSharp_ResolveDialogueEvent__SWIG_0(uint jarg1, [In] uint[] jarg2, uint jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x60013C5")]
	[Address(RVA = "0xFC5660", Offset = "0xFC5660", VA = "0xFC5660")]
	public static extern uint CSharp_ResolveDialogueEvent__SWIG_1(uint jarg1, [In] uint[] jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60013C6")]
	[Address(RVA = "0xFC5718", Offset = "0xFC5718", VA = "0xFC5718")]
	public static extern int CSharp_GetDialogueEventCustomPropertyValue__SWIG_0(uint jarg1, uint jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x60013C7")]
	[Address(RVA = "0xFC57C8", Offset = "0xFC57C8", VA = "0xFC57C8")]
	public static extern int CSharp_GetDialogueEventCustomPropertyValue__SWIG_1(uint jarg1, uint jarg2, out float jarg3);

	[PreserveSig]
	[Token(Token = "0x60013C8")]
	[Address(RVA = "0xFC5878", Offset = "0xFC5878", VA = "0xFC5878")]
	public static extern void CSharp_AkPositioningInfo_fCenterPct_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013C9")]
	[Address(RVA = "0xFC5920", Offset = "0xFC5920", VA = "0xFC5920")]
	public static extern float CSharp_AkPositioningInfo_fCenterPct_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013CA")]
	[Address(RVA = "0xFC59B8", Offset = "0xFC59B8", VA = "0xFC59B8")]
	public static extern void CSharp_AkPositioningInfo_pannerType_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60013CB")]
	[Address(RVA = "0xFC5A60", Offset = "0xFC5A60", VA = "0xFC5A60")]
	public static extern int CSharp_AkPositioningInfo_pannerType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013CC")]
	[Address(RVA = "0xFC5AF8", Offset = "0xFC5AF8", VA = "0xFC5AF8")]
	public static extern void CSharp_AkPositioningInfo_e3dPositioningType_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60013CD")]
	[Address(RVA = "0xFC5BA0", Offset = "0xFC5BA0", VA = "0xFC5BA0")]
	public static extern int CSharp_AkPositioningInfo_e3dPositioningType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013CE")]
	[Address(RVA = "0xFC5C38", Offset = "0xFC5C38", VA = "0xFC5C38")]
	public static extern void CSharp_AkPositioningInfo_bHoldEmitterPosAndOrient_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x60013CF")]
	[Address(RVA = "0xFC5CE0", Offset = "0xFC5CE0", VA = "0xFC5CE0")]
	public static extern bool CSharp_AkPositioningInfo_bHoldEmitterPosAndOrient_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013D0")]
	[Address(RVA = "0xFC5D80", Offset = "0xFC5D80", VA = "0xFC5D80")]
	public static extern void CSharp_AkPositioningInfo_e3DSpatializationMode_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60013D1")]
	[Address(RVA = "0xFC5E28", Offset = "0xFC5E28", VA = "0xFC5E28")]
	public static extern int CSharp_AkPositioningInfo_e3DSpatializationMode_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013D2")]
	[Address(RVA = "0xFC5EC0", Offset = "0xFC5EC0", VA = "0xFC5EC0")]
	public static extern void CSharp_AkPositioningInfo_bEnableAttenuation_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x60013D3")]
	[Address(RVA = "0xFC5F68", Offset = "0xFC5F68", VA = "0xFC5F68")]
	public static extern bool CSharp_AkPositioningInfo_bEnableAttenuation_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013D4")]
	[Address(RVA = "0xFC6008", Offset = "0xFC6008", VA = "0xFC6008")]
	public static extern void CSharp_AkPositioningInfo_bUseConeAttenuation_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x60013D5")]
	[Address(RVA = "0xFC60B0", Offset = "0xFC60B0", VA = "0xFC60B0")]
	public static extern bool CSharp_AkPositioningInfo_bUseConeAttenuation_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013D6")]
	[Address(RVA = "0xFC6150", Offset = "0xFC6150", VA = "0xFC6150")]
	public static extern void CSharp_AkPositioningInfo_fInnerAngle_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013D7")]
	[Address(RVA = "0xFC61F8", Offset = "0xFC61F8", VA = "0xFC61F8")]
	public static extern float CSharp_AkPositioningInfo_fInnerAngle_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013D8")]
	[Address(RVA = "0xFC6290", Offset = "0xFC6290", VA = "0xFC6290")]
	public static extern void CSharp_AkPositioningInfo_fOuterAngle_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013D9")]
	[Address(RVA = "0xFC6338", Offset = "0xFC6338", VA = "0xFC6338")]
	public static extern float CSharp_AkPositioningInfo_fOuterAngle_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013DA")]
	[Address(RVA = "0xFC63D0", Offset = "0xFC63D0", VA = "0xFC63D0")]
	public static extern void CSharp_AkPositioningInfo_fConeMaxAttenuation_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013DB")]
	[Address(RVA = "0xFC6478", Offset = "0xFC6478", VA = "0xFC6478")]
	public static extern float CSharp_AkPositioningInfo_fConeMaxAttenuation_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013DC")]
	[Address(RVA = "0xFC6510", Offset = "0xFC6510", VA = "0xFC6510")]
	public static extern void CSharp_AkPositioningInfo_LPFCone_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013DD")]
	[Address(RVA = "0xFC65B8", Offset = "0xFC65B8", VA = "0xFC65B8")]
	public static extern float CSharp_AkPositioningInfo_LPFCone_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013DE")]
	[Address(RVA = "0xFC6650", Offset = "0xFC6650", VA = "0xFC6650")]
	public static extern void CSharp_AkPositioningInfo_HPFCone_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013DF")]
	[Address(RVA = "0xFC66F8", Offset = "0xFC66F8", VA = "0xFC66F8")]
	public static extern float CSharp_AkPositioningInfo_HPFCone_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013E0")]
	[Address(RVA = "0xFC6790", Offset = "0xFC6790", VA = "0xFC6790")]
	public static extern void CSharp_AkPositioningInfo_fMaxDistance_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013E1")]
	[Address(RVA = "0xFC6838", Offset = "0xFC6838", VA = "0xFC6838")]
	public static extern float CSharp_AkPositioningInfo_fMaxDistance_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013E2")]
	[Address(RVA = "0xFC68D0", Offset = "0xFC68D0", VA = "0xFC68D0")]
	public static extern void CSharp_AkPositioningInfo_fVolDryAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013E3")]
	[Address(RVA = "0xFC6978", Offset = "0xFC6978", VA = "0xFC6978")]
	public static extern float CSharp_AkPositioningInfo_fVolDryAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013E4")]
	[Address(RVA = "0xFC6A10", Offset = "0xFC6A10", VA = "0xFC6A10")]
	public static extern void CSharp_AkPositioningInfo_fVolAuxGameDefAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013E5")]
	[Address(RVA = "0xFC6AB8", Offset = "0xFC6AB8", VA = "0xFC6AB8")]
	public static extern float CSharp_AkPositioningInfo_fVolAuxGameDefAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013E6")]
	[Address(RVA = "0xFC6B50", Offset = "0xFC6B50", VA = "0xFC6B50")]
	public static extern void CSharp_AkPositioningInfo_fVolAuxUserDefAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013E7")]
	[Address(RVA = "0xFC6BF8", Offset = "0xFC6BF8", VA = "0xFC6BF8")]
	public static extern float CSharp_AkPositioningInfo_fVolAuxUserDefAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013E8")]
	[Address(RVA = "0xFC6C90", Offset = "0xFC6C90", VA = "0xFC6C90")]
	public static extern void CSharp_AkPositioningInfo_LPFValueAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013E9")]
	[Address(RVA = "0xFC6D38", Offset = "0xFC6D38", VA = "0xFC6D38")]
	public static extern float CSharp_AkPositioningInfo_LPFValueAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013EA")]
	[Address(RVA = "0xFC6DD0", Offset = "0xFC6DD0", VA = "0xFC6DD0")]
	public static extern void CSharp_AkPositioningInfo_HPFValueAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60013EB")]
	[Address(RVA = "0xFC6E78", Offset = "0xFC6E78", VA = "0xFC6E78")]
	public static extern float CSharp_AkPositioningInfo_HPFValueAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013EC")]
	[Address(RVA = "0xFC6F10", Offset = "0xFC6F10", VA = "0xFC6F10")]
	public static extern IntPtr CSharp_new_AkPositioningInfo();

	[PreserveSig]
	[Token(Token = "0x60013ED")]
	[Address(RVA = "0xFC6F98", Offset = "0xFC6F98", VA = "0xFC6F98")]
	public static extern void CSharp_delete_AkPositioningInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013EE")]
	[Address(RVA = "0xFC7030", Offset = "0xFC7030", VA = "0xFC7030")]
	public static extern void CSharp_AkObjectInfo_objID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60013EF")]
	[Address(RVA = "0xFC70D8", Offset = "0xFC70D8", VA = "0xFC70D8")]
	public static extern uint CSharp_AkObjectInfo_objID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013F0")]
	[Address(RVA = "0xFC7170", Offset = "0xFC7170", VA = "0xFC7170")]
	public static extern void CSharp_AkObjectInfo_parentID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60013F1")]
	[Address(RVA = "0xFC7218", Offset = "0xFC7218", VA = "0xFC7218")]
	public static extern uint CSharp_AkObjectInfo_parentID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013F2")]
	[Address(RVA = "0xFC72B0", Offset = "0xFC72B0", VA = "0xFC72B0")]
	public static extern void CSharp_AkObjectInfo_iDepth_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60013F3")]
	[Address(RVA = "0xFC7358", Offset = "0xFC7358", VA = "0xFC7358")]
	public static extern int CSharp_AkObjectInfo_iDepth_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013F4")]
	[Address(RVA = "0xFC73F0", Offset = "0xFC73F0", VA = "0xFC73F0")]
	public static extern void CSharp_AkObjectInfo_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013F5")]
	[Address(RVA = "0xFC7488", Offset = "0xFC7488", VA = "0xFC7488")]
	public static extern int CSharp_AkObjectInfo_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x60013F6")]
	[Address(RVA = "0xFC7510", Offset = "0xFC7510", VA = "0xFC7510")]
	public static extern void CSharp_AkObjectInfo_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60013F7")]
	[Address(RVA = "0xFC75B8", Offset = "0xFC75B8", VA = "0xFC75B8")]
	public static extern IntPtr CSharp_new_AkObjectInfo();

	[PreserveSig]
	[Token(Token = "0x60013F8")]
	[Address(RVA = "0xFC7640", Offset = "0xFC7640", VA = "0xFC7640")]
	public static extern void CSharp_delete_AkObjectInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60013F9")]
	[Address(RVA = "0xFC76D8", Offset = "0xFC76D8", VA = "0xFC76D8")]
	public static extern int CSharp_GetPosition(ulong jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60013FA")]
	[Address(RVA = "0xFC7780", Offset = "0xFC7780", VA = "0xFC7780")]
	public static extern int CSharp_GetListenerPosition(ulong jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60013FB")]
	[Address(RVA = "0xFC7828", Offset = "0xFC7828", VA = "0xFC7828")]
	public static extern int CSharp_GetRTPCValue__SWIG_0(uint jarg1, ulong jarg2, uint jarg3, out float jarg4, ref int jarg5);

	[PreserveSig]
	[Token(Token = "0x60013FC")]
	[Address(RVA = "0xFC78F0", Offset = "0xFC78F0", VA = "0xFC78F0")]
	public static extern int CSharp_GetRTPCValue__SWIG_1(string jarg1, ulong jarg2, uint jarg3, out float jarg4, ref int jarg5);

	[PreserveSig]
	[Token(Token = "0x60013FD")]
	[Address(RVA = "0xFC79D0", Offset = "0xFC79D0", VA = "0xFC79D0")]
	public static extern int CSharp_GetSwitch__SWIG_0(uint jarg1, ulong jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60013FE")]
	[Address(RVA = "0xFC7A80", Offset = "0xFC7A80", VA = "0xFC7A80")]
	public static extern int CSharp_GetSwitch__SWIG_1(string jarg1, ulong jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60013FF")]
	[Address(RVA = "0xFC7B44", Offset = "0xFC7B44", VA = "0xFC7B44")]
	public static extern int CSharp_GetState__SWIG_0(uint jarg1, out uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001400")]
	[Address(RVA = "0xFC7BEC", Offset = "0xFC7BEC", VA = "0xFC7BEC")]
	public static extern int CSharp_GetState__SWIG_1(string jarg1, out uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001401")]
	[Address(RVA = "0xFC7CAC", Offset = "0xFC7CAC", VA = "0xFC7CAC")]
	public static extern int CSharp_GetGameObjectAuxSendValues(ulong jarg1, IntPtr jarg2, ref uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001402")]
	[Address(RVA = "0xFC7D5C", Offset = "0xFC7D5C", VA = "0xFC7D5C")]
	public static extern int CSharp_GetGameObjectDryLevelValue(ulong jarg1, ulong jarg2, out float jarg3);

	[PreserveSig]
	[Token(Token = "0x6001403")]
	[Address(RVA = "0xFC7E0C", Offset = "0xFC7E0C", VA = "0xFC7E0C")]
	public static extern int CSharp_GetObjectObstructionAndOcclusion(ulong jarg1, ulong jarg2, out float jarg3, out float jarg4);

	[PreserveSig]
	[Token(Token = "0x6001404")]
	[Address(RVA = "0xFC7ECC", Offset = "0xFC7ECC", VA = "0xFC7ECC")]
	public static extern int CSharp_QueryAudioObjectIDs__SWIG_0(uint jarg1, ref uint jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6001405")]
	[Address(RVA = "0xFC7F7C", Offset = "0xFC7F7C", VA = "0xFC7F7C")]
	public static extern int CSharp_QueryAudioObjectIDs__SWIG_1(string jarg1, ref uint jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6001406")]
	[Address(RVA = "0xFC8044", Offset = "0xFC8044", VA = "0xFC8044")]
	public static extern int CSharp_GetPositioningInfo(uint jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001407")]
	[Address(RVA = "0xFC80EC", Offset = "0xFC80EC", VA = "0xFC80EC")]
	public static extern bool CSharp_GetIsGameObjectActive(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001408")]
	[Address(RVA = "0xFC818C", Offset = "0xFC818C", VA = "0xFC818C")]
	public static extern float CSharp_GetMaxRadius(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001409")]
	[Address(RVA = "0xFC8224", Offset = "0xFC8224", VA = "0xFC8224")]
	public static extern uint CSharp_GetEventIDFromPlayingID(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600140A")]
	[Address(RVA = "0xFC82BC", Offset = "0xFC82BC", VA = "0xFC82BC")]
	public static extern ulong CSharp_GetGameObjectFromPlayingID(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600140B")]
	[Address(RVA = "0xFC8354", Offset = "0xFC8354", VA = "0xFC8354")]
	public static extern int CSharp_GetPlayingIDsFromGameObject(ulong jarg1, ref uint jarg2, [Out] uint[] jarg3);

	[PreserveSig]
	[Token(Token = "0x600140C")]
	[Address(RVA = "0xFC8490", Offset = "0xFC8490", VA = "0xFC8490")]
	public static extern int CSharp_GetCustomPropertyValue__SWIG_0(uint jarg1, uint jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x600140D")]
	[Address(RVA = "0xFC8540", Offset = "0xFC8540", VA = "0xFC8540")]
	public static extern int CSharp_GetCustomPropertyValue__SWIG_1(uint jarg1, uint jarg2, out float jarg3);

	[PreserveSig]
	[Token(Token = "0x600140E")]
	[Address(RVA = "0xFC85F0", Offset = "0xFC85F0", VA = "0xFC85F0")]
	public static extern void CSharp_AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(ref uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600140F")]
	[Address(RVA = "0xFC8688", Offset = "0xFC8688", VA = "0xFC8688")]
	public static extern void CSharp_AK_SPEAKER_SETUP_FIX_REAR_TO_SIDE(ref uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001410")]
	[Address(RVA = "0xFC8720", Offset = "0xFC8720", VA = "0xFC8720")]
	public static extern void CSharp_AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(ref uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001411")]
	[Address(RVA = "0xFC87B8", Offset = "0xFC87B8", VA = "0xFC87B8")]
	public static extern byte CSharp_ChannelMaskToNumChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001412")]
	[Address(RVA = "0xFC8850", Offset = "0xFC8850", VA = "0xFC8850")]
	public static extern uint CSharp_ChannelMaskFromNumChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001413")]
	[Address(RVA = "0xFC88E8", Offset = "0xFC88E8", VA = "0xFC88E8")]
	public static extern byte CSharp_ChannelBitToIndex(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001414")]
	[Address(RVA = "0xFC8990", Offset = "0xFC8990", VA = "0xFC8990")]
	public static extern bool CSharp_HasSurroundChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001415")]
	[Address(RVA = "0xFC8A30", Offset = "0xFC8A30", VA = "0xFC8A30")]
	public static extern bool CSharp_HasStrictlyOnePairOfSurroundChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001416")]
	[Address(RVA = "0xFC8AD0", Offset = "0xFC8AD0", VA = "0xFC8AD0")]
	public static extern bool CSharp_HasSideAndRearChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001417")]
	[Address(RVA = "0xFC8B70", Offset = "0xFC8B70", VA = "0xFC8B70")]
	public static extern bool CSharp_HasHeightChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001418")]
	[Address(RVA = "0xFC8C10", Offset = "0xFC8C10", VA = "0xFC8C10")]
	public static extern uint CSharp_BackToSideChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001419")]
	[Address(RVA = "0xFC8CA8", Offset = "0xFC8CA8", VA = "0xFC8CA8")]
	public static extern uint CSharp_StdChannelIndexToDisplayIndex(int jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x600141A")]
	[Address(RVA = "0xFC8D58", Offset = "0xFC8D58", VA = "0xFC8D58")]
	public static extern void CSharp_AkChannelConfig_uNumChannels_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600141B")]
	[Address(RVA = "0xFC8E00", Offset = "0xFC8E00", VA = "0xFC8E00")]
	public static extern uint CSharp_AkChannelConfig_uNumChannels_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600141C")]
	[Address(RVA = "0xFC8E98", Offset = "0xFC8E98", VA = "0xFC8E98")]
	public static extern void CSharp_AkChannelConfig_eConfigType_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600141D")]
	[Address(RVA = "0xFC8F40", Offset = "0xFC8F40", VA = "0xFC8F40")]
	public static extern uint CSharp_AkChannelConfig_eConfigType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600141E")]
	[Address(RVA = "0xFC8FD8", Offset = "0xFC8FD8", VA = "0xFC8FD8")]
	public static extern void CSharp_AkChannelConfig_uChannelMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600141F")]
	[Address(RVA = "0xFC9080", Offset = "0xFC9080", VA = "0xFC9080")]
	public static extern uint CSharp_AkChannelConfig_uChannelMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001420")]
	[Address(RVA = "0xFC9118", Offset = "0xFC9118", VA = "0xFC9118")]
	public static extern IntPtr CSharp_new_AkChannelConfig__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6001421")]
	[Address(RVA = "0xFC91A0", Offset = "0xFC91A0", VA = "0xFC91A0")]
	public static extern IntPtr CSharp_new_AkChannelConfig__SWIG_1(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001422")]
	[Address(RVA = "0xFC9248", Offset = "0xFC9248", VA = "0xFC9248")]
	public static extern void CSharp_AkChannelConfig_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001423")]
	[Address(RVA = "0xFC92E0", Offset = "0xFC92E0", VA = "0xFC92E0")]
	public static extern void CSharp_AkChannelConfig_SetStandard(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001424")]
	[Address(RVA = "0xFC9388", Offset = "0xFC9388", VA = "0xFC9388")]
	public static extern void CSharp_AkChannelConfig_SetStandardOrAnonymous(IntPtr jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001425")]
	[Address(RVA = "0xFC9438", Offset = "0xFC9438", VA = "0xFC9438")]
	public static extern void CSharp_AkChannelConfig_SetAnonymous(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001426")]
	[Address(RVA = "0xFC94E0", Offset = "0xFC94E0", VA = "0xFC94E0")]
	public static extern void CSharp_AkChannelConfig_SetAmbisonic(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001427")]
	[Address(RVA = "0xFC9588", Offset = "0xFC9588", VA = "0xFC9588")]
	public static extern bool CSharp_AkChannelConfig_IsValid(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001428")]
	[Address(RVA = "0xFC9628", Offset = "0xFC9628", VA = "0xFC9628")]
	public static extern uint CSharp_AkChannelConfig_Serialize(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001429")]
	[Address(RVA = "0xFC96C0", Offset = "0xFC96C0", VA = "0xFC96C0")]
	public static extern void CSharp_AkChannelConfig_Deserialize(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600142A")]
	[Address(RVA = "0xFC9768", Offset = "0xFC9768", VA = "0xFC9768")]
	public static extern IntPtr CSharp_AkChannelConfig_RemoveLFE(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600142B")]
	[Address(RVA = "0xFC9800", Offset = "0xFC9800", VA = "0xFC9800")]
	public static extern IntPtr CSharp_AkChannelConfig_RemoveCenter(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600142C")]
	[Address(RVA = "0xFC9898", Offset = "0xFC9898", VA = "0xFC9898")]
	public static extern bool CSharp_AkChannelConfig_IsChannelConfigSupported(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600142D")]
	[Address(RVA = "0xFC9938", Offset = "0xFC9938", VA = "0xFC9938")]
	public static extern void CSharp_delete_AkChannelConfig(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600142E")]
	[Address(RVA = "0xFC99D0", Offset = "0xFC99D0", VA = "0xFC99D0")]
	public static extern IntPtr CSharp_new_AkImageSourceParams__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x600142F")]
	[Address(RVA = "0xFC9A58", Offset = "0xFC9A58", VA = "0xFC9A58")]
	public static extern IntPtr CSharp_new_AkImageSourceParams__SWIG_1(IntPtr jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6001430")]
	[Address(RVA = "0xFC9B08", Offset = "0xFC9B08", VA = "0xFC9B08")]
	public static extern void CSharp_AkImageSourceParams_sourcePosition_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001431")]
	[Address(RVA = "0xFC9BB0", Offset = "0xFC9BB0", VA = "0xFC9BB0")]
	public static extern IntPtr CSharp_AkImageSourceParams_sourcePosition_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001432")]
	[Address(RVA = "0xFC9C48", Offset = "0xFC9C48", VA = "0xFC9C48")]
	public static extern void CSharp_AkImageSourceParams_fDistanceScalingFactor_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001433")]
	[Address(RVA = "0xFC9CF0", Offset = "0xFC9CF0", VA = "0xFC9CF0")]
	public static extern float CSharp_AkImageSourceParams_fDistanceScalingFactor_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001434")]
	[Address(RVA = "0xFC9D88", Offset = "0xFC9D88", VA = "0xFC9D88")]
	public static extern void CSharp_AkImageSourceParams_fLevel_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001435")]
	[Address(RVA = "0xFC9E30", Offset = "0xFC9E30", VA = "0xFC9E30")]
	public static extern float CSharp_AkImageSourceParams_fLevel_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001436")]
	[Address(RVA = "0xFC9EC8", Offset = "0xFC9EC8", VA = "0xFC9EC8")]
	public static extern void CSharp_AkImageSourceParams_fDiffraction_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001437")]
	[Address(RVA = "0xFC9F70", Offset = "0xFC9F70", VA = "0xFC9F70")]
	public static extern float CSharp_AkImageSourceParams_fDiffraction_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001438")]
	[Address(RVA = "0xFCA008", Offset = "0xFCA008", VA = "0xFCA008")]
	public static extern void CSharp_AkImageSourceParams_uDiffractionEmitterSide_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001439")]
	[Address(RVA = "0xFCA0B0", Offset = "0xFCA0B0", VA = "0xFCA0B0")]
	public static extern byte CSharp_AkImageSourceParams_uDiffractionEmitterSide_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600143A")]
	[Address(RVA = "0xFCA148", Offset = "0xFCA148", VA = "0xFCA148")]
	public static extern void CSharp_AkImageSourceParams_uDiffractionListenerSide_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x600143B")]
	[Address(RVA = "0xFCA1F0", Offset = "0xFCA1F0", VA = "0xFCA1F0")]
	public static extern byte CSharp_AkImageSourceParams_uDiffractionListenerSide_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600143C")]
	[Address(RVA = "0xFCA288", Offset = "0xFCA288", VA = "0xFCA288")]
	public static extern void CSharp_delete_AkImageSourceParams(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600143D")]
	[Address(RVA = "0xFCA320", Offset = "0xFCA320", VA = "0xFCA320")]
	public static extern float CSharp_kDefaultMaxPathLength_get();

	[PreserveSig]
	[Token(Token = "0x600143E")]
	[Address(RVA = "0xFCA3A8", Offset = "0xFCA3A8", VA = "0xFCA3A8")]
	public static extern uint CSharp_kDefaultDiffractionMaxEdges_get();

	[PreserveSig]
	[Token(Token = "0x600143F")]
	[Address(RVA = "0xFCA430", Offset = "0xFCA430", VA = "0xFCA430")]
	public static extern uint CSharp_kDefaultDiffractionMaxPaths_get();

	[PreserveSig]
	[Token(Token = "0x6001440")]
	[Address(RVA = "0xFCA4B8", Offset = "0xFCA4B8", VA = "0xFCA4B8")]
	public static extern float CSharp_kMaxDiffraction_get();

	[PreserveSig]
	[Token(Token = "0x6001441")]
	[Address(RVA = "0xFCA540", Offset = "0xFCA540", VA = "0xFCA540")]
	public static extern uint CSharp_kListenerDiffractionMaxEdges_get();

	[PreserveSig]
	[Token(Token = "0x6001442")]
	[Address(RVA = "0xFCA5C8", Offset = "0xFCA5C8", VA = "0xFCA5C8")]
	public static extern uint CSharp_kListenerDiffractionMaxPaths_get();

	[PreserveSig]
	[Token(Token = "0x6001443")]
	[Address(RVA = "0xFCA650", Offset = "0xFCA650", VA = "0xFCA650")]
	public static extern uint CSharp_kPortalToPortalDiffractionMaxPaths_get();

	[PreserveSig]
	[Token(Token = "0x6001444")]
	[Address(RVA = "0xFCA6D8", Offset = "0xFCA6D8", VA = "0xFCA6D8")]
	public static extern void CSharp_g_SpatialAudioPoolId_set(int jarg1);

	[PreserveSig]
	[Token(Token = "0x6001445")]
	[Address(RVA = "0xFCA770", Offset = "0xFCA770", VA = "0xFCA770")]
	public static extern int CSharp_g_SpatialAudioPoolId_get();

	[PreserveSig]
	[Token(Token = "0x6001446")]
	[Address(RVA = "0xFCA7F8", Offset = "0xFCA7F8", VA = "0xFCA7F8")]
	public static extern int CSharp__ArrayPoolSpatialAudio_Get();

	[PreserveSig]
	[Token(Token = "0x6001447")]
	[Address(RVA = "0xFCA880", Offset = "0xFCA880", VA = "0xFCA880")]
	public static extern IntPtr CSharp_new__ArrayPoolSpatialAudio();

	[PreserveSig]
	[Token(Token = "0x6001448")]
	[Address(RVA = "0xFCA908", Offset = "0xFCA908", VA = "0xFCA908")]
	public static extern void CSharp_delete__ArrayPoolSpatialAudio(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001449")]
	[Address(RVA = "0xFCA9A0", Offset = "0xFCA9A0", VA = "0xFCA9A0")]
	public static extern IntPtr CSharp_new_AkSpatialAudioInitSettings();

	[PreserveSig]
	[Token(Token = "0x600144A")]
	[Address(RVA = "0xFCAA28", Offset = "0xFCAA28", VA = "0xFCAA28")]
	public static extern void CSharp_AkSpatialAudioInitSettings_uPoolID_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x600144B")]
	[Address(RVA = "0xFCAAD0", Offset = "0xFCAAD0", VA = "0xFCAAD0")]
	public static extern int CSharp_AkSpatialAudioInitSettings_uPoolID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600144C")]
	[Address(RVA = "0xFCAB68", Offset = "0xFCAB68", VA = "0xFCAB68")]
	public static extern void CSharp_AkSpatialAudioInitSettings_uPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600144D")]
	[Address(RVA = "0xFCAC10", Offset = "0xFCAC10", VA = "0xFCAC10")]
	public static extern uint CSharp_AkSpatialAudioInitSettings_uPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600144E")]
	[Address(RVA = "0xFCACA8", Offset = "0xFCACA8", VA = "0xFCACA8")]
	public static extern void CSharp_AkSpatialAudioInitSettings_uMaxSoundPropagationDepth_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600144F")]
	[Address(RVA = "0xFCAD50", Offset = "0xFCAD50", VA = "0xFCAD50")]
	public static extern uint CSharp_AkSpatialAudioInitSettings_uMaxSoundPropagationDepth_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001450")]
	[Address(RVA = "0xFCADE8", Offset = "0xFCADE8", VA = "0xFCADE8")]
	public static extern void CSharp_AkSpatialAudioInitSettings_uDiffractionFlags_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001451")]
	[Address(RVA = "0xFCAE90", Offset = "0xFCAE90", VA = "0xFCAE90")]
	public static extern uint CSharp_AkSpatialAudioInitSettings_uDiffractionFlags_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001452")]
	[Address(RVA = "0xFCAF28", Offset = "0xFCAF28", VA = "0xFCAF28")]
	public static extern void CSharp_AkSpatialAudioInitSettings_fDiffractionShadowAttenFactor_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001453")]
	[Address(RVA = "0xFCAFD0", Offset = "0xFCAFD0", VA = "0xFCAFD0")]
	public static extern float CSharp_AkSpatialAudioInitSettings_fDiffractionShadowAttenFactor_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001454")]
	[Address(RVA = "0xFCB068", Offset = "0xFCB068", VA = "0xFCB068")]
	public static extern void CSharp_AkSpatialAudioInitSettings_fDiffractionShadowDegrees_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001455")]
	[Address(RVA = "0xFCB110", Offset = "0xFCB110", VA = "0xFCB110")]
	public static extern float CSharp_AkSpatialAudioInitSettings_fDiffractionShadowDegrees_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001456")]
	[Address(RVA = "0xFCB1A8", Offset = "0xFCB1A8", VA = "0xFCB1A8")]
	public static extern void CSharp_AkSpatialAudioInitSettings_fMovementThreshold_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001457")]
	[Address(RVA = "0xFCB250", Offset = "0xFCB250", VA = "0xFCB250")]
	public static extern float CSharp_AkSpatialAudioInitSettings_fMovementThreshold_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001458")]
	[Address(RVA = "0xFCB2E8", Offset = "0xFCB2E8", VA = "0xFCB2E8")]
	public static extern void CSharp_delete_AkSpatialAudioInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001459")]
	[Address(RVA = "0xFCB380", Offset = "0xFCB380", VA = "0xFCB380")]
	public static extern IntPtr CSharp_new_AkImageSourceSettings__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x600145A")]
	[Address(RVA = "0xFCB408", Offset = "0xFCB408", VA = "0xFCB408")]
	public static extern IntPtr CSharp_new_AkImageSourceSettings__SWIG_1(IntPtr jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x600145B")]
	[Address(RVA = "0xFCB4B8", Offset = "0xFCB4B8", VA = "0xFCB4B8")]
	public static extern void CSharp_delete_AkImageSourceSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600145C")]
	[Address(RVA = "0xFCB550", Offset = "0xFCB550", VA = "0xFCB550")]
	public static extern void CSharp_AkImageSourceSettings_SetOneTexture(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600145D")]
	[Address(RVA = "0xFCB5F8", Offset = "0xFCB5F8", VA = "0xFCB5F8")]
	public static extern void CSharp_AkImageSourceSettings_SetName(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x600145E")]
	[Address(RVA = "0xFCB6B4", Offset = "0xFCB6B4", VA = "0xFCB6B4")]
	public static extern void CSharp_AkImageSourceSettings_params__set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600145F")]
	[Address(RVA = "0xFCB75C", Offset = "0xFCB75C", VA = "0xFCB75C")]
	public static extern IntPtr CSharp_AkImageSourceSettings_params__get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001460")]
	[Address(RVA = "0xFCB7F4", Offset = "0xFCB7F4", VA = "0xFCB7F4")]
	public static extern IntPtr CSharp_new_AkEmitterSettings();

	[PreserveSig]
	[Token(Token = "0x6001461")]
	[Address(RVA = "0xFCB87C", Offset = "0xFCB87C", VA = "0xFCB87C")]
	public static extern void CSharp_AkEmitterSettings_reflectAuxBusID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001462")]
	[Address(RVA = "0xFCB924", Offset = "0xFCB924", VA = "0xFCB924")]
	public static extern uint CSharp_AkEmitterSettings_reflectAuxBusID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001463")]
	[Address(RVA = "0xFCB9BC", Offset = "0xFCB9BC", VA = "0xFCB9BC")]
	public static extern void CSharp_AkEmitterSettings_reflectionMaxPathLength_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001464")]
	[Address(RVA = "0xFCBA64", Offset = "0xFCBA64", VA = "0xFCBA64")]
	public static extern float CSharp_AkEmitterSettings_reflectionMaxPathLength_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001465")]
	[Address(RVA = "0xFCBAFC", Offset = "0xFCBAFC", VA = "0xFCBAFC")]
	public static extern void CSharp_AkEmitterSettings_reflectionsAuxBusGain_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001466")]
	[Address(RVA = "0xFCBBA4", Offset = "0xFCBBA4", VA = "0xFCBBA4")]
	public static extern float CSharp_AkEmitterSettings_reflectionsAuxBusGain_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001467")]
	[Address(RVA = "0xFCBC3C", Offset = "0xFCBC3C", VA = "0xFCBC3C")]
	public static extern void CSharp_AkEmitterSettings_reflectionsOrder_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001468")]
	[Address(RVA = "0xFCBCE4", Offset = "0xFCBCE4", VA = "0xFCBCE4")]
	public static extern uint CSharp_AkEmitterSettings_reflectionsOrder_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001469")]
	[Address(RVA = "0xFCBD7C", Offset = "0xFCBD7C", VA = "0xFCBD7C")]
	public static extern void CSharp_AkEmitterSettings_reflectorFilterMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600146A")]
	[Address(RVA = "0xFCBE24", Offset = "0xFCBE24", VA = "0xFCBE24")]
	public static extern uint CSharp_AkEmitterSettings_reflectorFilterMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600146B")]
	[Address(RVA = "0xFCBEBC", Offset = "0xFCBEBC", VA = "0xFCBEBC")]
	public static extern void CSharp_AkEmitterSettings_roomReverbAuxBusGain_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600146C")]
	[Address(RVA = "0xFCBF64", Offset = "0xFCBF64", VA = "0xFCBF64")]
	public static extern float CSharp_AkEmitterSettings_roomReverbAuxBusGain_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600146D")]
	[Address(RVA = "0xFCBFFC", Offset = "0xFCBFFC", VA = "0xFCBFFC")]
	public static extern void CSharp_AkEmitterSettings_diffractionMaxEdges_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600146E")]
	[Address(RVA = "0xFCC0A4", Offset = "0xFCC0A4", VA = "0xFCC0A4")]
	public static extern uint CSharp_AkEmitterSettings_diffractionMaxEdges_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600146F")]
	[Address(RVA = "0xFCC13C", Offset = "0xFCC13C", VA = "0xFCC13C")]
	public static extern void CSharp_AkEmitterSettings_diffractionMaxPaths_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001470")]
	[Address(RVA = "0xFCC1E4", Offset = "0xFCC1E4", VA = "0xFCC1E4")]
	public static extern uint CSharp_AkEmitterSettings_diffractionMaxPaths_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001471")]
	[Address(RVA = "0xFCC27C", Offset = "0xFCC27C", VA = "0xFCC27C")]
	public static extern void CSharp_AkEmitterSettings_diffractionMaxPathLength_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001472")]
	[Address(RVA = "0xFCC324", Offset = "0xFCC324", VA = "0xFCC324")]
	public static extern float CSharp_AkEmitterSettings_diffractionMaxPathLength_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001473")]
	[Address(RVA = "0xFCC3BC", Offset = "0xFCC3BC", VA = "0xFCC3BC")]
	public static extern void CSharp_AkEmitterSettings_useImageSources_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001474")]
	[Address(RVA = "0xFCC464", Offset = "0xFCC464", VA = "0xFCC464")]
	public static extern byte CSharp_AkEmitterSettings_useImageSources_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001475")]
	[Address(RVA = "0xFCC4FC", Offset = "0xFCC4FC", VA = "0xFCC4FC")]
	public static extern void CSharp_delete_AkEmitterSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001476")]
	[Address(RVA = "0xFCC594", Offset = "0xFCC594", VA = "0xFCC594")]
	public static extern IntPtr CSharp_new_AkVertex__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6001477")]
	[Address(RVA = "0xFCC61C", Offset = "0xFCC61C", VA = "0xFCC61C")]
	public static extern IntPtr CSharp_new_AkVertex__SWIG_1(float jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6001478")]
	[Address(RVA = "0xFCC6D0", Offset = "0xFCC6D0", VA = "0xFCC6D0")]
	public static extern void CSharp_AkVertex_X_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001479")]
	[Address(RVA = "0xFCC778", Offset = "0xFCC778", VA = "0xFCC778")]
	public static extern float CSharp_AkVertex_X_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600147A")]
	[Address(RVA = "0xFCC810", Offset = "0xFCC810", VA = "0xFCC810")]
	public static extern void CSharp_AkVertex_Y_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600147B")]
	[Address(RVA = "0xFCC8B8", Offset = "0xFCC8B8", VA = "0xFCC8B8")]
	public static extern float CSharp_AkVertex_Y_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600147C")]
	[Address(RVA = "0xFCC950", Offset = "0xFCC950", VA = "0xFCC950")]
	public static extern void CSharp_AkVertex_Z_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600147D")]
	[Address(RVA = "0xFCC9F8", Offset = "0xFCC9F8", VA = "0xFCC9F8")]
	public static extern float CSharp_AkVertex_Z_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600147E")]
	[Address(RVA = "0xFCCA90", Offset = "0xFCCA90", VA = "0xFCCA90")]
	public static extern void CSharp_AkVertex_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600147F")]
	[Address(RVA = "0xFCCB28", Offset = "0xFCCB28", VA = "0xFCCB28")]
	public static extern int CSharp_AkVertex_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6001480")]
	[Address(RVA = "0xFCCBB0", Offset = "0xFCCBB0", VA = "0xFCCBB0")]
	public static extern void CSharp_AkVertex_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001481")]
	[Address(RVA = "0xFCCC58", Offset = "0xFCCC58", VA = "0xFCCC58")]
	public static extern void CSharp_delete_AkVertex(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001482")]
	[Address(RVA = "0xFCCCF0", Offset = "0xFCCCF0", VA = "0xFCCCF0")]
	public static extern IntPtr CSharp_new_AkTriangle__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6001483")]
	[Address(RVA = "0xFCCD78", Offset = "0xFCCD78", VA = "0xFCCD78")]
	public static extern IntPtr CSharp_new_AkTriangle__SWIG_1(ushort jarg1, ushort jarg2, ushort jarg3, ushort jarg4);

	[PreserveSig]
	[Token(Token = "0x6001484")]
	[Address(RVA = "0xFCCE38", Offset = "0xFCCE38", VA = "0xFCCE38")]
	public static extern void CSharp_AkTriangle_point0_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001485")]
	[Address(RVA = "0xFCCEE0", Offset = "0xFCCEE0", VA = "0xFCCEE0")]
	public static extern ushort CSharp_AkTriangle_point0_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001486")]
	[Address(RVA = "0xFCCF78", Offset = "0xFCCF78", VA = "0xFCCF78")]
	public static extern void CSharp_AkTriangle_point1_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001487")]
	[Address(RVA = "0xFCD020", Offset = "0xFCD020", VA = "0xFCD020")]
	public static extern ushort CSharp_AkTriangle_point1_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001488")]
	[Address(RVA = "0xFCD0B8", Offset = "0xFCD0B8", VA = "0xFCD0B8")]
	public static extern void CSharp_AkTriangle_point2_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001489")]
	[Address(RVA = "0xFCD160", Offset = "0xFCD160", VA = "0xFCD160")]
	public static extern ushort CSharp_AkTriangle_point2_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600148A")]
	[Address(RVA = "0xFCD1F8", Offset = "0xFCD1F8", VA = "0xFCD1F8")]
	public static extern void CSharp_AkTriangle_surface_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x600148B")]
	[Address(RVA = "0xFCD2A0", Offset = "0xFCD2A0", VA = "0xFCD2A0")]
	public static extern ushort CSharp_AkTriangle_surface_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600148C")]
	[Address(RVA = "0xFCD338", Offset = "0xFCD338", VA = "0xFCD338")]
	public static extern void CSharp_AkTriangle_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600148D")]
	[Address(RVA = "0xFCD3D0", Offset = "0xFCD3D0", VA = "0xFCD3D0")]
	public static extern int CSharp_AkTriangle_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x600148E")]
	[Address(RVA = "0xFCD458", Offset = "0xFCD458", VA = "0xFCD458")]
	public static extern void CSharp_AkTriangle_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600148F")]
	[Address(RVA = "0xFCD500", Offset = "0xFCD500", VA = "0xFCD500")]
	public static extern void CSharp_delete_AkTriangle(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001490")]
	[Address(RVA = "0xFCD598", Offset = "0xFCD598", VA = "0xFCD598")]
	public static extern IntPtr CSharp_new_AkAcousticSurface();

	[PreserveSig]
	[Token(Token = "0x6001491")]
	[Address(RVA = "0xFCD620", Offset = "0xFCD620", VA = "0xFCD620")]
	public static extern void CSharp_AkAcousticSurface_textureID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001492")]
	[Address(RVA = "0xFCD6C8", Offset = "0xFCD6C8", VA = "0xFCD6C8")]
	public static extern uint CSharp_AkAcousticSurface_textureID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001493")]
	[Address(RVA = "0xFCD760", Offset = "0xFCD760", VA = "0xFCD760")]
	public static extern void CSharp_AkAcousticSurface_reflectorChannelMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001494")]
	[Address(RVA = "0xFCD808", Offset = "0xFCD808", VA = "0xFCD808")]
	public static extern uint CSharp_AkAcousticSurface_reflectorChannelMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001495")]
	[Address(RVA = "0xFCD8A0", Offset = "0xFCD8A0", VA = "0xFCD8A0")]
	public static extern void CSharp_AkAcousticSurface_strName_set(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6001496")]
	[Address(RVA = "0xFCD95C", Offset = "0xFCD95C", VA = "0xFCD95C")]
	public static extern IntPtr CSharp_AkAcousticSurface_strName_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001497")]
	[Address(RVA = "0xFCD9F4", Offset = "0xFCD9F4", VA = "0xFCD9F4")]
	public static extern void CSharp_AkAcousticSurface_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001498")]
	[Address(RVA = "0xFCDA8C", Offset = "0xFCDA8C", VA = "0xFCDA8C")]
	public static extern void CSharp_AkAcousticSurface_DeleteName(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001499")]
	[Address(RVA = "0xFCDB24", Offset = "0xFCDB24", VA = "0xFCDB24")]
	public static extern int CSharp_AkAcousticSurface_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x600149A")]
	[Address(RVA = "0xFCDBAC", Offset = "0xFCDBAC", VA = "0xFCDBAC")]
	public static extern void CSharp_AkAcousticSurface_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600149B")]
	[Address(RVA = "0xFCDC54", Offset = "0xFCDC54", VA = "0xFCDC54")]
	public static extern void CSharp_delete_AkAcousticSurface(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600149C")]
	[Address(RVA = "0xFCDCEC", Offset = "0xFCDCEC", VA = "0xFCDCEC")]
	public static extern void CSharp_AkReflectionPathInfo_imageSource_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600149D")]
	[Address(RVA = "0xFCDD94", Offset = "0xFCDD94", VA = "0xFCDD94")]
	public static extern IntPtr CSharp_AkReflectionPathInfo_imageSource_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600149E")]
	[Address(RVA = "0xFCDE2C", Offset = "0xFCDE2C", VA = "0xFCDE2C")]
	public static extern void CSharp_AkReflectionPathInfo_numPathPoints_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600149F")]
	[Address(RVA = "0xFCDED4", Offset = "0xFCDED4", VA = "0xFCDED4")]
	public static extern uint CSharp_AkReflectionPathInfo_numPathPoints_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014A0")]
	[Address(RVA = "0xFCDF6C", Offset = "0xFCDF6C", VA = "0xFCDF6C")]
	public static extern void CSharp_AkReflectionPathInfo_numReflections_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014A1")]
	[Address(RVA = "0xFCE014", Offset = "0xFCE014", VA = "0xFCE014")]
	public static extern uint CSharp_AkReflectionPathInfo_numReflections_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014A2")]
	[Address(RVA = "0xFCE0AC", Offset = "0xFCE0AC", VA = "0xFCE0AC")]
	public static extern void CSharp_AkReflectionPathInfo_level_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014A3")]
	[Address(RVA = "0xFCE154", Offset = "0xFCE154", VA = "0xFCE154")]
	public static extern float CSharp_AkReflectionPathInfo_level_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014A4")]
	[Address(RVA = "0xFCE1EC", Offset = "0xFCE1EC", VA = "0xFCE1EC")]
	public static extern void CSharp_AkReflectionPathInfo_isOccluded_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x60014A5")]
	[Address(RVA = "0xFCE294", Offset = "0xFCE294", VA = "0xFCE294")]
	public static extern bool CSharp_AkReflectionPathInfo_isOccluded_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014A6")]
	[Address(RVA = "0xFCE334", Offset = "0xFCE334", VA = "0xFCE334")]
	public static extern int CSharp_AkReflectionPathInfo_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x60014A7")]
	[Address(RVA = "0xFCE3BC", Offset = "0xFCE3BC", VA = "0xFCE3BC")]
	public static extern IntPtr CSharp_AkReflectionPathInfo_GetPathPoint(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014A8")]
	[Address(RVA = "0xFCE464", Offset = "0xFCE464", VA = "0xFCE464")]
	public static extern IntPtr CSharp_AkReflectionPathInfo_GetAcousticSurface(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014A9")]
	[Address(RVA = "0xFCE50C", Offset = "0xFCE50C", VA = "0xFCE50C")]
	public static extern float CSharp_AkReflectionPathInfo_GetDiffraction(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014AA")]
	[Address(RVA = "0xFCE5B4", Offset = "0xFCE5B4", VA = "0xFCE5B4")]
	public static extern void CSharp_AkReflectionPathInfo_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014AB")]
	[Address(RVA = "0xFCE65C", Offset = "0xFCE65C", VA = "0xFCE65C")]
	public static extern IntPtr CSharp_new_AkReflectionPathInfo();

	[PreserveSig]
	[Token(Token = "0x60014AC")]
	[Address(RVA = "0xFCE6E4", Offset = "0xFCE6E4", VA = "0xFCE6E4")]
	public static extern void CSharp_delete_AkReflectionPathInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014AD")]
	[Address(RVA = "0xFCE77C", Offset = "0xFCE77C", VA = "0xFCE77C")]
	public static extern void CSharp_AkDiffractionPathInfo_virtualPos_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014AE")]
	[Address(RVA = "0xFCE824", Offset = "0xFCE824", VA = "0xFCE824")]
	public static extern IntPtr CSharp_AkDiffractionPathInfo_virtualPos_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014AF")]
	[Address(RVA = "0xFCE8BC", Offset = "0xFCE8BC", VA = "0xFCE8BC")]
	public static extern void CSharp_AkDiffractionPathInfo_nodeCount_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014B0")]
	[Address(RVA = "0xFCE964", Offset = "0xFCE964", VA = "0xFCE964")]
	public static extern uint CSharp_AkDiffractionPathInfo_nodeCount_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014B1")]
	[Address(RVA = "0xFCE9FC", Offset = "0xFCE9FC", VA = "0xFCE9FC")]
	public static extern void CSharp_AkDiffractionPathInfo_diffraction_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014B2")]
	[Address(RVA = "0xFCEAA4", Offset = "0xFCEAA4", VA = "0xFCEAA4")]
	public static extern float CSharp_AkDiffractionPathInfo_diffraction_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014B3")]
	[Address(RVA = "0xFCEB3C", Offset = "0xFCEB3C", VA = "0xFCEB3C")]
	public static extern void CSharp_AkDiffractionPathInfo_totLength_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014B4")]
	[Address(RVA = "0xFCEBE4", Offset = "0xFCEBE4", VA = "0xFCEBE4")]
	public static extern float CSharp_AkDiffractionPathInfo_totLength_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014B5")]
	[Address(RVA = "0xFCEC7C", Offset = "0xFCEC7C", VA = "0xFCEC7C")]
	public static extern void CSharp_AkDiffractionPathInfo_obstructionValue_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014B6")]
	[Address(RVA = "0xFCED24", Offset = "0xFCED24", VA = "0xFCED24")]
	public static extern float CSharp_AkDiffractionPathInfo_obstructionValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014B7")]
	[Address(RVA = "0xFCEDBC", Offset = "0xFCEDBC", VA = "0xFCEDBC")]
	public static extern int CSharp_AkDiffractionPathInfo_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x60014B8")]
	[Address(RVA = "0xFCEE44", Offset = "0xFCEE44", VA = "0xFCEE44")]
	public static extern IntPtr CSharp_AkDiffractionPathInfo_GetNodes(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014B9")]
	[Address(RVA = "0xFCEEEC", Offset = "0xFCEEEC", VA = "0xFCEEEC")]
	public static extern float CSharp_AkDiffractionPathInfo_GetAngles(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014BA")]
	[Address(RVA = "0xFCEF94", Offset = "0xFCEF94", VA = "0xFCEF94")]
	public static extern ulong CSharp_AkDiffractionPathInfo_GetPortals(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014BB")]
	[Address(RVA = "0xFCF03C", Offset = "0xFCF03C", VA = "0xFCF03C")]
	public static extern ulong CSharp_AkDiffractionPathInfo_GetRooms(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014BC")]
	[Address(RVA = "0xFCF0E4", Offset = "0xFCF0E4", VA = "0xFCF0E4")]
	public static extern void CSharp_AkDiffractionPathInfo_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014BD")]
	[Address(RVA = "0xFCF18C", Offset = "0xFCF18C", VA = "0xFCF18C")]
	public static extern IntPtr CSharp_new_AkDiffractionPathInfo();

	[PreserveSig]
	[Token(Token = "0x60014BE")]
	[Address(RVA = "0xFCF214", Offset = "0xFCF214", VA = "0xFCF214")]
	public static extern void CSharp_delete_AkDiffractionPathInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014BF")]
	[Address(RVA = "0xFCF2AC", Offset = "0xFCF2AC", VA = "0xFCF2AC")]
	public static extern IntPtr CSharp_new_AkRoomParams();

	[PreserveSig]
	[Token(Token = "0x60014C0")]
	[Address(RVA = "0xFCF334", Offset = "0xFCF334", VA = "0xFCF334")]
	public static extern void CSharp_AkRoomParams_Up_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014C1")]
	[Address(RVA = "0xFCF3DC", Offset = "0xFCF3DC", VA = "0xFCF3DC")]
	public static extern IntPtr CSharp_AkRoomParams_Up_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014C2")]
	[Address(RVA = "0xFCF474", Offset = "0xFCF474", VA = "0xFCF474")]
	public static extern void CSharp_AkRoomParams_Front_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014C3")]
	[Address(RVA = "0xFCF51C", Offset = "0xFCF51C", VA = "0xFCF51C")]
	public static extern IntPtr CSharp_AkRoomParams_Front_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014C4")]
	[Address(RVA = "0xFCF5B4", Offset = "0xFCF5B4", VA = "0xFCF5B4")]
	public static extern void CSharp_AkRoomParams_ReverbAuxBus_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014C5")]
	[Address(RVA = "0xFCF65C", Offset = "0xFCF65C", VA = "0xFCF65C")]
	public static extern uint CSharp_AkRoomParams_ReverbAuxBus_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014C6")]
	[Address(RVA = "0xFCF6F4", Offset = "0xFCF6F4", VA = "0xFCF6F4")]
	public static extern void CSharp_AkRoomParams_ReverbLevel_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014C7")]
	[Address(RVA = "0xFCF79C", Offset = "0xFCF79C", VA = "0xFCF79C")]
	public static extern float CSharp_AkRoomParams_ReverbLevel_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014C8")]
	[Address(RVA = "0xFCF834", Offset = "0xFCF834", VA = "0xFCF834")]
	public static extern void CSharp_AkRoomParams_WallOcclusion_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014C9")]
	[Address(RVA = "0xFCF8DC", Offset = "0xFCF8DC", VA = "0xFCF8DC")]
	public static extern float CSharp_AkRoomParams_WallOcclusion_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014CA")]
	[Address(RVA = "0xFCF974", Offset = "0xFCF974", VA = "0xFCF974")]
	public static extern void CSharp_AkRoomParams_RoomGameObj_AuxSendLevelToSelf_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014CB")]
	[Address(RVA = "0xFCFA1C", Offset = "0xFCFA1C", VA = "0xFCFA1C")]
	public static extern float CSharp_AkRoomParams_RoomGameObj_AuxSendLevelToSelf_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014CC")]
	[Address(RVA = "0xFCFAB4", Offset = "0xFCFAB4", VA = "0xFCFAB4")]
	public static extern void CSharp_AkRoomParams_RoomGameObj_KeepRegistered_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x60014CD")]
	[Address(RVA = "0xFCFB5C", Offset = "0xFCFB5C", VA = "0xFCFB5C")]
	public static extern bool CSharp_AkRoomParams_RoomGameObj_KeepRegistered_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014CE")]
	[Address(RVA = "0xFCFBFC", Offset = "0xFCFBFC", VA = "0xFCFBFC")]
	public static extern void CSharp_delete_AkRoomParams(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014CF")]
	[Address(RVA = "0xFCFC94", Offset = "0xFCFC94", VA = "0xFCFC94")]
	public static extern int CSharp_GetPoolID();

	[PreserveSig]
	[Token(Token = "0x60014D0")]
	[Address(RVA = "0xFCFD1C", Offset = "0xFCFD1C", VA = "0xFCFD1C")]
	public static extern int CSharp_RegisterEmitter(ulong jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014D1")]
	[Address(RVA = "0xFCFDC4", Offset = "0xFCFDC4", VA = "0xFCFDC4")]
	public static extern int CSharp_UnregisterEmitter(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60014D2")]
	[Address(RVA = "0xFCFE5C", Offset = "0xFCFE5C", VA = "0xFCFE5C")]
	public static extern int CSharp_SetEmitterAuxSendValues(ulong jarg1, IntPtr jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60014D3")]
	[Address(RVA = "0xFCFF0C", Offset = "0xFCFF0C", VA = "0xFCFF0C")]
	public static extern int CSharp_SetImageSource__SWIG_0(uint jarg1, IntPtr jarg2, uint jarg3, ulong jarg4, ulong jarg5);

	[PreserveSig]
	[Token(Token = "0x60014D4")]
	[Address(RVA = "0xFCFFD4", Offset = "0xFCFFD4", VA = "0xFCFFD4")]
	public static extern int CSharp_SetImageSource__SWIG_1(uint jarg1, IntPtr jarg2, uint jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x60014D5")]
	[Address(RVA = "0xFD0094", Offset = "0xFD0094", VA = "0xFD0094")]
	public static extern int CSharp_RemoveImageSource__SWIG_0(uint jarg1, uint jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x60014D6")]
	[Address(RVA = "0xFD0144", Offset = "0xFD0144", VA = "0xFD0144")]
	public static extern int CSharp_RemoveImageSource__SWIG_1(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014D7")]
	[Address(RVA = "0xFD01EC", Offset = "0xFD01EC", VA = "0xFD01EC")]
	public static extern int CSharp_RemoveGeometry(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60014D8")]
	[Address(RVA = "0xFD0284", Offset = "0xFD0284", VA = "0xFD0284")]
	public static extern int CSharp_QueryReflectionPaths(ulong jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4, out uint jarg5);

	[PreserveSig]
	[Token(Token = "0x60014D9")]
	[Address(RVA = "0xFD034C", Offset = "0xFD034C", VA = "0xFD034C")]
	public static extern int CSharp_RemoveRoom(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60014DA")]
	[Address(RVA = "0xFD03E4", Offset = "0xFD03E4", VA = "0xFD03E4")]
	public static extern int CSharp_RemovePortal(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60014DB")]
	[Address(RVA = "0xFD047C", Offset = "0xFD047C", VA = "0xFD047C")]
	public static extern int CSharp_SetGameObjectInRoom(ulong jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x60014DC")]
	[Address(RVA = "0xFD0524", Offset = "0xFD0524", VA = "0xFD0524")]
	public static extern int CSharp_SetEmitterObstructionAndOcclusion(ulong jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x60014DD")]
	[Address(RVA = "0xFD05D4", Offset = "0xFD05D4", VA = "0xFD05D4")]
	public static extern int CSharp_SetPortalObstructionAndOcclusion(ulong jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x60014DE")]
	[Address(RVA = "0xFD0684", Offset = "0xFD0684", VA = "0xFD0684")]
	public static extern int CSharp_QueryWetDiffraction(ulong jarg1, out float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014DF")]
	[Address(RVA = "0xFD072C", Offset = "0xFD072C", VA = "0xFD072C")]
	public static extern void CSharp_AkPlatformInitSettings_threadLEngine_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014E0")]
	[Address(RVA = "0xFD07D4", Offset = "0xFD07D4", VA = "0xFD07D4")]
	public static extern IntPtr CSharp_AkPlatformInitSettings_threadLEngine_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014E1")]
	[Address(RVA = "0xFD086C", Offset = "0xFD086C", VA = "0xFD086C")]
	public static extern void CSharp_AkPlatformInitSettings_threadOutputMgr_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014E2")]
	[Address(RVA = "0xFD0914", Offset = "0xFD0914", VA = "0xFD0914")]
	public static extern IntPtr CSharp_AkPlatformInitSettings_threadOutputMgr_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014E3")]
	[Address(RVA = "0xFD09AC", Offset = "0xFD09AC", VA = "0xFD09AC")]
	public static extern void CSharp_AkPlatformInitSettings_threadBankManager_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014E4")]
	[Address(RVA = "0xFD0A54", Offset = "0xFD0A54", VA = "0xFD0A54")]
	public static extern IntPtr CSharp_AkPlatformInitSettings_threadBankManager_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014E5")]
	[Address(RVA = "0xFD0AEC", Offset = "0xFD0AEC", VA = "0xFD0AEC")]
	public static extern void CSharp_AkPlatformInitSettings_threadMonitor_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014E6")]
	[Address(RVA = "0xFD0B94", Offset = "0xFD0B94", VA = "0xFD0B94")]
	public static extern IntPtr CSharp_AkPlatformInitSettings_threadMonitor_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014E7")]
	[Address(RVA = "0xFD0C2C", Offset = "0xFD0C2C", VA = "0xFD0C2C")]
	public static extern void CSharp_AkPlatformInitSettings_fLEngineDefaultPoolRatioThreshold_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60014E8")]
	[Address(RVA = "0xFD0CD4", Offset = "0xFD0CD4", VA = "0xFD0CD4")]
	public static extern float CSharp_AkPlatformInitSettings_fLEngineDefaultPoolRatioThreshold_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014E9")]
	[Address(RVA = "0xFD0D6C", Offset = "0xFD0D6C", VA = "0xFD0D6C")]
	public static extern void CSharp_AkPlatformInitSettings_uLEngineDefaultPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014EA")]
	[Address(RVA = "0xFD0E14", Offset = "0xFD0E14", VA = "0xFD0E14")]
	public static extern uint CSharp_AkPlatformInitSettings_uLEngineDefaultPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014EB")]
	[Address(RVA = "0xFD0EAC", Offset = "0xFD0EAC", VA = "0xFD0EAC")]
	public static extern void CSharp_AkPlatformInitSettings_eAudioAPI_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60014EC")]
	[Address(RVA = "0xFD0F54", Offset = "0xFD0F54", VA = "0xFD0F54")]
	public static extern int CSharp_AkPlatformInitSettings_eAudioAPI_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014ED")]
	[Address(RVA = "0xFD0FEC", Offset = "0xFD0FEC", VA = "0xFD0FEC")]
	public static extern void CSharp_AkPlatformInitSettings_uSampleRate_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014EE")]
	[Address(RVA = "0xFD1094", Offset = "0xFD1094", VA = "0xFD1094")]
	public static extern uint CSharp_AkPlatformInitSettings_uSampleRate_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014EF")]
	[Address(RVA = "0xFD112C", Offset = "0xFD112C", VA = "0xFD112C")]
	public static extern void CSharp_AkPlatformInitSettings_uNumRefillsInVoice_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x60014F0")]
	[Address(RVA = "0xFD11D4", Offset = "0xFD11D4", VA = "0xFD11D4")]
	public static extern ushort CSharp_AkPlatformInitSettings_uNumRefillsInVoice_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014F1")]
	[Address(RVA = "0xFD126C", Offset = "0xFD126C", VA = "0xFD126C")]
	public static extern void CSharp_AkPlatformInitSettings_uChannelMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014F2")]
	[Address(RVA = "0xFD1314", Offset = "0xFD1314", VA = "0xFD1314")]
	public static extern uint CSharp_AkPlatformInitSettings_uChannelMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014F3")]
	[Address(RVA = "0xFD13AC", Offset = "0xFD13AC", VA = "0xFD13AC")]
	public static extern void CSharp_AkPlatformInitSettings_bRoundFrameSizeToHWSize_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x60014F4")]
	[Address(RVA = "0xFD1454", Offset = "0xFD1454", VA = "0xFD1454")]
	public static extern bool CSharp_AkPlatformInitSettings_bRoundFrameSizeToHWSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014F5")]
	[Address(RVA = "0xFD14F4", Offset = "0xFD14F4", VA = "0xFD14F4")]
	public static extern IntPtr CSharp_new_AkPlatformInitSettings();

	[PreserveSig]
	[Token(Token = "0x60014F6")]
	[Address(RVA = "0xFD157C", Offset = "0xFD157C", VA = "0xFD157C")]
	public static extern void CSharp_delete_AkPlatformInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014F7")]
	[Address(RVA = "0xFD1614", Offset = "0xFD1614", VA = "0xFD1614")]
	public static extern int CSharp_GetFastPathSettings(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014F8")]
	[Address(RVA = "0xFD16BC", Offset = "0xFD16BC", VA = "0xFD16BC")]
	public static extern void CSharp_AkStreamMgrSettings_uMemorySize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014F9")]
	[Address(RVA = "0xFD1764", Offset = "0xFD1764", VA = "0xFD1764")]
	public static extern uint CSharp_AkStreamMgrSettings_uMemorySize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014FA")]
	[Address(RVA = "0xFD17FC", Offset = "0xFD17FC", VA = "0xFD17FC")]
	public static extern IntPtr CSharp_new_AkStreamMgrSettings();

	[PreserveSig]
	[Token(Token = "0x60014FB")]
	[Address(RVA = "0xFD1884", Offset = "0xFD1884", VA = "0xFD1884")]
	public static extern void CSharp_delete_AkStreamMgrSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014FC")]
	[Address(RVA = "0xFD191C", Offset = "0xFD191C", VA = "0xFD191C")]
	public static extern void CSharp_AkDeviceSettings_pIOMemory_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60014FD")]
	[Address(RVA = "0xFD19C4", Offset = "0xFD19C4", VA = "0xFD19C4")]
	public static extern IntPtr CSharp_AkDeviceSettings_pIOMemory_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60014FE")]
	[Address(RVA = "0xFD1A5C", Offset = "0xFD1A5C", VA = "0xFD1A5C")]
	public static extern void CSharp_AkDeviceSettings_uIOMemorySize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60014FF")]
	[Address(RVA = "0xFD1B04", Offset = "0xFD1B04", VA = "0xFD1B04")]
	public static extern uint CSharp_AkDeviceSettings_uIOMemorySize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001500")]
	[Address(RVA = "0xFD1B9C", Offset = "0xFD1B9C", VA = "0xFD1B9C")]
	public static extern void CSharp_AkDeviceSettings_uIOMemoryAlignment_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001501")]
	[Address(RVA = "0xFD1C44", Offset = "0xFD1C44", VA = "0xFD1C44")]
	public static extern uint CSharp_AkDeviceSettings_uIOMemoryAlignment_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001502")]
	[Address(RVA = "0xFD1CDC", Offset = "0xFD1CDC", VA = "0xFD1CDC")]
	public static extern void CSharp_AkDeviceSettings_ePoolAttributes_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001503")]
	[Address(RVA = "0xFD1D84", Offset = "0xFD1D84", VA = "0xFD1D84")]
	public static extern int CSharp_AkDeviceSettings_ePoolAttributes_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001504")]
	[Address(RVA = "0xFD1E1C", Offset = "0xFD1E1C", VA = "0xFD1E1C")]
	public static extern void CSharp_AkDeviceSettings_uGranularity_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001505")]
	[Address(RVA = "0xFD1EC4", Offset = "0xFD1EC4", VA = "0xFD1EC4")]
	public static extern uint CSharp_AkDeviceSettings_uGranularity_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001506")]
	[Address(RVA = "0xFD1F5C", Offset = "0xFD1F5C", VA = "0xFD1F5C")]
	public static extern void CSharp_AkDeviceSettings_uSchedulerTypeFlags_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001507")]
	[Address(RVA = "0xFD2004", Offset = "0xFD2004", VA = "0xFD2004")]
	public static extern uint CSharp_AkDeviceSettings_uSchedulerTypeFlags_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001508")]
	[Address(RVA = "0xFD209C", Offset = "0xFD209C", VA = "0xFD209C")]
	public static extern void CSharp_AkDeviceSettings_threadProperties_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001509")]
	[Address(RVA = "0xFD2144", Offset = "0xFD2144", VA = "0xFD2144")]
	public static extern IntPtr CSharp_AkDeviceSettings_threadProperties_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600150A")]
	[Address(RVA = "0xFD21DC", Offset = "0xFD21DC", VA = "0xFD21DC")]
	public static extern void CSharp_AkDeviceSettings_fTargetAutoStmBufferLength_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600150B")]
	[Address(RVA = "0xFD2284", Offset = "0xFD2284", VA = "0xFD2284")]
	public static extern float CSharp_AkDeviceSettings_fTargetAutoStmBufferLength_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600150C")]
	[Address(RVA = "0xFD231C", Offset = "0xFD231C", VA = "0xFD231C")]
	public static extern void CSharp_AkDeviceSettings_uMaxConcurrentIO_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600150D")]
	[Address(RVA = "0xFD23C4", Offset = "0xFD23C4", VA = "0xFD23C4")]
	public static extern uint CSharp_AkDeviceSettings_uMaxConcurrentIO_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600150E")]
	[Address(RVA = "0xFD245C", Offset = "0xFD245C", VA = "0xFD245C")]
	public static extern void CSharp_AkDeviceSettings_bUseStreamCache_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x600150F")]
	[Address(RVA = "0xFD2504", Offset = "0xFD2504", VA = "0xFD2504")]
	public static extern bool CSharp_AkDeviceSettings_bUseStreamCache_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001510")]
	[Address(RVA = "0xFD25A4", Offset = "0xFD25A4", VA = "0xFD25A4")]
	public static extern void CSharp_AkDeviceSettings_uMaxCachePinnedBytes_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001511")]
	[Address(RVA = "0xFD264C", Offset = "0xFD264C", VA = "0xFD264C")]
	public static extern uint CSharp_AkDeviceSettings_uMaxCachePinnedBytes_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001512")]
	[Address(RVA = "0xFD26E4", Offset = "0xFD26E4", VA = "0xFD26E4")]
	public static extern IntPtr CSharp_new_AkDeviceSettings();

	[PreserveSig]
	[Token(Token = "0x6001513")]
	[Address(RVA = "0xFD276C", Offset = "0xFD276C", VA = "0xFD276C")]
	public static extern void CSharp_delete_AkDeviceSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001514")]
	[Address(RVA = "0xFD2804", Offset = "0xFD2804", VA = "0xFD2804")]
	public static extern void CSharp_AkThreadProperties_nPriority_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001515")]
	[Address(RVA = "0xFD28AC", Offset = "0xFD28AC", VA = "0xFD28AC")]
	public static extern int CSharp_AkThreadProperties_nPriority_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001516")]
	[Address(RVA = "0xFD2944", Offset = "0xFD2944", VA = "0xFD2944")]
	public static extern void CSharp_AkThreadProperties_uStackSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001517")]
	[Address(RVA = "0xFD29EC", Offset = "0xFD29EC", VA = "0xFD29EC")]
	public static extern uint CSharp_AkThreadProperties_uStackSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001518")]
	[Address(RVA = "0xFD2A84", Offset = "0xFD2A84", VA = "0xFD2A84")]
	public static extern void CSharp_AkThreadProperties_uSchedPolicy_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001519")]
	[Address(RVA = "0xFD2B2C", Offset = "0xFD2B2C", VA = "0xFD2B2C")]
	public static extern int CSharp_AkThreadProperties_uSchedPolicy_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600151A")]
	[Address(RVA = "0xFD2BC4", Offset = "0xFD2BC4", VA = "0xFD2BC4")]
	public static extern void CSharp_AkThreadProperties_dwAffinityMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600151B")]
	[Address(RVA = "0xFD2C6C", Offset = "0xFD2C6C", VA = "0xFD2C6C")]
	public static extern uint CSharp_AkThreadProperties_dwAffinityMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600151C")]
	[Address(RVA = "0xFD2D04", Offset = "0xFD2D04", VA = "0xFD2D04")]
	public static extern IntPtr CSharp_new_AkThreadProperties();

	[PreserveSig]
	[Token(Token = "0x600151D")]
	[Address(RVA = "0xFD2D8C", Offset = "0xFD2D8C", VA = "0xFD2D8C")]
	public static extern void CSharp_delete_AkThreadProperties(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600151E")]
	[Address(RVA = "0xFD2E24", Offset = "0xFD2E24", VA = "0xFD2E24")]
	public static extern void CSharp_SetErrorLogger__SWIG_0(AkLogger.ErrorLoggerInteropDelegate jarg1);

	[PreserveSig]
	[Token(Token = "0x600151F")]
	[Address(RVA = "0xFD2EC0", Offset = "0xFD2EC0", VA = "0xFD2EC0")]
	public static extern void CSharp_SetErrorLogger__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6001520")]
	[Address(RVA = "0xFD2F48", Offset = "0xFD2F48", VA = "0xFD2F48")]
	public static extern void CSharp_SetAudioInputCallbacks(AkAudioInputManager.AudioSamplesInteropDelegate jarg1, AkAudioInputManager.AudioFormatInteropDelegate jarg2);

	[PreserveSig]
	[Token(Token = "0x6001521")]
	[Address(RVA = "0xFD3004", Offset = "0xFD3004", VA = "0xFD3004")]
	public static extern void CSharp_AkPathParams_listenerPos_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001522")]
	[Address(RVA = "0xFD30AC", Offset = "0xFD30AC", VA = "0xFD30AC")]
	public static extern IntPtr CSharp_AkPathParams_listenerPos_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001523")]
	[Address(RVA = "0xFD3144", Offset = "0xFD3144", VA = "0xFD3144")]
	public static extern void CSharp_AkPathParams_emitterPos_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001524")]
	[Address(RVA = "0xFD31EC", Offset = "0xFD31EC", VA = "0xFD31EC")]
	public static extern IntPtr CSharp_AkPathParams_emitterPos_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001525")]
	[Address(RVA = "0xFD3284", Offset = "0xFD3284", VA = "0xFD3284")]
	public static extern void CSharp_AkPathParams_numValidPaths_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001526")]
	[Address(RVA = "0xFD332C", Offset = "0xFD332C", VA = "0xFD332C")]
	public static extern uint CSharp_AkPathParams_numValidPaths_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001527")]
	[Address(RVA = "0xFD33C4", Offset = "0xFD33C4", VA = "0xFD33C4")]
	public static extern IntPtr CSharp_new_AkPathParams();

	[PreserveSig]
	[Token(Token = "0x6001528")]
	[Address(RVA = "0xFD344C", Offset = "0xFD344C", VA = "0xFD344C")]
	public static extern void CSharp_delete_AkPathParams(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001529")]
	[Address(RVA = "0xFD34E4", Offset = "0xFD34E4", VA = "0xFD34E4")]
	public static extern IntPtr CSharp_new_AkUnityPlatformSpecificSettings();

	[PreserveSig]
	[Token(Token = "0x600152A")]
	[Address(RVA = "0xFD356C", Offset = "0xFD356C", VA = "0xFD356C")]
	public static extern void CSharp_delete_AkUnityPlatformSpecificSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600152B")]
	[Address(RVA = "0xFD3604", Offset = "0xFD3604", VA = "0xFD3604")]
	public static extern IntPtr CSharp_new_AkCommunicationSettings();

	[PreserveSig]
	[Token(Token = "0x600152C")]
	[Address(RVA = "0xFD368C", Offset = "0xFD368C", VA = "0xFD368C")]
	public static extern void CSharp_AkCommunicationSettings_uPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600152D")]
	[Address(RVA = "0xFD3734", Offset = "0xFD3734", VA = "0xFD3734")]
	public static extern uint CSharp_AkCommunicationSettings_uPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600152E")]
	[Address(RVA = "0xFD37CC", Offset = "0xFD37CC", VA = "0xFD37CC")]
	public static extern void CSharp_AkCommunicationSettings_uDiscoveryBroadcastPort_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x600152F")]
	[Address(RVA = "0xFD3874", Offset = "0xFD3874", VA = "0xFD3874")]
	public static extern ushort CSharp_AkCommunicationSettings_uDiscoveryBroadcastPort_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001530")]
	[Address(RVA = "0xFD390C", Offset = "0xFD390C", VA = "0xFD390C")]
	public static extern void CSharp_AkCommunicationSettings_uCommandPort_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001531")]
	[Address(RVA = "0xFD39B4", Offset = "0xFD39B4", VA = "0xFD39B4")]
	public static extern ushort CSharp_AkCommunicationSettings_uCommandPort_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001532")]
	[Address(RVA = "0xFD3A4C", Offset = "0xFD3A4C", VA = "0xFD3A4C")]
	public static extern void CSharp_AkCommunicationSettings_uNotificationPort_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001533")]
	[Address(RVA = "0xFD3AF4", Offset = "0xFD3AF4", VA = "0xFD3AF4")]
	public static extern ushort CSharp_AkCommunicationSettings_uNotificationPort_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001534")]
	[Address(RVA = "0xFD3B8C", Offset = "0xFD3B8C", VA = "0xFD3B8C")]
	public static extern void CSharp_AkCommunicationSettings_bInitSystemLib_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6001535")]
	[Address(RVA = "0xFD3C34", Offset = "0xFD3C34", VA = "0xFD3C34")]
	public static extern bool CSharp_AkCommunicationSettings_bInitSystemLib_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001536")]
	[Address(RVA = "0xFD3CD4", Offset = "0xFD3CD4", VA = "0xFD3CD4")]
	public static extern void CSharp_AkCommunicationSettings_szAppNetworkName_set(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6001537")]
	[Address(RVA = "0xFD3D90", Offset = "0xFD3D90", VA = "0xFD3D90")]
	public static extern IntPtr CSharp_AkCommunicationSettings_szAppNetworkName_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001538")]
	[Address(RVA = "0xFD3E28", Offset = "0xFD3E28", VA = "0xFD3E28")]
	public static extern void CSharp_delete_AkCommunicationSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001539")]
	[Address(RVA = "0xFD3EC0", Offset = "0xFD3EC0", VA = "0xFD3EC0")]
	public static extern IntPtr CSharp_new_AkInitializationSettings();

	[PreserveSig]
	[Token(Token = "0x600153A")]
	[Address(RVA = "0xFD3F48", Offset = "0xFD3F48", VA = "0xFD3F48")]
	public static extern void CSharp_delete_AkInitializationSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600153B")]
	[Address(RVA = "0xFD3FE0", Offset = "0xFD3FE0", VA = "0xFD3FE0")]
	public static extern void CSharp_AkInitializationSettings_memSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600153C")]
	[Address(RVA = "0xFD4088", Offset = "0xFD4088", VA = "0xFD4088")]
	public static extern IntPtr CSharp_AkInitializationSettings_memSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600153D")]
	[Address(RVA = "0xFD4120", Offset = "0xFD4120", VA = "0xFD4120")]
	public static extern void CSharp_AkInitializationSettings_streamMgrSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600153E")]
	[Address(RVA = "0xFD41C8", Offset = "0xFD41C8", VA = "0xFD41C8")]
	public static extern IntPtr CSharp_AkInitializationSettings_streamMgrSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600153F")]
	[Address(RVA = "0xFD4260", Offset = "0xFD4260", VA = "0xFD4260")]
	public static extern void CSharp_AkInitializationSettings_deviceSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001540")]
	[Address(RVA = "0xFD4308", Offset = "0xFD4308", VA = "0xFD4308")]
	public static extern IntPtr CSharp_AkInitializationSettings_deviceSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001541")]
	[Address(RVA = "0xFD43A0", Offset = "0xFD43A0", VA = "0xFD43A0")]
	public static extern void CSharp_AkInitializationSettings_initSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001542")]
	[Address(RVA = "0xFD4448", Offset = "0xFD4448", VA = "0xFD4448")]
	public static extern IntPtr CSharp_AkInitializationSettings_initSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001543")]
	[Address(RVA = "0xFD44E0", Offset = "0xFD44E0", VA = "0xFD44E0")]
	public static extern void CSharp_AkInitializationSettings_platformSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001544")]
	[Address(RVA = "0xFD4588", Offset = "0xFD4588", VA = "0xFD4588")]
	public static extern IntPtr CSharp_AkInitializationSettings_platformSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001545")]
	[Address(RVA = "0xFD4620", Offset = "0xFD4620", VA = "0xFD4620")]
	public static extern void CSharp_AkInitializationSettings_musicSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001546")]
	[Address(RVA = "0xFD46C8", Offset = "0xFD46C8", VA = "0xFD46C8")]
	public static extern IntPtr CSharp_AkInitializationSettings_musicSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001547")]
	[Address(RVA = "0xFD4760", Offset = "0xFD4760", VA = "0xFD4760")]
	public static extern void CSharp_AkInitializationSettings_preparePoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001548")]
	[Address(RVA = "0xFD4808", Offset = "0xFD4808", VA = "0xFD4808")]
	public static extern uint CSharp_AkInitializationSettings_preparePoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001549")]
	[Address(RVA = "0xFD48A0", Offset = "0xFD48A0", VA = "0xFD48A0")]
	public static extern void CSharp_AkInitializationSettings_unityPlatformSpecificSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600154A")]
	[Address(RVA = "0xFD4948", Offset = "0xFD4948", VA = "0xFD4948")]
	public static extern IntPtr CSharp_AkInitializationSettings_unityPlatformSpecificSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600154B")]
	[Address(RVA = "0xFD49E0", Offset = "0xFD49E0", VA = "0xFD49E0")]
	public static extern void CSharp_AkInitializationSettings_useAsyncOpen_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x600154C")]
	[Address(RVA = "0xFD4A88", Offset = "0xFD4A88", VA = "0xFD4A88")]
	public static extern bool CSharp_AkInitializationSettings_useAsyncOpen_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600154D")]
	[Address(RVA = "0xFD4B28", Offset = "0xFD4B28", VA = "0xFD4B28")]
	public static extern IntPtr CSharp_new_AkExternalSourceInfo__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x600154E")]
	[Address(RVA = "0xFD4BB0", Offset = "0xFD4BB0", VA = "0xFD4BB0")]
	public static extern void CSharp_delete_AkExternalSourceInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600154F")]
	[Address(RVA = "0xFD4C48", Offset = "0xFD4C48", VA = "0xFD4C48")]
	public static extern IntPtr CSharp_new_AkExternalSourceInfo__SWIG_1(IntPtr jarg1, uint jarg2, uint jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6001550")]
	[Address(RVA = "0xFD4D08", Offset = "0xFD4D08", VA = "0xFD4D08")]
	public static extern IntPtr CSharp_new_AkExternalSourceInfo__SWIG_2(string jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001551")]
	[Address(RVA = "0xFD4DD0", Offset = "0xFD4DD0", VA = "0xFD4DD0")]
	public static extern IntPtr CSharp_new_AkExternalSourceInfo__SWIG_3(uint jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001552")]
	[Address(RVA = "0xFD4E80", Offset = "0xFD4E80", VA = "0xFD4E80")]
	public static extern void CSharp_AkExternalSourceInfo_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001553")]
	[Address(RVA = "0xFD4F18", Offset = "0xFD4F18", VA = "0xFD4F18")]
	public static extern void CSharp_AkExternalSourceInfo_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001554")]
	[Address(RVA = "0xFD4FC0", Offset = "0xFD4FC0", VA = "0xFD4FC0")]
	public static extern int CSharp_AkExternalSourceInfo_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6001555")]
	[Address(RVA = "0xFD5048", Offset = "0xFD5048", VA = "0xFD5048")]
	public static extern void CSharp_AkExternalSourceInfo_iExternalSrcCookie_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001556")]
	[Address(RVA = "0xFD50F0", Offset = "0xFD50F0", VA = "0xFD50F0")]
	public static extern uint CSharp_AkExternalSourceInfo_iExternalSrcCookie_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001557")]
	[Address(RVA = "0xFD5188", Offset = "0xFD5188", VA = "0xFD5188")]
	public static extern void CSharp_AkExternalSourceInfo_idCodec_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001558")]
	[Address(RVA = "0xFD5230", Offset = "0xFD5230", VA = "0xFD5230")]
	public static extern uint CSharp_AkExternalSourceInfo_idCodec_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001559")]
	[Address(RVA = "0xFD52C8", Offset = "0xFD52C8", VA = "0xFD52C8")]
	public static extern void CSharp_AkExternalSourceInfo_szFile_set(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x600155A")]
	[Address(RVA = "0xFD5384", Offset = "0xFD5384", VA = "0xFD5384")]
	public static extern IntPtr CSharp_AkExternalSourceInfo_szFile_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600155B")]
	[Address(RVA = "0xFD541C", Offset = "0xFD541C", VA = "0xFD541C")]
	public static extern void CSharp_AkExternalSourceInfo_pInMemory_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600155C")]
	[Address(RVA = "0xFD54C4", Offset = "0xFD54C4", VA = "0xFD54C4")]
	public static extern IntPtr CSharp_AkExternalSourceInfo_pInMemory_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600155D")]
	[Address(RVA = "0xFD555C", Offset = "0xFD555C", VA = "0xFD555C")]
	public static extern void CSharp_AkExternalSourceInfo_uiMemorySize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600155E")]
	[Address(RVA = "0xFD5604", Offset = "0xFD5604", VA = "0xFD5604")]
	public static extern uint CSharp_AkExternalSourceInfo_uiMemorySize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600155F")]
	[Address(RVA = "0xFD569C", Offset = "0xFD569C", VA = "0xFD569C")]
	public static extern void CSharp_AkExternalSourceInfo_idFile_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001560")]
	[Address(RVA = "0xFD5744", Offset = "0xFD5744", VA = "0xFD5744")]
	public static extern uint CSharp_AkExternalSourceInfo_idFile_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001561")]
	[Address(RVA = "0xFD57DC", Offset = "0xFD57DC", VA = "0xFD57DC")]
	public static extern int CSharp_Init(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001562")]
	[Address(RVA = "0xFD5874", Offset = "0xFD5874", VA = "0xFD5874")]
	public static extern int CSharp_InitSpatialAudio(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001563")]
	[Address(RVA = "0xFD590C", Offset = "0xFD590C", VA = "0xFD590C")]
	public static extern int CSharp_InitCommunication(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001564")]
	[Address(RVA = "0xFD59A4", Offset = "0xFD59A4", VA = "0xFD59A4")]
	public static extern void CSharp_Term();

	[PreserveSig]
	[Token(Token = "0x6001565")]
	[Address(RVA = "0xFD5A2C", Offset = "0xFD5A2C", VA = "0xFD5A2C")]
	public static extern int CSharp_RegisterGameObjInternal(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001566")]
	[Address(RVA = "0xFD5AC4", Offset = "0xFD5AC4", VA = "0xFD5AC4")]
	public static extern int CSharp_UnregisterGameObjInternal(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001567")]
	[Address(RVA = "0xFD5B5C", Offset = "0xFD5B5C", VA = "0xFD5B5C")]
	public static extern int CSharp_RegisterGameObjInternal_WithName(ulong jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6001568")]
	[Address(RVA = "0xFD5C20", Offset = "0xFD5C20", VA = "0xFD5C20")]
	public static extern int CSharp_SetBasePath(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6001569")]
	[Address(RVA = "0xFD5CD0", Offset = "0xFD5CD0", VA = "0xFD5CD0")]
	public static extern int CSharp_SetCurrentLanguage(string jarg1);

	[PreserveSig]
	[Token(Token = "0x600156A")]
	[Address(RVA = "0xFD5D80", Offset = "0xFD5D80", VA = "0xFD5D80")]
	public static extern int CSharp_LoadFilePackage(string jarg1, out uint jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x600156B")]
	[Address(RVA = "0xFD5E48", Offset = "0xFD5E48", VA = "0xFD5E48")]
	public static extern int CSharp_AddBasePath(string jarg1);

	[PreserveSig]
	[Token(Token = "0x600156C")]
	[Address(RVA = "0xFD5EF8", Offset = "0xFD5EF8", VA = "0xFD5EF8")]
	public static extern int CSharp_SetGameName(string jarg1);

	[PreserveSig]
	[Token(Token = "0x600156D")]
	[Address(RVA = "0xFD5FA8", Offset = "0xFD5FA8", VA = "0xFD5FA8")]
	public static extern int CSharp_SetDecodedBankPath(string jarg1);

	[PreserveSig]
	[Token(Token = "0x600156E")]
	[Address(RVA = "0xFD6058", Offset = "0xFD6058", VA = "0xFD6058")]
	public static extern int CSharp_LoadAndDecodeBank(string jarg1, bool jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x600156F")]
	[Address(RVA = "0xFD6120", Offset = "0xFD6120", VA = "0xFD6120")]
	public static extern int CSharp_LoadAndDecodeBankFromMemory(IntPtr jarg1, uint jarg2, bool jarg3, string jarg4, bool jarg5, out uint jarg6);

	[PreserveSig]
	[Token(Token = "0x6001570")]
	[Address(RVA = "0xFD6214", Offset = "0xFD6214", VA = "0xFD6214")]
	public static extern IntPtr CSharp_GetCurrentLanguage();

	[PreserveSig]
	[Token(Token = "0x6001571")]
	[Address(RVA = "0xFD629C", Offset = "0xFD629C", VA = "0xFD629C")]
	public static extern int CSharp_UnloadFilePackage(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001572")]
	[Address(RVA = "0xFD6334", Offset = "0xFD6334", VA = "0xFD6334")]
	public static extern int CSharp_UnloadAllFilePackages();

	[PreserveSig]
	[Token(Token = "0x6001573")]
	[Address(RVA = "0xFD63BC", Offset = "0xFD63BC", VA = "0xFD63BC")]
	public static extern int CSharp_SetObjectPosition(ulong jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10);

	[PreserveSig]
	[Token(Token = "0x6001574")]
	[Address(RVA = "0xFD64BC", Offset = "0xFD64BC", VA = "0xFD64BC")]
	public static extern int CSharp_GetSourceMultiplePlayPositions(uint jarg1, [Out] uint[] jarg2, [Out] uint[] jarg3, [Out] int[] jarg4, ref uint jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x6001575")]
	[Address(RVA = "0xFD66E0", Offset = "0xFD66E0", VA = "0xFD66E0")]
	public static extern int CSharp_SetListeners(ulong jarg1, ulong[] jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001576")]
	[Address(RVA = "0xFD6798", Offset = "0xFD6798", VA = "0xFD6798")]
	public static extern int CSharp_SetDefaultListeners(ulong[] jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001577")]
	[Address(RVA = "0xFD6848", Offset = "0xFD6848", VA = "0xFD6848")]
	public static extern int CSharp_AddOutput(IntPtr jarg1, out ulong jarg2, ulong[] jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6001578")]
	[Address(RVA = "0xFD6910", Offset = "0xFD6910", VA = "0xFD6910")]
	public static extern void CSharp_GetDefaultStreamSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001579")]
	[Address(RVA = "0xFD69A8", Offset = "0xFD69A8", VA = "0xFD69A8")]
	public static extern void CSharp_GetDefaultDeviceSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600157A")]
	[Address(RVA = "0xFD6A40", Offset = "0xFD6A40", VA = "0xFD6A40")]
	public static extern void CSharp_GetDefaultMusicSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600157B")]
	[Address(RVA = "0xFD6AD8", Offset = "0xFD6AD8", VA = "0xFD6AD8")]
	public static extern void CSharp_GetDefaultInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600157C")]
	[Address(RVA = "0xFD6B70", Offset = "0xFD6B70", VA = "0xFD6B70")]
	public static extern void CSharp_GetDefaultPlatformInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600157D")]
	[Address(RVA = "0xFD6C08", Offset = "0xFD6C08", VA = "0xFD6C08")]
	public static extern uint CSharp_GetMajorMinorVersion();

	[PreserveSig]
	[Token(Token = "0x600157E")]
	[Address(RVA = "0xFD6C90", Offset = "0xFD6C90", VA = "0xFD6C90")]
	public static extern uint CSharp_GetSubminorBuildVersion();

	[PreserveSig]
	[Token(Token = "0x600157F")]
	[Address(RVA = "0xFD6D18", Offset = "0xFD6D18", VA = "0xFD6D18")]
	public static extern int CSharp_QueryIndirectPaths(ulong jarg1, IntPtr jarg2, IntPtr jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6001580")]
	[Address(RVA = "0xFD6DD8", Offset = "0xFD6DD8", VA = "0xFD6DD8")]
	public static extern int CSharp_QueryDiffractionPaths(ulong jarg1, IntPtr jarg2, IntPtr jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6001581")]
	[Address(RVA = "0xFD6E94", Offset = "0xFD6E94", VA = "0xFD6E94")]
	public static extern int CSharp_SetRoomPortal(ulong jarg1, IntPtr jarg2, IntPtr jarg3, bool jarg4, ulong jarg5, ulong jarg6);

	[PreserveSig]
	[Token(Token = "0x6001582")]
	[Address(RVA = "0xFD6F6C", Offset = "0xFD6F6C", VA = "0xFD6F6C")]
	public static extern int CSharp_SetRoom(ulong jarg1, IntPtr jarg2, string jarg3);

	[PreserveSig]
	[Token(Token = "0x6001583")]
	[Address(RVA = "0xFD7038", Offset = "0xFD7038", VA = "0xFD7038")]
	public static extern int CSharp_RegisterSpatialAudioListener(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001584")]
	[Address(RVA = "0xFD70D0", Offset = "0xFD70D0", VA = "0xFD70D0")]
	public static extern int CSharp_UnregisterSpatialAudioListener(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001585")]
	[Address(RVA = "0xFD7168", Offset = "0xFD7168", VA = "0xFD7168")]
	public static extern int CSharp_SetGeometry(ulong jarg1, IntPtr jarg2, uint jarg3, IntPtr jarg4, uint jarg5, IntPtr jarg6, uint jarg7, ulong jarg8, bool jarg9, bool jarg10);

	[PreserveSig]
	[Token(Token = "0x6001586")]
	[Address(RVA = "0xFD7270", Offset = "0xFD7270", VA = "0xFD7270")]
	public static extern IntPtr CSharp_AkPlaylist_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001587")]
	[Address(RVA = "0xFD7308", Offset = "0xFD7308", VA = "0xFD7308")]
	public static extern IntPtr CSharp_AkMIDIPost_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001588")]
	[Address(RVA = "0xFD73A0", Offset = "0xFD73A0", VA = "0xFD73A0")]
	public static extern IntPtr CSharp_AkEventCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001589")]
	[Address(RVA = "0xFD7438", Offset = "0xFD7438", VA = "0xFD7438")]
	public static extern IntPtr CSharp_AkMIDIEventCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600158A")]
	[Address(RVA = "0xFD74D0", Offset = "0xFD74D0", VA = "0xFD74D0")]
	public static extern IntPtr CSharp_AkMarkerCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600158B")]
	[Address(RVA = "0xFD7568", Offset = "0xFD7568", VA = "0xFD7568")]
	public static extern IntPtr CSharp_AkDurationCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600158C")]
	[Address(RVA = "0xFD7600", Offset = "0xFD7600", VA = "0xFD7600")]
	public static extern IntPtr CSharp_AkDynamicSequenceItemCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600158D")]
	[Address(RVA = "0xFD7698", Offset = "0xFD7698", VA = "0xFD7698")]
	public static extern IntPtr CSharp_AkMusicSyncCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600158E")]
	[Address(RVA = "0xFD7730", Offset = "0xFD7730", VA = "0xFD7730")]
	public static extern IntPtr CSharp_AkMusicPlaylistCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[Token(Token = "0x600158F")]
	[Address(RVA = "0xFD77C8", Offset = "0xFD77C8", VA = "0xFD77C8")]
	public AkSoundEnginePINVOKE()
	{
	}
}
[Token(Token = "0x2000223")]
public class AkThreadProperties : IDisposable
{
	[Token(Token = "0x40010B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700016B")]
	public int nPriority
	{
		[Token(Token = "0x6001596")]
		[Address(RVA = "0x83BC04", Offset = "0x83BC04", VA = "0x83BC04")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001595")]
		[Address(RVA = "0x83BB88", Offset = "0x83BB88", VA = "0x83BB88")]
		set
		{
		}
	}

	[Token(Token = "0x1700016C")]
	public uint uStackSize
	{
		[Token(Token = "0x6001598")]
		[Address(RVA = "0x83BCEC", Offset = "0x83BCEC", VA = "0x83BCEC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001597")]
		[Address(RVA = "0x83BC70", Offset = "0x83BC70", VA = "0x83BC70")]
		set
		{
		}
	}

	[Token(Token = "0x1700016D")]
	public int uSchedPolicy
	{
		[Token(Token = "0x600159A")]
		[Address(RVA = "0x83BDD4", Offset = "0x83BDD4", VA = "0x83BDD4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001599")]
		[Address(RVA = "0x83BD58", Offset = "0x83BD58", VA = "0x83BD58")]
		set
		{
		}
	}

	[Token(Token = "0x1700016E")]
	public uint dwAffinityMask
	{
		[Token(Token = "0x600159C")]
		[Address(RVA = "0x83BEBC", Offset = "0x83BEBC", VA = "0x83BEBC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600159B")]
		[Address(RVA = "0x83BE40", Offset = "0x83BE40", VA = "0x83BE40")]
		set
		{
		}
	}

	[Token(Token = "0x6001590")]
	[Address(RVA = "0x83B910", Offset = "0x83B910", VA = "0x83B910")]
	internal AkThreadProperties(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001591")]
	[Address(RVA = "0x83B950", Offset = "0x83B950", VA = "0x83B950")]
	internal static IntPtr getCPtr(AkThreadProperties obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001592")]
	[Address(RVA = "0x83B9A0", Offset = "0x83B9A0", VA = "0x83B9A0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001593")]
	[Address(RVA = "0x83B9D4", Offset = "0x83B9D4", VA = "0x83B9D4", Slot = "1")]
	~AkThreadProperties()
	{
	}

	[Token(Token = "0x6001594")]
	[Address(RVA = "0x83BA48", Offset = "0x83BA48", VA = "0x83BA48", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600159D")]
	[Address(RVA = "0x83BF28", Offset = "0x83BF28", VA = "0x83BF28")]
	public AkThreadProperties()
	{
	}
}
[Token(Token = "0x2000224")]
public class AkUnityPlatformSpecificSettings : IDisposable
{
	[Token(Token = "0x40010B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x600159E")]
	[Address(RVA = "0x83EB3C", Offset = "0x83EB3C", VA = "0x83EB3C")]
	internal AkUnityPlatformSpecificSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600159F")]
	[Address(RVA = "0x83EB7C", Offset = "0x83EB7C", VA = "0x83EB7C")]
	internal static IntPtr getCPtr(AkUnityPlatformSpecificSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015A0")]
	[Address(RVA = "0x83EBCC", Offset = "0x83EBCC", VA = "0x83EBCC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015A1")]
	[Address(RVA = "0x83EC00", Offset = "0x83EC00", VA = "0x83EC00", Slot = "1")]
	~AkUnityPlatformSpecificSettings()
	{
	}

	[Token(Token = "0x60015A2")]
	[Address(RVA = "0x83EC74", Offset = "0x83EC74", VA = "0x83EC74", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015A3")]
	[Address(RVA = "0x83EDB4", Offset = "0x83EDB4", VA = "0x83EDB4")]
	public AkUnityPlatformSpecificSettings()
	{
	}
}
[Token(Token = "0x2000225")]
public class _ArrayPoolDefault : IDisposable
{
	[Token(Token = "0x40010B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x60015A4")]
	[Address(RVA = "0x133B73C", Offset = "0x133B73C", VA = "0x133B73C")]
	internal _ArrayPoolDefault(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015A5")]
	[Address(RVA = "0x133B77C", Offset = "0x133B77C", VA = "0x133B77C")]
	internal static IntPtr getCPtr(_ArrayPoolDefault obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015A6")]
	[Address(RVA = "0x133B7CC", Offset = "0x133B7CC", VA = "0x133B7CC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015A7")]
	[Address(RVA = "0x133B800", Offset = "0x133B800", VA = "0x133B800", Slot = "1")]
	~_ArrayPoolDefault()
	{
	}

	[Token(Token = "0x60015A8")]
	[Address(RVA = "0x133B874", Offset = "0x133B874", VA = "0x133B874", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015A9")]
	[Address(RVA = "0x133B9B4", Offset = "0x133B9B4", VA = "0x133B9B4")]
	public static int Get()
	{
		return default(int);
	}

	[Token(Token = "0x60015AA")]
	[Address(RVA = "0x133BA14", Offset = "0x133BA14", VA = "0x133BA14")]
	public _ArrayPoolDefault()
	{
	}
}
[Token(Token = "0x2000226")]
public class _ArrayPoolLEngineDefault : IDisposable
{
	[Token(Token = "0x40010B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x60015AB")]
	[Address(RVA = "0x133BA98", Offset = "0x133BA98", VA = "0x133BA98")]
	internal _ArrayPoolLEngineDefault(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015AC")]
	[Address(RVA = "0x133BAD8", Offset = "0x133BAD8", VA = "0x133BAD8")]
	internal static IntPtr getCPtr(_ArrayPoolLEngineDefault obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015AD")]
	[Address(RVA = "0x133BB28", Offset = "0x133BB28", VA = "0x133BB28", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015AE")]
	[Address(RVA = "0x133BB5C", Offset = "0x133BB5C", VA = "0x133BB5C", Slot = "1")]
	~_ArrayPoolLEngineDefault()
	{
	}

	[Token(Token = "0x60015AF")]
	[Address(RVA = "0x133BBD0", Offset = "0x133BBD0", VA = "0x133BBD0", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015B0")]
	[Address(RVA = "0x133BD10", Offset = "0x133BD10", VA = "0x133BD10")]
	public static int Get()
	{
		return default(int);
	}

	[Token(Token = "0x60015B1")]
	[Address(RVA = "0x133BD70", Offset = "0x133BD70", VA = "0x133BD70")]
	public _ArrayPoolLEngineDefault()
	{
	}
}
[Token(Token = "0x2000227")]
public class _ArrayPoolSpatialAudio : IDisposable
{
	[Token(Token = "0x40010B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x60015B2")]
	[Address(RVA = "0x133BDF4", Offset = "0x133BDF4", VA = "0x133BDF4")]
	internal _ArrayPoolSpatialAudio(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015B3")]
	[Address(RVA = "0x133BE34", Offset = "0x133BE34", VA = "0x133BE34")]
	internal static IntPtr getCPtr(_ArrayPoolSpatialAudio obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015B4")]
	[Address(RVA = "0x133BE84", Offset = "0x133BE84", VA = "0x133BE84", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015B5")]
	[Address(RVA = "0x133BEB8", Offset = "0x133BEB8", VA = "0x133BEB8", Slot = "1")]
	~_ArrayPoolSpatialAudio()
	{
	}

	[Token(Token = "0x60015B6")]
	[Address(RVA = "0x133BF2C", Offset = "0x133BF2C", VA = "0x133BF2C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015B7")]
	[Address(RVA = "0x133C06C", Offset = "0x133C06C", VA = "0x133C06C")]
	public static int Get()
	{
		return default(int);
	}

	[Token(Token = "0x60015B8")]
	[Address(RVA = "0x133C0CC", Offset = "0x133C0CC", VA = "0x133C0CC")]
	public _ArrayPoolSpatialAudio()
	{
	}
}
[Token(Token = "0x2000228")]
public enum Ak3DPositionType
{
	[Token(Token = "0x40010BB")]
	AK_3DPositionType_Emitter,
	[Token(Token = "0x40010BC")]
	AK_3DPositionType_EmitterWithAutomation,
	[Token(Token = "0x40010BD")]
	AK_3DPositionType_ListenerWithAutomation
}
[Token(Token = "0x2000229")]
public enum Ak3DSpatializationMode
{
	[Token(Token = "0x40010BF")]
	AK_SpatializationMode_None,
	[Token(Token = "0x40010C0")]
	AK_SpatializationMode_PositionOnly,
	[Token(Token = "0x40010C1")]
	AK_SpatializationMode_PositionAndOrientation
}
[Token(Token = "0x200022A")]
public class AkAcousticSurface : IDisposable
{
	[Token(Token = "0x40010C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700016F")]
	public uint textureID
	{
		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xA50A3C", Offset = "0xA50A3C", VA = "0xA50A3C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xA509C0", Offset = "0xA509C0", VA = "0xA509C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000170")]
	public uint reflectorChannelMask
	{
		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xA50B24", Offset = "0xA50B24", VA = "0xA50B24")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xA50AA8", Offset = "0xA50AA8", VA = "0xA50AA8")]
		set
		{
		}
	}

	[Token(Token = "0x17000171")]
	public string strName
	{
		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xA50C0C", Offset = "0xA50C0C", VA = "0xA50C0C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xA50B90", Offset = "0xA50B90", VA = "0xA50B90")]
		set
		{
		}
	}

	[Token(Token = "0x60015B9")]
	[Address(RVA = "0xA506C4", Offset = "0xA506C4", VA = "0xA506C4")]
	internal AkAcousticSurface(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015BA")]
	[Address(RVA = "0xA50704", Offset = "0xA50704", VA = "0xA50704")]
	internal static IntPtr getCPtr(AkAcousticSurface obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015BB")]
	[Address(RVA = "0xA50754", Offset = "0xA50754", VA = "0xA50754", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015BC")]
	[Address(RVA = "0xA50788", Offset = "0xA50788", VA = "0xA50788", Slot = "1")]
	~AkAcousticSurface()
	{
	}

	[Token(Token = "0x60015BD")]
	[Address(RVA = "0xA507FC", Offset = "0xA507FC", VA = "0xA507FC", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015BE")]
	[Address(RVA = "0xA5093C", Offset = "0xA5093C", VA = "0xA5093C")]
	public AkAcousticSurface()
	{
	}

	[Token(Token = "0x60015C5")]
	[Address(RVA = "0xA50CAC", Offset = "0xA50CAC", VA = "0xA50CAC")]
	public void Clear()
	{
	}

	[Token(Token = "0x60015C6")]
	[Address(RVA = "0xA50D18", Offset = "0xA50D18", VA = "0xA50D18")]
	public void DeleteName()
	{
	}

	[Token(Token = "0x60015C7")]
	[Address(RVA = "0xA50D84", Offset = "0xA50D84", VA = "0xA50D84")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60015C8")]
	[Address(RVA = "0xA50DE4", Offset = "0xA50DE4", VA = "0xA50DE4")]
	public void Clone(AkAcousticSurface other)
	{
	}
}
[Token(Token = "0x200022B")]
public enum AkActionOnEventType
{
	[Token(Token = "0x40010C5")]
	AkActionOnEventType_Stop,
	[Token(Token = "0x40010C6")]
	AkActionOnEventType_Pause,
	[Token(Token = "0x40010C7")]
	AkActionOnEventType_Resume,
	[Token(Token = "0x40010C8")]
	AkActionOnEventType_Break,
	[Token(Token = "0x40010C9")]
	AkActionOnEventType_ReleaseEnvelope
}
[Token(Token = "0x200022C")]
public enum AkAudioDeviceState
{
	[Token(Token = "0x40010CB")]
	AkDeviceState_Active = 1,
	[Token(Token = "0x40010CC")]
	AkDeviceState_Disabled = 2,
	[Token(Token = "0x40010CD")]
	AkDeviceState_NotPresent = 4,
	[Token(Token = "0x40010CE")]
	AkDeviceState_Unplugged = 8,
	[Token(Token = "0x40010CF")]
	AkDeviceState_All = 15
}
[Token(Token = "0x200022D")]
public class AkAudioFormat : IDisposable
{
	[Token(Token = "0x40010D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000172")]
	public uint uSampleRate
	{
		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xA52864", Offset = "0xA52864", VA = "0xA52864")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xA527E8", Offset = "0xA527E8", VA = "0xA527E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000173")]
	public AkChannelConfig channelConfig
	{
		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xA529C8", Offset = "0xA529C8", VA = "0xA529C8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xA528D0", Offset = "0xA528D0", VA = "0xA528D0")]
		set
		{
		}
	}

	[Token(Token = "0x17000174")]
	public uint uBitsPerSample
	{
		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xA52B34", Offset = "0xA52B34", VA = "0xA52B34")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xA52AB8", Offset = "0xA52AB8", VA = "0xA52AB8")]
		set
		{
		}
	}

	[Token(Token = "0x17000175")]
	public uint uBlockAlign
	{
		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xA52C1C", Offset = "0xA52C1C", VA = "0xA52C1C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xA52BA0", Offset = "0xA52BA0", VA = "0xA52BA0")]
		set
		{
		}
	}

	[Token(Token = "0x17000176")]
	public uint uTypeID
	{
		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xA52D04", Offset = "0xA52D04", VA = "0xA52D04")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xA52C88", Offset = "0xA52C88", VA = "0xA52C88")]
		set
		{
		}
	}

	[Token(Token = "0x17000177")]
	public uint uInterleaveID
	{
		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xA52DEC", Offset = "0xA52DEC", VA = "0xA52DEC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xA52D70", Offset = "0xA52D70", VA = "0xA52D70")]
		set
		{
		}
	}

	[Token(Token = "0x60015C9")]
	[Address(RVA = "0xA52570", Offset = "0xA52570", VA = "0xA52570")]
	internal AkAudioFormat(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015CA")]
	[Address(RVA = "0xA525B0", Offset = "0xA525B0", VA = "0xA525B0")]
	internal static IntPtr getCPtr(AkAudioFormat obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015CB")]
	[Address(RVA = "0xA52600", Offset = "0xA52600", VA = "0xA52600", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015CC")]
	[Address(RVA = "0xA52634", Offset = "0xA52634", VA = "0xA52634", Slot = "1")]
	~AkAudioFormat()
	{
	}

	[Token(Token = "0x60015CD")]
	[Address(RVA = "0xA526A8", Offset = "0xA526A8", VA = "0xA526A8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015DA")]
	[Address(RVA = "0xA52E58", Offset = "0xA52E58", VA = "0xA52E58")]
	public uint GetNumChannels()
	{
		return default(uint);
	}

	[Token(Token = "0x60015DB")]
	[Address(RVA = "0xA52EC4", Offset = "0xA52EC4", VA = "0xA52EC4")]
	public uint GetBitsPerSample()
	{
		return default(uint);
	}

	[Token(Token = "0x60015DC")]
	[Address(RVA = "0xA52F30", Offset = "0xA52F30", VA = "0xA52F30")]
	public uint GetBlockAlign()
	{
		return default(uint);
	}

	[Token(Token = "0x60015DD")]
	[Address(RVA = "0xA52F9C", Offset = "0xA52F9C", VA = "0xA52F9C")]
	public uint GetTypeID()
	{
		return default(uint);
	}

	[Token(Token = "0x60015DE")]
	[Address(RVA = "0xA53008", Offset = "0xA53008", VA = "0xA53008")]
	public uint GetInterleaveID()
	{
		return default(uint);
	}

	[Token(Token = "0x60015DF")]
	[Address(RVA = "0xA53074", Offset = "0xA53074", VA = "0xA53074")]
	public void SetAll(uint in_uSampleRate, AkChannelConfig in_channelConfig, uint in_uBitsPerSample, uint in_uBlockAlign, uint in_uTypeID, uint in_uInterleaveID)
	{
	}

	[Token(Token = "0x60015E0")]
	[Address(RVA = "0xA53154", Offset = "0xA53154", VA = "0xA53154")]
	public bool IsChannelConfigSupported()
	{
		return default(bool);
	}

	[Token(Token = "0x60015E1")]
	[Address(RVA = "0xA531C0", Offset = "0xA531C0", VA = "0xA531C0")]
	public AkAudioFormat()
	{
	}
}
[Token(Token = "0x200022E")]
public class AkAudioInterruptionCallbackInfo : IDisposable
{
	[Token(Token = "0x40010D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000178")]
	public bool bEnterInterruption
	{
		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xA54B80", Offset = "0xA54B80", VA = "0xA54B80")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60015E2")]
	[Address(RVA = "0xA54908", Offset = "0xA54908", VA = "0xA54908")]
	internal AkAudioInterruptionCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015E3")]
	[Address(RVA = "0xA54948", Offset = "0xA54948", VA = "0xA54948")]
	internal static IntPtr getCPtr(AkAudioInterruptionCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015E4")]
	[Address(RVA = "0xA54998", Offset = "0xA54998", VA = "0xA54998", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015E5")]
	[Address(RVA = "0xA549CC", Offset = "0xA549CC", VA = "0xA549CC", Slot = "1")]
	~AkAudioInterruptionCallbackInfo()
	{
	}

	[Token(Token = "0x60015E6")]
	[Address(RVA = "0xA54A40", Offset = "0xA54A40", VA = "0xA54A40", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015E8")]
	[Address(RVA = "0xA54BEC", Offset = "0xA54BEC", VA = "0xA54BEC")]
	public AkAudioInterruptionCallbackInfo()
	{
	}
}
[Token(Token = "0x200022F")]
public class AkAudioSettings : IDisposable
{
	[Token(Token = "0x40010D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000179")]
	public uint uNumSamplesPerFrame
	{
		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xA55D60", Offset = "0xA55D60", VA = "0xA55D60")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xA55CE4", Offset = "0xA55CE4", VA = "0xA55CE4")]
		set
		{
		}
	}

	[Token(Token = "0x1700017A")]
	public uint uNumSamplesPerSecond
	{
		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xA55E48", Offset = "0xA55E48", VA = "0xA55E48")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xA55DCC", Offset = "0xA55DCC", VA = "0xA55DCC")]
		set
		{
		}
	}

	[Token(Token = "0x60015E9")]
	[Address(RVA = "0xA55A6C", Offset = "0xA55A6C", VA = "0xA55A6C")]
	internal AkAudioSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015EA")]
	[Address(RVA = "0xA55AAC", Offset = "0xA55AAC", VA = "0xA55AAC")]
	internal static IntPtr getCPtr(AkAudioSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015EB")]
	[Address(RVA = "0xA55AFC", Offset = "0xA55AFC", VA = "0xA55AFC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015EC")]
	[Address(RVA = "0xA55B30", Offset = "0xA55B30", VA = "0xA55B30", Slot = "1")]
	~AkAudioSettings()
	{
	}

	[Token(Token = "0x60015ED")]
	[Address(RVA = "0xA55BA4", Offset = "0xA55BA4", VA = "0xA55BA4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015F2")]
	[Address(RVA = "0xA55EB4", Offset = "0xA55EB4", VA = "0xA55EB4")]
	public AkAudioSettings()
	{
	}
}
[Token(Token = "0x2000230")]
public class AkAudioSourceChangeCallbackInfo : IDisposable
{
	[Token(Token = "0x40010D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700017B")]
	public bool bOtherAudioPlaying
	{
		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xA561B0", Offset = "0xA561B0", VA = "0xA561B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60015F3")]
	[Address(RVA = "0xA55F38", Offset = "0xA55F38", VA = "0xA55F38")]
	internal AkAudioSourceChangeCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015F4")]
	[Address(RVA = "0xA55F78", Offset = "0xA55F78", VA = "0xA55F78")]
	internal static IntPtr getCPtr(AkAudioSourceChangeCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015F5")]
	[Address(RVA = "0xA55FC8", Offset = "0xA55FC8", VA = "0xA55FC8", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015F6")]
	[Address(RVA = "0xA55FFC", Offset = "0xA55FFC", VA = "0xA55FFC", Slot = "1")]
	~AkAudioSourceChangeCallbackInfo()
	{
	}

	[Token(Token = "0x60015F7")]
	[Address(RVA = "0xA56070", Offset = "0xA56070", VA = "0xA56070", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60015F9")]
	[Address(RVA = "0xA5621C", Offset = "0xA5621C", VA = "0xA5621C")]
	public AkAudioSourceChangeCallbackInfo()
	{
	}
}
[Token(Token = "0x2000231")]
public class AkAuxSendValue : IDisposable
{
	[Token(Token = "0x40010D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700017C")]
	public ulong listenerID
	{
		[Token(Token = "0x6001600")]
		[Address(RVA = "0xA56E90", Offset = "0xA56E90", VA = "0xA56E90")]
		get
		{
			return default(ulong);
		}
		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xA56E14", Offset = "0xA56E14", VA = "0xA56E14")]
		set
		{
		}
	}

	[Token(Token = "0x1700017D")]
	public uint auxBusID
	{
		[Token(Token = "0x6001602")]
		[Address(RVA = "0xA56F78", Offset = "0xA56F78", VA = "0xA56F78")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001601")]
		[Address(RVA = "0xA56EFC", Offset = "0xA56EFC", VA = "0xA56EFC")]
		set
		{
		}
	}

	[Token(Token = "0x1700017E")]
	public float fControlValue
	{
		[Token(Token = "0x6001604")]
		[Address(RVA = "0xA57060", Offset = "0xA57060", VA = "0xA57060")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001603")]
		[Address(RVA = "0xA56FE4", Offset = "0xA56FE4", VA = "0xA56FE4")]
		set
		{
		}
	}

	[Token(Token = "0x60015FA")]
	[Address(RVA = "0xA56474", Offset = "0xA56474", VA = "0xA56474")]
	internal AkAuxSendValue(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60015FB")]
	[Address(RVA = "0xA56BDC", Offset = "0xA56BDC", VA = "0xA56BDC")]
	internal static IntPtr getCPtr(AkAuxSendValue obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015FC")]
	[Address(RVA = "0xA56C2C", Offset = "0xA56C2C", VA = "0xA56C2C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60015FD")]
	[Address(RVA = "0xA56C60", Offset = "0xA56C60", VA = "0xA56C60", Slot = "1")]
	~AkAuxSendValue()
	{
	}

	[Token(Token = "0x60015FE")]
	[Address(RVA = "0xA56CD4", Offset = "0xA56CD4", VA = "0xA56CD4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001605")]
	[Address(RVA = "0xA570CC", Offset = "0xA570CC", VA = "0xA570CC")]
	public void Set(GameObject listener, uint id, float value)
	{
	}

	[Token(Token = "0x6001606")]
	[Address(RVA = "0xA571A0", Offset = "0xA571A0", VA = "0xA571A0")]
	public bool IsSame(GameObject listener, uint id)
	{
		return default(bool);
	}

	[Token(Token = "0x6001607")]
	[Address(RVA = "0xA57264", Offset = "0xA57264", VA = "0xA57264")]
	public static int GetSizeOf()
	{
		return default(int);
	}
}
[Token(Token = "0x2000232")]
public class AkBankCallbackInfo : IDisposable
{
	[Token(Token = "0x40010DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700017F")]
	public uint bankID
	{
		[Token(Token = "0x600160D")]
		[Address(RVA = "0xA579DC", Offset = "0xA579DC", VA = "0xA579DC")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000180")]
	public IntPtr inMemoryBankPtr
	{
		[Token(Token = "0x600160E")]
		[Address(RVA = "0xA57A48", Offset = "0xA57A48", VA = "0xA57A48")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000181")]
	public AKRESULT loadResult
	{
		[Token(Token = "0x600160F")]
		[Address(RVA = "0xA57AB4", Offset = "0xA57AB4", VA = "0xA57AB4")]
		get
		{
			return default(AKRESULT);
		}
	}

	[Token(Token = "0x17000182")]
	public int memPoolId
	{
		[Token(Token = "0x6001610")]
		[Address(RVA = "0xA57B20", Offset = "0xA57B20", VA = "0xA57B20")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001608")]
	[Address(RVA = "0xA57764", Offset = "0xA57764", VA = "0xA57764")]
	internal AkBankCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001609")]
	[Address(RVA = "0xA577A4", Offset = "0xA577A4", VA = "0xA577A4")]
	internal static IntPtr getCPtr(AkBankCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600160A")]
	[Address(RVA = "0xA577F4", Offset = "0xA577F4", VA = "0xA577F4", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600160B")]
	[Address(RVA = "0xA57828", Offset = "0xA57828", VA = "0xA57828", Slot = "1")]
	~AkBankCallbackInfo()
	{
	}

	[Token(Token = "0x600160C")]
	[Address(RVA = "0xA5789C", Offset = "0xA5789C", VA = "0xA5789C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001611")]
	[Address(RVA = "0xA57B8C", Offset = "0xA57B8C", VA = "0xA57B8C")]
	public AkBankCallbackInfo()
	{
	}
}
[Token(Token = "0x2000233")]
public enum AkBankContent
{
	[Token(Token = "0x40010DD")]
	AkBankContent_StructureOnly,
	[Token(Token = "0x40010DE")]
	AkBankContent_All
}
[Token(Token = "0x2000234")]
public enum AkBusHierarchyFlags
{
	[Token(Token = "0x40010E0")]
	AkBusHierarchy_Primary = 1,
	[Token(Token = "0x40010E1")]
	AkBusHierarchy_Secondary = 2,
	[Token(Token = "0x40010E2")]
	AkBusHierarchy_IsMaster = 0x80
}
[Token(Token = "0x2000235")]
public class AkCallbackInfo : IDisposable
{
	[Token(Token = "0x40010E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000183")]
	public IntPtr pCookie
	{
		[Token(Token = "0x6001617")]
		[Address(RVA = "0xA59AD0", Offset = "0xA59AD0", VA = "0xA59AD0")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000184")]
	public ulong gameObjID
	{
		[Token(Token = "0x6001618")]
		[Address(RVA = "0xA59B3C", Offset = "0xA59B3C", VA = "0xA59B3C")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x6001612")]
	[Address(RVA = "0xA59858", Offset = "0xA59858", VA = "0xA59858")]
	internal AkCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001613")]
	[Address(RVA = "0xA59898", Offset = "0xA59898", VA = "0xA59898")]
	internal static IntPtr getCPtr(AkCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001614")]
	[Address(RVA = "0xA598E8", Offset = "0xA598E8", VA = "0xA598E8", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001615")]
	[Address(RVA = "0xA5991C", Offset = "0xA5991C", VA = "0xA5991C", Slot = "1")]
	~AkCallbackInfo()
	{
	}

	[Token(Token = "0x6001616")]
	[Address(RVA = "0xA59990", Offset = "0xA59990", VA = "0xA59990", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001619")]
	[Address(RVA = "0xA59BA8", Offset = "0xA59BA8", VA = "0xA59BA8")]
	public AkCallbackInfo()
	{
	}
}
[Token(Token = "0x2000236")]
public class AkCallbackSerializer : IDisposable
{
	[Token(Token = "0x40010E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40010E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x600161A")]
	[Address(RVA = "0xA5CA78", Offset = "0xA5CA78", VA = "0xA5CA78")]
	internal AkCallbackSerializer(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600161B")]
	[Address(RVA = "0xA5CAB8", Offset = "0xA5CAB8", VA = "0xA5CAB8")]
	internal static IntPtr getCPtr(AkCallbackSerializer obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600161C")]
	[Address(RVA = "0xA5CB08", Offset = "0xA5CB08", VA = "0xA5CB08", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600161D")]
	[Address(RVA = "0xA5CB3C", Offset = "0xA5CB3C", VA = "0xA5CB3C", Slot = "1")]
	~AkCallbackSerializer()
	{
	}

	[Token(Token = "0x600161E")]
	[Address(RVA = "0xA5CBB0", Offset = "0xA5CBB0", VA = "0xA5CBB0", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600161F")]
	[Address(RVA = "0xA5A654", Offset = "0xA5A654", VA = "0xA5A654")]
	public static AKRESULT Init(IntPtr in_pMemory, uint in_uSize)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001620")]
	[Address(RVA = "0xA5A7A8", Offset = "0xA5A7A8", VA = "0xA5A7A8")]
	public static void Term()
	{
	}

	[Token(Token = "0x6001621")]
	[Address(RVA = "0xA5B5D0", Offset = "0xA5B5D0", VA = "0xA5B5D0")]
	public static IntPtr Lock()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001622")]
	[Address(RVA = "0xA5A88C", Offset = "0xA5A88C", VA = "0xA5A88C")]
	public static void SetLocalOutput(uint in_uErrorLevel)
	{
	}

	[Token(Token = "0x6001623")]
	[Address(RVA = "0xA5BF48", Offset = "0xA5BF48", VA = "0xA5BF48")]
	public static void Unlock()
	{
	}

	[Token(Token = "0x6001624")]
	[Address(RVA = "0xA5CCF0", Offset = "0xA5CCF0", VA = "0xA5CCF0")]
	public static AKRESULT AudioSourceChangeCallbackFunc(bool in_bOtherAudioPlaying, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001625")]
	[Address(RVA = "0xA5CD88", Offset = "0xA5CD88", VA = "0xA5CD88")]
	public AkCallbackSerializer()
	{
	}
}
[Token(Token = "0x2000237")]
public enum AkCallbackType
{
	[Token(Token = "0x40010E8")]
	AK_EndOfEvent = 1,
	[Token(Token = "0x40010E9")]
	AK_EndOfDynamicSequenceItem = 2,
	[Token(Token = "0x40010EA")]
	AK_Marker = 4,
	[Token(Token = "0x40010EB")]
	AK_Duration = 8,
	[Token(Token = "0x40010EC")]
	AK_SpeakerVolumeMatrix = 16,
	[Token(Token = "0x40010ED")]
	AK_Starvation = 32,
	[Token(Token = "0x40010EE")]
	AK_MusicPlaylistSelect = 64,
	[Token(Token = "0x40010EF")]
	AK_MusicPlayStarted = 128,
	[Token(Token = "0x40010F0")]
	AK_MusicSyncBeat = 256,
	[Token(Token = "0x40010F1")]
	AK_MusicSyncBar = 512,
	[Token(Token = "0x40010F2")]
	AK_MusicSyncEntry = 1024,
	[Token(Token = "0x40010F3")]
	AK_MusicSyncExit = 2048,
	[Token(Token = "0x40010F4")]
	AK_MusicSyncGrid = 4096,
	[Token(Token = "0x40010F5")]
	AK_MusicSyncUserCue = 8192,
	[Token(Token = "0x40010F6")]
	AK_MusicSyncPoint = 16384,
	[Token(Token = "0x40010F7")]
	AK_MusicSyncAll = 32512,
	[Token(Token = "0x40010F8")]
	AK_MIDIEvent = 65536,
	[Token(Token = "0x40010F9")]
	AK_CallbackBits = 1048575,
	[Token(Token = "0x40010FA")]
	AK_EnableGetSourcePlayPosition = 1048576,
	[Token(Token = "0x40010FB")]
	AK_EnableGetMusicPlayPosition = 2097152,
	[Token(Token = "0x40010FC")]
	AK_EnableGetSourceStreamBuffering = 4194304,
	[Token(Token = "0x40010FD")]
	AK_Monitoring = 536870912,
	[Token(Token = "0x40010FE")]
	AK_AudioSourceChange = 587202560,
	[Token(Token = "0x40010FF")]
	AK_Bank = 1073741824,
	[Token(Token = "0x4001100")]
	AK_AudioInterruption = 570425344
}
[Token(Token = "0x2000238")]
public class AkChannelConfig : IDisposable
{
	[Token(Token = "0x4001101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000185")]
	public uint uNumChannels
	{
		[Token(Token = "0x600162C")]
		[Address(RVA = "0xA5D070", Offset = "0xA5D070", VA = "0xA5D070")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600162B")]
		[Address(RVA = "0xA5CFF4", Offset = "0xA5CFF4", VA = "0xA5CFF4")]
		set
		{
		}
	}

	[Token(Token = "0x17000186")]
	public uint eConfigType
	{
		[Token(Token = "0x600162E")]
		[Address(RVA = "0xA5D158", Offset = "0xA5D158", VA = "0xA5D158")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600162D")]
		[Address(RVA = "0xA5D0DC", Offset = "0xA5D0DC", VA = "0xA5D0DC")]
		set
		{
		}
	}

	[Token(Token = "0x17000187")]
	public uint uChannelMask
	{
		[Token(Token = "0x6001630")]
		[Address(RVA = "0xA5D240", Offset = "0xA5D240", VA = "0xA5D240")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600162F")]
		[Address(RVA = "0xA5D1C4", Offset = "0xA5D1C4", VA = "0xA5D1C4")]
		set
		{
		}
	}

	[Token(Token = "0x6001626")]
	[Address(RVA = "0xA52A78", Offset = "0xA52A78", VA = "0xA52A78")]
	internal AkChannelConfig(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001627")]
	[Address(RVA = "0xA52978", Offset = "0xA52978", VA = "0xA52978")]
	internal static IntPtr getCPtr(AkChannelConfig obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001628")]
	[Address(RVA = "0xA5CE0C", Offset = "0xA5CE0C", VA = "0xA5CE0C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001629")]
	[Address(RVA = "0xA5CE40", Offset = "0xA5CE40", VA = "0xA5CE40", Slot = "1")]
	~AkChannelConfig()
	{
	}

	[Token(Token = "0x600162A")]
	[Address(RVA = "0xA5CEB4", Offset = "0xA5CEB4", VA = "0xA5CEB4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001631")]
	[Address(RVA = "0xA5D2AC", Offset = "0xA5D2AC", VA = "0xA5D2AC")]
	public AkChannelConfig()
	{
	}

	[Token(Token = "0x6001632")]
	[Address(RVA = "0xA5D330", Offset = "0xA5D330", VA = "0xA5D330")]
	public AkChannelConfig(uint in_uNumChannels, uint in_uChannelMask)
	{
	}

	[Token(Token = "0x6001633")]
	[Address(RVA = "0xA5D3CC", Offset = "0xA5D3CC", VA = "0xA5D3CC")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001634")]
	[Address(RVA = "0xA5D438", Offset = "0xA5D438", VA = "0xA5D438")]
	public void SetStandard(uint in_uChannelMask)
	{
	}

	[Token(Token = "0x6001635")]
	[Address(RVA = "0xA5D4B4", Offset = "0xA5D4B4", VA = "0xA5D4B4")]
	public void SetStandardOrAnonymous(uint in_uNumChannels, uint in_uChannelMask)
	{
	}

	[Token(Token = "0x6001636")]
	[Address(RVA = "0xA5D538", Offset = "0xA5D538", VA = "0xA5D538")]
	public void SetAnonymous(uint in_uNumChannels)
	{
	}

	[Token(Token = "0x6001637")]
	[Address(RVA = "0xA5D5B4", Offset = "0xA5D5B4", VA = "0xA5D5B4")]
	public void SetAmbisonic(uint in_uNumChannels)
	{
	}

	[Token(Token = "0x6001638")]
	[Address(RVA = "0xA5D630", Offset = "0xA5D630", VA = "0xA5D630")]
	public bool IsValid()
	{
		return default(bool);
	}

	[Token(Token = "0x6001639")]
	[Address(RVA = "0xA5D69C", Offset = "0xA5D69C", VA = "0xA5D69C")]
	public uint Serialize()
	{
		return default(uint);
	}

	[Token(Token = "0x600163A")]
	[Address(RVA = "0xA5D708", Offset = "0xA5D708", VA = "0xA5D708")]
	public void Deserialize(uint in_uChannelConfig)
	{
	}

	[Token(Token = "0x600163B")]
	[Address(RVA = "0xA5D784", Offset = "0xA5D784", VA = "0xA5D784")]
	public AkChannelConfig RemoveLFE()
	{
		return null;
	}

	[Token(Token = "0x600163C")]
	[Address(RVA = "0xA5D828", Offset = "0xA5D828", VA = "0xA5D828")]
	public AkChannelConfig RemoveCenter()
	{
		return null;
	}

	[Token(Token = "0x600163D")]
	[Address(RVA = "0xA5D8CC", Offset = "0xA5D8CC", VA = "0xA5D8CC")]
	public bool IsChannelConfigSupported()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000239")]
public enum AkChannelConfigType
{
	[Token(Token = "0x4001104")]
	AK_ChannelConfigType_Anonymous,
	[Token(Token = "0x4001105")]
	AK_ChannelConfigType_Standard,
	[Token(Token = "0x4001106")]
	AK_ChannelConfigType_Ambisonic
}
[Token(Token = "0x200023A")]
public class AkChannelEmitter : IDisposable
{
	[Token(Token = "0x4001107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000188")]
	public AkTransform position
	{
		[Token(Token = "0x6001644")]
		[Address(RVA = "0xA5DC40", Offset = "0xA5DC40", VA = "0xA5DC40")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001643")]
		[Address(RVA = "0xA5DBB0", Offset = "0xA5DBB0", VA = "0xA5DBB0")]
		set
		{
		}
	}

	[Token(Token = "0x17000189")]
	public uint uInputChannels
	{
		[Token(Token = "0x6001646")]
		[Address(RVA = "0xA5DD6C", Offset = "0xA5DD6C", VA = "0xA5DD6C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001645")]
		[Address(RVA = "0xA5DCF0", Offset = "0xA5DCF0", VA = "0xA5DCF0")]
		set
		{
		}
	}

	[Token(Token = "0x600163E")]
	[Address(RVA = "0xA5D938", Offset = "0xA5D938", VA = "0xA5D938")]
	internal AkChannelEmitter(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600163F")]
	[Address(RVA = "0xA5D978", Offset = "0xA5D978", VA = "0xA5D978")]
	internal static IntPtr getCPtr(AkChannelEmitter obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001640")]
	[Address(RVA = "0xA5D9C8", Offset = "0xA5D9C8", VA = "0xA5D9C8", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001641")]
	[Address(RVA = "0xA5D9FC", Offset = "0xA5D9FC", VA = "0xA5D9FC", Slot = "1")]
	~AkChannelEmitter()
	{
	}

	[Token(Token = "0x6001642")]
	[Address(RVA = "0xA5DA70", Offset = "0xA5DA70", VA = "0xA5DA70", Slot = "6")]
	public virtual void Dispose()
	{
	}
}
[Token(Token = "0x200023B")]
public enum AkChannelOrdering
{
	[Token(Token = "0x400110A")]
	ChannelOrdering_Standard,
	[Token(Token = "0x400110B")]
	ChannelOrdering_RunTime
}
[Token(Token = "0x200023C")]
public enum AkConnectionType
{
	[Token(Token = "0x400110D")]
	ConnectionType_Direct,
	[Token(Token = "0x400110E")]
	ConnectionType_GameDefSend,
	[Token(Token = "0x400110F")]
	ConnectionType_UserDefSend
}
[Token(Token = "0x200023D")]
public enum AkCurveInterpolation
{
	[Token(Token = "0x4001111")]
	AkCurveInterpolation_Log3 = 0,
	[Token(Token = "0x4001112")]
	AkCurveInterpolation_Sine = 1,
	[Token(Token = "0x4001113")]
	AkCurveInterpolation_Log1 = 2,
	[Token(Token = "0x4001114")]
	AkCurveInterpolation_InvSCurve = 3,
	[Token(Token = "0x4001115")]
	AkCurveInterpolation_Linear = 4,
	[Token(Token = "0x4001116")]
	AkCurveInterpolation_SCurve = 5,
	[Token(Token = "0x4001117")]
	AkCurveInterpolation_Exp1 = 6,
	[Token(Token = "0x4001118")]
	AkCurveInterpolation_SineRecip = 7,
	[Token(Token = "0x4001119")]
	AkCurveInterpolation_Exp3 = 8,
	[Token(Token = "0x400111A")]
	AkCurveInterpolation_LastFadeCurve = 8,
	[Token(Token = "0x400111B")]
	AkCurveInterpolation_Constant = 9
}
[Token(Token = "0x200023E")]
public class AkDeviceSettings : IDisposable
{
	[Token(Token = "0x400111C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400111D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700018A")]
	public IntPtr pIOMemory
	{
		[Token(Token = "0x600164D")]
		[Address(RVA = "0xA5FBCC", Offset = "0xA5FBCC", VA = "0xA5FBCC")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x600164C")]
		[Address(RVA = "0xA5FB50", Offset = "0xA5FB50", VA = "0xA5FB50")]
		set
		{
		}
	}

	[Token(Token = "0x1700018B")]
	public uint uIOMemorySize
	{
		[Token(Token = "0x600164F")]
		[Address(RVA = "0xA5FC38", Offset = "0xA5FC38", VA = "0xA5FC38")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600164E")]
		[Address(RVA = "0xA5E3C4", Offset = "0xA5E3C4", VA = "0xA5E3C4")]
		set
		{
		}
	}

	[Token(Token = "0x1700018C")]
	public uint uIOMemoryAlignment
	{
		[Token(Token = "0x6001651")]
		[Address(RVA = "0xA5FD20", Offset = "0xA5FD20", VA = "0xA5FD20")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001650")]
		[Address(RVA = "0xA5FCA4", Offset = "0xA5FCA4", VA = "0xA5FCA4")]
		set
		{
		}
	}

	[Token(Token = "0x1700018D")]
	public int ePoolAttributes
	{
		[Token(Token = "0x6001653")]
		[Address(RVA = "0xA5FE08", Offset = "0xA5FE08", VA = "0xA5FE08")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001652")]
		[Address(RVA = "0xA5FD8C", Offset = "0xA5FD8C", VA = "0xA5FD8C")]
		set
		{
		}
	}

	[Token(Token = "0x1700018E")]
	public uint uGranularity
	{
		[Token(Token = "0x6001655")]
		[Address(RVA = "0xA5FEF0", Offset = "0xA5FEF0", VA = "0xA5FEF0")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001654")]
		[Address(RVA = "0xA5FE74", Offset = "0xA5FE74", VA = "0xA5FE74")]
		set
		{
		}
	}

	[Token(Token = "0x1700018F")]
	public uint uSchedulerTypeFlags
	{
		[Token(Token = "0x6001657")]
		[Address(RVA = "0xA5FFD8", Offset = "0xA5FFD8", VA = "0xA5FFD8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001656")]
		[Address(RVA = "0xA5FF5C", Offset = "0xA5FF5C", VA = "0xA5FF5C")]
		set
		{
		}
	}

	[Token(Token = "0x17000190")]
	public AkThreadProperties threadProperties
	{
		[Token(Token = "0x6001659")]
		[Address(RVA = "0xA600D4", Offset = "0xA600D4", VA = "0xA600D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001658")]
		[Address(RVA = "0xA60044", Offset = "0xA60044", VA = "0xA60044")]
		set
		{
		}
	}

	[Token(Token = "0x17000191")]
	public float fTargetAutoStmBufferLength
	{
		[Token(Token = "0x600165B")]
		[Address(RVA = "0xA60184", Offset = "0xA60184", VA = "0xA60184")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600165A")]
		[Address(RVA = "0xA5E440", Offset = "0xA5E440", VA = "0xA5E440")]
		set
		{
		}
	}

	[Token(Token = "0x17000192")]
	public uint uMaxConcurrentIO
	{
		[Token(Token = "0x600165D")]
		[Address(RVA = "0xA6026C", Offset = "0xA6026C", VA = "0xA6026C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600165C")]
		[Address(RVA = "0xA601F0", Offset = "0xA601F0", VA = "0xA601F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000193")]
	public bool bUseStreamCache
	{
		[Token(Token = "0x600165F")]
		[Address(RVA = "0xA602D8", Offset = "0xA602D8", VA = "0xA602D8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600165E")]
		[Address(RVA = "0xA5E4BC", Offset = "0xA5E4BC", VA = "0xA5E4BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000194")]
	public uint uMaxCachePinnedBytes
	{
		[Token(Token = "0x6001661")]
		[Address(RVA = "0xA60344", Offset = "0xA60344", VA = "0xA60344")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001660")]
		[Address(RVA = "0xA5E538", Offset = "0xA5E538", VA = "0xA5E538")]
		set
		{
		}
	}

	[Token(Token = "0x6001647")]
	[Address(RVA = "0xA5F8D8", Offset = "0xA5F8D8", VA = "0xA5F8D8")]
	internal AkDeviceSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001648")]
	[Address(RVA = "0xA5F918", Offset = "0xA5F918", VA = "0xA5F918")]
	internal static IntPtr getCPtr(AkDeviceSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001649")]
	[Address(RVA = "0xA5F968", Offset = "0xA5F968", VA = "0xA5F968", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600164A")]
	[Address(RVA = "0xA5F99C", Offset = "0xA5F99C", VA = "0xA5F99C", Slot = "1")]
	~AkDeviceSettings()
	{
	}

	[Token(Token = "0x600164B")]
	[Address(RVA = "0xA5FA10", Offset = "0xA5FA10", VA = "0xA5FA10", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001662")]
	[Address(RVA = "0xA603B0", Offset = "0xA603B0", VA = "0xA603B0")]
	public AkDeviceSettings()
	{
	}
}
[Token(Token = "0x200023F")]
public enum AkDiffractionFlags
{
	[Token(Token = "0x400111F")]
	DiffractionFlags_UseBuiltInParam = 1,
	[Token(Token = "0x4001120")]
	DiffractionFlags_UseObstruction = 2,
	[Token(Token = "0x4001121")]
	DiffractionFlags_CalcEmitterVirtualPosition = 8,
	[Token(Token = "0x4001122")]
	DefaultDiffractionFlags = 11
}
[Token(Token = "0x2000240")]
public class AkDiffractionPathInfo : IDisposable
{
	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x4001125")]
	public const uint kMaxNodes = 8u;

	[Token(Token = "0x17000195")]
	public AkTransform virtualPos
	{
		[Token(Token = "0x6001669")]
		[Address(RVA = "0xA6073C", Offset = "0xA6073C", VA = "0xA6073C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001668")]
		[Address(RVA = "0xA606AC", Offset = "0xA606AC", VA = "0xA606AC")]
		set
		{
		}
	}

	[Token(Token = "0x17000196")]
	public uint nodeCount
	{
		[Token(Token = "0x600166B")]
		[Address(RVA = "0xA60868", Offset = "0xA60868", VA = "0xA60868")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600166A")]
		[Address(RVA = "0xA607EC", Offset = "0xA607EC", VA = "0xA607EC")]
		set
		{
		}
	}

	[Token(Token = "0x17000197")]
	public float diffraction
	{
		[Token(Token = "0x600166D")]
		[Address(RVA = "0xA60950", Offset = "0xA60950", VA = "0xA60950")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600166C")]
		[Address(RVA = "0xA608D4", Offset = "0xA608D4", VA = "0xA608D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000198")]
	public float totLength
	{
		[Token(Token = "0x600166F")]
		[Address(RVA = "0xA60A38", Offset = "0xA60A38", VA = "0xA60A38")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600166E")]
		[Address(RVA = "0xA609BC", Offset = "0xA609BC", VA = "0xA609BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000199")]
	public float obstructionValue
	{
		[Token(Token = "0x6001671")]
		[Address(RVA = "0xA60B20", Offset = "0xA60B20", VA = "0xA60B20")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001670")]
		[Address(RVA = "0xA60AA4", Offset = "0xA60AA4", VA = "0xA60AA4")]
		set
		{
		}
	}

	[Token(Token = "0x6001663")]
	[Address(RVA = "0xA60434", Offset = "0xA60434", VA = "0xA60434")]
	internal AkDiffractionPathInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001664")]
	[Address(RVA = "0xA60474", Offset = "0xA60474", VA = "0xA60474")]
	internal static IntPtr getCPtr(AkDiffractionPathInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001665")]
	[Address(RVA = "0xA604C4", Offset = "0xA604C4", VA = "0xA604C4", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001666")]
	[Address(RVA = "0xA604F8", Offset = "0xA604F8", VA = "0xA604F8", Slot = "1")]
	~AkDiffractionPathInfo()
	{
	}

	[Token(Token = "0x6001667")]
	[Address(RVA = "0xA6056C", Offset = "0xA6056C", VA = "0xA6056C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001672")]
	[Address(RVA = "0xA60B8C", Offset = "0xA60B8C", VA = "0xA60B8C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x6001673")]
	[Address(RVA = "0xA60BEC", Offset = "0xA60BEC", VA = "0xA60BEC")]
	public AkVector GetNodes(uint idx)
	{
		return null;
	}

	[Token(Token = "0x6001674")]
	[Address(RVA = "0xA60CAC", Offset = "0xA60CAC", VA = "0xA60CAC")]
	public float GetAngles(uint idx)
	{
		return default(float);
	}

	[Token(Token = "0x6001675")]
	[Address(RVA = "0xA60D28", Offset = "0xA60D28", VA = "0xA60D28")]
	public ulong GetPortals(uint idx)
	{
		return default(ulong);
	}

	[Token(Token = "0x6001676")]
	[Address(RVA = "0xA60DA4", Offset = "0xA60DA4", VA = "0xA60DA4")]
	public ulong GetRooms(uint idx)
	{
		return default(ulong);
	}

	[Token(Token = "0x6001677")]
	[Address(RVA = "0xA60E20", Offset = "0xA60E20", VA = "0xA60E20")]
	public void Clone(AkDiffractionPathInfo other)
	{
	}

	[Token(Token = "0x6001678")]
	[Address(RVA = "0xA60EC8", Offset = "0xA60EC8", VA = "0xA60EC8")]
	public AkDiffractionPathInfo()
	{
	}
}
[Token(Token = "0x2000241")]
public class AkDurationCallbackInfo : AkEventCallbackInfo
{
	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr swigCPtr;

	[Token(Token = "0x1700019A")]
	public float fDuration
	{
		[Token(Token = "0x600167E")]
		[Address(RVA = "0xA6166C", Offset = "0xA6166C", VA = "0xA6166C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700019B")]
	public float fEstimatedDuration
	{
		[Token(Token = "0x600167F")]
		[Address(RVA = "0xA616D8", Offset = "0xA616D8", VA = "0xA616D8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700019C")]
	public uint audioNodeID
	{
		[Token(Token = "0x6001680")]
		[Address(RVA = "0xA61744", Offset = "0xA61744", VA = "0xA61744")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700019D")]
	public uint mediaID
	{
		[Token(Token = "0x6001681")]
		[Address(RVA = "0xA617B0", Offset = "0xA617B0", VA = "0xA617B0")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700019E")]
	public bool bStreaming
	{
		[Token(Token = "0x6001682")]
		[Address(RVA = "0xA6181C", Offset = "0xA6181C", VA = "0xA6181C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001679")]
	[Address(RVA = "0xA5C360", Offset = "0xA5C360", VA = "0xA5C360")]
	internal AkDurationCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600167A")]
	[Address(RVA = "0xA61198", Offset = "0xA61198", VA = "0xA61198")]
	internal static IntPtr getCPtr(AkDurationCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600167B")]
	[Address(RVA = "0xA611E8", Offset = "0xA611E8", VA = "0xA611E8", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600167C")]
	[Address(RVA = "0xA61304", Offset = "0xA61304", VA = "0xA61304", Slot = "1")]
	~AkDurationCallbackInfo()
	{
	}

	[Token(Token = "0x600167D")]
	[Address(RVA = "0xA613DC", Offset = "0xA613DC", VA = "0xA613DC", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6001683")]
	[Address(RVA = "0xA61888", Offset = "0xA61888", VA = "0xA61888")]
	public AkDurationCallbackInfo()
	{
	}
}
[Token(Token = "0x2000242")]
public class AkDynamicSequenceItemCallbackInfo : AkCallbackInfo
{
	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x1700019F")]
	public uint playingID
	{
		[Token(Token = "0x6001689")]
		[Address(RVA = "0xA61B94", Offset = "0xA61B94", VA = "0xA61B94")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170001A0")]
	public uint audioNodeID
	{
		[Token(Token = "0x600168A")]
		[Address(RVA = "0xA61C00", Offset = "0xA61C00", VA = "0xA61C00")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170001A1")]
	public IntPtr pCustomInfo
	{
		[Token(Token = "0x600168B")]
		[Address(RVA = "0xA61C6C", Offset = "0xA61C6C", VA = "0xA61C6C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x6001684")]
	[Address(RVA = "0xA5C2C4", Offset = "0xA5C2C4", VA = "0xA5C2C4")]
	internal AkDynamicSequenceItemCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001685")]
	[Address(RVA = "0xA618FC", Offset = "0xA618FC", VA = "0xA618FC")]
	internal static IntPtr getCPtr(AkDynamicSequenceItemCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001686")]
	[Address(RVA = "0xA6194C", Offset = "0xA6194C", VA = "0xA6194C", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001687")]
	[Address(RVA = "0xA619E0", Offset = "0xA619E0", VA = "0xA619E0", Slot = "1")]
	~AkDynamicSequenceItemCallbackInfo()
	{
	}

	[Token(Token = "0x6001688")]
	[Address(RVA = "0xA61A4C", Offset = "0xA61A4C", VA = "0xA61A4C", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x600168C")]
	[Address(RVA = "0xA61CD8", Offset = "0xA61CD8", VA = "0xA61CD8")]
	public AkDynamicSequenceItemCallbackInfo()
	{
	}
}
[Token(Token = "0x2000243")]
public enum AkDynamicSequenceType
{
	[Token(Token = "0x4001129")]
	DynamicSequenceType_SampleAccurate,
	[Token(Token = "0x400112A")]
	DynamicSequenceType_NormalTransition
}
[Token(Token = "0x2000244")]
public class AkEmitterSettings : IDisposable
{
	[Token(Token = "0x400112B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400112C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001A2")]
	public uint reflectAuxBusID
	{
		[Token(Token = "0x6001694")]
		[Address(RVA = "0xA6244C", Offset = "0xA6244C", VA = "0xA6244C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001693")]
		[Address(RVA = "0xA623D0", Offset = "0xA623D0", VA = "0xA623D0")]
		set
		{
		}
	}

	[Token(Token = "0x170001A3")]
	public float reflectionMaxPathLength
	{
		[Token(Token = "0x6001696")]
		[Address(RVA = "0xA62534", Offset = "0xA62534", VA = "0xA62534")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001695")]
		[Address(RVA = "0xA624B8", Offset = "0xA624B8", VA = "0xA624B8")]
		set
		{
		}
	}

	[Token(Token = "0x170001A4")]
	public float reflectionsAuxBusGain
	{
		[Token(Token = "0x6001698")]
		[Address(RVA = "0xA6261C", Offset = "0xA6261C", VA = "0xA6261C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001697")]
		[Address(RVA = "0xA625A0", Offset = "0xA625A0", VA = "0xA625A0")]
		set
		{
		}
	}

	[Token(Token = "0x170001A5")]
	public uint reflectionsOrder
	{
		[Token(Token = "0x600169A")]
		[Address(RVA = "0xA62704", Offset = "0xA62704", VA = "0xA62704")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001699")]
		[Address(RVA = "0xA62688", Offset = "0xA62688", VA = "0xA62688")]
		set
		{
		}
	}

	[Token(Token = "0x170001A6")]
	public uint reflectorFilterMask
	{
		[Token(Token = "0x600169C")]
		[Address(RVA = "0xA627EC", Offset = "0xA627EC", VA = "0xA627EC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600169B")]
		[Address(RVA = "0xA62770", Offset = "0xA62770", VA = "0xA62770")]
		set
		{
		}
	}

	[Token(Token = "0x170001A7")]
	public float roomReverbAuxBusGain
	{
		[Token(Token = "0x600169E")]
		[Address(RVA = "0xA628D4", Offset = "0xA628D4", VA = "0xA628D4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600169D")]
		[Address(RVA = "0xA62858", Offset = "0xA62858", VA = "0xA62858")]
		set
		{
		}
	}

	[Token(Token = "0x170001A8")]
	public uint diffractionMaxEdges
	{
		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xA629BC", Offset = "0xA629BC", VA = "0xA629BC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600169F")]
		[Address(RVA = "0xA62940", Offset = "0xA62940", VA = "0xA62940")]
		set
		{
		}
	}

	[Token(Token = "0x170001A9")]
	public uint diffractionMaxPaths
	{
		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xA62AA4", Offset = "0xA62AA4", VA = "0xA62AA4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xA62A28", Offset = "0xA62A28", VA = "0xA62A28")]
		set
		{
		}
	}

	[Token(Token = "0x170001AA")]
	public float diffractionMaxPathLength
	{
		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xA62B8C", Offset = "0xA62B8C", VA = "0xA62B8C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xA62B10", Offset = "0xA62B10", VA = "0xA62B10")]
		set
		{
		}
	}

	[Token(Token = "0x170001AB")]
	public byte useImageSources
	{
		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xA62C74", Offset = "0xA62C74", VA = "0xA62C74")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xA62BF8", Offset = "0xA62BF8", VA = "0xA62BF8")]
		set
		{
		}
	}

	[Token(Token = "0x600168D")]
	[Address(RVA = "0xA620D4", Offset = "0xA620D4", VA = "0xA620D4")]
	internal AkEmitterSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600168E")]
	[Address(RVA = "0xA62114", Offset = "0xA62114", VA = "0xA62114")]
	internal static IntPtr getCPtr(AkEmitterSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600168F")]
	[Address(RVA = "0xA62164", Offset = "0xA62164", VA = "0xA62164", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001690")]
	[Address(RVA = "0xA62198", Offset = "0xA62198", VA = "0xA62198", Slot = "1")]
	~AkEmitterSettings()
	{
	}

	[Token(Token = "0x6001691")]
	[Address(RVA = "0xA6220C", Offset = "0xA6220C", VA = "0xA6220C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001692")]
	[Address(RVA = "0xA6234C", Offset = "0xA6234C", VA = "0xA6234C")]
	public AkEmitterSettings()
	{
	}
}
[Token(Token = "0x2000245")]
public class AkEventCallbackInfo : AkCallbackInfo
{
	[Token(Token = "0x400112D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x170001AC")]
	public uint playingID
	{
		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xA53F08", Offset = "0xA53F08", VA = "0xA53F08")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170001AD")]
	public uint eventID
	{
		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xA639A4", Offset = "0xA639A4", VA = "0xA639A4")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x60016A7")]
	[Address(RVA = "0xA5C228", Offset = "0xA5C228", VA = "0xA5C228")]
	internal AkEventCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60016A8")]
	[Address(RVA = "0xA63954", Offset = "0xA63954", VA = "0xA63954")]
	internal static IntPtr getCPtr(AkEventCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60016A9")]
	[Address(RVA = "0xA61270", Offset = "0xA61270", VA = "0xA61270", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60016AA")]
	[Address(RVA = "0xA61370", Offset = "0xA61370", VA = "0xA61370", Slot = "1")]
	~AkEventCallbackInfo()
	{
	}

	[Token(Token = "0x60016AB")]
	[Address(RVA = "0xA61524", Offset = "0xA61524", VA = "0xA61524", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60016AE")]
	[Address(RVA = "0xA63A10", Offset = "0xA63A10", VA = "0xA63A10")]
	public AkEventCallbackInfo()
	{
	}
}
[Token(Token = "0x2000246")]
public class AkExternalSourceInfo : IDisposable
{
	[Token(Token = "0x400112E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400112F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001AE")]
	public uint iExternalSrcCookie
	{
		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xA6568C", Offset = "0xA6568C", VA = "0xA6568C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xA65610", Offset = "0xA65610", VA = "0xA65610")]
		set
		{
		}
	}

	[Token(Token = "0x170001AF")]
	public uint idCodec
	{
		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xA65774", Offset = "0xA65774", VA = "0xA65774")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xA656F8", Offset = "0xA656F8", VA = "0xA656F8")]
		set
		{
		}
	}

	[Token(Token = "0x170001B0")]
	public string szFile
	{
		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xA6585C", Offset = "0xA6585C", VA = "0xA6585C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xA657E0", Offset = "0xA657E0", VA = "0xA657E0")]
		set
		{
		}
	}

	[Token(Token = "0x170001B1")]
	public IntPtr pInMemory
	{
		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xA65978", Offset = "0xA65978", VA = "0xA65978")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xA658FC", Offset = "0xA658FC", VA = "0xA658FC")]
		set
		{
		}
	}

	[Token(Token = "0x170001B2")]
	public uint uiMemorySize
	{
		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xA65A60", Offset = "0xA65A60", VA = "0xA65A60")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xA659E4", Offset = "0xA659E4", VA = "0xA659E4")]
		set
		{
		}
	}

	[Token(Token = "0x170001B3")]
	public uint idFile
	{
		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xA65B48", Offset = "0xA65B48", VA = "0xA65B48")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xA65ACC", Offset = "0xA65ACC", VA = "0xA65ACC")]
		set
		{
		}
	}

	[Token(Token = "0x60016AF")]
	[Address(RVA = "0xA64F94", Offset = "0xA64F94", VA = "0xA64F94")]
	internal AkExternalSourceInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60016B0")]
	[Address(RVA = "0xA64FD4", Offset = "0xA64FD4", VA = "0xA64FD4")]
	internal static IntPtr getCPtr(AkExternalSourceInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60016B1")]
	[Address(RVA = "0xA65024", Offset = "0xA65024", VA = "0xA65024", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60016B2")]
	[Address(RVA = "0xA65058", Offset = "0xA65058", VA = "0xA65058", Slot = "1")]
	~AkExternalSourceInfo()
	{
	}

	[Token(Token = "0x60016B3")]
	[Address(RVA = "0xA650CC", Offset = "0xA650CC", VA = "0xA650CC", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60016B4")]
	[Address(RVA = "0xA6520C", Offset = "0xA6520C", VA = "0xA6520C")]
	public AkExternalSourceInfo()
	{
	}

	[Token(Token = "0x60016B5")]
	[Address(RVA = "0xA65290", Offset = "0xA65290", VA = "0xA65290")]
	public AkExternalSourceInfo(IntPtr in_pInMemory, uint in_uiMemorySize, uint in_iExternalSrcCookie, uint in_idCodec)
	{
	}

	[Token(Token = "0x60016B6")]
	[Address(RVA = "0xA65344", Offset = "0xA65344", VA = "0xA65344")]
	public AkExternalSourceInfo(string in_pszFileName, uint in_iExternalSrcCookie, uint in_idCodec)
	{
	}

	[Token(Token = "0x60016B7")]
	[Address(RVA = "0xA653F0", Offset = "0xA653F0", VA = "0xA653F0")]
	public AkExternalSourceInfo(uint in_idFile, uint in_iExternalSrcCookie, uint in_idCodec)
	{
	}

	[Token(Token = "0x60016B8")]
	[Address(RVA = "0xA6549C", Offset = "0xA6549C", VA = "0xA6549C")]
	public void Clear()
	{
	}

	[Token(Token = "0x60016B9")]
	[Address(RVA = "0xA65508", Offset = "0xA65508", VA = "0xA65508")]
	public void Clone(AkExternalSourceInfo other)
	{
	}

	[Token(Token = "0x60016BA")]
	[Address(RVA = "0xA655B0", Offset = "0xA655B0", VA = "0xA655B0")]
	public static int GetSizeOf()
	{
		return default(int);
	}
}
[Token(Token = "0x2000247")]
public enum AkFloorPlane
{
	[Token(Token = "0x4001131")]
	AkFloorPlane_XZ = 0,
	[Token(Token = "0x4001132")]
	AkFloorPlane_XY = 1,
	[Token(Token = "0x4001133")]
	AkFloorPlane_YZ = 2,
	[Token(Token = "0x4001134")]
	AkFloorPlane_Default = 0
}
[Token(Token = "0x2000248")]
public enum AkGlobalCallbackLocation
{
	[Token(Token = "0x4001136")]
	AkGlobalCallbackLocation_Register = 1,
	[Token(Token = "0x4001137")]
	AkGlobalCallbackLocation_Begin = 2,
	[Token(Token = "0x4001138")]
	AkGlobalCallbackLocation_PreProcessMessageQueueForRender = 4,
	[Token(Token = "0x4001139")]
	AkGlobalCallbackLocation_PostMessagesProcessed = 8,
	[Token(Token = "0x400113A")]
	AkGlobalCallbackLocation_BeginRender = 16,
	[Token(Token = "0x400113B")]
	AkGlobalCallbackLocation_EndRender = 32,
	[Token(Token = "0x400113C")]
	AkGlobalCallbackLocation_End = 64,
	[Token(Token = "0x400113D")]
	AkGlobalCallbackLocation_Term = 128,
	[Token(Token = "0x400113E")]
	AkGlobalCallbackLocation_Monitor = 256,
	[Token(Token = "0x400113F")]
	AkGlobalCallbackLocation_MonitorRecap = 512,
	[Token(Token = "0x4001140")]
	AkGlobalCallbackLocation_Num = 10
}
[Token(Token = "0x2000249")]
public enum AkGroupType
{
	[Token(Token = "0x4001142")]
	AkGroupType_Switch,
	[Token(Token = "0x4001143")]
	AkGroupType_State
}
[Token(Token = "0x200024A")]
public class AkImageSourceParams : IDisposable
{
	[Token(Token = "0x4001144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001B4")]
	public AkVector sourcePosition
	{
		[Token(Token = "0x60016CF")]
		[Address(RVA = "0x98F418", Offset = "0x98F418", VA = "0x98F418")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016CE")]
		[Address(RVA = "0x98F388", Offset = "0x98F388", VA = "0x98F388")]
		set
		{
		}
	}

	[Token(Token = "0x170001B5")]
	public float fDistanceScalingFactor
	{
		[Token(Token = "0x60016D1")]
		[Address(RVA = "0x98F544", Offset = "0x98F544", VA = "0x98F544")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60016D0")]
		[Address(RVA = "0x98F4C8", Offset = "0x98F4C8", VA = "0x98F4C8")]
		set
		{
		}
	}

	[Token(Token = "0x170001B6")]
	public float fLevel
	{
		[Token(Token = "0x60016D3")]
		[Address(RVA = "0x98F62C", Offset = "0x98F62C", VA = "0x98F62C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60016D2")]
		[Address(RVA = "0x98F5B0", Offset = "0x98F5B0", VA = "0x98F5B0")]
		set
		{
		}
	}

	[Token(Token = "0x170001B7")]
	public float fDiffraction
	{
		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x98F714", Offset = "0x98F714", VA = "0x98F714")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x98F698", Offset = "0x98F698", VA = "0x98F698")]
		set
		{
		}
	}

	[Token(Token = "0x170001B8")]
	public byte uDiffractionEmitterSide
	{
		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x98F7FC", Offset = "0x98F7FC", VA = "0x98F7FC")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x98F780", Offset = "0x98F780", VA = "0x98F780")]
		set
		{
		}
	}

	[Token(Token = "0x170001B9")]
	public byte uDiffractionListenerSide
	{
		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x98F8E4", Offset = "0x98F8E4", VA = "0x98F8E4")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x98F868", Offset = "0x98F868", VA = "0x98F868")]
		set
		{
		}
	}

	[Token(Token = "0x60016C7")]
	[Address(RVA = "0x98EFCC", Offset = "0x98EFCC", VA = "0x98EFCC")]
	internal AkImageSourceParams(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60016C8")]
	[Address(RVA = "0x98F00C", Offset = "0x98F00C", VA = "0x98F00C")]
	internal static IntPtr getCPtr(AkImageSourceParams obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60016C9")]
	[Address(RVA = "0x98F05C", Offset = "0x98F05C", VA = "0x98F05C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60016CA")]
	[Address(RVA = "0x98F090", Offset = "0x98F090", VA = "0x98F090", Slot = "1")]
	~AkImageSourceParams()
	{
	}

	[Token(Token = "0x60016CB")]
	[Address(RVA = "0x98F104", Offset = "0x98F104", VA = "0x98F104", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60016CC")]
	[Address(RVA = "0x98F244", Offset = "0x98F244", VA = "0x98F244")]
	public AkImageSourceParams()
	{
	}

	[Token(Token = "0x60016CD")]
	[Address(RVA = "0x98F2C8", Offset = "0x98F2C8", VA = "0x98F2C8")]
	public AkImageSourceParams(AkVector in_sourcePosition, float in_fDistanceScalingFactor, float in_fLevel)
	{
	}
}
[Token(Token = "0x200024B")]
public class AkImageSourceSettings : IDisposable
{
	[Token(Token = "0x4001146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001BA")]
	public AkImageSourceParams params_
	{
		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x98FEAC", Offset = "0x98FEAC", VA = "0x98FEAC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x98FE04", Offset = "0x98FE04", VA = "0x98FE04")]
		set
		{
		}
	}

	[Token(Token = "0x60016DA")]
	[Address(RVA = "0x98F950", Offset = "0x98F950", VA = "0x98F950")]
	internal AkImageSourceSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60016DB")]
	[Address(RVA = "0x98F990", Offset = "0x98F990", VA = "0x98F990")]
	internal static IntPtr getCPtr(AkImageSourceSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60016DC")]
	[Address(RVA = "0x98F9E0", Offset = "0x98F9E0", VA = "0x98F9E0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60016DD")]
	[Address(RVA = "0x98FA14", Offset = "0x98FA14", VA = "0x98FA14", Slot = "1")]
	~AkImageSourceSettings()
	{
	}

	[Token(Token = "0x60016DE")]
	[Address(RVA = "0x98FA88", Offset = "0x98FA88", VA = "0x98FA88", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60016DF")]
	[Address(RVA = "0x98FBC8", Offset = "0x98FBC8", VA = "0x98FBC8")]
	public AkImageSourceSettings()
	{
	}

	[Token(Token = "0x60016E0")]
	[Address(RVA = "0x98FC4C", Offset = "0x98FC4C", VA = "0x98FC4C")]
	public AkImageSourceSettings(AkVector in_sourcePosition, float in_fDistanceScalingFactor, float in_fLevel)
	{
	}

	[Token(Token = "0x60016E1")]
	[Address(RVA = "0x98FD0C", Offset = "0x98FD0C", VA = "0x98FD0C")]
	public void SetOneTexture(uint in_texture)
	{
	}

	[Token(Token = "0x60016E2")]
	[Address(RVA = "0x98FD88", Offset = "0x98FD88", VA = "0x98FD88")]
	public void SetName(string in_pName)
	{
	}
}
[Token(Token = "0x200024C")]
public class AkInitializationSettings : IDisposable
{
	[Token(Token = "0x4001148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001BB")]
	public AkMemSettings memSettings
	{
		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x991660", Offset = "0x991660", VA = "0x991660")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016EB")]
		[Address(RVA = "0x991568", Offset = "0x991568", VA = "0x991568")]
		set
		{
		}
	}

	[Token(Token = "0x170001BC")]
	public AkStreamMgrSettings streamMgrSettings
	{
		[Token(Token = "0x60016EE")]
		[Address(RVA = "0x9917E0", Offset = "0x9917E0", VA = "0x9917E0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x991750", Offset = "0x991750", VA = "0x991750")]
		set
		{
		}
	}

	[Token(Token = "0x170001BD")]
	public AkDeviceSettings deviceSettings
	{
		[Token(Token = "0x60016F0")]
		[Address(RVA = "0x991920", Offset = "0x991920", VA = "0x991920")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016EF")]
		[Address(RVA = "0x991890", Offset = "0x991890", VA = "0x991890")]
		set
		{
		}
	}

	[Token(Token = "0x170001BE")]
	public AkInitSettings initSettings
	{
		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x991A78", Offset = "0x991A78", VA = "0x991A78")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016F1")]
		[Address(RVA = "0x9919D0", Offset = "0x9919D0", VA = "0x9919D0")]
		set
		{
		}
	}

	[Token(Token = "0x170001BF")]
	public AkPlatformInitSettings platformSettings
	{
		[Token(Token = "0x60016F4")]
		[Address(RVA = "0x991C20", Offset = "0x991C20", VA = "0x991C20")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x991B28", Offset = "0x991B28", VA = "0x991B28")]
		set
		{
		}
	}

	[Token(Token = "0x170001C0")]
	public AkMusicSettings musicSettings
	{
		[Token(Token = "0x60016F6")]
		[Address(RVA = "0x991E08", Offset = "0x991E08", VA = "0x991E08")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016F5")]
		[Address(RVA = "0x991D10", Offset = "0x991D10", VA = "0x991D10")]
		set
		{
		}
	}

	[Token(Token = "0x170001C1")]
	public uint preparePoolSize
	{
		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x991F74", Offset = "0x991F74", VA = "0x991F74")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x991EF8", Offset = "0x991EF8", VA = "0x991EF8")]
		set
		{
		}
	}

	[Token(Token = "0x170001C2")]
	public AkUnityPlatformSpecificSettings unityPlatformSpecificSettings
	{
		[Token(Token = "0x60016FA")]
		[Address(RVA = "0x992070", Offset = "0x992070", VA = "0x992070")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x991FE0", Offset = "0x991FE0", VA = "0x991FE0")]
		set
		{
		}
	}

	[Token(Token = "0x170001C3")]
	public bool useAsyncOpen
	{
		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x99219C", Offset = "0x99219C", VA = "0x99219C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x992120", Offset = "0x992120", VA = "0x992120")]
		set
		{
		}
	}

	[Token(Token = "0x60016E5")]
	[Address(RVA = "0x99126C", Offset = "0x99126C", VA = "0x99126C")]
	internal AkInitializationSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60016E6")]
	[Address(RVA = "0x9912AC", Offset = "0x9912AC", VA = "0x9912AC")]
	internal static IntPtr getCPtr(AkInitializationSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60016E7")]
	[Address(RVA = "0x9912FC", Offset = "0x9912FC", VA = "0x9912FC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60016E8")]
	[Address(RVA = "0x991330", Offset = "0x991330", VA = "0x991330", Slot = "1")]
	~AkInitializationSettings()
	{
	}

	[Token(Token = "0x60016E9")]
	[Address(RVA = "0x9913A4", Offset = "0x9913A4", VA = "0x9913A4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60016EA")]
	[Address(RVA = "0x9914E4", Offset = "0x9914E4", VA = "0x9914E4")]
	public AkInitializationSettings()
	{
	}
}
[Token(Token = "0x200024D")]
public class AkInitSettings : IDisposable
{
	[Token(Token = "0x400114A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400114B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001C4")]
	public uint uMaxNumPaths
	{
		[Token(Token = "0x6001703")]
		[Address(RVA = "0x990250", Offset = "0x990250", VA = "0x990250")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001702")]
		[Address(RVA = "0x9901D4", Offset = "0x9901D4", VA = "0x9901D4")]
		set
		{
		}
	}

	[Token(Token = "0x170001C5")]
	public uint uDefaultPoolSize
	{
		[Token(Token = "0x6001705")]
		[Address(RVA = "0x990338", Offset = "0x990338", VA = "0x990338")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001704")]
		[Address(RVA = "0x9902BC", Offset = "0x9902BC", VA = "0x9902BC")]
		set
		{
		}
	}

	[Token(Token = "0x170001C6")]
	public float fDefaultPoolRatioThreshold
	{
		[Token(Token = "0x6001707")]
		[Address(RVA = "0x990420", Offset = "0x990420", VA = "0x990420")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001706")]
		[Address(RVA = "0x9903A4", Offset = "0x9903A4", VA = "0x9903A4")]
		set
		{
		}
	}

	[Token(Token = "0x170001C7")]
	public uint uCommandQueueSize
	{
		[Token(Token = "0x6001709")]
		[Address(RVA = "0x990508", Offset = "0x990508", VA = "0x990508")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001708")]
		[Address(RVA = "0x99048C", Offset = "0x99048C", VA = "0x99048C")]
		set
		{
		}
	}

	[Token(Token = "0x170001C8")]
	public int uPrepareEventMemoryPoolID
	{
		[Token(Token = "0x600170B")]
		[Address(RVA = "0x9905F0", Offset = "0x9905F0", VA = "0x9905F0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600170A")]
		[Address(RVA = "0x990574", Offset = "0x990574", VA = "0x990574")]
		set
		{
		}
	}

	[Token(Token = "0x170001C9")]
	public bool bEnableGameSyncPreparation
	{
		[Token(Token = "0x600170D")]
		[Address(RVA = "0x9906D8", Offset = "0x9906D8", VA = "0x9906D8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600170C")]
		[Address(RVA = "0x99065C", Offset = "0x99065C", VA = "0x99065C")]
		set
		{
		}
	}

	[Token(Token = "0x170001CA")]
	public uint uContinuousPlaybackLookAhead
	{
		[Token(Token = "0x600170F")]
		[Address(RVA = "0x9907C0", Offset = "0x9907C0", VA = "0x9907C0")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600170E")]
		[Address(RVA = "0x990744", Offset = "0x990744", VA = "0x990744")]
		set
		{
		}
	}

	[Token(Token = "0x170001CB")]
	public uint uNumSamplesPerFrame
	{
		[Token(Token = "0x6001711")]
		[Address(RVA = "0x9908A8", Offset = "0x9908A8", VA = "0x9908A8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001710")]
		[Address(RVA = "0x99082C", Offset = "0x99082C", VA = "0x99082C")]
		set
		{
		}
	}

	[Token(Token = "0x170001CC")]
	public uint uMonitorPoolSize
	{
		[Token(Token = "0x6001713")]
		[Address(RVA = "0x990990", Offset = "0x990990", VA = "0x990990")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001712")]
		[Address(RVA = "0x990914", Offset = "0x990914", VA = "0x990914")]
		set
		{
		}
	}

	[Token(Token = "0x170001CD")]
	public uint uMonitorQueuePoolSize
	{
		[Token(Token = "0x6001715")]
		[Address(RVA = "0x990A78", Offset = "0x990A78", VA = "0x990A78")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001714")]
		[Address(RVA = "0x9909FC", Offset = "0x9909FC", VA = "0x9909FC")]
		set
		{
		}
	}

	[Token(Token = "0x170001CE")]
	public AkOutputSettings settingsMainOutput
	{
		[Token(Token = "0x6001717")]
		[Address(RVA = "0x990BDC", Offset = "0x990BDC", VA = "0x990BDC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001716")]
		[Address(RVA = "0x990AE4", Offset = "0x990AE4", VA = "0x990AE4")]
		set
		{
		}
	}

	[Token(Token = "0x170001CF")]
	public uint uMaxHardwareTimeoutMs
	{
		[Token(Token = "0x6001719")]
		[Address(RVA = "0x990D48", Offset = "0x990D48", VA = "0x990D48")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001718")]
		[Address(RVA = "0x990CCC", Offset = "0x990CCC", VA = "0x990CCC")]
		set
		{
		}
	}

	[Token(Token = "0x170001D0")]
	public bool bUseSoundBankMgrThread
	{
		[Token(Token = "0x600171B")]
		[Address(RVA = "0x990E30", Offset = "0x990E30", VA = "0x990E30")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600171A")]
		[Address(RVA = "0x990DB4", Offset = "0x990DB4", VA = "0x990DB4")]
		set
		{
		}
	}

	[Token(Token = "0x170001D1")]
	public bool bUseLEngineThread
	{
		[Token(Token = "0x600171D")]
		[Address(RVA = "0x990F18", Offset = "0x990F18", VA = "0x990F18")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600171C")]
		[Address(RVA = "0x990E9C", Offset = "0x990E9C", VA = "0x990E9C")]
		set
		{
		}
	}

	[Token(Token = "0x170001D2")]
	public string szPluginDLLPath
	{
		[Token(Token = "0x600171F")]
		[Address(RVA = "0x991000", Offset = "0x991000", VA = "0x991000")]
		get
		{
			return null;
		}
		[Token(Token = "0x600171E")]
		[Address(RVA = "0x990F84", Offset = "0x990F84", VA = "0x990F84")]
		set
		{
		}
	}

	[Token(Token = "0x170001D3")]
	public AkFloorPlane eFloorPlane
	{
		[Token(Token = "0x6001721")]
		[Address(RVA = "0x99117C", Offset = "0x99117C", VA = "0x99117C")]
		get
		{
			return default(AkFloorPlane);
		}
		[Token(Token = "0x6001720")]
		[Address(RVA = "0x991100", Offset = "0x991100", VA = "0x991100")]
		set
		{
		}
	}

	[Token(Token = "0x60016FD")]
	[Address(RVA = "0x98FF5C", Offset = "0x98FF5C", VA = "0x98FF5C")]
	internal AkInitSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60016FE")]
	[Address(RVA = "0x98FF9C", Offset = "0x98FF9C", VA = "0x98FF9C")]
	internal static IntPtr getCPtr(AkInitSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60016FF")]
	[Address(RVA = "0x98FFEC", Offset = "0x98FFEC", VA = "0x98FFEC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001700")]
	[Address(RVA = "0x990020", Offset = "0x990020", VA = "0x990020", Slot = "1")]
	~AkInitSettings()
	{
	}

	[Token(Token = "0x6001701")]
	[Address(RVA = "0x990094", Offset = "0x990094", VA = "0x990094", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001722")]
	[Address(RVA = "0x9911E8", Offset = "0x9911E8", VA = "0x9911E8")]
	public AkInitSettings()
	{
	}
}
[Token(Token = "0x200024E")]
public class AkIterator : IDisposable
{
	[Token(Token = "0x400114C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400114D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001D4")]
	public AkPlaylistItem pItem
	{
		[Token(Token = "0x6001729")]
		[Address(RVA = "0x992B4C", Offset = "0x992B4C", VA = "0x992B4C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001728")]
		[Address(RVA = "0x992A54", Offset = "0x992A54", VA = "0x992A54")]
		set
		{
		}
	}

	[Token(Token = "0x6001723")]
	[Address(RVA = "0x9927DC", Offset = "0x9927DC", VA = "0x9927DC")]
	internal AkIterator(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001724")]
	[Address(RVA = "0x99281C", Offset = "0x99281C", VA = "0x99281C")]
	internal static IntPtr getCPtr(AkIterator obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001725")]
	[Address(RVA = "0x99286C", Offset = "0x99286C", VA = "0x99286C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001726")]
	[Address(RVA = "0x9928A0", Offset = "0x9928A0", VA = "0x9928A0", Slot = "1")]
	~AkIterator()
	{
	}

	[Token(Token = "0x6001727")]
	[Address(RVA = "0x992914", Offset = "0x992914", VA = "0x992914", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600172A")]
	[Address(RVA = "0x992C3C", Offset = "0x992C3C", VA = "0x992C3C")]
	public AkIterator NextIter()
	{
		return null;
	}

	[Token(Token = "0x600172B")]
	[Address(RVA = "0x992CDC", Offset = "0x992CDC", VA = "0x992CDC")]
	public AkIterator PrevIter()
	{
		return null;
	}

	[Token(Token = "0x600172C")]
	[Address(RVA = "0x992D7C", Offset = "0x992D7C", VA = "0x992D7C")]
	public AkPlaylistItem GetItem()
	{
		return null;
	}

	[Token(Token = "0x600172D")]
	[Address(RVA = "0x992E1C", Offset = "0x992E1C", VA = "0x992E1C")]
	public bool IsEqualTo(AkIterator in_rOp)
	{
		return default(bool);
	}

	[Token(Token = "0x600172E")]
	[Address(RVA = "0x992EC4", Offset = "0x992EC4", VA = "0x992EC4")]
	public bool IsDifferentFrom(AkIterator in_rOp)
	{
		return default(bool);
	}

	[Token(Token = "0x600172F")]
	[Address(RVA = "0x992F6C", Offset = "0x992F6C", VA = "0x992F6C")]
	public AkIterator()
	{
	}
}
[Token(Token = "0x200024F")]
public class AkMarkerCallbackInfo : AkEventCallbackInfo
{
	[Token(Token = "0x400114E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr swigCPtr;

	[Token(Token = "0x170001D5")]
	public uint uIdentifier
	{
		[Token(Token = "0x6001735")]
		[Address(RVA = "0x998A60", Offset = "0x998A60", VA = "0x998A60")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170001D6")]
	public uint uPosition
	{
		[Token(Token = "0x6001736")]
		[Address(RVA = "0x998ACC", Offset = "0x998ACC", VA = "0x998ACC")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170001D7")]
	public string strLabel
	{
		[Token(Token = "0x6001737")]
		[Address(RVA = "0x998B38", Offset = "0x998B38", VA = "0x998B38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001730")]
	[Address(RVA = "0x998730", Offset = "0x998730", VA = "0x998730")]
	internal AkMarkerCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001731")]
	[Address(RVA = "0x9987C4", Offset = "0x9987C4", VA = "0x9987C4")]
	internal static IntPtr getCPtr(AkMarkerCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001732")]
	[Address(RVA = "0x998814", Offset = "0x998814", VA = "0x998814", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001733")]
	[Address(RVA = "0x9988A0", Offset = "0x9988A0", VA = "0x9988A0", Slot = "1")]
	~AkMarkerCallbackInfo()
	{
	}

	[Token(Token = "0x6001734")]
	[Address(RVA = "0x998914", Offset = "0x998914", VA = "0x998914", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6001738")]
	[Address(RVA = "0x998C3C", Offset = "0x998C3C", VA = "0x998C3C")]
	public AkMarkerCallbackInfo()
	{
	}
}
[Token(Token = "0x2000250")]
public class AkMemSettings : IDisposable
{
	[Token(Token = "0x400114F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001D8")]
	public uint uMaxNumPools
	{
		[Token(Token = "0x6001740")]
		[Address(RVA = "0x999938", Offset = "0x999938", VA = "0x999938")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600173F")]
		[Address(RVA = "0x9998BC", Offset = "0x9998BC", VA = "0x9998BC")]
		set
		{
		}
	}

	[Token(Token = "0x170001D9")]
	public uint uDebugFlags
	{
		[Token(Token = "0x6001742")]
		[Address(RVA = "0x999A20", Offset = "0x999A20", VA = "0x999A20")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001741")]
		[Address(RVA = "0x9999A4", Offset = "0x9999A4", VA = "0x9999A4")]
		set
		{
		}
	}

	[Token(Token = "0x6001739")]
	[Address(RVA = "0x991710", Offset = "0x991710", VA = "0x991710")]
	internal AkMemSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600173A")]
	[Address(RVA = "0x991610", Offset = "0x991610", VA = "0x991610")]
	internal static IntPtr getCPtr(AkMemSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600173B")]
	[Address(RVA = "0x999650", Offset = "0x999650", VA = "0x999650", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600173C")]
	[Address(RVA = "0x999684", Offset = "0x999684", VA = "0x999684", Slot = "1")]
	~AkMemSettings()
	{
	}

	[Token(Token = "0x600173D")]
	[Address(RVA = "0x9996F8", Offset = "0x9996F8", VA = "0x9996F8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600173E")]
	[Address(RVA = "0x999838", Offset = "0x999838", VA = "0x999838")]
	public AkMemSettings()
	{
	}
}
[Token(Token = "0x2000251")]
public enum AkMeteringFlags
{
	[Token(Token = "0x4001152")]
	AK_NoMetering = 0,
	[Token(Token = "0x4001153")]
	AK_EnableBusMeter_Peak = 1,
	[Token(Token = "0x4001154")]
	AK_EnableBusMeter_TruePeak = 2,
	[Token(Token = "0x4001155")]
	AK_EnableBusMeter_RMS = 4,
	[Token(Token = "0x4001156")]
	AK_EnableBusMeter_KPower = 0x10,
	[Token(Token = "0x4001157")]
	AK_EnableBusMeter_3DMeter = 0x20
}
[Token(Token = "0x2000252")]
public enum AkMIDICcTypes
{
	[Token(Token = "0x4001159")]
	BANK_SELECT_COARSE = 0,
	[Token(Token = "0x400115A")]
	MOD_WHEEL_COARSE = 1,
	[Token(Token = "0x400115B")]
	BREATH_CTRL_COARSE = 2,
	[Token(Token = "0x400115C")]
	CTRL_3_COARSE = 3,
	[Token(Token = "0x400115D")]
	FOOT_PEDAL_COARSE = 4,
	[Token(Token = "0x400115E")]
	PORTAMENTO_COARSE = 5,
	[Token(Token = "0x400115F")]
	DATA_ENTRY_COARSE = 6,
	[Token(Token = "0x4001160")]
	VOLUME_COARSE = 7,
	[Token(Token = "0x4001161")]
	BALANCE_COARSE = 8,
	[Token(Token = "0x4001162")]
	CTRL_9_COARSE = 9,
	[Token(Token = "0x4001163")]
	PAN_POSITION_COARSE = 10,
	[Token(Token = "0x4001164")]
	EXPRESSION_COARSE = 11,
	[Token(Token = "0x4001165")]
	EFFECT_CTRL_1_COARSE = 12,
	[Token(Token = "0x4001166")]
	EFFECT_CTRL_2_COARSE = 13,
	[Token(Token = "0x4001167")]
	CTRL_14_COARSE = 14,
	[Token(Token = "0x4001168")]
	CTRL_15_COARSE = 15,
	[Token(Token = "0x4001169")]
	GEN_SLIDER_1 = 16,
	[Token(Token = "0x400116A")]
	GEN_SLIDER_2 = 17,
	[Token(Token = "0x400116B")]
	GEN_SLIDER_3 = 18,
	[Token(Token = "0x400116C")]
	GEN_SLIDER_4 = 19,
	[Token(Token = "0x400116D")]
	CTRL_20_COARSE = 20,
	[Token(Token = "0x400116E")]
	CTRL_21_COARSE = 21,
	[Token(Token = "0x400116F")]
	CTRL_22_COARSE = 22,
	[Token(Token = "0x4001170")]
	CTRL_23_COARSE = 23,
	[Token(Token = "0x4001171")]
	CTRL_24_COARSE = 24,
	[Token(Token = "0x4001172")]
	CTRL_25_COARSE = 25,
	[Token(Token = "0x4001173")]
	CTRL_26_COARSE = 26,
	[Token(Token = "0x4001174")]
	CTRL_27_COARSE = 27,
	[Token(Token = "0x4001175")]
	CTRL_28_COARSE = 28,
	[Token(Token = "0x4001176")]
	CTRL_29_COARSE = 29,
	[Token(Token = "0x4001177")]
	CTRL_30_COARSE = 30,
	[Token(Token = "0x4001178")]
	CTRL_31_COARSE = 31,
	[Token(Token = "0x4001179")]
	BANK_SELECT_FINE = 32,
	[Token(Token = "0x400117A")]
	MOD_WHEEL_FINE = 33,
	[Token(Token = "0x400117B")]
	BREATH_CTRL_FINE = 34,
	[Token(Token = "0x400117C")]
	CTRL_3_FINE = 35,
	[Token(Token = "0x400117D")]
	FOOT_PEDAL_FINE = 36,
	[Token(Token = "0x400117E")]
	PORTAMENTO_FINE = 37,
	[Token(Token = "0x400117F")]
	DATA_ENTRY_FINE = 38,
	[Token(Token = "0x4001180")]
	VOLUME_FINE = 39,
	[Token(Token = "0x4001181")]
	BALANCE_FINE = 40,
	[Token(Token = "0x4001182")]
	CTRL_9_FINE = 41,
	[Token(Token = "0x4001183")]
	PAN_POSITION_FINE = 42,
	[Token(Token = "0x4001184")]
	EXPRESSION_FINE = 43,
	[Token(Token = "0x4001185")]
	EFFECT_CTRL_1_FINE = 44,
	[Token(Token = "0x4001186")]
	EFFECT_CTRL_2_FINE = 45,
	[Token(Token = "0x4001187")]
	CTRL_14_FINE = 46,
	[Token(Token = "0x4001188")]
	CTRL_15_FINE = 47,
	[Token(Token = "0x4001189")]
	CTRL_20_FINE = 52,
	[Token(Token = "0x400118A")]
	CTRL_21_FINE = 53,
	[Token(Token = "0x400118B")]
	CTRL_22_FINE = 54,
	[Token(Token = "0x400118C")]
	CTRL_23_FINE = 55,
	[Token(Token = "0x400118D")]
	CTRL_24_FINE = 56,
	[Token(Token = "0x400118E")]
	CTRL_25_FINE = 57,
	[Token(Token = "0x400118F")]
	CTRL_26_FINE = 58,
	[Token(Token = "0x4001190")]
	CTRL_27_FINE = 59,
	[Token(Token = "0x4001191")]
	CTRL_28_FINE = 60,
	[Token(Token = "0x4001192")]
	CTRL_29_FINE = 61,
	[Token(Token = "0x4001193")]
	CTRL_30_FINE = 62,
	[Token(Token = "0x4001194")]
	CTRL_31_FINE = 63,
	[Token(Token = "0x4001195")]
	HOLD_PEDAL = 64,
	[Token(Token = "0x4001196")]
	PORTAMENTO_ON_OFF = 65,
	[Token(Token = "0x4001197")]
	SUSTENUTO_PEDAL = 66,
	[Token(Token = "0x4001198")]
	SOFT_PEDAL = 67,
	[Token(Token = "0x4001199")]
	LEGATO_PEDAL = 68,
	[Token(Token = "0x400119A")]
	HOLD_PEDAL_2 = 69,
	[Token(Token = "0x400119B")]
	SOUND_VARIATION = 70,
	[Token(Token = "0x400119C")]
	SOUND_TIMBRE = 71,
	[Token(Token = "0x400119D")]
	SOUND_RELEASE_TIME = 72,
	[Token(Token = "0x400119E")]
	SOUND_ATTACK_TIME = 73,
	[Token(Token = "0x400119F")]
	SOUND_BRIGHTNESS = 74,
	[Token(Token = "0x40011A0")]
	SOUND_CTRL_6 = 75,
	[Token(Token = "0x40011A1")]
	SOUND_CTRL_7 = 76,
	[Token(Token = "0x40011A2")]
	SOUND_CTRL_8 = 77,
	[Token(Token = "0x40011A3")]
	SOUND_CTRL_9 = 78,
	[Token(Token = "0x40011A4")]
	SOUND_CTRL_10 = 79,
	[Token(Token = "0x40011A5")]
	GENERAL_BUTTON_1 = 80,
	[Token(Token = "0x40011A6")]
	GENERAL_BUTTON_2 = 81,
	[Token(Token = "0x40011A7")]
	GENERAL_BUTTON_3 = 82,
	[Token(Token = "0x40011A8")]
	GENERAL_BUTTON_4 = 83,
	[Token(Token = "0x40011A9")]
	REVERB_LEVEL = 91,
	[Token(Token = "0x40011AA")]
	TREMOLO_LEVEL = 92,
	[Token(Token = "0x40011AB")]
	CHORUS_LEVEL = 93,
	[Token(Token = "0x40011AC")]
	CELESTE_LEVEL = 94,
	[Token(Token = "0x40011AD")]
	PHASER_LEVEL = 95,
	[Token(Token = "0x40011AE")]
	DATA_BUTTON_P1 = 96,
	[Token(Token = "0x40011AF")]
	DATA_BUTTON_M1 = 97,
	[Token(Token = "0x40011B0")]
	NON_REGISTER_COARSE = 98,
	[Token(Token = "0x40011B1")]
	NON_REGISTER_FINE = 99,
	[Token(Token = "0x40011B2")]
	ALL_SOUND_OFF = 120,
	[Token(Token = "0x40011B3")]
	ALL_CONTROLLERS_OFF = 121,
	[Token(Token = "0x40011B4")]
	LOCAL_KEYBOARD = 122,
	[Token(Token = "0x40011B5")]
	ALL_NOTES_OFF = 123,
	[Token(Token = "0x40011B6")]
	OMNI_MODE_OFF = 124,
	[Token(Token = "0x40011B7")]
	OMNI_MODE_ON = 125,
	[Token(Token = "0x40011B8")]
	OMNI_MONOPHONIC_ON = 126,
	[Token(Token = "0x40011B9")]
	OMNI_POLYPHONIC_ON = 127
}
[Token(Token = "0x2000253")]
public class AkMIDIEvent : IDisposable
{
	[Token(Token = "0x20004C7")]
	public class tGen : IDisposable
	{
		[Token(Token = "0x4002103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x4002104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x170003B1")]
		public byte byParam1
		{
			[Token(Token = "0x60023F9")]
			[Address(RVA = "0x995EC4", Offset = "0x995EC4", VA = "0x995EC4")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x60023F8")]
			[Address(RVA = "0x995E48", Offset = "0x995E48", VA = "0x995E48")]
			set
			{
			}
		}

		[Token(Token = "0x170003B2")]
		public byte byParam2
		{
			[Token(Token = "0x60023FB")]
			[Address(RVA = "0x995FAC", Offset = "0x995FAC", VA = "0x995FAC")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x60023FA")]
			[Address(RVA = "0x995F30", Offset = "0x995F30", VA = "0x995F30")]
			set
			{
			}
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0x993EA4", Offset = "0x993EA4", VA = "0x993EA4")]
		internal tGen(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x60023F4")]
		[Address(RVA = "0x993DA4", Offset = "0x993DA4", VA = "0x993DA4")]
		internal static IntPtr getCPtr(tGen obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60023F5")]
		[Address(RVA = "0x995C60", Offset = "0x995C60", VA = "0x995C60", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x60023F6")]
		[Address(RVA = "0x995C94", Offset = "0x995C94", VA = "0x995C94", Slot = "1")]
		~tGen()
		{
		}

		[Token(Token = "0x60023F7")]
		[Address(RVA = "0x995D08", Offset = "0x995D08", VA = "0x995D08", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x60023FC")]
		[Address(RVA = "0x996018", Offset = "0x996018", VA = "0x996018")]
		public tGen()
		{
		}
	}

	[Token(Token = "0x20004C8")]
	public class tNoteOnOff : IDisposable
	{
		[Token(Token = "0x4002105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x4002106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x170003B3")]
		public byte byNote
		{
			[Token(Token = "0x6002403")]
			[Address(RVA = "0x99673C", Offset = "0x99673C", VA = "0x99673C")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002402")]
			[Address(RVA = "0x9966C0", Offset = "0x9966C0", VA = "0x9966C0")]
			set
			{
			}
		}

		[Token(Token = "0x170003B4")]
		public byte byVelocity
		{
			[Token(Token = "0x6002405")]
			[Address(RVA = "0x996824", Offset = "0x996824", VA = "0x996824")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002404")]
			[Address(RVA = "0x9967A8", Offset = "0x9967A8", VA = "0x9967A8")]
			set
			{
			}
		}

		[Token(Token = "0x60023FD")]
		[Address(RVA = "0x994274", Offset = "0x994274", VA = "0x994274")]
		internal tNoteOnOff(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x60023FE")]
		[Address(RVA = "0x994174", Offset = "0x994174", VA = "0x994174")]
		internal static IntPtr getCPtr(tNoteOnOff obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0x9964D8", Offset = "0x9964D8", VA = "0x9964D8", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x6002400")]
		[Address(RVA = "0x99650C", Offset = "0x99650C", VA = "0x99650C", Slot = "1")]
		~tNoteOnOff()
		{
		}

		[Token(Token = "0x6002401")]
		[Address(RVA = "0x996580", Offset = "0x996580", VA = "0x996580", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0x996890", Offset = "0x996890", VA = "0x996890")]
		public tNoteOnOff()
		{
		}
	}

	[Token(Token = "0x20004C9")]
	public class tCc : IDisposable
	{
		[Token(Token = "0x4002107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x4002108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x170003B5")]
		public byte byCc
		{
			[Token(Token = "0x600240D")]
			[Address(RVA = "0x995734", Offset = "0x995734", VA = "0x995734")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600240C")]
			[Address(RVA = "0x9956B8", Offset = "0x9956B8", VA = "0x9956B8")]
			set
			{
			}
		}

		[Token(Token = "0x170003B6")]
		public byte byValue
		{
			[Token(Token = "0x600240F")]
			[Address(RVA = "0x99581C", Offset = "0x99581C", VA = "0x99581C")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600240E")]
			[Address(RVA = "0x9957A0", Offset = "0x9957A0", VA = "0x9957A0")]
			set
			{
			}
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0x99408C", Offset = "0x99408C", VA = "0x99408C")]
		internal tCc(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0x993F8C", Offset = "0x993F8C", VA = "0x993F8C")]
		internal static IntPtr getCPtr(tCc obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0x9954D0", Offset = "0x9954D0", VA = "0x9954D0", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x600240A")]
		[Address(RVA = "0x995504", Offset = "0x995504", VA = "0x995504", Slot = "1")]
		~tCc()
		{
		}

		[Token(Token = "0x600240B")]
		[Address(RVA = "0x995578", Offset = "0x995578", VA = "0x995578", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002410")]
		[Address(RVA = "0x995888", Offset = "0x995888", VA = "0x995888")]
		public tCc()
		{
		}
	}

	[Token(Token = "0x20004CA")]
	public class tPitchBend : IDisposable
	{
		[Token(Token = "0x4002109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x400210A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x170003B7")]
		public byte byValueLsb
		{
			[Token(Token = "0x6002417")]
			[Address(RVA = "0x996B78", Offset = "0x996B78", VA = "0x996B78")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002416")]
			[Address(RVA = "0x996AFC", Offset = "0x996AFC", VA = "0x996AFC")]
			set
			{
			}
		}

		[Token(Token = "0x170003B8")]
		public byte byValueMsb
		{
			[Token(Token = "0x6002419")]
			[Address(RVA = "0x996C60", Offset = "0x996C60", VA = "0x996C60")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002418")]
			[Address(RVA = "0x996BE4", Offset = "0x996BE4", VA = "0x996BE4")]
			set
			{
			}
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0x99445C", Offset = "0x99445C", VA = "0x99445C")]
		internal tPitchBend(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0x99435C", Offset = "0x99435C", VA = "0x99435C")]
		internal static IntPtr getCPtr(tPitchBend obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0x996914", Offset = "0x996914", VA = "0x996914", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0x996948", Offset = "0x996948", VA = "0x996948", Slot = "1")]
		~tPitchBend()
		{
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0x9969BC", Offset = "0x9969BC", VA = "0x9969BC", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x600241A")]
		[Address(RVA = "0x996CCC", Offset = "0x996CCC", VA = "0x996CCC")]
		public tPitchBend()
		{
		}
	}

	[Token(Token = "0x20004CB")]
	public class tNoteAftertouch : IDisposable
	{
		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x170003B9")]
		public byte byNote
		{
			[Token(Token = "0x6002421")]
			[Address(RVA = "0x996300", Offset = "0x996300", VA = "0x996300")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002420")]
			[Address(RVA = "0x996284", Offset = "0x996284", VA = "0x996284")]
			set
			{
			}
		}

		[Token(Token = "0x170003BA")]
		public byte byValue
		{
			[Token(Token = "0x6002423")]
			[Address(RVA = "0x9963E8", Offset = "0x9963E8", VA = "0x9963E8")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002422")]
			[Address(RVA = "0x99636C", Offset = "0x99636C", VA = "0x99636C")]
			set
			{
			}
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0x994644", Offset = "0x994644", VA = "0x994644")]
		internal tNoteAftertouch(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x600241C")]
		[Address(RVA = "0x994544", Offset = "0x994544", VA = "0x994544")]
		internal static IntPtr getCPtr(tNoteAftertouch obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0x99609C", Offset = "0x99609C", VA = "0x99609C", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x600241E")]
		[Address(RVA = "0x9960D0", Offset = "0x9960D0", VA = "0x9960D0", Slot = "1")]
		~tNoteAftertouch()
		{
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0x996144", Offset = "0x996144", VA = "0x996144", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002424")]
		[Address(RVA = "0x996454", Offset = "0x996454", VA = "0x996454")]
		public tNoteAftertouch()
		{
		}
	}

	[Token(Token = "0x20004CC")]
	public class tChanAftertouch : IDisposable
	{
		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x170003BB")]
		public byte byValue
		{
			[Token(Token = "0x600242B")]
			[Address(RVA = "0x995B70", Offset = "0x995B70", VA = "0x995B70")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600242A")]
			[Address(RVA = "0x995AF4", Offset = "0x995AF4", VA = "0x995AF4")]
			set
			{
			}
		}

		[Token(Token = "0x6002425")]
		[Address(RVA = "0x99482C", Offset = "0x99482C", VA = "0x99482C")]
		internal tChanAftertouch(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x6002426")]
		[Address(RVA = "0x99472C", Offset = "0x99472C", VA = "0x99472C")]
		internal static IntPtr getCPtr(tChanAftertouch obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0x99590C", Offset = "0x99590C", VA = "0x99590C", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0x995940", Offset = "0x995940", VA = "0x995940", Slot = "1")]
		~tChanAftertouch()
		{
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0x9959B4", Offset = "0x9959B4", VA = "0x9959B4", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x600242C")]
		[Address(RVA = "0x995BDC", Offset = "0x995BDC", VA = "0x995BDC")]
		public tChanAftertouch()
		{
		}
	}

	[Token(Token = "0x20004CD")]
	public class tProgramChange : IDisposable
	{
		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x170003BC")]
		public byte byProgramNum
		{
			[Token(Token = "0x6002433")]
			[Address(RVA = "0x996FB4", Offset = "0x996FB4", VA = "0x996FB4")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002432")]
			[Address(RVA = "0x996F38", Offset = "0x996F38", VA = "0x996F38")]
			set
			{
			}
		}

		[Token(Token = "0x600242D")]
		[Address(RVA = "0x994A14", Offset = "0x994A14", VA = "0x994A14")]
		internal tProgramChange(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x600242E")]
		[Address(RVA = "0x994914", Offset = "0x994914", VA = "0x994914")]
		internal static IntPtr getCPtr(tProgramChange obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600242F")]
		[Address(RVA = "0x996D50", Offset = "0x996D50", VA = "0x996D50", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x6002430")]
		[Address(RVA = "0x996D84", Offset = "0x996D84", VA = "0x996D84", Slot = "1")]
		~tProgramChange()
		{
		}

		[Token(Token = "0x6002431")]
		[Address(RVA = "0x996DF8", Offset = "0x996DF8", VA = "0x996DF8", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002434")]
		[Address(RVA = "0x997020", Offset = "0x997020", VA = "0x997020")]
		public tProgramChange()
		{
		}
	}

	[Token(Token = "0x40011BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40011BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001DA")]
	public byte byChan
	{
		[Token(Token = "0x6001749")]
		[Address(RVA = "0x993C90", Offset = "0x993C90", VA = "0x993C90")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001748")]
		[Address(RVA = "0x993C14", Offset = "0x993C14", VA = "0x993C14")]
		set
		{
		}
	}

	[Token(Token = "0x170001DB")]
	public tGen Gen
	{
		[Token(Token = "0x600174B")]
		[Address(RVA = "0x993DF4", Offset = "0x993DF4", VA = "0x993DF4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600174A")]
		[Address(RVA = "0x993CFC", Offset = "0x993CFC", VA = "0x993CFC")]
		set
		{
		}
	}

	[Token(Token = "0x170001DC")]
	public tCc Cc
	{
		[Token(Token = "0x600174D")]
		[Address(RVA = "0x993FDC", Offset = "0x993FDC", VA = "0x993FDC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600174C")]
		[Address(RVA = "0x993EE4", Offset = "0x993EE4", VA = "0x993EE4")]
		set
		{
		}
	}

	[Token(Token = "0x170001DD")]
	public tNoteOnOff NoteOnOff
	{
		[Token(Token = "0x600174F")]
		[Address(RVA = "0x9941C4", Offset = "0x9941C4", VA = "0x9941C4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600174E")]
		[Address(RVA = "0x9940CC", Offset = "0x9940CC", VA = "0x9940CC")]
		set
		{
		}
	}

	[Token(Token = "0x170001DE")]
	public tPitchBend PitchBend
	{
		[Token(Token = "0x6001751")]
		[Address(RVA = "0x9943AC", Offset = "0x9943AC", VA = "0x9943AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001750")]
		[Address(RVA = "0x9942B4", Offset = "0x9942B4", VA = "0x9942B4")]
		set
		{
		}
	}

	[Token(Token = "0x170001DF")]
	public tNoteAftertouch NoteAftertouch
	{
		[Token(Token = "0x6001753")]
		[Address(RVA = "0x994594", Offset = "0x994594", VA = "0x994594")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001752")]
		[Address(RVA = "0x99449C", Offset = "0x99449C", VA = "0x99449C")]
		set
		{
		}
	}

	[Token(Token = "0x170001E0")]
	public tChanAftertouch ChanAftertouch
	{
		[Token(Token = "0x6001755")]
		[Address(RVA = "0x99477C", Offset = "0x99477C", VA = "0x99477C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001754")]
		[Address(RVA = "0x994684", Offset = "0x994684", VA = "0x994684")]
		set
		{
		}
	}

	[Token(Token = "0x170001E1")]
	public tProgramChange ProgramChange
	{
		[Token(Token = "0x6001757")]
		[Address(RVA = "0x994964", Offset = "0x994964", VA = "0x994964")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001756")]
		[Address(RVA = "0x99486C", Offset = "0x99486C", VA = "0x99486C")]
		set
		{
		}
	}

	[Token(Token = "0x170001E2")]
	public AkMIDIEventTypes byType
	{
		[Token(Token = "0x6001759")]
		[Address(RVA = "0x994AD0", Offset = "0x994AD0", VA = "0x994AD0")]
		get
		{
			return default(AkMIDIEventTypes);
		}
		[Token(Token = "0x6001758")]
		[Address(RVA = "0x994A54", Offset = "0x994A54", VA = "0x994A54")]
		set
		{
		}
	}

	[Token(Token = "0x170001E3")]
	public byte byOnOffNote
	{
		[Token(Token = "0x600175B")]
		[Address(RVA = "0x994BB8", Offset = "0x994BB8", VA = "0x994BB8")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600175A")]
		[Address(RVA = "0x994B3C", Offset = "0x994B3C", VA = "0x994B3C")]
		set
		{
		}
	}

	[Token(Token = "0x170001E4")]
	public byte byVelocity
	{
		[Token(Token = "0x600175D")]
		[Address(RVA = "0x994CA0", Offset = "0x994CA0", VA = "0x994CA0")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600175C")]
		[Address(RVA = "0x994C24", Offset = "0x994C24", VA = "0x994C24")]
		set
		{
		}
	}

	[Token(Token = "0x170001E5")]
	public AkMIDICcTypes byCc
	{
		[Token(Token = "0x600175F")]
		[Address(RVA = "0x994D88", Offset = "0x994D88", VA = "0x994D88")]
		get
		{
			return default(AkMIDICcTypes);
		}
		[Token(Token = "0x600175E")]
		[Address(RVA = "0x994D0C", Offset = "0x994D0C", VA = "0x994D0C")]
		set
		{
		}
	}

	[Token(Token = "0x170001E6")]
	public byte byCcValue
	{
		[Token(Token = "0x6001761")]
		[Address(RVA = "0x994E70", Offset = "0x994E70", VA = "0x994E70")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001760")]
		[Address(RVA = "0x994DF4", Offset = "0x994DF4", VA = "0x994DF4")]
		set
		{
		}
	}

	[Token(Token = "0x170001E7")]
	public byte byValueLsb
	{
		[Token(Token = "0x6001763")]
		[Address(RVA = "0x994F58", Offset = "0x994F58", VA = "0x994F58")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001762")]
		[Address(RVA = "0x994EDC", Offset = "0x994EDC", VA = "0x994EDC")]
		set
		{
		}
	}

	[Token(Token = "0x170001E8")]
	public byte byValueMsb
	{
		[Token(Token = "0x6001765")]
		[Address(RVA = "0x995040", Offset = "0x995040", VA = "0x995040")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001764")]
		[Address(RVA = "0x994FC4", Offset = "0x994FC4", VA = "0x994FC4")]
		set
		{
		}
	}

	[Token(Token = "0x170001E9")]
	public byte byAftertouchNote
	{
		[Token(Token = "0x6001767")]
		[Address(RVA = "0x995128", Offset = "0x995128", VA = "0x995128")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001766")]
		[Address(RVA = "0x9950AC", Offset = "0x9950AC", VA = "0x9950AC")]
		set
		{
		}
	}

	[Token(Token = "0x170001EA")]
	public byte byNoteAftertouchValue
	{
		[Token(Token = "0x6001769")]
		[Address(RVA = "0x995210", Offset = "0x995210", VA = "0x995210")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001768")]
		[Address(RVA = "0x995194", Offset = "0x995194", VA = "0x995194")]
		set
		{
		}
	}

	[Token(Token = "0x170001EB")]
	public byte byChanAftertouchValue
	{
		[Token(Token = "0x600176B")]
		[Address(RVA = "0x9952F8", Offset = "0x9952F8", VA = "0x9952F8")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600176A")]
		[Address(RVA = "0x99527C", Offset = "0x99527C", VA = "0x99527C")]
		set
		{
		}
	}

	[Token(Token = "0x170001EC")]
	public byte byProgramNum
	{
		[Token(Token = "0x600176D")]
		[Address(RVA = "0x9953E0", Offset = "0x9953E0", VA = "0x9953E0")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600176C")]
		[Address(RVA = "0x995364", Offset = "0x995364", VA = "0x995364")]
		set
		{
		}
	}

	[Token(Token = "0x6001743")]
	[Address(RVA = "0x99399C", Offset = "0x99399C", VA = "0x99399C")]
	internal AkMIDIEvent(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001744")]
	[Address(RVA = "0x9939DC", Offset = "0x9939DC", VA = "0x9939DC")]
	internal static IntPtr getCPtr(AkMIDIEvent obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001745")]
	[Address(RVA = "0x993A2C", Offset = "0x993A2C", VA = "0x993A2C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001746")]
	[Address(RVA = "0x993A60", Offset = "0x993A60", VA = "0x993A60", Slot = "1")]
	~AkMIDIEvent()
	{
	}

	[Token(Token = "0x6001747")]
	[Address(RVA = "0x993AD4", Offset = "0x993AD4", VA = "0x993AD4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600176E")]
	[Address(RVA = "0x99544C", Offset = "0x99544C", VA = "0x99544C")]
	public AkMIDIEvent()
	{
	}
}
[Token(Token = "0x2000254")]
public class AkMIDIEventCallbackInfo : AkEventCallbackInfo
{
	[Token(Token = "0x40011BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr swigCPtr;

	[Token(Token = "0x170001ED")]
	public byte byChan
	{
		[Token(Token = "0x6001774")]
		[Address(RVA = "0x9973D4", Offset = "0x9973D4", VA = "0x9973D4")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001EE")]
	public byte byParam1
	{
		[Token(Token = "0x6001775")]
		[Address(RVA = "0x997440", Offset = "0x997440", VA = "0x997440")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001EF")]
	public byte byParam2
	{
		[Token(Token = "0x6001776")]
		[Address(RVA = "0x9974AC", Offset = "0x9974AC", VA = "0x9974AC")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001F0")]
	public AkMIDIEventTypes byType
	{
		[Token(Token = "0x6001777")]
		[Address(RVA = "0x997518", Offset = "0x997518", VA = "0x997518")]
		get
		{
			return default(AkMIDIEventTypes);
		}
	}

	[Token(Token = "0x170001F1")]
	public byte byOnOffNote
	{
		[Token(Token = "0x6001778")]
		[Address(RVA = "0x997584", Offset = "0x997584", VA = "0x997584")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001F2")]
	public byte byVelocity
	{
		[Token(Token = "0x6001779")]
		[Address(RVA = "0x9975F0", Offset = "0x9975F0", VA = "0x9975F0")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001F3")]
	public AkMIDICcTypes byCc
	{
		[Token(Token = "0x600177A")]
		[Address(RVA = "0x99765C", Offset = "0x99765C", VA = "0x99765C")]
		get
		{
			return default(AkMIDICcTypes);
		}
	}

	[Token(Token = "0x170001F4")]
	public byte byCcValue
	{
		[Token(Token = "0x600177B")]
		[Address(RVA = "0x9976C8", Offset = "0x9976C8", VA = "0x9976C8")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001F5")]
	public byte byValueLsb
	{
		[Token(Token = "0x600177C")]
		[Address(RVA = "0x997734", Offset = "0x997734", VA = "0x997734")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001F6")]
	public byte byValueMsb
	{
		[Token(Token = "0x600177D")]
		[Address(RVA = "0x9977A0", Offset = "0x9977A0", VA = "0x9977A0")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001F7")]
	public byte byAftertouchNote
	{
		[Token(Token = "0x600177E")]
		[Address(RVA = "0x99780C", Offset = "0x99780C", VA = "0x99780C")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001F8")]
	public byte byNoteAftertouchValue
	{
		[Token(Token = "0x600177F")]
		[Address(RVA = "0x997878", Offset = "0x997878", VA = "0x997878")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001F9")]
	public byte byChanAftertouchValue
	{
		[Token(Token = "0x6001780")]
		[Address(RVA = "0x9978E4", Offset = "0x9978E4", VA = "0x9978E4")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170001FA")]
	public byte byProgramNum
	{
		[Token(Token = "0x6001781")]
		[Address(RVA = "0x997950", Offset = "0x997950", VA = "0x997950")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x600176F")]
	[Address(RVA = "0x9970A4", Offset = "0x9970A4", VA = "0x9970A4")]
	internal AkMIDIEventCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001770")]
	[Address(RVA = "0x997138", Offset = "0x997138", VA = "0x997138")]
	internal static IntPtr getCPtr(AkMIDIEventCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001771")]
	[Address(RVA = "0x997188", Offset = "0x997188", VA = "0x997188", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001772")]
	[Address(RVA = "0x997214", Offset = "0x997214", VA = "0x997214", Slot = "1")]
	~AkMIDIEventCallbackInfo()
	{
	}

	[Token(Token = "0x6001773")]
	[Address(RVA = "0x997288", Offset = "0x997288", VA = "0x997288", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6001782")]
	[Address(RVA = "0x9979BC", Offset = "0x9979BC", VA = "0x9979BC")]
	public AkMIDIEventCallbackInfo()
	{
	}
}
[Token(Token = "0x2000255")]
public enum AkMIDIEventTypes
{
	[Token(Token = "0x40011BE")]
	NOTE_OFF = 128,
	[Token(Token = "0x40011BF")]
	NOTE_ON = 144,
	[Token(Token = "0x40011C0")]
	NOTE_AFTERTOUCH = 160,
	[Token(Token = "0x40011C1")]
	CONTROLLER = 176,
	[Token(Token = "0x40011C2")]
	PROGRAM_CHANGE = 192,
	[Token(Token = "0x40011C3")]
	CHANNEL_AFTERTOUCH = 208,
	[Token(Token = "0x40011C4")]
	PITCH_BEND = 224,
	[Token(Token = "0x40011C5")]
	SYSEX = 240,
	[Token(Token = "0x40011C6")]
	ESCAPE = 247,
	[Token(Token = "0x40011C7")]
	META = 255
}
[Token(Token = "0x2000256")]
public class AkMIDIPost : AkMIDIEvent
{
	[Token(Token = "0x40011C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x170001FB")]
	public uint uOffset
	{
		[Token(Token = "0x6001789")]
		[Address(RVA = "0x997DE0", Offset = "0x997DE0", VA = "0x997DE0")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001788")]
		[Address(RVA = "0x997D64", Offset = "0x997D64", VA = "0x997D64")]
		set
		{
		}
	}

	[Token(Token = "0x6001783")]
	[Address(RVA = "0x997A30", Offset = "0x997A30", VA = "0x997A30")]
	internal AkMIDIPost(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001784")]
	[Address(RVA = "0x997ACC", Offset = "0x997ACC", VA = "0x997ACC")]
	internal static IntPtr getCPtr(AkMIDIPost obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001785")]
	[Address(RVA = "0x997B1C", Offset = "0x997B1C", VA = "0x997B1C", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001786")]
	[Address(RVA = "0x997BB0", Offset = "0x997BB0", VA = "0x997BB0", Slot = "1")]
	~AkMIDIPost()
	{
	}

	[Token(Token = "0x6001787")]
	[Address(RVA = "0x997C1C", Offset = "0x997C1C", VA = "0x997C1C", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x600178A")]
	[Address(RVA = "0x997E4C", Offset = "0x997E4C", VA = "0x997E4C")]
	public AKRESULT PostOnEvent(uint in_eventID, GameObject in_gameObjectID, uint in_uNumPosts)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600178B")]
	[Address(RVA = "0x998008", Offset = "0x998008", VA = "0x998008")]
	public void Clone(AkMIDIPost other)
	{
	}

	[Token(Token = "0x600178C")]
	[Address(RVA = "0x9980B0", Offset = "0x9980B0", VA = "0x9980B0")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x600178D")]
	[Address(RVA = "0x998110", Offset = "0x998110", VA = "0x998110")]
	public AkMIDIPost()
	{
	}
}
[Token(Token = "0x2000257")]
public enum AkMonitorErrorCode
{
	[Token(Token = "0x40011CA")]
	ErrorCode_NoError,
	[Token(Token = "0x40011CB")]
	ErrorCode_FileNotFound,
	[Token(Token = "0x40011CC")]
	ErrorCode_CannotOpenFile,
	[Token(Token = "0x40011CD")]
	ErrorCode_CannotStartStreamNoMemory,
	[Token(Token = "0x40011CE")]
	ErrorCode_IODevice,
	[Token(Token = "0x40011CF")]
	ErrorCode_IncompatibleIOSettings,
	[Token(Token = "0x40011D0")]
	ErrorCode_PluginUnsupportedChannelConfiguration,
	[Token(Token = "0x40011D1")]
	ErrorCode_PluginMediaUnavailable,
	[Token(Token = "0x40011D2")]
	ErrorCode_PluginInitialisationFailed,
	[Token(Token = "0x40011D3")]
	ErrorCode_PluginProcessingFailed,
	[Token(Token = "0x40011D4")]
	ErrorCode_PluginExecutionInvalid,
	[Token(Token = "0x40011D5")]
	ErrorCode_PluginAllocationFailed,
	[Token(Token = "0x40011D6")]
	ErrorCode_VorbisRequireSeekTable,
	[Token(Token = "0x40011D7")]
	ErrorCode_VorbisDecodeError,
	[Token(Token = "0x40011D8")]
	ErrorCode_AACDecodeError,
	[Token(Token = "0x40011D9")]
	ErrorCode_xWMACreateDecoderFailed,
	[Token(Token = "0x40011DA")]
	ErrorCode_ATRAC9CreateDecoderFailed,
	[Token(Token = "0x40011DB")]
	ErrorCode_ATRAC9CreateDecoderFailedChShortage,
	[Token(Token = "0x40011DC")]
	ErrorCode_ATRAC9DecodeFailed,
	[Token(Token = "0x40011DD")]
	ErrorCode_ATRAC9ClearContextFailed,
	[Token(Token = "0x40011DE")]
	ErrorCode_ATRAC9LoopSectionTooSmall,
	[Token(Token = "0x40011DF")]
	ErrorCode_InvalidAudioFileHeader,
	[Token(Token = "0x40011E0")]
	ErrorCode_AudioFileHeaderTooLarge,
	[Token(Token = "0x40011E1")]
	ErrorCode_FileTooSmall,
	[Token(Token = "0x40011E2")]
	ErrorCode_TransitionNotAccurateChannel,
	[Token(Token = "0x40011E3")]
	ErrorCode_TransitionNotAccurateStarvation,
	[Token(Token = "0x40011E4")]
	ErrorCode_NothingToPlay,
	[Token(Token = "0x40011E5")]
	ErrorCode_PlayFailed,
	[Token(Token = "0x40011E6")]
	ErrorCode_StingerCouldNotBeScheduled,
	[Token(Token = "0x40011E7")]
	ErrorCode_TooLongSegmentLookAhead,
	[Token(Token = "0x40011E8")]
	ErrorCode_CannotScheduleMusicSwitch,
	[Token(Token = "0x40011E9")]
	ErrorCode_TooManySimultaneousMusicSegments,
	[Token(Token = "0x40011EA")]
	ErrorCode_PlaylistStoppedForEditing,
	[Token(Token = "0x40011EB")]
	ErrorCode_MusicClipsRescheduledAfterTrackEdit,
	[Token(Token = "0x40011EC")]
	ErrorCode_CannotPlaySource_Create,
	[Token(Token = "0x40011ED")]
	ErrorCode_CannotPlaySource_VirtualOff,
	[Token(Token = "0x40011EE")]
	ErrorCode_CannotPlaySource_TimeSkip,
	[Token(Token = "0x40011EF")]
	ErrorCode_CannotPlaySource_InconsistentState,
	[Token(Token = "0x40011F0")]
	ErrorCode_MediaNotLoaded,
	[Token(Token = "0x40011F1")]
	ErrorCode_VoiceStarving,
	[Token(Token = "0x40011F2")]
	ErrorCode_StreamingSourceStarving,
	[Token(Token = "0x40011F3")]
	ErrorCode_XMADecoderSourceStarving,
	[Token(Token = "0x40011F4")]
	ErrorCode_XMADecodingError,
	[Token(Token = "0x40011F5")]
	ErrorCode_InvalidXMAData,
	[Token(Token = "0x40011F6")]
	ErrorCode_PluginNotRegistered,
	[Token(Token = "0x40011F7")]
	ErrorCode_CodecNotRegistered,
	[Token(Token = "0x40011F8")]
	ErrorCode_PluginVersionMismatch,
	[Token(Token = "0x40011F9")]
	ErrorCode_EventIDNotFound,
	[Token(Token = "0x40011FA")]
	ErrorCode_InvalidGroupID,
	[Token(Token = "0x40011FB")]
	ErrorCode_SelectedChildNotAvailable,
	[Token(Token = "0x40011FC")]
	ErrorCode_SelectedNodeNotAvailable,
	[Token(Token = "0x40011FD")]
	ErrorCode_SelectedMediaNotAvailable,
	[Token(Token = "0x40011FE")]
	ErrorCode_NoValidSwitch,
	[Token(Token = "0x40011FF")]
	ErrorCode_SelectedNodeNotAvailablePlay,
	[Token(Token = "0x4001200")]
	ErrorCode_FeedbackVoiceStarving,
	[Token(Token = "0x4001201")]
	ErrorCode_BankLoadFailed,
	[Token(Token = "0x4001202")]
	ErrorCode_BankUnloadFailed,
	[Token(Token = "0x4001203")]
	ErrorCode_ErrorWhileLoadingBank,
	[Token(Token = "0x4001204")]
	ErrorCode_InsufficientSpaceToLoadBank,
	[Token(Token = "0x4001205")]
	ErrorCode_LowerEngineCommandListFull,
	[Token(Token = "0x4001206")]
	ErrorCode_SeekNoMarker,
	[Token(Token = "0x4001207")]
	ErrorCode_CannotSeekContinuous,
	[Token(Token = "0x4001208")]
	ErrorCode_SeekAfterEof,
	[Token(Token = "0x4001209")]
	ErrorCode_UnknownGameObject,
	[Token(Token = "0x400120A")]
	ErrorCode_UnknownEmitter,
	[Token(Token = "0x400120B")]
	ErrorCode_UnknownListener,
	[Token(Token = "0x400120C")]
	ErrorCode_GameObjectIsNotListener,
	[Token(Token = "0x400120D")]
	ErrorCode_GameObjectIsNotEmitter,
	[Token(Token = "0x400120E")]
	ErrorCode_UnknownGameObjectEvent,
	[Token(Token = "0x400120F")]
	ErrorCode_GameObjectIsNotEmitterEvent,
	[Token(Token = "0x4001210")]
	ErrorCode_ExternalSourceNotResolved,
	[Token(Token = "0x4001211")]
	ErrorCode_FileFormatMismatch,
	[Token(Token = "0x4001212")]
	ErrorCode_CommandQueueFull,
	[Token(Token = "0x4001213")]
	ErrorCode_CommandTooLarge,
	[Token(Token = "0x4001214")]
	ErrorCode_XMACreateDecoderLimitReached,
	[Token(Token = "0x4001215")]
	ErrorCode_XMAStreamBufferTooSmall,
	[Token(Token = "0x4001216")]
	ErrorCode_ModulatorScopeError_Inst,
	[Token(Token = "0x4001217")]
	ErrorCode_ModulatorScopeError_Obj,
	[Token(Token = "0x4001218")]
	ErrorCode_SeekAfterEndOfPlaylist,
	[Token(Token = "0x4001219")]
	ErrorCode_OpusRequireSeekTable,
	[Token(Token = "0x400121A")]
	ErrorCode_OpusDecodeError,
	[Token(Token = "0x400121B")]
	ErrorCode_OpusCreateDecoderFailed,
	[Token(Token = "0x400121C")]
	ErrorCode_SourcePluginNotFound,
	[Token(Token = "0x400121D")]
	ErrorCode_VirtualVoiceLimit,
	[Token(Token = "0x400121E")]
	ErrorCode_AudioDeviceShareSetNotFound,
	[Token(Token = "0x400121F")]
	ErrorCode_NotEnoughMemoryToStart,
	[Token(Token = "0x4001220")]
	ErrorCode_UnkownOpusError,
	[Token(Token = "0x4001221")]
	ErrorCode_AudioDeviceInitFailure,
	[Token(Token = "0x4001222")]
	ErrorCode_AudioDeviceRemoveFailure,
	[Token(Token = "0x4001223")]
	ErrorCode_AudioDeviceNotFound,
	[Token(Token = "0x4001224")]
	ErrorCode_AudioDeviceNotValid,
	[Token(Token = "0x4001225")]
	ErrorCode_MediaDuplicationLength,
	[Token(Token = "0x4001226")]
	Num_ErrorCodes
}
[Token(Token = "0x2000258")]
public enum AkMonitorErrorLevel
{
	[Token(Token = "0x4001228")]
	ErrorLevel_Message = 1,
	[Token(Token = "0x4001229")]
	ErrorLevel_Error,
	[Token(Token = "0x400122A")]
	ErrorLevel_All
}
[Token(Token = "0x2000259")]
public class AkMonitoringCallbackInfo : IDisposable
{
	[Token(Token = "0x400122B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400122C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001FC")]
	public AkMonitorErrorCode errorCode
	{
		[Token(Token = "0x6001793")]
		[Address(RVA = "0x999D04", Offset = "0x999D04", VA = "0x999D04")]
		get
		{
			return default(AkMonitorErrorCode);
		}
	}

	[Token(Token = "0x170001FD")]
	public AkMonitorErrorLevel errorLevel
	{
		[Token(Token = "0x6001794")]
		[Address(RVA = "0x999D70", Offset = "0x999D70", VA = "0x999D70")]
		get
		{
			return default(AkMonitorErrorLevel);
		}
	}

	[Token(Token = "0x170001FE")]
	public uint playingID
	{
		[Token(Token = "0x6001795")]
		[Address(RVA = "0x999DDC", Offset = "0x999DDC", VA = "0x999DDC")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170001FF")]
	public ulong gameObjID
	{
		[Token(Token = "0x6001796")]
		[Address(RVA = "0x999E48", Offset = "0x999E48", VA = "0x999E48")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x17000200")]
	public string message
	{
		[Token(Token = "0x6001797")]
		[Address(RVA = "0x999EB4", Offset = "0x999EB4", VA = "0x999EB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600178E")]
	[Address(RVA = "0x999A8C", Offset = "0x999A8C", VA = "0x999A8C")]
	internal AkMonitoringCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600178F")]
	[Address(RVA = "0x999ACC", Offset = "0x999ACC", VA = "0x999ACC")]
	internal static IntPtr getCPtr(AkMonitoringCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001790")]
	[Address(RVA = "0x999B1C", Offset = "0x999B1C", VA = "0x999B1C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001791")]
	[Address(RVA = "0x999B50", Offset = "0x999B50", VA = "0x999B50", Slot = "1")]
	~AkMonitoringCallbackInfo()
	{
	}

	[Token(Token = "0x6001792")]
	[Address(RVA = "0x999BC4", Offset = "0x999BC4", VA = "0x999BC4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001798")]
	[Address(RVA = "0x999F50", Offset = "0x999F50", VA = "0x999F50")]
	public AkMonitoringCallbackInfo()
	{
	}
}
[Token(Token = "0x200025A")]
public enum AkMultiPositionType
{
	[Token(Token = "0x400122E")]
	MultiPositionType_SingleSource,
	[Token(Token = "0x400122F")]
	MultiPositionType_MultiSources,
	[Token(Token = "0x4001230")]
	MultiPositionType_MultiDirections
}
[Token(Token = "0x200025B")]
public class AkMusicPlaylistCallbackInfo : AkEventCallbackInfo
{
	[Token(Token = "0x4001231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr swigCPtr;

	[Token(Token = "0x17000201")]
	public uint playlistID
	{
		[Token(Token = "0x600179E")]
		[Address(RVA = "0x99A37C", Offset = "0x99A37C", VA = "0x99A37C")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000202")]
	public uint uNumPlaylistItems
	{
		[Token(Token = "0x600179F")]
		[Address(RVA = "0x99A3E8", Offset = "0x99A3E8", VA = "0x99A3E8")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000203")]
	public uint uPlaylistSelection
	{
		[Token(Token = "0x60017A0")]
		[Address(RVA = "0x99A454", Offset = "0x99A454", VA = "0x99A454")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000204")]
	public uint uPlaylistItemDone
	{
		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x99A4C0", Offset = "0x99A4C0", VA = "0x99A4C0")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x6001799")]
	[Address(RVA = "0x99A04C", Offset = "0x99A04C", VA = "0x99A04C")]
	internal AkMusicPlaylistCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600179A")]
	[Address(RVA = "0x99A0E0", Offset = "0x99A0E0", VA = "0x99A0E0")]
	internal static IntPtr getCPtr(AkMusicPlaylistCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600179B")]
	[Address(RVA = "0x99A130", Offset = "0x99A130", VA = "0x99A130", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600179C")]
	[Address(RVA = "0x99A1BC", Offset = "0x99A1BC", VA = "0x99A1BC", Slot = "1")]
	~AkMusicPlaylistCallbackInfo()
	{
	}

	[Token(Token = "0x600179D")]
	[Address(RVA = "0x99A230", Offset = "0x99A230", VA = "0x99A230", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60017A2")]
	[Address(RVA = "0x99A52C", Offset = "0x99A52C", VA = "0x99A52C")]
	public AkMusicPlaylistCallbackInfo()
	{
	}
}
[Token(Token = "0x200025C")]
public class AkMusicSettings : IDisposable
{
	[Token(Token = "0x4001232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000205")]
	public float fStreamingLookAheadRatio
	{
		[Token(Token = "0x60017A9")]
		[Address(RVA = "0x99A804", Offset = "0x99A804", VA = "0x99A804")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60017A8")]
		[Address(RVA = "0x99A788", Offset = "0x99A788", VA = "0x99A788")]
		set
		{
		}
	}

	[Token(Token = "0x60017A3")]
	[Address(RVA = "0x991EB8", Offset = "0x991EB8", VA = "0x991EB8")]
	internal AkMusicSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60017A4")]
	[Address(RVA = "0x991DB8", Offset = "0x991DB8", VA = "0x991DB8")]
	internal static IntPtr getCPtr(AkMusicSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60017A5")]
	[Address(RVA = "0x99A5A0", Offset = "0x99A5A0", VA = "0x99A5A0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60017A6")]
	[Address(RVA = "0x99A5D4", Offset = "0x99A5D4", VA = "0x99A5D4", Slot = "1")]
	~AkMusicSettings()
	{
	}

	[Token(Token = "0x60017A7")]
	[Address(RVA = "0x99A648", Offset = "0x99A648", VA = "0x99A648", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60017AA")]
	[Address(RVA = "0x99A870", Offset = "0x99A870", VA = "0x99A870")]
	public AkMusicSettings()
	{
	}
}
[Token(Token = "0x200025D")]
public class AkMusicSyncCallbackInfo : AkCallbackInfo
{
	[Token(Token = "0x4001234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x17000206")]
	public uint playingID
	{
		[Token(Token = "0x60017B0")]
		[Address(RVA = "0x99AC24", Offset = "0x99AC24", VA = "0x99AC24")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000207")]
	public int segmentInfo_iCurrentPosition
	{
		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x99AC90", Offset = "0x99AC90", VA = "0x99AC90")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000208")]
	public int segmentInfo_iPreEntryDuration
	{
		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x99ACFC", Offset = "0x99ACFC", VA = "0x99ACFC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000209")]
	public int segmentInfo_iActiveDuration
	{
		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x99AD68", Offset = "0x99AD68", VA = "0x99AD68")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700020A")]
	public int segmentInfo_iPostExitDuration
	{
		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x99ADD4", Offset = "0x99ADD4", VA = "0x99ADD4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700020B")]
	public int segmentInfo_iRemainingLookAheadTime
	{
		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x99AE40", Offset = "0x99AE40", VA = "0x99AE40")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700020C")]
	public float segmentInfo_fBeatDuration
	{
		[Token(Token = "0x60017B6")]
		[Address(RVA = "0x99AEAC", Offset = "0x99AEAC", VA = "0x99AEAC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700020D")]
	public float segmentInfo_fBarDuration
	{
		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x99AF18", Offset = "0x99AF18", VA = "0x99AF18")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700020E")]
	public float segmentInfo_fGridDuration
	{
		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x99AF84", Offset = "0x99AF84", VA = "0x99AF84")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700020F")]
	public float segmentInfo_fGridOffset
	{
		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x99AFF0", Offset = "0x99AFF0", VA = "0x99AFF0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000210")]
	public AkCallbackType musicSyncType
	{
		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x99B05C", Offset = "0x99B05C", VA = "0x99B05C")]
		get
		{
			return default(AkCallbackType);
		}
	}

	[Token(Token = "0x17000211")]
	public string userCueName
	{
		[Token(Token = "0x60017BB")]
		[Address(RVA = "0x99B0C8", Offset = "0x99B0C8", VA = "0x99B0C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60017AB")]
	[Address(RVA = "0x99A8F4", Offset = "0x99A8F4", VA = "0x99A8F4")]
	internal AkMusicSyncCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60017AC")]
	[Address(RVA = "0x99A988", Offset = "0x99A988", VA = "0x99A988")]
	internal static IntPtr getCPtr(AkMusicSyncCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60017AD")]
	[Address(RVA = "0x99A9D8", Offset = "0x99A9D8", VA = "0x99A9D8", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60017AE")]
	[Address(RVA = "0x99AA64", Offset = "0x99AA64", VA = "0x99AA64", Slot = "1")]
	~AkMusicSyncCallbackInfo()
	{
	}

	[Token(Token = "0x60017AF")]
	[Address(RVA = "0x99AAD8", Offset = "0x99AAD8", VA = "0x99AAD8", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60017BC")]
	[Address(RVA = "0x99B164", Offset = "0x99B164", VA = "0x99B164")]
	public AkMusicSyncCallbackInfo()
	{
	}
}
[Token(Token = "0x200025E")]
public class AkObjectInfo : IDisposable
{
	[Token(Token = "0x4001235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000212")]
	public uint objID
	{
		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x99B4CC", Offset = "0x99B4CC", VA = "0x99B4CC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x99B450", Offset = "0x99B450", VA = "0x99B450")]
		set
		{
		}
	}

	[Token(Token = "0x17000213")]
	public uint parentID
	{
		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x99B5B4", Offset = "0x99B5B4", VA = "0x99B5B4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x99B538", Offset = "0x99B538", VA = "0x99B538")]
		set
		{
		}
	}

	[Token(Token = "0x17000214")]
	public int iDepth
	{
		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x99B69C", Offset = "0x99B69C", VA = "0x99B69C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x99B620", Offset = "0x99B620", VA = "0x99B620")]
		set
		{
		}
	}

	[Token(Token = "0x60017BD")]
	[Address(RVA = "0x99B1D8", Offset = "0x99B1D8", VA = "0x99B1D8")]
	internal AkObjectInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60017BE")]
	[Address(RVA = "0x99B218", Offset = "0x99B218", VA = "0x99B218")]
	internal static IntPtr getCPtr(AkObjectInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60017BF")]
	[Address(RVA = "0x99B268", Offset = "0x99B268", VA = "0x99B268", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60017C0")]
	[Address(RVA = "0x99B29C", Offset = "0x99B29C", VA = "0x99B29C", Slot = "1")]
	~AkObjectInfo()
	{
	}

	[Token(Token = "0x60017C1")]
	[Address(RVA = "0x99B310", Offset = "0x99B310", VA = "0x99B310", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60017C8")]
	[Address(RVA = "0x99B708", Offset = "0x99B708", VA = "0x99B708")]
	public void Clear()
	{
	}

	[Token(Token = "0x60017C9")]
	[Address(RVA = "0x99B774", Offset = "0x99B774", VA = "0x99B774")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60017CA")]
	[Address(RVA = "0x99B7D4", Offset = "0x99B7D4", VA = "0x99B7D4")]
	public void Clone(AkObjectInfo other)
	{
	}

	[Token(Token = "0x60017CB")]
	[Address(RVA = "0x99B87C", Offset = "0x99B87C", VA = "0x99B87C")]
	public AkObjectInfo()
	{
	}
}
[Token(Token = "0x200025F")]
public class AkObstructionOcclusionValues : IDisposable
{
	[Token(Token = "0x4001237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000215")]
	public float occlusion
	{
		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x99C78C", Offset = "0x99C78C", VA = "0x99C78C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x99C710", Offset = "0x99C710", VA = "0x99C710")]
		set
		{
		}
	}

	[Token(Token = "0x17000216")]
	public float obstruction
	{
		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x99C874", Offset = "0x99C874", VA = "0x99C874")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60017D3")]
		[Address(RVA = "0x99C7F8", Offset = "0x99C7F8", VA = "0x99C7F8")]
		set
		{
		}
	}

	[Token(Token = "0x60017CC")]
	[Address(RVA = "0x99C498", Offset = "0x99C498", VA = "0x99C498")]
	internal AkObstructionOcclusionValues(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60017CD")]
	[Address(RVA = "0x99C4D8", Offset = "0x99C4D8", VA = "0x99C4D8")]
	internal static IntPtr getCPtr(AkObstructionOcclusionValues obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60017CE")]
	[Address(RVA = "0x99C528", Offset = "0x99C528", VA = "0x99C528", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60017CF")]
	[Address(RVA = "0x99C55C", Offset = "0x99C55C", VA = "0x99C55C", Slot = "1")]
	~AkObstructionOcclusionValues()
	{
	}

	[Token(Token = "0x60017D0")]
	[Address(RVA = "0x99C5D0", Offset = "0x99C5D0", VA = "0x99C5D0", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60017D5")]
	[Address(RVA = "0x99C8E0", Offset = "0x99C8E0", VA = "0x99C8E0")]
	public void Clear()
	{
	}

	[Token(Token = "0x60017D6")]
	[Address(RVA = "0x99C94C", Offset = "0x99C94C", VA = "0x99C94C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60017D7")]
	[Address(RVA = "0x99C9AC", Offset = "0x99C9AC", VA = "0x99C9AC")]
	public void Clone(AkObstructionOcclusionValues other)
	{
	}

	[Token(Token = "0x60017D8")]
	[Address(RVA = "0x99CA54", Offset = "0x99CA54", VA = "0x99CA54")]
	public AkObstructionOcclusionValues()
	{
	}
}
[Token(Token = "0x2000260")]
public class AkOutputSettings : IDisposable
{
	[Token(Token = "0x4001239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400123A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000217")]
	public uint audioDeviceShareset
	{
		[Token(Token = "0x60017E4")]
		[Address(RVA = "0x99D2AC", Offset = "0x99D2AC", VA = "0x99D2AC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60017E3")]
		[Address(RVA = "0x99D230", Offset = "0x99D230", VA = "0x99D230")]
		set
		{
		}
	}

	[Token(Token = "0x17000218")]
	public uint idDevice
	{
		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x99D394", Offset = "0x99D394", VA = "0x99D394")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60017E5")]
		[Address(RVA = "0x99D318", Offset = "0x99D318", VA = "0x99D318")]
		set
		{
		}
	}

	[Token(Token = "0x17000219")]
	public AkPanningRule ePanningRule
	{
		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x99D47C", Offset = "0x99D47C", VA = "0x99D47C")]
		get
		{
			return default(AkPanningRule);
		}
		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x99D400", Offset = "0x99D400", VA = "0x99D400")]
		set
		{
		}
	}

	[Token(Token = "0x1700021A")]
	public AkChannelConfig channelConfig
	{
		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x99D578", Offset = "0x99D578", VA = "0x99D578")]
		get
		{
			return null;
		}
		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x99D4E8", Offset = "0x99D4E8", VA = "0x99D4E8")]
		set
		{
		}
	}

	[Token(Token = "0x60017D9")]
	[Address(RVA = "0x990C8C", Offset = "0x990C8C", VA = "0x990C8C")]
	internal AkOutputSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60017DA")]
	[Address(RVA = "0x990B8C", Offset = "0x990B8C", VA = "0x990B8C")]
	internal static IntPtr getCPtr(AkOutputSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60017DB")]
	[Address(RVA = "0x99CD0C", Offset = "0x99CD0C", VA = "0x99CD0C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60017DC")]
	[Address(RVA = "0x99CD40", Offset = "0x99CD40", VA = "0x99CD40", Slot = "1")]
	~AkOutputSettings()
	{
	}

	[Token(Token = "0x60017DD")]
	[Address(RVA = "0x99CDB4", Offset = "0x99CDB4", VA = "0x99CDB4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60017DE")]
	[Address(RVA = "0x99CEF4", Offset = "0x99CEF4", VA = "0x99CEF4")]
	public AkOutputSettings()
	{
	}

	[Token(Token = "0x60017DF")]
	[Address(RVA = "0x99CF78", Offset = "0x99CF78", VA = "0x99CF78")]
	public AkOutputSettings(string in_szDeviceShareSet, uint in_idDevice, AkChannelConfig in_channelConfig, AkPanningRule in_ePanning)
	{
	}

	[Token(Token = "0x60017E0")]
	[Address(RVA = "0x99D040", Offset = "0x99D040", VA = "0x99D040")]
	public AkOutputSettings(string in_szDeviceShareSet, uint in_idDevice, AkChannelConfig in_channelConfig)
	{
	}

	[Token(Token = "0x60017E1")]
	[Address(RVA = "0x99D100", Offset = "0x99D100", VA = "0x99D100")]
	public AkOutputSettings(string in_szDeviceShareSet, uint in_idDevice)
	{
	}

	[Token(Token = "0x60017E2")]
	[Address(RVA = "0x99D19C", Offset = "0x99D19C", VA = "0x99D19C")]
	public AkOutputSettings(string in_szDeviceShareSet)
	{
	}
}
[Token(Token = "0x2000261")]
public enum AkPanningRule
{
	[Token(Token = "0x400123C")]
	AkPanningRule_Speakers,
	[Token(Token = "0x400123D")]
	AkPanningRule_Headphones
}
[Token(Token = "0x2000262")]
public class AkPathParams : IDisposable
{
	[Token(Token = "0x400123E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700021B")]
	public AkVector listenerPos
	{
		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x99D930", Offset = "0x99D930", VA = "0x99D930")]
		get
		{
			return null;
		}
		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x99D8A0", Offset = "0x99D8A0", VA = "0x99D8A0")]
		set
		{
		}
	}

	[Token(Token = "0x1700021C")]
	public AkVector emitterPos
	{
		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x99DA70", Offset = "0x99DA70", VA = "0x99DA70")]
		get
		{
			return null;
		}
		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x99D9E0", Offset = "0x99D9E0", VA = "0x99D9E0")]
		set
		{
		}
	}

	[Token(Token = "0x1700021D")]
	public uint numValidPaths
	{
		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x99DB9C", Offset = "0x99DB9C", VA = "0x99DB9C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x99DB20", Offset = "0x99DB20", VA = "0x99DB20")]
		set
		{
		}
	}

	[Token(Token = "0x60017EB")]
	[Address(RVA = "0x99D628", Offset = "0x99D628", VA = "0x99D628")]
	internal AkPathParams(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60017EC")]
	[Address(RVA = "0x99D668", Offset = "0x99D668", VA = "0x99D668")]
	internal static IntPtr getCPtr(AkPathParams obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60017ED")]
	[Address(RVA = "0x99D6B8", Offset = "0x99D6B8", VA = "0x99D6B8", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60017EE")]
	[Address(RVA = "0x99D6EC", Offset = "0x99D6EC", VA = "0x99D6EC", Slot = "1")]
	~AkPathParams()
	{
	}

	[Token(Token = "0x60017EF")]
	[Address(RVA = "0x99D760", Offset = "0x99D760", VA = "0x99D760", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60017F6")]
	[Address(RVA = "0x99DC08", Offset = "0x99DC08", VA = "0x99DC08")]
	public AkPathParams()
	{
	}
}
[Token(Token = "0x2000263")]
public class AkPlaylist : AkPlaylistArray
{
	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x60017F7")]
	[Address(RVA = "0x99EA50", Offset = "0x99EA50", VA = "0x99EA50")]
	internal AkPlaylist(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60017F8")]
	[Address(RVA = "0x99EB2C", Offset = "0x99EB2C", VA = "0x99EB2C")]
	internal static IntPtr getCPtr(AkPlaylist obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60017F9")]
	[Address(RVA = "0x99EB7C", Offset = "0x99EB7C", VA = "0x99EB7C", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60017FA")]
	[Address(RVA = "0x99EC44", Offset = "0x99EC44", VA = "0x99EC44", Slot = "1")]
	~AkPlaylist()
	{
	}

	[Token(Token = "0x60017FB")]
	[Address(RVA = "0x99ED24", Offset = "0x99ED24", VA = "0x99ED24", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60017FC")]
	[Address(RVA = "0x99EFAC", Offset = "0x99EFAC", VA = "0x99EFAC")]
	public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, IntPtr in_pCustomInfo, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60017FD")]
	[Address(RVA = "0x99F068", Offset = "0x99F068", VA = "0x99F068")]
	public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, IntPtr in_pCustomInfo, uint in_cExternals)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60017FE")]
	[Address(RVA = "0x99F104", Offset = "0x99F104", VA = "0x99F104")]
	public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, IntPtr in_pCustomInfo)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60017FF")]
	[Address(RVA = "0x99F198", Offset = "0x99F198", VA = "0x99F198")]
	public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001800")]
	[Address(RVA = "0x99F21C", Offset = "0x99F21C", VA = "0x99F21C")]
	public AKRESULT Enqueue(uint in_audioNodeID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001801")]
	[Address(RVA = "0x99F298", Offset = "0x99F298", VA = "0x99F298")]
	public AkPlaylist()
	{
	}
}
[Token(Token = "0x2000264")]
public class AkPlaylistArray : IDisposable
{
	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x6001802")]
	[Address(RVA = "0x99EAEC", Offset = "0x99EAEC", VA = "0x99EAEC")]
	internal AkPlaylistArray(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001803")]
	[Address(RVA = "0x99F30C", Offset = "0x99F30C", VA = "0x99F30C")]
	internal static IntPtr getCPtr(AkPlaylistArray obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001804")]
	[Address(RVA = "0x99EC10", Offset = "0x99EC10", VA = "0x99EC10", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001805")]
	[Address(RVA = "0x99ECB0", Offset = "0x99ECB0", VA = "0x99ECB0", Slot = "1")]
	~AkPlaylistArray()
	{
	}

	[Token(Token = "0x6001806")]
	[Address(RVA = "0x99EE6C", Offset = "0x99EE6C", VA = "0x99EE6C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001807")]
	[Address(RVA = "0x99F35C", Offset = "0x99F35C", VA = "0x99F35C")]
	public AkPlaylistArray()
	{
	}

	[Token(Token = "0x6001808")]
	[Address(RVA = "0x99F3E0", Offset = "0x99F3E0", VA = "0x99F3E0")]
	public AkIterator Begin()
	{
		return null;
	}

	[Token(Token = "0x6001809")]
	[Address(RVA = "0x99F484", Offset = "0x99F484", VA = "0x99F484")]
	public AkIterator End()
	{
		return null;
	}

	[Token(Token = "0x600180A")]
	[Address(RVA = "0x99F528", Offset = "0x99F528", VA = "0x99F528")]
	public AkIterator FindEx(AkPlaylistItem in_Item)
	{
		return null;
	}

	[Token(Token = "0x600180B")]
	[Address(RVA = "0x99F608", Offset = "0x99F608", VA = "0x99F608")]
	public AkIterator Erase(AkIterator in_rIter)
	{
		return null;
	}

	[Token(Token = "0x600180C")]
	[Address(RVA = "0x99F6E8", Offset = "0x99F6E8", VA = "0x99F6E8")]
	public void Erase(uint in_uIndex)
	{
	}

	[Token(Token = "0x600180D")]
	[Address(RVA = "0x99F764", Offset = "0x99F764", VA = "0x99F764")]
	public AkIterator EraseSwap(AkIterator in_rIter)
	{
		return null;
	}

	[Token(Token = "0x600180E")]
	[Address(RVA = "0x99F844", Offset = "0x99F844", VA = "0x99F844")]
	public AKRESULT Reserve(uint in_ulReserve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600180F")]
	[Address(RVA = "0x99F8C0", Offset = "0x99F8C0", VA = "0x99F8C0")]
	public uint Reserved()
	{
		return default(uint);
	}

	[Token(Token = "0x6001810")]
	[Address(RVA = "0x99F92C", Offset = "0x99F92C", VA = "0x99F92C")]
	public void Term()
	{
	}

	[Token(Token = "0x6001811")]
	[Address(RVA = "0x99F998", Offset = "0x99F998", VA = "0x99F998")]
	public uint Length()
	{
		return default(uint);
	}

	[Token(Token = "0x6001812")]
	[Address(RVA = "0x99FA04", Offset = "0x99FA04", VA = "0x99FA04")]
	public AkPlaylistItem Data()
	{
		return null;
	}

	[Token(Token = "0x6001813")]
	[Address(RVA = "0x99FAB4", Offset = "0x99FAB4", VA = "0x99FAB4")]
	public bool IsEmpty()
	{
		return default(bool);
	}

	[Token(Token = "0x6001814")]
	[Address(RVA = "0x99FB20", Offset = "0x99FB20", VA = "0x99FB20")]
	public AkPlaylistItem Exists(AkPlaylistItem in_Item)
	{
		return null;
	}

	[Token(Token = "0x6001815")]
	[Address(RVA = "0x99FC0C", Offset = "0x99FC0C", VA = "0x99FC0C")]
	public AkPlaylistItem AddLast()
	{
		return null;
	}

	[Token(Token = "0x6001816")]
	[Address(RVA = "0x99FCBC", Offset = "0x99FCBC", VA = "0x99FCBC")]
	public AkPlaylistItem AddLast(AkPlaylistItem in_rItem)
	{
		return null;
	}

	[Token(Token = "0x6001817")]
	[Address(RVA = "0x99FDA8", Offset = "0x99FDA8", VA = "0x99FDA8")]
	public AkPlaylistItem Last()
	{
		return null;
	}

	[Token(Token = "0x6001818")]
	[Address(RVA = "0x99FE48", Offset = "0x99FE48", VA = "0x99FE48")]
	public void RemoveLast()
	{
	}

	[Token(Token = "0x6001819")]
	[Address(RVA = "0x99FEB4", Offset = "0x99FEB4", VA = "0x99FEB4")]
	public AKRESULT Remove(AkPlaylistItem in_rItem)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600181A")]
	[Address(RVA = "0x99FF5C", Offset = "0x99FF5C", VA = "0x99FF5C")]
	public AKRESULT RemoveSwap(AkPlaylistItem in_rItem)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600181B")]
	[Address(RVA = "0x9A0004", Offset = "0x9A0004", VA = "0x9A0004")]
	public void RemoveAll()
	{
	}

	[Token(Token = "0x600181C")]
	[Address(RVA = "0x9A0070", Offset = "0x9A0070", VA = "0x9A0070")]
	public AkPlaylistItem ItemAtIndex(uint uiIndex)
	{
		return null;
	}

	[Token(Token = "0x600181D")]
	[Address(RVA = "0x9A0120", Offset = "0x9A0120", VA = "0x9A0120")]
	public AkPlaylistItem Insert(uint in_uIndex)
	{
		return null;
	}

	[Token(Token = "0x600181E")]
	[Address(RVA = "0x9A01E0", Offset = "0x9A01E0", VA = "0x9A01E0")]
	public bool GrowArray(uint in_uGrowBy)
	{
		return default(bool);
	}

	[Token(Token = "0x600181F")]
	[Address(RVA = "0x9A025C", Offset = "0x9A025C", VA = "0x9A025C")]
	public bool GrowArray()
	{
		return default(bool);
	}

	[Token(Token = "0x6001820")]
	[Address(RVA = "0x9A02C8", Offset = "0x9A02C8", VA = "0x9A02C8")]
	public bool Resize(uint in_uiSize)
	{
		return default(bool);
	}

	[Token(Token = "0x6001821")]
	[Address(RVA = "0x9A0344", Offset = "0x9A0344", VA = "0x9A0344")]
	public void Transfer(AkPlaylistArray in_rSource)
	{
	}

	[Token(Token = "0x6001822")]
	[Address(RVA = "0x9A03EC", Offset = "0x9A03EC", VA = "0x9A03EC")]
	public AKRESULT Copy(AkPlaylistArray in_rSource)
	{
		return default(AKRESULT);
	}
}
[Token(Token = "0x2000265")]
public class AkPlaylistItem : IDisposable
{
	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700021E")]
	public uint audioNodeID
	{
		[Token(Token = "0x600182E")]
		[Address(RVA = "0x9A0A54", Offset = "0x9A0A54", VA = "0x9A0A54")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600182D")]
		[Address(RVA = "0x9A09D8", Offset = "0x9A09D8", VA = "0x9A09D8")]
		set
		{
		}
	}

	[Token(Token = "0x1700021F")]
	public int msDelay
	{
		[Token(Token = "0x6001830")]
		[Address(RVA = "0x9A0B3C", Offset = "0x9A0B3C", VA = "0x9A0B3C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600182F")]
		[Address(RVA = "0x9A0AC0", Offset = "0x9A0AC0", VA = "0x9A0AC0")]
		set
		{
		}
	}

	[Token(Token = "0x17000220")]
	public IntPtr pCustomInfo
	{
		[Token(Token = "0x6001832")]
		[Address(RVA = "0x9A0C24", Offset = "0x9A0C24", VA = "0x9A0C24")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x6001831")]
		[Address(RVA = "0x9A0BA8", Offset = "0x9A0BA8", VA = "0x9A0BA8")]
		set
		{
		}
	}

	[Token(Token = "0x6001823")]
	[Address(RVA = "0x992BFC", Offset = "0x992BFC", VA = "0x992BFC")]
	internal AkPlaylistItem(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001824")]
	[Address(RVA = "0x992AFC", Offset = "0x992AFC", VA = "0x992AFC")]
	internal static IntPtr getCPtr(AkPlaylistItem obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001825")]
	[Address(RVA = "0x9A0494", Offset = "0x9A0494", VA = "0x9A0494", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001826")]
	[Address(RVA = "0x9A04C8", Offset = "0x9A04C8", VA = "0x9A04C8", Slot = "1")]
	~AkPlaylistItem()
	{
	}

	[Token(Token = "0x6001827")]
	[Address(RVA = "0x9A053C", Offset = "0x9A053C", VA = "0x9A053C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001828")]
	[Address(RVA = "0x9A067C", Offset = "0x9A067C", VA = "0x9A067C")]
	public AkPlaylistItem()
	{
	}

	[Token(Token = "0x6001829")]
	[Address(RVA = "0x9A0700", Offset = "0x9A0700", VA = "0x9A0700")]
	public AkPlaylistItem(AkPlaylistItem in_rCopy)
	{
	}

	[Token(Token = "0x600182A")]
	[Address(RVA = "0x9A07C0", Offset = "0x9A07C0", VA = "0x9A07C0")]
	public AkPlaylistItem Assign(AkPlaylistItem in_rCopy)
	{
		return null;
	}

	[Token(Token = "0x600182B")]
	[Address(RVA = "0x9A089C", Offset = "0x9A089C", VA = "0x9A089C")]
	public bool IsEqualTo(AkPlaylistItem in_rCopy)
	{
		return default(bool);
	}

	[Token(Token = "0x600182C")]
	[Address(RVA = "0x9A0944", Offset = "0x9A0944", VA = "0x9A0944")]
	public AKRESULT SetExternalSources(uint in_nExternalSrc, AkExternalSourceInfoArray in_pExternalSrc)
	{
		return default(AKRESULT);
	}
}
[Token(Token = "0x2000266")]
public enum AkPluginType
{
	[Token(Token = "0x4001246")]
	AkPluginTypeNone = 0,
	[Token(Token = "0x4001247")]
	AkPluginTypeCodec = 1,
	[Token(Token = "0x4001248")]
	AkPluginTypeSource = 2,
	[Token(Token = "0x4001249")]
	AkPluginTypeEffect = 3,
	[Token(Token = "0x400124A")]
	AkPluginTypeMixer = 6,
	[Token(Token = "0x400124B")]
	AkPluginTypeSink = 7,
	[Token(Token = "0x400124C")]
	AkPluginTypeGlobalExtension = 8,
	[Token(Token = "0x400124D")]
	AkPluginTypeMask = 15
}
[Token(Token = "0x2000267")]
public class AkPositioningInfo : IDisposable
{
	[Token(Token = "0x400124E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400124F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000221")]
	public float fCenterPct
	{
		[Token(Token = "0x6001839")]
		[Address(RVA = "0x9A14EC", Offset = "0x9A14EC", VA = "0x9A14EC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001838")]
		[Address(RVA = "0x9A1470", Offset = "0x9A1470", VA = "0x9A1470")]
		set
		{
		}
	}

	[Token(Token = "0x17000222")]
	public AkSpeakerPanningType pannerType
	{
		[Token(Token = "0x600183B")]
		[Address(RVA = "0x9A15D4", Offset = "0x9A15D4", VA = "0x9A15D4")]
		get
		{
			return default(AkSpeakerPanningType);
		}
		[Token(Token = "0x600183A")]
		[Address(RVA = "0x9A1558", Offset = "0x9A1558", VA = "0x9A1558")]
		set
		{
		}
	}

	[Token(Token = "0x17000223")]
	public Ak3DPositionType e3dPositioningType
	{
		[Token(Token = "0x600183D")]
		[Address(RVA = "0x9A16BC", Offset = "0x9A16BC", VA = "0x9A16BC")]
		get
		{
			return default(Ak3DPositionType);
		}
		[Token(Token = "0x600183C")]
		[Address(RVA = "0x9A1640", Offset = "0x9A1640", VA = "0x9A1640")]
		set
		{
		}
	}

	[Token(Token = "0x17000224")]
	public bool bHoldEmitterPosAndOrient
	{
		[Token(Token = "0x600183F")]
		[Address(RVA = "0x9A17A4", Offset = "0x9A17A4", VA = "0x9A17A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600183E")]
		[Address(RVA = "0x9A1728", Offset = "0x9A1728", VA = "0x9A1728")]
		set
		{
		}
	}

	[Token(Token = "0x17000225")]
	public Ak3DSpatializationMode e3DSpatializationMode
	{
		[Token(Token = "0x6001841")]
		[Address(RVA = "0x9A188C", Offset = "0x9A188C", VA = "0x9A188C")]
		get
		{
			return default(Ak3DSpatializationMode);
		}
		[Token(Token = "0x6001840")]
		[Address(RVA = "0x9A1810", Offset = "0x9A1810", VA = "0x9A1810")]
		set
		{
		}
	}

	[Token(Token = "0x17000226")]
	public bool bEnableAttenuation
	{
		[Token(Token = "0x6001843")]
		[Address(RVA = "0x9A1974", Offset = "0x9A1974", VA = "0x9A1974")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001842")]
		[Address(RVA = "0x9A18F8", Offset = "0x9A18F8", VA = "0x9A18F8")]
		set
		{
		}
	}

	[Token(Token = "0x17000227")]
	public bool bUseConeAttenuation
	{
		[Token(Token = "0x6001845")]
		[Address(RVA = "0x9A1A5C", Offset = "0x9A1A5C", VA = "0x9A1A5C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001844")]
		[Address(RVA = "0x9A19E0", Offset = "0x9A19E0", VA = "0x9A19E0")]
		set
		{
		}
	}

	[Token(Token = "0x17000228")]
	public float fInnerAngle
	{
		[Token(Token = "0x6001847")]
		[Address(RVA = "0x9A1B44", Offset = "0x9A1B44", VA = "0x9A1B44")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001846")]
		[Address(RVA = "0x9A1AC8", Offset = "0x9A1AC8", VA = "0x9A1AC8")]
		set
		{
		}
	}

	[Token(Token = "0x17000229")]
	public float fOuterAngle
	{
		[Token(Token = "0x6001849")]
		[Address(RVA = "0x9A1C2C", Offset = "0x9A1C2C", VA = "0x9A1C2C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001848")]
		[Address(RVA = "0x9A1BB0", Offset = "0x9A1BB0", VA = "0x9A1BB0")]
		set
		{
		}
	}

	[Token(Token = "0x1700022A")]
	public float fConeMaxAttenuation
	{
		[Token(Token = "0x600184B")]
		[Address(RVA = "0x9A1D14", Offset = "0x9A1D14", VA = "0x9A1D14")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600184A")]
		[Address(RVA = "0x9A1C98", Offset = "0x9A1C98", VA = "0x9A1C98")]
		set
		{
		}
	}

	[Token(Token = "0x1700022B")]
	public float LPFCone
	{
		[Token(Token = "0x600184D")]
		[Address(RVA = "0x9A1DFC", Offset = "0x9A1DFC", VA = "0x9A1DFC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600184C")]
		[Address(RVA = "0x9A1D80", Offset = "0x9A1D80", VA = "0x9A1D80")]
		set
		{
		}
	}

	[Token(Token = "0x1700022C")]
	public float HPFCone
	{
		[Token(Token = "0x600184F")]
		[Address(RVA = "0x9A1EE4", Offset = "0x9A1EE4", VA = "0x9A1EE4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600184E")]
		[Address(RVA = "0x9A1E68", Offset = "0x9A1E68", VA = "0x9A1E68")]
		set
		{
		}
	}

	[Token(Token = "0x1700022D")]
	public float fMaxDistance
	{
		[Token(Token = "0x6001851")]
		[Address(RVA = "0x9A1FCC", Offset = "0x9A1FCC", VA = "0x9A1FCC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001850")]
		[Address(RVA = "0x9A1F50", Offset = "0x9A1F50", VA = "0x9A1F50")]
		set
		{
		}
	}

	[Token(Token = "0x1700022E")]
	public float fVolDryAtMaxDist
	{
		[Token(Token = "0x6001853")]
		[Address(RVA = "0x9A20B4", Offset = "0x9A20B4", VA = "0x9A20B4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001852")]
		[Address(RVA = "0x9A2038", Offset = "0x9A2038", VA = "0x9A2038")]
		set
		{
		}
	}

	[Token(Token = "0x1700022F")]
	public float fVolAuxGameDefAtMaxDist
	{
		[Token(Token = "0x6001855")]
		[Address(RVA = "0x9A219C", Offset = "0x9A219C", VA = "0x9A219C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001854")]
		[Address(RVA = "0x9A2120", Offset = "0x9A2120", VA = "0x9A2120")]
		set
		{
		}
	}

	[Token(Token = "0x17000230")]
	public float fVolAuxUserDefAtMaxDist
	{
		[Token(Token = "0x6001857")]
		[Address(RVA = "0x9A2284", Offset = "0x9A2284", VA = "0x9A2284")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001856")]
		[Address(RVA = "0x9A2208", Offset = "0x9A2208", VA = "0x9A2208")]
		set
		{
		}
	}

	[Token(Token = "0x17000231")]
	public float LPFValueAtMaxDist
	{
		[Token(Token = "0x6001859")]
		[Address(RVA = "0x9A236C", Offset = "0x9A236C", VA = "0x9A236C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001858")]
		[Address(RVA = "0x9A22F0", Offset = "0x9A22F0", VA = "0x9A22F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000232")]
	public float HPFValueAtMaxDist
	{
		[Token(Token = "0x600185B")]
		[Address(RVA = "0x9A2454", Offset = "0x9A2454", VA = "0x9A2454")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600185A")]
		[Address(RVA = "0x9A23D8", Offset = "0x9A23D8", VA = "0x9A23D8")]
		set
		{
		}
	}

	[Token(Token = "0x6001833")]
	[Address(RVA = "0x9A11F8", Offset = "0x9A11F8", VA = "0x9A11F8")]
	internal AkPositioningInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001834")]
	[Address(RVA = "0x9A1238", Offset = "0x9A1238", VA = "0x9A1238")]
	internal static IntPtr getCPtr(AkPositioningInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001835")]
	[Address(RVA = "0x9A1288", Offset = "0x9A1288", VA = "0x9A1288", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001836")]
	[Address(RVA = "0x9A12BC", Offset = "0x9A12BC", VA = "0x9A12BC", Slot = "1")]
	~AkPositioningInfo()
	{
	}

	[Token(Token = "0x6001837")]
	[Address(RVA = "0x9A1330", Offset = "0x9A1330", VA = "0x9A1330", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600185C")]
	[Address(RVA = "0x9A24C0", Offset = "0x9A24C0", VA = "0x9A24C0")]
	public AkPositioningInfo()
	{
	}
}
[Token(Token = "0x2000268")]
public enum AkPreparationType
{
	[Token(Token = "0x4001251")]
	Preparation_Load,
	[Token(Token = "0x4001252")]
	Preparation_Unload,
	[Token(Token = "0x4001253")]
	Preparation_LoadAndDecode
}
[Token(Token = "0x2000269")]
public enum AkQueryRTPCValue
{
	[Token(Token = "0x4001255")]
	RTPCValue_Default,
	[Token(Token = "0x4001256")]
	RTPCValue_Global,
	[Token(Token = "0x4001257")]
	RTPCValue_GameObject,
	[Token(Token = "0x4001258")]
	RTPCValue_PlayingID,
	[Token(Token = "0x4001259")]
	RTPCValue_Unavailable
}
[Token(Token = "0x200026A")]
public class AkRamp : IDisposable
{
	[Token(Token = "0x400125A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400125B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000233")]
	public float fPrev
	{
		[Token(Token = "0x6001865")]
		[Address(RVA = "0x9A3480", Offset = "0x9A3480", VA = "0x9A3480")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001864")]
		[Address(RVA = "0x9A3404", Offset = "0x9A3404", VA = "0x9A3404")]
		set
		{
		}
	}

	[Token(Token = "0x17000234")]
	public float fNext
	{
		[Token(Token = "0x6001867")]
		[Address(RVA = "0x9A3568", Offset = "0x9A3568", VA = "0x9A3568")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001866")]
		[Address(RVA = "0x9A34EC", Offset = "0x9A34EC", VA = "0x9A34EC")]
		set
		{
		}
	}

	[Token(Token = "0x600185D")]
	[Address(RVA = "0x9A306C", Offset = "0x9A306C", VA = "0x9A306C")]
	internal AkRamp(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600185E")]
	[Address(RVA = "0x9A30AC", Offset = "0x9A30AC", VA = "0x9A30AC")]
	internal static IntPtr getCPtr(AkRamp obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600185F")]
	[Address(RVA = "0x9A30FC", Offset = "0x9A30FC", VA = "0x9A30FC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001860")]
	[Address(RVA = "0x9A3130", Offset = "0x9A3130", VA = "0x9A3130", Slot = "1")]
	~AkRamp()
	{
	}

	[Token(Token = "0x6001861")]
	[Address(RVA = "0x9A31A4", Offset = "0x9A31A4", VA = "0x9A31A4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001862")]
	[Address(RVA = "0x9A32E4", Offset = "0x9A32E4", VA = "0x9A32E4")]
	public AkRamp()
	{
	}

	[Token(Token = "0x6001863")]
	[Address(RVA = "0x9A3368", Offset = "0x9A3368", VA = "0x9A3368")]
	public AkRamp(float in_fPrev, float in_fNext)
	{
	}
}
[Token(Token = "0x200026B")]
public class AkReflectionPathInfo : IDisposable
{
	[Token(Token = "0x400125C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400125D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000235")]
	public AkVector imageSource
	{
		[Token(Token = "0x600186E")]
		[Address(RVA = "0x9A38DC", Offset = "0x9A38DC", VA = "0x9A38DC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600186D")]
		[Address(RVA = "0x9A384C", Offset = "0x9A384C", VA = "0x9A384C")]
		set
		{
		}
	}

	[Token(Token = "0x17000236")]
	public uint numPathPoints
	{
		[Token(Token = "0x6001870")]
		[Address(RVA = "0x9A3A08", Offset = "0x9A3A08", VA = "0x9A3A08")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600186F")]
		[Address(RVA = "0x9A398C", Offset = "0x9A398C", VA = "0x9A398C")]
		set
		{
		}
	}

	[Token(Token = "0x17000237")]
	public uint numReflections
	{
		[Token(Token = "0x6001872")]
		[Address(RVA = "0x9A3AF0", Offset = "0x9A3AF0", VA = "0x9A3AF0")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001871")]
		[Address(RVA = "0x9A3A74", Offset = "0x9A3A74", VA = "0x9A3A74")]
		set
		{
		}
	}

	[Token(Token = "0x17000238")]
	public float level
	{
		[Token(Token = "0x6001874")]
		[Address(RVA = "0x9A3BD8", Offset = "0x9A3BD8", VA = "0x9A3BD8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001873")]
		[Address(RVA = "0x9A3B5C", Offset = "0x9A3B5C", VA = "0x9A3B5C")]
		set
		{
		}
	}

	[Token(Token = "0x17000239")]
	public bool isOccluded
	{
		[Token(Token = "0x6001876")]
		[Address(RVA = "0x9A3CC0", Offset = "0x9A3CC0", VA = "0x9A3CC0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001875")]
		[Address(RVA = "0x9A3C44", Offset = "0x9A3C44", VA = "0x9A3C44")]
		set
		{
		}
	}

	[Token(Token = "0x6001868")]
	[Address(RVA = "0x9A35D4", Offset = "0x9A35D4", VA = "0x9A35D4")]
	internal AkReflectionPathInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001869")]
	[Address(RVA = "0x9A3614", Offset = "0x9A3614", VA = "0x9A3614")]
	internal static IntPtr getCPtr(AkReflectionPathInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600186A")]
	[Address(RVA = "0x9A3664", Offset = "0x9A3664", VA = "0x9A3664", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600186B")]
	[Address(RVA = "0x9A3698", Offset = "0x9A3698", VA = "0x9A3698", Slot = "1")]
	~AkReflectionPathInfo()
	{
	}

	[Token(Token = "0x600186C")]
	[Address(RVA = "0x9A370C", Offset = "0x9A370C", VA = "0x9A370C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001877")]
	[Address(RVA = "0x9A3D2C", Offset = "0x9A3D2C", VA = "0x9A3D2C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x6001878")]
	[Address(RVA = "0x9A3D8C", Offset = "0x9A3D8C", VA = "0x9A3D8C")]
	public AkVector GetPathPoint(uint idx)
	{
		return null;
	}

	[Token(Token = "0x6001879")]
	[Address(RVA = "0x9A3E4C", Offset = "0x9A3E4C", VA = "0x9A3E4C")]
	public AkAcousticSurface GetAcousticSurface(uint idx)
	{
		return null;
	}

	[Token(Token = "0x600187A")]
	[Address(RVA = "0x9A3EFC", Offset = "0x9A3EFC", VA = "0x9A3EFC")]
	public float GetDiffraction(uint idx)
	{
		return default(float);
	}

	[Token(Token = "0x600187B")]
	[Address(RVA = "0x9A3F78", Offset = "0x9A3F78", VA = "0x9A3F78")]
	public void Clone(AkReflectionPathInfo other)
	{
	}

	[Token(Token = "0x600187C")]
	[Address(RVA = "0x9A4020", Offset = "0x9A4020", VA = "0x9A4020")]
	public AkReflectionPathInfo()
	{
	}
}
[Token(Token = "0x200026C")]
public enum AKRESULT
{
	[Token(Token = "0x400125F")]
	AK_NotImplemented = 0,
	[Token(Token = "0x4001260")]
	AK_Success = 1,
	[Token(Token = "0x4001261")]
	AK_Fail = 2,
	[Token(Token = "0x4001262")]
	AK_PartialSuccess = 3,
	[Token(Token = "0x4001263")]
	AK_NotCompatible = 4,
	[Token(Token = "0x4001264")]
	AK_AlreadyConnected = 5,
	[Token(Token = "0x4001265")]
	AK_InvalidFile = 7,
	[Token(Token = "0x4001266")]
	AK_AudioFileHeaderTooLarge = 8,
	[Token(Token = "0x4001267")]
	AK_MaxReached = 9,
	[Token(Token = "0x4001268")]
	AK_InvalidID = 14,
	[Token(Token = "0x4001269")]
	AK_IDNotFound = 15,
	[Token(Token = "0x400126A")]
	AK_InvalidInstanceID = 16,
	[Token(Token = "0x400126B")]
	AK_NoMoreData = 17,
	[Token(Token = "0x400126C")]
	AK_InvalidStateGroup = 20,
	[Token(Token = "0x400126D")]
	AK_ChildAlreadyHasAParent = 21,
	[Token(Token = "0x400126E")]
	AK_InvalidLanguage = 22,
	[Token(Token = "0x400126F")]
	AK_CannotAddItseflAsAChild = 23,
	[Token(Token = "0x4001270")]
	AK_InvalidParameter = 31,
	[Token(Token = "0x4001271")]
	AK_ElementAlreadyInList = 35,
	[Token(Token = "0x4001272")]
	AK_PathNotFound = 36,
	[Token(Token = "0x4001273")]
	AK_PathNoVertices = 37,
	[Token(Token = "0x4001274")]
	AK_PathNotRunning = 38,
	[Token(Token = "0x4001275")]
	AK_PathNotPaused = 39,
	[Token(Token = "0x4001276")]
	AK_PathNodeAlreadyInList = 40,
	[Token(Token = "0x4001277")]
	AK_PathNodeNotInList = 41,
	[Token(Token = "0x4001278")]
	AK_DataNeeded = 43,
	[Token(Token = "0x4001279")]
	AK_NoDataNeeded = 44,
	[Token(Token = "0x400127A")]
	AK_DataReady = 45,
	[Token(Token = "0x400127B")]
	AK_NoDataReady = 46,
	[Token(Token = "0x400127C")]
	AK_InsufficientMemory = 52,
	[Token(Token = "0x400127D")]
	AK_Cancelled = 53,
	[Token(Token = "0x400127E")]
	AK_UnknownBankID = 54,
	[Token(Token = "0x400127F")]
	AK_BankReadError = 56,
	[Token(Token = "0x4001280")]
	AK_InvalidSwitchType = 57,
	[Token(Token = "0x4001281")]
	AK_FormatNotReady = 63,
	[Token(Token = "0x4001282")]
	AK_WrongBankVersion = 64,
	[Token(Token = "0x4001283")]
	AK_FileNotFound = 66,
	[Token(Token = "0x4001284")]
	AK_DeviceNotReady = 67,
	[Token(Token = "0x4001285")]
	AK_BankAlreadyLoaded = 69,
	[Token(Token = "0x4001286")]
	AK_RenderedFX = 71,
	[Token(Token = "0x4001287")]
	AK_ProcessNeeded = 72,
	[Token(Token = "0x4001288")]
	AK_ProcessDone = 73,
	[Token(Token = "0x4001289")]
	AK_MemManagerNotInitialized = 74,
	[Token(Token = "0x400128A")]
	AK_StreamMgrNotInitialized = 75,
	[Token(Token = "0x400128B")]
	AK_SSEInstructionsNotSupported = 76,
	[Token(Token = "0x400128C")]
	AK_Busy = 77,
	[Token(Token = "0x400128D")]
	AK_UnsupportedChannelConfig = 78,
	[Token(Token = "0x400128E")]
	AK_PluginMediaNotAvailable = 79,
	[Token(Token = "0x400128F")]
	AK_MustBeVirtualized = 80,
	[Token(Token = "0x4001290")]
	AK_CommandTooLarge = 81,
	[Token(Token = "0x4001291")]
	AK_RejectedByFilter = 82,
	[Token(Token = "0x4001292")]
	AK_InvalidCustomPlatformName = 83,
	[Token(Token = "0x4001293")]
	AK_DLLCannotLoad = 84,
	[Token(Token = "0x4001294")]
	AK_DLLPathNotFound = 85,
	[Token(Token = "0x4001295")]
	AK_NoJavaVM = 86,
	[Token(Token = "0x4001296")]
	AK_OpenSLError = 87,
	[Token(Token = "0x4001297")]
	AK_PluginNotRegistered = 88,
	[Token(Token = "0x4001298")]
	AK_DataAlignmentError = 89,
	[Token(Token = "0x4001299")]
	AK_DeviceNotCompatible = 90,
	[Token(Token = "0x400129A")]
	AK_DuplicateUniqueID = 91,
	[Token(Token = "0x400129B")]
	AK_InitBankNotLoaded = 92,
	[Token(Token = "0x400129C")]
	AK_DeviceNotFound = 93
}
[Token(Token = "0x200026D")]
public class AkRoomParams : IDisposable
{
	[Token(Token = "0x400129D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x400129E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700023A")]
	public AkVector Up
	{
		[Token(Token = "0x6001884")]
		[Address(RVA = "0x9A4704", Offset = "0x9A4704", VA = "0x9A4704")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001883")]
		[Address(RVA = "0x9A5988", Offset = "0x9A5988", VA = "0x9A5988")]
		set
		{
		}
	}

	[Token(Token = "0x1700023B")]
	public AkVector Front
	{
		[Token(Token = "0x6001886")]
		[Address(RVA = "0x9A47B4", Offset = "0x9A47B4", VA = "0x9A47B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001885")]
		[Address(RVA = "0x9A5A18", Offset = "0x9A5A18", VA = "0x9A5A18")]
		set
		{
		}
	}

	[Token(Token = "0x1700023C")]
	public uint ReverbAuxBus
	{
		[Token(Token = "0x6001888")]
		[Address(RVA = "0x9A5AA8", Offset = "0x9A5AA8", VA = "0x9A5AA8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001887")]
		[Address(RVA = "0x9A4864", Offset = "0x9A4864", VA = "0x9A4864")]
		set
		{
		}
	}

	[Token(Token = "0x1700023D")]
	public float ReverbLevel
	{
		[Token(Token = "0x600188A")]
		[Address(RVA = "0x9A5B14", Offset = "0x9A5B14", VA = "0x9A5B14")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001889")]
		[Address(RVA = "0x9A48E0", Offset = "0x9A48E0", VA = "0x9A48E0")]
		set
		{
		}
	}

	[Token(Token = "0x1700023E")]
	public float WallOcclusion
	{
		[Token(Token = "0x600188C")]
		[Address(RVA = "0x9A5B80", Offset = "0x9A5B80", VA = "0x9A5B80")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600188B")]
		[Address(RVA = "0x9A495C", Offset = "0x9A495C", VA = "0x9A495C")]
		set
		{
		}
	}

	[Token(Token = "0x1700023F")]
	public float RoomGameObj_AuxSendLevelToSelf
	{
		[Token(Token = "0x600188E")]
		[Address(RVA = "0x9A5BEC", Offset = "0x9A5BEC", VA = "0x9A5BEC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600188D")]
		[Address(RVA = "0x9A49D8", Offset = "0x9A49D8", VA = "0x9A49D8")]
		set
		{
		}
	}

	[Token(Token = "0x17000240")]
	public bool RoomGameObj_KeepRegistered
	{
		[Token(Token = "0x6001890")]
		[Address(RVA = "0x9A5C58", Offset = "0x9A5C58", VA = "0x9A5C58")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600188F")]
		[Address(RVA = "0x9A4A54", Offset = "0x9A4A54", VA = "0x9A4A54")]
		set
		{
		}
	}

	[Token(Token = "0x600187D")]
	[Address(RVA = "0x9A5710", Offset = "0x9A5710", VA = "0x9A5710")]
	internal AkRoomParams(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600187E")]
	[Address(RVA = "0x9A5750", Offset = "0x9A5750", VA = "0x9A5750")]
	internal static IntPtr getCPtr(AkRoomParams obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600187F")]
	[Address(RVA = "0x9A57A0", Offset = "0x9A57A0", VA = "0x9A57A0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001880")]
	[Address(RVA = "0x9A57D4", Offset = "0x9A57D4", VA = "0x9A57D4", Slot = "1")]
	~AkRoomParams()
	{
	}

	[Token(Token = "0x6001881")]
	[Address(RVA = "0x9A5848", Offset = "0x9A5848", VA = "0x9A5848", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001882")]
	[Address(RVA = "0x9A4680", Offset = "0x9A4680", VA = "0x9A4680")]
	public AkRoomParams()
	{
	}
}
[Token(Token = "0x200026E")]
public class AkSegmentInfo : IDisposable
{
	[Token(Token = "0x400129F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000241")]
	public int iCurrentPosition
	{
		[Token(Token = "0x6001897")]
		[Address(RVA = "0x9A79C0", Offset = "0x9A79C0", VA = "0x9A79C0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001896")]
		[Address(RVA = "0x9A7944", Offset = "0x9A7944", VA = "0x9A7944")]
		set
		{
		}
	}

	[Token(Token = "0x17000242")]
	public int iPreEntryDuration
	{
		[Token(Token = "0x6001899")]
		[Address(RVA = "0x9A7AA8", Offset = "0x9A7AA8", VA = "0x9A7AA8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001898")]
		[Address(RVA = "0x9A7A2C", Offset = "0x9A7A2C", VA = "0x9A7A2C")]
		set
		{
		}
	}

	[Token(Token = "0x17000243")]
	public int iActiveDuration
	{
		[Token(Token = "0x600189B")]
		[Address(RVA = "0x9A7B90", Offset = "0x9A7B90", VA = "0x9A7B90")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600189A")]
		[Address(RVA = "0x9A7B14", Offset = "0x9A7B14", VA = "0x9A7B14")]
		set
		{
		}
	}

	[Token(Token = "0x17000244")]
	public int iPostExitDuration
	{
		[Token(Token = "0x600189D")]
		[Address(RVA = "0x9A7C78", Offset = "0x9A7C78", VA = "0x9A7C78")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600189C")]
		[Address(RVA = "0x9A7BFC", Offset = "0x9A7BFC", VA = "0x9A7BFC")]
		set
		{
		}
	}

	[Token(Token = "0x17000245")]
	public int iRemainingLookAheadTime
	{
		[Token(Token = "0x600189F")]
		[Address(RVA = "0x9A7D60", Offset = "0x9A7D60", VA = "0x9A7D60")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600189E")]
		[Address(RVA = "0x9A7CE4", Offset = "0x9A7CE4", VA = "0x9A7CE4")]
		set
		{
		}
	}

	[Token(Token = "0x17000246")]
	public float fBeatDuration
	{
		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x9A7E48", Offset = "0x9A7E48", VA = "0x9A7E48")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x9A7DCC", Offset = "0x9A7DCC", VA = "0x9A7DCC")]
		set
		{
		}
	}

	[Token(Token = "0x17000247")]
	public float fBarDuration
	{
		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x9A7F30", Offset = "0x9A7F30", VA = "0x9A7F30")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x9A7EB4", Offset = "0x9A7EB4", VA = "0x9A7EB4")]
		set
		{
		}
	}

	[Token(Token = "0x17000248")]
	public float fGridDuration
	{
		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x9A8018", Offset = "0x9A8018", VA = "0x9A8018")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x9A7F9C", Offset = "0x9A7F9C", VA = "0x9A7F9C")]
		set
		{
		}
	}

	[Token(Token = "0x17000249")]
	public float fGridOffset
	{
		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x9A8100", Offset = "0x9A8100", VA = "0x9A8100")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x9A8084", Offset = "0x9A8084", VA = "0x9A8084")]
		set
		{
		}
	}

	[Token(Token = "0x6001891")]
	[Address(RVA = "0x9A76CC", Offset = "0x9A76CC", VA = "0x9A76CC")]
	internal AkSegmentInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001892")]
	[Address(RVA = "0x9A770C", Offset = "0x9A770C", VA = "0x9A770C")]
	internal static IntPtr getCPtr(AkSegmentInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001893")]
	[Address(RVA = "0x9A775C", Offset = "0x9A775C", VA = "0x9A775C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001894")]
	[Address(RVA = "0x9A7790", Offset = "0x9A7790", VA = "0x9A7790", Slot = "1")]
	~AkSegmentInfo()
	{
	}

	[Token(Token = "0x6001895")]
	[Address(RVA = "0x9A7804", Offset = "0x9A7804", VA = "0x9A7804", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60018A8")]
	[Address(RVA = "0x9A816C", Offset = "0x9A816C", VA = "0x9A816C")]
	public AkSegmentInfo()
	{
	}
}
[Token(Token = "0x200026F")]
public class AkSerializedCallbackHeader : IDisposable
{
	[Token(Token = "0x40012A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700024A")]
	public IntPtr pPackage
	{
		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x9A8468", Offset = "0x9A8468", VA = "0x9A8468")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700024B")]
	public AkSerializedCallbackHeader pNext
	{
		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x9A84D4", Offset = "0x9A84D4", VA = "0x9A84D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700024C")]
	public AkCallbackType eType
	{
		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x9A8584", Offset = "0x9A8584", VA = "0x9A8584")]
		get
		{
			return default(AkCallbackType);
		}
	}

	[Token(Token = "0x60018A9")]
	[Address(RVA = "0x9A81F0", Offset = "0x9A81F0", VA = "0x9A81F0")]
	internal AkSerializedCallbackHeader(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60018AA")]
	[Address(RVA = "0x9A8230", Offset = "0x9A8230", VA = "0x9A8230")]
	internal static IntPtr getCPtr(AkSerializedCallbackHeader obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60018AB")]
	[Address(RVA = "0x9A8280", Offset = "0x9A8280", VA = "0x9A8280", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60018AC")]
	[Address(RVA = "0x9A82B4", Offset = "0x9A82B4", VA = "0x9A82B4", Slot = "1")]
	~AkSerializedCallbackHeader()
	{
	}

	[Token(Token = "0x60018AD")]
	[Address(RVA = "0x9A8328", Offset = "0x9A8328", VA = "0x9A8328", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60018B1")]
	[Address(RVA = "0x9A85F0", Offset = "0x9A85F0", VA = "0x9A85F0")]
	public IntPtr GetData()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60018B2")]
	[Address(RVA = "0x9A865C", Offset = "0x9A865C", VA = "0x9A865C")]
	public AkSerializedCallbackHeader()
	{
	}
}
[Token(Token = "0x2000270")]
public enum AkSourceChannelOrdering
{
	[Token(Token = "0x40012A4")]
	SourceChannelOrdering_Standard,
	[Token(Token = "0x40012A5")]
	SourceChannelOrdering_Film,
	[Token(Token = "0x40012A6")]
	SourceChannelOrdering_FuMa
}
[Token(Token = "0x2000271")]
public class AkSourceSettings : IDisposable
{
	[Token(Token = "0x40012A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700024D")]
	public uint sourceID
	{
		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x837C04", Offset = "0x837C04", VA = "0x837C04")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x837B88", Offset = "0x837B88", VA = "0x837B88")]
		set
		{
		}
	}

	[Token(Token = "0x1700024E")]
	public IntPtr pMediaMemory
	{
		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x837CEC", Offset = "0x837CEC", VA = "0x837CEC")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x837C70", Offset = "0x837C70", VA = "0x837C70")]
		set
		{
		}
	}

	[Token(Token = "0x1700024F")]
	public uint uMediaSize
	{
		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x837DD4", Offset = "0x837DD4", VA = "0x837DD4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x837D58", Offset = "0x837D58", VA = "0x837D58")]
		set
		{
		}
	}

	[Token(Token = "0x60018B3")]
	[Address(RVA = "0x837910", Offset = "0x837910", VA = "0x837910")]
	internal AkSourceSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60018B4")]
	[Address(RVA = "0x837950", Offset = "0x837950", VA = "0x837950")]
	internal static IntPtr getCPtr(AkSourceSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60018B5")]
	[Address(RVA = "0x8379A0", Offset = "0x8379A0", VA = "0x8379A0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60018B6")]
	[Address(RVA = "0x8379D4", Offset = "0x8379D4", VA = "0x8379D4", Slot = "1")]
	~AkSourceSettings()
	{
	}

	[Token(Token = "0x60018B7")]
	[Address(RVA = "0x837A48", Offset = "0x837A48", VA = "0x837A48", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60018BE")]
	[Address(RVA = "0x837E40", Offset = "0x837E40", VA = "0x837E40")]
	public void Clear()
	{
	}

	[Token(Token = "0x60018BF")]
	[Address(RVA = "0x837EAC", Offset = "0x837EAC", VA = "0x837EAC")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60018C0")]
	[Address(RVA = "0x837F0C", Offset = "0x837F0C", VA = "0x837F0C")]
	public void Clone(AkSourceSettings other)
	{
	}

	[Token(Token = "0x60018C1")]
	[Address(RVA = "0x837FB4", Offset = "0x837FB4", VA = "0x837FB4")]
	public AkSourceSettings()
	{
	}
}
[Token(Token = "0x2000272")]
public class AkSpatialAudioInitSettings : IDisposable
{
	[Token(Token = "0x40012A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000250")]
	public int uPoolID
	{
		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x838B00", Offset = "0x838B00", VA = "0x838B00")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x838A84", Offset = "0x838A84", VA = "0x838A84")]
		set
		{
		}
	}

	[Token(Token = "0x17000251")]
	public uint uPoolSize
	{
		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x838BE8", Offset = "0x838BE8", VA = "0x838BE8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x838B6C", Offset = "0x838B6C", VA = "0x838B6C")]
		set
		{
		}
	}

	[Token(Token = "0x17000252")]
	public uint uMaxSoundPropagationDepth
	{
		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x838CD0", Offset = "0x838CD0", VA = "0x838CD0")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x838C54", Offset = "0x838C54", VA = "0x838C54")]
		set
		{
		}
	}

	[Token(Token = "0x17000253")]
	public uint uDiffractionFlags
	{
		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x838DB8", Offset = "0x838DB8", VA = "0x838DB8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x838D3C", Offset = "0x838D3C", VA = "0x838D3C")]
		set
		{
		}
	}

	[Token(Token = "0x17000254")]
	public float fDiffractionShadowAttenFactor
	{
		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x838EA0", Offset = "0x838EA0", VA = "0x838EA0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x838E24", Offset = "0x838E24", VA = "0x838E24")]
		set
		{
		}
	}

	[Token(Token = "0x17000255")]
	public float fDiffractionShadowDegrees
	{
		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x838F88", Offset = "0x838F88", VA = "0x838F88")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x838F0C", Offset = "0x838F0C", VA = "0x838F0C")]
		set
		{
		}
	}

	[Token(Token = "0x17000256")]
	public float fMovementThreshold
	{
		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x839070", Offset = "0x839070", VA = "0x839070")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x838FF4", Offset = "0x838FF4", VA = "0x838FF4")]
		set
		{
		}
	}

	[Token(Token = "0x60018C2")]
	[Address(RVA = "0x838788", Offset = "0x838788", VA = "0x838788")]
	internal AkSpatialAudioInitSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60018C3")]
	[Address(RVA = "0x8387C8", Offset = "0x8387C8", VA = "0x8387C8")]
	internal static IntPtr getCPtr(AkSpatialAudioInitSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60018C4")]
	[Address(RVA = "0x838818", Offset = "0x838818", VA = "0x838818", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60018C5")]
	[Address(RVA = "0x83884C", Offset = "0x83884C", VA = "0x83884C", Slot = "1")]
	~AkSpatialAudioInitSettings()
	{
	}

	[Token(Token = "0x60018C6")]
	[Address(RVA = "0x8388C0", Offset = "0x8388C0", VA = "0x8388C0", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60018C7")]
	[Address(RVA = "0x838A00", Offset = "0x838A00", VA = "0x838A00")]
	public AkSpatialAudioInitSettings()
	{
	}
}
[Token(Token = "0x2000273")]
public enum AkSpeakerPanningType
{
	[Token(Token = "0x40012AC")]
	AK_DirectSpeakerAssignment,
	[Token(Token = "0x40012AD")]
	AK_BalanceFadeHeight
}
[Token(Token = "0x2000274")]
public class AkStreamMgrSettings : IDisposable
{
	[Token(Token = "0x40012AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000257")]
	public uint uMemorySize
	{
		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x839DFC", Offset = "0x839DFC", VA = "0x839DFC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x839D80", Offset = "0x839D80", VA = "0x839D80")]
		set
		{
		}
	}

	[Token(Token = "0x60018D6")]
	[Address(RVA = "0x839B08", Offset = "0x839B08", VA = "0x839B08")]
	internal AkStreamMgrSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60018D7")]
	[Address(RVA = "0x839B48", Offset = "0x839B48", VA = "0x839B48")]
	internal static IntPtr getCPtr(AkStreamMgrSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60018D8")]
	[Address(RVA = "0x839B98", Offset = "0x839B98", VA = "0x839B98", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60018D9")]
	[Address(RVA = "0x839BCC", Offset = "0x839BCC", VA = "0x839BCC", Slot = "1")]
	~AkStreamMgrSettings()
	{
	}

	[Token(Token = "0x60018DA")]
	[Address(RVA = "0x839C40", Offset = "0x839C40", VA = "0x839C40", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60018DD")]
	[Address(RVA = "0x839E68", Offset = "0x839E68", VA = "0x839E68")]
	public AkStreamMgrSettings()
	{
	}
}
[Token(Token = "0x2000275")]
public class AkTaskContext : IDisposable
{
	[Token(Token = "0x40012B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000258")]
	public uint uIdxThread
	{
		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x83B818", Offset = "0x83B818", VA = "0x83B818")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x83B79C", Offset = "0x83B79C", VA = "0x83B79C")]
		set
		{
		}
	}

	[Token(Token = "0x60018DE")]
	[Address(RVA = "0x83B524", Offset = "0x83B524", VA = "0x83B524")]
	internal AkTaskContext(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60018DF")]
	[Address(RVA = "0x83B564", Offset = "0x83B564", VA = "0x83B564")]
	internal static IntPtr getCPtr(AkTaskContext obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60018E0")]
	[Address(RVA = "0x83B5B4", Offset = "0x83B5B4", VA = "0x83B5B4", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60018E1")]
	[Address(RVA = "0x83B5E8", Offset = "0x83B5E8", VA = "0x83B5E8", Slot = "1")]
	~AkTaskContext()
	{
	}

	[Token(Token = "0x60018E2")]
	[Address(RVA = "0x83B65C", Offset = "0x83B65C", VA = "0x83B65C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60018E5")]
	[Address(RVA = "0x83B884", Offset = "0x83B884", VA = "0x83B884")]
	public AkTaskContext()
	{
	}
}
[Token(Token = "0x2000276")]
public class AkTransform : IDisposable
{
	[Token(Token = "0x40012B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x60018E6")]
	[Address(RVA = "0x83BFAC", Offset = "0x83BFAC", VA = "0x83BFAC")]
	internal AkTransform(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60018E7")]
	[Address(RVA = "0x83BFEC", Offset = "0x83BFEC", VA = "0x83BFEC")]
	internal static IntPtr getCPtr(AkTransform obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60018E8")]
	[Address(RVA = "0x83C03C", Offset = "0x83C03C", VA = "0x83C03C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60018E9")]
	[Address(RVA = "0x83C070", Offset = "0x83C070", VA = "0x83C070", Slot = "1")]
	~AkTransform()
	{
	}

	[Token(Token = "0x60018EA")]
	[Address(RVA = "0x83C0E4", Offset = "0x83C0E4", VA = "0x83C0E4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60018EB")]
	[Address(RVA = "0x83C224", Offset = "0x83C224", VA = "0x83C224")]
	public AkVector Position()
	{
		return null;
	}

	[Token(Token = "0x60018EC")]
	[Address(RVA = "0x83C304", Offset = "0x83C304", VA = "0x83C304")]
	public AkVector OrientationFront()
	{
		return null;
	}

	[Token(Token = "0x60018ED")]
	[Address(RVA = "0x83C3A4", Offset = "0x83C3A4", VA = "0x83C3A4")]
	public AkVector OrientationTop()
	{
		return null;
	}

	[Token(Token = "0x60018EE")]
	[Address(RVA = "0x83C444", Offset = "0x83C444", VA = "0x83C444")]
	public void Set(AkVector in_position, AkVector in_orientationFront, AkVector in_orientationTop)
	{
	}

	[Token(Token = "0x60018EF")]
	[Address(RVA = "0x83C564", Offset = "0x83C564", VA = "0x83C564")]
	public void Set(float in_positionX, float in_positionY, float in_positionZ, float in_orientFrontX, float in_orientFrontY, float in_orientFrontZ, float in_orientTopX, float in_orientTopY, float in_orientTopZ)
	{
	}

	[Token(Token = "0x60018F0")]
	[Address(RVA = "0x83C690", Offset = "0x83C690", VA = "0x83C690")]
	public void SetPosition(AkVector in_position)
	{
	}

	[Token(Token = "0x60018F1")]
	[Address(RVA = "0x83C738", Offset = "0x83C738", VA = "0x83C738")]
	public void SetPosition(float in_x, float in_y, float in_z)
	{
	}

	[Token(Token = "0x60018F2")]
	[Address(RVA = "0x83C7CC", Offset = "0x83C7CC", VA = "0x83C7CC")]
	public void SetOrientation(AkVector in_orientationFront, AkVector in_orientationTop)
	{
	}

	[Token(Token = "0x60018F3")]
	[Address(RVA = "0x83C884", Offset = "0x83C884", VA = "0x83C884")]
	public void SetOrientation(float in_orientFrontX, float in_orientFrontY, float in_orientFrontZ, float in_orientTopX, float in_orientTopY, float in_orientTopZ)
	{
	}

	[Token(Token = "0x60018F4")]
	[Address(RVA = "0x83C938", Offset = "0x83C938", VA = "0x83C938")]
	public AkTransform()
	{
	}
}
[Token(Token = "0x2000277")]
public class AkTriangle : IDisposable
{
	[Token(Token = "0x40012B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000259")]
	public ushort point0
	{
		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x83CD6C", Offset = "0x83CD6C", VA = "0x83CD6C")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x83AE04", Offset = "0x83AE04", VA = "0x83AE04")]
		set
		{
		}
	}

	[Token(Token = "0x1700025A")]
	public ushort point1
	{
		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x83CDD8", Offset = "0x83CDD8", VA = "0x83CDD8")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x83AE80", Offset = "0x83AE80", VA = "0x83AE80")]
		set
		{
		}
	}

	[Token(Token = "0x1700025B")]
	public ushort point2
	{
		[Token(Token = "0x6001901")]
		[Address(RVA = "0x83CE44", Offset = "0x83CE44", VA = "0x83CE44")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6001900")]
		[Address(RVA = "0x83AEFC", Offset = "0x83AEFC", VA = "0x83AEFC")]
		set
		{
		}
	}

	[Token(Token = "0x1700025C")]
	public ushort surface
	{
		[Token(Token = "0x6001903")]
		[Address(RVA = "0x83CEB0", Offset = "0x83CEB0", VA = "0x83CEB0")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6001902")]
		[Address(RVA = "0x83AF78", Offset = "0x83AF78", VA = "0x83AF78")]
		set
		{
		}
	}

	[Token(Token = "0x60018F5")]
	[Address(RVA = "0x83C9BC", Offset = "0x83C9BC", VA = "0x83C9BC")]
	internal AkTriangle(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60018F6")]
	[Address(RVA = "0x83C9FC", Offset = "0x83C9FC", VA = "0x83C9FC")]
	internal static IntPtr getCPtr(AkTriangle obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60018F7")]
	[Address(RVA = "0x83CA4C", Offset = "0x83CA4C", VA = "0x83CA4C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60018F8")]
	[Address(RVA = "0x83CA80", Offset = "0x83CA80", VA = "0x83CA80", Slot = "1")]
	~AkTriangle()
	{
	}

	[Token(Token = "0x60018F9")]
	[Address(RVA = "0x83CAF4", Offset = "0x83CAF4", VA = "0x83CAF4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60018FA")]
	[Address(RVA = "0x83CC34", Offset = "0x83CC34", VA = "0x83CC34")]
	public AkTriangle()
	{
	}

	[Token(Token = "0x60018FB")]
	[Address(RVA = "0x83CCB8", Offset = "0x83CCB8", VA = "0x83CCB8")]
	public AkTriangle(ushort in_pt0, ushort in_pt1, ushort in_pt2, ushort in_surfaceInfo)
	{
	}

	[Token(Token = "0x6001904")]
	[Address(RVA = "0x83CF1C", Offset = "0x83CF1C", VA = "0x83CF1C")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001905")]
	[Address(RVA = "0x83CF88", Offset = "0x83CF88", VA = "0x83CF88")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x6001906")]
	[Address(RVA = "0x83CFE8", Offset = "0x83CFE8", VA = "0x83CFE8")]
	public void Clone(AkTriangle other)
	{
	}
}
[Token(Token = "0x2000278")]
public class AkVector : IDisposable
{
	[Token(Token = "0x40012B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700025D")]
	public float X
	{
		[Token(Token = "0x600190E")]
		[Address(RVA = "0x83F214", Offset = "0x83F214", VA = "0x83F214")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600190D")]
		[Address(RVA = "0x83F198", Offset = "0x83F198", VA = "0x83F198")]
		set
		{
		}
	}

	[Token(Token = "0x1700025E")]
	public float Y
	{
		[Token(Token = "0x6001910")]
		[Address(RVA = "0x83F2FC", Offset = "0x83F2FC", VA = "0x83F2FC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600190F")]
		[Address(RVA = "0x83F280", Offset = "0x83F280", VA = "0x83F280")]
		set
		{
		}
	}

	[Token(Token = "0x1700025F")]
	public float Z
	{
		[Token(Token = "0x6001912")]
		[Address(RVA = "0x83F3E4", Offset = "0x83F3E4", VA = "0x83F3E4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001911")]
		[Address(RVA = "0x83F368", Offset = "0x83F368", VA = "0x83F368")]
		set
		{
		}
	}

	[Token(Token = "0x6001907")]
	[Address(RVA = "0x83C2C4", Offset = "0x83C2C4", VA = "0x83C2C4")]
	internal AkVector(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001908")]
	[Address(RVA = "0x83C514", Offset = "0x83C514", VA = "0x83C514")]
	internal static IntPtr getCPtr(AkVector obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001909")]
	[Address(RVA = "0x83EF44", Offset = "0x83EF44", VA = "0x83EF44", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600190A")]
	[Address(RVA = "0x83EF78", Offset = "0x83EF78", VA = "0x83EF78", Slot = "1")]
	~AkVector()
	{
	}

	[Token(Token = "0x600190B")]
	[Address(RVA = "0x83EFEC", Offset = "0x83EFEC", VA = "0x83EFEC", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600190C")]
	[Address(RVA = "0x83F12C", Offset = "0x83F12C", VA = "0x83F12C")]
	public void Zero()
	{
	}

	[Token(Token = "0x6001913")]
	[Address(RVA = "0x83F450", Offset = "0x83F450", VA = "0x83F450")]
	public AkVector()
	{
	}
}
[Token(Token = "0x2000279")]
public class AkVertex : IDisposable
{
	[Token(Token = "0x40012B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40012B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000260")]
	public float X
	{
		[Token(Token = "0x600191C")]
		[Address(RVA = "0x83F87C", Offset = "0x83F87C", VA = "0x83F87C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600191B")]
		[Address(RVA = "0x83AC30", Offset = "0x83AC30", VA = "0x83AC30")]
		set
		{
		}
	}

	[Token(Token = "0x17000261")]
	public float Y
	{
		[Token(Token = "0x600191E")]
		[Address(RVA = "0x83F8E8", Offset = "0x83F8E8", VA = "0x83F8E8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600191D")]
		[Address(RVA = "0x83ACAC", Offset = "0x83ACAC", VA = "0x83ACAC")]
		set
		{
		}
	}

	[Token(Token = "0x17000262")]
	public float Z
	{
		[Token(Token = "0x6001920")]
		[Address(RVA = "0x83F954", Offset = "0x83F954", VA = "0x83F954")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600191F")]
		[Address(RVA = "0x83AD28", Offset = "0x83AD28", VA = "0x83AD28")]
		set
		{
		}
	}

	[Token(Token = "0x6001914")]
	[Address(RVA = "0x83F4D4", Offset = "0x83F4D4", VA = "0x83F4D4")]
	internal AkVertex(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001915")]
	[Address(RVA = "0x83F514", Offset = "0x83F514", VA = "0x83F514")]
	internal static IntPtr getCPtr(AkVertex obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001916")]
	[Address(RVA = "0x83F564", Offset = "0x83F564", VA = "0x83F564", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001917")]
	[Address(RVA = "0x83F598", Offset = "0x83F598", VA = "0x83F598", Slot = "1")]
	~AkVertex()
	{
	}

	[Token(Token = "0x6001918")]
	[Address(RVA = "0x83F60C", Offset = "0x83F60C", VA = "0x83F60C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001919")]
	[Address(RVA = "0x83F74C", Offset = "0x83F74C", VA = "0x83F74C")]
	public AkVertex()
	{
	}

	[Token(Token = "0x600191A")]
	[Address(RVA = "0x83F7D0", Offset = "0x83F7D0", VA = "0x83F7D0")]
	public AkVertex(float in_X, float in_Y, float in_Z)
	{
	}

	[Token(Token = "0x6001921")]
	[Address(RVA = "0x83F9C0", Offset = "0x83F9C0", VA = "0x83F9C0")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001922")]
	[Address(RVA = "0x83FA2C", Offset = "0x83FA2C", VA = "0x83FA2C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x6001923")]
	[Address(RVA = "0x83FA8C", Offset = "0x83FA8C", VA = "0x83FA8C")]
	public void Clone(AkVertex other)
	{
	}
}
[Token(Token = "0x200027A")]
public class AkAndroidSettings : AkWwiseInitializationSettings.PlatformSettings
{
	[Serializable]
	[Token(Token = "0x20004CE")]
	public class PlatformAdvancedSettings : AkCommonAdvancedSettings
	{
		[Token(Token = "0x200066F")]
		public enum AudioAPI
		{
			[Token(Token = "0x40022A6")]
			None = 0,
			[Token(Token = "0x40022A7")]
			AAudio = 1,
			[Token(Token = "0x40022A8")]
			OpenSL_ES = 2,
			[Token(Token = "0x40022A9")]
			Default = -1
		}

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x756004", Offset = "0x756004")]
		[AttributeAttribute(Name = "AkEnumFlagAttribute", RVA = "0x756004", Offset = "0x756004")]
		public AudioAPI m_AudioAPI;

		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75608C", Offset = "0x75608C")]
		public bool m_RoundFrameSizeToHardwareSize;

		[Token(Token = "0x6002435")]
		[Address(RVA = "0xA524C8", Offset = "0xA524C8", VA = "0xA524C8", Slot = "7")]
		public override void CopyTo(AkPlatformInitSettings settings)
		{
		}

		[Token(Token = "0x6002436")]
		[Address(RVA = "0xA52510", Offset = "0xA52510", VA = "0xA52510")]
		public PlatformAdvancedSettings()
		{
		}
	}

	[Token(Token = "0x40012BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public AkCommonUserSettings UserSettings;

	[Token(Token = "0x40012BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public PlatformAdvancedSettings AdvancedSettings;

	[Token(Token = "0x40012BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public AkCommonCommSettings CommsSettings;

	[Token(Token = "0x6001924")]
	[Address(RVA = "0xA521F8", Offset = "0xA521F8", VA = "0xA521F8")]
	public AkAndroidSettings()
	{
	}

	[Token(Token = "0x6001925")]
	[Address(RVA = "0xA524B0", Offset = "0xA524B0", VA = "0xA524B0", Slot = "12")]
	protected override AkCommonUserSettings GetUserSettings()
	{
		return null;
	}

	[Token(Token = "0x6001926")]
	[Address(RVA = "0xA524B8", Offset = "0xA524B8", VA = "0xA524B8", Slot = "13")]
	protected override AkCommonAdvancedSettings GetAdvancedSettings()
	{
		return null;
	}

	[Token(Token = "0x6001927")]
	[Address(RVA = "0xA524C0", Offset = "0xA524C0", VA = "0xA524C0", Slot = "14")]
	protected override AkCommonCommSettings GetCommsSettings()
	{
		return null;
	}
}
[Token(Token = "0x200027B")]
public static class AkAudioInputManager
{
	[Token(Token = "0x20004CF")]
	public delegate void AudioFormatDelegate(uint playingID, AkAudioFormat format);

	[Token(Token = "0x20004D0")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74AF70", Offset = "0x74AF70")]
	public delegate void AudioFormatInteropDelegate(uint playingID, IntPtr format);

	[Token(Token = "0x20004D1")]
	public delegate bool AudioSamplesDelegate(uint playingID, uint channelIndex, float[] samples);

	[Token(Token = "0x20004D2")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74AF84", Offset = "0x74AF84")]
	public delegate bool AudioSamplesInteropDelegate(uint playingID, [In][Out] float[] samples, uint channelIndex, uint frames);

	[Token(Token = "0x40012BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool initialized;

	[Token(Token = "0x40012BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly Dictionary<uint, AudioSamplesDelegate> audioSamplesDelegates;

	[Token(Token = "0x40012BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly Dictionary<uint, AudioFormatDelegate> audioFormatDelegates;

	[Token(Token = "0x40012C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly AkAudioFormat audioFormat;

	[Token(Token = "0x40012C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly AudioSamplesInteropDelegate audioSamplesDelegate;

	[Token(Token = "0x40012C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly AudioFormatInteropDelegate audioFormatDelegate;

	[Token(Token = "0x6001928")]
	[Address(RVA = "0xA53458", Offset = "0xA53458", VA = "0xA53458")]
	public static uint PostAudioInputEvent(AK.Wwise.Event akEvent, GameObject gameObject, AudioSamplesDelegate sampleDelegate, [Optional] AudioFormatDelegate formatDelegate)
	{
		return default(uint);
	}

	[Token(Token = "0x6001929")]
	[Address(RVA = "0xA53704", Offset = "0xA53704", VA = "0xA53704")]
	public static uint PostAudioInputEvent(uint akEventID, GameObject gameObject, AudioSamplesDelegate sampleDelegate, [Optional] AudioFormatDelegate formatDelegate)
	{
		return default(uint);
	}

	[Token(Token = "0x600192A")]
	[Address(RVA = "0xA53800", Offset = "0xA53800", VA = "0xA53800")]
	public static uint PostAudioInputEvent(string akEventName, GameObject gameObject, AudioSamplesDelegate sampleDelegate, [Optional] AudioFormatDelegate formatDelegate)
	{
		return default(uint);
	}

	[Token(Token = "0x600192B")]
	[Address(RVA = "0xA53244", Offset = "0xA53244", VA = "0xA53244")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x757EDC", Offset = "0x757EDC")]
	private static bool InternalAudioSamplesDelegate(uint playingID, float[] samples, uint channelIndex, uint frames)
	{
		return default(bool);
	}

	[Token(Token = "0x600192C")]
	[Address(RVA = "0xA53340", Offset = "0xA53340", VA = "0xA53340")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x757F40", Offset = "0x757F40")]
	private static void InternalAudioFormatDelegate(uint playingID, IntPtr format)
	{
	}

	[Token(Token = "0x600192D")]
	[Address(RVA = "0xA5353C", Offset = "0xA5353C", VA = "0xA5353C")]
	private static void TryInitialize()
	{
	}

	[Token(Token = "0x600192E")]
	[Address(RVA = "0xA53610", Offset = "0xA53610", VA = "0xA53610")]
	private static void AddPlayingID(uint playingID, AudioSamplesDelegate sampleDelegate, AudioFormatDelegate formatDelegate)
	{
	}

	[Token(Token = "0x600192F")]
	[Address(RVA = "0xA53DE0", Offset = "0xA53DE0", VA = "0xA53DE0")]
	private static void EventCallback(object cookie, AkCallbackType type, AkCallbackInfo callbackInfo)
	{
	}
}
[Token(Token = "0x200027C")]
public static class AkBankManager
{
	[Token(Token = "0x20004D3")]
	private class BankHandle
	{
		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly string bankName;

		[Token(Token = "0x4002114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected uint m_BankID;

		[Token(Token = "0x4002115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7560C4", Offset = "0x7560C4")]
		private int <RefCount>k__BackingField;

		[Token(Token = "0x170003BD")]
		public int RefCount
		{
			[Token(Token = "0x6002448")]
			[Address(RVA = "0xA58BF8", Offset = "0xA58BF8", VA = "0xA58BF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75ABB0", Offset = "0x75ABB0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002449")]
			[Address(RVA = "0xA58C00", Offset = "0xA58C00", VA = "0xA58C00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75ABC0", Offset = "0x75ABC0")]
			private set
			{
			}
		}

		[Token(Token = "0x6002447")]
		[Address(RVA = "0xA57F68", Offset = "0xA57F68", VA = "0xA57F68")]
		public BankHandle(string name)
		{
		}

		[Token(Token = "0x600244A")]
		[Address(RVA = "0xA58C08", Offset = "0xA58C08", VA = "0xA58C08", Slot = "4")]
		public virtual AKRESULT DoLoadBank()
		{
			return default(AKRESULT);
		}

		[Token(Token = "0x600244B")]
		[Address(RVA = "0xA58224", Offset = "0xA58224", VA = "0xA58224")]
		public void LoadBank()
		{
		}

		[Token(Token = "0x600244C")]
		[Address(RVA = "0xA58C80", Offset = "0xA58C80", VA = "0xA58C80", Slot = "5")]
		public virtual void UnloadBank()
		{
		}

		[Token(Token = "0x600244D")]
		[Address(RVA = "0xA58320", Offset = "0xA58320", VA = "0xA58320")]
		public void IncRef()
		{
		}

		[Token(Token = "0x600244E")]
		[Address(RVA = "0xA5836C", Offset = "0xA5836C", VA = "0xA5836C")]
		public void DecRef()
		{
		}

		[Token(Token = "0x600244F")]
		[Address(RVA = "0xA58680", Offset = "0xA58680", VA = "0xA58680")]
		protected void LogLoadResult(AKRESULT result)
		{
		}
	}

	[Token(Token = "0x20004D4")]
	private class AsyncBankHandle : BankHandle
	{
		[Token(Token = "0x4002116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AkCallbackManager.BankCallback bankCallback;

		[Token(Token = "0x6002450")]
		[Address(RVA = "0xA58330", Offset = "0xA58330", VA = "0xA58330")]
		public AsyncBankHandle(string name, AkCallbackManager.BankCallback callback)
		{
		}

		[Token(Token = "0x6002451")]
		[Address(RVA = "0xA584D8", Offset = "0xA584D8", VA = "0xA584D8")]
		private static void GlobalBankCallback(uint in_bankID, IntPtr in_pInMemoryBankPtr, AKRESULT in_eLoadResult, uint in_memPoolId, object in_Cookie)
		{
		}

		[Token(Token = "0x6002452")]
		[Address(RVA = "0xA58B34", Offset = "0xA58B34", VA = "0xA58B34", Slot = "4")]
		public override AKRESULT DoLoadBank()
		{
			return default(AKRESULT);
		}
	}

	[Token(Token = "0x20004D5")]
	private class DecodableBankHandle : BankHandle
	{
		[Token(Token = "0x4002117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly bool decodeBank;

		[Token(Token = "0x4002118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly string decodedBankPath;

		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly bool saveDecodedBank;

		[Token(Token = "0x6002453")]
		[Address(RVA = "0xA57F94", Offset = "0xA57F94", VA = "0xA57F94")]
		public DecodableBankHandle(string name, bool save)
		{
		}

		[Token(Token = "0x6002454")]
		[Address(RVA = "0xA58DE0", Offset = "0xA58DE0", VA = "0xA58DE0", Slot = "4")]
		public override AKRESULT DoLoadBank()
		{
			return default(AKRESULT);
		}

		[Token(Token = "0x6002455")]
		[Address(RVA = "0xA58F74", Offset = "0xA58F74", VA = "0xA58F74", Slot = "5")]
		public override void UnloadBank()
		{
		}
	}

	[Token(Token = "0x40012C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Dictionary<string, BankHandle> m_BankHandles;

	[Token(Token = "0x40012C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly List<BankHandle> BanksToUnload;

	[Token(Token = "0x40012C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly Mutex m_Mutex;

	[Token(Token = "0x6001931")]
	[Address(RVA = "0xA57C10", Offset = "0xA57C10", VA = "0xA57C10")]
	internal static void DoUnloadBanks()
	{
	}

	[Token(Token = "0x6001932")]
	[Address(RVA = "0xA57D38", Offset = "0xA57D38", VA = "0xA57D38")]
	internal static void Reset()
	{
	}

	[Token(Token = "0x6001933")]
	[Address(RVA = "0xA57DD4", Offset = "0xA57DD4", VA = "0xA57DD4")]
	public static void LoadInitBank(bool doReset = true)
	{
	}

	[Token(Token = "0x6001934")]
	[Address(RVA = "0xA57EF8", Offset = "0xA57EF8", VA = "0xA57EF8")]
	public static void UnloadInitBank()
	{
	}

	[Token(Token = "0x6001935")]
	[Address(RVA = "0xA4BF68", Offset = "0xA4BF68", VA = "0xA4BF68")]
	public static void LoadBank(string name, bool decodeBank, bool saveDecodedBank)
	{
	}

	[Token(Token = "0x6001936")]
	[Address(RVA = "0xA4C1E4", Offset = "0xA4C1E4", VA = "0xA4C1E4")]
	public static void LoadBankAsync(string name, [Optional] AkCallbackManager.BankCallback callback)
	{
	}

	[Token(Token = "0x6001937")]
	[Address(RVA = "0xA4C420", Offset = "0xA4C420", VA = "0xA4C420")]
	public static void UnloadBank(string name)
	{
	}
}
[Token(Token = "0x200027D")]
public static class AkCallbackManager
{
	[Token(Token = "0x20004D6")]
	public delegate void EventCallback(object in_cookie, AkCallbackType in_type, AkCallbackInfo in_info);

	[Token(Token = "0x20004D7")]
	public delegate void MonitoringCallback(AkMonitorErrorCode in_errorCode, AkMonitorErrorLevel in_errorLevel, uint in_playingID, ulong in_gameObjID, string in_msg);

	[Token(Token = "0x20004D8")]
	public delegate void BankCallback(uint in_bankID, IntPtr in_InMemoryBankPtr, AKRESULT in_eLoadResult, uint in_memPoolId, object in_Cookie);

	[Token(Token = "0x20004D9")]
	public class EventCallbackPackage
	{
		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bNotifyEndOfEvent;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EventCallback m_Callback;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object m_Cookie;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_playingID;

		[Token(Token = "0x6002462")]
		[Address(RVA = "0xA5C728", Offset = "0xA5C728", VA = "0xA5C728")]
		public static EventCallbackPackage Create(EventCallback in_cb, object in_cookie, ref uint io_Flags)
		{
			return null;
		}

		[Token(Token = "0x6002463")]
		[Address(RVA = "0xA5C848", Offset = "0xA5C848", VA = "0xA5C848", Slot = "1")]
		~EventCallbackPackage()
		{
		}

		[Token(Token = "0x6002464")]
		[Address(RVA = "0xA5C840", Offset = "0xA5C840", VA = "0xA5C840")]
		public EventCallbackPackage()
		{
		}
	}

	[Token(Token = "0x20004DA")]
	public class BankCallbackPackage
	{
		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BankCallback m_Callback;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object m_Cookie;

		[Token(Token = "0x6002465")]
		[Address(RVA = "0xA5C5BC", Offset = "0xA5C5BC", VA = "0xA5C5BC")]
		public BankCallbackPackage(BankCallback in_cb, object in_cookie)
		{
		}
	}

	[Token(Token = "0x20004DB")]
	public delegate AKRESULT BGMCallback(bool in_bOtherAudioPlaying, object in_Cookie);

	[Token(Token = "0x20004DC")]
	public class BGMCallbackPackage
	{
		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BGMCallback m_Callback;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object m_Cookie;

		[Token(Token = "0x600246A")]
		[Address(RVA = "0xA5A998", Offset = "0xA5A998", VA = "0xA5A998")]
		public BGMCallbackPackage()
		{
		}
	}

	[Token(Token = "0x20004DD")]
	public class InitializationSettings
	{
		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int DefaultBufferSize;

		[Token(Token = "0x4002123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static bool DefaultIsLoggingEnabled;

		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int BufferSize;

		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool IsLoggingEnabled;

		[Token(Token = "0x600246B")]
		[Address(RVA = "0xA59630", Offset = "0xA59630", VA = "0xA59630")]
		public InitializationSettings()
		{
		}
	}

	[Token(Token = "0x40012C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x750E84", Offset = "0x750E84")]
	private static bool <IsLoggingEnabled>k__BackingField;

	[Token(Token = "0x40012C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly AkEventCallbackInfo AkEventCallbackInfo;

	[Token(Token = "0x40012C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly AkDynamicSequenceItemCallbackInfo AkDynamicSequenceItemCallbackInfo;

	[Token(Token = "0x40012C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly AkMIDIEventCallbackInfo AkMIDIEventCallbackInfo;

	[Token(Token = "0x40012CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly AkMarkerCallbackInfo AkMarkerCallbackInfo;

	[Token(Token = "0x40012CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly AkDurationCallbackInfo AkDurationCallbackInfo;

	[Token(Token = "0x40012CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly AkMusicSyncCallbackInfo AkMusicSyncCallbackInfo;

	[Token(Token = "0x40012CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static readonly AkMusicPlaylistCallbackInfo AkMusicPlaylistCallbackInfo;

	[Token(Token = "0x40012CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static readonly AkAudioSourceChangeCallbackInfo AkAudioSourceChangeCallbackInfo;

	[Token(Token = "0x40012CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly AkMonitoringCallbackInfo AkMonitoringCallbackInfo;

	[Token(Token = "0x40012D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static readonly AkBankCallbackInfo AkBankCallbackInfo;

	[Token(Token = "0x40012D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static readonly Dictionary<int, EventCallbackPackage> m_mapEventCallbacks;

	[Token(Token = "0x40012D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly Dictionary<int, BankCallbackPackage> m_mapBankCallbacks;

	[Token(Token = "0x40012D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static EventCallbackPackage m_LastAddedEventPackage;

	[Token(Token = "0x40012D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr m_pNotifMem;

	[Token(Token = "0x40012D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static MonitoringCallback m_MonitoringCB;

	[Token(Token = "0x40012D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static BGMCallbackPackage ms_sourceChangeCallbackPkg;

	[Token(Token = "0x17000263")]
	private static bool IsLoggingEnabled
	{
		[Token(Token = "0x6001939")]
		[Address(RVA = "0xA59C2C", Offset = "0xA59C2C", VA = "0xA59C2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757FA4", Offset = "0x757FA4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600193A")]
		[Address(RVA = "0xA59C94", Offset = "0xA59C94", VA = "0xA59C94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x757FB4", Offset = "0x757FB4")]
		set
		{
		}
	}

	[Token(Token = "0x600193B")]
	[Address(RVA = "0xA59D04", Offset = "0xA59D04", VA = "0xA59D04")]
	public static void RemoveEventCallback(uint in_playingID)
	{
	}

	[Token(Token = "0x600193C")]
	[Address(RVA = "0xA59F5C", Offset = "0xA59F5C", VA = "0xA59F5C")]
	public static void RemoveEventCallbackCookie(object in_cookie)
	{
	}

	[Token(Token = "0x600193D")]
	[Address(RVA = "0xA5A1D8", Offset = "0xA5A1D8", VA = "0xA5A1D8")]
	public static void RemoveBankCallback(object in_cookie)
	{
	}

	[Token(Token = "0x600193E")]
	[Address(RVA = "0xA5A454", Offset = "0xA5A454", VA = "0xA5A454")]
	public static void SetLastAddedPlayingID(uint in_playingID)
	{
	}

	[Token(Token = "0x600193F")]
	[Address(RVA = "0xA5A520", Offset = "0xA5A520", VA = "0xA5A520")]
	public static AKRESULT Init(InitializationSettings settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001940")]
	[Address(RVA = "0xA5A6CC", Offset = "0xA5A6CC", VA = "0xA5A6CC")]
	public static void Term()
	{
	}

	[Token(Token = "0x6001941")]
	[Address(RVA = "0xA5A808", Offset = "0xA5A808", VA = "0xA5A808")]
	public static void SetMonitoringCallback(AkMonitorErrorLevel in_Level, MonitoringCallback in_CB)
	{
	}

	[Token(Token = "0x6001942")]
	[Address(RVA = "0xA5A8F4", Offset = "0xA5A8F4", VA = "0xA5A8F4")]
	public static void SetBGMCallback(BGMCallback in_CB, object in_cookie)
	{
	}

	[Token(Token = "0x6001943")]
	[Address(RVA = "0xA5A9A0", Offset = "0xA5A9A0", VA = "0xA5A9A0")]
	public static int PostCallbacks()
	{
		return default(int);
	}
}
[Token(Token = "0x200027E")]
public class AkBasePlatformSettings : ScriptableObject
{
	[Token(Token = "0x17000264")]
	public virtual AkInitializationSettings AkInitializationSettings
	{
		[Token(Token = "0x6001945")]
		[Address(RVA = "0xA59520", Offset = "0xA59520", VA = "0xA59520", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000265")]
	public virtual AkSpatialAudioInitSettings AkSpatialAudioInitSettings
	{
		[Token(Token = "0x6001946")]
		[Address(RVA = "0xA5957C", Offset = "0xA5957C", VA = "0xA5957C", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000266")]
	public virtual AkCallbackManager.InitializationSettings CallbackManagerInitializationSettings
	{
		[Token(Token = "0x6001947")]
		[Address(RVA = "0xA595D8", Offset = "0xA595D8", VA = "0xA595D8", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000267")]
	public virtual string InitialLanguage
	{
		[Token(Token = "0x6001948")]
		[Address(RVA = "0xA596B4", Offset = "0xA596B4", VA = "0xA596B4", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000268")]
	public virtual bool RenderDuringFocusLoss
	{
		[Token(Token = "0x6001949")]
		[Address(RVA = "0xA596FC", Offset = "0xA596FC", VA = "0xA596FC", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000269")]
	public virtual string SoundbankPath
	{
		[Token(Token = "0x600194A")]
		[Address(RVA = "0xA59704", Offset = "0xA59704", VA = "0xA59704", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026A")]
	public virtual AkCommunicationSettings AkCommunicationSettings
	{
		[Token(Token = "0x600194B")]
		[Address(RVA = "0xA5976C", Offset = "0xA5976C", VA = "0xA5976C", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026B")]
	public virtual bool UseAsyncOpen
	{
		[Token(Token = "0x600194C")]
		[Address(RVA = "0xA59848", Offset = "0xA59848", VA = "0xA59848", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600194D")]
	[Address(RVA = "0xA59850", Offset = "0xA59850", VA = "0xA59850")]
	public AkBasePlatformSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x200027F")]
public class AkCommonOutputSettings
{
	[Token(Token = "0x20004DE")]
	public enum PanningRule
	{
		[Token(Token = "0x4002127")]
		Speakers,
		[Token(Token = "0x4002128")]
		Headphones
	}

	[Serializable]
	[Token(Token = "0x20004DF")]
	public class ChannelConfiguration
	{
		[Token(Token = "0x2000670")]
		public enum ChannelConfigType
		{
			[Token(Token = "0x40022AB")]
			Anonymous,
			[Token(Token = "0x40022AC")]
			Standard,
			[Token(Token = "0x40022AD")]
			Ambisonic
		}

		[Token(Token = "0x2000671")]
		public enum ChannelMask
		{
			[Token(Token = "0x40022AF")]
			NONE = 0,
			[Token(Token = "0x40022B0")]
			FRONT_LEFT = 1,
			[Token(Token = "0x40022B1")]
			FRONT_RIGHT = 2,
			[Token(Token = "0x40022B2")]
			FRONT_CENTER = 4,
			[Token(Token = "0x40022B3")]
			LOW_FREQUENCY = 8,
			[Token(Token = "0x40022B4")]
			BACK_LEFT = 16,
			[Token(Token = "0x40022B5")]
			BACK_RIGHT = 32,
			[Token(Token = "0x40022B6")]
			BACK_CENTER = 256,
			[Token(Token = "0x40022B7")]
			SIDE_LEFT = 512,
			[Token(Token = "0x40022B8")]
			SIDE_RIGHT = 1024,
			[Token(Token = "0x40022B9")]
			TOP = 2048,
			[Token(Token = "0x40022BA")]
			HEIGHT_FRONT_LEFT = 4096,
			[Token(Token = "0x40022BB")]
			HEIGHT_FRONT_CENTER = 8192,
			[Token(Token = "0x40022BC")]
			HEIGHT_FRONT_RIGHT = 16384,
			[Token(Token = "0x40022BD")]
			HEIGHT_BACK_LEFT = 32768,
			[Token(Token = "0x40022BE")]
			HEIGHT_BACK_CENTER = 65536,
			[Token(Token = "0x40022BF")]
			HEIGHT_BACK_RIGHT = 131072,
			[Token(Token = "0x40022C0")]
			SETUP_MONO = 4,
			[Token(Token = "0x40022C1")]
			SETUP_0POINT1 = 8,
			[Token(Token = "0x40022C2")]
			SETUP_1POINT1 = 12,
			[Token(Token = "0x40022C3")]
			SETUP_STEREO = 3,
			[Token(Token = "0x40022C4")]
			SETUP_2POINT1 = 11,
			[Token(Token = "0x40022C5")]
			SETUP_3STEREO = 7,
			[Token(Token = "0x40022C6")]
			SETUP_3POINT1 = 15,
			[Token(Token = "0x40022C7")]
			SETUP_4 = 1539,
			[Token(Token = "0x40022C8")]
			SETUP_4POINT1 = 1547,
			[Token(Token = "0x40022C9")]
			SETUP_5 = 1543,
			[Token(Token = "0x40022CA")]
			SETUP_5POINT1 = 1551,
			[Token(Token = "0x40022CB")]
			SETUP_6 = 1587,
			[Token(Token = "0x40022CC")]
			SETUP_6POINT1 = 1595,
			[Token(Token = "0x40022CD")]
			SETUP_7 = 1591,
			[Token(Token = "0x40022CE")]
			SETUP_7POINT1 = 1599,
			[Token(Token = "0x40022CF")]
			SETUP_SURROUND = 259,
			[Token(Token = "0x40022D0")]
			SETUP_DPL2 = 1539,
			[Token(Token = "0x40022D1")]
			SETUP_HEIGHT_4 = 184320,
			[Token(Token = "0x40022D2")]
			SETUP_HEIGHT_5 = 192512,
			[Token(Token = "0x40022D3")]
			SETUP_HEIGHT_ALL = 258048,
			[Token(Token = "0x40022D4")]
			SETUP_AURO_222 = 22019,
			[Token(Token = "0x40022D5")]
			SETUP_AURO_8 = 185859,
			[Token(Token = "0x40022D6")]
			SETUP_AURO_9 = 185863,
			[Token(Token = "0x40022D7")]
			SETUP_AURO_9POINT1 = 185871,
			[Token(Token = "0x40022D8")]
			SETUP_AURO_10 = 187911,
			[Token(Token = "0x40022D9")]
			SETUP_AURO_10POINT1 = 187919,
			[Token(Token = "0x40022DA")]
			SETUP_AURO_11 = 196103,
			[Token(Token = "0x40022DB")]
			SETUP_AURO_11POINT1 = 196111,
			[Token(Token = "0x40022DC")]
			SETUP_AURO_11_740 = 185911,
			[Token(Token = "0x40022DD")]
			SETUP_AURO_11POINT1_740 = 185919,
			[Token(Token = "0x40022DE")]
			SETUP_AURO_13_751 = 196151,
			[Token(Token = "0x40022DF")]
			SETUP_AURO_13POINT1_751 = 196159,
			[Token(Token = "0x40022E0")]
			SETUP_DOLBY_5_0_2 = 22023,
			[Token(Token = "0x40022E1")]
			SETUP_DOLBY_5_1_2 = 22031,
			[Token(Token = "0x40022E2")]
			SETUP_DOLBY_6_0_2 = 22067,
			[Token(Token = "0x40022E3")]
			SETUP_DOLBY_6_1_2 = 22075,
			[Token(Token = "0x40022E4")]
			SETUP_DOLBY_6_0_4 = 185907,
			[Token(Token = "0x40022E5")]
			SETUP_DOLBY_6_1_4 = 185915,
			[Token(Token = "0x40022E6")]
			SETUP_DOLBY_7_0_2 = 22071,
			[Token(Token = "0x40022E7")]
			SETUP_DOLBY_7_1_2 = 22079,
			[Token(Token = "0x40022E8")]
			SETUP_DOLBY_7_0_4 = 185911,
			[Token(Token = "0x40022E9")]
			SETUP_DOLBY_7_1_4 = 185919,
			[Token(Token = "0x40022EA")]
			SETUP_ALL_SPEAKERS = 261951
		}

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7560D4", Offset = "0x7560D4")]
		public ChannelConfigType m_ChannelConfigType;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75610C", Offset = "0x75610C")]
		[AttributeAttribute(Name = "AkEnumFlagAttribute", RVA = "0x75610C", Offset = "0x75610C")]
		public ChannelMask m_ChannelMask;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x756194", Offset = "0x756194")]
		public uint m_NumberOfChannels;

		[Token(Token = "0x600246D")]
		[Address(RVA = "0xA5ECEC", Offset = "0xA5ECEC", VA = "0xA5ECEC")]
		public void CopyTo(AkChannelConfig config)
		{
		}

		[Token(Token = "0x600246E")]
		[Address(RVA = "0xA524A8", Offset = "0xA524A8", VA = "0xA524A8")]
		public ChannelConfiguration()
		{
		}
	}

	[Token(Token = "0x40012D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750E94", Offset = "0x750E94")]
	public string m_AudioDeviceShareset;

	[Token(Token = "0x40012D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750ECC", Offset = "0x750ECC")]
	public uint m_DeviceID;

	[Token(Token = "0x40012D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750F04", Offset = "0x750F04")]
	public PanningRule m_PanningRule;

	[Token(Token = "0x40012DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750F3C", Offset = "0x750F3C")]
	public ChannelConfiguration m_ChannelConfig;

	[Token(Token = "0x600194E")]
	[Address(RVA = "0xA5EBFC", Offset = "0xA5EBFC", VA = "0xA5EBFC")]
	public void CopyTo(AkOutputSettings settings)
	{
	}

	[Token(Token = "0x600194F")]
	[Address(RVA = "0xA52428", Offset = "0xA52428", VA = "0xA52428")]
	public AkCommonOutputSettings()
	{
	}
}
[Token(Token = "0x2000280")]
public class AkSettingsValidationHandler
{
	[Token(Token = "0x6001950")]
	[Address(RVA = "0x9A86E0", Offset = "0x9A86E0", VA = "0x9A86E0", Slot = "4")]
	public virtual void Validate()
	{
	}

	[Token(Token = "0x6001951")]
	[Address(RVA = "0x9A86E4", Offset = "0x9A86E4", VA = "0x9A86E4")]
	public AkSettingsValidationHandler()
	{
	}
}
[Serializable]
[Token(Token = "0x2000281")]
public class AkCommonUserSettings : AkSettingsValidationHandler
{
	[Serializable]
	[Token(Token = "0x20004E0")]
	public class SpatialAudioSettings
	{
		[Token(Token = "0x2000672")]
		public enum DiffractionFlags
		{
			[Token(Token = "0x40022EC")]
			UseBuiltInParam = 1,
			[Token(Token = "0x40022ED")]
			UseObstruction = 2,
			[Token(Token = "0x40022EE")]
			CalcEmitterVirtualPosition = 8
		}

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7561CC", Offset = "0x7561CC")]
		public uint m_PoolSize;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x756204", Offset = "0x756204")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x756204", Offset = "0x756204")]
		public uint m_MaxSoundPropagationDepth;

		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x756258", Offset = "0x756258")]
		[AttributeAttribute(Name = "AkEnumFlagAttribute", RVA = "0x756258", Offset = "0x756258")]
		public DiffractionFlags m_DiffractionFlags;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7562E0", Offset = "0x7562E0")]
		public float m_MovementThreshold;

		[Token(Token = "0x600246F")]
		[Address(RVA = "0xA5F388", Offset = "0xA5F388", VA = "0xA5F388")]
		public SpatialAudioSettings()
		{
		}
	}

	[Token(Token = "0x40012DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750F74", Offset = "0x750F74")]
	public string m_BasePath;

	[Token(Token = "0x40012DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750FAC", Offset = "0x750FAC")]
	public string m_StartupLanguage;

	[Token(Token = "0x40012DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x750FE4", Offset = "0x750FE4")]
	public uint m_PreparePoolSize;

	[Token(Token = "0x40012DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75101C", Offset = "0x75101C")]
	public int m_CallbackManagerBufferSize;

	[Token(Token = "0x40012DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751054", Offset = "0x751054")]
	public bool m_EngineLogging;

	[Token(Token = "0x40012E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75108C", Offset = "0x75108C")]
	public uint m_MaximumNumberOfMemoryPools;

	[Token(Token = "0x40012E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7510C4", Offset = "0x7510C4")]
	public uint m_MaximumNumberOfPositioningPaths;

	[Token(Token = "0x40012E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7510FC", Offset = "0x7510FC")]
	public uint m_DefaultPoolSize;

	[Token(Token = "0x40012E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751134", Offset = "0x751134")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x751134", Offset = "0x751134")]
	public float m_MemoryCutoffThreshold;

	[Token(Token = "0x40012E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751188", Offset = "0x751188")]
	public uint m_CommandQueueSize;

	[Token(Token = "0x40012E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7511C0", Offset = "0x7511C0")]
	public uint m_SamplesPerFrame;

	[Token(Token = "0x40012E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7511F8", Offset = "0x7511F8")]
	public AkCommonOutputSettings m_MainOutputSettings;

	[Token(Token = "0x40012E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751230", Offset = "0x751230")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x751230", Offset = "0x751230")]
	public float m_StreamingLookAheadRatio;

	[Token(Token = "0x40012E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751284", Offset = "0x751284")]
	public uint m_StreamManagerPoolSize;

	[Token(Token = "0x40012E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7512BC", Offset = "0x7512BC")]
	public uint m_SampleRate;

	[Token(Token = "0x40012EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7512F4", Offset = "0x7512F4")]
	public uint m_LowerEnginePoolSize;

	[Token(Token = "0x40012EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75132C", Offset = "0x75132C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x75132C", Offset = "0x75132C")]
	public float m_LowerEngineMemoryCutoffThreshold;

	[Token(Token = "0x40012EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751380", Offset = "0x751380")]
	public ushort m_NumberOfRefillsInVoice;

	[Token(Token = "0x40012ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7513B8", Offset = "0x7513B8")]
	public SpatialAudioSettings m_SpatialAudioSettings;

	[Token(Token = "0x6001952")]
	[Address(RVA = "0xA5EF3C", Offset = "0xA5EF3C", VA = "0xA5EF3C")]
	public void CopyTo(AkMemSettings settings)
	{
	}

	[Token(Token = "0x6001953")]
	[Address(RVA = "0xA5F1C0", Offset = "0xA5F1C0", VA = "0xA5F1C0")]
	protected static string GetPluginPath()
	{
		return null;
	}

	[Token(Token = "0x6001954")]
	[Address(RVA = "0xA5F1C8", Offset = "0xA5F1C8", VA = "0xA5F1C8", Slot = "5")]
	public virtual void CopyTo(AkInitSettings settings)
	{
	}

	[Token(Token = "0x6001955")]
	[Address(RVA = "0xA5EF8C", Offset = "0xA5EF8C", VA = "0xA5EF8C")]
	public void CopyTo(AkMusicSettings settings)
	{
	}

	[Token(Token = "0x6001956")]
	[Address(RVA = "0xA5EF64", Offset = "0xA5EF64", VA = "0xA5EF64")]
	public void CopyTo(AkStreamMgrSettings settings)
	{
	}

	[Token(Token = "0x6001957")]
	[Address(RVA = "0xA5F270", Offset = "0xA5F270", VA = "0xA5F270", Slot = "6")]
	public virtual void CopyTo(AkDeviceSettings settings)
	{
	}

	[Token(Token = "0x6001958")]
	[Address(RVA = "0xA5F274", Offset = "0xA5F274", VA = "0xA5F274", Slot = "7")]
	public virtual void CopyTo(AkPlatformInitSettings settings)
	{
	}

	[Token(Token = "0x6001959")]
	[Address(RVA = "0xA5F2DC", Offset = "0xA5F2DC", VA = "0xA5F2DC", Slot = "8")]
	public virtual void CopyTo(AkSpatialAudioInitSettings settings)
	{
	}

	[Token(Token = "0x600195A")]
	[Address(RVA = "0xA5F364", Offset = "0xA5F364", VA = "0xA5F364", Slot = "9")]
	public virtual void CopyTo(AkUnityPlatformSpecificSettings settings)
	{
	}

	[Token(Token = "0x600195B")]
	[Address(RVA = "0xA5F368", Offset = "0xA5F368", VA = "0xA5F368", Slot = "4")]
	public override void Validate()
	{
	}

	[Token(Token = "0x600195C")]
	[Address(RVA = "0xA5231C", Offset = "0xA5231C", VA = "0xA5231C")]
	public AkCommonUserSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x2000282")]
public class AkCommonAdvancedSettings : AkSettingsValidationHandler
{
	[Serializable]
	[Token(Token = "0x20004E1")]
	public class SpatialAudioSettings
	{
		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x756318", Offset = "0x756318")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x756318", Offset = "0x756318")]
		public float m_DiffractionShadowAttenuationFactor;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75636C", Offset = "0x75636C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x75636C", Offset = "0x75636C")]
		public float m_DiffractionShadowDegrees;

		[Token(Token = "0x6002470")]
		[Address(RVA = "0xA5E794", Offset = "0xA5E794", VA = "0xA5E794")]
		public SpatialAudioSettings()
		{
		}
	}

	[Token(Token = "0x40012EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7513F0", Offset = "0x7513F0")]
	public uint m_IOMemorySize;

	[Token(Token = "0x40012EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751428", Offset = "0x751428")]
	public float m_TargetAutoStreamBufferLengthMs;

	[Token(Token = "0x40012F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751460", Offset = "0x751460")]
	public bool m_UseStreamCache;

	[Token(Token = "0x40012F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751498", Offset = "0x751498")]
	public uint m_MaximumPinnedBytesInCache;

	[Token(Token = "0x40012F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7514D0", Offset = "0x7514D0")]
	public int m_PrepareEventMemoryPoolID;

	[Token(Token = "0x40012F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751508", Offset = "0x751508")]
	public bool m_EnableGameSyncPreparation;

	[Token(Token = "0x40012F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751540", Offset = "0x751540")]
	public uint m_ContinuousPlaybackLookAhead;

	[Token(Token = "0x40012F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751578", Offset = "0x751578")]
	public uint m_MonitorPoolSize;

	[Token(Token = "0x40012F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7515B0", Offset = "0x7515B0")]
	public uint m_MonitorQueuePoolSize;

	[Token(Token = "0x40012F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7515E8", Offset = "0x7515E8")]
	public uint m_MaximumHardwareTimeoutMs;

	[Token(Token = "0x40012F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751620", Offset = "0x751620")]
	public SpatialAudioSettings m_SpatialAudioSettings;

	[Token(Token = "0x40012F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751658", Offset = "0x751658")]
	public bool m_RenderDuringFocusLoss;

	[Token(Token = "0x40012FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751690", Offset = "0x751690")]
	public bool m_UseAsyncOpen;

	[Token(Token = "0x600195D")]
	[Address(RVA = "0xA5E36C", Offset = "0xA5E36C", VA = "0xA5E36C", Slot = "5")]
	public virtual void CopyTo(AkDeviceSettings settings)
	{
	}

	[Token(Token = "0x600195E")]
	[Address(RVA = "0xA5E5B4", Offset = "0xA5E5B4", VA = "0xA5E5B4", Slot = "6")]
	public virtual void CopyTo(AkInitSettings settings)
	{
	}

	[Token(Token = "0x600195F")]
	[Address(RVA = "0xA5E63C", Offset = "0xA5E63C", VA = "0xA5E63C", Slot = "7")]
	public virtual void CopyTo(AkPlatformInitSettings settings)
	{
	}

	[Token(Token = "0x6001960")]
	[Address(RVA = "0xA5E640", Offset = "0xA5E640", VA = "0xA5E640", Slot = "8")]
	public virtual void CopyTo(AkSpatialAudioInitSettings settings)
	{
	}

	[Token(Token = "0x6001961")]
	[Address(RVA = "0xA5E698", Offset = "0xA5E698", VA = "0xA5E698", Slot = "9")]
	public virtual void CopyTo(AkUnityPlatformSpecificSettings settings)
	{
	}

	[Token(Token = "0x6001962")]
	[Address(RVA = "0xA5E69C", Offset = "0xA5E69C", VA = "0xA5E69C", Slot = "4")]
	public override void Validate()
	{
	}

	[Token(Token = "0x6001963")]
	[Address(RVA = "0xA52548", Offset = "0xA52548", VA = "0xA52548")]
	public AkCommonAdvancedSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x2000283")]
public class AkCommonCommSettings : AkSettingsValidationHandler
{
	[Token(Token = "0x40012FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7516C8", Offset = "0x7516C8")]
	public uint m_PoolSize;

	[Token(Token = "0x40012FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ushort DefaultDiscoveryBroadcastPort;

	[Token(Token = "0x40012FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751700", Offset = "0x751700")]
	public ushort m_DiscoveryBroadcastPort;

	[Token(Token = "0x40012FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751738", Offset = "0x751738")]
	public ushort m_CommandPort;

	[Token(Token = "0x40012FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751770", Offset = "0x751770")]
	public ushort m_NotificationPort;

	[Token(Token = "0x4001300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7517A8", Offset = "0x7517A8")]
	public bool m_InitializeSystemComms;

	[Token(Token = "0x4001301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7517E0", Offset = "0x7517E0")]
	public string m_NetworkName;

	[Token(Token = "0x6001964")]
	[Address(RVA = "0xA5E7A8", Offset = "0xA5E7A8", VA = "0xA5E7A8", Slot = "5")]
	public virtual void CopyTo(AkCommunicationSettings settings)
	{
	}

	[Token(Token = "0x6001965")]
	[Address(RVA = "0xA5EB20", Offset = "0xA5EB20", VA = "0xA5EB20")]
	public AkCommonCommSettings()
	{
	}
}
[Token(Token = "0x2000284")]
public abstract class AkCommonPlatformSettings : AkBasePlatformSettings
{
	[Token(Token = "0x1700026C")]
	public override AkInitializationSettings AkInitializationSettings
	{
		[Token(Token = "0x600196A")]
		[Address(RVA = "0xA5ED64", Offset = "0xA5ED64", VA = "0xA5ED64", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026D")]
	public override AkSpatialAudioInitSettings AkSpatialAudioInitSettings
	{
		[Token(Token = "0x600196B")]
		[Address(RVA = "0xA5EFB0", Offset = "0xA5EFB0", VA = "0xA5EFB0", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026E")]
	public override AkCallbackManager.InitializationSettings CallbackManagerInitializationSettings
	{
		[Token(Token = "0x600196C")]
		[Address(RVA = "0xA5F028", Offset = "0xA5F028", VA = "0xA5F028", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026F")]
	public override string InitialLanguage
	{
		[Token(Token = "0x600196D")]
		[Address(RVA = "0xA5F0BC", Offset = "0xA5F0BC", VA = "0xA5F0BC", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000270")]
	public override bool RenderDuringFocusLoss
	{
		[Token(Token = "0x600196E")]
		[Address(RVA = "0xA5F0E4", Offset = "0xA5F0E4", VA = "0xA5F0E4", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000271")]
	public override string SoundbankPath
	{
		[Token(Token = "0x600196F")]
		[Address(RVA = "0xA5F110", Offset = "0xA5F110", VA = "0xA5F110", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000272")]
	public override bool UseAsyncOpen
	{
		[Token(Token = "0x6001970")]
		[Address(RVA = "0xA5F138", Offset = "0xA5F138", VA = "0xA5F138", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000273")]
	public override AkCommunicationSettings AkCommunicationSettings
	{
		[Token(Token = "0x6001971")]
		[Address(RVA = "0xA5F164", Offset = "0xA5F164", VA = "0xA5F164", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001967")]
	protected abstract AkCommonUserSettings GetUserSettings();

	[Token(Token = "0x6001968")]
	protected abstract AkCommonAdvancedSettings GetAdvancedSettings();

	[Token(Token = "0x6001969")]
	protected abstract AkCommonCommSettings GetCommsSettings();

	[Token(Token = "0x6001972")]
	[Address(RVA = "0xA5F1B8", Offset = "0xA5F1B8", VA = "0xA5F1B8")]
	protected AkCommonPlatformSettings()
	{
	}
}
[Token(Token = "0x2000285")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x7498B0", Offset = "0x7498B0")]
public class AkEnumFlagAttribute : PropertyAttribute
{
	[Token(Token = "0x4001302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Type Type;

	[Token(Token = "0x6001973")]
	[Address(RVA = "0xA62CE0", Offset = "0xA62CE0", VA = "0xA62CE0")]
	public AkEnumFlagAttribute(Type type)
	{
	}
}
[Token(Token = "0x2000286")]
public class AkLogger
{
	[Token(Token = "0x20004E2")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74AF98", Offset = "0x74AF98")]
	public delegate void ErrorLoggerInteropDelegate(string message);

	[Token(Token = "0x4001303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AkLogger ms_Instance;

	[Token(Token = "0x4001304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ErrorLoggerInteropDelegate errorLoggerDelegate;

	[Token(Token = "0x17000274")]
	public static AkLogger Instance
	{
		[Token(Token = "0x6001975")]
		[Address(RVA = "0x9931EC", Offset = "0x9931EC", VA = "0x9931EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001974")]
	[Address(RVA = "0x993078", Offset = "0x993078", VA = "0x993078")]
	private AkLogger()
	{
	}

	[Token(Token = "0x6001976")]
	[Address(RVA = "0x993254", Offset = "0x993254", VA = "0x993254", Slot = "1")]
	~AkLogger()
	{
	}

	[Token(Token = "0x6001977")]
	[Address(RVA = "0x9933BC", Offset = "0x9933BC", VA = "0x9933BC")]
	public void Init()
	{
	}

	[Token(Token = "0x6001978")]
	[Address(RVA = "0x992FF0", Offset = "0x992FF0", VA = "0x992FF0")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x757FC4", Offset = "0x757FC4")]
	public static void WwiseInternalLogError(string message)
	{
	}

	[Token(Token = "0x6001979")]
	[Address(RVA = "0x9933C0", Offset = "0x9933C0", VA = "0x9933C0")]
	public static void Message(string message)
	{
	}

	[Token(Token = "0x600197A")]
	[Address(RVA = "0x993448", Offset = "0x993448", VA = "0x993448")]
	public static void Warning(string message)
	{
	}

	[Token(Token = "0x600197B")]
	[Address(RVA = "0x9934D0", Offset = "0x9934D0", VA = "0x9934D0")]
	public static void Error(string message)
	{
	}
}
[Token(Token = "0x2000287")]
public static class AkRoomPortalManager
{
	[Token(Token = "0x4001305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<AkRoom> m_UpdatedRooms;

	[Token(Token = "0x4001306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly List<AkRoomPortal> m_Portals;

	[Token(Token = "0x4001307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly List<AkRoomPortal> m_PortalsToUpdate;

	[Token(Token = "0x600197D")]
	[Address(RVA = "0x9A69A8", Offset = "0x9A69A8", VA = "0x9A69A8")]
	public static void RegisterPortal(AkRoomPortal portal)
	{
	}

	[Token(Token = "0x600197E")]
	[Address(RVA = "0x9A6C10", Offset = "0x9A6C10", VA = "0x9A6C10")]
	public static void UnregisterPortal(AkRoomPortal portal)
	{
	}

	[Token(Token = "0x600197F")]
	[Address(RVA = "0x9A5D44", Offset = "0x9A5D44", VA = "0x9A5D44")]
	public static void RegisterPortalUpdate(AkRoomPortal portal)
	{
	}

	[Token(Token = "0x6001980")]
	[Address(RVA = "0x9A4B7C", Offset = "0x9A4B7C", VA = "0x9A4B7C")]
	public static void RegisterRoomUpdate(AkRoom room)
	{
	}

	[Token(Token = "0x6001981")]
	[Address(RVA = "0x9A721C", Offset = "0x9A721C", VA = "0x9A721C")]
	public static void UpdatePortals()
	{
	}
}
[Token(Token = "0x2000288")]
public class AkShowOnlyAttribute : PropertyAttribute
{
	[Token(Token = "0x6001983")]
	[Address(RVA = "0x9A86EC", Offset = "0x9A86EC", VA = "0x9A86EC")]
	public AkShowOnlyAttribute()
	{
	}
}
[Token(Token = "0x2000289")]
public class AkUtilities
{
	[Token(Token = "0x20004E3")]
	public class ShortIDGenerator
	{
		[Token(Token = "0x4002132")]
		private const uint s_prime32 = 16777619u;

		[Token(Token = "0x4002133")]
		private const uint s_offsetBasis32 = 2166136261u;

		[Token(Token = "0x4002134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte s_hashSize;

		[Token(Token = "0x4002135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static uint s_mask;

		[Token(Token = "0x170003BE")]
		public static byte HashSize
		{
			[Token(Token = "0x6002476")]
			[Address(RVA = "0x83EED4", Offset = "0x83EED4", VA = "0x83EED4")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002477")]
			[Address(RVA = "0x83EE48", Offset = "0x83EE48", VA = "0x83EE48")]
			set
			{
			}
		}

		[Token(Token = "0x6002475")]
		[Address(RVA = "0x83EE40", Offset = "0x83EE40", VA = "0x83EE40")]
		static ShortIDGenerator()
		{
		}

		[Token(Token = "0x6002478")]
		[Address(RVA = "0x83D550", Offset = "0x83D550", VA = "0x83D550")]
		public static uint Compute(string in_name)
		{
			return default(uint);
		}

		[Token(Token = "0x6002479")]
		[Address(RVA = "0x83EF3C", Offset = "0x83EF3C", VA = "0x83EF3C")]
		public ShortIDGenerator()
		{
		}
	}

	[Token(Token = "0x6001984")]
	[Address(RVA = "0x83EE38", Offset = "0x83EE38", VA = "0x83EE38")]
	public AkUtilities()
	{
	}
}
[Token(Token = "0x200028A")]
public class AkWwiseInitializationSettings : AkCommonPlatformSettings
{
	[Token(Token = "0x20004E4")]
	public abstract class PlatformSettings : AkCommonPlatformSettings
	{
		[Token(Token = "0x4002136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private List<string> IgnorePropertyNameList;

		[Token(Token = "0x4002137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private List<string> GlobalPropertyNameList;

		[Token(Token = "0x4002138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<string> _GlobalPropertyHashSet;

		[Token(Token = "0x170003BF")]
		public HashSet<string> GlobalPropertyHashSet
		{
			[Token(Token = "0x6002480")]
			[Address(RVA = "0x841EA0", Offset = "0x841EA0", VA = "0x841EA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002481")]
			[Address(RVA = "0x841F24", Offset = "0x841F24", VA = "0x841F24")]
			set
			{
			}
		}

		[Token(Token = "0x600247A")]
		[Address(RVA = "0x8419C4", Offset = "0x8419C4", VA = "0x8419C4")]
		public void IgnorePropertyValue(string propertyPath)
		{
		}

		[Token(Token = "0x600247B")]
		[Address(RVA = "0x841A5C", Offset = "0x841A5C", VA = "0x841A5C")]
		public bool IsPropertyIgnored(string propertyPath)
		{
			return default(bool);
		}

		[Token(Token = "0x600247C")]
		[Address(RVA = "0x83FD24", Offset = "0x83FD24", VA = "0x83FD24")]
		protected PlatformSettings()
		{
		}

		[Token(Token = "0x600247D")]
		[Address(RVA = "0x841AC4", Offset = "0x841AC4", VA = "0x841AC4")]
		public void SetUseGlobalPropertyValue(string propertyPath, bool use)
		{
		}

		[Token(Token = "0x600247E")]
		[Address(RVA = "0x841B68", Offset = "0x841B68", VA = "0x841B68")]
		public void SetGlobalPropertyValues(IEnumerable enumerable)
		{
		}

		[Token(Token = "0x600247F")]
		[Address(RVA = "0x841E38", Offset = "0x841E38", VA = "0x841E38")]
		private bool IsUsingGlobalPropertyValue(string propertyPath)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20004E5")]
	public class CommonPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x4002139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public AkCommonUserSettings UserSettings;

		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public AkCommonAdvancedSettings AdvancedSettings;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public AkCommonCommSettings CommsSettings;

		[Token(Token = "0x6002482")]
		[Address(RVA = "0x8419A8", Offset = "0x8419A8", VA = "0x8419A8", Slot = "12")]
		protected override AkCommonUserSettings GetUserSettings()
		{
			return null;
		}

		[Token(Token = "0x6002483")]
		[Address(RVA = "0x8419B0", Offset = "0x8419B0", VA = "0x8419B0", Slot = "13")]
		protected override AkCommonAdvancedSettings GetAdvancedSettings()
		{
			return null;
		}

		[Token(Token = "0x6002484")]
		[Address(RVA = "0x8419B8", Offset = "0x8419B8", VA = "0x8419B8", Slot = "14")]
		protected override AkCommonCommSettings GetCommsSettings()
		{
			return null;
		}

		[Token(Token = "0x6002485")]
		[Address(RVA = "0x8419C0", Offset = "0x8419C0", VA = "0x8419C0")]
		public CommonPlatformSettings()
		{
		}
	}

	[Token(Token = "0x4001308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public List<string> PlatformSettingsNameList;

	[Token(Token = "0x4001309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public List<PlatformSettings> PlatformSettingsList;

	[Token(Token = "0x400130A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public List<string> InvalidReferencePlatforms;

	[Token(Token = "0x400130B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public AkCommonUserSettings UserSettings;

	[Token(Token = "0x400130C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public AkCommonAdvancedSettings AdvancedSettings;

	[Token(Token = "0x400130D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public AkCommonCommSettings CommsSettings;

	[Token(Token = "0x400130E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string[] AllGlobalValues;

	[Token(Token = "0x400130F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static AkWwiseInitializationSettings m_Instance;

	[Token(Token = "0x4001310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static AkBasePlatformSettings m_ActivePlatformSettings;

	[Token(Token = "0x17000275")]
	public bool IsValid
	{
		[Token(Token = "0x6001985")]
		[Address(RVA = "0x83FE04", Offset = "0x83FE04", VA = "0x83FE04")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000276")]
	public int Count
	{
		[Token(Token = "0x6001986")]
		[Address(RVA = "0x83FE6C", Offset = "0x83FE6C", VA = "0x83FE6C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000277")]
	public static AkWwiseInitializationSettings Instance
	{
		[Token(Token = "0x600198A")]
		[Address(RVA = "0x83FED8", Offset = "0x83FED8", VA = "0x83FED8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000278")]
	public static AkBasePlatformSettings ActivePlatformSettings
	{
		[Token(Token = "0x600198C")]
		[Address(RVA = "0x8401CC", Offset = "0x8401CC", VA = "0x8401CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001987")]
	[Address(RVA = "0x83FEC0", Offset = "0x83FEC0", VA = "0x83FEC0", Slot = "12")]
	protected override AkCommonUserSettings GetUserSettings()
	{
		return null;
	}

	[Token(Token = "0x6001988")]
	[Address(RVA = "0x83FEC8", Offset = "0x83FEC8", VA = "0x83FEC8", Slot = "13")]
	protected override AkCommonAdvancedSettings GetAdvancedSettings()
	{
		return null;
	}

	[Token(Token = "0x6001989")]
	[Address(RVA = "0x83FED0", Offset = "0x83FED0", VA = "0x83FED0", Slot = "14")]
	protected override AkCommonCommSettings GetCommsSettings()
	{
		return null;
	}

	[Token(Token = "0x600198B")]
	[Address(RVA = "0x84000C", Offset = "0x84000C", VA = "0x84000C")]
	private static AkBasePlatformSettings GetPlatformSettings(string platformName)
	{
		return null;
	}

	[Token(Token = "0x600198D")]
	[Address(RVA = "0x8402F4", Offset = "0x8402F4", VA = "0x8402F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600198E")]
	[Address(RVA = "0x840458", Offset = "0x840458", VA = "0x840458")]
	public static bool InitializeSoundEngine()
	{
		return default(bool);
	}

	[Token(Token = "0x600198F")]
	[Address(RVA = "0x840A9C", Offset = "0x840A9C", VA = "0x840A9C")]
	public static bool ResetSoundEngine(bool isPlaying)
	{
		return default(bool);
	}

	[Token(Token = "0x6001990")]
	[Address(RVA = "0x840BA4", Offset = "0x840BA4", VA = "0x840BA4")]
	public static void TerminateSoundEngine()
	{
	}

	[Token(Token = "0x6001991")]
	[Address(RVA = "0x840D58", Offset = "0x840D58", VA = "0x840D58")]
	private static void SleepForMilliseconds(double milliseconds)
	{
	}

	[Token(Token = "0x6001992")]
	[Address(RVA = "0x840ECC", Offset = "0x840ECC", VA = "0x840ECC")]
	public AkWwiseInitializationSettings()
	{
	}
}
[Token(Token = "0x200028B")]
public class AkAcousticSurfaceArray : AkBaseArray<AkAcousticSurface>
{
	[Token(Token = "0x17000279")]
	protected override int StructureSize
	{
		[Token(Token = "0x6001995")]
		[Address(RVA = "0xA50EEC", Offset = "0xA50EEC", VA = "0xA50EEC", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001994")]
	[Address(RVA = "0xA50E8C", Offset = "0xA50E8C", VA = "0xA50E8C")]
	public AkAcousticSurfaceArray(int count)
	{
	}

	[Token(Token = "0x6001996")]
	[Address(RVA = "0xA50F4C", Offset = "0xA50F4C", VA = "0xA50F4C", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x6001997")]
	[Address(RVA = "0xA50FB4", Offset = "0xA50FB4", VA = "0xA50FB4", Slot = "9")]
	protected override AkAcousticSurface CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x6001998")]
	[Address(RVA = "0xA5101C", Offset = "0xA5101C", VA = "0xA5101C", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkAcousticSurface other)
	{
	}
}
[Token(Token = "0x200028C")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7498E8", Offset = "0x7498E8")]
public class AkAuxSendArray : IDisposable
{
	[Token(Token = "0x4001311")]
	private const int MAX_COUNT = 4;

	[Token(Token = "0x4001312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly int SIZE_OF_AKAUXSENDVALUE;

	[Token(Token = "0x4001313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr m_Buffer;

	[Token(Token = "0x4001314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_Count;

	[Token(Token = "0x1700027A")]
	public AkAuxSendValue Item
	{
		[Token(Token = "0x600199A")]
		[Address(RVA = "0xA56350", Offset = "0xA56350", VA = "0xA56350")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700027B")]
	public bool isFull
	{
		[Token(Token = "0x600199B")]
		[Address(RVA = "0xA564B4", Offset = "0xA564B4", VA = "0xA564B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001999")]
	[Address(RVA = "0xA562A0", Offset = "0xA562A0", VA = "0xA562A0")]
	public AkAuxSendArray()
	{
	}

	[Token(Token = "0x600199C")]
	[Address(RVA = "0xA5651C", Offset = "0xA5651C", VA = "0xA5651C", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x600199D")]
	[Address(RVA = "0xA565A8", Offset = "0xA565A8", VA = "0xA565A8", Slot = "1")]
	~AkAuxSendArray()
	{
	}

	[Token(Token = "0x600199E")]
	[Address(RVA = "0xA56614", Offset = "0xA56614", VA = "0xA56614")]
	public void Reset()
	{
	}

	[Token(Token = "0x600199F")]
	[Address(RVA = "0xA5661C", Offset = "0xA5661C", VA = "0xA5661C")]
	public bool Add(GameObject in_listenerGameObj, uint in_AuxBusID, float in_fValue)
	{
		return default(bool);
	}

	[Token(Token = "0x60019A0")]
	[Address(RVA = "0xA56734", Offset = "0xA56734", VA = "0xA56734")]
	public bool Add(uint in_AuxBusID, float in_fValue)
	{
		return default(bool);
	}

	[Token(Token = "0x60019A1")]
	[Address(RVA = "0xA56814", Offset = "0xA56814", VA = "0xA56814")]
	public bool Contains(GameObject in_listenerGameObj, uint in_AuxBusID)
	{
		return default(bool);
	}

	[Token(Token = "0x60019A2")]
	[Address(RVA = "0xA56954", Offset = "0xA56954", VA = "0xA56954")]
	public bool Contains(uint in_AuxBusID)
	{
		return default(bool);
	}

	[Token(Token = "0x60019A3")]
	[Address(RVA = "0xA56A4C", Offset = "0xA56A4C", VA = "0xA56A4C")]
	public AKRESULT SetValues(GameObject gameObject)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60019A4")]
	[Address(RVA = "0xA56B04", Offset = "0xA56B04", VA = "0xA56B04")]
	public AKRESULT GetValues(GameObject gameObject)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60019A5")]
	[Address(RVA = "0xA56BCC", Offset = "0xA56BCC", VA = "0xA56BCC")]
	public IntPtr GetBuffer()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60019A6")]
	[Address(RVA = "0xA56BD4", Offset = "0xA56BD4", VA = "0xA56BD4")]
	public int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60019A7")]
	[Address(RVA = "0xA56438", Offset = "0xA56438", VA = "0xA56438")]
	private IntPtr GetObjectPtr(int index)
	{
		return default(IntPtr);
	}
}
[Token(Token = "0x200028D")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x749920", Offset = "0x749920")]
public abstract class AkBaseArray<T> : IDisposable
{
	[Token(Token = "0x4001315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751878", Offset = "0x751878")]
	private int <Capacity>k__BackingField;

	[Token(Token = "0x4001316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private IntPtr m_Buffer;

	[Token(Token = "0x1700027C")]
	public int Capacity
	{
		[Token(Token = "0x60019AB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759028", Offset = "0x759028")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60019AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759038", Offset = "0x759038")]
		private set
		{
		}
	}

	[Token(Token = "0x1700027D")]
	protected abstract int StructureSize
	{
		[Token(Token = "0x60019AE")]
		get;
	}

	[Token(Token = "0x1700027E")]
	public T Item
	{
		[Token(Token = "0x60019B3")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x60019B4")]
		set
		{
		}
	}

	[Token(Token = "0x60019A8")]
	public AkBaseArray(int capacity)
	{
	}

	[Token(Token = "0x60019A9")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60019AA")]
	~AkBaseArray()
	{
	}

	[Token(Token = "0x60019AD")]
	public virtual int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60019AF")]
	protected virtual void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019B0")]
	protected virtual void ReleaseAllocatedMemoryFromReferenceAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019B1")]
	protected abstract T CreateNewReferenceFromIntPtr(IntPtr address);

	[Token(Token = "0x60019B2")]
	protected abstract void CloneIntoReferenceFromIntPtr(IntPtr address, T other);

	[Token(Token = "0x60019B5")]
	public IntPtr GetBuffer()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60019B6")]
	protected IntPtr GetObjectPtr(int index)
	{
		return default(IntPtr);
	}
}
[Token(Token = "0x200028E")]
public class AkChannelEmitterArray : IDisposable
{
	[Token(Token = "0x4001317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr m_Buffer;

	[Token(Token = "0x4001318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr m_Current;

	[Token(Token = "0x4001319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private uint m_MaxCount;

	[Token(Token = "0x400131A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751888", Offset = "0x751888")]
	private uint <Count>k__BackingField;

	[Token(Token = "0x1700027F")]
	public uint Count
	{
		[Token(Token = "0x60019B8")]
		[Address(RVA = "0xA5DE68", Offset = "0xA5DE68", VA = "0xA5DE68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759048", Offset = "0x759048")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xA5DE70", Offset = "0xA5DE70", VA = "0xA5DE70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759058", Offset = "0x759058")]
		private set
		{
		}
	}

	[Token(Token = "0x60019B7")]
	[Address(RVA = "0xA5DDD8", Offset = "0xA5DDD8", VA = "0xA5DDD8")]
	public AkChannelEmitterArray(uint in_Count)
	{
	}

	[Token(Token = "0x60019BA")]
	[Address(RVA = "0xA5DE78", Offset = "0xA5DE78", VA = "0xA5DE78", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60019BB")]
	[Address(RVA = "0xA5DF04", Offset = "0xA5DF04", VA = "0xA5DF04", Slot = "1")]
	~AkChannelEmitterArray()
	{
	}

	[Token(Token = "0x60019BC")]
	[Address(RVA = "0xA5DF70", Offset = "0xA5DF70", VA = "0xA5DF70")]
	public void Reset()
	{
	}

	[Token(Token = "0x60019BD")]
	[Address(RVA = "0xA5DF80", Offset = "0xA5DF80", VA = "0xA5DF80")]
	public void Add(Vector3 in_Pos, Vector3 in_Forward, Vector3 in_Top, uint in_ChannelMask)
	{
	}
}
[Token(Token = "0x200028F")]
public class AkDiffractionPathInfoArray : AkBaseArray<AkDiffractionPathInfo>
{
	[Token(Token = "0x17000280")]
	protected override int StructureSize
	{
		[Token(Token = "0x60019BF")]
		[Address(RVA = "0xA60FAC", Offset = "0xA60FAC", VA = "0xA60FAC", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019BE")]
	[Address(RVA = "0xA60F4C", Offset = "0xA60F4C", VA = "0xA60F4C")]
	public AkDiffractionPathInfoArray(int count)
	{
	}

	[Token(Token = "0x60019C0")]
	[Address(RVA = "0xA6100C", Offset = "0xA6100C", VA = "0xA6100C", Slot = "9")]
	protected override AkDiffractionPathInfo CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60019C1")]
	[Address(RVA = "0xA61074", Offset = "0xA61074", VA = "0xA61074", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkDiffractionPathInfo other)
	{
	}
}
[Token(Token = "0x2000290")]
public class AkExternalSourceInfoArray : AkBaseArray<AkExternalSourceInfo>
{
	[Token(Token = "0x17000281")]
	protected override int StructureSize
	{
		[Token(Token = "0x60019C3")]
		[Address(RVA = "0xA65C14", Offset = "0xA65C14", VA = "0xA65C14", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019C2")]
	[Address(RVA = "0xA65BB4", Offset = "0xA65BB4", VA = "0xA65BB4")]
	public AkExternalSourceInfoArray(int count)
	{
	}

	[Token(Token = "0x60019C4")]
	[Address(RVA = "0xA65C74", Offset = "0xA65C74", VA = "0xA65C74", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019C5")]
	[Address(RVA = "0xA65CDC", Offset = "0xA65CDC", VA = "0xA65CDC", Slot = "8")]
	protected override void ReleaseAllocatedMemoryFromReferenceAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019C6")]
	[Address(RVA = "0xA65D48", Offset = "0xA65D48", VA = "0xA65D48", Slot = "9")]
	protected override AkExternalSourceInfo CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60019C7")]
	[Address(RVA = "0xA65DB0", Offset = "0xA65DB0", VA = "0xA65DB0", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkExternalSourceInfo other)
	{
	}
}
[Token(Token = "0x2000291")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x749958", Offset = "0x749958")]
public class AkMIDIPostArray
{
	[Token(Token = "0x400131B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly int m_Count;

	[Token(Token = "0x400131C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private readonly int SIZE_OF;

	[Token(Token = "0x400131D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr m_Buffer;

	[Token(Token = "0x17000282")]
	public AkMIDIPost Item
	{
		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x998244", Offset = "0x998244", VA = "0x998244")]
		get
		{
			return null;
		}
		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x998364", Offset = "0x998364", VA = "0x998364")]
		set
		{
		}
	}

	[Token(Token = "0x60019C8")]
	[Address(RVA = "0x998184", Offset = "0x998184", VA = "0x998184")]
	public AkMIDIPostArray(int size)
	{
	}

	[Token(Token = "0x60019CB")]
	[Address(RVA = "0x99847C", Offset = "0x99847C", VA = "0x99847C", Slot = "1")]
	~AkMIDIPostArray()
	{
	}

	[Token(Token = "0x60019CC")]
	[Address(RVA = "0x99853C", Offset = "0x99853C", VA = "0x99853C")]
	public void PostOnEvent(uint in_eventID, GameObject gameObject)
	{
	}

	[Token(Token = "0x60019CD")]
	[Address(RVA = "0x998600", Offset = "0x998600", VA = "0x998600")]
	public void PostOnEvent(uint in_eventID, GameObject gameObject, int count)
	{
	}

	[Token(Token = "0x60019CE")]
	[Address(RVA = "0x998718", Offset = "0x998718", VA = "0x998718")]
	public IntPtr GetBuffer()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60019CF")]
	[Address(RVA = "0x998720", Offset = "0x998720", VA = "0x998720")]
	public int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60019D0")]
	[Address(RVA = "0x998328", Offset = "0x998328", VA = "0x998328")]
	private IntPtr GetObjectPtr(int index)
	{
		return default(IntPtr);
	}
}
[Token(Token = "0x2000292")]
public class AkObjectInfoArray : AkBaseArray<AkObjectInfo>
{
	[Token(Token = "0x17000283")]
	protected override int StructureSize
	{
		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x99B960", Offset = "0x99B960", VA = "0x99B960", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019D1")]
	[Address(RVA = "0x99B900", Offset = "0x99B900", VA = "0x99B900")]
	public AkObjectInfoArray(int count)
	{
	}

	[Token(Token = "0x60019D3")]
	[Address(RVA = "0x99B9C0", Offset = "0x99B9C0", VA = "0x99B9C0", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019D4")]
	[Address(RVA = "0x99BA28", Offset = "0x99BA28", VA = "0x99BA28", Slot = "9")]
	protected override AkObjectInfo CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60019D5")]
	[Address(RVA = "0x99BA90", Offset = "0x99BA90", VA = "0x99BA90", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkObjectInfo other)
	{
	}
}
[Token(Token = "0x2000293")]
public class AkObstructionOcclusionValuesArray : AkBaseArray<AkObstructionOcclusionValues>
{
	[Token(Token = "0x17000284")]
	protected override int StructureSize
	{
		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x99CB38", Offset = "0x99CB38", VA = "0x99CB38", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019D6")]
	[Address(RVA = "0x99CAD8", Offset = "0x99CAD8", VA = "0x99CAD8")]
	public AkObstructionOcclusionValuesArray(int count)
	{
	}

	[Token(Token = "0x60019D8")]
	[Address(RVA = "0x99CB98", Offset = "0x99CB98", VA = "0x99CB98", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019D9")]
	[Address(RVA = "0x99CC00", Offset = "0x99CC00", VA = "0x99CC00", Slot = "9")]
	protected override AkObstructionOcclusionValues CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60019DA")]
	[Address(RVA = "0x99CC68", Offset = "0x99CC68", VA = "0x99CC68", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkObstructionOcclusionValues other)
	{
	}
}
[Token(Token = "0x2000294")]
public class AkPositionArray : IDisposable
{
	[Token(Token = "0x400131E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr m_Buffer;

	[Token(Token = "0x400131F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr m_Current;

	[Token(Token = "0x4001320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private uint m_MaxCount;

	[Token(Token = "0x4001321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751898", Offset = "0x751898")]
	private uint <Count>k__BackingField;

	[Token(Token = "0x17000285")]
	public uint Count
	{
		[Token(Token = "0x60019DC")]
		[Address(RVA = "0x9A0D20", Offset = "0x9A0D20", VA = "0x9A0D20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759068", Offset = "0x759068")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60019DD")]
		[Address(RVA = "0x9A0D28", Offset = "0x9A0D28", VA = "0x9A0D28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759078", Offset = "0x759078")]
		private set
		{
		}
	}

	[Token(Token = "0x60019DB")]
	[Address(RVA = "0x9A0C90", Offset = "0x9A0C90", VA = "0x9A0C90")]
	public AkPositionArray(uint in_Count)
	{
	}

	[Token(Token = "0x60019DE")]
	[Address(RVA = "0x9A0D30", Offset = "0x9A0D30", VA = "0x9A0D30", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60019DF")]
	[Address(RVA = "0x9A0DBC", Offset = "0x9A0DBC", VA = "0x9A0DBC", Slot = "1")]
	~AkPositionArray()
	{
	}

	[Token(Token = "0x60019E0")]
	[Address(RVA = "0x9A0E28", Offset = "0x9A0E28", VA = "0x9A0E28")]
	public void Reset()
	{
	}

	[Token(Token = "0x60019E1")]
	[Address(RVA = "0x9A0E38", Offset = "0x9A0E38", VA = "0x9A0E38")]
	public void Add(Vector3 in_Pos, Vector3 in_Forward, Vector3 in_Top)
	{
	}
}
[Token(Token = "0x2000295")]
public class AkReflectionPathInfoArray : AkBaseArray<AkReflectionPathInfo>
{
	[Token(Token = "0x17000286")]
	protected override int StructureSize
	{
		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x9A4104", Offset = "0x9A4104", VA = "0x9A4104", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019E2")]
	[Address(RVA = "0x9A40A4", Offset = "0x9A40A4", VA = "0x9A40A4")]
	public AkReflectionPathInfoArray(int count)
	{
	}

	[Token(Token = "0x60019E4")]
	[Address(RVA = "0x9A4164", Offset = "0x9A4164", VA = "0x9A4164", Slot = "9")]
	protected override AkReflectionPathInfo CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60019E5")]
	[Address(RVA = "0x9A41CC", Offset = "0x9A41CC", VA = "0x9A41CC", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkReflectionPathInfo other)
	{
	}
}
[Token(Token = "0x2000296")]
public class AkSourceSettingsArray : AkBaseArray<AkSourceSettings>
{
	[Token(Token = "0x17000287")]
	protected override int StructureSize
	{
		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x838098", Offset = "0x838098", VA = "0x838098", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019E6")]
	[Address(RVA = "0x838038", Offset = "0x838038", VA = "0x838038")]
	public AkSourceSettingsArray(int count)
	{
	}

	[Token(Token = "0x60019E8")]
	[Address(RVA = "0x8380F8", Offset = "0x8380F8", VA = "0x8380F8", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019E9")]
	[Address(RVA = "0x838160", Offset = "0x838160", VA = "0x838160", Slot = "9")]
	protected override AkSourceSettings CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60019EA")]
	[Address(RVA = "0x8381C8", Offset = "0x8381C8", VA = "0x8381C8", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkSourceSettings other)
	{
	}
}
[Token(Token = "0x2000297")]
public class AkTriangleArray : AkBaseArray<AkTriangle>
{
	[Token(Token = "0x17000288")]
	protected override int StructureSize
	{
		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x83D090", Offset = "0x83D090", VA = "0x83D090", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019EB")]
	[Address(RVA = "0x83ADA4", Offset = "0x83ADA4", VA = "0x83ADA4")]
	public AkTriangleArray(int count)
	{
	}

	[Token(Token = "0x60019ED")]
	[Address(RVA = "0x83D0F0", Offset = "0x83D0F0", VA = "0x83D0F0", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019EE")]
	[Address(RVA = "0x83D158", Offset = "0x83D158", VA = "0x83D158", Slot = "9")]
	protected override AkTriangle CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60019EF")]
	[Address(RVA = "0x83D1C0", Offset = "0x83D1C0", VA = "0x83D1C0", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkTriangle other)
	{
	}
}
[Token(Token = "0x2000298")]
public class AkVertexArray : AkBaseArray<AkVertex>
{
	[Token(Token = "0x17000289")]
	protected override int StructureSize
	{
		[Token(Token = "0x60019F1")]
		[Address(RVA = "0x83FB34", Offset = "0x83FB34", VA = "0x83FB34", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019F0")]
	[Address(RVA = "0x83ABD0", Offset = "0x83ABD0", VA = "0x83ABD0")]
	public AkVertexArray(int count)
	{
	}

	[Token(Token = "0x60019F2")]
	[Address(RVA = "0x83FB94", Offset = "0x83FB94", VA = "0x83FB94", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60019F3")]
	[Address(RVA = "0x83FBFC", Offset = "0x83FBFC", VA = "0x83FBFC", Slot = "9")]
	protected override AkVertex CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60019F4")]
	[Address(RVA = "0x83FC64", Offset = "0x83FC64", VA = "0x83FC64", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkVertex other)
	{
	}
}
[Token(Token = "0x2000299")]
public class WwiseAcousticTextureReference : WwiseObjectReference
{
	[Token(Token = "0x4001322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700028A")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x60019F5")]
		[Address(RVA = "0x833AF4", Offset = "0x833AF4", VA = "0x833AF4", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x60019F6")]
	[Address(RVA = "0x833B5C", Offset = "0x833B5C", VA = "0x833B5C")]
	public WwiseAcousticTextureReference()
	{
	}
}
[Token(Token = "0x200029A")]
public class WwiseAuxBusReference : WwiseObjectReference
{
	[Token(Token = "0x4001323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700028B")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x833C20", Offset = "0x833C20", VA = "0x833C20", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x60019F9")]
	[Address(RVA = "0x833C88", Offset = "0x833C88", VA = "0x833C88")]
	public WwiseAuxBusReference()
	{
	}
}
[Token(Token = "0x200029B")]
public class WwiseBankReference : WwiseObjectReference
{
	[Token(Token = "0x4001324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700028C")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x60019FB")]
		[Address(RVA = "0x833CE0", Offset = "0x833CE0", VA = "0x833CE0", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x60019FC")]
	[Address(RVA = "0x833D48", Offset = "0x833D48", VA = "0x833D48")]
	public WwiseBankReference()
	{
	}
}
[Token(Token = "0x200029C")]
public class WwiseEventReference : WwiseObjectReference
{
	[Token(Token = "0x4001325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700028D")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x60019FE")]
		[Address(RVA = "0x833DA0", Offset = "0x833DA0", VA = "0x833DA0", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x60019FF")]
	[Address(RVA = "0x833E08", Offset = "0x833E08", VA = "0x833E08")]
	public WwiseEventReference()
	{
	}
}
[Token(Token = "0x200029D")]
public abstract class WwiseObjectReference : ScriptableObject
{
	[Token(Token = "0x4001326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AkShowOnly]
	[SerializeField]
	private string objectName;

	[Token(Token = "0x4001327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AkShowOnly]
	[SerializeField]
	private uint id;

	[Token(Token = "0x4001328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AkShowOnly]
	[SerializeField]
	private string guid;

	[Token(Token = "0x1700028E")]
	public Guid Guid
	{
		[Token(Token = "0x6001A01")]
		[Address(RVA = "0x833F20", Offset = "0x833F20", VA = "0x833F20")]
		get
		{
			return default(Guid);
		}
	}

	[Token(Token = "0x1700028F")]
	public string ObjectName
	{
		[Token(Token = "0x6001A02")]
		[Address(RVA = "0x833FC4", Offset = "0x833FC4", VA = "0x833FC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000290")]
	public virtual string DisplayName
	{
		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x833FCC", Offset = "0x833FCC", VA = "0x833FCC", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000291")]
	public uint Id
	{
		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x833FD4", Offset = "0x833FD4", VA = "0x833FD4")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000292")]
	public abstract WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001A05")]
		get;
	}

	[Token(Token = "0x6001A06")]
	[Address(RVA = "0x833B60", Offset = "0x833B60", VA = "0x833B60")]
	protected WwiseObjectReference()
	{
	}
}
[Token(Token = "0x200029E")]
public abstract class WwiseGroupValueObjectReference : WwiseObjectReference
{
	[Token(Token = "0x17000293")]
	public abstract WwiseObjectReference GroupObjectReference
	{
		[Token(Token = "0x6001A07")]
		get;
		[Token(Token = "0x6001A08")]
		set;
	}

	[Token(Token = "0x17000294")]
	public abstract WwiseObjectType GroupWwiseObjectType
	{
		[Token(Token = "0x6001A09")]
		get;
	}

	[Token(Token = "0x17000295")]
	public override string DisplayName
	{
		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x833E60", Offset = "0x833E60", VA = "0x833E60", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001A0B")]
	[Address(RVA = "0x833F1C", Offset = "0x833F1C", VA = "0x833F1C")]
	protected WwiseGroupValueObjectReference()
	{
	}
}
[Token(Token = "0x200029F")]
public enum WwiseObjectType
{
	[Token(Token = "0x400132A")]
	None,
	[Token(Token = "0x400132B")]
	AuxBus,
	[Token(Token = "0x400132C")]
	Bus,
	[Token(Token = "0x400132D")]
	Event,
	[Token(Token = "0x400132E")]
	Folder,
	[Token(Token = "0x400132F")]
	PhysicalFolder,
	[Token(Token = "0x4001330")]
	Project,
	[Token(Token = "0x4001331")]
	Soundbank,
	[Token(Token = "0x4001332")]
	State,
	[Token(Token = "0x4001333")]
	StateGroup,
	[Token(Token = "0x4001334")]
	Switch,
	[Token(Token = "0x4001335")]
	SwitchGroup,
	[Token(Token = "0x4001336")]
	WorkUnit,
	[Token(Token = "0x4001337")]
	GameParameter,
	[Token(Token = "0x4001338")]
	Trigger,
	[Token(Token = "0x4001339")]
	AcousticTexture
}
[Token(Token = "0x20002A0")]
public class WwiseRtpcReference : WwiseObjectReference
{
	[Token(Token = "0x400133A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x17000296")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x833FDC", Offset = "0x833FDC", VA = "0x833FDC", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x6001A0D")]
	[Address(RVA = "0x834044", Offset = "0x834044", VA = "0x834044")]
	public WwiseRtpcReference()
	{
	}
}
[Token(Token = "0x20002A1")]
public class WwiseStateGroupReference : WwiseObjectReference
{
	[Token(Token = "0x400133B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x17000297")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x83409C", Offset = "0x83409C", VA = "0x83409C", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x6001A10")]
	[Address(RVA = "0x834104", Offset = "0x834104", VA = "0x834104")]
	public WwiseStateGroupReference()
	{
	}
}
[Token(Token = "0x20002A2")]
public class WwiseStateReference : WwiseGroupValueObjectReference
{
	[Token(Token = "0x400133C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x400133D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly WwiseObjectType MyGroupWwiseObjectType;

	[Token(Token = "0x400133E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AkShowOnly]
	[SerializeField]
	private WwiseStateGroupReference WwiseStateGroupReference;

	[Token(Token = "0x17000298")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001A12")]
		[Address(RVA = "0x83415C", Offset = "0x83415C", VA = "0x83415C", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x17000299")]
	public override WwiseObjectReference GroupObjectReference
	{
		[Token(Token = "0x6001A13")]
		[Address(RVA = "0x8341C4", Offset = "0x8341C4", VA = "0x8341C4", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001A14")]
		[Address(RVA = "0x8341CC", Offset = "0x8341CC", VA = "0x8341CC", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x1700029A")]
	public override WwiseObjectType GroupWwiseObjectType
	{
		[Token(Token = "0x6001A15")]
		[Address(RVA = "0x83425C", Offset = "0x83425C", VA = "0x83425C", Slot = "8")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x6001A16")]
	[Address(RVA = "0x8342C4", Offset = "0x8342C4", VA = "0x8342C4")]
	public WwiseStateReference()
	{
	}
}
[Token(Token = "0x20002A3")]
public class WwiseSwitchGroupReference : WwiseObjectReference
{
	[Token(Token = "0x400133F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700029B")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001A18")]
		[Address(RVA = "0x83432C", Offset = "0x83432C", VA = "0x83432C", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x6001A19")]
	[Address(RVA = "0x834394", Offset = "0x834394", VA = "0x834394")]
	public WwiseSwitchGroupReference()
	{
	}
}
[Token(Token = "0x20002A4")]
public class WwiseSwitchReference : WwiseGroupValueObjectReference
{
	[Token(Token = "0x4001340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x4001341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly WwiseObjectType MyGroupWwiseObjectType;

	[Token(Token = "0x4001342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AkShowOnly]
	[SerializeField]
	private WwiseSwitchGroupReference WwiseSwitchGroupReference;

	[Token(Token = "0x1700029C")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0x8343EC", Offset = "0x8343EC", VA = "0x8343EC", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x1700029D")]
	public override WwiseObjectReference GroupObjectReference
	{
		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0x834454", Offset = "0x834454", VA = "0x834454", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0x83445C", Offset = "0x83445C", VA = "0x83445C", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x1700029E")]
	public override WwiseObjectType GroupWwiseObjectType
	{
		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x8344EC", Offset = "0x8344EC", VA = "0x8344EC", Slot = "8")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x6001A1F")]
	[Address(RVA = "0x834554", Offset = "0x834554", VA = "0x834554")]
	public WwiseSwitchReference()
	{
	}
}
[Token(Token = "0x20002A5")]
public class WwiseTriggerReference : WwiseObjectReference
{
	[Token(Token = "0x4001343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700029F")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x8345BC", Offset = "0x8345BC", VA = "0x8345BC", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x6001A22")]
	[Address(RVA = "0x834624", Offset = "0x834624", VA = "0x834624")]
	public WwiseTriggerReference()
	{
	}
}
[Token(Token = "0x20002A6")]
public class AkMacSettings : AkWwiseInitializationSettings.CommonPlatformSettings
{
	[Token(Token = "0x6001A24")]
	[Address(RVA = "0x998728", Offset = "0x998728", VA = "0x998728")]
	public AkMacSettings()
	{
	}
}
[Token(Token = "0x20002A7")]
public class AkWindowsSettings : AkWwiseInitializationSettings.PlatformSettings
{
	[Serializable]
	[Token(Token = "0x20004E6")]
	public class PlatformAdvancedSettings : AkCommonAdvancedSettings
	{
		[Token(Token = "0x2000673")]
		public enum AudioAPI
		{
			[Token(Token = "0x40022F0")]
			None = 0,
			[Token(Token = "0x40022F1")]
			Wasapi = 1,
			[Token(Token = "0x40022F2")]
			XAudio2 = 2,
			[Token(Token = "0x40022F3")]
			DirectSound = 4,
			[Token(Token = "0x40022F4")]
			Default = -1
		}

		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x756468", Offset = "0x756468")]
		[AttributeAttribute(Name = "AkEnumFlagAttribute", RVA = "0x756468", Offset = "0x756468")]
		public AudioAPI m_AudioAPI;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7564F0", Offset = "0x7564F0")]
		public bool m_GlobalFocus;

		[Token(Token = "0x6002486")]
		[Address(RVA = "0x83FDE8", Offset = "0x83FDE8", VA = "0x83FDE8", Slot = "7")]
		public override void CopyTo(AkPlatformInitSettings settings)
		{
		}

		[Token(Token = "0x6002487")]
		[Address(RVA = "0x83FDEC", Offset = "0x83FDEC", VA = "0x83FDEC")]
		public PlatformAdvancedSettings()
		{
		}
	}

	[Token(Token = "0x4001344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public AkCommonUserSettings UserSettings;

	[Token(Token = "0x4001345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public PlatformAdvancedSettings AdvancedSettings;

	[Token(Token = "0x4001346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public AkCommonCommSettings CommsSettings;

	[Token(Token = "0x6001A25")]
	[Address(RVA = "0x83FD08", Offset = "0x83FD08", VA = "0x83FD08", Slot = "12")]
	protected override AkCommonUserSettings GetUserSettings()
	{
		return null;
	}

	[Token(Token = "0x6001A26")]
	[Address(RVA = "0x83FD10", Offset = "0x83FD10", VA = "0x83FD10", Slot = "13")]
	protected override AkCommonAdvancedSettings GetAdvancedSettings()
	{
		return null;
	}

	[Token(Token = "0x6001A27")]
	[Address(RVA = "0x83FD18", Offset = "0x83FD18", VA = "0x83FD18", Slot = "14")]
	protected override AkCommonCommSettings GetCommsSettings()
	{
		return null;
	}

	[Token(Token = "0x6001A28")]
	[Address(RVA = "0x83FD20", Offset = "0x83FD20", VA = "0x83FD20")]
	public AkWindowsSettings()
	{
	}
}
[Token(Token = "0x20002A8")]
public enum MultiPositionTypeLabel
{
	[Token(Token = "0x4001348")]
	Simple_Mode,
	[Token(Token = "0x4001349")]
	Large_Mode,
	[Token(Token = "0x400134A")]
	MultiPosition_Mode
}
[Token(Token = "0x20002A9")]
public class AkMultiPosEvent
{
	[Token(Token = "0x400134B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool eventIsPlaying;

	[Token(Token = "0x400134C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AkAmbient> list;

	[Token(Token = "0x6001A29")]
	[Address(RVA = "0x999FD4", Offset = "0x999FD4", VA = "0x999FD4")]
	public void FinishedPlaying(object in_cookie, AkCallbackType in_type, object in_info)
	{
	}

	[Token(Token = "0x6001A2A")]
	[Address(RVA = "0x999FDC", Offset = "0x999FDC", VA = "0x999FDC")]
	public AkMultiPosEvent()
	{
	}
}
[Token(Token = "0x20002AA")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749990", Offset = "0x749990")]
public class AkAmbient : AkEvent
{
	[Token(Token = "0x400134D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<uint, AkMultiPosEvent> multiPosEventTree;

	[Token(Token = "0x400134E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AkMultiPositionType MultiPositionType;

	[Token(Token = "0x400134F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public MultiPositionTypeLabel multiPositionTypeLabel;

	[Token(Token = "0x4001350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AkAmbientLargeModePositioner[] LargeModePositions;

	[Token(Token = "0x4001351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	[SerializeField]
	public List<Vector3> multiPositionArray;

	[Token(Token = "0x6001A2B")]
	[Address(RVA = "0xA510C0", Offset = "0xA510C0", VA = "0xA510C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001A2C")]
	[Address(RVA = "0xA51540", Offset = "0xA51540", VA = "0xA51540", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001A2D")]
	[Address(RVA = "0xA51A1C", Offset = "0xA51A1C", VA = "0xA51A1C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001A2E")]
	[Address(RVA = "0xA51BE8", Offset = "0xA51BE8", VA = "0xA51BE8", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001A2F")]
	[Address(RVA = "0xA52000", Offset = "0xA52000", VA = "0xA52000")]
	public void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001A30")]
	[Address(RVA = "0xA51370", Offset = "0xA51370", VA = "0xA51370")]
	public AkPositionArray BuildMultiDirectionArray(AkMultiPosEvent eventPosList)
	{
		return null;
	}

	[Token(Token = "0x6001A31")]
	[Address(RVA = "0xA51784", Offset = "0xA51784", VA = "0xA51784")]
	private AkPositionArray BuildAkPositionArray()
	{
		return null;
	}

	[Token(Token = "0x6001A32")]
	[Address(RVA = "0xA520DC", Offset = "0xA520DC", VA = "0xA520DC")]
	public AkAmbient()
	{
	}
}
[Token(Token = "0x20002AB")]
public class AkAmbientLargeModePositioner : MonoBehaviour
{
	[Token(Token = "0x170002A0")]
	public Vector3 Position
	{
		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xA52070", Offset = "0xA52070", VA = "0xA52070")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170002A1")]
	public Vector3 Forward
	{
		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xA52094", Offset = "0xA52094", VA = "0xA52094")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170002A2")]
	public Vector3 Up
	{
		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xA520B8", Offset = "0xA520B8", VA = "0xA520B8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001A37")]
	[Address(RVA = "0xA521F0", Offset = "0xA521F0", VA = "0xA521F0")]
	public AkAmbientLargeModePositioner()
	{
	}
}
[Token(Token = "0x20002AC")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7499C8", Offset = "0x7499C8")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7499C8", Offset = "0x7499C8")]
[DisallowMultipleComponent]
public class AkAudioListener : MonoBehaviour
{
	[Token(Token = "0x20004E7")]
	public class BaseListenerList
	{
		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<ulong> listenerIdList;

		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<AkAudioListener> listenerList;

		[Token(Token = "0x170003C0")]
		public List<AkAudioListener> ListenerList
		{
			[Token(Token = "0x6002488")]
			[Address(RVA = "0xA555DC", Offset = "0xA555DC", VA = "0xA555DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002489")]
		[Address(RVA = "0xA555E4", Offset = "0xA555E4", VA = "0xA555E4", Slot = "4")]
		public virtual bool Add(AkAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0xA556D8", Offset = "0xA556D8", VA = "0xA556D8", Slot = "5")]
		public virtual bool Remove(AkAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0xA557CC", Offset = "0xA557CC", VA = "0xA557CC")]
		public ulong[] GetListenerIds()
		{
			return null;
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0xA55824", Offset = "0xA55824", VA = "0xA55824")]
		public BaseListenerList()
		{
		}
	}

	[Token(Token = "0x20004E8")]
	public class DefaultListenerList : BaseListenerList
	{
		[Token(Token = "0x600248D")]
		[Address(RVA = "0xA558BC", Offset = "0xA558BC", VA = "0xA558BC", Slot = "4")]
		public override bool Add(AkAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600248E")]
		[Address(RVA = "0xA55994", Offset = "0xA55994", VA = "0xA55994", Slot = "5")]
		public override bool Remove(AkAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600248F")]
		[Address(RVA = "0xA555D8", Offset = "0xA555D8", VA = "0xA555D8")]
		public DefaultListenerList()
		{
		}
	}

	[Token(Token = "0x4001352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly DefaultListenerList defaultListeners;

	[Token(Token = "0x4001353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong akGameObjectID;

	[Token(Token = "0x4001354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<AkGameObj> EmittersToStartListeningTo;

	[Token(Token = "0x4001355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<AkGameObj> EmittersToStopListeningTo;

	[Token(Token = "0x4001356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isDefaultListener;

	[Token(Token = "0x4001357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	public int listenerId;

	[Token(Token = "0x170002A3")]
	public static DefaultListenerList DefaultListeners
	{
		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xA54C70", Offset = "0xA54C70", VA = "0xA54C70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001A39")]
	[Address(RVA = "0xA54CD8", Offset = "0xA54CD8", VA = "0xA54CD8")]
	public void StartListeningToEmitter(AkGameObj emitter)
	{
	}

	[Token(Token = "0x6001A3A")]
	[Address(RVA = "0xA54D5C", Offset = "0xA54D5C", VA = "0xA54D5C")]
	public void StopListeningToEmitter(AkGameObj emitter)
	{
	}

	[Token(Token = "0x6001A3B")]
	[Address(RVA = "0xA54DE0", Offset = "0xA54DE0", VA = "0xA54DE0")]
	public void SetIsDefaultListener(bool isDefault)
	{
	}

	[Token(Token = "0x6001A3C")]
	[Address(RVA = "0xA54F40", Offset = "0xA54F40", VA = "0xA54F40")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A3D")]
	[Address(RVA = "0xA550E4", Offset = "0xA550E4", VA = "0xA550E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001A3E")]
	[Address(RVA = "0xA551C0", Offset = "0xA551C0", VA = "0xA551C0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001A3F")]
	[Address(RVA = "0xA5529C", Offset = "0xA5529C", VA = "0xA5529C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A40")]
	[Address(RVA = "0xA55404", Offset = "0xA55404", VA = "0xA55404")]
	public ulong GetAkGameObjectID()
	{
		return default(ulong);
	}

	[Token(Token = "0x6001A41")]
	[Address(RVA = "0xA5540C", Offset = "0xA5540C", VA = "0xA5540C")]
	public void Migrate14()
	{
	}

	[Token(Token = "0x6001A42")]
	[Address(RVA = "0xA554D0", Offset = "0xA554D0", VA = "0xA554D0")]
	public AkAudioListener()
	{
	}
}
[Token(Token = "0x20002AD")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749A60", Offset = "0x749A60")]
[ExecuteInEditMode]
public class AkBank : AkTriggerHandler
{
	[Token(Token = "0x4001358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Bank data;

	[Token(Token = "0x4001359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool decodeBank;

	[Token(Token = "0x400135A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool loadAsynchronous;

	[Token(Token = "0x400135B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool saveDecodedBank;

	[Token(Token = "0x400135C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<int> unloadTriggerList;

	[Token(Token = "0x400135D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x751A38", Offset = "0x751A38")]
	private string bankNameInternal;

	[Token(Token = "0x400135E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x751A94", Offset = "0x751A94")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x170002A4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75B894", Offset = "0x75B894")]
	public string bankName
	{
		[Token(Token = "0x6001A49")]
		[Address(RVA = "0xA57554", Offset = "0xA57554", VA = "0xA57554")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002A5")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75B8CC", Offset = "0x75B8CC")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0xA575C4", Offset = "0xA575C4", VA = "0xA575C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001A44")]
	[Address(RVA = "0xA572C4", Offset = "0xA572C4", VA = "0xA572C4", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001A45")]
	[Address(RVA = "0xA573B4", Offset = "0xA573B4", VA = "0xA573B4", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001A46")]
	[Address(RVA = "0xA5743C", Offset = "0xA5743C", VA = "0xA5743C", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001A47")]
	[Address(RVA = "0xA5739C", Offset = "0xA5739C", VA = "0xA5739C")]
	public void UnloadBank(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001A48")]
	[Address(RVA = "0xA5747C", Offset = "0xA5747C", VA = "0xA5747C", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001A4B")]
	[Address(RVA = "0xA5768C", Offset = "0xA5768C", VA = "0xA5768C")]
	public AkBank()
	{
	}
}
[Token(Token = "0x20002AE")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749AAC", Offset = "0x749AAC")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749AAC", Offset = "0x749AAC")]
public class AkEmitterObstructionOcclusion : AkObstructionOcclusion
{
	[Token(Token = "0x400135F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AkGameObj m_gameObj;

	[Token(Token = "0x6001A4C")]
	[Address(RVA = "0xA61D4C", Offset = "0xA61D4C", VA = "0xA61D4C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A4D")]
	[Address(RVA = "0xA61DB0", Offset = "0xA61DB0", VA = "0xA61DB0", Slot = "4")]
	protected override void UpdateCurrentListenerList()
	{
	}

	[Token(Token = "0x6001A4E")]
	[Address(RVA = "0xA61F90", Offset = "0xA61F90", VA = "0xA61F90", Slot = "5")]
	protected override void SetObstructionOcclusion(KeyValuePair<AkAudioListener, ObstructionOcclusionValue> ObsOccPair)
	{
	}

	[Token(Token = "0x6001A4F")]
	[Address(RVA = "0xA620CC", Offset = "0xA620CC", VA = "0xA620CC")]
	public AkEmitterObstructionOcclusion()
	{
	}
}
[Token(Token = "0x20002AF")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749B34", Offset = "0x749B34")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749B34", Offset = "0x749B34")]
[ExecuteInEditMode]
public class AkEnvironment : MonoBehaviour
{
	[Token(Token = "0x20004E9")]
	public class AkEnvironment_CompareByPriority : IComparer<AkEnvironment>
	{
		[Token(Token = "0x6002490")]
		[Address(RVA = "0xA62F78", Offset = "0xA62F78", VA = "0xA62F78", Slot = "5")]
		public virtual int Compare(AkEnvironment a, AkEnvironment b)
		{
			return default(int);
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0xA62F68", Offset = "0xA62F68", VA = "0xA62F68")]
		public AkEnvironment_CompareByPriority()
		{
		}
	}

	[Token(Token = "0x20004EA")]
	public class AkEnvironment_CompareBySelectionAlgorithm : AkEnvironment_CompareByPriority
	{
		[Token(Token = "0x6002492")]
		[Address(RVA = "0xA6301C", Offset = "0xA6301C", VA = "0xA6301C", Slot = "5")]
		public override int Compare(AkEnvironment a, AkEnvironment b)
		{
			return default(int);
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0xA62F70", Offset = "0xA62F70", VA = "0xA62F70")]
		public AkEnvironment_CompareBySelectionAlgorithm()
		{
		}
	}

	[Token(Token = "0x4001360")]
	public const int MAX_NB_ENVIRONMENTS = 4;

	[Token(Token = "0x4001361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AkEnvironment_CompareByPriority s_compareByPriority;

	[Token(Token = "0x4001362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static AkEnvironment_CompareBySelectionAlgorithm s_compareBySelectionAlgorithm;

	[Token(Token = "0x4001363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool excludeOthers;

	[Token(Token = "0x4001364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isDefault;

	[Token(Token = "0x4001365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AuxBus data;

	[Token(Token = "0x4001366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751AF0", Offset = "0x751AF0")]
	private Collider <Collider>k__BackingField;

	[Token(Token = "0x4001367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int priority;

	[Token(Token = "0x4001368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x751B00", Offset = "0x751B00")]
	private int auxBusIdInternal;

	[Token(Token = "0x4001369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x751B5C", Offset = "0x751B5C")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x170002A6")]
	public Collider Collider
	{
		[Token(Token = "0x6001A50")]
		[Address(RVA = "0xA62D0C", Offset = "0xA62D0C", VA = "0xA62D0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759088", Offset = "0x759088")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001A51")]
		[Address(RVA = "0xA62D14", Offset = "0xA62D14", VA = "0xA62D14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759098", Offset = "0x759098")]
		private set
		{
		}
	}

	[Token(Token = "0x170002A7")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75B904", Offset = "0x75B904")]
	public int m_auxBusID
	{
		[Token(Token = "0x6001A53")]
		[Address(RVA = "0xA62D74", Offset = "0xA62D74", VA = "0xA62D74")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002A8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75B93C", Offset = "0x75B93C")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001A54")]
		[Address(RVA = "0xA62D84", Offset = "0xA62D84", VA = "0xA62D84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001A52")]
	[Address(RVA = "0xA62D1C", Offset = "0xA62D1C", VA = "0xA62D1C")]
	public void Awake()
	{
	}

	[Token(Token = "0x6001A55")]
	[Address(RVA = "0xA62E4C", Offset = "0xA62E4C", VA = "0xA62E4C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7590A8", Offset = "0x7590A8")]
	public uint GetAuxBusID()
	{
		return default(uint);
	}

	[Token(Token = "0x6001A56")]
	[Address(RVA = "0xA62E64", Offset = "0xA62E64", VA = "0xA62E64")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7590E0", Offset = "0x7590E0")]
	public Collider GetCollider()
	{
		return null;
	}

	[Token(Token = "0x6001A57")]
	[Address(RVA = "0xA62E6C", Offset = "0xA62E6C", VA = "0xA62E6C")]
	public AkEnvironment()
	{
	}
}
[Token(Token = "0x20002B0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749BCC", Offset = "0x749BCC")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749BCC", Offset = "0x749BCC")]
[ExecuteInEditMode]
public class AkEnvironmentPortal : MonoBehaviour
{
	[Token(Token = "0x400136A")]
	public const int MAX_ENVIRONMENTS_PER_PORTAL = 2;

	[Token(Token = "0x400136B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 axis;

	[Token(Token = "0x400136C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AkEnvironment[] environments;

	[Token(Token = "0x400136D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BoxCollider m_BoxCollider;

	[Token(Token = "0x170002A9")]
	private BoxCollider BoxCollider
	{
		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xA6307C", Offset = "0xA6307C", VA = "0xA6307C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002AA")]
	public bool EnvironmentsShareAuxBus
	{
		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0xA63110", Offset = "0xA63110", VA = "0xA63110")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001A5B")]
	[Address(RVA = "0xA632B8", Offset = "0xA632B8", VA = "0xA632B8")]
	public float GetAuxSendValueForPosition(Vector3 in_position, int index)
	{
		return default(float);
	}

	[Token(Token = "0x6001A5C")]
	[Address(RVA = "0xA6354C", Offset = "0xA6354C", VA = "0xA6354C")]
	public AkEnvironmentPortal()
	{
	}
}
[Token(Token = "0x20002B1")]
public class AkEventCallbackMsg
{
	[Token(Token = "0x400136E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AkCallbackInfo info;

	[Token(Token = "0x400136F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject sender;

	[Token(Token = "0x4001370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AkCallbackType type;

	[Token(Token = "0x6001A5D")]
	[Address(RVA = "0xA635E4", Offset = "0xA635E4", VA = "0xA635E4")]
	public AkEventCallbackMsg()
	{
	}
}
[Token(Token = "0x20002B2")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749C64", Offset = "0x749C64")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749C64", Offset = "0x749C64")]
public class AkEvent : AkDragDropTriggerHandler
{
	[Serializable]
	[Token(Token = "0x20004EB")]
	public class CallbackData
	{
		[Token(Token = "0x4002140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CallbackFlags Flags;

		[Token(Token = "0x4002141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string FunctionName;

		[Token(Token = "0x4002142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject GameObject;

		[Token(Token = "0x6002494")]
		[Address(RVA = "0xA636A8", Offset = "0xA636A8", VA = "0xA636A8")]
		public void CallFunction(AkEventCallbackMsg eventCallbackMsg)
		{
		}

		[Token(Token = "0x6002495")]
		[Address(RVA = "0xA6388C", Offset = "0xA6388C", VA = "0xA6388C")]
		public CallbackData()
		{
		}
	}

	[Token(Token = "0x4001371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public AkActionOnEventType actionOnEventType;

	[Token(Token = "0x4001372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AkCurveInterpolation curveInterpolation;

	[Token(Token = "0x4001373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool enableActionOnEvent;

	[Token(Token = "0x4001374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AK.Wwise.Event data;

	[Token(Token = "0x4001375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool useCallbacks;

	[Token(Token = "0x4001376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<CallbackData> Callbacks;

	[Token(Token = "0x4001377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public uint playingId;

	[Token(Token = "0x4001378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject soundEmitterObject;

	[Token(Token = "0x4001379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float transitionDuration;

	[Token(Token = "0x400137A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AkEventCallbackMsg EventCallbackMsg;

	[Token(Token = "0x400137B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x751BB8", Offset = "0x751BB8")]
	private int eventIdInternal;

	[Token(Token = "0x400137C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x751C14", Offset = "0x751C14")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x400137D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x751C70", Offset = "0x751C70")]
	private AkEventCallbackData m_callbackDataInternal;

	[Token(Token = "0x170002AB")]
	protected override BaseType WwiseType
	{
		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0xA635DC", Offset = "0xA635DC", VA = "0xA635DC", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002AC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75B974", Offset = "0x75B974")]
	public int eventID
	{
		[Token(Token = "0x6001A64")]
		[Address(RVA = "0xA637AC", Offset = "0xA637AC", VA = "0xA637AC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002AD")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75B9AC", Offset = "0x75B9AC")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001A65")]
		[Address(RVA = "0xA637BC", Offset = "0xA637BC", VA = "0xA637BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002AE")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75B9E4", Offset = "0x75B9E4")]
	public AkEventCallbackData m_callbackData
	{
		[Token(Token = "0x6001A66")]
		[Address(RVA = "0xA63884", Offset = "0xA63884", VA = "0xA63884")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001A5F")]
	[Address(RVA = "0xA516F8", Offset = "0xA516F8", VA = "0xA516F8", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001A60")]
	[Address(RVA = "0xA635EC", Offset = "0xA635EC", VA = "0xA635EC")]
	private void Callback(object in_cookie, AkCallbackType in_type, AkCallbackInfo in_info)
	{
	}

	[Token(Token = "0x6001A61")]
	[Address(RVA = "0xA51D90", Offset = "0xA51D90", VA = "0xA51D90", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001A62")]
	[Address(RVA = "0xA63770", Offset = "0xA63770", VA = "0xA63770")]
	public void Stop(int _transitionDuration)
	{
	}

	[Token(Token = "0x6001A63")]
	[Address(RVA = "0xA63778", Offset = "0xA63778", VA = "0xA63778")]
	public void Stop(int _transitionDuration, AkCurveInterpolation _curveInterpolation)
	{
	}

	[Token(Token = "0x6001A67")]
	[Address(RVA = "0xA520E8", Offset = "0xA520E8", VA = "0xA520E8")]
	public AkEvent()
	{
	}
}
[Token(Token = "0x20002B3")]
public class AkEventCallbackData : ScriptableObject
{
	[Token(Token = "0x400137E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<int> callbackFlags;

	[Token(Token = "0x400137F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> callbackFunc;

	[Token(Token = "0x4001380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> callbackGameObj;

	[Token(Token = "0x4001381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int uFlags;

	[Token(Token = "0x6001A68")]
	[Address(RVA = "0xA63894", Offset = "0xA63894", VA = "0xA63894")]
	public AkEventCallbackData()
	{
	}
}
[Token(Token = "0x20002B4")]
public class AkEventPlayable : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4001382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AK.Wwise.Event akEvent;

	[Token(Token = "0x4001383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AkCurveInterpolation blendInCurve;

	[Token(Token = "0x4001384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private AkCurveInterpolation blendOutCurve;

	[Token(Token = "0x4001385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ExposedReference<GameObject> emitterObjectRef;

	[Token(Token = "0x4001386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float eventDurationMax;

	[Token(Token = "0x4001387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float eventDurationMin;

	[NonSerialized]
	[Token(Token = "0x4001388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TimelineClip owningClip;

	[Token(Token = "0x4001389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool retriggerEvent;

	[Token(Token = "0x400138A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool UseWwiseEventDuration;

	[Token(Token = "0x400138B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[SerializeField]
	private bool StopEventAtClipEnd;

	[Token(Token = "0x170002AF")]
	private ClipCaps UnityEngine.Timeline.ITimelineClipAsset.clipCaps
	{
		[Token(Token = "0x6001A69")]
		[Address(RVA = "0xA63A84", Offset = "0xA63A84", VA = "0xA63A84", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6001A6A")]
	[Address(RVA = "0xA63A8C", Offset = "0xA63A8C", VA = "0xA63A8C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6001A6B")]
	[Address(RVA = "0xA63D00", Offset = "0xA63D00", VA = "0xA63D00")]
	public AkEventPlayable()
	{
	}
}
[Token(Token = "0x20002B5")]
public class AkEventPlayableBehavior : PlayableBehaviour
{
	[Token(Token = "0x20004EC")]
	[Flags]
	private enum Actions
	{
		[Token(Token = "0x4002144")]
		None = 0,
		[Token(Token = "0x4002145")]
		Playback = 1,
		[Token(Token = "0x4002146")]
		Retrigger = 2,
		[Token(Token = "0x4002147")]
		DelayedStop = 4,
		[Token(Token = "0x4002148")]
		Seek = 8,
		[Token(Token = "0x4002149")]
		FadeIn = 0x10,
		[Token(Token = "0x400214A")]
		FadeOut = 0x20
	}

	[Token(Token = "0x400138C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float currentDuration;

	[Token(Token = "0x400138D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float currentDurationProportion;

	[Token(Token = "0x400138E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool eventIsPlaying;

	[Token(Token = "0x400138F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool fadeinTriggered;

	[Token(Token = "0x4001390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool fadeoutTriggered;

	[Token(Token = "0x4001391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float previousEventStartTime;

	[Token(Token = "0x4001392")]
	private const uint CallbackFlags = 9u;

	[Token(Token = "0x4001393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Actions requiredActions;

	[Token(Token = "0x4001394")]
	private const int scrubPlaybackLengthMs = 100;

	[Token(Token = "0x4001395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AK.Wwise.Event akEvent;

	[Token(Token = "0x4001396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float eventDurationMax;

	[Token(Token = "0x4001397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float eventDurationMin;

	[Token(Token = "0x4001398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float blendInDuration;

	[Token(Token = "0x4001399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float blendOutDuration;

	[Token(Token = "0x400139A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float easeInDuration;

	[Token(Token = "0x400139B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float easeOutDuration;

	[Token(Token = "0x400139C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AkCurveInterpolation blendInCurve;

	[Token(Token = "0x400139D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public AkCurveInterpolation blendOutCurve;

	[Token(Token = "0x400139E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject eventObject;

	[Token(Token = "0x400139F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool retriggerEvent;

	[Token(Token = "0x40013A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool wasScrubbingAndRequiresRetrigger;

	[Token(Token = "0x40013A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	public bool StopEventAtClipEnd;

	[Token(Token = "0x40013A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
	public bool overrideTrackEmitterObject;

	[Token(Token = "0x40013A3")]
	private const float alph = 0.05f;

	[Token(Token = "0x6001A6C")]
	[Address(RVA = "0xA63D80", Offset = "0xA63D80", VA = "0xA63D80")]
	private void CallbackHandler(object in_cookie, AkCallbackType in_type, AkCallbackInfo in_info)
	{
	}

	[Token(Token = "0x6001A6D")]
	[Address(RVA = "0xA63E4C", Offset = "0xA63E4C", VA = "0xA63E4C")]
	private bool IsScrubbing(FrameData info)
	{
		return default(bool);
	}

	[Token(Token = "0x6001A6E")]
	[Address(RVA = "0xA63E70", Offset = "0xA63E70", VA = "0xA63E70", Slot = "19")]
	public override void PrepareFrame(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6001A6F")]
	[Address(RVA = "0xA64254", Offset = "0xA64254", VA = "0xA64254", Slot = "17")]
	public override void OnBehaviourPlay(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6001A70")]
	[Address(RVA = "0xA6443C", Offset = "0xA6443C", VA = "0xA6443C", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6001A71")]
	[Address(RVA = "0xA6456C", Offset = "0xA6456C", VA = "0xA6456C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6001A72")]
	[Address(RVA = "0xA63FD0", Offset = "0xA63FD0", VA = "0xA63FD0")]
	private bool ShouldPlay(Playable playable)
	{
		return default(bool);
	}

	[Token(Token = "0x6001A73")]
	[Address(RVA = "0xA64110", Offset = "0xA64110", VA = "0xA64110")]
	private void CheckForFadeInFadeOut(Playable playable)
	{
	}

	[Token(Token = "0x6001A74")]
	[Address(RVA = "0xA641B0", Offset = "0xA641B0", VA = "0xA641B0")]
	private void CheckForFadeOut(Playable playable, double currentClipTime)
	{
	}

	[Token(Token = "0x6001A75")]
	[Address(RVA = "0xA64904", Offset = "0xA64904", VA = "0xA64904")]
	private void TriggerFadeIn(Playable playable)
	{
	}

	[Token(Token = "0x6001A76")]
	[Address(RVA = "0xA64A2C", Offset = "0xA64A2C", VA = "0xA64A2C")]
	private void TriggerFadeOut(Playable playable)
	{
	}

	[Token(Token = "0x6001A77")]
	[Address(RVA = "0xA64530", Offset = "0xA64530", VA = "0xA64530")]
	private void StopEvent(int transition = 0)
	{
	}

	[Token(Token = "0x6001A78")]
	[Address(RVA = "0xA64AEC", Offset = "0xA64AEC", VA = "0xA64AEC")]
	private bool PostEvent()
	{
		return default(bool);
	}

	[Token(Token = "0x6001A79")]
	[Address(RVA = "0xA64764", Offset = "0xA64764", VA = "0xA64764")]
	private void PlayEvent()
	{
	}

	[Token(Token = "0x6001A7A")]
	[Address(RVA = "0xA64868", Offset = "0xA64868", VA = "0xA64868")]
	private void RetriggerEvent(Playable playable)
	{
	}

	[Token(Token = "0x6001A7B")]
	[Address(RVA = "0xA64360", Offset = "0xA64360", VA = "0xA64360")]
	private float GetProportionalTime(Playable playable)
	{
		return default(float);
	}

	[Token(Token = "0x6001A7C")]
	[Address(RVA = "0xA64794", Offset = "0xA64794", VA = "0xA64794")]
	private float SeekToTime(Playable playable)
	{
		return default(float);
	}

	[Token(Token = "0x6001A7D")]
	[Address(RVA = "0xA64B9C", Offset = "0xA64B9C", VA = "0xA64B9C")]
	public AkEventPlayableBehavior()
	{
	}
}
[Token(Token = "0x20002B6")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x749CEC", Offset = "0x749CEC")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x749CEC", Offset = "0x749CEC")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x749CEC", Offset = "0x749CEC")]
public class AkEventTrack : TrackAsset
{
	[Token(Token = "0x6001A7E")]
	[Address(RVA = "0xA64BB0", Offset = "0xA64BB0", VA = "0xA64BB0", Slot = "23")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6001A7F")]
	[Address(RVA = "0xA64F2C", Offset = "0xA64F2C", VA = "0xA64F2C")]
	public AkEventTrack()
	{
	}
}
[Token(Token = "0x20002B7")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749DA0", Offset = "0x749DA0")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class AkGameObj : MonoBehaviour
{
	[Token(Token = "0x40013A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AkGameObjListenerList m_listeners;

	[Token(Token = "0x40013A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isEnvironmentAware;

	[Token(Token = "0x40013A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool isStaticObject;

	[Token(Token = "0x40013A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider m_Collider;

	[Token(Token = "0x40013A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AkGameObjEnvironmentData m_envData;

	[Token(Token = "0x40013A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AkGameObjPositionData m_posData;

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AkGameObjPositionOffsetData m_positionOffsetData;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isRegistered;

	[Token(Token = "0x40013AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	private AkGameObjPosOffsetData m_posOffsetData;

	[Token(Token = "0x40013AD")]
	private const int AK_NUM_LISTENERS = 8;

	[Token(Token = "0x40013AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	[SerializeField]
	private int listenerMask;

	[Token(Token = "0x170002B0")]
	public bool IsUsingDefaultListeners
	{
		[Token(Token = "0x6001A80")]
		[Address(RVA = "0xA61F50", Offset = "0xA61F50", VA = "0xA61F50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002B1")]
	public List<AkAudioListener> ListenerList
	{
		[Token(Token = "0x6001A81")]
		[Address(RVA = "0xA61F70", Offset = "0xA61F70", VA = "0xA61F70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001A82")]
	[Address(RVA = "0xA553C4", Offset = "0xA553C4", VA = "0xA553C4")]
	internal void AddListener(AkAudioListener listener)
	{
	}

	[Token(Token = "0x6001A83")]
	[Address(RVA = "0xA553E4", Offset = "0xA553E4", VA = "0xA553E4")]
	internal void RemoveListener(AkAudioListener listener)
	{
	}

	[Token(Token = "0x6001A84")]
	[Address(RVA = "0xA55024", Offset = "0xA55024", VA = "0xA55024")]
	public AKRESULT Register()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001A85")]
	[Address(RVA = "0xA65E54", Offset = "0xA65E54", VA = "0xA65E54")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A86")]
	[Address(RVA = "0xA66458", Offset = "0xA66458", VA = "0xA66458")]
	private void CheckStaticStatus()
	{
	}

	[Token(Token = "0x6001A87")]
	[Address(RVA = "0xA6645C", Offset = "0xA6645C", VA = "0xA6645C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001A88")]
	[Address(RVA = "0xA66470", Offset = "0xA66470", VA = "0xA66470")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A89")]
	[Address(RVA = "0xA665DC", Offset = "0xA665DC", VA = "0xA665DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A8A")]
	[Address(RVA = "0xA66870", Offset = "0xA66870", VA = "0xA66870", Slot = "4")]
	public virtual Vector3 GetPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001A8B")]
	[Address(RVA = "0xA669EC", Offset = "0xA669EC", VA = "0xA669EC", Slot = "5")]
	public virtual Vector3 GetForward()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001A8C")]
	[Address(RVA = "0xA66A10", Offset = "0xA66A10", VA = "0xA66A10", Slot = "6")]
	public virtual Vector3 GetUpward()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001A8D")]
	[Address(RVA = "0xA66A34", Offset = "0xA66A34", VA = "0xA66A34")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001A8E")]
	[Address(RVA = "0xA66A4C", Offset = "0xA66A4C", VA = "0xA66A4C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001A8F")]
	[Address(RVA = "0xA66C98", Offset = "0xA66C98", VA = "0xA66C98")]
	public AkGameObj()
	{
	}
}
[Token(Token = "0x20002B8")]
public class AkGameObjEnvironmentData
{
	[Token(Token = "0x40013AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly List<AkEnvironment> activeEnvironments;

	[Token(Token = "0x40013B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly List<AkEnvironment> activeEnvironmentsFromPortals;

	[Token(Token = "0x40013B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly List<AkEnvironmentPortal> activePortals;

	[Token(Token = "0x40013B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly AkAuxSendArray auxSendValues;

	[Token(Token = "0x40013B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 lastPosition;

	[Token(Token = "0x40013B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool hasEnvironmentListChanged;

	[Token(Token = "0x40013B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool hasActivePortalListChanged;

	[Token(Token = "0x40013B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool hasSentZero;

	[Token(Token = "0x6001A90")]
	[Address(RVA = "0xA66D0C", Offset = "0xA66D0C", VA = "0xA66D0C")]
	private void AddHighestPriorityEnvironmentsFromPortals(Vector3 position)
	{
	}

	[Token(Token = "0x6001A91")]
	[Address(RVA = "0xA66FEC", Offset = "0xA66FEC", VA = "0xA66FEC")]
	private void AddHighestPriorityEnvironments(Vector3 position)
	{
	}

	[Token(Token = "0x6001A92")]
	[Address(RVA = "0xA662F8", Offset = "0xA662F8", VA = "0xA662F8")]
	public void UpdateAuxSend(GameObject gameObject, Vector3 position)
	{
	}

	[Token(Token = "0x6001A93")]
	[Address(RVA = "0xA6711C", Offset = "0xA6711C", VA = "0xA6711C")]
	private void TryAddEnvironment(AkEnvironment env)
	{
	}

	[Token(Token = "0x6001A94")]
	[Address(RVA = "0xA67284", Offset = "0xA67284", VA = "0xA67284")]
	private void RemoveEnvironment(AkEnvironment env)
	{
	}

	[Token(Token = "0x6001A95")]
	[Address(RVA = "0xA661B4", Offset = "0xA661B4", VA = "0xA661B4")]
	public void AddAkEnvironment(Collider environmentCollider, Collider gameObjectCollider)
	{
	}

	[Token(Token = "0x6001A96")]
	[Address(RVA = "0xA6730C", Offset = "0xA6730C", VA = "0xA6730C")]
	private bool AkEnvironmentBelongsToActivePortals(AkEnvironment env)
	{
		return default(bool);
	}

	[Token(Token = "0x6001A97")]
	[Address(RVA = "0xA66A6C", Offset = "0xA66A6C", VA = "0xA66A6C")]
	public void RemoveAkEnvironment(Collider environmentCollider, Collider gameObjectCollider)
	{
	}

	[Token(Token = "0x6001A98")]
	[Address(RVA = "0xA660A8", Offset = "0xA660A8", VA = "0xA660A8")]
	public AkGameObjEnvironmentData()
	{
	}
}
[Serializable]
[Token(Token = "0x20002B9")]
public class AkGameObjListenerList : AkAudioListener.BaseListenerList
{
	[NonSerialized]
	[Token(Token = "0x40013B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AkGameObj akGameObj;

	[Token(Token = "0x40013B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public List<AkAudioListener> initialListenerList;

	[Token(Token = "0x40013B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public bool useDefaultListeners;

	[Token(Token = "0x6001A99")]
	[Address(RVA = "0x98E720", Offset = "0x98E720", VA = "0x98E720")]
	public void SetUseDefaultListeners(bool useDefault)
	{
	}

	[Token(Token = "0x6001A9A")]
	[Address(RVA = "0x98EB14", Offset = "0x98EB14", VA = "0x98EB14")]
	public void Init(AkGameObj akGameObj)
	{
	}

	[Token(Token = "0x6001A9B")]
	[Address(RVA = "0x98EC0C", Offset = "0x98EC0C", VA = "0x98EC0C", Slot = "4")]
	public override bool Add(AkAudioListener listener)
	{
		return default(bool);
	}

	[Token(Token = "0x6001A9C")]
	[Address(RVA = "0x98ED5C", Offset = "0x98ED5C", VA = "0x98ED5C", Slot = "5")]
	public override bool Remove(AkAudioListener listener)
	{
		return default(bool);
	}

	[Token(Token = "0x6001A9D")]
	[Address(RVA = "0x98EF14", Offset = "0x98EF14", VA = "0x98EF14")]
	public AkGameObjListenerList()
	{
	}
}
[Token(Token = "0x20002BA")]
public class AkGameObjPositionData
{
	[Token(Token = "0x40013BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 forward;

	[Token(Token = "0x40013BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 position;

	[Token(Token = "0x40013BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 up;

	[Token(Token = "0x6001A9E")]
	[Address(RVA = "0x98EF94", Offset = "0x98EF94", VA = "0x98EF94")]
	public AkGameObjPositionData()
	{
	}
}
[Serializable]
[Token(Token = "0x20002BB")]
public class AkGameObjPositionOffsetData
{
	[Token(Token = "0x40013BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool KeepMe;

	[Token(Token = "0x40013BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 positionOffset;

	[Token(Token = "0x6001A9F")]
	[Address(RVA = "0x98EF9C", Offset = "0x98EF9C", VA = "0x98EF9C")]
	public AkGameObjPositionOffsetData(bool IReallyWantToBeConstructed = false)
	{
	}
}
[Token(Token = "0x20002BC")]
public class AkGameObjPosOffsetData : ScriptableObject
{
	[Token(Token = "0x40013BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 positionOffset;

	[Token(Token = "0x6001AA0")]
	[Address(RVA = "0x98EF8C", Offset = "0x98EF8C", VA = "0x98EF8C")]
	public AkGameObjPosOffsetData()
	{
	}
}
[Token(Token = "0x20002BD")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749DFC", Offset = "0x749DFC")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class AkInitializer : MonoBehaviour
{
	[Token(Token = "0x40013C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AkInitializer ms_Instance;

	[Token(Token = "0x40013C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AkWwiseInitializationSettings InitializationSettings;

	[Token(Token = "0x6001AA1")]
	[Address(RVA = "0x992208", Offset = "0x992208", VA = "0x992208")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001AA2")]
	[Address(RVA = "0x9922F0", Offset = "0x9922F0", VA = "0x9922F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001AA3")]
	[Address(RVA = "0x9923C8", Offset = "0x9923C8", VA = "0x9923C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001AA4")]
	[Address(RVA = "0x992470", Offset = "0x992470", VA = "0x992470")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001AA5")]
	[Address(RVA = "0x99250C", Offset = "0x99250C", VA = "0x99250C")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6001AA6")]
	[Address(RVA = "0x9925C8", Offset = "0x9925C8", VA = "0x9925C8")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x6001AA7")]
	[Address(RVA = "0x992684", Offset = "0x992684", VA = "0x992684")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6001AA8")]
	[Address(RVA = "0x99272C", Offset = "0x99272C", VA = "0x99272C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001AA9")]
	[Address(RVA = "0x9927D4", Offset = "0x9927D4", VA = "0x9927D4")]
	public AkInitializer()
	{
	}
}
[Token(Token = "0x20002BE")]
public class AkMemBankLoader : MonoBehaviour
{
	[Token(Token = "0x20004ED")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74AFBC", Offset = "0x74AFBC")]
	private sealed class <LoadFile>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AkMemBankLoader <>4__this;

		[Token(Token = "0x170003C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002499")]
			[Address(RVA = "0x9995DC", Offset = "0x9995DC", VA = "0x9995DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600249B")]
			[Address(RVA = "0x999648", Offset = "0x999648", VA = "0x999648", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002496")]
		[Address(RVA = "0x999224", Offset = "0x999224", VA = "0x999224")]
		[DebuggerHidden]
		public <LoadFile>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6002497")]
		[Address(RVA = "0x9993D4", Offset = "0x9993D4", VA = "0x9993D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002498")]
		[Address(RVA = "0x9993D8", Offset = "0x9993D8", VA = "0x9993D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600249A")]
		[Address(RVA = "0x9995E4", Offset = "0x9995E4", VA = "0x9995E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40013C2")]
	private const int WaitMs = 50;

	[Token(Token = "0x40013C3")]
	private const long AK_BANK_PLATFORM_DATA_ALIGNMENT = 16L;

	[Token(Token = "0x40013C4")]
	private const long AK_BANK_PLATFORM_DATA_ALIGNMENT_MASK = 15L;

	[Token(Token = "0x40013C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string bankName;

	[Token(Token = "0x40013C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isLocalizedBank;

	[Token(Token = "0x40013C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_bankPath;

	[Token(Token = "0x40013C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public uint ms_bankID;

	[Token(Token = "0x40013C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IntPtr ms_pInMemoryBankPtr;

	[Token(Token = "0x40013CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GCHandle ms_pinnedArray;

	[Token(Token = "0x40013CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityWebRequest ms_www;

	[Token(Token = "0x6001AAA")]
	[Address(RVA = "0x998CB0", Offset = "0x998CB0", VA = "0x998CB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001AAB")]
	[Address(RVA = "0x998DDC", Offset = "0x998DDC", VA = "0x998DDC")]
	public void LoadNonLocalizedBank(string in_bankFilename)
	{
	}

	[Token(Token = "0x6001AAC")]
	[Address(RVA = "0x998CC4", Offset = "0x998CC4", VA = "0x998CC4")]
	public void LoadLocalizedBank(string in_bankFilename)
	{
	}

	[Token(Token = "0x6001AAD")]
	[Address(RVA = "0x998F7C", Offset = "0x998F7C", VA = "0x998F7C")]
	private uint AllocateAlignedBuffer(byte[] data)
	{
		return default(uint);
	}

	[Token(Token = "0x6001AAE")]
	[Address(RVA = "0x9991B0", Offset = "0x9991B0", VA = "0x9991B0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759118", Offset = "0x759118")]
	private IEnumerator LoadFile()
	{
		return null;
	}

	[Token(Token = "0x6001AAF")]
	[Address(RVA = "0x998EBC", Offset = "0x998EBC", VA = "0x998EBC")]
	private void DoLoadBank(string in_bankPath)
	{
	}

	[Token(Token = "0x6001AB0")]
	[Address(RVA = "0x999250", Offset = "0x999250", VA = "0x999250")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001AB1")]
	[Address(RVA = "0x999378", Offset = "0x999378", VA = "0x999378")]
	public AkMemBankLoader()
	{
	}
}
[Token(Token = "0x20002BF")]
public abstract class AkObstructionOcclusion : MonoBehaviour
{
	[Token(Token = "0x20004EE")]
	protected class ObstructionOcclusionValue
	{
		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float currentValue;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float targetValue;

		[Token(Token = "0x600249C")]
		[Address(RVA = "0x99C2CC", Offset = "0x99C2CC", VA = "0x99C2CC")]
		public bool Update(float fadeRate)
		{
			return default(bool);
		}

		[Token(Token = "0x600249D")]
		[Address(RVA = "0x99BE10", Offset = "0x99BE10", VA = "0x99BE10")]
		public ObstructionOcclusionValue()
		{
		}
	}

	[Token(Token = "0x40013CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly List<AkAudioListener> listenersToRemove;

	[Token(Token = "0x40013CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected readonly List<AkAudioListener> currentListenerList;

	[Token(Token = "0x40013CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Dictionary<AkAudioListener, ObstructionOcclusionValue> ObstructionOcclusionValues;

	[Token(Token = "0x40013CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected float fadeRate;

	[Token(Token = "0x40013D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751DDC", Offset = "0x751DDC")]
	public float fadeTime;

	[Token(Token = "0x40013D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751E14", Offset = "0x751E14")]
	public LayerMask LayerMask;

	[Token(Token = "0x40013D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751E4C", Offset = "0x751E4C")]
	public float maxDistance;

	[Token(Token = "0x40013D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751E84", Offset = "0x751E84")]
	public float refreshInterval;

	[Token(Token = "0x40013D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float refreshTime;

	[Token(Token = "0x6001AB2")]
	[Address(RVA = "0x99BB34", Offset = "0x99BB34", VA = "0x99BB34")]
	protected void InitIntervalsAndFadeRates()
	{
	}

	[Token(Token = "0x6001AB3")]
	protected abstract void UpdateCurrentListenerList();

	[Token(Token = "0x6001AB4")]
	[Address(RVA = "0x99BB74", Offset = "0x99BB74", VA = "0x99BB74")]
	private void UpdateObstructionOcclusionValues()
	{
	}

	[Token(Token = "0x6001AB5")]
	[Address(RVA = "0x99BE18", Offset = "0x99BE18", VA = "0x99BE18")]
	private void CastRays()
	{
	}

	[Token(Token = "0x6001AB6")]
	protected abstract void SetObstructionOcclusion(KeyValuePair<AkAudioListener, ObstructionOcclusionValue> ObsOccPair);

	[Token(Token = "0x6001AB7")]
	[Address(RVA = "0x99C158", Offset = "0x99C158", VA = "0x99C158")]
	private void Update()
	{
	}

	[Token(Token = "0x6001AB8")]
	[Address(RVA = "0x99C3BC", Offset = "0x99C3BC", VA = "0x99C3BC")]
	protected AkObstructionOcclusion()
	{
	}
}
[Token(Token = "0x20002C0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749E58", Offset = "0x749E58")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749E58", Offset = "0x749E58")]
[DisallowMultipleComponent]
public class AkRoom : AkTriggerHandler
{
	[Token(Token = "0x20004EF")]
	public class PriorityList
	{
		[Token(Token = "0x2000674")]
		private class CompareByPriority : IComparer<AkRoom>
		{
			[Token(Token = "0x6002A77")]
			[Address(RVA = "0x9A565C", Offset = "0x9A565C", VA = "0x9A565C", Slot = "5")]
			public virtual int Compare(AkRoom a, AkRoom b)
			{
				return default(int);
			}

			[Token(Token = "0x6002A78")]
			[Address(RVA = "0x9A5654", Offset = "0x9A5654", VA = "0x9A5654")]
			public CompareByPriority()
			{
			}
		}

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly CompareByPriority s_compareByPriority;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<AkRoom> rooms;

		[Token(Token = "0x600249E")]
		[Address(RVA = "0x9A524C", Offset = "0x9A524C", VA = "0x9A524C")]
		public ulong GetHighestPriorityRoomID()
		{
			return default(ulong);
		}

		[Token(Token = "0x600249F")]
		[Address(RVA = "0x9A5318", Offset = "0x9A5318", VA = "0x9A5318")]
		public AkRoom GetHighestPriorityRoom()
		{
			return null;
		}

		[Token(Token = "0x60024A0")]
		[Address(RVA = "0x9A5380", Offset = "0x9A5380", VA = "0x9A5380")]
		public void Add(AkRoom room)
		{
		}

		[Token(Token = "0x60024A1")]
		[Address(RVA = "0x9A54F4", Offset = "0x9A54F4", VA = "0x9A54F4")]
		public void Remove(AkRoom room)
		{
		}

		[Token(Token = "0x60024A2")]
		[Address(RVA = "0x9A555C", Offset = "0x9A555C", VA = "0x9A555C")]
		public bool Contains(AkRoom room)
		{
			return default(bool);
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0x9A5414", Offset = "0x9A5414", VA = "0x9A5414")]
		public int BinarySearch(AkRoom room)
		{
			return default(int);
		}

		[Token(Token = "0x60024A4")]
		[Address(RVA = "0x9A5578", Offset = "0x9A5578", VA = "0x9A5578")]
		public PriorityList()
		{
		}
	}

	[Token(Token = "0x40013D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ulong INVALID_ROOM_ID;

	[Token(Token = "0x40013D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int RoomCount;

	[Token(Token = "0x40013D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751EBC", Offset = "0x751EBC")]
	public int priority;

	[Token(Token = "0x40013D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AuxBus reverbAuxBus;

	[Token(Token = "0x40013D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x751EF4", Offset = "0x751EF4")]
	public float reverbLevel;

	[Token(Token = "0x40013DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x751F0C", Offset = "0x751F0C")]
	public float wallOcclusion;

	[Token(Token = "0x40013DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AK.Wwise.Event roomToneEvent;

	[Token(Token = "0x40013DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x751F24", Offset = "0x751F24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751F24", Offset = "0x751F24")]
	public float roomToneAuxSend;

	[Token(Token = "0x170002B2")]
	public static bool IsSpatialAudioEnabled
	{
		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x9A4270", Offset = "0x9A4270", VA = "0x9A4270")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001ABA")]
	[Address(RVA = "0x9A434C", Offset = "0x9A434C", VA = "0x9A434C")]
	public ulong GetID()
	{
		return default(ulong);
	}

	[Token(Token = "0x6001ABB")]
	[Address(RVA = "0x9A43C4", Offset = "0x9A43C4", VA = "0x9A43C4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001ABC")]
	[Address(RVA = "0x9A4E08", Offset = "0x9A4E08", VA = "0x9A4E08", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001ABD")]
	[Address(RVA = "0x9A4E44", Offset = "0x9A4E44", VA = "0x9A4E44")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001ABE")]
	[Address(RVA = "0x9A4F7C", Offset = "0x9A4F7C", VA = "0x9A4F7C")]
	private void OnTriggerEnter(Collider in_other)
	{
	}

	[Token(Token = "0x6001ABF")]
	[Address(RVA = "0x9A5064", Offset = "0x9A5064", VA = "0x9A5064")]
	private void OnTriggerExit(Collider in_other)
	{
	}

	[Token(Token = "0x6001AC0")]
	[Address(RVA = "0x9A514C", Offset = "0x9A514C", VA = "0x9A514C")]
	public AkRoom()
	{
	}
}
[Token(Token = "0x20002C1")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749EF0", Offset = "0x749EF0")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749EF0", Offset = "0x749EF0")]
[DisallowMultipleComponent]
public class AkRoomPortal : AkTriggerHandler
{
	[Token(Token = "0x20004F0")]
	public enum State
	{
		[Token(Token = "0x4002153")]
		Closed,
		[Token(Token = "0x4002154")]
		Open
	}

	[Token(Token = "0x40013DD")]
	public const int MAX_ROOMS_PER_PORTAL = 2;

	[Token(Token = "0x40013DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public State initialState;

	[Token(Token = "0x40013DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AkVector extent;

	[Token(Token = "0x40013E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AkTransform portalTransform;

	[Token(Token = "0x40013E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool active;

	[Token(Token = "0x40013E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<int> closePortalTriggerList;

	[Token(Token = "0x40013E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AkRoom[] rooms;

	[Token(Token = "0x170002B3")]
	public bool portalActive
	{
		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0x9A5CC4", Offset = "0x9A5CC4", VA = "0x9A5CC4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0x9A5CCC", Offset = "0x9A5CCC", VA = "0x9A5CCC")]
		set
		{
		}
	}

	[Token(Token = "0x170002B4")]
	private ulong frontRoomID
	{
		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0x9A5E14", Offset = "0x9A5E14", VA = "0x9A5E14")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x170002B5")]
	private ulong backRoomID
	{
		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0x9A5F88", Offset = "0x9A5F88", VA = "0x9A5F88")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x170002B6")]
	public AkRoom frontRoom
	{
		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0x9A5EB0", Offset = "0x9A5EB0", VA = "0x9A5EB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002B7")]
	public AkRoom backRoom
	{
		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x9A6024", Offset = "0x9A6024", VA = "0x9A6024")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002B8")]
	public bool IsValid
	{
		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0x9A6410", Offset = "0x9A6410", VA = "0x9A6410")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001AC6")]
	[Address(RVA = "0x9A6060", Offset = "0x9A6060", VA = "0x9A6060")]
	public void SetRoom(int in_roomIndex, AkRoom in_room)
	{
	}

	[Token(Token = "0x6001AC7")]
	[Address(RVA = "0x9A6160", Offset = "0x9A6160", VA = "0x9A6160")]
	public void SetFrontRoom(AkRoom room)
	{
	}

	[Token(Token = "0x6001AC8")]
	[Address(RVA = "0x9A6170", Offset = "0x9A6170", VA = "0x9A6170")]
	public void SetBackRoom(AkRoom room)
	{
	}

	[Token(Token = "0x6001AC9")]
	[Address(RVA = "0x9A6180", Offset = "0x9A6180", VA = "0x9A6180")]
	public AkRoom GetRoom(int index)
	{
		return null;
	}

	[Token(Token = "0x6001ACC")]
	[Address(RVA = "0x9A61C4", Offset = "0x9A61C4", VA = "0x9A61C4")]
	public void UpdateSoundEngineRoomIDs()
	{
	}

	[Token(Token = "0x6001ACE")]
	[Address(RVA = "0x9A6328", Offset = "0x9A6328", VA = "0x9A6328")]
	public ulong GetID()
	{
		return default(ulong);
	}

	[Token(Token = "0x6001ACF")]
	[Address(RVA = "0x9A6444", Offset = "0x9A6444", VA = "0x9A6444", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001AD0")]
	[Address(RVA = "0x9A6A80", Offset = "0x9A6A80", VA = "0x9A6A80", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001AD1")]
	[Address(RVA = "0x9A6B08", Offset = "0x9A6B08", VA = "0x9A6B08", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001AD2")]
	[Address(RVA = "0x9A6A78", Offset = "0x9A6A78", VA = "0x9A6A78")]
	public void ClosePortal(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001AD3")]
	[Address(RVA = "0x9A6B20", Offset = "0x9A6B20", VA = "0x9A6B20", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001AD4")]
	[Address(RVA = "0x9A5EF0", Offset = "0x9A5EF0", VA = "0x9A5EF0")]
	private bool IsRoomActive(AkRoom in_room)
	{
		return default(bool);
	}

	[Token(Token = "0x6001AD5")]
	[Address(RVA = "0x9A6B10", Offset = "0x9A6B10", VA = "0x9A6B10")]
	public void Open()
	{
	}

	[Token(Token = "0x6001AD6")]
	[Address(RVA = "0x9A6B18", Offset = "0x9A6B18", VA = "0x9A6B18")]
	public void Close()
	{
	}

	[Token(Token = "0x6001AD7")]
	[Address(RVA = "0x9A6D60", Offset = "0x9A6D60", VA = "0x9A6D60")]
	public void FindOverlappingRooms(AkRoom.PriorityList[] roomList)
	{
	}

	[Token(Token = "0x6001AD8")]
	[Address(RVA = "0x9A6F84", Offset = "0x9A6F84", VA = "0x9A6F84")]
	private void FillRoomList(Vector3 center, Vector3 halfExtents, AkRoom.PriorityList list)
	{
	}

	[Token(Token = "0x6001AD9")]
	[Address(RVA = "0x9A682C", Offset = "0x9A682C", VA = "0x9A682C")]
	public void UpdateOverlappingRooms()
	{
	}

	[Token(Token = "0x6001ADA")]
	[Address(RVA = "0x9A716C", Offset = "0x9A716C", VA = "0x9A716C")]
	public AkRoomPortal()
	{
	}
}
[Token(Token = "0x20002C2")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x749F88", Offset = "0x749F88")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x749F88", Offset = "0x749F88")]
public class AkRoomPortalObstruction : AkObstructionOcclusion
{
	[Token(Token = "0x40013E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AkRoomPortal m_portal;

	[Token(Token = "0x6001ADB")]
	[Address(RVA = "0x9A7460", Offset = "0x9A7460", VA = "0x9A7460")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001ADC")]
	[Address(RVA = "0x9A74DC", Offset = "0x9A74DC", VA = "0x9A74DC", Slot = "4")]
	protected override void UpdateCurrentListenerList()
	{
	}

	[Token(Token = "0x6001ADD")]
	[Address(RVA = "0x9A7568", Offset = "0x9A7568", VA = "0x9A7568", Slot = "5")]
	protected override void SetObstructionOcclusion(KeyValuePair<AkAudioListener, ObstructionOcclusionValue> ObsOccPair)
	{
	}

	[Token(Token = "0x6001ADE")]
	[Address(RVA = "0x9A76C8", Offset = "0x9A76C8", VA = "0x9A76C8")]
	public AkRoomPortalObstruction()
	{
	}
}
[Serializable]
[Token(Token = "0x20002C3")]
public class AkRTPCPlayable : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40013E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool overrideTrackObject;

	[Token(Token = "0x40013E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ExposedReference<GameObject> RTPCObject;

	[Token(Token = "0x40013E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool setRTPCGlobally;

	[Token(Token = "0x40013E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AkRTPCPlayableBehaviour template;

	[Token(Token = "0x40013E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751F88", Offset = "0x751F88")]
	private RTPC <Parameter>k__BackingField;

	[Token(Token = "0x40013EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751F98", Offset = "0x751F98")]
	private TimelineClip <OwningClip>k__BackingField;

	[Token(Token = "0x170002B9")]
	public RTPC Parameter
	{
		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x9A2544", Offset = "0x9A2544", VA = "0x9A2544")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75917C", Offset = "0x75917C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0x9A254C", Offset = "0x9A254C", VA = "0x9A254C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75918C", Offset = "0x75918C")]
		set
		{
		}
	}

	[Token(Token = "0x170002BA")]
	public TimelineClip OwningClip
	{
		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x9A2554", Offset = "0x9A2554", VA = "0x9A2554")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75919C", Offset = "0x75919C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0x9A255C", Offset = "0x9A255C", VA = "0x9A255C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7591AC", Offset = "0x7591AC")]
		set
		{
		}
	}

	[Token(Token = "0x170002BB")]
	private ClipCaps UnityEngine.Timeline.ITimelineClipAsset.clipCaps
	{
		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0x9A2564", Offset = "0x9A2564", VA = "0x9A2564", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6001AE4")]
	[Address(RVA = "0x9A256C", Offset = "0x9A256C", VA = "0x9A256C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
	{
		return default(Playable);
	}

	[Token(Token = "0x6001AE5")]
	[Address(RVA = "0x9A2668", Offset = "0x9A2668", VA = "0x9A2668")]
	public void InitializeBehavior(PlayableGraph graph, ref AkRTPCPlayableBehaviour b, GameObject owner)
	{
	}

	[Token(Token = "0x6001AE6")]
	[Address(RVA = "0x9A273C", Offset = "0x9A273C", VA = "0x9A273C")]
	public AkRTPCPlayable()
	{
	}
}
[Serializable]
[Token(Token = "0x20002C4")]
public class AkRTPCPlayableBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40013EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private float RTPCValue;

	[Token(Token = "0x40013EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751FB8", Offset = "0x751FB8")]
	private bool <setRTPCGlobally>k__BackingField;

	[Token(Token = "0x40013ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751FC8", Offset = "0x751FC8")]
	private bool <overrideTrackObject>k__BackingField;

	[Token(Token = "0x40013EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751FD8", Offset = "0x751FD8")]
	private GameObject <rtpcObject>k__BackingField;

	[Token(Token = "0x40013EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x751FE8", Offset = "0x751FE8")]
	private RTPC <parameter>k__BackingField;

	[Token(Token = "0x170002BC")]
	public bool setRTPCGlobally
	{
		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x9A27B8", Offset = "0x9A27B8", VA = "0x9A27B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7591CC", Offset = "0x7591CC")]
		private get
		{
			return default(bool);
		}
		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0x9A27AC", Offset = "0x9A27AC", VA = "0x9A27AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7591BC", Offset = "0x7591BC")]
		set
		{
		}
	}

	[Token(Token = "0x170002BD")]
	public bool overrideTrackObject
	{
		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x9A27CC", Offset = "0x9A27CC", VA = "0x9A27CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7591EC", Offset = "0x7591EC")]
		private get
		{
			return default(bool);
		}
		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x9A27C0", Offset = "0x9A27C0", VA = "0x9A27C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7591DC", Offset = "0x7591DC")]
		set
		{
		}
	}

	[Token(Token = "0x170002BE")]
	public GameObject rtpcObject
	{
		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x9A27DC", Offset = "0x9A27DC", VA = "0x9A27DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75920C", Offset = "0x75920C")]
		private get
		{
			return null;
		}
		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x9A27D4", Offset = "0x9A27D4", VA = "0x9A27D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7591FC", Offset = "0x7591FC")]
		set
		{
		}
	}

	[Token(Token = "0x170002BF")]
	public RTPC parameter
	{
		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x9A27EC", Offset = "0x9A27EC", VA = "0x9A27EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75922C", Offset = "0x75922C")]
		private get
		{
			return null;
		}
		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x9A27E4", Offset = "0x9A27E4", VA = "0x9A27E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75921C", Offset = "0x75921C")]
		set
		{
		}
	}

	[Token(Token = "0x6001AEF")]
	[Address(RVA = "0x9A27F4", Offset = "0x9A27F4", VA = "0x9A27F4", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6001AF0")]
	[Address(RVA = "0x9A27A4", Offset = "0x9A27A4", VA = "0x9A27A4")]
	public AkRTPCPlayableBehaviour()
	{
	}
}
[Token(Token = "0x20002C5")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x74A010", Offset = "0x74A010")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x74A010", Offset = "0x74A010")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x74A010", Offset = "0x74A010")]
public class AkRTPCTrack : TrackAsset
{
	[Token(Token = "0x40013F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public RTPC Parameter;

	[Token(Token = "0x6001AF1")]
	[Address(RVA = "0x9A2978", Offset = "0x9A2978", VA = "0x9A2978", Slot = "23")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6001AF2")]
	[Address(RVA = "0x9A2A34", Offset = "0x9A2A34", VA = "0x9A2A34")]
	public void setPlayableProperties()
	{
	}

	[Token(Token = "0x6001AF3")]
	[Address(RVA = "0x9A2D0C", Offset = "0x9A2D0C", VA = "0x9A2D0C")]
	public void OnValidate()
	{
	}

	[Token(Token = "0x6001AF4")]
	[Address(RVA = "0x9A3004", Offset = "0x9A3004", VA = "0x9A3004")]
	public AkRTPCTrack()
	{
	}
}
[Token(Token = "0x20002C6")]
public class AkSoundEngineController
{
	[Token(Token = "0x40013F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AkSoundEngineController ms_Instance;

	[Token(Token = "0x170002C0")]
	public static AkSoundEngineController Instance
	{
		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0xFAAC58", Offset = "0xFAAC58", VA = "0xFAAC58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001AF6")]
	[Address(RVA = "0xFAACD8", Offset = "0xFAACD8", VA = "0xFAACD8")]
	private AkSoundEngineController()
	{
	}

	[Token(Token = "0x6001AF7")]
	[Address(RVA = "0xFAACE0", Offset = "0xFAACE0", VA = "0xFAACE0", Slot = "1")]
	~AkSoundEngineController()
	{
	}

	[Token(Token = "0x6001AF8")]
	[Address(RVA = "0xFAAD48", Offset = "0xFAAD48", VA = "0xFAAD48")]
	public static string GetDecodedBankFolder()
	{
		return null;
	}

	[Token(Token = "0x6001AF9")]
	[Address(RVA = "0xFAAD90", Offset = "0xFAAD90", VA = "0xFAAD90")]
	public static string GetDecodedBankFullPath()
	{
		return null;
	}

	[Token(Token = "0x6001AFA")]
	[Address(RVA = "0xFAAE34", Offset = "0xFAAE34", VA = "0xFAAE34")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6001AFB")]
	[Address(RVA = "0xFAAF0C", Offset = "0xFAAF0C", VA = "0xFAAF0C")]
	public void Init(AkInitializer akInitializer)
	{
	}

	[Token(Token = "0x6001AFC")]
	[Address(RVA = "0xFAB0C4", Offset = "0xFAB0C4", VA = "0xFAB0C4")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6001AFD")]
	[Address(RVA = "0xFAB0C8", Offset = "0xFAB0C8", VA = "0xFAB0C8")]
	public void Terminate()
	{
	}

	[Token(Token = "0x6001AFE")]
	[Address(RVA = "0xFAB128", Offset = "0xFAB128", VA = "0xFAB128")]
	public void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6001AFF")]
	[Address(RVA = "0xFAB220", Offset = "0xFAB220", VA = "0xFAB220")]
	public void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x6001B00")]
	[Address(RVA = "0xFAB138", Offset = "0xFAB138", VA = "0xFAB138")]
	private void ActivateAudio(bool activate, bool renderAnyway = false)
	{
	}
}
[Token(Token = "0x20002C7")]
public abstract class AkSpatialAudioBase : MonoBehaviour
{
	[Token(Token = "0x40013F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly AkRoom.PriorityList roomPriorityList;

	[Token(Token = "0x6001B01")]
	[Address(RVA = "0x83826C", Offset = "0x83826C", VA = "0x83826C")]
	protected void SetGameObjectInHighestPriorityRoom()
	{
	}

	[Token(Token = "0x6001B02")]
	[Address(RVA = "0x838304", Offset = "0x838304", VA = "0x838304")]
	public void EnteredRoom(AkRoom room)
	{
	}

	[Token(Token = "0x6001B03")]
	[Address(RVA = "0x838338", Offset = "0x838338", VA = "0x838338")]
	public void ExitedRoom(AkRoom room)
	{
	}

	[Token(Token = "0x6001B04")]
	[Address(RVA = "0x83836C", Offset = "0x83836C", VA = "0x83836C")]
	public void SetGameObjectInRoom()
	{
	}

	[Token(Token = "0x6001B05")]
	[Address(RVA = "0x8384A0", Offset = "0x8384A0", VA = "0x8384A0")]
	protected AkSpatialAudioBase()
	{
	}
}
[Token(Token = "0x20002C8")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74A0C0", Offset = "0x74A0C0")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A0C0", Offset = "0x74A0C0")]
public class AkSpatialAudioEmitter : AkSpatialAudioBase
{
	[Token(Token = "0x40013F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x751FF8", Offset = "0x751FF8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x751FF8", Offset = "0x751FF8")]
	public AuxBus reflectAuxBus;

	[Token(Token = "0x40013F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752058", Offset = "0x752058")]
	public float reflectionMaxPathLength;

	[Token(Token = "0x40013F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x752090", Offset = "0x752090")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752090", Offset = "0x752090")]
	public float reflectionsAuxBusGain;

	[Token(Token = "0x40013F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7520E4", Offset = "0x7520E4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7520E4", Offset = "0x7520E4")]
	public uint reflectionsOrder;

	[Token(Token = "0x40013F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x752138", Offset = "0x752138")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x752138", Offset = "0x752138")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752138", Offset = "0x752138")]
	public float roomReverbAuxBusGain;

	[Token(Token = "0x40013F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7521B0", Offset = "0x7521B0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7521B0", Offset = "0x7521B0")]
	public uint diffractionMaxEdges;

	[Token(Token = "0x40013F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752210", Offset = "0x752210")]
	public uint diffractionMaxPaths;

	[Token(Token = "0x40013FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752248", Offset = "0x752248")]
	public uint diffractionMaxPathLength;

	[Token(Token = "0x6001B06")]
	[Address(RVA = "0x838508", Offset = "0x838508", VA = "0x838508")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001B07")]
	[Address(RVA = "0x838694", Offset = "0x838694", VA = "0x838694")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001B08")]
	[Address(RVA = "0x838710", Offset = "0x838710", VA = "0x838710")]
	public AkSpatialAudioEmitter()
	{
	}
}
[Token(Token = "0x20002C9")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74A148", Offset = "0x74A148")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A148", Offset = "0x74A148")]
[DisallowMultipleComponent]
public class AkSpatialAudioListener : AkSpatialAudioBase
{
	[Token(Token = "0x20004F1")]
	public class SpatialAudioListenerList
	{
		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<AkSpatialAudioListener> listenerList;

		[Token(Token = "0x170003C3")]
		public List<AkSpatialAudioListener> ListenerList
		{
			[Token(Token = "0x60024A6")]
			[Address(RVA = "0x8395EC", Offset = "0x8395EC", VA = "0x8395EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024A7")]
		[Address(RVA = "0x8392F0", Offset = "0x8392F0", VA = "0x8392F0")]
		public bool Add(AkSpatialAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x60024A8")]
		[Address(RVA = "0x83943C", Offset = "0x83943C", VA = "0x83943C")]
		public bool Remove(AkSpatialAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0x8395F4", Offset = "0x8395F4", VA = "0x8395F4")]
		private void Refresh()
		{
		}

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0x83957C", Offset = "0x83957C", VA = "0x83957C")]
		public SpatialAudioListenerList()
		{
		}
	}

	[Token(Token = "0x40013FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AkSpatialAudioListener s_SpatialAudioListener;

	[Token(Token = "0x40013FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly SpatialAudioListenerList spatialAudioListeners;

	[Token(Token = "0x40013FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AkAudioListener AkAudioListener;

	[Token(Token = "0x170002C1")]
	public static AkAudioListener TheSpatialAudioListener
	{
		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x8390DC", Offset = "0x8390DC", VA = "0x8390DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002C2")]
	public static SpatialAudioListenerList SpatialAudioListeners
	{
		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x8391B8", Offset = "0x8391B8", VA = "0x8391B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001B0B")]
	[Address(RVA = "0x839220", Offset = "0x839220", VA = "0x839220")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B0C")]
	[Address(RVA = "0x839278", Offset = "0x839278", VA = "0x839278")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001B0D")]
	[Address(RVA = "0x8393C4", Offset = "0x8393C4", VA = "0x8393C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001B0E")]
	[Address(RVA = "0x839510", Offset = "0x839510", VA = "0x839510")]
	public AkSpatialAudioListener()
	{
	}
}
[Token(Token = "0x20002CA")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74A1E0", Offset = "0x74A1E0")]
public class AkState : AkDragDropTriggerHandler
{
	[Token(Token = "0x40013FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public State data;

	[Token(Token = "0x40013FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x752280", Offset = "0x752280")]
	private int valueIdInternal;

	[Token(Token = "0x4001400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7522DC", Offset = "0x7522DC")]
	private int groupIdInternal;

	[Token(Token = "0x4001401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x752338", Offset = "0x752338")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x4001402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x752394", Offset = "0x752394")]
	private byte[] groupGuidInternal;

	[Token(Token = "0x170002C3")]
	protected override BaseType WwiseType
	{
		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x8398C8", Offset = "0x8398C8", VA = "0x8398C8", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002C4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BA1C", Offset = "0x75BA1C")]
	public int valueID
	{
		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x8398EC", Offset = "0x8398EC", VA = "0x8398EC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002C5")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BA54", Offset = "0x75BA54")]
	public int groupID
	{
		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x839900", Offset = "0x839900", VA = "0x839900")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002C6")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BA8C", Offset = "0x75BA8C")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x839914", Offset = "0x839914", VA = "0x839914")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002C7")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BAC4", Offset = "0x75BAC4")]
	public byte[] groupGuid
	{
		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x8399DC", Offset = "0x8399DC", VA = "0x8399DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001B11")]
	[Address(RVA = "0x8398D0", Offset = "0x8398D0", VA = "0x8398D0", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001B16")]
	[Address(RVA = "0x839AA0", Offset = "0x839AA0", VA = "0x839AA0")]
	public AkState()
	{
	}
}
[Token(Token = "0x20002CB")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74A218", Offset = "0x74A218")]
[DisallowMultipleComponent]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A218", Offset = "0x74A218")]
[ExecuteInEditMode]
public class AkSurfaceReflector : MonoBehaviour
{
	[Token(Token = "0x4001403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7523F0", Offset = "0x7523F0")]
	public AcousticTexture AcousticTexture;

	[Token(Token = "0x4001404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752428", Offset = "0x752428")]
	public bool EnableDiffraction;

	[Token(Token = "0x4001405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752460", Offset = "0x752460")]
	public bool EnableDiffractionOnBoundaryEdges;

	[Token(Token = "0x4001406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752498", Offset = "0x752498")]
	public AkRoom AssociatedRoom;

	[Token(Token = "0x4001407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshFilter MeshFilter;

	[Token(Token = "0x6001B17")]
	[Address(RVA = "0x839EEC", Offset = "0x839EEC", VA = "0x839EEC")]
	public static ulong GetAkGeometrySetID(MeshFilter meshFilter)
	{
		return default(ulong);
	}

	[Token(Token = "0x6001B18")]
	[Address(RVA = "0x839F10", Offset = "0x839F10", VA = "0x839F10")]
	public static void AddGeometrySet(AcousticTexture acousticTexture, MeshFilter meshFilter, ulong roomID, bool enableDiffraction, bool enableDiffractionOnBoundaryEdges)
	{
	}

	[Token(Token = "0x6001B19")]
	[Address(RVA = "0x83AFF4", Offset = "0x83AFF4", VA = "0x83AFF4")]
	public static void RemoveGeometrySet(MeshFilter meshFilter)
	{
	}

	[Token(Token = "0x6001B1A")]
	[Address(RVA = "0x83B0AC", Offset = "0x83B0AC", VA = "0x83B0AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B1B")]
	[Address(RVA = "0x83B104", Offset = "0x83B104", VA = "0x83B104")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001B1C")]
	[Address(RVA = "0x83B1DC", Offset = "0x83B1DC", VA = "0x83B1DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001B1D")]
	[Address(RVA = "0x83B1E4", Offset = "0x83B1E4", VA = "0x83B1E4")]
	public AkSurfaceReflector()
	{
	}
}
[Token(Token = "0x20002CC")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74A2C0", Offset = "0x74A2C0")]
public class AkSwitch : AkDragDropTriggerHandler
{
	[Token(Token = "0x4001408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Switch data;

	[Token(Token = "0x4001409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7524D0", Offset = "0x7524D0")]
	private int valueIdInternal;

	[Token(Token = "0x400140A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x75252C", Offset = "0x75252C")]
	private int groupIdInternal;

	[Token(Token = "0x400140B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x752588", Offset = "0x752588")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x400140C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7525E4", Offset = "0x7525E4")]
	private byte[] groupGuidInternal;

	[Token(Token = "0x170002C8")]
	protected override BaseType WwiseType
	{
		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x83B24C", Offset = "0x83B24C", VA = "0x83B24C", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002C9")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BAFC", Offset = "0x75BAFC")]
	public int valueID
	{
		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x83B308", Offset = "0x83B308", VA = "0x83B308")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002CA")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BB34", Offset = "0x75BB34")]
	public int groupID
	{
		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x83B31C", Offset = "0x83B31C", VA = "0x83B31C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002CB")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BB6C", Offset = "0x75BB6C")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x83B330", Offset = "0x83B330", VA = "0x83B330")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002CC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BBA4", Offset = "0x75BBA4")]
	public byte[] groupGuid
	{
		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x83B3F8", Offset = "0x83B3F8", VA = "0x83B3F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001B1F")]
	[Address(RVA = "0x83B254", Offset = "0x83B254", VA = "0x83B254", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001B24")]
	[Address(RVA = "0x83B4BC", Offset = "0x83B4BC", VA = "0x83B4BC")]
	public AkSwitch()
	{
	}
}
[Token(Token = "0x20002CD")]
[DisallowMultipleComponent]
public class AkTerminator : MonoBehaviour
{
	[Token(Token = "0x6001B25")]
	[Address(RVA = "0x83B908", Offset = "0x83B908", VA = "0x83B908")]
	public AkTerminator()
	{
	}
}
[Token(Token = "0x20002CE")]
public abstract class AkTriggerBase : MonoBehaviour
{
	[Token(Token = "0x20004F2")]
	public delegate void Trigger(GameObject in_gameObject);

	[Token(Token = "0x400140D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Trigger triggerDelegate;

	[Token(Token = "0x6001B26")]
	[Address(RVA = "0x83D264", Offset = "0x83D264", VA = "0x83D264")]
	public static Dictionary<uint, string> GetAllDerivedTypes()
	{
		return null;
	}

	[Token(Token = "0x6001B27")]
	[Address(RVA = "0x83D6A0", Offset = "0x83D6A0", VA = "0x83D6A0")]
	protected AkTriggerBase()
	{
	}
}
[Token(Token = "0x20002CF")]
public class AkTriggerCollisionEnter : AkTriggerBase
{
	[Token(Token = "0x400140E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject triggerObject;

	[Token(Token = "0x6001B28")]
	[Address(RVA = "0x83DA9C", Offset = "0x83DA9C", VA = "0x83DA9C")]
	private void OnCollisionEnter(Collision in_other)
	{
	}

	[Token(Token = "0x6001B29")]
	[Address(RVA = "0x83DBAC", Offset = "0x83DBAC", VA = "0x83DBAC")]
	private void OnTriggerEnter(Collider in_other)
	{
	}

	[Token(Token = "0x6001B2A")]
	[Address(RVA = "0x83DCBC", Offset = "0x83DCBC", VA = "0x83DCBC")]
	public AkTriggerCollisionEnter()
	{
	}
}
[Token(Token = "0x20002D0")]
public class AkTriggerCollisionExit : AkTriggerBase
{
	[Token(Token = "0x400140F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject triggerObject;

	[Token(Token = "0x6001B2B")]
	[Address(RVA = "0x83DCC4", Offset = "0x83DCC4", VA = "0x83DCC4")]
	private void OnCollisionExit(Collision in_other)
	{
	}

	[Token(Token = "0x6001B2C")]
	[Address(RVA = "0x83DDD4", Offset = "0x83DDD4", VA = "0x83DDD4")]
	public AkTriggerCollisionExit()
	{
	}
}
[Token(Token = "0x20002D1")]
public class AkTriggerDisable : AkTriggerBase
{
	[Token(Token = "0x6001B2D")]
	[Address(RVA = "0x83DDDC", Offset = "0x83DDDC", VA = "0x83DDDC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001B2E")]
	[Address(RVA = "0x83DDF0", Offset = "0x83DDF0", VA = "0x83DDF0")]
	public AkTriggerDisable()
	{
	}
}
[Token(Token = "0x20002D2")]
public class AkTriggerEnable : AkTriggerBase
{
	[Token(Token = "0x6001B2F")]
	[Address(RVA = "0x83DDF8", Offset = "0x83DDF8", VA = "0x83DDF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001B30")]
	[Address(RVA = "0x83DE0C", Offset = "0x83DE0C", VA = "0x83DE0C")]
	public AkTriggerEnable()
	{
	}
}
[Token(Token = "0x20002D3")]
public class AkTriggerEnter : AkTriggerBase
{
	[Token(Token = "0x4001410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject triggerObject;

	[Token(Token = "0x6001B31")]
	[Address(RVA = "0x83DE14", Offset = "0x83DE14", VA = "0x83DE14")]
	private void OnTriggerEnter(Collider in_other)
	{
	}

	[Token(Token = "0x6001B32")]
	[Address(RVA = "0x83DF24", Offset = "0x83DF24", VA = "0x83DF24")]
	public AkTriggerEnter()
	{
	}
}
[Token(Token = "0x20002D4")]
public class AkTriggerExit : AkTriggerBase
{
	[Token(Token = "0x4001411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject triggerObject;

	[Token(Token = "0x6001B33")]
	[Address(RVA = "0x83DF2C", Offset = "0x83DF2C", VA = "0x83DF2C")]
	private void OnTriggerExit(Collider in_other)
	{
	}

	[Token(Token = "0x6001B34")]
	[Address(RVA = "0x83E03C", Offset = "0x83E03C", VA = "0x83E03C")]
	public AkTriggerExit()
	{
	}
}
[Token(Token = "0x20002D5")]
public abstract class AkTriggerHandler : MonoBehaviour
{
	[Token(Token = "0x4001412")]
	public const int AWAKE_TRIGGER_ID = 1151176110;

	[Token(Token = "0x4001413")]
	public const int START_TRIGGER_ID = 1281810935;

	[Token(Token = "0x4001414")]
	public const int DESTROY_TRIGGER_ID = -358577003;

	[Token(Token = "0x4001415")]
	public const int MAX_NB_TRIGGERS = 32;

	[Token(Token = "0x4001416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<uint, string> triggerTypes;

	[Token(Token = "0x4001417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool didDestroy;

	[Token(Token = "0x4001418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<int> triggerList;

	[Token(Token = "0x4001419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useOtherObject;

	[Token(Token = "0x6001B35")]
	public abstract void HandleEvent(GameObject in_gameObject);

	[Token(Token = "0x6001B36")]
	[Address(RVA = "0x83E044", Offset = "0x83E044", VA = "0x83E044", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001B37")]
	[Address(RVA = "0x83E51C", Offset = "0x83E51C", VA = "0x83E51C", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001B38")]
	[Address(RVA = "0x83E5A0", Offset = "0x83E5A0", VA = "0x83E5A0", Slot = "7")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6001B39")]
	[Address(RVA = "0x83E5B0", Offset = "0x83E5B0", VA = "0x83E5B0")]
	public void DoDestroy()
	{
	}

	[Token(Token = "0x6001B3A")]
	[Address(RVA = "0x83E10C", Offset = "0x83E10C", VA = "0x83E10C")]
	protected void RegisterTriggers(List<int> in_triggerList, AkTriggerBase.Trigger in_delegate)
	{
	}

	[Token(Token = "0x6001B3B")]
	[Address(RVA = "0x83E680", Offset = "0x83E680", VA = "0x83E680")]
	protected void UnregisterTriggers(List<int> in_triggerList, AkTriggerBase.Trigger in_delegate)
	{
	}

	[Token(Token = "0x6001B3C")]
	[Address(RVA = "0x83E9E0", Offset = "0x83E9E0", VA = "0x83E9E0")]
	protected AkTriggerHandler()
	{
	}
}
[Token(Token = "0x20002D6")]
[ExecuteInEditMode]
public abstract class AkDragDropTriggerHandler : AkTriggerHandler
{
	[Token(Token = "0x170002CD")]
	protected abstract BaseType WwiseType
	{
		[Token(Token = "0x6001B3E")]
		get;
	}

	[Token(Token = "0x6001B3F")]
	[Address(RVA = "0xA61118", Offset = "0xA61118", VA = "0xA61118", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001B40")]
	[Address(RVA = "0xA61120", Offset = "0xA61120", VA = "0xA61120", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001B41")]
	[Address(RVA = "0xA61128", Offset = "0xA61128", VA = "0xA61128", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001B42")]
	[Address(RVA = "0xA61130", Offset = "0xA61130", VA = "0xA61130")]
	protected AkDragDropTriggerHandler()
	{
	}
}
[Token(Token = "0x20002D7")]
public class AkTriggerMouseDown : AkTriggerBase
{
	[Token(Token = "0x6001B43")]
	[Address(RVA = "0x83EACC", Offset = "0x83EACC", VA = "0x83EACC")]
	private void OnMouseDown()
	{
	}

	[Token(Token = "0x6001B44")]
	[Address(RVA = "0x83EAE0", Offset = "0x83EAE0", VA = "0x83EAE0")]
	public AkTriggerMouseDown()
	{
	}
}
[Token(Token = "0x20002D8")]
public class AkTriggerMouseEnter : AkTriggerBase
{
	[Token(Token = "0x6001B45")]
	[Address(RVA = "0x83EAE8", Offset = "0x83EAE8", VA = "0x83EAE8")]
	private void OnMouseEnter()
	{
	}

	[Token(Token = "0x6001B46")]
	[Address(RVA = "0x83EAFC", Offset = "0x83EAFC", VA = "0x83EAFC")]
	public AkTriggerMouseEnter()
	{
	}
}
[Token(Token = "0x20002D9")]
public class AkTriggerMouseExit : AkTriggerBase
{
	[Token(Token = "0x6001B47")]
	[Address(RVA = "0x83EB04", Offset = "0x83EB04", VA = "0x83EB04")]
	private void OnMouseExit()
	{
	}

	[Token(Token = "0x6001B48")]
	[Address(RVA = "0x83EB18", Offset = "0x83EB18", VA = "0x83EB18")]
	public AkTriggerMouseExit()
	{
	}
}
[Token(Token = "0x20002DA")]
public class AkTriggerMouseUp : AkTriggerBase
{
	[Token(Token = "0x6001B49")]
	[Address(RVA = "0x83EB20", Offset = "0x83EB20", VA = "0x83EB20")]
	private void OnMouseUp()
	{
	}

	[Token(Token = "0x6001B4A")]
	[Address(RVA = "0x83EB34", Offset = "0x83EB34", VA = "0x83EB34")]
	public AkTriggerMouseUp()
	{
	}
}
[Token(Token = "0x20002DB")]
public class XboxLiveExample : MonoBehaviour
{
	[Token(Token = "0x400141A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string debugText;

	[Token(Token = "0x6001B4B")]
	[Address(RVA = "0x834B18", Offset = "0x834B18", VA = "0x834B18")]
	private void Start()
	{
	}

	[Token(Token = "0x6001B4C")]
	[Address(RVA = "0x834B1C", Offset = "0x834B1C", VA = "0x834B1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001B4D")]
	[Address(RVA = "0x834B20", Offset = "0x834B20", VA = "0x834B20")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6001B4E")]
	[Address(RVA = "0x834BC8", Offset = "0x834BC8", VA = "0x834BC8")]
	public XboxLiveExample()
	{
	}
}
namespace AK.Wwise
{
	[Serializable]
	[Token(Token = "0x20002DC")]
	public class AcousticTexture : BaseType
	{
		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseAcousticTextureReference WwiseObjectReference;

		[Token(Token = "0x170002CE")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B4F")]
			[Address(RVA = "0xA4BCB8", Offset = "0xA4BCB8", VA = "0xA4BCB8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B50")]
			[Address(RVA = "0xA4BCC0", Offset = "0xA4BCC0", VA = "0xA4BCC0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002CF")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B51")]
			[Address(RVA = "0xA4BD50", Offset = "0xA4BD50", VA = "0xA4BD50", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0xA4BD58", Offset = "0xA4BD58", VA = "0xA4BD58")]
		public AcousticTexture()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002DD")]
	public class AuxBus : BaseType
	{
		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseAuxBusReference WwiseObjectReference;

		[Token(Token = "0x170002D0")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B53")]
			[Address(RVA = "0xA4BD68", Offset = "0xA4BD68", VA = "0xA4BD68", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B54")]
			[Address(RVA = "0xA4BD70", Offset = "0xA4BD70", VA = "0xA4BD70", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B55")]
			[Address(RVA = "0xA4BE00", Offset = "0xA4BE00", VA = "0xA4BE00", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0xA4BE08", Offset = "0xA4BE08", VA = "0xA4BE08")]
		public AuxBus()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002DE")]
	public class Bank : BaseType
	{
		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseBankReference WwiseObjectReference;

		[Token(Token = "0x170002D2")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B57")]
			[Address(RVA = "0xA4BE10", Offset = "0xA4BE10", VA = "0xA4BE10", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B58")]
			[Address(RVA = "0xA4BE18", Offset = "0xA4BE18", VA = "0xA4BE18", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B59")]
			[Address(RVA = "0xA4BEA8", Offset = "0xA4BEA8", VA = "0xA4BEA8", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0xA4BEB0", Offset = "0xA4BEB0", VA = "0xA4BEB0")]
		public void Load(bool decodeBank = false, bool saveDecodedBank = false)
		{
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0xA4C134", Offset = "0xA4C134", VA = "0xA4C134")]
		public void LoadAsync([Optional] AkCallbackManager.BankCallback callback)
		{
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0xA4C384", Offset = "0xA4C384", VA = "0xA4C384")]
		public void Unload()
		{
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0xA4C56C", Offset = "0xA4C56C", VA = "0xA4C56C")]
		public Bank()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002DF")]
	public abstract class BaseGroupType : BaseType
	{
		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x752640", Offset = "0x752640")]
		private int groupIdInternal;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x75269C", Offset = "0x75269C")]
		private byte[] groupGuidInternal;

		[Token(Token = "0x170002D4")]
		public WwiseObjectReference GroupWwiseObjectReference
		{
			[Token(Token = "0x6001B5E")]
			[Address(RVA = "0xA4C574", Offset = "0xA4C574", VA = "0xA4C574")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D5")]
		public abstract WwiseObjectType WwiseObjectGroupType
		{
			[Token(Token = "0x6001B5F")]
			get;
		}

		[Token(Token = "0x170002D6")]
		public uint GroupId
		{
			[Token(Token = "0x6001B60")]
			[Address(RVA = "0xA4C65C", Offset = "0xA4C65C", VA = "0xA4C65C")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170002D7")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BBDC", Offset = "0x75BBDC")]
		public int groupID
		{
			[Token(Token = "0x6001B62")]
			[Address(RVA = "0xA4C814", Offset = "0xA4C814", VA = "0xA4C814")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BC14", Offset = "0x75BC14")]
		public byte[] groupGuid
		{
			[Token(Token = "0x6001B63")]
			[Address(RVA = "0xA4C818", Offset = "0xA4C818", VA = "0xA4C818")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0xA4C6F8", Offset = "0xA4C6F8", VA = "0xA4C6F8", Slot = "8")]
		public override bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0xA4C8DC", Offset = "0xA4C8DC", VA = "0xA4C8DC")]
		protected BaseGroupType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E0")]
	public abstract class BaseType
	{
		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7526F8", Offset = "0x7526F8")]
		private int idInternal;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x752754", Offset = "0x752754")]
		private byte[] valueGuidInternal;

		[Token(Token = "0x170002D9")]
		public abstract WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B65")]
			get;
			[Token(Token = "0x6001B66")]
			set;
		}

		[Token(Token = "0x170002DA")]
		public abstract WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B67")]
			get;
		}

		[Token(Token = "0x170002DB")]
		public virtual string Name
		{
			[Token(Token = "0x6001B68")]
			[Address(RVA = "0xA4C8E4", Offset = "0xA4C8E4", VA = "0xA4C8E4", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DC")]
		public uint Id
		{
			[Token(Token = "0x6001B69")]
			[Address(RVA = "0xA4C978", Offset = "0xA4C978", VA = "0xA4C978")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170002DD")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BC4C", Offset = "0x75BC4C")]
		public int ID
		{
			[Token(Token = "0x6001B6E")]
			[Address(RVA = "0xA4CB58", Offset = "0xA4CB58", VA = "0xA4CB58")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DE")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x75BC84", Offset = "0x75BC84")]
		public byte[] valueGuid
		{
			[Token(Token = "0x6001B6F")]
			[Address(RVA = "0xA4CB5C", Offset = "0xA4CB5C", VA = "0xA4CB5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0xA4C790", Offset = "0xA4C790", VA = "0xA4C790", Slot = "8")]
		public virtual bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0xA4C9C8", Offset = "0xA4C9C8", VA = "0xA4C9C8")]
		public bool Validate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0xA4CAA4", Offset = "0xA4CAA4", VA = "0xA4CAA4")]
		protected void Verify(AKRESULT result)
		{
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0xA4CAA8", Offset = "0xA4CAA8", VA = "0xA4CAA8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0xA4BD60", Offset = "0xA4BD60", VA = "0xA4BD60")]
		protected BaseType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E1")]
	public class CallbackFlags
	{
		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint value;

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0xA4CC20", Offset = "0xA4CC20", VA = "0xA4CC20")]
		public CallbackFlags()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E2")]
	public class Event : BaseType
	{
		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseEventReference WwiseObjectReference;

		[Token(Token = "0x170002DF")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B72")]
			[Address(RVA = "0xA4CC28", Offset = "0xA4CC28", VA = "0xA4CC28", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B73")]
			[Address(RVA = "0xA4CC30", Offset = "0xA4CC30", VA = "0xA4CC30", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002E0")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B74")]
			[Address(RVA = "0xA4CCC0", Offset = "0xA4CCC0", VA = "0xA4CCC0", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0xA4CCC8", Offset = "0xA4CCC8", VA = "0xA4CCC8")]
		private void VerifyPlayingID(uint playingId)
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0xA4CCCC", Offset = "0xA4CCCC", VA = "0xA4CCCC")]
		public uint Post(GameObject gameObject)
		{
			return default(uint);
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0xA4CD7C", Offset = "0xA4CD7C", VA = "0xA4CD7C")]
		public uint Post(GameObject gameObject, CallbackFlags flags, AkCallbackManager.EventCallback callback, [Optional] object cookie)
		{
			return default(uint);
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0xA4CE5C", Offset = "0xA4CE5C", VA = "0xA4CE5C")]
		public uint Post(GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, [Optional] object cookie)
		{
			return default(uint);
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0xA4CF30", Offset = "0xA4CF30", VA = "0xA4CF30")]
		public void Stop(GameObject gameObject, int transitionDuration = 0, AkCurveInterpolation curveInterpolation = AkCurveInterpolation.AkCurveInterpolation_Linear)
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xA4CF48", Offset = "0xA4CF48", VA = "0xA4CF48")]
		public void ExecuteAction(GameObject gameObject, AkActionOnEventType actionOnEventType, int transitionDuration, AkCurveInterpolation curveInterpolation)
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0xA4D018", Offset = "0xA4D018", VA = "0xA4D018")]
		public void PostMIDI(GameObject gameObject, AkMIDIPostArray array)
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0xA4D08C", Offset = "0xA4D08C", VA = "0xA4D08C")]
		public void PostMIDI(GameObject gameObject, AkMIDIPostArray array, int count)
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0xA4D108", Offset = "0xA4D108", VA = "0xA4D108")]
		public void StopMIDI(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0xA4D1B4", Offset = "0xA4D1B4", VA = "0xA4D1B4")]
		public void StopMIDI()
		{
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0xA4D24C", Offset = "0xA4D24C", VA = "0xA4D24C")]
		public Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E3")]
	public class RTPC : BaseType
	{
		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseRtpcReference WwiseObjectReference;

		[Token(Token = "0x170002E1")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B80")]
			[Address(RVA = "0xA4D254", Offset = "0xA4D254", VA = "0xA4D254", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B81")]
			[Address(RVA = "0xA4D25C", Offset = "0xA4D25C", VA = "0xA4D25C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002E2")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B82")]
			[Address(RVA = "0xA4D2EC", Offset = "0xA4D2EC", VA = "0xA4D2EC", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0xA4D2F4", Offset = "0xA4D2F4", VA = "0xA4D2F4")]
		public void SetValue(GameObject gameObject, float value)
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0xA4D3B4", Offset = "0xA4D3B4", VA = "0xA4D3B4")]
		public float GetValue(GameObject gameObject)
		{
			return default(float);
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0xA4D4A8", Offset = "0xA4D4A8", VA = "0xA4D4A8")]
		public void SetGlobalValue(float value)
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0xA4D554", Offset = "0xA4D554", VA = "0xA4D554")]
		public float GetGlobalValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0xA4D55C", Offset = "0xA4D55C", VA = "0xA4D55C")]
		public RTPC()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E4")]
	public class State : BaseGroupType
	{
		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WwiseStateReference WwiseObjectReference;

		[Token(Token = "0x170002E3")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B88")]
			[Address(RVA = "0xA4D564", Offset = "0xA4D564", VA = "0xA4D564", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B89")]
			[Address(RVA = "0xA4D56C", Offset = "0xA4D56C", VA = "0xA4D56C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0xA4D5FC", Offset = "0xA4D5FC", VA = "0xA4D5FC", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x170002E5")]
		public override WwiseObjectType WwiseObjectGroupType
		{
			[Token(Token = "0x6001B8B")]
			[Address(RVA = "0xA4D604", Offset = "0xA4D604", VA = "0xA4D604", Slot = "9")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0xA4D60C", Offset = "0xA4D60C", VA = "0xA4D60C")]
		public void SetValue()
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0xA4D6B4", Offset = "0xA4D6B4", VA = "0xA4D6B4")]
		public State()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E5")]
	public class Switch : BaseGroupType
	{
		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WwiseSwitchReference WwiseObjectReference;

		[Token(Token = "0x170002E6")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B8E")]
			[Address(RVA = "0xA4D6BC", Offset = "0xA4D6BC", VA = "0xA4D6BC", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B8F")]
			[Address(RVA = "0xA4D6C4", Offset = "0xA4D6C4", VA = "0xA4D6C4", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002E7")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B90")]
			[Address(RVA = "0xA4D754", Offset = "0xA4D754", VA = "0xA4D754", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x170002E8")]
		public override WwiseObjectType WwiseObjectGroupType
		{
			[Token(Token = "0x6001B91")]
			[Address(RVA = "0xA4D75C", Offset = "0xA4D75C", VA = "0xA4D75C", Slot = "9")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0xA4D764", Offset = "0xA4D764", VA = "0xA4D764")]
		public void SetValue(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0xA4D820", Offset = "0xA4D820", VA = "0xA4D820")]
		public Switch()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E6")]
	public class Trigger : BaseType
	{
		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseTriggerReference WwiseObjectReference;

		[Token(Token = "0x170002E9")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001B94")]
			[Address(RVA = "0xA4D828", Offset = "0xA4D828", VA = "0xA4D828", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B95")]
			[Address(RVA = "0xA4D830", Offset = "0xA4D830", VA = "0xA4D830", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001B96")]
			[Address(RVA = "0xA4D8C0", Offset = "0xA4D8C0", VA = "0xA4D8C0", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0xA4D8C8", Offset = "0xA4D8C8", VA = "0xA4D8C8")]
		public void Post(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0xA4D974", Offset = "0xA4D974", VA = "0xA4D974")]
		public Trigger()
		{
		}
	}
}
namespace Valve.VR
{
	[Token(Token = "0x20002E7")]
	public struct IVRSystem
	{
		[Token(Token = "0x20004F3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74AFCC", Offset = "0x74AFCC")]
		internal delegate void _GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20004F4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74AFE0", Offset = "0x74AFE0")]
		internal delegate HmdMatrix44_t _GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ);

		[Token(Token = "0x20004F5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74AFF4", Offset = "0x74AFF4")]
		internal delegate void _GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom);

		[Token(Token = "0x20004F6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B008", Offset = "0x74B008")]
		internal delegate bool _ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates);

		[Token(Token = "0x20004F7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B01C", Offset = "0x74B01C")]
		internal delegate HmdMatrix34_t _GetEyeToHeadTransform(EVREye eEye);

		[Token(Token = "0x20004F8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B030", Offset = "0x74B030")]
		internal delegate bool _GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter);

		[Token(Token = "0x20004F9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B044", Offset = "0x74B044")]
		internal delegate int _GetD3D9AdapterIndex();

		[Token(Token = "0x20004FA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B058", Offset = "0x74B058")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex);

		[Token(Token = "0x20004FB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B06C", Offset = "0x74B06C")]
		internal delegate void _GetOutputDevice(ref ulong pnDevice, ETextureType textureType);

		[Token(Token = "0x20004FC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B080", Offset = "0x74B080")]
		internal delegate bool _IsDisplayOnDesktop();

		[Token(Token = "0x20004FD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B094", Offset = "0x74B094")]
		internal delegate bool _SetDisplayVisibility(bool bIsVisibleOnDesktop);

		[Token(Token = "0x20004FE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B0A8", Offset = "0x74B0A8")]
		internal delegate void _GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, [In][Out] TrackedDevicePose_t[] pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount);

		[Token(Token = "0x20004FF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B0BC", Offset = "0x74B0BC")]
		internal delegate void _ResetSeatedZeroPose();

		[Token(Token = "0x2000500")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B0D0", Offset = "0x74B0D0")]
		internal delegate HmdMatrix34_t _GetSeatedZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x2000501")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B0E4", Offset = "0x74B0E4")]
		internal delegate HmdMatrix34_t _GetRawZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x2000502")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B0F8", Offset = "0x74B0F8")]
		internal delegate uint _GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, [In][Out] uint[] punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex);

		[Token(Token = "0x2000503")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B10C", Offset = "0x74B10C")]
		internal delegate EDeviceActivityLevel _GetTrackedDeviceActivityLevel(uint unDeviceId);

		[Token(Token = "0x2000504")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B120", Offset = "0x74B120")]
		internal delegate void _ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform);

		[Token(Token = "0x2000505")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B134", Offset = "0x74B134")]
		internal delegate uint _GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType);

		[Token(Token = "0x2000506")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B148", Offset = "0x74B148")]
		internal delegate ETrackedControllerRole _GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex);

		[Token(Token = "0x2000507")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B15C", Offset = "0x74B15C")]
		internal delegate ETrackedDeviceClass _GetTrackedDeviceClass(uint unDeviceIndex);

		[Token(Token = "0x2000508")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B170", Offset = "0x74B170")]
		internal delegate bool _IsTrackedDeviceConnected(uint unDeviceIndex);

		[Token(Token = "0x2000509")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B184", Offset = "0x74B184")]
		internal delegate bool _GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200050A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B198", Offset = "0x74B198")]
		internal delegate float _GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200050B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B1AC", Offset = "0x74B1AC")]
		internal delegate int _GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200050C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B1C0", Offset = "0x74B1C0")]
		internal delegate ulong _GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200050D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B1D4", Offset = "0x74B1D4")]
		internal delegate HmdMatrix34_t _GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200050E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B1E8", Offset = "0x74B1E8")]
		internal delegate uint _GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError);

		[Token(Token = "0x200050F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B1FC", Offset = "0x74B1FC")]
		internal delegate IntPtr _GetPropErrorNameFromEnum(ETrackedPropertyError error);

		[Token(Token = "0x2000510")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B210", Offset = "0x74B210")]
		internal delegate bool _PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x2000511")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B224", Offset = "0x74B224")]
		internal delegate bool _PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x2000512")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B238", Offset = "0x74B238")]
		internal delegate IntPtr _GetEventTypeNameFromEnum(EVREventType eType);

		[Token(Token = "0x2000513")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B24C", Offset = "0x74B24C")]
		internal delegate HiddenAreaMesh_t _GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type);

		[Token(Token = "0x2000514")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B260", Offset = "0x74B260")]
		internal delegate bool _GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize);

		[Token(Token = "0x2000515")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B274", Offset = "0x74B274")]
		internal delegate bool _GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x2000516")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B288", Offset = "0x74B288")]
		internal delegate void _TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, char usDurationMicroSec);

		[Token(Token = "0x2000517")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B29C", Offset = "0x74B29C")]
		internal delegate IntPtr _GetButtonIdNameFromEnum(EVRButtonId eButtonId);

		[Token(Token = "0x2000518")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B2B0", Offset = "0x74B2B0")]
		internal delegate IntPtr _GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType);

		[Token(Token = "0x2000519")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B2C4", Offset = "0x74B2C4")]
		internal delegate bool _CaptureInputFocus();

		[Token(Token = "0x200051A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B2D8", Offset = "0x74B2D8")]
		internal delegate void _ReleaseInputFocus();

		[Token(Token = "0x200051B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B2EC", Offset = "0x74B2EC")]
		internal delegate bool _IsInputFocusCapturedByAnotherProcess();

		[Token(Token = "0x200051C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B300", Offset = "0x74B300")]
		internal delegate uint _DriverDebugRequest(uint unDeviceIndex, string pchRequest, string pchResponseBuffer, uint unResponseBufferSize);

		[Token(Token = "0x200051D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B314", Offset = "0x74B314")]
		internal delegate EVRFirmwareError _PerformFirmwareUpdate(uint unDeviceIndex);

		[Token(Token = "0x200051E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B328", Offset = "0x74B328")]
		internal delegate void _AcknowledgeQuit_Exiting();

		[Token(Token = "0x200051F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B33C", Offset = "0x74B33C")]
		internal delegate void _AcknowledgeQuit_UserPrompt();

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetRecommendedRenderTargetSize GetRecommendedRenderTargetSize;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetProjectionMatrix GetProjectionMatrix;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetProjectionRaw GetProjectionRaw;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ComputeDistortion ComputeDistortion;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetEyeToHeadTransform GetEyeToHeadTransform;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetTimeSinceLastVsync GetTimeSinceLastVsync;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetD3D9AdapterIndex GetD3D9AdapterIndex;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOutputDevice GetOutputDevice;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _IsDisplayOnDesktop IsDisplayOnDesktop;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetDisplayVisibility SetDisplayVisibility;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetDeviceToAbsoluteTrackingPose GetDeviceToAbsoluteTrackingPose;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ResetSeatedZeroPose ResetSeatedZeroPose;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetSeatedZeroPoseToStandingAbsoluteTrackingPose GetSeatedZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetRawZeroPoseToStandingAbsoluteTrackingPose GetRawZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetSortedTrackedDeviceIndicesOfClass GetSortedTrackedDeviceIndicesOfClass;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetTrackedDeviceActivityLevel GetTrackedDeviceActivityLevel;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ApplyTransform ApplyTransform;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetTrackedDeviceIndexForControllerRole GetTrackedDeviceIndexForControllerRole;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetControllerRoleForTrackedDeviceIndex GetControllerRoleForTrackedDeviceIndex;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetTrackedDeviceClass GetTrackedDeviceClass;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsTrackedDeviceConnected IsTrackedDeviceConnected;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetBoolTrackedDeviceProperty GetBoolTrackedDeviceProperty;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetFloatTrackedDeviceProperty GetFloatTrackedDeviceProperty;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetInt32TrackedDeviceProperty GetInt32TrackedDeviceProperty;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetUint64TrackedDeviceProperty GetUint64TrackedDeviceProperty;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _GetMatrix34TrackedDeviceProperty GetMatrix34TrackedDeviceProperty;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetStringTrackedDeviceProperty GetStringTrackedDeviceProperty;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _GetPropErrorNameFromEnum GetPropErrorNameFromEnum;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _PollNextEvent PollNextEvent;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _PollNextEventWithPose PollNextEventWithPose;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _GetEventTypeNameFromEnum GetEventTypeNameFromEnum;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetHiddenAreaMesh GetHiddenAreaMesh;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetControllerState GetControllerState;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetControllerStateWithPose GetControllerStateWithPose;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _TriggerHapticPulse TriggerHapticPulse;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _GetButtonIdNameFromEnum GetButtonIdNameFromEnum;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _GetControllerAxisTypeNameFromEnum GetControllerAxisTypeNameFromEnum;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _CaptureInputFocus CaptureInputFocus;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _ReleaseInputFocus ReleaseInputFocus;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _IsInputFocusCapturedByAnotherProcess IsInputFocusCapturedByAnotherProcess;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _DriverDebugRequest DriverDebugRequest;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _PerformFirmwareUpdate PerformFirmwareUpdate;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _AcknowledgeQuit_Exiting AcknowledgeQuit_Exiting;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _AcknowledgeQuit_UserPrompt AcknowledgeQuit_UserPrompt;
	}
	[Token(Token = "0x20002E8")]
	public struct IVRExtendedDisplay
	{
		[Token(Token = "0x2000520")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B350", Offset = "0x74B350")]
		internal delegate void _GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x2000521")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B364", Offset = "0x74B364")]
		internal delegate void _GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x2000522")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B378", Offset = "0x74B378")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex);

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetWindowBounds GetWindowBounds;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetEyeOutputViewport GetEyeOutputViewport;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;
	}
	[Token(Token = "0x20002E9")]
	public struct IVRTrackedCamera
	{
		[Token(Token = "0x2000523")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B38C", Offset = "0x74B38C")]
		internal delegate IntPtr _GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError);

		[Token(Token = "0x2000524")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B3A0", Offset = "0x74B3A0")]
		internal delegate EVRTrackedCameraError _HasCamera(uint nDeviceIndex, ref bool pHasCamera);

		[Token(Token = "0x2000525")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B3B4", Offset = "0x74B3B4")]
		internal delegate EVRTrackedCameraError _GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize);

		[Token(Token = "0x2000526")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B3C8", Offset = "0x74B3C8")]
		internal delegate EVRTrackedCameraError _GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter);

		[Token(Token = "0x2000527")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B3DC", Offset = "0x74B3DC")]
		internal delegate EVRTrackedCameraError _GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection);

		[Token(Token = "0x2000528")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B3F0", Offset = "0x74B3F0")]
		internal delegate EVRTrackedCameraError _AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle);

		[Token(Token = "0x2000529")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B404", Offset = "0x74B404")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamingService(ulong hTrackedCamera);

		[Token(Token = "0x200052A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B418", Offset = "0x74B418")]
		internal delegate EVRTrackedCameraError _GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x200052B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B42C", Offset = "0x74B42C")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x200052C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B440", Offset = "0x74B440")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x200052D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B454", Offset = "0x74B454")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x200052E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B468", Offset = "0x74B468")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId);

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HasCamera HasCamera;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetCameraFrameSize GetCameraFrameSize;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetCameraIntrinsics GetCameraIntrinsics;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetCameraProjection GetCameraProjection;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _AcquireVideoStreamingService AcquireVideoStreamingService;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ReleaseVideoStreamingService ReleaseVideoStreamingService;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetVideoStreamTextureSize GetVideoStreamTextureSize;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetVideoStreamTextureGL GetVideoStreamTextureGL;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL;
	}
	[Token(Token = "0x20002EA")]
	public struct IVRApplications
	{
		[Token(Token = "0x200052F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B47C", Offset = "0x74B47C")]
		internal delegate EVRApplicationError _AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary);

		[Token(Token = "0x2000530")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B490", Offset = "0x74B490")]
		internal delegate EVRApplicationError _RemoveApplicationManifest(string pchApplicationManifestFullPath);

		[Token(Token = "0x2000531")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B4A4", Offset = "0x74B4A4")]
		internal delegate bool _IsApplicationInstalled(string pchAppKey);

		[Token(Token = "0x2000532")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B4B8", Offset = "0x74B4B8")]
		internal delegate uint _GetApplicationCount();

		[Token(Token = "0x2000533")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B4CC", Offset = "0x74B4CC")]
		internal delegate EVRApplicationError _GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000534")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B4E0", Offset = "0x74B4E0")]
		internal delegate EVRApplicationError _GetApplicationKeyByProcessId(uint unProcessId, string pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000535")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B4F4", Offset = "0x74B4F4")]
		internal delegate EVRApplicationError _LaunchApplication(string pchAppKey);

		[Token(Token = "0x2000536")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B508", Offset = "0x74B508")]
		internal delegate EVRApplicationError _LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, [In][Out] AppOverrideKeys_t[] pKeys, uint unKeys);

		[Token(Token = "0x2000537")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B51C", Offset = "0x74B51C")]
		internal delegate EVRApplicationError _LaunchApplicationFromMimeType(string pchMimeType, string pchArgs);

		[Token(Token = "0x2000538")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B530", Offset = "0x74B530")]
		internal delegate EVRApplicationError _LaunchDashboardOverlay(string pchAppKey);

		[Token(Token = "0x2000539")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B544", Offset = "0x74B544")]
		internal delegate bool _CancelApplicationLaunch(string pchAppKey);

		[Token(Token = "0x200053A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B558", Offset = "0x74B558")]
		internal delegate EVRApplicationError _IdentifyApplication(uint unProcessId, string pchAppKey);

		[Token(Token = "0x200053B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B56C", Offset = "0x74B56C")]
		internal delegate uint _GetApplicationProcessId(string pchAppKey);

		[Token(Token = "0x200053C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B580", Offset = "0x74B580")]
		internal delegate IntPtr _GetApplicationsErrorNameFromEnum(EVRApplicationError error);

		[Token(Token = "0x200053D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B594", Offset = "0x74B594")]
		internal delegate uint _GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError);

		[Token(Token = "0x200053E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B5A8", Offset = "0x74B5A8")]
		internal delegate bool _GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x200053F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B5BC", Offset = "0x74B5BC")]
		internal delegate ulong _GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x2000540")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B5D0", Offset = "0x74B5D0")]
		internal delegate EVRApplicationError _SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch);

		[Token(Token = "0x2000541")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B5E4", Offset = "0x74B5E4")]
		internal delegate bool _GetApplicationAutoLaunch(string pchAppKey);

		[Token(Token = "0x2000542")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B5F8", Offset = "0x74B5F8")]
		internal delegate EVRApplicationError _SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType);

		[Token(Token = "0x2000543")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B60C", Offset = "0x74B60C")]
		internal delegate bool _GetDefaultApplicationForMimeType(string pchMimeType, string pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000544")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B620", Offset = "0x74B620")]
		internal delegate bool _GetApplicationSupportedMimeTypes(string pchAppKey, string pchMimeTypesBuffer, uint unMimeTypesBuffer);

		[Token(Token = "0x2000545")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B634", Offset = "0x74B634")]
		internal delegate uint _GetApplicationsThatSupportMimeType(string pchMimeType, string pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer);

		[Token(Token = "0x2000546")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B648", Offset = "0x74B648")]
		internal delegate uint _GetApplicationLaunchArguments(uint unHandle, string pchArgs, uint unArgs);

		[Token(Token = "0x2000547")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B65C", Offset = "0x74B65C")]
		internal delegate EVRApplicationError _GetStartingApplication(string pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000548")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B670", Offset = "0x74B670")]
		internal delegate EVRApplicationTransitionState _GetTransitionState();

		[Token(Token = "0x2000549")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B684", Offset = "0x74B684")]
		internal delegate EVRApplicationError _PerformApplicationPrelaunchCheck(string pchAppKey);

		[Token(Token = "0x200054A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B698", Offset = "0x74B698")]
		internal delegate IntPtr _GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state);

		[Token(Token = "0x200054B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B6AC", Offset = "0x74B6AC")]
		internal delegate bool _IsQuitUserPromptRequested();

		[Token(Token = "0x200054C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B6C0", Offset = "0x74B6C0")]
		internal delegate EVRApplicationError _LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory);

		[Token(Token = "0x200054D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B6D4", Offset = "0x74B6D4")]
		internal delegate uint _GetCurrentSceneProcessId();

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _AddApplicationManifest AddApplicationManifest;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveApplicationManifest RemoveApplicationManifest;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _IsApplicationInstalled IsApplicationInstalled;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetApplicationCount GetApplicationCount;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetApplicationKeyByIndex GetApplicationKeyByIndex;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetApplicationKeyByProcessId GetApplicationKeyByProcessId;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _LaunchApplication LaunchApplication;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _LaunchTemplateApplication LaunchTemplateApplication;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _LaunchApplicationFromMimeType LaunchApplicationFromMimeType;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _LaunchDashboardOverlay LaunchDashboardOverlay;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _CancelApplicationLaunch CancelApplicationLaunch;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _IdentifyApplication IdentifyApplication;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetApplicationProcessId GetApplicationProcessId;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetApplicationPropertyString GetApplicationPropertyString;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetApplicationPropertyBool GetApplicationPropertyBool;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetApplicationPropertyUint64 GetApplicationPropertyUint64;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _SetApplicationAutoLaunch SetApplicationAutoLaunch;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetApplicationAutoLaunch GetApplicationAutoLaunch;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetApplicationLaunchArguments GetApplicationLaunchArguments;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetStartingApplication GetStartingApplication;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetTransitionState GetTransitionState;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _IsQuitUserPromptRequested IsQuitUserPromptRequested;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _LaunchInternalProcess LaunchInternalProcess;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetCurrentSceneProcessId GetCurrentSceneProcessId;
	}
	[Token(Token = "0x20002EB")]
	public struct IVRChaperone
	{
		[Token(Token = "0x200054E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B6E8", Offset = "0x74B6E8")]
		internal delegate ChaperoneCalibrationState _GetCalibrationState();

		[Token(Token = "0x200054F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B6FC", Offset = "0x74B6FC")]
		internal delegate bool _GetPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x2000550")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B710", Offset = "0x74B710")]
		internal delegate bool _GetPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x2000551")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B724", Offset = "0x74B724")]
		internal delegate void _ReloadInfo();

		[Token(Token = "0x2000552")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B738", Offset = "0x74B738")]
		internal delegate void _SetSceneColor(HmdColor_t color);

		[Token(Token = "0x2000553")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B74C", Offset = "0x74B74C")]
		internal delegate void _GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor);

		[Token(Token = "0x2000554")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B760", Offset = "0x74B760")]
		internal delegate bool _AreBoundsVisible();

		[Token(Token = "0x2000555")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B774", Offset = "0x74B774")]
		internal delegate void _ForceBoundsVisible(bool bForce);

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCalibrationState GetCalibrationState;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetPlayAreaSize GetPlayAreaSize;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetPlayAreaRect GetPlayAreaRect;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ReloadInfo ReloadInfo;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetSceneColor SetSceneColor;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetBoundsColor GetBoundsColor;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _AreBoundsVisible AreBoundsVisible;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _ForceBoundsVisible ForceBoundsVisible;
	}
	[Token(Token = "0x20002EC")]
	public struct IVRChaperoneSetup
	{
		[Token(Token = "0x2000556")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B788", Offset = "0x74B788")]
		internal delegate bool _CommitWorkingCopy(EChaperoneConfigFile configFile);

		[Token(Token = "0x2000557")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B79C", Offset = "0x74B79C")]
		internal delegate void _RevertWorkingCopy();

		[Token(Token = "0x2000558")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B7B0", Offset = "0x74B7B0")]
		internal delegate bool _GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x2000559")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B7C4", Offset = "0x74B7C4")]
		internal delegate bool _GetWorkingPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x200055A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B7D8", Offset = "0x74B7D8")]
		internal delegate bool _GetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x200055B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B7EC", Offset = "0x74B7EC")]
		internal delegate bool _GetLiveCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x200055C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B800", Offset = "0x74B800")]
		internal delegate bool _GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x200055D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B814", Offset = "0x74B814")]
		internal delegate bool _GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x200055E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B828", Offset = "0x74B828")]
		internal delegate void _SetWorkingPlayAreaSize(float sizeX, float sizeZ);

		[Token(Token = "0x200055F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B83C", Offset = "0x74B83C")]
		internal delegate void _SetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x2000560")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B850", Offset = "0x74B850")]
		internal delegate void _SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000561")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B864", Offset = "0x74B864")]
		internal delegate void _SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000562")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B878", Offset = "0x74B878")]
		internal delegate void _ReloadFromDisk(EChaperoneConfigFile configFile);

		[Token(Token = "0x2000563")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B88C", Offset = "0x74B88C")]
		internal delegate bool _GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000564")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B8A0", Offset = "0x74B8A0")]
		internal delegate void _SetWorkingCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, uint unTagCount);

		[Token(Token = "0x2000565")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B8B4", Offset = "0x74B8B4")]
		internal delegate bool _GetLiveCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, ref uint punTagCount);

		[Token(Token = "0x2000566")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B8C8", Offset = "0x74B8C8")]
		internal delegate bool _SetWorkingPhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x2000567")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B8DC", Offset = "0x74B8DC")]
		internal delegate bool _GetLivePhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x2000568")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B8F0", Offset = "0x74B8F0")]
		internal delegate bool _ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength);

		[Token(Token = "0x2000569")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B904", Offset = "0x74B904")]
		internal delegate bool _ImportFromBufferToWorking(string pBuffer, uint nImportFlags);

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CommitWorkingCopy CommitWorkingCopy;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RevertWorkingCopy RevertWorkingCopy;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetWorkingPlayAreaSize GetWorkingPlayAreaSize;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetWorkingPlayAreaRect GetWorkingPlayAreaRect;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetWorkingCollisionBoundsInfo GetWorkingCollisionBoundsInfo;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetLiveCollisionBoundsInfo GetLiveCollisionBoundsInfo;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetWorkingSeatedZeroPoseToRawTrackingPose GetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetWorkingStandingZeroPoseToRawTrackingPose GetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _SetWorkingPlayAreaSize SetWorkingPlayAreaSize;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _SetWorkingCollisionBoundsInfo SetWorkingCollisionBoundsInfo;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetWorkingSeatedZeroPoseToRawTrackingPose SetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _SetWorkingStandingZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ReloadFromDisk ReloadFromDisk;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetLiveSeatedZeroPoseToRawTrackingPose GetLiveSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetWorkingCollisionBoundsTagsInfo SetWorkingCollisionBoundsTagsInfo;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetLiveCollisionBoundsTagsInfo GetLiveCollisionBoundsTagsInfo;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetWorkingPhysicalBoundsInfo SetWorkingPhysicalBoundsInfo;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetLivePhysicalBoundsInfo GetLivePhysicalBoundsInfo;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _ExportLiveToBuffer ExportLiveToBuffer;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _ImportFromBufferToWorking ImportFromBufferToWorking;
	}
	[Token(Token = "0x20002ED")]
	public struct IVRCompositor
	{
		[Token(Token = "0x200056A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B918", Offset = "0x74B918")]
		internal delegate void _SetTrackingSpace(ETrackingUniverseOrigin eOrigin);

		[Token(Token = "0x200056B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B92C", Offset = "0x74B92C")]
		internal delegate ETrackingUniverseOrigin _GetTrackingSpace();

		[Token(Token = "0x200056C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B940", Offset = "0x74B940")]
		internal delegate EVRCompositorError _WaitGetPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x200056D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B954", Offset = "0x74B954")]
		internal delegate EVRCompositorError _GetLastPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x200056E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B968", Offset = "0x74B968")]
		internal delegate EVRCompositorError _GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose);

		[Token(Token = "0x200056F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B97C", Offset = "0x74B97C")]
		internal delegate EVRCompositorError _Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags);

		[Token(Token = "0x2000570")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B990", Offset = "0x74B990")]
		internal delegate void _ClearLastSubmittedFrame();

		[Token(Token = "0x2000571")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B9A4", Offset = "0x74B9A4")]
		internal delegate void _PostPresentHandoff();

		[Token(Token = "0x2000572")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B9B8", Offset = "0x74B9B8")]
		internal delegate bool _GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo);

		[Token(Token = "0x2000573")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B9CC", Offset = "0x74B9CC")]
		internal delegate uint _GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames);

		[Token(Token = "0x2000574")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B9E0", Offset = "0x74B9E0")]
		internal delegate float _GetFrameTimeRemaining();

		[Token(Token = "0x2000575")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74B9F4", Offset = "0x74B9F4")]
		internal delegate void _GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes);

		[Token(Token = "0x2000576")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BA08", Offset = "0x74BA08")]
		internal delegate void _FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground);

		[Token(Token = "0x2000577")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BA1C", Offset = "0x74BA1C")]
		internal delegate HmdColor_t _GetCurrentFadeColor(bool bBackground);

		[Token(Token = "0x2000578")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BA30", Offset = "0x74BA30")]
		internal delegate void _FadeGrid(float fSeconds, bool bFadeIn);

		[Token(Token = "0x2000579")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BA44", Offset = "0x74BA44")]
		internal delegate float _GetCurrentGridAlpha();

		[Token(Token = "0x200057A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BA58", Offset = "0x74BA58")]
		internal delegate EVRCompositorError _SetSkyboxOverride([In][Out] Texture_t[] pTextures, uint unTextureCount);

		[Token(Token = "0x200057B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BA6C", Offset = "0x74BA6C")]
		internal delegate void _ClearSkyboxOverride();

		[Token(Token = "0x200057C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BA80", Offset = "0x74BA80")]
		internal delegate void _CompositorBringToFront();

		[Token(Token = "0x200057D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BA94", Offset = "0x74BA94")]
		internal delegate void _CompositorGoToBack();

		[Token(Token = "0x200057E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BAA8", Offset = "0x74BAA8")]
		internal delegate void _CompositorQuit();

		[Token(Token = "0x200057F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BABC", Offset = "0x74BABC")]
		internal delegate bool _IsFullscreen();

		[Token(Token = "0x2000580")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BAD0", Offset = "0x74BAD0")]
		internal delegate uint _GetCurrentSceneFocusProcess();

		[Token(Token = "0x2000581")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BAE4", Offset = "0x74BAE4")]
		internal delegate uint _GetLastFrameRenderer();

		[Token(Token = "0x2000582")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BAF8", Offset = "0x74BAF8")]
		internal delegate bool _CanRenderScene();

		[Token(Token = "0x2000583")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BB0C", Offset = "0x74BB0C")]
		internal delegate void _ShowMirrorWindow();

		[Token(Token = "0x2000584")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BB20", Offset = "0x74BB20")]
		internal delegate void _HideMirrorWindow();

		[Token(Token = "0x2000585")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BB34", Offset = "0x74BB34")]
		internal delegate bool _IsMirrorWindowVisible();

		[Token(Token = "0x2000586")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BB48", Offset = "0x74BB48")]
		internal delegate void _CompositorDumpImages();

		[Token(Token = "0x2000587")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BB5C", Offset = "0x74BB5C")]
		internal delegate bool _ShouldAppRenderWithLowResources();

		[Token(Token = "0x2000588")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BB70", Offset = "0x74BB70")]
		internal delegate void _ForceInterleavedReprojectionOn(bool bOverride);

		[Token(Token = "0x2000589")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BB84", Offset = "0x74BB84")]
		internal delegate void _ForceReconnectProcess();

		[Token(Token = "0x200058A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BB98", Offset = "0x74BB98")]
		internal delegate void _SuspendRendering(bool bSuspend);

		[Token(Token = "0x200058B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BBAC", Offset = "0x74BBAC")]
		internal delegate EVRCompositorError _GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView);

		[Token(Token = "0x200058C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BBC0", Offset = "0x74BBC0")]
		internal delegate void _ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView);

		[Token(Token = "0x200058D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BBD4", Offset = "0x74BBD4")]
		internal delegate EVRCompositorError _GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle);

		[Token(Token = "0x200058E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BBE8", Offset = "0x74BBE8")]
		internal delegate bool _ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle);

		[Token(Token = "0x200058F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BBFC", Offset = "0x74BBFC")]
		internal delegate void _LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000590")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BC10", Offset = "0x74BC10")]
		internal delegate void _UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000591")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BC24", Offset = "0x74BC24")]
		internal delegate uint _GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x2000592")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BC38", Offset = "0x74BC38")]
		internal delegate uint _GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _SetTrackingSpace SetTrackingSpace;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetTrackingSpace GetTrackingSpace;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _WaitGetPoses WaitGetPoses;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetLastPoses GetLastPoses;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetLastPoseForTrackedDeviceIndex GetLastPoseForTrackedDeviceIndex;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _Submit Submit;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ClearLastSubmittedFrame ClearLastSubmittedFrame;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _PostPresentHandoff PostPresentHandoff;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFrameTiming GetFrameTiming;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetFrameTimings GetFrameTimings;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetFrameTimeRemaining GetFrameTimeRemaining;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetCumulativeStats GetCumulativeStats;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _FadeToColor FadeToColor;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetCurrentFadeColor GetCurrentFadeColor;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _FadeGrid FadeGrid;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetCurrentGridAlpha GetCurrentGridAlpha;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetSkyboxOverride SetSkyboxOverride;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ClearSkyboxOverride ClearSkyboxOverride;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _CompositorBringToFront CompositorBringToFront;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _CompositorGoToBack CompositorGoToBack;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _CompositorQuit CompositorQuit;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsFullscreen IsFullscreen;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetCurrentSceneFocusProcess GetCurrentSceneFocusProcess;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetLastFrameRenderer GetLastFrameRenderer;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _CanRenderScene CanRenderScene;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _ShowMirrorWindow ShowMirrorWindow;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _HideMirrorWindow HideMirrorWindow;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _IsMirrorWindowVisible IsMirrorWindowVisible;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _CompositorDumpImages CompositorDumpImages;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _ShouldAppRenderWithLowResources ShouldAppRenderWithLowResources;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _ForceInterleavedReprojectionOn ForceInterleavedReprojectionOn;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _ForceReconnectProcess ForceReconnectProcess;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _SuspendRendering SuspendRendering;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetMirrorTextureD3D11 GetMirrorTextureD3D11;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _ReleaseMirrorTextureD3D11 ReleaseMirrorTextureD3D11;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _GetMirrorTextureGL GetMirrorTextureGL;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _ReleaseSharedGLTexture ReleaseSharedGLTexture;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _LockGLSharedTextureForAccess LockGLSharedTextureForAccess;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _UnlockGLSharedTextureForAccess UnlockGLSharedTextureForAccess;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetVulkanInstanceExtensionsRequired GetVulkanInstanceExtensionsRequired;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _GetVulkanDeviceExtensionsRequired GetVulkanDeviceExtensionsRequired;
	}
	[Token(Token = "0x20002EE")]
	public struct IVROverlay
	{
		[Token(Token = "0x2000593")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BC4C", Offset = "0x74BC4C")]
		internal delegate EVROverlayError _FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle);

		[Token(Token = "0x2000594")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BC60", Offset = "0x74BC60")]
		internal delegate EVROverlayError _CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle);

		[Token(Token = "0x2000595")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BC74", Offset = "0x74BC74")]
		internal delegate EVROverlayError _DestroyOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000596")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BC88", Offset = "0x74BC88")]
		internal delegate EVROverlayError _SetHighQualityOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000597")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BC9C", Offset = "0x74BC9C")]
		internal delegate ulong _GetHighQualityOverlay();

		[Token(Token = "0x2000598")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BCB0", Offset = "0x74BCB0")]
		internal delegate uint _GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000599")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BCC4", Offset = "0x74BCC4")]
		internal delegate uint _GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x200059A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BCD8", Offset = "0x74BCD8")]
		internal delegate EVROverlayError _SetOverlayName(ulong ulOverlayHandle, string pchName);

		[Token(Token = "0x200059B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BCEC", Offset = "0x74BCEC")]
		internal delegate EVROverlayError _GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight);

		[Token(Token = "0x200059C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BD00", Offset = "0x74BD00")]
		internal delegate IntPtr _GetOverlayErrorNameFromEnum(EVROverlayError error);

		[Token(Token = "0x200059D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BD14", Offset = "0x74BD14")]
		internal delegate EVROverlayError _SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID);

		[Token(Token = "0x200059E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BD28", Offset = "0x74BD28")]
		internal delegate uint _GetOverlayRenderingPid(ulong ulOverlayHandle);

		[Token(Token = "0x200059F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BD3C", Offset = "0x74BD3C")]
		internal delegate EVROverlayError _SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled);

		[Token(Token = "0x20005A0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BD50", Offset = "0x74BD50")]
		internal delegate EVROverlayError _GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled);

		[Token(Token = "0x20005A1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BD64", Offset = "0x74BD64")]
		internal delegate EVROverlayError _SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue);

		[Token(Token = "0x20005A2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BD78", Offset = "0x74BD78")]
		internal delegate EVROverlayError _GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue);

		[Token(Token = "0x20005A3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BD8C", Offset = "0x74BD8C")]
		internal delegate EVROverlayError _SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha);

		[Token(Token = "0x20005A4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BDA0", Offset = "0x74BDA0")]
		internal delegate EVROverlayError _GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha);

		[Token(Token = "0x20005A5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BDB4", Offset = "0x74BDB4")]
		internal delegate EVROverlayError _SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect);

		[Token(Token = "0x20005A6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BDC8", Offset = "0x74BDC8")]
		internal delegate EVROverlayError _GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect);

		[Token(Token = "0x20005A7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BDDC", Offset = "0x74BDDC")]
		internal delegate EVROverlayError _SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder);

		[Token(Token = "0x20005A8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BDF0", Offset = "0x74BDF0")]
		internal delegate EVROverlayError _GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder);

		[Token(Token = "0x20005A9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BE04", Offset = "0x74BE04")]
		internal delegate EVROverlayError _SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters);

		[Token(Token = "0x20005AA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BE18", Offset = "0x74BE18")]
		internal delegate EVROverlayError _GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters);

		[Token(Token = "0x20005AB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BE2C", Offset = "0x74BE2C")]
		internal delegate EVROverlayError _SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);

		[Token(Token = "0x20005AC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BE40", Offset = "0x74BE40")]
		internal delegate EVROverlayError _GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters);

		[Token(Token = "0x20005AD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BE54", Offset = "0x74BE54")]
		internal delegate EVROverlayError _SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace);

		[Token(Token = "0x20005AE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BE68", Offset = "0x74BE68")]
		internal delegate EVROverlayError _GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace);

		[Token(Token = "0x20005AF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BE7C", Offset = "0x74BE7C")]
		internal delegate EVROverlayError _SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x20005B0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BE90", Offset = "0x74BE90")]
		internal delegate EVROverlayError _GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x20005B1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BEA4", Offset = "0x74BEA4")]
		internal delegate uint _GetOverlayRenderModel(ulong ulOverlayHandle, string pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError);

		[Token(Token = "0x20005B2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BEB8", Offset = "0x74BEB8")]
		internal delegate EVROverlayError _SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor);

		[Token(Token = "0x20005B3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BECC", Offset = "0x74BECC")]
		internal delegate EVROverlayError _GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType);

		[Token(Token = "0x20005B4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BEE0", Offset = "0x74BEE0")]
		internal delegate EVROverlayError _SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x20005B5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BEF4", Offset = "0x74BEF4")]
		internal delegate EVROverlayError _GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x20005B6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BF08", Offset = "0x74BF08")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x20005B7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BF1C", Offset = "0x74BF1C")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x20005B8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BF30", Offset = "0x74BF30")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName);

		[Token(Token = "0x20005B9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BF44", Offset = "0x74BF44")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, string pchComponentName, uint unComponentNameSize);

		[Token(Token = "0x20005BA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BF58", Offset = "0x74BF58")]
		internal delegate EVROverlayError _GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x20005BB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BF6C", Offset = "0x74BF6C")]
		internal delegate EVROverlayError _SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x20005BC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BF80", Offset = "0x74BF80")]
		internal delegate EVROverlayError _ShowOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x20005BD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BF94", Offset = "0x74BF94")]
		internal delegate EVROverlayError _HideOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x20005BE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BFA8", Offset = "0x74BFA8")]
		internal delegate bool _IsOverlayVisible(ulong ulOverlayHandle);

		[Token(Token = "0x20005BF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BFBC", Offset = "0x74BFBC")]
		internal delegate EVROverlayError _GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform);

		[Token(Token = "0x20005C0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BFD0", Offset = "0x74BFD0")]
		internal delegate bool _PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x20005C1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BFE4", Offset = "0x74BFE4")]
		internal delegate EVROverlayError _GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod);

		[Token(Token = "0x20005C2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74BFF8", Offset = "0x74BFF8")]
		internal delegate EVROverlayError _SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod);

		[Token(Token = "0x20005C3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C00C", Offset = "0x74C00C")]
		internal delegate EVROverlayError _GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x20005C4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C020", Offset = "0x74C020")]
		internal delegate EVROverlayError _SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x20005C5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C034", Offset = "0x74C034")]
		internal delegate bool _ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults);

		[Token(Token = "0x20005C6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C048", Offset = "0x74C048")]
		internal delegate bool _HandleControllerOverlayInteractionAsMouse(ulong ulOverlayHandle, uint unControllerDeviceIndex);

		[Token(Token = "0x20005C7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C05C", Offset = "0x74C05C")]
		internal delegate bool _IsHoverTargetOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x20005C8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C070", Offset = "0x74C070")]
		internal delegate ulong _GetGamepadFocusOverlay();

		[Token(Token = "0x20005C9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C084", Offset = "0x74C084")]
		internal delegate EVROverlayError _SetGamepadFocusOverlay(ulong ulNewFocusOverlay);

		[Token(Token = "0x20005CA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C098", Offset = "0x74C098")]
		internal delegate EVROverlayError _SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo);

		[Token(Token = "0x20005CB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C0AC", Offset = "0x74C0AC")]
		internal delegate EVROverlayError _MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom);

		[Token(Token = "0x20005CC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C0C0", Offset = "0x74C0C0")]
		internal delegate EVROverlayError _SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture);

		[Token(Token = "0x20005CD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C0D4", Offset = "0x74C0D4")]
		internal delegate EVROverlayError _ClearOverlayTexture(ulong ulOverlayHandle);

		[Token(Token = "0x20005CE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C0E8", Offset = "0x74C0E8")]
		internal delegate EVROverlayError _SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth);

		[Token(Token = "0x20005CF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C0FC", Offset = "0x74C0FC")]
		internal delegate EVROverlayError _SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath);

		[Token(Token = "0x20005D0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C110", Offset = "0x74C110")]
		internal delegate EVROverlayError _GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds);

		[Token(Token = "0x20005D1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C124", Offset = "0x74C124")]
		internal delegate EVROverlayError _ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle);

		[Token(Token = "0x20005D2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C138", Offset = "0x74C138")]
		internal delegate EVROverlayError _GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight);

		[Token(Token = "0x20005D3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C14C", Offset = "0x74C14C")]
		internal delegate EVROverlayError _CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle);

		[Token(Token = "0x20005D4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C160", Offset = "0x74C160")]
		internal delegate bool _IsDashboardVisible();

		[Token(Token = "0x20005D5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C174", Offset = "0x74C174")]
		internal delegate bool _IsActiveDashboardOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x20005D6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C188", Offset = "0x74C188")]
		internal delegate EVROverlayError _SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId);

		[Token(Token = "0x20005D7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C19C", Offset = "0x74C19C")]
		internal delegate EVROverlayError _GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId);

		[Token(Token = "0x20005D8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C1B0", Offset = "0x74C1B0")]
		internal delegate void _ShowDashboard(string pchOverlayToShow);

		[Token(Token = "0x20005D9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C1C4", Offset = "0x74C1C4")]
		internal delegate uint _GetPrimaryDashboardDevice();

		[Token(Token = "0x20005DA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C1D8", Offset = "0x74C1D8")]
		internal delegate EVROverlayError _ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x20005DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C1EC", Offset = "0x74C1EC")]
		internal delegate EVROverlayError _ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x20005DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C200", Offset = "0x74C200")]
		internal delegate uint _GetKeyboardText(StringBuilder pchText, uint cchText);

		[Token(Token = "0x20005DD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C214", Offset = "0x74C214")]
		internal delegate void _HideKeyboard();

		[Token(Token = "0x20005DE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C228", Offset = "0x74C228")]
		internal delegate void _SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform);

		[Token(Token = "0x20005DF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C23C", Offset = "0x74C23C")]
		internal delegate void _SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect);

		[Token(Token = "0x20005E0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C250", Offset = "0x74C250")]
		internal delegate EVROverlayError _SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize);

		[Token(Token = "0x20005E1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C264", Offset = "0x74C264")]
		internal delegate EVROverlayError _GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags);

		[Token(Token = "0x20005E2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C278", Offset = "0x74C278")]
		internal delegate VRMessageOverlayResponse _ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text);

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _FindOverlay FindOverlay;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _CreateOverlay CreateOverlay;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _DestroyOverlay DestroyOverlay;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetHighQualityOverlay SetHighQualityOverlay;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetHighQualityOverlay GetHighQualityOverlay;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetOverlayKey GetOverlayKey;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetOverlayName GetOverlayName;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _SetOverlayName SetOverlayName;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOverlayImageData GetOverlayImageData;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetOverlayErrorNameFromEnum GetOverlayErrorNameFromEnum;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetOverlayRenderingPid SetOverlayRenderingPid;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetOverlayRenderingPid GetOverlayRenderingPid;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _SetOverlayFlag SetOverlayFlag;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetOverlayFlag GetOverlayFlag;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetOverlayColor SetOverlayColor;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetOverlayColor GetOverlayColor;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetOverlayAlpha SetOverlayAlpha;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetOverlayAlpha GetOverlayAlpha;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _SetOverlayTexelAspect SetOverlayTexelAspect;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetOverlayTexelAspect GetOverlayTexelAspect;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _SetOverlaySortOrder SetOverlaySortOrder;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetOverlaySortOrder GetOverlaySortOrder;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _SetOverlayWidthInMeters SetOverlayWidthInMeters;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetOverlayWidthInMeters GetOverlayWidthInMeters;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _SetOverlayAutoCurveDistanceRangeInMeters SetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetOverlayAutoCurveDistanceRangeInMeters GetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _SetOverlayTextureColorSpace SetOverlayTextureColorSpace;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetOverlayTextureColorSpace GetOverlayTextureColorSpace;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _SetOverlayTextureBounds SetOverlayTextureBounds;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _GetOverlayTextureBounds GetOverlayTextureBounds;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetOverlayRenderModel GetOverlayRenderModel;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _SetOverlayRenderModel SetOverlayRenderModel;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetOverlayTransformType GetOverlayTransformType;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _SetOverlayTransformAbsolute SetOverlayTransformAbsolute;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetOverlayTransformAbsolute GetOverlayTransformAbsolute;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _SetOverlayTransformTrackedDeviceRelative SetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _GetOverlayTransformTrackedDeviceRelative GetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _SetOverlayTransformTrackedDeviceComponent SetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _GetOverlayTransformTrackedDeviceComponent GetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetOverlayTransformOverlayRelative GetOverlayTransformOverlayRelative;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _SetOverlayTransformOverlayRelative SetOverlayTransformOverlayRelative;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _ShowOverlay ShowOverlay;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _HideOverlay HideOverlay;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _IsOverlayVisible IsOverlayVisible;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _GetTransformForOverlayCoordinates GetTransformForOverlayCoordinates;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal _PollNextOverlayEvent PollNextOverlayEvent;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal _GetOverlayInputMethod GetOverlayInputMethod;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		internal _SetOverlayInputMethod SetOverlayInputMethod;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		internal _GetOverlayMouseScale GetOverlayMouseScale;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		internal _SetOverlayMouseScale SetOverlayMouseScale;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		internal _ComputeOverlayIntersection ComputeOverlayIntersection;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		internal _HandleControllerOverlayInteractionAsMouse HandleControllerOverlayInteractionAsMouse;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		internal _IsHoverTargetOverlay IsHoverTargetOverlay;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		internal _GetGamepadFocusOverlay GetGamepadFocusOverlay;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		internal _SetGamepadFocusOverlay SetGamepadFocusOverlay;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		internal _SetOverlayNeighbor SetOverlayNeighbor;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		internal _MoveGamepadFocusToNeighbor MoveGamepadFocusToNeighbor;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		internal _SetOverlayTexture SetOverlayTexture;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		internal _ClearOverlayTexture ClearOverlayTexture;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		internal _SetOverlayRaw SetOverlayRaw;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		internal _SetOverlayFromFile SetOverlayFromFile;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		internal _GetOverlayTexture GetOverlayTexture;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		internal _ReleaseNativeOverlayHandle ReleaseNativeOverlayHandle;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		internal _GetOverlayTextureSize GetOverlayTextureSize;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		internal _CreateDashboardOverlay CreateDashboardOverlay;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		internal _IsDashboardVisible IsDashboardVisible;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		internal _IsActiveDashboardOverlay IsActiveDashboardOverlay;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		internal _SetDashboardOverlaySceneProcess SetDashboardOverlaySceneProcess;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		internal _GetDashboardOverlaySceneProcess GetDashboardOverlaySceneProcess;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		internal _ShowDashboard ShowDashboard;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		internal _GetPrimaryDashboardDevice GetPrimaryDashboardDevice;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		internal _ShowKeyboard ShowKeyboard;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		internal _ShowKeyboardForOverlay ShowKeyboardForOverlay;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		internal _GetKeyboardText GetKeyboardText;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		internal _HideKeyboard HideKeyboard;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		internal _SetKeyboardTransformAbsolute SetKeyboardTransformAbsolute;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		internal _SetKeyboardPositionForOverlay SetKeyboardPositionForOverlay;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		internal _SetOverlayIntersectionMask SetOverlayIntersectionMask;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		internal _GetOverlayFlags GetOverlayFlags;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		internal _ShowMessageOverlay ShowMessageOverlay;
	}
	[Token(Token = "0x20002EF")]
	public struct IVRRenderModels
	{
		[Token(Token = "0x20005E3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C28C", Offset = "0x74C28C")]
		internal delegate EVRRenderModelError _LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel);

		[Token(Token = "0x20005E4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C2A0", Offset = "0x74C2A0")]
		internal delegate void _FreeRenderModel(IntPtr pRenderModel);

		[Token(Token = "0x20005E5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C2B4", Offset = "0x74C2B4")]
		internal delegate EVRRenderModelError _LoadTexture_Async(int textureId, ref IntPtr ppTexture);

		[Token(Token = "0x20005E6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C2C8", Offset = "0x74C2C8")]
		internal delegate void _FreeTexture(IntPtr pTexture);

		[Token(Token = "0x20005E7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C2DC", Offset = "0x74C2DC")]
		internal delegate EVRRenderModelError _LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D);

		[Token(Token = "0x20005E8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C2F0", Offset = "0x74C2F0")]
		internal delegate EVRRenderModelError _LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture);

		[Token(Token = "0x20005E9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C304", Offset = "0x74C304")]
		internal delegate void _FreeTextureD3D11(IntPtr pD3D11Texture2D);

		[Token(Token = "0x20005EA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C318", Offset = "0x74C318")]
		internal delegate uint _GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen);

		[Token(Token = "0x20005EB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C32C", Offset = "0x74C32C")]
		internal delegate uint _GetRenderModelCount();

		[Token(Token = "0x20005EC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C340", Offset = "0x74C340")]
		internal delegate uint _GetComponentCount(string pchRenderModelName);

		[Token(Token = "0x20005ED")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C354", Offset = "0x74C354")]
		internal delegate uint _GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen);

		[Token(Token = "0x20005EE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C368", Offset = "0x74C368")]
		internal delegate ulong _GetComponentButtonMask(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x20005EF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C37C", Offset = "0x74C37C")]
		internal delegate uint _GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen);

		[Token(Token = "0x20005F0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C390", Offset = "0x74C390")]
		internal delegate bool _GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[Token(Token = "0x20005F1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C3A4", Offset = "0x74C3A4")]
		internal delegate bool _RenderModelHasComponent(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x20005F2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C3B8", Offset = "0x74C3B8")]
		internal delegate uint _GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError);

		[Token(Token = "0x20005F3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C3CC", Offset = "0x74C3CC")]
		internal delegate uint _GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError);

		[Token(Token = "0x20005F4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C3E0", Offset = "0x74C3E0")]
		internal delegate IntPtr _GetRenderModelErrorNameFromEnum(EVRRenderModelError error);

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadRenderModel_Async LoadRenderModel_Async;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _FreeRenderModel FreeRenderModel;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _LoadTexture_Async LoadTexture_Async;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _FreeTexture FreeTexture;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _LoadTextureD3D11_Async LoadTextureD3D11_Async;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _LoadIntoTextureD3D11_Async LoadIntoTextureD3D11_Async;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _FreeTextureD3D11 FreeTextureD3D11;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetRenderModelName GetRenderModelName;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetRenderModelCount GetRenderModelCount;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetComponentCount GetComponentCount;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetComponentName GetComponentName;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetComponentButtonMask GetComponentButtonMask;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetComponentRenderModelName GetComponentRenderModelName;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetComponentState GetComponentState;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _RenderModelHasComponent RenderModelHasComponent;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetRenderModelThumbnailURL GetRenderModelThumbnailURL;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetRenderModelOriginalPath GetRenderModelOriginalPath;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetRenderModelErrorNameFromEnum GetRenderModelErrorNameFromEnum;
	}
	[Token(Token = "0x20002F0")]
	public struct IVRNotifications
	{
		[Token(Token = "0x20005F5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C3F4", Offset = "0x74C3F4")]
		internal delegate EVRNotificationError _CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId);

		[Token(Token = "0x20005F6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C408", Offset = "0x74C408")]
		internal delegate EVRNotificationError _RemoveNotification(uint notificationId);

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CreateNotification CreateNotification;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveNotification RemoveNotification;
	}
	[Token(Token = "0x20002F1")]
	public struct IVRSettings
	{
		[Token(Token = "0x20005F7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C41C", Offset = "0x74C41C")]
		internal delegate IntPtr _GetSettingsErrorNameFromEnum(EVRSettingsError eError);

		[Token(Token = "0x20005F8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C430", Offset = "0x74C430")]
		internal delegate bool _Sync(bool bForce, ref EVRSettingsError peError);

		[Token(Token = "0x20005F9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C444", Offset = "0x74C444")]
		internal delegate void _SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError);

		[Token(Token = "0x20005FA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C458", Offset = "0x74C458")]
		internal delegate void _SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError);

		[Token(Token = "0x20005FB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C46C", Offset = "0x74C46C")]
		internal delegate void _SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError);

		[Token(Token = "0x20005FC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C480", Offset = "0x74C480")]
		internal delegate void _SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError);

		[Token(Token = "0x20005FD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C494", Offset = "0x74C494")]
		internal delegate bool _GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x20005FE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C4A8", Offset = "0x74C4A8")]
		internal delegate int _GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x20005FF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C4BC", Offset = "0x74C4BC")]
		internal delegate float _GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x2000600")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C4D0", Offset = "0x74C4D0")]
		internal delegate void _GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError);

		[Token(Token = "0x2000601")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C4E4", Offset = "0x74C4E4")]
		internal delegate void _RemoveSection(string pchSection, ref EVRSettingsError peError);

		[Token(Token = "0x2000602")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C4F8", Offset = "0x74C4F8")]
		internal delegate void _RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetSettingsErrorNameFromEnum GetSettingsErrorNameFromEnum;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _Sync Sync;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _SetBool SetBool;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetInt32 SetInt32;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetFloat SetFloat;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _SetString SetString;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetBool GetBool;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetInt32 GetInt32;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFloat GetFloat;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetString GetString;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _RemoveSection RemoveSection;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _RemoveKeyInSection RemoveKeyInSection;
	}
	[Token(Token = "0x20002F2")]
	public struct IVRScreenshots
	{
		[Token(Token = "0x2000603")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C50C", Offset = "0x74C50C")]
		internal delegate EVRScreenshotError _RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x2000604")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C520", Offset = "0x74C520")]
		internal delegate EVRScreenshotError _HookScreenshot([In][Out] EVRScreenshotType[] pSupportedTypes, int numTypes);

		[Token(Token = "0x2000605")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C534", Offset = "0x74C534")]
		internal delegate EVRScreenshotType _GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError);

		[Token(Token = "0x2000606")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C548", Offset = "0x74C548")]
		internal delegate uint _GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError);

		[Token(Token = "0x2000607")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C55C", Offset = "0x74C55C")]
		internal delegate EVRScreenshotError _UpdateScreenshotProgress(uint screenshotHandle, float flProgress);

		[Token(Token = "0x2000608")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C570", Offset = "0x74C570")]
		internal delegate EVRScreenshotError _TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x2000609")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C584", Offset = "0x74C584")]
		internal delegate EVRScreenshotError _SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename);

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _RequestScreenshot RequestScreenshot;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HookScreenshot HookScreenshot;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetScreenshotPropertyType GetScreenshotPropertyType;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetScreenshotPropertyFilename GetScreenshotPropertyFilename;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _UpdateScreenshotProgress UpdateScreenshotProgress;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _TakeStereoScreenshot TakeStereoScreenshot;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _SubmitScreenshot SubmitScreenshot;
	}
	[Token(Token = "0x20002F3")]
	public struct IVRResources
	{
		[Token(Token = "0x200060A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C598", Offset = "0x74C598")]
		internal delegate uint _LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen);

		[Token(Token = "0x200060B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C5AC", Offset = "0x74C5AC")]
		internal delegate uint _GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, string pchPathBuffer, uint unBufferLen);

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadSharedResource LoadSharedResource;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetResourceFullPath GetResourceFullPath;
	}
	[Token(Token = "0x20002F4")]
	public struct IVRDriverManager
	{
		[Token(Token = "0x200060C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C5C0", Offset = "0x74C5C0")]
		internal delegate uint _GetDriverCount();

		[Token(Token = "0x200060D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C5D4", Offset = "0x74C5D4")]
		internal delegate uint _GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetDriverCount GetDriverCount;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetDriverName GetDriverName;
	}
	[Token(Token = "0x20002F5")]
	public class CVRSystem
	{
		[Token(Token = "0x200060E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C5E8", Offset = "0x74C5E8")]
		internal delegate bool _PollNextEventPacked(ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x200060F")]
		private struct PollNextEventUnion
		{
			[Token(Token = "0x4002156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._PollNextEvent pPollNextEvent;

			[Token(Token = "0x4002157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextEventPacked pPollNextEventPacked;
		}

		[Token(Token = "0x2000610")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C5FC", Offset = "0x74C5FC")]
		internal delegate bool _GetControllerStatePacked(uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize);

		[StructLayout(2)]
		[Token(Token = "0x2000611")]
		private struct GetControllerStateUnion
		{
			[Token(Token = "0x4002158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerState pGetControllerState;

			[Token(Token = "0x4002159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStatePacked pGetControllerStatePacked;
		}

		[Token(Token = "0x2000612")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C610", Offset = "0x74C610")]
		internal delegate bool _GetControllerStateWithPosePacked(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[StructLayout(2)]
		[Token(Token = "0x2000613")]
		private struct GetControllerStateWithPoseUnion
		{
			[Token(Token = "0x400215A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerStateWithPose pGetControllerStateWithPose;

			[Token(Token = "0x400215B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStateWithPosePacked pGetControllerStateWithPosePacked;
		}

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSystem FnTable;

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x7B01F0", Offset = "0x7B01F0", VA = "0x7B01F0")]
		internal CVRSystem(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x7B02F8", Offset = "0x7B02F8", VA = "0x7B02F8")]
		public void GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x7B031C", Offset = "0x7B031C", VA = "0x7B031C")]
		public HmdMatrix44_t GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ)
		{
			return default(HmdMatrix44_t);
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0x7B0338", Offset = "0x7B0338", VA = "0x7B0338")]
		public void GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom)
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x7B0364", Offset = "0x7B0364", VA = "0x7B0364")]
		public bool ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0x7B0380", Offset = "0x7B0380", VA = "0x7B0380")]
		public HmdMatrix34_t GetEyeToHeadTransform(EVREye eEye)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0x7B039C", Offset = "0x7B039C", VA = "0x7B039C")]
		public bool GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0x7B03C0", Offset = "0x7B03C0", VA = "0x7B03C0")]
		public int GetD3D9AdapterIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x7B03DC", Offset = "0x7B03DC", VA = "0x7B03DC")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex)
		{
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x7B03FC", Offset = "0x7B03FC", VA = "0x7B03FC")]
		public void GetOutputDevice(ref ulong pnDevice, ETextureType textureType)
		{
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0x7B041C", Offset = "0x7B041C", VA = "0x7B041C")]
		public bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0x7B0438", Offset = "0x7B0438", VA = "0x7B0438")]
		public bool SetDisplayVisibility(bool bIsVisibleOnDesktop)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x7B0458", Offset = "0x7B0458", VA = "0x7B0458")]
		public void GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t[] pTrackedDevicePoseArray)
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x7B0484", Offset = "0x7B0484", VA = "0x7B0484")]
		public void ResetSeatedZeroPose()
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x7B04A0", Offset = "0x7B04A0", VA = "0x7B04A0")]
		public HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x7B04BC", Offset = "0x7B04BC", VA = "0x7B04BC")]
		public HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0x7B04D8", Offset = "0x7B04D8", VA = "0x7B04D8")]
		public uint GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, uint[] punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0x7B050C", Offset = "0x7B050C", VA = "0x7B050C")]
		public EDeviceActivityLevel GetTrackedDeviceActivityLevel(uint unDeviceId)
		{
			return default(EDeviceActivityLevel);
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0x7B0528", Offset = "0x7B0528", VA = "0x7B0528")]
		public void ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform)
		{
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0x7B0544", Offset = "0x7B0544", VA = "0x7B0544")]
		public uint GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0x7B0560", Offset = "0x7B0560", VA = "0x7B0560")]
		public ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex)
		{
			return default(ETrackedControllerRole);
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0x7B057C", Offset = "0x7B057C", VA = "0x7B057C")]
		public ETrackedDeviceClass GetTrackedDeviceClass(uint unDeviceIndex)
		{
			return default(ETrackedDeviceClass);
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x7B0598", Offset = "0x7B0598", VA = "0x7B0598")]
		public bool IsTrackedDeviceConnected(uint unDeviceIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0x7B05B4", Offset = "0x7B05B4", VA = "0x7B05B4")]
		public bool GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0x7B05D0", Offset = "0x7B05D0", VA = "0x7B05D0")]
		public float GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(float);
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0x7B05EC", Offset = "0x7B05EC", VA = "0x7B05EC")]
		public int GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(int);
		}

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0x7B0608", Offset = "0x7B0608", VA = "0x7B0608")]
		public ulong GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0x7B0624", Offset = "0x7B0624", VA = "0x7B0624")]
		public HmdMatrix34_t GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0x7B0640", Offset = "0x7B0640", VA = "0x7B0640")]
		public uint GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0x7B065C", Offset = "0x7B065C", VA = "0x7B065C")]
		public string GetPropErrorNameFromEnum(ETrackedPropertyError error)
		{
			return null;
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0x7B06F0", Offset = "0x7B06F0", VA = "0x7B06F0")]
		public bool PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0x7B0864", Offset = "0x7B0864", VA = "0x7B0864")]
		public bool PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x7B0880", Offset = "0x7B0880", VA = "0x7B0880")]
		public string GetEventTypeNameFromEnum(EVREventType eType)
		{
			return null;
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0x7B0914", Offset = "0x7B0914", VA = "0x7B0914")]
		public HiddenAreaMesh_t GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type)
		{
			return default(HiddenAreaMesh_t);
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0x7B0930", Offset = "0x7B0930", VA = "0x7B0930")]
		public bool GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0x7B0ADC", Offset = "0x7B0ADC", VA = "0x7B0ADC")]
		public bool GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0x7B0CA8", Offset = "0x7B0CA8", VA = "0x7B0CA8")]
		public void TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, char usDurationMicroSec)
		{
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0x7B0CC4", Offset = "0x7B0CC4", VA = "0x7B0CC4")]
		public string GetButtonIdNameFromEnum(EVRButtonId eButtonId)
		{
			return null;
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0x7B0D58", Offset = "0x7B0D58", VA = "0x7B0D58")]
		public string GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType)
		{
			return null;
		}

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0x7B0DEC", Offset = "0x7B0DEC", VA = "0x7B0DEC")]
		public bool CaptureInputFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0x7B0E08", Offset = "0x7B0E08", VA = "0x7B0E08")]
		public void ReleaseInputFocus()
		{
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0x7B0E24", Offset = "0x7B0E24", VA = "0x7B0E24")]
		public bool IsInputFocusCapturedByAnotherProcess()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0x7B0E40", Offset = "0x7B0E40", VA = "0x7B0E40")]
		public uint DriverDebugRequest(uint unDeviceIndex, string pchRequest, string pchResponseBuffer, uint unResponseBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0x7B0E5C", Offset = "0x7B0E5C", VA = "0x7B0E5C")]
		public EVRFirmwareError PerformFirmwareUpdate(uint unDeviceIndex)
		{
			return default(EVRFirmwareError);
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x7B0E78", Offset = "0x7B0E78", VA = "0x7B0E78")]
		public void AcknowledgeQuit_Exiting()
		{
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x7B0E94", Offset = "0x7B0E94", VA = "0x7B0E94")]
		public void AcknowledgeQuit_UserPrompt()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class CVRExtendedDisplay
	{
		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRExtendedDisplay FnTable;

		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0x7ADF3C", Offset = "0x7ADF3C", VA = "0x7ADF3C")]
		internal CVRExtendedDisplay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0x7AE044", Offset = "0x7AE044", VA = "0x7AE044")]
		public void GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0x7AE070", Offset = "0x7AE070", VA = "0x7AE070")]
		public void GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0x7AE09C", Offset = "0x7AE09C", VA = "0x7AE09C")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex)
		{
		}
	}
	[Token(Token = "0x20002F7")]
	public class CVRTrackedCamera
	{
		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRTrackedCamera FnTable;

		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0xF5A028", Offset = "0xF5A028", VA = "0xF5A028")]
		internal CVRTrackedCamera(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0xF5A130", Offset = "0xF5A130", VA = "0xF5A130")]
		public string GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError)
		{
			return null;
		}

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0xF5A1C4", Offset = "0xF5A1C4", VA = "0xF5A1C4")]
		public EVRTrackedCameraError HasCamera(uint nDeviceIndex, ref bool pHasCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0xF5A1E4", Offset = "0xF5A1E4", VA = "0xF5A1E4")]
		public EVRTrackedCameraError GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0xF5A20C", Offset = "0xF5A20C", VA = "0xF5A20C")]
		public EVRTrackedCameraError GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0xF5A228", Offset = "0xF5A228", VA = "0xF5A228")]
		public EVRTrackedCameraError GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0xF5A244", Offset = "0xF5A244", VA = "0xF5A244")]
		public EVRTrackedCameraError AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0xF5A264", Offset = "0xF5A264", VA = "0xF5A264")]
		public EVRTrackedCameraError ReleaseVideoStreamingService(ulong hTrackedCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0xF5A280", Offset = "0xF5A280", VA = "0xF5A280")]
		public EVRTrackedCameraError GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0xF5A29C", Offset = "0xF5A29C", VA = "0xF5A29C")]
		public EVRTrackedCameraError GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0xF5A2C0", Offset = "0xF5A2C0", VA = "0xF5A2C0")]
		public EVRTrackedCameraError GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xF5A2DC", Offset = "0xF5A2DC", VA = "0xF5A2DC")]
		public EVRTrackedCameraError GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xF5A2FC", Offset = "0xF5A2FC", VA = "0xF5A2FC")]
		public EVRTrackedCameraError ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId)
		{
			return default(EVRTrackedCameraError);
		}
	}
	[Token(Token = "0x20002F8")]
	public class CVRApplications
	{
		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRApplications FnTable;

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0x7ACB1C", Offset = "0x7ACB1C", VA = "0x7ACB1C")]
		internal CVRApplications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0x7ACC24", Offset = "0x7ACC24", VA = "0x7ACC24")]
		public EVRApplicationError AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0x7ACC44", Offset = "0x7ACC44", VA = "0x7ACC44")]
		public EVRApplicationError RemoveApplicationManifest(string pchApplicationManifestFullPath)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x7ACC60", Offset = "0x7ACC60", VA = "0x7ACC60")]
		public bool IsApplicationInstalled(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x7ACC7C", Offset = "0x7ACC7C", VA = "0x7ACC7C")]
		public uint GetApplicationCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x7ACC98", Offset = "0x7ACC98", VA = "0x7ACC98")]
		public EVRApplicationError GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x7ACCB4", Offset = "0x7ACCB4", VA = "0x7ACCB4")]
		public EVRApplicationError GetApplicationKeyByProcessId(uint unProcessId, string pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x7ACCD0", Offset = "0x7ACCD0", VA = "0x7ACCD0")]
		public EVRApplicationError LaunchApplication(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x7ACCEC", Offset = "0x7ACCEC", VA = "0x7ACCEC")]
		public EVRApplicationError LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, AppOverrideKeys_t[] pKeys)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x7ACD18", Offset = "0x7ACD18", VA = "0x7ACD18")]
		public EVRApplicationError LaunchApplicationFromMimeType(string pchMimeType, string pchArgs)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x7ACD34", Offset = "0x7ACD34", VA = "0x7ACD34")]
		public EVRApplicationError LaunchDashboardOverlay(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x7ACD50", Offset = "0x7ACD50", VA = "0x7ACD50")]
		public bool CancelApplicationLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x7ACD6C", Offset = "0x7ACD6C", VA = "0x7ACD6C")]
		public EVRApplicationError IdentifyApplication(uint unProcessId, string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x7ACD88", Offset = "0x7ACD88", VA = "0x7ACD88")]
		public uint GetApplicationProcessId(string pchAppKey)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x7ACDA4", Offset = "0x7ACDA4", VA = "0x7ACDA4")]
		public string GetApplicationsErrorNameFromEnum(EVRApplicationError error)
		{
			return null;
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x7ACE38", Offset = "0x7ACE38", VA = "0x7ACE38")]
		public uint GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x7ACE54", Offset = "0x7ACE54", VA = "0x7ACE54")]
		public bool GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x7ACE70", Offset = "0x7ACE70", VA = "0x7ACE70")]
		public ulong GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x7ACE8C", Offset = "0x7ACE8C", VA = "0x7ACE8C")]
		public EVRApplicationError SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x7ACEAC", Offset = "0x7ACEAC", VA = "0x7ACEAC")]
		public bool GetApplicationAutoLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x7ACEC8", Offset = "0x7ACEC8", VA = "0x7ACEC8")]
		public EVRApplicationError SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x7ACEE4", Offset = "0x7ACEE4", VA = "0x7ACEE4")]
		public bool GetDefaultApplicationForMimeType(string pchMimeType, string pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x7ACF00", Offset = "0x7ACF00", VA = "0x7ACF00")]
		public bool GetApplicationSupportedMimeTypes(string pchAppKey, string pchMimeTypesBuffer, uint unMimeTypesBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x7ACF1C", Offset = "0x7ACF1C", VA = "0x7ACF1C")]
		public uint GetApplicationsThatSupportMimeType(string pchMimeType, string pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x7ACF38", Offset = "0x7ACF38", VA = "0x7ACF38")]
		public uint GetApplicationLaunchArguments(uint unHandle, string pchArgs, uint unArgs)
		{
			return default(uint);
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x7ACF54", Offset = "0x7ACF54", VA = "0x7ACF54")]
		public EVRApplicationError GetStartingApplication(string pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0x7ACF70", Offset = "0x7ACF70", VA = "0x7ACF70")]
		public EVRApplicationTransitionState GetTransitionState()
		{
			return default(EVRApplicationTransitionState);
		}

		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0x7ACF8C", Offset = "0x7ACF8C", VA = "0x7ACF8C")]
		public EVRApplicationError PerformApplicationPrelaunchCheck(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x7ACFA8", Offset = "0x7ACFA8", VA = "0x7ACFA8")]
		public string GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state)
		{
			return null;
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x7AD03C", Offset = "0x7AD03C", VA = "0x7AD03C")]
		public bool IsQuitUserPromptRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x7AD058", Offset = "0x7AD058", VA = "0x7AD058")]
		public EVRApplicationError LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x7AD074", Offset = "0x7AD074", VA = "0x7AD074")]
		public uint GetCurrentSceneProcessId()
		{
			return default(uint);
		}
	}
	[Token(Token = "0x20002F9")]
	public class CVRChaperone
	{
		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperone FnTable;

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x7AD090", Offset = "0x7AD090", VA = "0x7AD090")]
		internal CVRChaperone(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x7AD198", Offset = "0x7AD198", VA = "0x7AD198")]
		public ChaperoneCalibrationState GetCalibrationState()
		{
			return default(ChaperoneCalibrationState);
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x7AD1B4", Offset = "0x7AD1B4", VA = "0x7AD1B4")]
		public bool GetPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x7AD1D8", Offset = "0x7AD1D8", VA = "0x7AD1D8")]
		public bool GetPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x7AD1F4", Offset = "0x7AD1F4", VA = "0x7AD1F4")]
		public void ReloadInfo()
		{
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x7AD210", Offset = "0x7AD210", VA = "0x7AD210")]
		public void SetSceneColor(HmdColor_t color)
		{
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x7AD22C", Offset = "0x7AD22C", VA = "0x7AD22C")]
		public void GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor)
		{
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x7AD248", Offset = "0x7AD248", VA = "0x7AD248")]
		public bool AreBoundsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x7AD264", Offset = "0x7AD264", VA = "0x7AD264")]
		public void ForceBoundsVisible(bool bForce)
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class CVRChaperoneSetup
	{
		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperoneSetup FnTable;

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x7AD284", Offset = "0x7AD284", VA = "0x7AD284")]
		internal CVRChaperoneSetup(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x7AD38C", Offset = "0x7AD38C", VA = "0x7AD38C")]
		public bool CommitWorkingCopy(EChaperoneConfigFile configFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x7AD3A8", Offset = "0x7AD3A8", VA = "0x7AD3A8")]
		public void RevertWorkingCopy()
		{
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0x7AD3C4", Offset = "0x7AD3C4", VA = "0x7AD3C4")]
		public bool GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x7AD3E8", Offset = "0x7AD3E8", VA = "0x7AD3E8")]
		public bool GetWorkingPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x7AD404", Offset = "0x7AD404", VA = "0x7AD404")]
		public bool GetWorkingCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x7AD4A8", Offset = "0x7AD4A8", VA = "0x7AD4A8")]
		public bool GetLiveCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x7AD54C", Offset = "0x7AD54C", VA = "0x7AD54C")]
		public bool GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0x7AD568", Offset = "0x7AD568", VA = "0x7AD568")]
		public bool GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x7AD584", Offset = "0x7AD584", VA = "0x7AD584")]
		public void SetWorkingPlayAreaSize(float sizeX, float sizeZ)
		{
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0x7AD5A0", Offset = "0x7AD5A0", VA = "0x7AD5A0")]
		public void SetWorkingCollisionBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0x7AD5CC", Offset = "0x7AD5CC", VA = "0x7AD5CC")]
		public void SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x7AD5E8", Offset = "0x7AD5E8", VA = "0x7AD5E8")]
		public void SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0x7AD604", Offset = "0x7AD604", VA = "0x7AD604")]
		public void ReloadFromDisk(EChaperoneConfigFile configFile)
		{
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0x7AD620", Offset = "0x7AD620", VA = "0x7AD620")]
		public bool GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0x7AD63C", Offset = "0x7AD63C", VA = "0x7AD63C")]
		public void SetWorkingCollisionBoundsTagsInfo(byte[] pTagsBuffer)
		{
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x7AD668", Offset = "0x7AD668", VA = "0x7AD668")]
		public bool GetLiveCollisionBoundsTagsInfo(out byte[] pTagsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x7AD70C", Offset = "0x7AD70C", VA = "0x7AD70C")]
		public bool SetWorkingPhysicalBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0x7AD738", Offset = "0x7AD738", VA = "0x7AD738")]
		public bool GetLivePhysicalBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x7AD7DC", Offset = "0x7AD7DC", VA = "0x7AD7DC")]
		public bool ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x7AD7FC", Offset = "0x7AD7FC", VA = "0x7AD7FC")]
		public bool ImportFromBufferToWorking(string pBuffer, uint nImportFlags)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002FB")]
	public class CVRCompositor
	{
		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRCompositor FnTable;

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x7AD818", Offset = "0x7AD818", VA = "0x7AD818")]
		internal CVRCompositor(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x7AD920", Offset = "0x7AD920", VA = "0x7AD920")]
		public void SetTrackingSpace(ETrackingUniverseOrigin eOrigin)
		{
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0x7AD93C", Offset = "0x7AD93C", VA = "0x7AD93C")]
		public ETrackingUniverseOrigin GetTrackingSpace()
		{
			return default(ETrackingUniverseOrigin);
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0x7AD958", Offset = "0x7AD958", VA = "0x7AD958")]
		public EVRCompositorError WaitGetPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x7AD994", Offset = "0x7AD994", VA = "0x7AD994")]
		public EVRCompositorError GetLastPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x7AD9D0", Offset = "0x7AD9D0", VA = "0x7AD9D0")]
		public EVRCompositorError GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0x7AD9EC", Offset = "0x7AD9EC", VA = "0x7AD9EC")]
		public EVRCompositorError Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0x7ADA08", Offset = "0x7ADA08", VA = "0x7ADA08")]
		public void ClearLastSubmittedFrame()
		{
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x7ADA24", Offset = "0x7ADA24", VA = "0x7ADA24")]
		public void PostPresentHandoff()
		{
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x7ADA40", Offset = "0x7ADA40", VA = "0x7ADA40")]
		public bool GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x7ADA5C", Offset = "0x7ADA5C", VA = "0x7ADA5C")]
		public uint GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0x7ADA78", Offset = "0x7ADA78", VA = "0x7ADA78")]
		public float GetFrameTimeRemaining()
		{
			return default(float);
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0x7ADA94", Offset = "0x7ADA94", VA = "0x7ADA94")]
		public void GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes)
		{
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0x7ADAB0", Offset = "0x7ADAB0", VA = "0x7ADAB0")]
		public void FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground)
		{
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0x7ADAD0", Offset = "0x7ADAD0", VA = "0x7ADAD0")]
		public HmdColor_t GetCurrentFadeColor(bool bBackground)
		{
			return default(HmdColor_t);
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0x7ADAF0", Offset = "0x7ADAF0", VA = "0x7ADAF0")]
		public void FadeGrid(float fSeconds, bool bFadeIn)
		{
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0x7ADB10", Offset = "0x7ADB10", VA = "0x7ADB10")]
		public float GetCurrentGridAlpha()
		{
			return default(float);
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x7ADB2C", Offset = "0x7ADB2C", VA = "0x7ADB2C")]
		public EVRCompositorError SetSkyboxOverride(Texture_t[] pTextures)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x7ADB58", Offset = "0x7ADB58", VA = "0x7ADB58")]
		public void ClearSkyboxOverride()
		{
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x7ADB74", Offset = "0x7ADB74", VA = "0x7ADB74")]
		public void CompositorBringToFront()
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x7ADB90", Offset = "0x7ADB90", VA = "0x7ADB90")]
		public void CompositorGoToBack()
		{
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x7ADBAC", Offset = "0x7ADBAC", VA = "0x7ADBAC")]
		public void CompositorQuit()
		{
		}

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0x7ADBC8", Offset = "0x7ADBC8", VA = "0x7ADBC8")]
		public bool IsFullscreen()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0x7ADBE4", Offset = "0x7ADBE4", VA = "0x7ADBE4")]
		public uint GetCurrentSceneFocusProcess()
		{
			return default(uint);
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0x7ADC00", Offset = "0x7ADC00", VA = "0x7ADC00")]
		public uint GetLastFrameRenderer()
		{
			return default(uint);
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x7ADC1C", Offset = "0x7ADC1C", VA = "0x7ADC1C")]
		public bool CanRenderScene()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x7ADC38", Offset = "0x7ADC38", VA = "0x7ADC38")]
		public void ShowMirrorWindow()
		{
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x7ADC54", Offset = "0x7ADC54", VA = "0x7ADC54")]
		public void HideMirrorWindow()
		{
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0x7ADC70", Offset = "0x7ADC70", VA = "0x7ADC70")]
		public bool IsMirrorWindowVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x7ADC8C", Offset = "0x7ADC8C", VA = "0x7ADC8C")]
		public void CompositorDumpImages()
		{
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x7ADCA8", Offset = "0x7ADCA8", VA = "0x7ADCA8")]
		public bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0x7ADCC4", Offset = "0x7ADCC4", VA = "0x7ADCC4")]
		public void ForceInterleavedReprojectionOn(bool bOverride)
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x7ADCE4", Offset = "0x7ADCE4", VA = "0x7ADCE4")]
		public void ForceReconnectProcess()
		{
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x7ADD00", Offset = "0x7ADD00", VA = "0x7ADD00")]
		public void SuspendRendering(bool bSuspend)
		{
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x7ADD20", Offset = "0x7ADD20", VA = "0x7ADD20")]
		public EVRCompositorError GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x7ADD3C", Offset = "0x7ADD3C", VA = "0x7ADD3C")]
		public void ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView)
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x7ADD58", Offset = "0x7ADD58", VA = "0x7ADD58")]
		public EVRCompositorError GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x7ADD78", Offset = "0x7ADD78", VA = "0x7ADD78")]
		public bool ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x7ADD94", Offset = "0x7ADD94", VA = "0x7ADD94")]
		public void LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x7ADDB0", Offset = "0x7ADDB0", VA = "0x7ADDB0")]
		public void UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x7ADDCC", Offset = "0x7ADDCC", VA = "0x7ADDCC")]
		public uint GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x7ADDE8", Offset = "0x7ADDE8", VA = "0x7ADDE8")]
		public uint GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x20002FC")]
	public class CVROverlay
	{
		[Token(Token = "0x2000614")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C624", Offset = "0x74C624")]
		internal delegate bool _PollNextOverlayEventPacked(ulong ulOverlayHandle, ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x2000615")]
		private struct PollNextOverlayEventUnion
		{
			[Token(Token = "0x400215C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVROverlay._PollNextOverlayEvent pPollNextOverlayEvent;

			[Token(Token = "0x400215D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextOverlayEventPacked pPollNextOverlayEventPacked;
		}

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVROverlay FnTable;

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x7AE200", Offset = "0x7AE200", VA = "0x7AE200")]
		internal CVROverlay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x7AE308", Offset = "0x7AE308", VA = "0x7AE308")]
		public EVROverlayError FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x7AE328", Offset = "0x7AE328", VA = "0x7AE328")]
		public EVROverlayError CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x7AE348", Offset = "0x7AE348", VA = "0x7AE348")]
		public EVROverlayError DestroyOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x7AE364", Offset = "0x7AE364", VA = "0x7AE364")]
		public EVROverlayError SetHighQualityOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0x7AE380", Offset = "0x7AE380", VA = "0x7AE380")]
		public ulong GetHighQualityOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0x7AE39C", Offset = "0x7AE39C", VA = "0x7AE39C")]
		public uint GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0x7AE3B8", Offset = "0x7AE3B8", VA = "0x7AE3B8")]
		public uint GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0x7AE3D4", Offset = "0x7AE3D4", VA = "0x7AE3D4")]
		public EVROverlayError SetOverlayName(ulong ulOverlayHandle, string pchName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x7AE3F0", Offset = "0x7AE3F0", VA = "0x7AE3F0")]
		public EVROverlayError GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x7AE414", Offset = "0x7AE414", VA = "0x7AE414")]
		public string GetOverlayErrorNameFromEnum(EVROverlayError error)
		{
			return null;
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x7AE4A8", Offset = "0x7AE4A8", VA = "0x7AE4A8")]
		public EVROverlayError SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x7AE4C4", Offset = "0x7AE4C4", VA = "0x7AE4C4")]
		public uint GetOverlayRenderingPid(ulong ulOverlayHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x7AE4E0", Offset = "0x7AE4E0", VA = "0x7AE4E0")]
		public EVROverlayError SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x7AE500", Offset = "0x7AE500", VA = "0x7AE500")]
		public EVROverlayError GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x7AE520", Offset = "0x7AE520", VA = "0x7AE520")]
		public EVROverlayError SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0x7AE53C", Offset = "0x7AE53C", VA = "0x7AE53C")]
		public EVROverlayError GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x7AE564", Offset = "0x7AE564", VA = "0x7AE564")]
		public EVROverlayError SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x7AE580", Offset = "0x7AE580", VA = "0x7AE580")]
		public EVROverlayError GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x7AE5A0", Offset = "0x7AE5A0", VA = "0x7AE5A0")]
		public EVROverlayError SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x7AE5BC", Offset = "0x7AE5BC", VA = "0x7AE5BC")]
		public EVROverlayError GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0x7AE5DC", Offset = "0x7AE5DC", VA = "0x7AE5DC")]
		public EVROverlayError SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0x7AE5F8", Offset = "0x7AE5F8", VA = "0x7AE5F8")]
		public EVROverlayError GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x7AE618", Offset = "0x7AE618", VA = "0x7AE618")]
		public EVROverlayError SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0x7AE634", Offset = "0x7AE634", VA = "0x7AE634")]
		public EVROverlayError GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0x7AE654", Offset = "0x7AE654", VA = "0x7AE654")]
		public EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0x7AE670", Offset = "0x7AE670", VA = "0x7AE670")]
		public EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0x7AE694", Offset = "0x7AE694", VA = "0x7AE694")]
		public EVROverlayError SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x7AE6B0", Offset = "0x7AE6B0", VA = "0x7AE6B0")]
		public EVROverlayError GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x7AE6CC", Offset = "0x7AE6CC", VA = "0x7AE6CC")]
		public EVROverlayError SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x7AE6E8", Offset = "0x7AE6E8", VA = "0x7AE6E8")]
		public EVROverlayError GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0x7AE704", Offset = "0x7AE704", VA = "0x7AE704")]
		public uint GetOverlayRenderModel(ulong ulOverlayHandle, string pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0x7AE720", Offset = "0x7AE720", VA = "0x7AE720")]
		public EVROverlayError SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0x7AE73C", Offset = "0x7AE73C", VA = "0x7AE73C")]
		public EVROverlayError GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x7AE758", Offset = "0x7AE758", VA = "0x7AE758")]
		public EVROverlayError SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0x7AE774", Offset = "0x7AE774", VA = "0x7AE774")]
		public EVROverlayError GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0x7AE790", Offset = "0x7AE790", VA = "0x7AE790")]
		public EVROverlayError SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0x7AE7AC", Offset = "0x7AE7AC", VA = "0x7AE7AC")]
		public EVROverlayError GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0x7AE7CC", Offset = "0x7AE7CC", VA = "0x7AE7CC")]
		public EVROverlayError SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x7AE7E8", Offset = "0x7AE7E8", VA = "0x7AE7E8")]
		public EVROverlayError GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, string pchComponentName, uint unComponentNameSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0x7AE808", Offset = "0x7AE808", VA = "0x7AE808")]
		public EVROverlayError GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x7AE828", Offset = "0x7AE828", VA = "0x7AE828")]
		public EVROverlayError SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x7AE844", Offset = "0x7AE844", VA = "0x7AE844")]
		public EVROverlayError ShowOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x7AE860", Offset = "0x7AE860", VA = "0x7AE860")]
		public EVROverlayError HideOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0x7AE87C", Offset = "0x7AE87C", VA = "0x7AE87C")]
		public bool IsOverlayVisible(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x7AE898", Offset = "0x7AE898", VA = "0x7AE898")]
		public EVROverlayError GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0x7AE8B4", Offset = "0x7AE8B4", VA = "0x7AE8B4")]
		public bool PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0x7AECC0", Offset = "0x7AECC0", VA = "0x7AECC0")]
		public EVROverlayError GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0x7AECDC", Offset = "0x7AECDC", VA = "0x7AECDC")]
		public EVROverlayError SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0x7AECF8", Offset = "0x7AECF8", VA = "0x7AECF8")]
		public EVROverlayError GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0x7AED14", Offset = "0x7AED14", VA = "0x7AED14")]
		public EVROverlayError SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0x7AED30", Offset = "0x7AED30", VA = "0x7AED30")]
		public bool ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x7AED4C", Offset = "0x7AED4C", VA = "0x7AED4C")]
		public bool HandleControllerOverlayInteractionAsMouse(ulong ulOverlayHandle, uint unControllerDeviceIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x7AED68", Offset = "0x7AED68", VA = "0x7AED68")]
		public bool IsHoverTargetOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0x7AED84", Offset = "0x7AED84", VA = "0x7AED84")]
		public ulong GetGamepadFocusOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0x7AEDA0", Offset = "0x7AEDA0", VA = "0x7AEDA0")]
		public EVROverlayError SetGamepadFocusOverlay(ulong ulNewFocusOverlay)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x7AEDBC", Offset = "0x7AEDBC", VA = "0x7AEDBC")]
		public EVROverlayError SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0x7AEDD8", Offset = "0x7AEDD8", VA = "0x7AEDD8")]
		public EVROverlayError MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0x7AEDF4", Offset = "0x7AEDF4", VA = "0x7AEDF4")]
		public EVROverlayError SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0x7AEE10", Offset = "0x7AEE10", VA = "0x7AEE10")]
		public EVROverlayError ClearOverlayTexture(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x7AEE2C", Offset = "0x7AEE2C", VA = "0x7AEE2C")]
		public EVROverlayError SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x7AEE48", Offset = "0x7AEE48", VA = "0x7AEE48")]
		public EVROverlayError SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x7AEE64", Offset = "0x7AEE64", VA = "0x7AEE64")]
		public EVROverlayError GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0x7AEE98", Offset = "0x7AEE98", VA = "0x7AEE98")]
		public EVROverlayError ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0x7AEEB4", Offset = "0x7AEEB4", VA = "0x7AEEB4")]
		public EVROverlayError GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0x7AEED8", Offset = "0x7AEED8", VA = "0x7AEED8")]
		public EVROverlayError CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x7AEEFC", Offset = "0x7AEEFC", VA = "0x7AEEFC")]
		public bool IsDashboardVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x7AEF18", Offset = "0x7AEF18", VA = "0x7AEF18")]
		public bool IsActiveDashboardOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x7AEF34", Offset = "0x7AEF34", VA = "0x7AEF34")]
		public EVROverlayError SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x7AEF50", Offset = "0x7AEF50", VA = "0x7AEF50")]
		public EVROverlayError GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x7AEF70", Offset = "0x7AEF70", VA = "0x7AEF70")]
		public void ShowDashboard(string pchOverlayToShow)
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x7AEF8C", Offset = "0x7AEF8C", VA = "0x7AEF8C")]
		public uint GetPrimaryDashboardDevice()
		{
			return default(uint);
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0x7AEFA8", Offset = "0x7AEFA8", VA = "0x7AEFA8")]
		public EVROverlayError ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0x7AEFCC", Offset = "0x7AEFCC", VA = "0x7AEFCC")]
		public EVROverlayError ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0x7AEFF4", Offset = "0x7AEFF4", VA = "0x7AEFF4")]
		public uint GetKeyboardText(StringBuilder pchText, uint cchText)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0x7AF010", Offset = "0x7AF010", VA = "0x7AF010")]
		public void HideKeyboard()
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0x7AF02C", Offset = "0x7AF02C", VA = "0x7AF02C")]
		public void SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform)
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0x7AF048", Offset = "0x7AF048", VA = "0x7AF048")]
		public void SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect)
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x7AF064", Offset = "0x7AF064", VA = "0x7AF064")]
		public EVROverlayError SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0x7AF080", Offset = "0x7AF080", VA = "0x7AF080")]
		public EVROverlayError GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0x7AF0A0", Offset = "0x7AF0A0", VA = "0x7AF0A0")]
		public VRMessageOverlayResponse ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text)
		{
			return default(VRMessageOverlayResponse);
		}
	}
	[Token(Token = "0x20002FD")]
	public class CVRRenderModels
	{
		[Token(Token = "0x2000616")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74C638", Offset = "0x74C638")]
		internal delegate bool _GetComponentStatePacked(string pchRenderModelName, string pchComponentName, ref VRControllerState_t_Packed pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[StructLayout(2)]
		[Token(Token = "0x2000617")]
		private struct GetComponentStateUnion
		{
			[Token(Token = "0x400215E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRRenderModels._GetComponentState pGetComponentState;

			[Token(Token = "0x400215F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetComponentStatePacked pGetComponentStatePacked;
		}

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRRenderModels FnTable;

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0x7AF1D8", Offset = "0x7AF1D8", VA = "0x7AF1D8")]
		internal CVRRenderModels(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x7AF2E0", Offset = "0x7AF2E0", VA = "0x7AF2E0")]
		public EVRRenderModelError LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x7AF2FC", Offset = "0x7AF2FC", VA = "0x7AF2FC")]
		public void FreeRenderModel(IntPtr pRenderModel)
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x7AF318", Offset = "0x7AF318", VA = "0x7AF318")]
		public EVRRenderModelError LoadTexture_Async(int textureId, ref IntPtr ppTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x7AF334", Offset = "0x7AF334", VA = "0x7AF334")]
		public void FreeTexture(IntPtr pTexture)
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x7AF350", Offset = "0x7AF350", VA = "0x7AF350")]
		public EVRRenderModelError LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x7AF36C", Offset = "0x7AF36C", VA = "0x7AF36C")]
		public EVRRenderModelError LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x7AF388", Offset = "0x7AF388", VA = "0x7AF388")]
		public void FreeTextureD3D11(IntPtr pD3D11Texture2D)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x7AF3A4", Offset = "0x7AF3A4", VA = "0x7AF3A4")]
		public uint GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x7AF3C0", Offset = "0x7AF3C0", VA = "0x7AF3C0")]
		public uint GetRenderModelCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x7AF3DC", Offset = "0x7AF3DC", VA = "0x7AF3DC")]
		public uint GetComponentCount(string pchRenderModelName)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0x7AF3F8", Offset = "0x7AF3F8", VA = "0x7AF3F8")]
		public uint GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x7AF414", Offset = "0x7AF414", VA = "0x7AF414")]
		public ulong GetComponentButtonMask(string pchRenderModelName, string pchComponentName)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0x7AF430", Offset = "0x7AF430", VA = "0x7AF430")]
		public uint GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x7AF44C", Offset = "0x7AF44C", VA = "0x7AF44C")]
		public bool GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x7AF9D0", Offset = "0x7AF9D0", VA = "0x7AF9D0")]
		public bool RenderModelHasComponent(string pchRenderModelName, string pchComponentName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x7AF9EC", Offset = "0x7AF9EC", VA = "0x7AF9EC")]
		public uint GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x7AFA08", Offset = "0x7AFA08", VA = "0x7AFA08")]
		public uint GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0x7AFA24", Offset = "0x7AFA24", VA = "0x7AFA24")]
		public string GetRenderModelErrorNameFromEnum(EVRRenderModelError error)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FE")]
	public class CVRNotifications
	{
		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRNotifications FnTable;

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0x7AE0C0", Offset = "0x7AE0C0", VA = "0x7AE0C0")]
		internal CVRNotifications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0x7AE1C0", Offset = "0x7AE1C0", VA = "0x7AE1C0")]
		public EVRNotificationError CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId)
		{
			return default(EVRNotificationError);
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0x7AE1E4", Offset = "0x7AE1E4", VA = "0x7AE1E4")]
		public EVRNotificationError RemoveNotification(uint notificationId)
		{
			return default(EVRNotificationError);
		}
	}
	[Token(Token = "0x20002FF")]
	public class CVRSettings
	{
		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSettings FnTable;

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x7AFF18", Offset = "0x7AFF18", VA = "0x7AFF18")]
		internal CVRSettings(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x7B0020", Offset = "0x7B0020", VA = "0x7B0020")]
		public string GetSettingsErrorNameFromEnum(EVRSettingsError eError)
		{
			return null;
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0x7B00B4", Offset = "0x7B00B4", VA = "0x7B00B4")]
		public bool Sync(bool bForce, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0x7B00D4", Offset = "0x7B00D4", VA = "0x7B00D4")]
		public void SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x7B00F4", Offset = "0x7B00F4", VA = "0x7B00F4")]
		public void SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x7B0110", Offset = "0x7B0110", VA = "0x7B0110")]
		public void SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0x7B012C", Offset = "0x7B012C", VA = "0x7B012C")]
		public void SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0x7B0148", Offset = "0x7B0148", VA = "0x7B0148")]
		public bool GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0x7B0164", Offset = "0x7B0164", VA = "0x7B0164")]
		public int GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(int);
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x7B0180", Offset = "0x7B0180", VA = "0x7B0180")]
		public float GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(float);
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0x7B019C", Offset = "0x7B019C", VA = "0x7B019C")]
		public void GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0x7B01B8", Offset = "0x7B01B8", VA = "0x7B01B8")]
		public void RemoveSection(string pchSection, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0x7B01D4", Offset = "0x7B01D4", VA = "0x7B01D4")]
		public void RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class CVRScreenshots
	{
		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRScreenshots FnTable;

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0x7AFD2C", Offset = "0x7AFD2C", VA = "0x7AFD2C")]
		internal CVRScreenshots(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0x7AFE3C", Offset = "0x7AFE3C", VA = "0x7AFE3C")]
		public EVRScreenshotError RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0x7AFE5C", Offset = "0x7AFE5C", VA = "0x7AFE5C")]
		public EVRScreenshotError HookScreenshot(EVRScreenshotType[] pSupportedTypes)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0x7AFE88", Offset = "0x7AFE88", VA = "0x7AFE88")]
		public EVRScreenshotType GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError)
		{
			return default(EVRScreenshotType);
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x7AFEA4", Offset = "0x7AFEA4", VA = "0x7AFEA4")]
		public uint GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x7AFEC0", Offset = "0x7AFEC0", VA = "0x7AFEC0")]
		public EVRScreenshotError UpdateScreenshotProgress(uint screenshotHandle, float flProgress)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x7AFEDC", Offset = "0x7AFEDC", VA = "0x7AFEDC")]
		public EVRScreenshotError TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x7AFEFC", Offset = "0x7AFEFC", VA = "0x7AFEFC")]
		public EVRScreenshotError SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename)
		{
			return default(EVRScreenshotError);
		}
	}
	[Token(Token = "0x2000301")]
	public class CVRResources
	{
		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRResources FnTable;

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x7AFBF4", Offset = "0x7AFBF4", VA = "0x7AFBF4")]
		internal CVRResources(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x7AFCF4", Offset = "0x7AFCF4", VA = "0x7AFCF4")]
		public uint LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x7AFD10", Offset = "0x7AFD10", VA = "0x7AFD10")]
		public uint GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, string pchPathBuffer, uint unBufferLen)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000302")]
	public class CVRDriverManager
	{
		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRDriverManager FnTable;

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0x7ADE04", Offset = "0x7ADE04", VA = "0x7ADE04")]
		internal CVRDriverManager(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0x7ADF04", Offset = "0x7ADF04", VA = "0x7ADF04")]
		public uint GetDriverCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0x7ADF20", Offset = "0x7ADF20", VA = "0x7ADF20")]
		public uint GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000303")]
	public class OpenVRInterop
	{
		[PreserveSig]
		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0x8302C4", Offset = "0x8302C4", VA = "0x8302C4")]
		internal static extern uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType);

		[PreserveSig]
		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x830374", Offset = "0x830374", VA = "0x830374")]
		internal static extern void ShutdownInternal();

		[PreserveSig]
		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0x830404", Offset = "0x830404", VA = "0x830404")]
		internal static extern bool IsHmdPresent();

		[PreserveSig]
		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0x83049C", Offset = "0x83049C", VA = "0x83049C")]
		internal static extern bool IsRuntimeInstalled();

		[PreserveSig]
		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x8305A8", Offset = "0x8305A8", VA = "0x8305A8")]
		internal static extern IntPtr GetStringForHmdError(EVRInitError error);

		[PreserveSig]
		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x830648", Offset = "0x830648", VA = "0x830648")]
		internal static extern IntPtr GetGenericInterface([In] string pchInterfaceVersion, ref EVRInitError peError);

		[PreserveSig]
		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x830710", Offset = "0x830710", VA = "0x830710")]
		internal static extern bool IsInterfaceVersionValid([In] string pchInterfaceVersion);

		[PreserveSig]
		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x8307CC", Offset = "0x8307CC", VA = "0x8307CC")]
		internal static extern uint GetInitToken();

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x8319A8", Offset = "0x8319A8", VA = "0x8319A8")]
		public OpenVRInterop()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public enum EVREye
	{
		[Token(Token = "0x4001552")]
		Eye_Left,
		[Token(Token = "0x4001553")]
		Eye_Right
	}
	[Token(Token = "0x2000305")]
	public enum ETextureType
	{
		[Token(Token = "0x4001555")]
		DirectX,
		[Token(Token = "0x4001556")]
		OpenGL,
		[Token(Token = "0x4001557")]
		Vulkan,
		[Token(Token = "0x4001558")]
		IOSurface,
		[Token(Token = "0x4001559")]
		DirectX12
	}
	[Token(Token = "0x2000306")]
	public enum EColorSpace
	{
		[Token(Token = "0x400155B")]
		Auto,
		[Token(Token = "0x400155C")]
		Gamma,
		[Token(Token = "0x400155D")]
		Linear
	}
	[Token(Token = "0x2000307")]
	public enum ETrackingResult
	{
		[Token(Token = "0x400155F")]
		Uninitialized = 1,
		[Token(Token = "0x4001560")]
		Calibrating_InProgress = 100,
		[Token(Token = "0x4001561")]
		Calibrating_OutOfRange = 101,
		[Token(Token = "0x4001562")]
		Running_OK = 200,
		[Token(Token = "0x4001563")]
		Running_OutOfRange = 201
	}
	[Token(Token = "0x2000308")]
	public enum ETrackedDeviceClass
	{
		[Token(Token = "0x4001565")]
		Invalid,
		[Token(Token = "0x4001566")]
		HMD,
		[Token(Token = "0x4001567")]
		Controller,
		[Token(Token = "0x4001568")]
		GenericTracker,
		[Token(Token = "0x4001569")]
		TrackingReference,
		[Token(Token = "0x400156A")]
		DisplayRedirect
	}
	[Token(Token = "0x2000309")]
	public enum ETrackedControllerRole
	{
		[Token(Token = "0x400156C")]
		Invalid,
		[Token(Token = "0x400156D")]
		LeftHand,
		[Token(Token = "0x400156E")]
		RightHand
	}
	[Token(Token = "0x200030A")]
	public enum ETrackingUniverseOrigin
	{
		[Token(Token = "0x4001570")]
		TrackingUniverseSeated,
		[Token(Token = "0x4001571")]
		TrackingUniverseStanding,
		[Token(Token = "0x4001572")]
		TrackingUniverseRawAndUncalibrated
	}
	[Token(Token = "0x200030B")]
	public enum ETrackedDeviceProperty
	{
		[Token(Token = "0x4001574")]
		Prop_Invalid = 0,
		[Token(Token = "0x4001575")]
		Prop_TrackingSystemName_String = 1000,
		[Token(Token = "0x4001576")]
		Prop_ModelNumber_String = 1001,
		[Token(Token = "0x4001577")]
		Prop_SerialNumber_String = 1002,
		[Token(Token = "0x4001578")]
		Prop_RenderModelName_String = 1003,
		[Token(Token = "0x4001579")]
		Prop_WillDriftInYaw_Bool = 1004,
		[Token(Token = "0x400157A")]
		Prop_ManufacturerName_String = 1005,
		[Token(Token = "0x400157B")]
		Prop_TrackingFirmwareVersion_String = 1006,
		[Token(Token = "0x400157C")]
		Prop_HardwareRevision_String = 1007,
		[Token(Token = "0x400157D")]
		Prop_AllWirelessDongleDescriptions_String = 1008,
		[Token(Token = "0x400157E")]
		Prop_ConnectedWirelessDongle_String = 1009,
		[Token(Token = "0x400157F")]
		Prop_DeviceIsWireless_Bool = 1010,
		[Token(Token = "0x4001580")]
		Prop_DeviceIsCharging_Bool = 1011,
		[Token(Token = "0x4001581")]
		Prop_DeviceBatteryPercentage_Float = 1012,
		[Token(Token = "0x4001582")]
		Prop_StatusDisplayTransform_Matrix34 = 1013,
		[Token(Token = "0x4001583")]
		Prop_Firmware_UpdateAvailable_Bool = 1014,
		[Token(Token = "0x4001584")]
		Prop_Firmware_ManualUpdate_Bool = 1015,
		[Token(Token = "0x4001585")]
		Prop_Firmware_ManualUpdateURL_String = 1016,
		[Token(Token = "0x4001586")]
		Prop_HardwareRevision_Uint64 = 1017,
		[Token(Token = "0x4001587")]
		Prop_FirmwareVersion_Uint64 = 1018,
		[Token(Token = "0x4001588")]
		Prop_FPGAVersion_Uint64 = 1019,
		[Token(Token = "0x4001589")]
		Prop_VRCVersion_Uint64 = 1020,
		[Token(Token = "0x400158A")]
		Prop_RadioVersion_Uint64 = 1021,
		[Token(Token = "0x400158B")]
		Prop_DongleVersion_Uint64 = 1022,
		[Token(Token = "0x400158C")]
		Prop_BlockServerShutdown_Bool = 1023,
		[Token(Token = "0x400158D")]
		Prop_CanUnifyCoordinateSystemWithHmd_Bool = 1024,
		[Token(Token = "0x400158E")]
		Prop_ContainsProximitySensor_Bool = 1025,
		[Token(Token = "0x400158F")]
		Prop_DeviceProvidesBatteryStatus_Bool = 1026,
		[Token(Token = "0x4001590")]
		Prop_DeviceCanPowerOff_Bool = 1027,
		[Token(Token = "0x4001591")]
		Prop_Firmware_ProgrammingTarget_String = 1028,
		[Token(Token = "0x4001592")]
		Prop_DeviceClass_Int32 = 1029,
		[Token(Token = "0x4001593")]
		Prop_HasCamera_Bool = 1030,
		[Token(Token = "0x4001594")]
		Prop_DriverVersion_String = 1031,
		[Token(Token = "0x4001595")]
		Prop_Firmware_ForceUpdateRequired_Bool = 1032,
		[Token(Token = "0x4001596")]
		Prop_ViveSystemButtonFixRequired_Bool = 1033,
		[Token(Token = "0x4001597")]
		Prop_ParentDriver_Uint64 = 1034,
		[Token(Token = "0x4001598")]
		Prop_ResourceRoot_String = 1035,
		[Token(Token = "0x4001599")]
		Prop_ReportsTimeSinceVSync_Bool = 2000,
		[Token(Token = "0x400159A")]
		Prop_SecondsFromVsyncToPhotons_Float = 2001,
		[Token(Token = "0x400159B")]
		Prop_DisplayFrequency_Float = 2002,
		[Token(Token = "0x400159C")]
		Prop_UserIpdMeters_Float = 2003,
		[Token(Token = "0x400159D")]
		Prop_CurrentUniverseId_Uint64 = 2004,
		[Token(Token = "0x400159E")]
		Prop_PreviousUniverseId_Uint64 = 2005,
		[Token(Token = "0x400159F")]
		Prop_DisplayFirmwareVersion_Uint64 = 2006,
		[Token(Token = "0x40015A0")]
		Prop_IsOnDesktop_Bool = 2007,
		[Token(Token = "0x40015A1")]
		Prop_DisplayMCType_Int32 = 2008,
		[Token(Token = "0x40015A2")]
		Prop_DisplayMCOffset_Float = 2009,
		[Token(Token = "0x40015A3")]
		Prop_DisplayMCScale_Float = 2010,
		[Token(Token = "0x40015A4")]
		Prop_EdidVendorID_Int32 = 2011,
		[Token(Token = "0x40015A5")]
		Prop_DisplayMCImageLeft_String = 2012,
		[Token(Token = "0x40015A6")]
		Prop_DisplayMCImageRight_String = 2013,
		[Token(Token = "0x40015A7")]
		Prop_DisplayGCBlackClamp_Float = 2014,
		[Token(Token = "0x40015A8")]
		Prop_EdidProductID_Int32 = 2015,
		[Token(Token = "0x40015A9")]
		Prop_CameraToHeadTransform_Matrix34 = 2016,
		[Token(Token = "0x40015AA")]
		Prop_DisplayGCType_Int32 = 2017,
		[Token(Token = "0x40015AB")]
		Prop_DisplayGCOffset_Float = 2018,
		[Token(Token = "0x40015AC")]
		Prop_DisplayGCScale_Float = 2019,
		[Token(Token = "0x40015AD")]
		Prop_DisplayGCPrescale_Float = 2020,
		[Token(Token = "0x40015AE")]
		Prop_DisplayGCImage_String = 2021,
		[Token(Token = "0x40015AF")]
		Prop_LensCenterLeftU_Float = 2022,
		[Token(Token = "0x40015B0")]
		Prop_LensCenterLeftV_Float = 2023,
		[Token(Token = "0x40015B1")]
		Prop_LensCenterRightU_Float = 2024,
		[Token(Token = "0x40015B2")]
		Prop_LensCenterRightV_Float = 2025,
		[Token(Token = "0x40015B3")]
		Prop_UserHeadToEyeDepthMeters_Float = 2026,
		[Token(Token = "0x40015B4")]
		Prop_CameraFirmwareVersion_Uint64 = 2027,
		[Token(Token = "0x40015B5")]
		Prop_CameraFirmwareDescription_String = 2028,
		[Token(Token = "0x40015B6")]
		Prop_DisplayFPGAVersion_Uint64 = 2029,
		[Token(Token = "0x40015B7")]
		Prop_DisplayBootloaderVersion_Uint64 = 2030,
		[Token(Token = "0x40015B8")]
		Prop_DisplayHardwareVersion_Uint64 = 2031,
		[Token(Token = "0x40015B9")]
		Prop_AudioFirmwareVersion_Uint64 = 2032,
		[Token(Token = "0x40015BA")]
		Prop_CameraCompatibilityMode_Int32 = 2033,
		[Token(Token = "0x40015BB")]
		Prop_ScreenshotHorizontalFieldOfViewDegrees_Float = 2034,
		[Token(Token = "0x40015BC")]
		Prop_ScreenshotVerticalFieldOfViewDegrees_Float = 2035,
		[Token(Token = "0x40015BD")]
		Prop_DisplaySuppressed_Bool = 2036,
		[Token(Token = "0x40015BE")]
		Prop_DisplayAllowNightMode_Bool = 2037,
		[Token(Token = "0x40015BF")]
		Prop_DisplayMCImageWidth_Int32 = 2038,
		[Token(Token = "0x40015C0")]
		Prop_DisplayMCImageHeight_Int32 = 2039,
		[Token(Token = "0x40015C1")]
		Prop_DisplayMCImageNumChannels_Int32 = 2040,
		[Token(Token = "0x40015C2")]
		Prop_DisplayMCImageData_Binary = 2041,
		[Token(Token = "0x40015C3")]
		Prop_SecondsFromPhotonsToVblank_Float = 2042,
		[Token(Token = "0x40015C4")]
		Prop_DriverDirectModeSendsVsyncEvents_Bool = 2043,
		[Token(Token = "0x40015C5")]
		Prop_DisplayDebugMode_Bool = 2044,
		[Token(Token = "0x40015C6")]
		Prop_GraphicsAdapterLuid_Uint64 = 2045,
		[Token(Token = "0x40015C7")]
		Prop_AttachedDeviceId_String = 3000,
		[Token(Token = "0x40015C8")]
		Prop_SupportedButtons_Uint64 = 3001,
		[Token(Token = "0x40015C9")]
		Prop_Axis0Type_Int32 = 3002,
		[Token(Token = "0x40015CA")]
		Prop_Axis1Type_Int32 = 3003,
		[Token(Token = "0x40015CB")]
		Prop_Axis2Type_Int32 = 3004,
		[Token(Token = "0x40015CC")]
		Prop_Axis3Type_Int32 = 3005,
		[Token(Token = "0x40015CD")]
		Prop_Axis4Type_Int32 = 3006,
		[Token(Token = "0x40015CE")]
		Prop_ControllerRoleHint_Int32 = 3007,
		[Token(Token = "0x40015CF")]
		Prop_FieldOfViewLeftDegrees_Float = 4000,
		[Token(Token = "0x40015D0")]
		Prop_FieldOfViewRightDegrees_Float = 4001,
		[Token(Token = "0x40015D1")]
		Prop_FieldOfViewTopDegrees_Float = 4002,
		[Token(Token = "0x40015D2")]
		Prop_FieldOfViewBottomDegrees_Float = 4003,
		[Token(Token = "0x40015D3")]
		Prop_TrackingRangeMinimumMeters_Float = 4004,
		[Token(Token = "0x40015D4")]
		Prop_TrackingRangeMaximumMeters_Float = 4005,
		[Token(Token = "0x40015D5")]
		Prop_ModeLabel_String = 4006,
		[Token(Token = "0x40015D6")]
		Prop_IconPathName_String = 5000,
		[Token(Token = "0x40015D7")]
		Prop_NamedIconPathDeviceOff_String = 5001,
		[Token(Token = "0x40015D8")]
		Prop_NamedIconPathDeviceSearching_String = 5002,
		[Token(Token = "0x40015D9")]
		Prop_NamedIconPathDeviceSearchingAlert_String = 5003,
		[Token(Token = "0x40015DA")]
		Prop_NamedIconPathDeviceReady_String = 5004,
		[Token(Token = "0x40015DB")]
		Prop_NamedIconPathDeviceReadyAlert_String = 5005,
		[Token(Token = "0x40015DC")]
		Prop_NamedIconPathDeviceNotReady_String = 5006,
		[Token(Token = "0x40015DD")]
		Prop_NamedIconPathDeviceStandby_String = 5007,
		[Token(Token = "0x40015DE")]
		Prop_NamedIconPathDeviceAlertLow_String = 5008,
		[Token(Token = "0x40015DF")]
		Prop_DisplayHiddenArea_Binary_Start = 5100,
		[Token(Token = "0x40015E0")]
		Prop_DisplayHiddenArea_Binary_End = 5150,
		[Token(Token = "0x40015E1")]
		Prop_UserConfigPath_String = 6000,
		[Token(Token = "0x40015E2")]
		Prop_InstallPath_String = 6001,
		[Token(Token = "0x40015E3")]
		Prop_HasDisplayComponent_Bool = 6002,
		[Token(Token = "0x40015E4")]
		Prop_HasControllerComponent_Bool = 6003,
		[Token(Token = "0x40015E5")]
		Prop_HasCameraComponent_Bool = 6004,
		[Token(Token = "0x40015E6")]
		Prop_HasDriverDirectModeComponent_Bool = 6005,
		[Token(Token = "0x40015E7")]
		Prop_HasVirtualDisplayComponent_Bool = 6006,
		[Token(Token = "0x40015E8")]
		Prop_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x40015E9")]
		Prop_VendorSpecific_Reserved_End = 10999
	}
	[Token(Token = "0x200030C")]
	public enum ETrackedPropertyError
	{
		[Token(Token = "0x40015EB")]
		TrackedProp_Success,
		[Token(Token = "0x40015EC")]
		TrackedProp_WrongDataType,
		[Token(Token = "0x40015ED")]
		TrackedProp_WrongDeviceClass,
		[Token(Token = "0x40015EE")]
		TrackedProp_BufferTooSmall,
		[Token(Token = "0x40015EF")]
		TrackedProp_UnknownProperty,
		[Token(Token = "0x40015F0")]
		TrackedProp_InvalidDevice,
		[Token(Token = "0x40015F1")]
		TrackedProp_CouldNotContactServer,
		[Token(Token = "0x40015F2")]
		TrackedProp_ValueNotProvidedByDevice,
		[Token(Token = "0x40015F3")]
		TrackedProp_StringExceedsMaximumLength,
		[Token(Token = "0x40015F4")]
		TrackedProp_NotYetAvailable,
		[Token(Token = "0x40015F5")]
		TrackedProp_PermissionDenied,
		[Token(Token = "0x40015F6")]
		TrackedProp_InvalidOperation
	}
	[Token(Token = "0x200030D")]
	public enum EVRSubmitFlags
	{
		[Token(Token = "0x40015F8")]
		Submit_Default = 0,
		[Token(Token = "0x40015F9")]
		Submit_LensDistortionAlreadyApplied = 1,
		[Token(Token = "0x40015FA")]
		Submit_GlRenderBuffer = 2,
		[Token(Token = "0x40015FB")]
		Submit_Reserved = 4
	}
	[Token(Token = "0x200030E")]
	public enum EVRState
	{
		[Token(Token = "0x40015FD")]
		Undefined = -1,
		[Token(Token = "0x40015FE")]
		Off,
		[Token(Token = "0x40015FF")]
		Searching,
		[Token(Token = "0x4001600")]
		Searching_Alert,
		[Token(Token = "0x4001601")]
		Ready,
		[Token(Token = "0x4001602")]
		Ready_Alert,
		[Token(Token = "0x4001603")]
		NotReady,
		[Token(Token = "0x4001604")]
		Standby,
		[Token(Token = "0x4001605")]
		Ready_Alert_Low
	}
	[Token(Token = "0x200030F")]
	public enum EVREventType
	{
		[Token(Token = "0x4001607")]
		VREvent_None = 0,
		[Token(Token = "0x4001608")]
		VREvent_TrackedDeviceActivated = 100,
		[Token(Token = "0x4001609")]
		VREvent_TrackedDeviceDeactivated = 101,
		[Token(Token = "0x400160A")]
		VREvent_TrackedDeviceUpdated = 102,
		[Token(Token = "0x400160B")]
		VREvent_TrackedDeviceUserInteractionStarted = 103,
		[Token(Token = "0x400160C")]
		VREvent_TrackedDeviceUserInteractionEnded = 104,
		[Token(Token = "0x400160D")]
		VREvent_IpdChanged = 105,
		[Token(Token = "0x400160E")]
		VREvent_EnterStandbyMode = 106,
		[Token(Token = "0x400160F")]
		VREvent_LeaveStandbyMode = 107,
		[Token(Token = "0x4001610")]
		VREvent_TrackedDeviceRoleChanged = 108,
		[Token(Token = "0x4001611")]
		VREvent_WatchdogWakeUpRequested = 109,
		[Token(Token = "0x4001612")]
		VREvent_LensDistortionChanged = 110,
		[Token(Token = "0x4001613")]
		VREvent_PropertyChanged = 111,
		[Token(Token = "0x4001614")]
		VREvent_ButtonPress = 200,
		[Token(Token = "0x4001615")]
		VREvent_ButtonUnpress = 201,
		[Token(Token = "0x4001616")]
		VREvent_ButtonTouch = 202,
		[Token(Token = "0x4001617")]
		VREvent_ButtonUntouch = 203,
		[Token(Token = "0x4001618")]
		VREvent_MouseMove = 300,
		[Token(Token = "0x4001619")]
		VREvent_MouseButtonDown = 301,
		[Token(Token = "0x400161A")]
		VREvent_MouseButtonUp = 302,
		[Token(Token = "0x400161B")]
		VREvent_FocusEnter = 303,
		[Token(Token = "0x400161C")]
		VREvent_FocusLeave = 304,
		[Token(Token = "0x400161D")]
		VREvent_Scroll = 305,
		[Token(Token = "0x400161E")]
		VREvent_TouchPadMove = 306,
		[Token(Token = "0x400161F")]
		VREvent_OverlayFocusChanged = 307,
		[Token(Token = "0x4001620")]
		VREvent_InputFocusCaptured = 400,
		[Token(Token = "0x4001621")]
		VREvent_InputFocusReleased = 401,
		[Token(Token = "0x4001622")]
		VREvent_SceneFocusLost = 402,
		[Token(Token = "0x4001623")]
		VREvent_SceneFocusGained = 403,
		[Token(Token = "0x4001624")]
		VREvent_SceneApplicationChanged = 404,
		[Token(Token = "0x4001625")]
		VREvent_SceneFocusChanged = 405,
		[Token(Token = "0x4001626")]
		VREvent_InputFocusChanged = 406,
		[Token(Token = "0x4001627")]
		VREvent_SceneApplicationSecondaryRenderingStarted = 407,
		[Token(Token = "0x4001628")]
		VREvent_HideRenderModels = 410,
		[Token(Token = "0x4001629")]
		VREvent_ShowRenderModels = 411,
		[Token(Token = "0x400162A")]
		VREvent_OverlayShown = 500,
		[Token(Token = "0x400162B")]
		VREvent_OverlayHidden = 501,
		[Token(Token = "0x400162C")]
		VREvent_DashboardActivated = 502,
		[Token(Token = "0x400162D")]
		VREvent_DashboardDeactivated = 503,
		[Token(Token = "0x400162E")]
		VREvent_DashboardThumbSelected = 504,
		[Token(Token = "0x400162F")]
		VREvent_DashboardRequested = 505,
		[Token(Token = "0x4001630")]
		VREvent_ResetDashboard = 506,
		[Token(Token = "0x4001631")]
		VREvent_RenderToast = 507,
		[Token(Token = "0x4001632")]
		VREvent_ImageLoaded = 508,
		[Token(Token = "0x4001633")]
		VREvent_ShowKeyboard = 509,
		[Token(Token = "0x4001634")]
		VREvent_HideKeyboard = 510,
		[Token(Token = "0x4001635")]
		VREvent_OverlayGamepadFocusGained = 511,
		[Token(Token = "0x4001636")]
		VREvent_OverlayGamepadFocusLost = 512,
		[Token(Token = "0x4001637")]
		VREvent_OverlaySharedTextureChanged = 513,
		[Token(Token = "0x4001638")]
		VREvent_DashboardGuideButtonDown = 514,
		[Token(Token = "0x4001639")]
		VREvent_DashboardGuideButtonUp = 515,
		[Token(Token = "0x400163A")]
		VREvent_ScreenshotTriggered = 516,
		[Token(Token = "0x400163B")]
		VREvent_ImageFailed = 517,
		[Token(Token = "0x400163C")]
		VREvent_DashboardOverlayCreated = 518,
		[Token(Token = "0x400163D")]
		VREvent_RequestScreenshot = 520,
		[Token(Token = "0x400163E")]
		VREvent_ScreenshotTaken = 521,
		[Token(Token = "0x400163F")]
		VREvent_ScreenshotFailed = 522,
		[Token(Token = "0x4001640")]
		VREvent_SubmitScreenshotToDashboard = 523,
		[Token(Token = "0x4001641")]
		VREvent_ScreenshotProgressToDashboard = 524,
		[Token(Token = "0x4001642")]
		VREvent_PrimaryDashboardDeviceChanged = 525,
		[Token(Token = "0x4001643")]
		VREvent_Notification_Shown = 600,
		[Token(Token = "0x4001644")]
		VREvent_Notification_Hidden = 601,
		[Token(Token = "0x4001645")]
		VREvent_Notification_BeginInteraction = 602,
		[Token(Token = "0x4001646")]
		VREvent_Notification_Destroyed = 603,
		[Token(Token = "0x4001647")]
		VREvent_Quit = 700,
		[Token(Token = "0x4001648")]
		VREvent_ProcessQuit = 701,
		[Token(Token = "0x4001649")]
		VREvent_QuitAborted_UserPrompt = 702,
		[Token(Token = "0x400164A")]
		VREvent_QuitAcknowledged = 703,
		[Token(Token = "0x400164B")]
		VREvent_DriverRequestedQuit = 704,
		[Token(Token = "0x400164C")]
		VREvent_ChaperoneDataHasChanged = 800,
		[Token(Token = "0x400164D")]
		VREvent_ChaperoneUniverseHasChanged = 801,
		[Token(Token = "0x400164E")]
		VREvent_ChaperoneTempDataHasChanged = 802,
		[Token(Token = "0x400164F")]
		VREvent_ChaperoneSettingsHaveChanged = 803,
		[Token(Token = "0x4001650")]
		VREvent_SeatedZeroPoseReset = 804,
		[Token(Token = "0x4001651")]
		VREvent_AudioSettingsHaveChanged = 820,
		[Token(Token = "0x4001652")]
		VREvent_BackgroundSettingHasChanged = 850,
		[Token(Token = "0x4001653")]
		VREvent_CameraSettingsHaveChanged = 851,
		[Token(Token = "0x4001654")]
		VREvent_ReprojectionSettingHasChanged = 852,
		[Token(Token = "0x4001655")]
		VREvent_ModelSkinSettingsHaveChanged = 853,
		[Token(Token = "0x4001656")]
		VREvent_EnvironmentSettingsHaveChanged = 854,
		[Token(Token = "0x4001657")]
		VREvent_PowerSettingsHaveChanged = 855,
		[Token(Token = "0x4001658")]
		VREvent_EnableHomeAppSettingsHaveChanged = 856,
		[Token(Token = "0x4001659")]
		VREvent_StatusUpdate = 900,
		[Token(Token = "0x400165A")]
		VREvent_MCImageUpdated = 1000,
		[Token(Token = "0x400165B")]
		VREvent_FirmwareUpdateStarted = 1100,
		[Token(Token = "0x400165C")]
		VREvent_FirmwareUpdateFinished = 1101,
		[Token(Token = "0x400165D")]
		VREvent_KeyboardClosed = 1200,
		[Token(Token = "0x400165E")]
		VREvent_KeyboardCharInput = 1201,
		[Token(Token = "0x400165F")]
		VREvent_KeyboardDone = 1202,
		[Token(Token = "0x4001660")]
		VREvent_ApplicationTransitionStarted = 1300,
		[Token(Token = "0x4001661")]
		VREvent_ApplicationTransitionAborted = 1301,
		[Token(Token = "0x4001662")]
		VREvent_ApplicationTransitionNewAppStarted = 1302,
		[Token(Token = "0x4001663")]
		VREvent_ApplicationListUpdated = 1303,
		[Token(Token = "0x4001664")]
		VREvent_ApplicationMimeTypeLoad = 1304,
		[Token(Token = "0x4001665")]
		VREvent_ApplicationTransitionNewAppLaunchComplete = 1305,
		[Token(Token = "0x4001666")]
		VREvent_ProcessConnected = 1306,
		[Token(Token = "0x4001667")]
		VREvent_ProcessDisconnected = 1307,
		[Token(Token = "0x4001668")]
		VREvent_Compositor_MirrorWindowShown = 1400,
		[Token(Token = "0x4001669")]
		VREvent_Compositor_MirrorWindowHidden = 1401,
		[Token(Token = "0x400166A")]
		VREvent_Compositor_ChaperoneBoundsShown = 1410,
		[Token(Token = "0x400166B")]
		VREvent_Compositor_ChaperoneBoundsHidden = 1411,
		[Token(Token = "0x400166C")]
		VREvent_TrackedCamera_StartVideoStream = 1500,
		[Token(Token = "0x400166D")]
		VREvent_TrackedCamera_StopVideoStream = 1501,
		[Token(Token = "0x400166E")]
		VREvent_TrackedCamera_PauseVideoStream = 1502,
		[Token(Token = "0x400166F")]
		VREvent_TrackedCamera_ResumeVideoStream = 1503,
		[Token(Token = "0x4001670")]
		VREvent_TrackedCamera_EditingSurface = 1550,
		[Token(Token = "0x4001671")]
		VREvent_PerformanceTest_EnableCapture = 1600,
		[Token(Token = "0x4001672")]
		VREvent_PerformanceTest_DisableCapture = 1601,
		[Token(Token = "0x4001673")]
		VREvent_PerformanceTest_FidelityLevel = 1602,
		[Token(Token = "0x4001674")]
		VREvent_MessageOverlay_Closed = 1650,
		[Token(Token = "0x4001675")]
		VREvent_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x4001676")]
		VREvent_VendorSpecific_Reserved_End = 19999
	}
	[Token(Token = "0x2000310")]
	public enum EDeviceActivityLevel
	{
		[Token(Token = "0x4001678")]
		k_EDeviceActivityLevel_Unknown = -1,
		[Token(Token = "0x4001679")]
		k_EDeviceActivityLevel_Idle,
		[Token(Token = "0x400167A")]
		k_EDeviceActivityLevel_UserInteraction,
		[Token(Token = "0x400167B")]
		k_EDeviceActivityLevel_UserInteraction_Timeout,
		[Token(Token = "0x400167C")]
		k_EDeviceActivityLevel_Standby
	}
	[Token(Token = "0x2000311")]
	public enum EVRButtonId
	{
		[Token(Token = "0x400167E")]
		k_EButton_System = 0,
		[Token(Token = "0x400167F")]
		k_EButton_ApplicationMenu = 1,
		[Token(Token = "0x4001680")]
		k_EButton_Grip = 2,
		[Token(Token = "0x4001681")]
		k_EButton_DPad_Left = 3,
		[Token(Token = "0x4001682")]
		k_EButton_DPad_Up = 4,
		[Token(Token = "0x4001683")]
		k_EButton_DPad_Right = 5,
		[Token(Token = "0x4001684")]
		k_EButton_DPad_Down = 6,
		[Token(Token = "0x4001685")]
		k_EButton_A = 7,
		[Token(Token = "0x4001686")]
		k_EButton_ProximitySensor = 31,
		[Token(Token = "0x4001687")]
		k_EButton_Axis0 = 32,
		[Token(Token = "0x4001688")]
		k_EButton_Axis1 = 33,
		[Token(Token = "0x4001689")]
		k_EButton_Axis2 = 34,
		[Token(Token = "0x400168A")]
		k_EButton_Axis3 = 35,
		[Token(Token = "0x400168B")]
		k_EButton_Axis4 = 36,
		[Token(Token = "0x400168C")]
		k_EButton_SteamVR_Touchpad = 32,
		[Token(Token = "0x400168D")]
		k_EButton_SteamVR_Trigger = 33,
		[Token(Token = "0x400168E")]
		k_EButton_Dashboard_Back = 2,
		[Token(Token = "0x400168F")]
		k_EButton_Max = 64
	}
	[Token(Token = "0x2000312")]
	public enum EVRMouseButton
	{
		[Token(Token = "0x4001691")]
		Left = 1,
		[Token(Token = "0x4001692")]
		Right = 2,
		[Token(Token = "0x4001693")]
		Middle = 4
	}
	[Token(Token = "0x2000313")]
	public enum EHiddenAreaMeshType
	{
		[Token(Token = "0x4001695")]
		k_eHiddenAreaMesh_Standard,
		[Token(Token = "0x4001696")]
		k_eHiddenAreaMesh_Inverse,
		[Token(Token = "0x4001697")]
		k_eHiddenAreaMesh_LineLoop,
		[Token(Token = "0x4001698")]
		k_eHiddenAreaMesh_Max
	}
	[Token(Token = "0x2000314")]
	public enum EVRControllerAxisType
	{
		[Token(Token = "0x400169A")]
		k_eControllerAxis_None,
		[Token(Token = "0x400169B")]
		k_eControllerAxis_TrackPad,
		[Token(Token = "0x400169C")]
		k_eControllerAxis_Joystick,
		[Token(Token = "0x400169D")]
		k_eControllerAxis_Trigger
	}
	[Token(Token = "0x2000315")]
	public enum EVRControllerEventOutputType
	{
		[Token(Token = "0x400169F")]
		ControllerEventOutput_OSEvents,
		[Token(Token = "0x40016A0")]
		ControllerEventOutput_VREvents
	}
	[Token(Token = "0x2000316")]
	public enum ECollisionBoundsStyle
	{
		[Token(Token = "0x40016A2")]
		COLLISION_BOUNDS_STYLE_BEGINNER,
		[Token(Token = "0x40016A3")]
		COLLISION_BOUNDS_STYLE_INTERMEDIATE,
		[Token(Token = "0x40016A4")]
		COLLISION_BOUNDS_STYLE_SQUARES,
		[Token(Token = "0x40016A5")]
		COLLISION_BOUNDS_STYLE_ADVANCED,
		[Token(Token = "0x40016A6")]
		COLLISION_BOUNDS_STYLE_NONE,
		[Token(Token = "0x40016A7")]
		COLLISION_BOUNDS_STYLE_COUNT
	}
	[Token(Token = "0x2000317")]
	public enum EVROverlayError
	{
		[Token(Token = "0x40016A9")]
		None = 0,
		[Token(Token = "0x40016AA")]
		UnknownOverlay = 10,
		[Token(Token = "0x40016AB")]
		InvalidHandle = 11,
		[Token(Token = "0x40016AC")]
		PermissionDenied = 12,
		[Token(Token = "0x40016AD")]
		OverlayLimitExceeded = 13,
		[Token(Token = "0x40016AE")]
		WrongVisibilityType = 14,
		[Token(Token = "0x40016AF")]
		KeyTooLong = 15,
		[Token(Token = "0x40016B0")]
		NameTooLong = 16,
		[Token(Token = "0x40016B1")]
		KeyInUse = 17,
		[Token(Token = "0x40016B2")]
		WrongTransformType = 18,
		[Token(Token = "0x40016B3")]
		InvalidTrackedDevice = 19,
		[Token(Token = "0x40016B4")]
		InvalidParameter = 20,
		[Token(Token = "0x40016B5")]
		ThumbnailCantBeDestroyed = 21,
		[Token(Token = "0x40016B6")]
		ArrayTooSmall = 22,
		[Token(Token = "0x40016B7")]
		RequestFailed = 23,
		[Token(Token = "0x40016B8")]
		InvalidTexture = 24,
		[Token(Token = "0x40016B9")]
		UnableToLoadFile = 25,
		[Token(Token = "0x40016BA")]
		KeyboardAlreadyInUse = 26,
		[Token(Token = "0x40016BB")]
		NoNeighbor = 27,
		[Token(Token = "0x40016BC")]
		TooManyMaskPrimitives = 29,
		[Token(Token = "0x40016BD")]
		BadMaskPrimitive = 30
	}
	[Token(Token = "0x2000318")]
	public enum EVRApplicationType
	{
		[Token(Token = "0x40016BF")]
		VRApplication_Other,
		[Token(Token = "0x40016C0")]
		VRApplication_Scene,
		[Token(Token = "0x40016C1")]
		VRApplication_Overlay,
		[Token(Token = "0x40016C2")]
		VRApplication_Background,
		[Token(Token = "0x40016C3")]
		VRApplication_Utility,
		[Token(Token = "0x40016C4")]
		VRApplication_VRMonitor,
		[Token(Token = "0x40016C5")]
		VRApplication_SteamWatchdog,
		[Token(Token = "0x40016C6")]
		VRApplication_Bootstrapper,
		[Token(Token = "0x40016C7")]
		VRApplication_Max
	}
	[Token(Token = "0x2000319")]
	public enum EVRFirmwareError
	{
		[Token(Token = "0x40016C9")]
		None,
		[Token(Token = "0x40016CA")]
		Success,
		[Token(Token = "0x40016CB")]
		Fail
	}
	[Token(Token = "0x200031A")]
	public enum EVRNotificationError
	{
		[Token(Token = "0x40016CD")]
		OK = 0,
		[Token(Token = "0x40016CE")]
		InvalidNotificationId = 100,
		[Token(Token = "0x40016CF")]
		NotificationQueueFull = 101,
		[Token(Token = "0x40016D0")]
		InvalidOverlayHandle = 102,
		[Token(Token = "0x40016D1")]
		SystemWithUserValueAlreadyExists = 103
	}
	[Token(Token = "0x200031B")]
	public enum EVRInitError
	{
		[Token(Token = "0x40016D3")]
		None = 0,
		[Token(Token = "0x40016D4")]
		Unknown = 1,
		[Token(Token = "0x40016D5")]
		Init_InstallationNotFound = 100,
		[Token(Token = "0x40016D6")]
		Init_InstallationCorrupt = 101,
		[Token(Token = "0x40016D7")]
		Init_VRClientDLLNotFound = 102,
		[Token(Token = "0x40016D8")]
		Init_FileNotFound = 103,
		[Token(Token = "0x40016D9")]
		Init_FactoryNotFound = 104,
		[Token(Token = "0x40016DA")]
		Init_InterfaceNotFound = 105,
		[Token(Token = "0x40016DB")]
		Init_InvalidInterface = 106,
		[Token(Token = "0x40016DC")]
		Init_UserConfigDirectoryInvalid = 107,
		[Token(Token = "0x40016DD")]
		Init_HmdNotFound = 108,
		[Token(Token = "0x40016DE")]
		Init_NotInitialized = 109,
		[Token(Token = "0x40016DF")]
		Init_PathRegistryNotFound = 110,
		[Token(Token = "0x40016E0")]
		Init_NoConfigPath = 111,
		[Token(Token = "0x40016E1")]
		Init_NoLogPath = 112,
		[Token(Token = "0x40016E2")]
		Init_PathRegistryNotWritable = 113,
		[Token(Token = "0x40016E3")]
		Init_AppInfoInitFailed = 114,
		[Token(Token = "0x40016E4")]
		Init_Retry = 115,
		[Token(Token = "0x40016E5")]
		Init_InitCanceledByUser = 116,
		[Token(Token = "0x40016E6")]
		Init_AnotherAppLaunching = 117,
		[Token(Token = "0x40016E7")]
		Init_SettingsInitFailed = 118,
		[Token(Token = "0x40016E8")]
		Init_ShuttingDown = 119,
		[Token(Token = "0x40016E9")]
		Init_TooManyObjects = 120,
		[Token(Token = "0x40016EA")]
		Init_NoServerForBackgroundApp = 121,
		[Token(Token = "0x40016EB")]
		Init_NotSupportedWithCompositor = 122,
		[Token(Token = "0x40016EC")]
		Init_NotAvailableToUtilityApps = 123,
		[Token(Token = "0x40016ED")]
		Init_Internal = 124,
		[Token(Token = "0x40016EE")]
		Init_HmdDriverIdIsNone = 125,
		[Token(Token = "0x40016EF")]
		Init_HmdNotFoundPresenceFailed = 126,
		[Token(Token = "0x40016F0")]
		Init_VRMonitorNotFound = 127,
		[Token(Token = "0x40016F1")]
		Init_VRMonitorStartupFailed = 128,
		[Token(Token = "0x40016F2")]
		Init_LowPowerWatchdogNotSupported = 129,
		[Token(Token = "0x40016F3")]
		Init_InvalidApplicationType = 130,
		[Token(Token = "0x40016F4")]
		Init_NotAvailableToWatchdogApps = 131,
		[Token(Token = "0x40016F5")]
		Init_WatchdogDisabledInSettings = 132,
		[Token(Token = "0x40016F6")]
		Init_VRDashboardNotFound = 133,
		[Token(Token = "0x40016F7")]
		Init_VRDashboardStartupFailed = 134,
		[Token(Token = "0x40016F8")]
		Init_VRHomeNotFound = 135,
		[Token(Token = "0x40016F9")]
		Init_VRHomeStartupFailed = 136,
		[Token(Token = "0x40016FA")]
		Driver_Failed = 200,
		[Token(Token = "0x40016FB")]
		Driver_Unknown = 201,
		[Token(Token = "0x40016FC")]
		Driver_HmdUnknown = 202,
		[Token(Token = "0x40016FD")]
		Driver_NotLoaded = 203,
		[Token(Token = "0x40016FE")]
		Driver_RuntimeOutOfDate = 204,
		[Token(Token = "0x40016FF")]
		Driver_HmdInUse = 205,
		[Token(Token = "0x4001700")]
		Driver_NotCalibrated = 206,
		[Token(Token = "0x4001701")]
		Driver_CalibrationInvalid = 207,
		[Token(Token = "0x4001702")]
		Driver_HmdDisplayNotFound = 208,
		[Token(Token = "0x4001703")]
		Driver_TrackedDeviceInterfaceUnknown = 209,
		[Token(Token = "0x4001704")]
		Driver_HmdDriverIdOutOfBounds = 211,
		[Token(Token = "0x4001705")]
		Driver_HmdDisplayMirrored = 212,
		[Token(Token = "0x4001706")]
		IPC_ServerInitFailed = 300,
		[Token(Token = "0x4001707")]
		IPC_ConnectFailed = 301,
		[Token(Token = "0x4001708")]
		IPC_SharedStateInitFailed = 302,
		[Token(Token = "0x4001709")]
		IPC_CompositorInitFailed = 303,
		[Token(Token = "0x400170A")]
		IPC_MutexInitFailed = 304,
		[Token(Token = "0x400170B")]
		IPC_Failed = 305,
		[Token(Token = "0x400170C")]
		IPC_CompositorConnectFailed = 306,
		[Token(Token = "0x400170D")]
		IPC_CompositorInvalidConnectResponse = 307,
		[Token(Token = "0x400170E")]
		IPC_ConnectFailedAfterMultipleAttempts = 308,
		[Token(Token = "0x400170F")]
		Compositor_Failed = 400,
		[Token(Token = "0x4001710")]
		Compositor_D3D11HardwareRequired = 401,
		[Token(Token = "0x4001711")]
		Compositor_FirmwareRequiresUpdate = 402,
		[Token(Token = "0x4001712")]
		Compositor_OverlayInitFailed = 403,
		[Token(Token = "0x4001713")]
		Compositor_ScreenshotsInitFailed = 404,
		[Token(Token = "0x4001714")]
		Compositor_UnableToCreateDevice = 405,
		[Token(Token = "0x4001715")]
		VendorSpecific_UnableToConnectToOculusRuntime = 1000,
		[Token(Token = "0x4001716")]
		VendorSpecific_HmdFound_CantOpenDevice = 1101,
		[Token(Token = "0x4001717")]
		VendorSpecific_HmdFound_UnableToRequestConfigStart = 1102,
		[Token(Token = "0x4001718")]
		VendorSpecific_HmdFound_NoStoredConfig = 1103,
		[Token(Token = "0x4001719")]
		VendorSpecific_HmdFound_ConfigTooBig = 1104,
		[Token(Token = "0x400171A")]
		VendorSpecific_HmdFound_ConfigTooSmall = 1105,
		[Token(Token = "0x400171B")]
		VendorSpecific_HmdFound_UnableToInitZLib = 1106,
		[Token(Token = "0x400171C")]
		VendorSpecific_HmdFound_CantReadFirmwareVersion = 1107,
		[Token(Token = "0x400171D")]
		VendorSpecific_HmdFound_UnableToSendUserDataStart = 1108,
		[Token(Token = "0x400171E")]
		VendorSpecific_HmdFound_UnableToGetUserDataStart = 1109,
		[Token(Token = "0x400171F")]
		VendorSpecific_HmdFound_UnableToGetUserDataNext = 1110,
		[Token(Token = "0x4001720")]
		VendorSpecific_HmdFound_UserDataAddressRange = 1111,
		[Token(Token = "0x4001721")]
		VendorSpecific_HmdFound_UserDataError = 1112,
		[Token(Token = "0x4001722")]
		VendorSpecific_HmdFound_ConfigFailedSanityCheck = 1113,
		[Token(Token = "0x4001723")]
		Steam_SteamInstallationNotFound = 2000
	}
	[Token(Token = "0x200031C")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x4001725")]
		None,
		[Token(Token = "0x4001726")]
		Mono,
		[Token(Token = "0x4001727")]
		Stereo,
		[Token(Token = "0x4001728")]
		Cubemap,
		[Token(Token = "0x4001729")]
		MonoPanorama,
		[Token(Token = "0x400172A")]
		StereoPanorama
	}
	[Token(Token = "0x200031D")]
	public enum EVRScreenshotPropertyFilenames
	{
		[Token(Token = "0x400172C")]
		Preview,
		[Token(Token = "0x400172D")]
		VR
	}
	[Token(Token = "0x200031E")]
	public enum EVRTrackedCameraError
	{
		[Token(Token = "0x400172F")]
		None = 0,
		[Token(Token = "0x4001730")]
		OperationFailed = 100,
		[Token(Token = "0x4001731")]
		InvalidHandle = 101,
		[Token(Token = "0x4001732")]
		InvalidFrameHeaderVersion = 102,
		[Token(Token = "0x4001733")]
		OutOfHandles = 103,
		[Token(Token = "0x4001734")]
		IPCFailure = 104,
		[Token(Token = "0x4001735")]
		NotSupportedForThisDevice = 105,
		[Token(Token = "0x4001736")]
		SharedMemoryFailure = 106,
		[Token(Token = "0x4001737")]
		FrameBufferingFailure = 107,
		[Token(Token = "0x4001738")]
		StreamSetupFailure = 108,
		[Token(Token = "0x4001739")]
		InvalidGLTextureId = 109,
		[Token(Token = "0x400173A")]
		InvalidSharedTextureHandle = 110,
		[Token(Token = "0x400173B")]
		FailedToGetGLTextureId = 111,
		[Token(Token = "0x400173C")]
		SharedTextureFailure = 112,
		[Token(Token = "0x400173D")]
		NoFrameAvailable = 113,
		[Token(Token = "0x400173E")]
		InvalidArgument = 114,
		[Token(Token = "0x400173F")]
		InvalidFrameBufferSize = 115
	}
	[Token(Token = "0x200031F")]
	public enum EVRTrackedCameraFrameType
	{
		[Token(Token = "0x4001741")]
		Distorted,
		[Token(Token = "0x4001742")]
		Undistorted,
		[Token(Token = "0x4001743")]
		MaximumUndistorted,
		[Token(Token = "0x4001744")]
		MAX_CAMERA_FRAME_TYPES
	}
	[Token(Token = "0x2000320")]
	public enum EVRApplicationError
	{
		[Token(Token = "0x4001746")]
		None = 0,
		[Token(Token = "0x4001747")]
		AppKeyAlreadyExists = 100,
		[Token(Token = "0x4001748")]
		NoManifest = 101,
		[Token(Token = "0x4001749")]
		NoApplication = 102,
		[Token(Token = "0x400174A")]
		InvalidIndex = 103,
		[Token(Token = "0x400174B")]
		UnknownApplication = 104,
		[Token(Token = "0x400174C")]
		IPCFailed = 105,
		[Token(Token = "0x400174D")]
		ApplicationAlreadyRunning = 106,
		[Token(Token = "0x400174E")]
		InvalidManifest = 107,
		[Token(Token = "0x400174F")]
		InvalidApplication = 108,
		[Token(Token = "0x4001750")]
		LaunchFailed = 109,
		[Token(Token = "0x4001751")]
		ApplicationAlreadyStarting = 110,
		[Token(Token = "0x4001752")]
		LaunchInProgress = 111,
		[Token(Token = "0x4001753")]
		OldApplicationQuitting = 112,
		[Token(Token = "0x4001754")]
		TransitionAborted = 113,
		[Token(Token = "0x4001755")]
		IsTemplate = 114,
		[Token(Token = "0x4001756")]
		BufferTooSmall = 200,
		[Token(Token = "0x4001757")]
		PropertyNotSet = 201,
		[Token(Token = "0x4001758")]
		UnknownProperty = 202,
		[Token(Token = "0x4001759")]
		InvalidParameter = 203
	}
	[Token(Token = "0x2000321")]
	public enum EVRApplicationProperty
	{
		[Token(Token = "0x400175B")]
		Name_String = 0,
		[Token(Token = "0x400175C")]
		LaunchType_String = 11,
		[Token(Token = "0x400175D")]
		WorkingDirectory_String = 12,
		[Token(Token = "0x400175E")]
		BinaryPath_String = 13,
		[Token(Token = "0x400175F")]
		Arguments_String = 14,
		[Token(Token = "0x4001760")]
		URL_String = 15,
		[Token(Token = "0x4001761")]
		Description_String = 50,
		[Token(Token = "0x4001762")]
		NewsURL_String = 51,
		[Token(Token = "0x4001763")]
		ImagePath_String = 52,
		[Token(Token = "0x4001764")]
		Source_String = 53,
		[Token(Token = "0x4001765")]
		IsDashboardOverlay_Bool = 60,
		[Token(Token = "0x4001766")]
		IsTemplate_Bool = 61,
		[Token(Token = "0x4001767")]
		IsInstanced_Bool = 62,
		[Token(Token = "0x4001768")]
		IsInternal_Bool = 63,
		[Token(Token = "0x4001769")]
		LastLaunchTime_Uint64 = 70
	}
	[Token(Token = "0x2000322")]
	public enum EVRApplicationTransitionState
	{
		[Token(Token = "0x400176B")]
		VRApplicationTransition_None = 0,
		[Token(Token = "0x400176C")]
		VRApplicationTransition_OldAppQuitSent = 10,
		[Token(Token = "0x400176D")]
		VRApplicationTransition_WaitingForExternalLaunch = 11,
		[Token(Token = "0x400176E")]
		VRApplicationTransition_NewAppLaunched = 20
	}
	[Token(Token = "0x2000323")]
	public enum ChaperoneCalibrationState
	{
		[Token(Token = "0x4001770")]
		OK = 1,
		[Token(Token = "0x4001771")]
		Warning = 100,
		[Token(Token = "0x4001772")]
		Warning_BaseStationMayHaveMoved = 101,
		[Token(Token = "0x4001773")]
		Warning_BaseStationRemoved = 102,
		[Token(Token = "0x4001774")]
		Warning_SeatedBoundsInvalid = 103,
		[Token(Token = "0x4001775")]
		Error = 200,
		[Token(Token = "0x4001776")]
		Error_BaseStationUninitialized = 201,
		[Token(Token = "0x4001777")]
		Error_BaseStationConflict = 202,
		[Token(Token = "0x4001778")]
		Error_PlayAreaInvalid = 203,
		[Token(Token = "0x4001779")]
		Error_CollisionBoundsInvalid = 204
	}
	[Token(Token = "0x2000324")]
	public enum EChaperoneConfigFile
	{
		[Token(Token = "0x400177B")]
		Live = 1,
		[Token(Token = "0x400177C")]
		Temp
	}
	[Token(Token = "0x2000325")]
	public enum EChaperoneImportFlags
	{
		[Token(Token = "0x400177E")]
		EChaperoneImport_BoundsOnly = 1
	}
	[Token(Token = "0x2000326")]
	public enum EVRCompositorError
	{
		[Token(Token = "0x4001780")]
		None = 0,
		[Token(Token = "0x4001781")]
		RequestFailed = 1,
		[Token(Token = "0x4001782")]
		IncompatibleVersion = 100,
		[Token(Token = "0x4001783")]
		DoNotHaveFocus = 101,
		[Token(Token = "0x4001784")]
		InvalidTexture = 102,
		[Token(Token = "0x4001785")]
		IsNotSceneApplication = 103,
		[Token(Token = "0x4001786")]
		TextureIsOnWrongDevice = 104,
		[Token(Token = "0x4001787")]
		TextureUsesUnsupportedFormat = 105,
		[Token(Token = "0x4001788")]
		SharedTexturesNotSupported = 106,
		[Token(Token = "0x4001789")]
		IndexOutOfRange = 107,
		[Token(Token = "0x400178A")]
		AlreadySubmitted = 108,
		[Token(Token = "0x400178B")]
		InvalidBounds = 109
	}
	[Token(Token = "0x2000327")]
	public enum VROverlayInputMethod
	{
		[Token(Token = "0x400178D")]
		None,
		[Token(Token = "0x400178E")]
		Mouse
	}
	[Token(Token = "0x2000328")]
	public enum VROverlayTransformType
	{
		[Token(Token = "0x4001790")]
		VROverlayTransform_Absolute,
		[Token(Token = "0x4001791")]
		VROverlayTransform_TrackedDeviceRelative,
		[Token(Token = "0x4001792")]
		VROverlayTransform_SystemOverlay,
		[Token(Token = "0x4001793")]
		VROverlayTransform_TrackedComponent
	}
	[Token(Token = "0x2000329")]
	public enum VROverlayFlags
	{
		[Token(Token = "0x4001795")]
		None,
		[Token(Token = "0x4001796")]
		Curved,
		[Token(Token = "0x4001797")]
		RGSS4X,
		[Token(Token = "0x4001798")]
		NoDashboardTab,
		[Token(Token = "0x4001799")]
		AcceptsGamepadEvents,
		[Token(Token = "0x400179A")]
		ShowGamepadFocus,
		[Token(Token = "0x400179B")]
		SendVRScrollEvents,
		[Token(Token = "0x400179C")]
		SendVRTouchpadEvents,
		[Token(Token = "0x400179D")]
		ShowTouchPadScrollWheel,
		[Token(Token = "0x400179E")]
		TransferOwnershipToInternalProcess,
		[Token(Token = "0x400179F")]
		SideBySide_Parallel,
		[Token(Token = "0x40017A0")]
		SideBySide_Crossed,
		[Token(Token = "0x40017A1")]
		Panorama,
		[Token(Token = "0x40017A2")]
		StereoPanorama,
		[Token(Token = "0x40017A3")]
		SortWithNonSceneOverlays,
		[Token(Token = "0x40017A4")]
		VisibleInDashboard
	}
	[Token(Token = "0x200032A")]
	public enum VRMessageOverlayResponse
	{
		[Token(Token = "0x40017A6")]
		ButtonPress_0,
		[Token(Token = "0x40017A7")]
		ButtonPress_1,
		[Token(Token = "0x40017A8")]
		ButtonPress_2,
		[Token(Token = "0x40017A9")]
		ButtonPress_3,
		[Token(Token = "0x40017AA")]
		CouldntFindSystemOverlay,
		[Token(Token = "0x40017AB")]
		CouldntFindOrCreateClientOverlay,
		[Token(Token = "0x40017AC")]
		ApplicationQuit
	}
	[Token(Token = "0x200032B")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x40017AE")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x40017AF")]
		k_EGamepadTextInputModePassword,
		[Token(Token = "0x40017B0")]
		k_EGamepadTextInputModeSubmit
	}
	[Token(Token = "0x200032C")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x40017B2")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x40017B3")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x200032D")]
	public enum EOverlayDirection
	{
		[Token(Token = "0x40017B5")]
		Up,
		[Token(Token = "0x40017B6")]
		Down,
		[Token(Token = "0x40017B7")]
		Left,
		[Token(Token = "0x40017B8")]
		Right,
		[Token(Token = "0x40017B9")]
		Count
	}
	[Token(Token = "0x200032E")]
	public enum EVROverlayIntersectionMaskPrimitiveType
	{
		[Token(Token = "0x40017BB")]
		OverlayIntersectionPrimitiveType_Rectangle,
		[Token(Token = "0x40017BC")]
		OverlayIntersectionPrimitiveType_Circle
	}
	[Token(Token = "0x200032F")]
	public enum EVRRenderModelError
	{
		[Token(Token = "0x40017BE")]
		None = 0,
		[Token(Token = "0x40017BF")]
		Loading = 100,
		[Token(Token = "0x40017C0")]
		NotSupported = 200,
		[Token(Token = "0x40017C1")]
		InvalidArg = 300,
		[Token(Token = "0x40017C2")]
		InvalidModel = 301,
		[Token(Token = "0x40017C3")]
		NoShapes = 302,
		[Token(Token = "0x40017C4")]
		MultipleShapes = 303,
		[Token(Token = "0x40017C5")]
		TooManyVertices = 304,
		[Token(Token = "0x40017C6")]
		MultipleTextures = 305,
		[Token(Token = "0x40017C7")]
		BufferTooSmall = 306,
		[Token(Token = "0x40017C8")]
		NotEnoughNormals = 307,
		[Token(Token = "0x40017C9")]
		NotEnoughTexCoords = 308,
		[Token(Token = "0x40017CA")]
		InvalidTexture = 400
	}
	[Token(Token = "0x2000330")]
	public enum EVRComponentProperty
	{
		[Token(Token = "0x40017CC")]
		IsStatic = 1,
		[Token(Token = "0x40017CD")]
		IsVisible = 2,
		[Token(Token = "0x40017CE")]
		IsTouched = 4,
		[Token(Token = "0x40017CF")]
		IsPressed = 8,
		[Token(Token = "0x40017D0")]
		IsScrolled = 0x10
	}
	[Token(Token = "0x2000331")]
	public enum EVRNotificationType
	{
		[Token(Token = "0x40017D2")]
		Transient,
		[Token(Token = "0x40017D3")]
		Persistent,
		[Token(Token = "0x40017D4")]
		Transient_SystemWithUserValue
	}
	[Token(Token = "0x2000332")]
	public enum EVRNotificationStyle
	{
		[Token(Token = "0x40017D6")]
		None = 0,
		[Token(Token = "0x40017D7")]
		Application = 100,
		[Token(Token = "0x40017D8")]
		Contact_Disabled = 200,
		[Token(Token = "0x40017D9")]
		Contact_Enabled = 201,
		[Token(Token = "0x40017DA")]
		Contact_Active = 202
	}
	[Token(Token = "0x2000333")]
	public enum EVRSettingsError
	{
		[Token(Token = "0x40017DC")]
		None,
		[Token(Token = "0x40017DD")]
		IPCFailed,
		[Token(Token = "0x40017DE")]
		WriteFailed,
		[Token(Token = "0x40017DF")]
		ReadFailed,
		[Token(Token = "0x40017E0")]
		JsonParseFailed,
		[Token(Token = "0x40017E1")]
		UnsetSettingHasNoDefault
	}
	[Token(Token = "0x2000334")]
	public enum EVRScreenshotError
	{
		[Token(Token = "0x40017E3")]
		None = 0,
		[Token(Token = "0x40017E4")]
		RequestFailed = 1,
		[Token(Token = "0x40017E5")]
		IncompatibleVersion = 100,
		[Token(Token = "0x40017E6")]
		NotFound = 101,
		[Token(Token = "0x40017E7")]
		BufferTooSmall = 102,
		[Token(Token = "0x40017E8")]
		ScreenshotAlreadyInProgress = 108
	}
	[StructLayout(2)]
	[Token(Token = "0x2000335")]
	public struct VREvent_Data_t
	{
		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Reserved_t reserved;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Controller_t controller;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Mouse_t mouse;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Scroll_t scroll;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Process_t process;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Notification_t notification;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Overlay_t overlay;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Status_t status;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Ipd_t ipd;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Chaperone_t chaperone;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_PerformanceTest_t performanceTest;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_TouchPadMove_t touchPadMove;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Screenshot_t screenshot;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ScreenshotProgress_t screenshotProgress;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ApplicationLaunch_t applicationLaunch;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_EditingCameraSurface_t cameraSurface;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_MessageOverlay_t messageOverlay;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Keyboard_t keyboard;
	}
	[StructLayout(2)]
	[Token(Token = "0x2000336")]
	public struct VROverlayIntersectionMaskPrimitive_Data_t
	{
		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskRectangle_t m_Rectangle;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskCircle_t m_Circle;
	}
	[Token(Token = "0x2000337")]
	public struct HmdMatrix34_t
	{
		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;
	}
	[Token(Token = "0x2000338")]
	public struct HmdMatrix44_t
	{
		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m12;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m13;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m14;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m15;
	}
	[Token(Token = "0x2000339")]
	public struct HmdVector3_t
	{
		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;
	}
	[Token(Token = "0x200033A")]
	public struct HmdVector4_t
	{
		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float v3;
	}
	[Token(Token = "0x200033B")]
	public struct HmdVector3d_t
	{
		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double v0;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double v1;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double v2;
	}
	[Token(Token = "0x200033C")]
	public struct HmdVector2_t
	{
		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;
	}
	[Token(Token = "0x200033D")]
	public struct HmdQuaternion_t
	{
		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double w;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double x;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double y;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double z;
	}
	[Token(Token = "0x200033E")]
	public struct HmdColor_t
	{
		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float r;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float g;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;
	}
	[Token(Token = "0x200033F")]
	public struct HmdQuad_t
	{
		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vCorners0;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vCorners1;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector3_t vCorners2;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HmdVector3_t vCorners3;
	}
	[Token(Token = "0x2000340")]
	public struct HmdRect2_t
	{
		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector2_t vTopLeft;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdVector2_t vBottomRight;
	}
	[Token(Token = "0x2000341")]
	public struct DistortionCoordinates_t
	{
		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rfRed0;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rfRed1;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rfGreen0;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rfGreen1;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float rfBlue0;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rfBlue1;
	}
	[Token(Token = "0x2000342")]
	public struct Texture_t
	{
		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETextureType eType;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EColorSpace eColorSpace;
	}
	[Token(Token = "0x2000343")]
	public struct TrackedDevicePose_t
	{
		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdVector3_t vVelocity;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public HmdVector3_t vAngularVelocity;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ETrackingResult eTrackingResult;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bPoseIsValid;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool bDeviceIsConnected;
	}
	[Token(Token = "0x2000344")]
	public struct VRTextureBounds_t
	{
		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float uMin;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float vMin;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float uMax;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float vMax;
	}
	[Token(Token = "0x2000345")]
	public struct VRVulkanTextureData_t
	{
		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nImage;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pDevice;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pPhysicalDevice;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pInstance;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pQueue;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nQueueFamilyIndex;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nWidth;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nHeight;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nFormat;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nSampleCount;
	}
	[Token(Token = "0x2000346")]
	public struct D3D12TextureData_t
	{
		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pResource;

		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pCommandQueue;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNodeMask;
	}
	[Token(Token = "0x2000347")]
	public struct VREvent_Controller_t
	{
		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint button;
	}
	[Token(Token = "0x2000348")]
	public struct VREvent_Mouse_t
	{
		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint button;
	}
	[Token(Token = "0x2000349")]
	public struct VREvent_Scroll_t
	{
		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float xdelta;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float ydelta;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint repeatCount;
	}
	[Token(Token = "0x200034A")]
	public struct VREvent_TouchPadMove_t
	{
		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bFingerDown;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float flSecondsFingerDown;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fValueXFirst;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fValueYFirst;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fValueXRaw;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fValueYRaw;
	}
	[Token(Token = "0x200034B")]
	public struct VREvent_Notification_t
	{
		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulUserValue;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint notificationId;
	}
	[Token(Token = "0x200034C")]
	public struct VREvent_Process_t
	{
		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint oldPid;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool bForced;
	}
	[Token(Token = "0x200034D")]
	public struct VREvent_Overlay_t
	{
		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;
	}
	[Token(Token = "0x200034E")]
	public struct VREvent_Status_t
	{
		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint statusState;
	}
	[Token(Token = "0x200034F")]
	public struct VREvent_Keyboard_t
	{
		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte cNewInput0;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte cNewInput1;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte cNewInput2;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte cNewInput3;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte cNewInput4;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public byte cNewInput5;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public byte cNewInput6;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public byte cNewInput7;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong uUserValue;
	}
	[Token(Token = "0x2000350")]
	public struct VREvent_Ipd_t
	{
		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float ipdMeters;
	}
	[Token(Token = "0x2000351")]
	public struct VREvent_Chaperone_t
	{
		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nPreviousUniverse;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_nCurrentUniverse;
	}
	[Token(Token = "0x2000352")]
	public struct VREvent_Reserved_t
	{
		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong reserved0;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong reserved1;
	}
	[Token(Token = "0x2000353")]
	public struct VREvent_PerformanceTest_t
	{
		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nFidelityLevel;
	}
	[Token(Token = "0x2000354")]
	public struct VREvent_SeatedZeroPoseReset_t
	{
		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bResetBySystemMenu;
	}
	[Token(Token = "0x2000355")]
	public struct VREvent_Screenshot_t
	{
		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint handle;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint type;
	}
	[Token(Token = "0x2000356")]
	public struct VREvent_ScreenshotProgress_t
	{
		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float progress;
	}
	[Token(Token = "0x2000357")]
	public struct VREvent_ApplicationLaunch_t
	{
		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unArgsHandle;
	}
	[Token(Token = "0x2000358")]
	public struct VREvent_EditingCameraSurface_t
	{
		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nVisualMode;
	}
	[Token(Token = "0x2000359")]
	public struct VREvent_MessageOverlay_t
	{
		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unVRMessageOverlayResponse;
	}
	[Token(Token = "0x200035A")]
	public struct VREvent_Property_t
	{
		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong container;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETrackedDeviceProperty prop;
	}
	[Token(Token = "0x200035B")]
	public struct VREvent_t
	{
		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VREvent_Data_t data;
	}
	[Token(Token = "0x200035C")]
	public struct VREvent_t_Packed
	{
		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VREvent_Data_t data;

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x63C2D8", Offset = "0x63C2D8", VA = "0x63C2D8")]
		public VREvent_t_Packed(VREvent_t unpacked)
		{
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x63C324", Offset = "0x63C324", VA = "0x63C324")]
		public void Unpack(ref VREvent_t unpacked)
		{
		}
	}
	[Token(Token = "0x200035D")]
	public struct HiddenAreaMesh_t
	{
		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pVertexData;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unTriangleCount;
	}
	[Token(Token = "0x200035E")]
	public struct VRControllerAxis_t
	{
		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}
	[Token(Token = "0x200035F")]
	public struct VRControllerState_t
	{
		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong ulButtonPressed;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong ulButtonTouched;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VRControllerAxis_t rAxis4;
	}
	[Token(Token = "0x2000360")]
	public struct VRControllerState_t_Packed
	{
		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtonPressed;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong ulButtonTouched;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public VRControllerAxis_t rAxis4;

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x63C290", Offset = "0x63C290", VA = "0x63C290")]
		public VRControllerState_t_Packed(VRControllerState_t unpacked)
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x63C2D0", Offset = "0x63C2D0", VA = "0x63C2D0")]
		public void Unpack(ref VRControllerState_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000361")]
	public struct Compositor_OverlaySettings
	{
		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool curved;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool antialias;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float scale;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float distance;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float alpha;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float uOffset;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float vOffset;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float uScale;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float vScale;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float gridDivs;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float gridWidth;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float gridScale;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix44_t transform;
	}
	[Token(Token = "0x2000362")]
	public struct CameraVideoStreamFrameHeader_t
	{
		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVRTrackedCameraFrameType eFrameType;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint nWidth;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nHeight;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint nBytesPerPixel;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint nFrameSequence;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TrackedDevicePose_t standingTrackedDevicePose;
	}
	[Token(Token = "0x2000363")]
	public struct AppOverrideKeys_t
	{
		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pchKey;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pchValue;
	}
	[Token(Token = "0x2000364")]
	public struct Compositor_FrameTiming
	{
		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nFrameIndex;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumMisPresented;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nReprojectionFlags;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double m_flSystemTimeInSeconds;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_flPreSubmitGpuMs;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_flPostSubmitGpuMs;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_flTotalRenderGpuMs;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_flCompositorRenderGpuMs;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_flCompositorRenderCpuMs;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m_flCompositorIdleCpuMs;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_flClientFrameIntervalMs;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m_flPresentCallCpuMs;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float m_flWaitForPresentCpuMs;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float m_flSubmitFrameMs;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float m_flWaitGetPosesCalledMs;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float m_flNewPosesReadyMs;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float m_flNewFrameReadyMs;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float m_flCompositorUpdateStartMs;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float m_flCompositorUpdateEndMs;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float m_flCompositorRenderStartMs;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TrackedDevicePose_t m_HmdPose;
	}
	[Token(Token = "0x2000365")]
	public struct Compositor_CumulativeStats
	{
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nPid;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumReprojectedFrames;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumFramePresentsOnStartup;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nNumDroppedFramesOnStartup;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nNumReprojectedFramesOnStartup;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nNumLoading;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_nNumFramePresentsLoading;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nNumDroppedFramesLoading;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nNumReprojectedFramesLoading;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nNumTimedOut;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nNumFramePresentsTimedOut;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nNumDroppedFramesTimedOut;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nNumReprojectedFramesTimedOut;
	}
	[Token(Token = "0x2000366")]
	public struct VROverlayIntersectionParams_t
	{
		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vSource;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vDirection;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ETrackingUniverseOrigin eOrigin;
	}
	[Token(Token = "0x2000367")]
	public struct VROverlayIntersectionResults_t
	{
		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPoint;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector2_t vUVs;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fDistance;
	}
	[Token(Token = "0x2000368")]
	public struct IntersectionMaskRectangle_t
	{
		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flTopLeftX;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flTopLeftY;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flWidth;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m_flHeight;
	}
	[Token(Token = "0x2000369")]
	public struct IntersectionMaskCircle_t
	{
		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flCenterX;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flCenterY;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flRadius;
	}
	[Token(Token = "0x200036A")]
	public struct VROverlayIntersectionMaskPrimitive_t
	{
		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVROverlayIntersectionMaskPrimitiveType m_nPrimitiveType;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public VROverlayIntersectionMaskPrimitive_Data_t m_Primitive;
	}
	[Token(Token = "0x200036B")]
	public struct RenderModel_ComponentState_t
	{
		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mTrackingToComponentRenderModel;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix34_t mTrackingToComponentLocal;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public uint uProperties;
	}
	[Token(Token = "0x200036C")]
	public struct RenderModel_Vertex_t
	{
		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPosition;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rfTextureCoord0;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rfTextureCoord1;
	}
	[Token(Token = "0x200036D")]
	public struct RenderModel_TextureMap_t
	{
		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public char unWidth;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public char unHeight;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rubTextureMapData;
	}
	[Token(Token = "0x200036E")]
	public struct RenderModel_TextureMap_t_Packed
	{
		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public char unWidth;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public char unHeight;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rubTextureMapData;

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0x63C210", Offset = "0x63C210", VA = "0x63C210")]
		public RenderModel_TextureMap_t_Packed(RenderModel_TextureMap_t unpacked)
		{
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0x63C224", Offset = "0x63C224", VA = "0x63C224")]
		public void Unpack(ref RenderModel_TextureMap_t unpacked)
		{
		}
	}
	[Token(Token = "0x200036F")]
	public struct RenderModel_t
	{
		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr rIndexData;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unTriangleCount;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int diffuseTextureId;
	}
	[Token(Token = "0x2000370")]
	public struct RenderModel_t_Packed
	{
		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr rIndexData;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTriangleCount;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int diffuseTextureId;

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0x63C240", Offset = "0x63C240", VA = "0x63C240")]
		public RenderModel_t_Packed(RenderModel_t unpacked)
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0x63C264", Offset = "0x63C264", VA = "0x63C264")]
		public void Unpack(ref RenderModel_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000371")]
	public struct RenderModel_ControllerMode_State_t
	{
		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bScrollWheelVisible;
	}
	[Token(Token = "0x2000372")]
	public struct NotificationBitmap_t
	{
		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pImageData;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nWidth;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nHeight;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nBytesPerPixel;
	}
	[Token(Token = "0x2000373")]
	public struct COpenVRContext
	{
		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pVRSystem;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pVRChaperone;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pVRChaperoneSetup;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pVRCompositor;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pVROverlay;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr m_pVRResources;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr m_pVRRenderModels;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr m_pVRExtendedDisplay;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IntPtr m_pVRSettings;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IntPtr m_pVRApplications;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IntPtr m_pVRTrackedCamera;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntPtr m_pVRScreenshots;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IntPtr m_pVRDriverManager;
	}
	[Token(Token = "0x2000374")]
	public class OpenVR
	{
		[Token(Token = "0x2000618")]
		private class COpenVRContext
		{
			[Token(Token = "0x4002160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private CVRSystem m_pVRSystem;

			[Token(Token = "0x4002161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private CVRChaperone m_pVRChaperone;

			[Token(Token = "0x4002162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CVRChaperoneSetup m_pVRChaperoneSetup;

			[Token(Token = "0x4002163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRCompositor m_pVRCompositor;

			[Token(Token = "0x4002164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CVROverlay m_pVROverlay;

			[Token(Token = "0x4002165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRRenderModels m_pVRRenderModels;

			[Token(Token = "0x4002166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private CVRExtendedDisplay m_pVRExtendedDisplay;

			[Token(Token = "0x4002167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private CVRSettings m_pVRSettings;

			[Token(Token = "0x4002168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private CVRApplications m_pVRApplications;

			[Token(Token = "0x4002169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private CVRScreenshots m_pVRScreenshots;

			[Token(Token = "0x400216A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private CVRTrackedCamera m_pVRTrackedCamera;

			[Token(Token = "0x600292F")]
			[Address(RVA = "0x830A08", Offset = "0x830A08", VA = "0x830A08")]
			public COpenVRContext()
			{
			}

			[Token(Token = "0x6002930")]
			[Address(RVA = "0x8317EC", Offset = "0x8317EC", VA = "0x8317EC")]
			public void Clear()
			{
			}

			[Token(Token = "0x6002931")]
			[Address(RVA = "0x831874", Offset = "0x831874", VA = "0x831874")]
			private void CheckClear()
			{
			}

			[Token(Token = "0x6002932")]
			[Address(RVA = "0x830AA0", Offset = "0x830AA0", VA = "0x830AA0")]
			public CVRSystem VRSystem()
			{
				return null;
			}

			[Token(Token = "0x6002933")]
			[Address(RVA = "0x830BC8", Offset = "0x830BC8", VA = "0x830BC8")]
			public CVRChaperone VRChaperone()
			{
				return null;
			}

			[Token(Token = "0x6002934")]
			[Address(RVA = "0x830CF0", Offset = "0x830CF0", VA = "0x830CF0")]
			public CVRChaperoneSetup VRChaperoneSetup()
			{
				return null;
			}

			[Token(Token = "0x6002935")]
			[Address(RVA = "0x830E18", Offset = "0x830E18", VA = "0x830E18")]
			public CVRCompositor VRCompositor()
			{
				return null;
			}

			[Token(Token = "0x6002936")]
			[Address(RVA = "0x830F40", Offset = "0x830F40", VA = "0x830F40")]
			public CVROverlay VROverlay()
			{
				return null;
			}

			[Token(Token = "0x6002937")]
			[Address(RVA = "0x831000", Offset = "0x831000", VA = "0x831000")]
			public CVRRenderModels VRRenderModels()
			{
				return null;
			}

			[Token(Token = "0x6002938")]
			[Address(RVA = "0x831128", Offset = "0x831128", VA = "0x831128")]
			public CVRExtendedDisplay VRExtendedDisplay()
			{
				return null;
			}

			[Token(Token = "0x6002939")]
			[Address(RVA = "0x831250", Offset = "0x831250", VA = "0x831250")]
			public CVRSettings VRSettings()
			{
				return null;
			}

			[Token(Token = "0x600293A")]
			[Address(RVA = "0x831378", Offset = "0x831378", VA = "0x831378")]
			public CVRApplications VRApplications()
			{
				return null;
			}

			[Token(Token = "0x600293B")]
			[Address(RVA = "0x8314A0", Offset = "0x8314A0", VA = "0x8314A0")]
			public CVRScreenshots VRScreenshots()
			{
				return null;
			}

			[Token(Token = "0x600293C")]
			[Address(RVA = "0x8315C8", Offset = "0x8315C8", VA = "0x8315C8")]
			public CVRTrackedCamera VRTrackedCamera()
			{
				return null;
			}
		}

		[Token(Token = "0x4001914")]
		public const uint k_nDriverNone = uint.MaxValue;

		[Token(Token = "0x4001915")]
		public const uint k_unMaxDriverDebugResponseSize = 32768u;

		[Token(Token = "0x4001916")]
		public const uint k_unTrackedDeviceIndex_Hmd = 0u;

		[Token(Token = "0x4001917")]
		public const uint k_unMaxTrackedDeviceCount = 16u;

		[Token(Token = "0x4001918")]
		public const uint k_unTrackedDeviceIndexOther = 4294967294u;

		[Token(Token = "0x4001919")]
		public const uint k_unTrackedDeviceIndexInvalid = uint.MaxValue;

		[Token(Token = "0x400191A")]
		public const ulong k_ulInvalidPropertyContainer = 0uL;

		[Token(Token = "0x400191B")]
		public const uint k_unInvalidPropertyTag = 0u;

		[Token(Token = "0x400191C")]
		public const uint k_unFloatPropertyTag = 1u;

		[Token(Token = "0x400191D")]
		public const uint k_unInt32PropertyTag = 2u;

		[Token(Token = "0x400191E")]
		public const uint k_unUint64PropertyTag = 3u;

		[Token(Token = "0x400191F")]
		public const uint k_unBoolPropertyTag = 4u;

		[Token(Token = "0x4001920")]
		public const uint k_unStringPropertyTag = 5u;

		[Token(Token = "0x4001921")]
		public const uint k_unHmdMatrix34PropertyTag = 20u;

		[Token(Token = "0x4001922")]
		public const uint k_unHmdMatrix44PropertyTag = 21u;

		[Token(Token = "0x4001923")]
		public const uint k_unHmdVector3PropertyTag = 22u;

		[Token(Token = "0x4001924")]
		public const uint k_unHmdVector4PropertyTag = 23u;

		[Token(Token = "0x4001925")]
		public const uint k_unHiddenAreaPropertyTag = 30u;

		[Token(Token = "0x4001926")]
		public const uint k_unOpenVRInternalReserved_Start = 1000u;

		[Token(Token = "0x4001927")]
		public const uint k_unOpenVRInternalReserved_End = 10000u;

		[Token(Token = "0x4001928")]
		public const uint k_unMaxPropertyStringSize = 32768u;

		[Token(Token = "0x4001929")]
		public const uint k_unControllerStateAxisCount = 5u;

		[Token(Token = "0x400192A")]
		public const ulong k_ulOverlayHandleInvalid = 0uL;

		[Token(Token = "0x400192B")]
		public const uint k_unScreenshotHandleInvalid = 0u;

		[Token(Token = "0x400192C")]
		public const string IVRSystem_Version = "IVRSystem_016";

		[Token(Token = "0x400192D")]
		public const string IVRExtendedDisplay_Version = "IVRExtendedDisplay_001";

		[Token(Token = "0x400192E")]
		public const string IVRTrackedCamera_Version = "IVRTrackedCamera_003";

		[Token(Token = "0x400192F")]
		public const uint k_unMaxApplicationKeyLength = 128u;

		[Token(Token = "0x4001930")]
		public const string k_pch_MimeType_HomeApp = "vr/home";

		[Token(Token = "0x4001931")]
		public const string k_pch_MimeType_GameTheater = "vr/game_theater";

		[Token(Token = "0x4001932")]
		public const string IVRApplications_Version = "IVRApplications_006";

		[Token(Token = "0x4001933")]
		public const string IVRChaperone_Version = "IVRChaperone_003";

		[Token(Token = "0x4001934")]
		public const string IVRChaperoneSetup_Version = "IVRChaperoneSetup_005";

		[Token(Token = "0x4001935")]
		public const string IVRCompositor_Version = "IVRCompositor_020";

		[Token(Token = "0x4001936")]
		public const uint k_unVROverlayMaxKeyLength = 128u;

		[Token(Token = "0x4001937")]
		public const uint k_unVROverlayMaxNameLength = 128u;

		[Token(Token = "0x4001938")]
		public const uint k_unMaxOverlayCount = 64u;

		[Token(Token = "0x4001939")]
		public const uint k_unMaxOverlayIntersectionMaskPrimitivesCount = 32u;

		[Token(Token = "0x400193A")]
		public const string IVROverlay_Version = "IVROverlay_016";

		[Token(Token = "0x400193B")]
		public const string k_pch_Controller_Component_GDC2015 = "gdc2015";

		[Token(Token = "0x400193C")]
		public const string k_pch_Controller_Component_Base = "base";

		[Token(Token = "0x400193D")]
		public const string k_pch_Controller_Component_Tip = "tip";

		[Token(Token = "0x400193E")]
		public const string k_pch_Controller_Component_HandGrip = "handgrip";

		[Token(Token = "0x400193F")]
		public const string k_pch_Controller_Component_Status = "status";

		[Token(Token = "0x4001940")]
		public const string IVRRenderModels_Version = "IVRRenderModels_005";

		[Token(Token = "0x4001941")]
		public const uint k_unNotificationTextMaxSize = 256u;

		[Token(Token = "0x4001942")]
		public const string IVRNotifications_Version = "IVRNotifications_002";

		[Token(Token = "0x4001943")]
		public const uint k_unMaxSettingsKeyLength = 128u;

		[Token(Token = "0x4001944")]
		public const string IVRSettings_Version = "IVRSettings_002";

		[Token(Token = "0x4001945")]
		public const string k_pch_SteamVR_Section = "steamvr";

		[Token(Token = "0x4001946")]
		public const string k_pch_SteamVR_RequireHmd_String = "requireHmd";

		[Token(Token = "0x4001947")]
		public const string k_pch_SteamVR_ForcedDriverKey_String = "forcedDriver";

		[Token(Token = "0x4001948")]
		public const string k_pch_SteamVR_ForcedHmdKey_String = "forcedHmd";

		[Token(Token = "0x4001949")]
		public const string k_pch_SteamVR_DisplayDebug_Bool = "displayDebug";

		[Token(Token = "0x400194A")]
		public const string k_pch_SteamVR_DebugProcessPipe_String = "debugProcessPipe";

		[Token(Token = "0x400194B")]
		public const string k_pch_SteamVR_DisplayDebugX_Int32 = "displayDebugX";

		[Token(Token = "0x400194C")]
		public const string k_pch_SteamVR_DisplayDebugY_Int32 = "displayDebugY";

		[Token(Token = "0x400194D")]
		public const string k_pch_SteamVR_SendSystemButtonToAllApps_Bool = "sendSystemButtonToAllApps";

		[Token(Token = "0x400194E")]
		public const string k_pch_SteamVR_LogLevel_Int32 = "loglevel";

		[Token(Token = "0x400194F")]
		public const string k_pch_SteamVR_IPD_Float = "ipd";

		[Token(Token = "0x4001950")]
		public const string k_pch_SteamVR_Background_String = "background";

		[Token(Token = "0x4001951")]
		public const string k_pch_SteamVR_BackgroundUseDomeProjection_Bool = "backgroundUseDomeProjection";

		[Token(Token = "0x4001952")]
		public const string k_pch_SteamVR_BackgroundCameraHeight_Float = "backgroundCameraHeight";

		[Token(Token = "0x4001953")]
		public const string k_pch_SteamVR_BackgroundDomeRadius_Float = "backgroundDomeRadius";

		[Token(Token = "0x4001954")]
		public const string k_pch_SteamVR_GridColor_String = "gridColor";

		[Token(Token = "0x4001955")]
		public const string k_pch_SteamVR_PlayAreaColor_String = "playAreaColor";

		[Token(Token = "0x4001956")]
		public const string k_pch_SteamVR_ShowStage_Bool = "showStage";

		[Token(Token = "0x4001957")]
		public const string k_pch_SteamVR_ActivateMultipleDrivers_Bool = "activateMultipleDrivers";

		[Token(Token = "0x4001958")]
		public const string k_pch_SteamVR_DirectMode_Bool = "directMode";

		[Token(Token = "0x4001959")]
		public const string k_pch_SteamVR_DirectModeEdidVid_Int32 = "directModeEdidVid";

		[Token(Token = "0x400195A")]
		public const string k_pch_SteamVR_DirectModeEdidPid_Int32 = "directModeEdidPid";

		[Token(Token = "0x400195B")]
		public const string k_pch_SteamVR_UsingSpeakers_Bool = "usingSpeakers";

		[Token(Token = "0x400195C")]
		public const string k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float = "speakersForwardYawOffsetDegrees";

		[Token(Token = "0x400195D")]
		public const string k_pch_SteamVR_BaseStationPowerManagement_Bool = "basestationPowerManagement";

		[Token(Token = "0x400195E")]
		public const string k_pch_SteamVR_NeverKillProcesses_Bool = "neverKillProcesses";

		[Token(Token = "0x400195F")]
		public const string k_pch_SteamVR_SupersampleScale_Float = "supersampleScale";

		[Token(Token = "0x4001960")]
		public const string k_pch_SteamVR_AllowAsyncReprojection_Bool = "allowAsyncReprojection";

		[Token(Token = "0x4001961")]
		public const string k_pch_SteamVR_AllowReprojection_Bool = "allowInterleavedReprojection";

		[Token(Token = "0x4001962")]
		public const string k_pch_SteamVR_ForceReprojection_Bool = "forceReprojection";

		[Token(Token = "0x4001963")]
		public const string k_pch_SteamVR_ForceFadeOnBadTracking_Bool = "forceFadeOnBadTracking";

		[Token(Token = "0x4001964")]
		public const string k_pch_SteamVR_DefaultMirrorView_Int32 = "defaultMirrorView";

		[Token(Token = "0x4001965")]
		public const string k_pch_SteamVR_ShowMirrorView_Bool = "showMirrorView";

		[Token(Token = "0x4001966")]
		public const string k_pch_SteamVR_MirrorViewGeometry_String = "mirrorViewGeometry";

		[Token(Token = "0x4001967")]
		public const string k_pch_SteamVR_StartMonitorFromAppLaunch = "startMonitorFromAppLaunch";

		[Token(Token = "0x4001968")]
		public const string k_pch_SteamVR_StartCompositorFromAppLaunch_Bool = "startCompositorFromAppLaunch";

		[Token(Token = "0x4001969")]
		public const string k_pch_SteamVR_StartDashboardFromAppLaunch_Bool = "startDashboardFromAppLaunch";

		[Token(Token = "0x400196A")]
		public const string k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool = "startOverlayAppsFromDashboard";

		[Token(Token = "0x400196B")]
		public const string k_pch_SteamVR_EnableHomeApp = "enableHomeApp";

		[Token(Token = "0x400196C")]
		public const string k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 = "CycleBackgroundImageTimeSec";

		[Token(Token = "0x400196D")]
		public const string k_pch_SteamVR_RetailDemo_Bool = "retailDemo";

		[Token(Token = "0x400196E")]
		public const string k_pch_SteamVR_IpdOffset_Float = "ipdOffset";

		[Token(Token = "0x400196F")]
		public const string k_pch_SteamVR_AllowSupersampleFiltering_Bool = "allowSupersampleFiltering";

		[Token(Token = "0x4001970")]
		public const string k_pch_Lighthouse_Section = "driver_lighthouse";

		[Token(Token = "0x4001971")]
		public const string k_pch_Lighthouse_DisableIMU_Bool = "disableimu";

		[Token(Token = "0x4001972")]
		public const string k_pch_Lighthouse_UseDisambiguation_String = "usedisambiguation";

		[Token(Token = "0x4001973")]
		public const string k_pch_Lighthouse_DisambiguationDebug_Int32 = "disambiguationdebug";

		[Token(Token = "0x4001974")]
		public const string k_pch_Lighthouse_PrimaryBasestation_Int32 = "primarybasestation";

		[Token(Token = "0x4001975")]
		public const string k_pch_Lighthouse_DBHistory_Bool = "dbhistory";

		[Token(Token = "0x4001976")]
		public const string k_pch_Null_Section = "driver_null";

		[Token(Token = "0x4001977")]
		public const string k_pch_Null_SerialNumber_String = "serialNumber";

		[Token(Token = "0x4001978")]
		public const string k_pch_Null_ModelNumber_String = "modelNumber";

		[Token(Token = "0x4001979")]
		public const string k_pch_Null_WindowX_Int32 = "windowX";

		[Token(Token = "0x400197A")]
		public const string k_pch_Null_WindowY_Int32 = "windowY";

		[Token(Token = "0x400197B")]
		public const string k_pch_Null_WindowWidth_Int32 = "windowWidth";

		[Token(Token = "0x400197C")]
		public const string k_pch_Null_WindowHeight_Int32 = "windowHeight";

		[Token(Token = "0x400197D")]
		public const string k_pch_Null_RenderWidth_Int32 = "renderWidth";

		[Token(Token = "0x400197E")]
		public const string k_pch_Null_RenderHeight_Int32 = "renderHeight";

		[Token(Token = "0x400197F")]
		public const string k_pch_Null_SecondsFromVsyncToPhotons_Float = "secondsFromVsyncToPhotons";

		[Token(Token = "0x4001980")]
		public const string k_pch_Null_DisplayFrequency_Float = "displayFrequency";

		[Token(Token = "0x4001981")]
		public const string k_pch_UserInterface_Section = "userinterface";

		[Token(Token = "0x4001982")]
		public const string k_pch_UserInterface_StatusAlwaysOnTop_Bool = "StatusAlwaysOnTop";

		[Token(Token = "0x4001983")]
		public const string k_pch_UserInterface_MinimizeToTray_Bool = "MinimizeToTray";

		[Token(Token = "0x4001984")]
		public const string k_pch_UserInterface_Screenshots_Bool = "screenshots";

		[Token(Token = "0x4001985")]
		public const string k_pch_UserInterface_ScreenshotType_Int = "screenshotType";

		[Token(Token = "0x4001986")]
		public const string k_pch_Notifications_Section = "notifications";

		[Token(Token = "0x4001987")]
		public const string k_pch_Notifications_DoNotDisturb_Bool = "DoNotDisturb";

		[Token(Token = "0x4001988")]
		public const string k_pch_Keyboard_Section = "keyboard";

		[Token(Token = "0x4001989")]
		public const string k_pch_Keyboard_TutorialCompletions = "TutorialCompletions";

		[Token(Token = "0x400198A")]
		public const string k_pch_Keyboard_ScaleX = "ScaleX";

		[Token(Token = "0x400198B")]
		public const string k_pch_Keyboard_ScaleY = "ScaleY";

		[Token(Token = "0x400198C")]
		public const string k_pch_Keyboard_OffsetLeftX = "OffsetLeftX";

		[Token(Token = "0x400198D")]
		public const string k_pch_Keyboard_OffsetRightX = "OffsetRightX";

		[Token(Token = "0x400198E")]
		public const string k_pch_Keyboard_OffsetY = "OffsetY";

		[Token(Token = "0x400198F")]
		public const string k_pch_Keyboard_Smoothing = "Smoothing";

		[Token(Token = "0x4001990")]
		public const string k_pch_Perf_Section = "perfcheck";

		[Token(Token = "0x4001991")]
		public const string k_pch_Perf_HeuristicActive_Bool = "heuristicActive";

		[Token(Token = "0x4001992")]
		public const string k_pch_Perf_NotifyInHMD_Bool = "warnInHMD";

		[Token(Token = "0x4001993")]
		public const string k_pch_Perf_NotifyOnlyOnce_Bool = "warnOnlyOnce";

		[Token(Token = "0x4001994")]
		public const string k_pch_Perf_AllowTimingStore_Bool = "allowTimingStore";

		[Token(Token = "0x4001995")]
		public const string k_pch_Perf_SaveTimingsOnExit_Bool = "saveTimingsOnExit";

		[Token(Token = "0x4001996")]
		public const string k_pch_Perf_TestData_Float = "perfTestData";

		[Token(Token = "0x4001997")]
		public const string k_pch_Perf_LinuxGPUProfiling_Bool = "linuxGPUProfiling";

		[Token(Token = "0x4001998")]
		public const string k_pch_CollisionBounds_Section = "collisionBounds";

		[Token(Token = "0x4001999")]
		public const string k_pch_CollisionBounds_Style_Int32 = "CollisionBoundsStyle";

		[Token(Token = "0x400199A")]
		public const string k_pch_CollisionBounds_GroundPerimeterOn_Bool = "CollisionBoundsGroundPerimeterOn";

		[Token(Token = "0x400199B")]
		public const string k_pch_CollisionBounds_CenterMarkerOn_Bool = "CollisionBoundsCenterMarkerOn";

		[Token(Token = "0x400199C")]
		public const string k_pch_CollisionBounds_PlaySpaceOn_Bool = "CollisionBoundsPlaySpaceOn";

		[Token(Token = "0x400199D")]
		public const string k_pch_CollisionBounds_FadeDistance_Float = "CollisionBoundsFadeDistance";

		[Token(Token = "0x400199E")]
		public const string k_pch_CollisionBounds_ColorGammaR_Int32 = "CollisionBoundsColorGammaR";

		[Token(Token = "0x400199F")]
		public const string k_pch_CollisionBounds_ColorGammaG_Int32 = "CollisionBoundsColorGammaG";

		[Token(Token = "0x40019A0")]
		public const string k_pch_CollisionBounds_ColorGammaB_Int32 = "CollisionBoundsColorGammaB";

		[Token(Token = "0x40019A1")]
		public const string k_pch_CollisionBounds_ColorGammaA_Int32 = "CollisionBoundsColorGammaA";

		[Token(Token = "0x40019A2")]
		public const string k_pch_Camera_Section = "camera";

		[Token(Token = "0x40019A3")]
		public const string k_pch_Camera_EnableCamera_Bool = "enableCamera";

		[Token(Token = "0x40019A4")]
		public const string k_pch_Camera_EnableCameraInDashboard_Bool = "enableCameraInDashboard";

		[Token(Token = "0x40019A5")]
		public const string k_pch_Camera_EnableCameraForCollisionBounds_Bool = "enableCameraForCollisionBounds";

		[Token(Token = "0x40019A6")]
		public const string k_pch_Camera_EnableCameraForRoomView_Bool = "enableCameraForRoomView";

		[Token(Token = "0x40019A7")]
		public const string k_pch_Camera_BoundsColorGammaR_Int32 = "cameraBoundsColorGammaR";

		[Token(Token = "0x40019A8")]
		public const string k_pch_Camera_BoundsColorGammaG_Int32 = "cameraBoundsColorGammaG";

		[Token(Token = "0x40019A9")]
		public const string k_pch_Camera_BoundsColorGammaB_Int32 = "cameraBoundsColorGammaB";

		[Token(Token = "0x40019AA")]
		public const string k_pch_Camera_BoundsColorGammaA_Int32 = "cameraBoundsColorGammaA";

		[Token(Token = "0x40019AB")]
		public const string k_pch_Camera_BoundsStrength_Int32 = "cameraBoundsStrength";

		[Token(Token = "0x40019AC")]
		public const string k_pch_audio_Section = "audio";

		[Token(Token = "0x40019AD")]
		public const string k_pch_audio_OnPlaybackDevice_String = "onPlaybackDevice";

		[Token(Token = "0x40019AE")]
		public const string k_pch_audio_OnRecordDevice_String = "onRecordDevice";

		[Token(Token = "0x40019AF")]
		public const string k_pch_audio_OnPlaybackMirrorDevice_String = "onPlaybackMirrorDevice";

		[Token(Token = "0x40019B0")]
		public const string k_pch_audio_OffPlaybackDevice_String = "offPlaybackDevice";

		[Token(Token = "0x40019B1")]
		public const string k_pch_audio_OffRecordDevice_String = "offRecordDevice";

		[Token(Token = "0x40019B2")]
		public const string k_pch_audio_VIVEHDMIGain = "viveHDMIGain";

		[Token(Token = "0x40019B3")]
		public const string k_pch_Power_Section = "power";

		[Token(Token = "0x40019B4")]
		public const string k_pch_Power_PowerOffOnExit_Bool = "powerOffOnExit";

		[Token(Token = "0x40019B5")]
		public const string k_pch_Power_TurnOffScreensTimeout_Float = "turnOffScreensTimeout";

		[Token(Token = "0x40019B6")]
		public const string k_pch_Power_TurnOffControllersTimeout_Float = "turnOffControllersTimeout";

		[Token(Token = "0x40019B7")]
		public const string k_pch_Power_ReturnToWatchdogTimeout_Float = "returnToWatchdogTimeout";

		[Token(Token = "0x40019B8")]
		public const string k_pch_Power_AutoLaunchSteamVROnButtonPress = "autoLaunchSteamVROnButtonPress";

		[Token(Token = "0x40019B9")]
		public const string k_pch_Dashboard_Section = "dashboard";

		[Token(Token = "0x40019BA")]
		public const string k_pch_Dashboard_EnableDashboard_Bool = "enableDashboard";

		[Token(Token = "0x40019BB")]
		public const string k_pch_Dashboard_ArcadeMode_Bool = "arcadeMode";

		[Token(Token = "0x40019BC")]
		public const string k_pch_modelskin_Section = "modelskins";

		[Token(Token = "0x40019BD")]
		public const string k_pch_Driver_Enable_Bool = "enable";

		[Token(Token = "0x40019BE")]
		public const string IVRScreenshots_Version = "IVRScreenshots_001";

		[Token(Token = "0x40019BF")]
		public const string IVRResources_Version = "IVRResources_001";

		[Token(Token = "0x40019C0")]
		public const string IVRDriverManager_Version = "IVRDriverManager_001";

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7527B0", Offset = "0x7527B0")]
		private static uint <VRToken>k__BackingField;

		[Token(Token = "0x40019C2")]
		private const string FnTable_Prefix = "FnTable:";

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static COpenVRContext _OpenVRInternal_ModuleContext;

		[Token(Token = "0x170002EB")]
		private static uint VRToken
		{
			[Token(Token = "0x6001CDB")]
			[Address(RVA = "0x830858", Offset = "0x830858", VA = "0x830858")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75923C", Offset = "0x75923C")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6001CDC")]
			[Address(RVA = "0x8308C0", Offset = "0x8308C0", VA = "0x8308C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75924C", Offset = "0x75924C")]
			set
			{
			}
		}

		[Token(Token = "0x170002EC")]
		private static COpenVRContext OpenVRInternal_ModuleContext
		{
			[Token(Token = "0x6001CDD")]
			[Address(RVA = "0x83092C", Offset = "0x83092C", VA = "0x83092C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002ED")]
		public static CVRSystem System
		{
			[Token(Token = "0x6001CDE")]
			[Address(RVA = "0x830A38", Offset = "0x830A38", VA = "0x830A38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EE")]
		public static CVRChaperone Chaperone
		{
			[Token(Token = "0x6001CDF")]
			[Address(RVA = "0x830B60", Offset = "0x830B60", VA = "0x830B60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EF")]
		public static CVRChaperoneSetup ChaperoneSetup
		{
			[Token(Token = "0x6001CE0")]
			[Address(RVA = "0x830C88", Offset = "0x830C88", VA = "0x830C88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F0")]
		public static CVRCompositor Compositor
		{
			[Token(Token = "0x6001CE1")]
			[Address(RVA = "0x830DB0", Offset = "0x830DB0", VA = "0x830DB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F1")]
		public static CVROverlay Overlay
		{
			[Token(Token = "0x6001CE2")]
			[Address(RVA = "0x830ED8", Offset = "0x830ED8", VA = "0x830ED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F2")]
		public static CVRRenderModels RenderModels
		{
			[Token(Token = "0x6001CE3")]
			[Address(RVA = "0x82572C", Offset = "0x82572C", VA = "0x82572C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F3")]
		public static CVRExtendedDisplay ExtendedDisplay
		{
			[Token(Token = "0x6001CE4")]
			[Address(RVA = "0x8310C0", Offset = "0x8310C0", VA = "0x8310C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F4")]
		public static CVRSettings Settings
		{
			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0x8311E8", Offset = "0x8311E8", VA = "0x8311E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F5")]
		public static CVRApplications Applications
		{
			[Token(Token = "0x6001CE6")]
			[Address(RVA = "0x831310", Offset = "0x831310", VA = "0x831310")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F6")]
		public static CVRScreenshots Screenshots
		{
			[Token(Token = "0x6001CE7")]
			[Address(RVA = "0x831438", Offset = "0x831438", VA = "0x831438")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F7")]
		public static CVRTrackedCamera TrackedCamera
		{
			[Token(Token = "0x6001CE8")]
			[Address(RVA = "0x831560", Offset = "0x831560", VA = "0x831560")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0x8302C0", Offset = "0x8302C0", VA = "0x8302C0")]
		public static uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType)
		{
			return default(uint);
		}

		[Token(Token = "0x6001CD4")]
		[Address(RVA = "0x830370", Offset = "0x830370", VA = "0x830370")]
		public static void ShutdownInternal()
		{
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0x830400", Offset = "0x830400", VA = "0x830400")]
		public static bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0x830498", Offset = "0x830498", VA = "0x830498")]
		public static bool IsRuntimeInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0x830530", Offset = "0x830530", VA = "0x830530")]
		public static string GetStringForHmdError(EVRInitError error)
		{
			return null;
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0x830644", Offset = "0x830644", VA = "0x830644")]
		public static IntPtr GetGenericInterface(string pchInterfaceVersion, ref EVRInitError peError)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0x83070C", Offset = "0x83070C", VA = "0x83070C")]
		public static bool IsInterfaceVersionValid(string pchInterfaceVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0x8307C8", Offset = "0x8307C8", VA = "0x8307C8")]
		public static uint GetInitToken()
		{
			return default(uint);
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0x831688", Offset = "0x831688", VA = "0x831688")]
		public static CVRSystem Init(ref EVRInitError peError, EVRApplicationType eApplicationType = EVRApplicationType.VRApplication_Scene)
		{
			return null;
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0x83180C", Offset = "0x83180C", VA = "0x83180C")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x831868", Offset = "0x831868", VA = "0x831868")]
		public OpenVR()
		{
		}
	}
}
namespace Valve.VR.InteractionSystem
{
	[Token(Token = "0x2000375")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A318", Offset = "0x74A318")]
	public class BodyCollider : MonoBehaviour
	{
		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform head;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0xADAC90", Offset = "0xADAC90", VA = "0xADAC90")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0xADACE8", Offset = "0xADACE8", VA = "0xADACE8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0xADAE8C", Offset = "0xADAE8C", VA = "0xADAE8C")]
		public BodyCollider()
		{
		}
	}
	[Token(Token = "0x2000376")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A37C", Offset = "0x74A37C")]
	public class CircularDrive : MonoBehaviour
	{
		[Token(Token = "0x2000619")]
		public enum Axis_t
		{
			[Token(Token = "0x400216C")]
			XAxis,
			[Token(Token = "0x400216D")]
			YAxis,
			[Token(Token = "0x400216E")]
			ZAxis
		}

		[Token(Token = "0x200061A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C64C", Offset = "0x74C64C")]
		private sealed class <HapticPulses>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400216F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_Controller.Device controller;

			[Token(Token = "0x4002172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float flMagnitude;

			[Token(Token = "0x4002173")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int nCount;

			[Token(Token = "0x4002174")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <nRangeMax>5__2;

			[Token(Token = "0x4002175")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private ushort <i>5__3;

			[Token(Token = "0x170003C4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002940")]
				[Address(RVA = "0xADD5E0", Offset = "0xADD5E0", VA = "0xADD5E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002942")]
				[Address(RVA = "0xADD64C", Offset = "0xADD64C", VA = "0xADD64C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600293D")]
			[Address(RVA = "0xADBCDC", Offset = "0xADBCDC", VA = "0xADBCDC")]
			[DebuggerHidden]
			public <HapticPulses>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x600293E")]
			[Address(RVA = "0xADD478", Offset = "0xADD478", VA = "0xADD478", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600293F")]
			[Address(RVA = "0xADD47C", Offset = "0xADD47C", VA = "0xADD47C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002941")]
			[Address(RVA = "0xADD5E8", Offset = "0xADD5E8", VA = "0xADD5E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7527C0", Offset = "0x7527C0")]
		public Axis_t axisOfRotation;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7527F8", Offset = "0x7527F8")]
		public Collider childCollider;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752830", Offset = "0x752830")]
		public LinearMapping linearMapping;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752868", Offset = "0x752868")]
		public bool hoverLock;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7528A0", Offset = "0x7528A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7528A0", Offset = "0x7528A0")]
		public bool limited;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 frozenDistanceMinMaxThreshold;

		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onFrozenDistanceThreshold;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x752900", Offset = "0x752900")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752900", Offset = "0x752900")]
		public float minAngle;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752960", Offset = "0x752960")]
		public bool freezeOnMin;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752998", Offset = "0x752998")]
		public UnityEvent onMinAngle;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7529D0", Offset = "0x7529D0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7529D0", Offset = "0x7529D0")]
		public float maxAngle;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752A30", Offset = "0x752A30")]
		public bool freezeOnMax;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752A68", Offset = "0x752A68")]
		public UnityEvent onMaxAngle;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752AA0", Offset = "0x752AA0")]
		public bool forceStart;

		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752AD8", Offset = "0x752AD8")]
		public float startAngle;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752B10", Offset = "0x752B10")]
		public bool rotateGameObject;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752B48", Offset = "0x752B48")]
		public bool debugPath;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752B80", Offset = "0x752B80")]
		public int dbgPathLimit;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752BB8", Offset = "0x752BB8")]
		public TextMesh debugText;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752BF0", Offset = "0x752BF0")]
		public float outAngle;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion start;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 worldPlaneNormal;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 localPlaneNormal;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 lastHandProjected;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Color red;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Color green;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GameObject[] dbgHandObjects;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GameObject[] dbgProjObjects;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GameObject dbgObjectsParent;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int dbgObjectCount;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int dbgObjectIndex;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool driving;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float minMaxAngularThreshold;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool frozen;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float frozenAngle;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 frozenHandWorldPos;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector2 frozenSqDistanceMinMaxThreshold;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Hand handHoverLocked;

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0xADB5DC", Offset = "0xADB5DC", VA = "0xADB5DC")]
		private void Freeze(Hand hand)
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0xADB644", Offset = "0xADB644", VA = "0xADB644")]
		private void UnFreeze()
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0xADB664", Offset = "0xADB664", VA = "0xADB664")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0xADBA9C", Offset = "0xADBA9C", VA = "0xADBA9C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xADBC48", Offset = "0xADBC48", VA = "0xADBC48")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75925C", Offset = "0x75925C")]
		private IEnumerator HapticPulses(SteamVR_Controller.Device controller, float flMagnitude, int nCount)
		{
			return null;
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0xADBD08", Offset = "0xADBD08", VA = "0xADBD08")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xADBE44", Offset = "0xADBE44", VA = "0xADBE44")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0xADBFC4", Offset = "0xADBFC4", VA = "0xADBFC4")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0xADC23C", Offset = "0xADC23C", VA = "0xADC23C")]
		private Vector3 ComputeToTransformProjected(Transform xForm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0xADC948", Offset = "0xADC948", VA = "0xADC948")]
		private void DrawDebugPath(Transform xForm, Vector3 toTransformProjected)
		{
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0xADCFEC", Offset = "0xADCFEC", VA = "0xADCFEC")]
		private void UpdateLinearMapping()
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0xADD1B0", Offset = "0xADD1B0", VA = "0xADD1B0")]
		private void UpdateGameObject()
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0xADD0B0", Offset = "0xADD0B0", VA = "0xADD0B0")]
		private void UpdateDebugText()
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0xADBA70", Offset = "0xADBA70", VA = "0xADBA70")]
		private void UpdateAll()
		{
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0xADC4D8", Offset = "0xADC4D8", VA = "0xADC4D8")]
		private void ComputeAngle(Hand hand)
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0xADD2D0", Offset = "0xADD2D0", VA = "0xADD2D0")]
		public CircularDrive()
		{
		}
	}
	[Token(Token = "0x2000377")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A3E0", Offset = "0x74A3E0")]
	public class ComplexThrowable : MonoBehaviour
	{
		[Token(Token = "0x200061B")]
		public enum AttachMode
		{
			[Token(Token = "0x4002177")]
			FixedJoint,
			[Token(Token = "0x4002178")]
			Force
		}

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float attachForce;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float attachForceDamper;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttachMode attachMode;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[EnumFlags]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Hand> holdingHands;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Rigidbody> holdingBodies;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Vector3> holdingPoints;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Rigidbody> rigidBodies;

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0xADD654", Offset = "0xADD654", VA = "0xADD654")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0xADD6A8", Offset = "0xADD6A8", VA = "0xADD6A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0xADD948", Offset = "0xADD948", VA = "0xADD948")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0xADD9EC", Offset = "0xADD9EC", VA = "0xADD9EC")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0xADDA90", Offset = "0xADDA90", VA = "0xADDA90")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xADDADC", Offset = "0xADDADC", VA = "0xADDADC")]
		private void PhysicsAttach(Hand hand)
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xADD77C", Offset = "0xADD77C", VA = "0xADD77C")]
		private bool PhysicsDetach(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0xADE614", Offset = "0xADE614", VA = "0xADE614")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0xADE8F0", Offset = "0xADE8F0", VA = "0xADE8F0")]
		public ComplexThrowable()
		{
		}
	}
	[Token(Token = "0x2000378")]
	public class ControllerHoverHighlight : MonoBehaviour
	{
		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material highLightMaterial;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool fireHapticsOnHightlight;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Hand hand;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshRenderer bodyMeshRenderer;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer trackingHatMeshRenderer;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_RenderModel renderModel;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool renderModelLoaded;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0xAE3698", Offset = "0xAE3698", VA = "0xAE3698")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0xAE36F0", Offset = "0xAE36F0", VA = "0xAE36F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0xAE3794", Offset = "0xAE3794", VA = "0xAE3794")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0xAE37B4", Offset = "0xAE37B4", VA = "0xAE37B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0xAE37D4", Offset = "0xAE37D4", VA = "0xAE37D4")]
		private void OnHandInitialized(int deviceIndex)
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0xAE386C", Offset = "0xAE386C", VA = "0xAE386C")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool success)
		{
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0xAE3DCC", Offset = "0xAE3DCC", VA = "0xAE3DCC")]
		private void OnParentHandHoverBegin(Interactable other)
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0xAE3FD4", Offset = "0xAE3FD4", VA = "0xAE3FD4")]
		private void OnParentHandHoverEnd(Interactable other)
		{
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0xAE40F4", Offset = "0xAE40F4", VA = "0xAE40F4")]
		private void OnParentHandInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0xAE4218", Offset = "0xAE4218", VA = "0xAE4218")]
		private void OnParentHandInputFocusLost()
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0xAE3EB8", Offset = "0xAE3EB8", VA = "0xAE3EB8")]
		public void ShowHighlight()
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0xAE3FD8", Offset = "0xAE3FD8", VA = "0xAE3FD8")]
		public void HideHighlight()
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0xAE421C", Offset = "0xAE421C", VA = "0xAE421C")]
		public ControllerHoverHighlight()
		{
		}
	}
	[Token(Token = "0x2000379")]
	public static class CustomEvents
	{
		[Serializable]
		[Token(Token = "0x200061C")]
		public class UnityEventSingleFloat : UnityEvent<float>
		{
			[Token(Token = "0x6002943")]
			[Address(RVA = "0xAE427C", Offset = "0xAE427C", VA = "0xAE427C")]
			public UnityEventSingleFloat()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200061D")]
		public class UnityEventHand : UnityEvent<Hand>
		{
			[Token(Token = "0x6002944")]
			[Address(RVA = "0xAE422C", Offset = "0xAE422C", VA = "0xAE422C")]
			public UnityEventHand()
			{
			}
		}
	}
	[Token(Token = "0x200037A")]
	public class DebugUI : MonoBehaviour
	{
		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Player player;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DebugUI _instance;

		[Token(Token = "0x170002F8")]
		public static DebugUI instance
		{
			[Token(Token = "0x6001D16")]
			[Address(RVA = "0xAE42CC", Offset = "0xAE42CC", VA = "0xAE42CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0xAE4398", Offset = "0xAE4398", VA = "0xAE4398")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0xAE43C0", Offset = "0xAE43C0", VA = "0xAE43C0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0xAE43DC", Offset = "0xAE43DC", VA = "0xAE43DC")]
		public DebugUI()
		{
		}
	}
	[Token(Token = "0x200037B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A444", Offset = "0x74A444")]
	public class DestroyOnDetachedFromHand : MonoBehaviour
	{
		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0xAE43E4", Offset = "0xAE43E4", VA = "0xAE43E4")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0xAE4460", Offset = "0xAE4460", VA = "0xAE4460")]
		public DestroyOnDetachedFromHand()
		{
		}
	}
	[Token(Token = "0x200037C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A4A8", Offset = "0x74A4A8")]
	public class DestroyOnParticleSystemDeath : MonoBehaviour
	{
		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem particles;

		[Token(Token = "0x6001D1C")]
		[Address(RVA = "0xAE4468", Offset = "0xAE4468", VA = "0xAE4468")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0xAE44E0", Offset = "0xAE44E0", VA = "0xAE44E0")]
		private void CheckParticleSystem()
		{
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0xAE4580", Offset = "0xAE4580", VA = "0xAE4580")]
		public DestroyOnParticleSystemDeath()
		{
		}
	}
	[Token(Token = "0x200037D")]
	public class DestroyOnTriggerEnter : MonoBehaviour
	{
		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string tagFilter;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useTag;

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0xAE4588", Offset = "0xAE4588", VA = "0xAE4588")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0xAE45BC", Offset = "0xAE45BC", VA = "0xAE45BC")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0xAE46B8", Offset = "0xAE46B8", VA = "0xAE46B8")]
		public DestroyOnTriggerEnter()
		{
		}
	}
	[Token(Token = "0x200037E")]
	public class DistanceHaptics : MonoBehaviour
	{
		[Token(Token = "0x200061E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C65C", Offset = "0x74C65C")]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002179")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400217A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400217B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DistanceHaptics <>4__this;

			[Token(Token = "0x170003C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002948")]
				[Address(RVA = "0xAE49A8", Offset = "0xAE49A8", VA = "0xAE49A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600294A")]
				[Address(RVA = "0xAE4A14", Offset = "0xAE4A14", VA = "0xAE4A14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002945")]
			[Address(RVA = "0xAE4734", Offset = "0xAE4734", VA = "0xAE4734")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6002946")]
			[Address(RVA = "0xAE47D0", Offset = "0xAE47D0", VA = "0xAE47D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002947")]
			[Address(RVA = "0xAE47D4", Offset = "0xAE47D4", VA = "0xAE47D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002949")]
			[Address(RVA = "0xAE49B0", Offset = "0xAE49B0", VA = "0xAE49B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform firstTransform;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform secondTransform;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve distanceIntensityCurve;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve pulseIntervalCurve;

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0xAE46C0", Offset = "0xAE46C0", VA = "0xAE46C0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7592C0", Offset = "0x7592C0")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0xAE4760", Offset = "0xAE4760", VA = "0xAE4760")]
		public DistanceHaptics()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public class DontDestroyOnLoad : MonoBehaviour
	{
		[Token(Token = "0x6001D24")]
		[Address(RVA = "0xAE4A1C", Offset = "0xAE4A1C", VA = "0xAE4A1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0xAE4A84", Offset = "0xAE4A84", VA = "0xAE4A84")]
		public DontDestroyOnLoad()
		{
		}
	}
	[Token(Token = "0x2000380")]
	public class EnumFlags : PropertyAttribute
	{
		[Token(Token = "0x6001D26")]
		[Address(RVA = "0xAE4A8C", Offset = "0xAE4A8C", VA = "0xAE4A8C")]
		public EnumFlags()
		{
		}
	}
	[Token(Token = "0x2000381")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A50C", Offset = "0x74A50C")]
	public class FallbackCameraController : MonoBehaviour
	{
		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float shiftSpeed;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showInstructions;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 startEulerAngles;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 startMousePosition;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float realTime;

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0xAE4B84", Offset = "0xAE4B84", VA = "0xAE4B84")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0xAE4BAC", Offset = "0xAE4BAC", VA = "0xAE4BAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0xAE4F20", Offset = "0xAE4F20", VA = "0xAE4F20")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0xAE4FD4", Offset = "0xAE4FD4", VA = "0xAE4FD4")]
		public FallbackCameraController()
		{
		}
	}
	[Token(Token = "0x2000382")]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x200061F")]
		public enum HandType
		{
			[Token(Token = "0x400217D")]
			Left,
			[Token(Token = "0x400217E")]
			Right,
			[Token(Token = "0x400217F")]
			Any
		}

		[Token(Token = "0x2000620")]
		[Flags]
		public enum AttachmentFlags
		{
			[Token(Token = "0x4002181")]
			SnapOnAttach = 1,
			[Token(Token = "0x4002182")]
			DetachOthers = 2,
			[Token(Token = "0x4002183")]
			DetachFromOtherHand = 4,
			[Token(Token = "0x4002184")]
			ParentToHand = 8
		}

		[Token(Token = "0x2000621")]
		public struct AttachedObject
		{
			[Token(Token = "0x4002185")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject attachedObject;

			[Token(Token = "0x4002186")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GameObject originalParent;

			[Token(Token = "0x4002187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isParentedToHand;
		}

		[Token(Token = "0x2000622")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C67C", Offset = "0x74C67C")]
		private sealed class <>c__DisplayClass42_0
		{
			[Token(Token = "0x4002188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject objectToDetach;

			[Token(Token = "0x600294B")]
			[Address(RVA = "0xAE625C", Offset = "0xAE625C", VA = "0xAE625C")]
			public <>c__DisplayClass42_0()
			{
			}

			[Token(Token = "0x600294C")]
			[Address(RVA = "0xAE7A40", Offset = "0xAE7A40", VA = "0xAE7A40")]
			internal bool <DetachObject>b__0(AttachedObject l)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000623")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C68C", Offset = "0x74C68C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400218A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<AttachedObject> <>9__45_0;

			[Token(Token = "0x600294E")]
			[Address(RVA = "0xAE79C8", Offset = "0xAE79C8", VA = "0xAE79C8")]
			public <>c()
			{
			}

			[Token(Token = "0x600294F")]
			[Address(RVA = "0xAE79D0", Offset = "0xAE79D0", VA = "0xAE79D0")]
			internal bool <CleanUpAttachedObjectStack>b__45_0(AttachedObject l)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000624")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C69C", Offset = "0x74C69C")]
		private sealed class <Start>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400218B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400218C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400218D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x170003C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002953")]
				[Address(RVA = "0xAE7E68", Offset = "0xAE7E68", VA = "0xAE7E68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002955")]
				[Address(RVA = "0xAE7ED4", Offset = "0xAE7ED4", VA = "0xAE7ED4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002950")]
			[Address(RVA = "0xAE65BC", Offset = "0xAE65BC", VA = "0xAE65BC")]
			[DebuggerHidden]
			public <Start>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6002951")]
			[Address(RVA = "0xAE7B58", Offset = "0xAE7B58", VA = "0xAE7B58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002952")]
			[Address(RVA = "0xAE7B5C", Offset = "0xAE7B5C", VA = "0xAE7B5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002954")]
			[Address(RVA = "0xAE7E70", Offset = "0xAE7E70", VA = "0xAE7E70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000625")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C6AC", Offset = "0x74C6AC")]
		private sealed class <>c__DisplayClass48_0
		{
			[Token(Token = "0x400218E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Interactable contacting;

			[Token(Token = "0x6002956")]
			[Address(RVA = "0xAE65E8", Offset = "0xAE65E8", VA = "0xAE65E8")]
			public <>c__DisplayClass48_0()
			{
			}

			[Token(Token = "0x6002957")]
			[Address(RVA = "0xAE7AC0", Offset = "0xAE7AC0", VA = "0xAE7AC0")]
			internal bool <UpdateHovering>b__0(AttachedObject l)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001A0B")]
		public const AttachmentFlags defaultAttachmentFlags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand otherHand;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandType startingHandType;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform hoverSphereTransform;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float hoverSphereRadius;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask hoverLayerMask;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float hoverUpdateInterval;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Camera noSteamVRFallbackCamera;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float noSteamVRFallbackMaxDistanceNoItem;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float noSteamVRFallbackMaxDistanceWithItem;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float noSteamVRFallbackInteractorDistance;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SteamVR_Controller.Device controller;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject controllerPrefab;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject controllerObject;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool showDebugText;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool spewDebugText;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<AttachedObject> attachedObjects;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x752C38", Offset = "0x752C38")]
		private bool <hoverLocked>k__BackingField;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Interactable _hoveringInteractable;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TextMesh debugText;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int prevOverlappingColliders;

		[Token(Token = "0x4001A20")]
		private const int ColliderArraySize = 16;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Collider[] overlappingColliders;

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Player playerInstance;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject applicationLostFocusObject;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private SteamVR_Events.Action inputFocusAction;

		[Token(Token = "0x170002F9")]
		public ReadOnlyCollection<AttachedObject> AttachedObjects
		{
			[Token(Token = "0x6001D2B")]
			[Address(RVA = "0xAE5500", Offset = "0xAE5500", VA = "0xAE5500")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FA")]
		public bool hoverLocked
		{
			[Token(Token = "0x6001D2C")]
			[Address(RVA = "0xAE5558", Offset = "0xAE5558", VA = "0xAE5558")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759324", Offset = "0x759324")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D2D")]
			[Address(RVA = "0xAE5560", Offset = "0xAE5560", VA = "0xAE5560")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759334", Offset = "0x759334")]
			private set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public Interactable hoveringInteractable
		{
			[Token(Token = "0x6001D2E")]
			[Address(RVA = "0xAE556C", Offset = "0xAE556C", VA = "0xAE556C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D2F")]
			[Address(RVA = "0xAE5574", Offset = "0xAE5574", VA = "0xAE5574")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		public GameObject currentAttachedObject
		{
			[Token(Token = "0x6001D30")]
			[Address(RVA = "0xAE588C", Offset = "0xAE588C", VA = "0xAE588C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0xAE5A04", Offset = "0xAE5A04", VA = "0xAE5A04")]
		public Transform GetAttachmentTransform(string attachmentPoint = "")
		{
			return null;
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0xAE5AD4", Offset = "0xAE5AD4", VA = "0xAE5AD4")]
		public HandType GuessCurrentHandType()
		{
			return default(HandType);
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0xADDF1C", Offset = "0xADDF1C", VA = "0xADDF1C")]
		public void AttachObject(GameObject objectToAttach, AttachmentFlags flags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand, string attachmentPoint = "")
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0xADE28C", Offset = "0xADE28C", VA = "0xADE28C")]
		public void DetachObject(GameObject objectToDetach, bool restoreOriginalParent = true)
		{
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0xAE6264", Offset = "0xAE6264", VA = "0xAE6264")]
		public Vector3 GetTrackedObjectVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0xAE6324", Offset = "0xAE6324", VA = "0xAE6324")]
		public Vector3 GetTrackedObjectAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0xAE5908", Offset = "0xAE5908", VA = "0xAE5908")]
		private void CleanUpAttachedObjectStack()
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0xAE63E4", Offset = "0xAE63E4", VA = "0xAE63E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0xAE6548", Offset = "0xAE6548", VA = "0xAE6548")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759344", Offset = "0x759344")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0xAE5BFC", Offset = "0xAE5BFC", VA = "0xAE5BFC")]
		private void UpdateHovering()
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0xAE65F0", Offset = "0xAE65F0", VA = "0xAE65F0")]
		private void UpdateNoSteamVRFallback()
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0xAE6990", Offset = "0xAE6990", VA = "0xAE6990")]
		private void UpdateDebugText()
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0xAE6F14", Offset = "0xAE6F14", VA = "0xAE6F14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0xAE7020", Offset = "0xAE7020", VA = "0xAE7020")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0xAE705C", Offset = "0xAE705C", VA = "0xAE705C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0xAE7174", Offset = "0xAE7174", VA = "0xAE7174")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0xAE7228", Offset = "0xAE7228", VA = "0xAE7228")]
		private void OnInputFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0xAE7474", Offset = "0xAE7474", VA = "0xAE7474")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0xAE7478", Offset = "0xAE7478", VA = "0xAE7478")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0xAE57C0", Offset = "0xAE57C0", VA = "0xAE57C0")]
		private void HandDebugLog(string msg)
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0xAE7310", Offset = "0xAE7310", VA = "0xAE7310")]
		private void UpdateHandPoses()
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0xAD8AFC", Offset = "0xAD8AFC", VA = "0xAD8AFC")]
		public void HoverLock(Interactable interactable)
		{
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0xAD8E10", Offset = "0xAD8E10", VA = "0xAD8E10")]
		public void HoverUnlock(Interactable interactable)
		{
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0xADC19C", Offset = "0xADC19C", VA = "0xADC19C")]
		public bool GetStandardInteractionButtonDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0xADC8A8", Offset = "0xADC8A8", VA = "0xADC8A8")]
		public bool GetStandardInteractionButtonUp()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0xADBF24", Offset = "0xADBF24", VA = "0xADBF24")]
		public bool GetStandardInteractionButton()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0xAE755C", Offset = "0xAE755C", VA = "0xAE755C")]
		private void InitController(int index)
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0xAE78BC", Offset = "0xAE78BC", VA = "0xAE78BC")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x2000383")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A570", Offset = "0x74A570")]
	public class HapticRack : MonoBehaviour
	{
		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752C48", Offset = "0x752C48")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752C80", Offset = "0x752C80")]
		public int teethCount;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752CB8", Offset = "0x752CB8")]
		public int minimumPulseDuration;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752CF0", Offset = "0x752CF0")]
		public int maximumPulseDuration;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752D28", Offset = "0x752D28")]
		public UnityEvent onPulse;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int previousToothIndex;

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0x81D02C", Offset = "0x81D02C", VA = "0x81D02C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x81D0BC", Offset = "0x81D0BC", VA = "0x81D0BC")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0x81D0C4", Offset = "0x81D0C4", VA = "0x81D0C4")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0x81D0CC", Offset = "0x81D0CC", VA = "0x81D0CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0x81D180", Offset = "0x81D180", VA = "0x81D180")]
		private void Pulse()
		{
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0x81D264", Offset = "0x81D264", VA = "0x81D264")]
		public HapticRack()
		{
		}
	}
	[Token(Token = "0x2000384")]
	public class HideOnHandFocusLost : MonoBehaviour
	{
		[Token(Token = "0x6001D53")]
		[Address(RVA = "0x81D288", Offset = "0x81D288", VA = "0x81D288")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0x81D2B0", Offset = "0x81D2B0", VA = "0x81D2B0")]
		public HideOnHandFocusLost()
		{
		}
	}
	[Token(Token = "0x2000385")]
	public class IgnoreHovering : MonoBehaviour
	{
		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752D60", Offset = "0x752D60")]
		public Hand onlyIgnoreHand;

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0x81D2B8", Offset = "0x81D2B8", VA = "0x81D2B8")]
		public IgnoreHovering()
		{
		}
	}
	[Token(Token = "0x2000386")]
	public class InputModule : BaseInputModule
	{
		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject submitObject;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputModule _instance;

		[Token(Token = "0x170002FD")]
		public static InputModule instance
		{
			[Token(Token = "0x6001D56")]
			[Address(RVA = "0x81D2C8", Offset = "0x81D2C8", VA = "0x81D2C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0x81D394", Offset = "0x81D394", VA = "0x81D394", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0x81D424", Offset = "0x81D424", VA = "0x81D424")]
		public void HoverBegin(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0x81D510", Offset = "0x81D510", VA = "0x81D510")]
		public void HoverEnd(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0x81D618", Offset = "0x81D618", VA = "0x81D618")]
		public void Submit(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0x81D620", Offset = "0x81D620", VA = "0x81D620", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0x81D75C", Offset = "0x81D75C", VA = "0x81D75C")]
		public InputModule()
		{
		}
	}
	[Token(Token = "0x2000387")]
	public class Interactable : MonoBehaviour
	{
		[Token(Token = "0x2000626")]
		public delegate void OnAttachedToHandDelegate(Hand hand);

		[Token(Token = "0x2000627")]
		public delegate void OnDetachedFromHandDelegate(Hand hand);

		[Token(Token = "0x14000011")]
		[HideInInspector]
		public event OnAttachedToHandDelegate onAttachedToHand
		{
			[Token(Token = "0x6001D5D")]
			[Address(RVA = "0x81D764", Offset = "0x81D764", VA = "0x81D764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7593A8", Offset = "0x7593A8")]
			add
			{
			}
			[Token(Token = "0x6001D5E")]
			[Address(RVA = "0x81D808", Offset = "0x81D808", VA = "0x81D808")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7593B8", Offset = "0x7593B8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		[HideInInspector]
		public event OnDetachedFromHandDelegate onDetachedFromHand
		{
			[Token(Token = "0x6001D5F")]
			[Address(RVA = "0x81D8AC", Offset = "0x81D8AC", VA = "0x81D8AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7593C8", Offset = "0x7593C8")]
			add
			{
			}
			[Token(Token = "0x6001D60")]
			[Address(RVA = "0x81D950", Offset = "0x81D950", VA = "0x81D950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7593D8", Offset = "0x7593D8")]
			remove
			{
			}
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0x81D9F4", Offset = "0x81D9F4", VA = "0x81D9F4")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0x81DDB8", Offset = "0x81DDB8", VA = "0x81DDB8")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0x81E17C", Offset = "0x81E17C", VA = "0x81E17C")]
		public Interactable()
		{
		}
	}
	[Token(Token = "0x2000388")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A5D4", Offset = "0x74A5D4")]
	public class InteractableButtonEvents : MonoBehaviour
	{
		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onGripDown;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onGripUp;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onTouchpadDown;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onTouchpadUp;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onTouchpadTouch;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onTouchpadRelease;

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0x81E204", Offset = "0x81E204", VA = "0x81E204")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0x81E5D8", Offset = "0x81E5D8", VA = "0x81E5D8")]
		public InteractableButtonEvents()
		{
		}
	}
	[Token(Token = "0x2000389")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A638", Offset = "0x74A638")]
	public class InteractableHoverEvents : MonoBehaviour
	{
		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onHandHoverBegin;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onHandHoverEnd;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onAttachedToHand;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onDetachedFromHand;

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x81EB70", Offset = "0x81EB70", VA = "0x81EB70")]
		private void OnHandHoverBegin()
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0x81EB8C", Offset = "0x81EB8C", VA = "0x81EB8C")]
		private void OnHandHoverEnd()
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0x81EBA8", Offset = "0x81EBA8", VA = "0x81EBA8")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0x81EBC4", Offset = "0x81EBC4", VA = "0x81EBC4")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0x81EBE0", Offset = "0x81EBE0", VA = "0x81EBE0")]
		public InteractableHoverEvents()
		{
		}
	}
	[Token(Token = "0x200038A")]
	public class ItemPackage : MonoBehaviour
	{
		[Token(Token = "0x2000628")]
		public enum ItemPackageType
		{
			[Token(Token = "0x4002190")]
			Unrestricted,
			[Token(Token = "0x4002191")]
			OneHanded,
			[Token(Token = "0x4002192")]
			TwoHanded
		}

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new string name;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ItemPackageType packageType;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject itemPrefab;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject otherHandItemPrefab;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject previewPrefab;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject fadedPreviewPrefab;

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0x81EBE8", Offset = "0x81EBE8", VA = "0x81EBE8")]
		public ItemPackage()
		{
		}
	}
	[Token(Token = "0x200038B")]
	public class ItemPackageReference : MonoBehaviour
	{
		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemPackage itemPackage;

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0x81EBF0", Offset = "0x81EBF0", VA = "0x81EBF0")]
		public ItemPackageReference()
		{
		}
	}
	[Token(Token = "0x200038C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A69C", Offset = "0x74A69C")]
	public class ItemPackageSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemPackage _itemPackage;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useItemPackagePreview;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool useFadedPreview;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject previewObject;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool requireTriggerPressToTake;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool requireTriggerPressToReturn;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool showTriggerHint;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[EnumFlags]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string attachmentPoint;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool takeBackItem;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool acceptDifferentItems;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject spawnedItem;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool itemIsSpawned;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent pickupEvent;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent dropEvent;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool justPickedUpItem;

		[Token(Token = "0x170002FE")]
		public ItemPackage itemPackage
		{
			[Token(Token = "0x6001D6D")]
			[Address(RVA = "0x81EBF8", Offset = "0x81EBF8", VA = "0x81EBF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D6E")]
			[Address(RVA = "0x81EC00", Offset = "0x81EC00", VA = "0x81EC00")]
			set
			{
			}
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x81EC04", Offset = "0x81EC04", VA = "0x81EC04")]
		private void CreatePreviewObject()
		{
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0x81F184", Offset = "0x81F184", VA = "0x81F184")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0x81F188", Offset = "0x81F188", VA = "0x81F188")]
		private void VerifyItemPackage()
		{
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0x81F264", Offset = "0x81F264", VA = "0x81F264")]
		private void ItemPackageNotValid()
		{
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0x81EE70", Offset = "0x81EE70", VA = "0x81EE70")]
		private void ClearPreview()
		{
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0x81F358", Offset = "0x81F358", VA = "0x81F358")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0x81F404", Offset = "0x81F404", VA = "0x81F404")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0x81F60C", Offset = "0x81F60C", VA = "0x81F60C")]
		private void TakeBackItem(Hand hand)
		{
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x81F504", Offset = "0x81F504", VA = "0x81F504")]
		private ItemPackage GetAttachedItemPackage(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0x81FB2C", Offset = "0x81FB2C", VA = "0x81FB2C")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0x81FB88", Offset = "0x81FB88", VA = "0x81FB88")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x81F968", Offset = "0x81F968", VA = "0x81F968")]
		private void RemoveMatchingItemsFromHandStack(ItemPackage package, Hand hand)
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x81FBD4", Offset = "0x81FBD4", VA = "0x81FBD4")]
		private void RemoveMatchingItemTypesFromHand(ItemPackage.ItemPackageType packageType, Hand hand)
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x81F66C", Offset = "0x81F66C", VA = "0x81F66C")]
		private void SpawnAndAttachObject(Hand hand)
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0x81FD50", Offset = "0x81FD50", VA = "0x81FD50")]
		public ItemPackageSpawner()
		{
		}
	}
	[Token(Token = "0x200038D")]
	public class LinearAnimation : MonoBehaviour
	{
		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animation animation;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationState animState;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float animLength;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float lastValue;

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0x81FD68", Offset = "0x81FD68", VA = "0x81FD68")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x81FED4", Offset = "0x81FED4", VA = "0x81FED4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0x81FF34", Offset = "0x81FF34", VA = "0x81FF34")]
		public LinearAnimation()
		{
		}
	}
	[Token(Token = "0x200038E")]
	public class LinearAnimator : MonoBehaviour
	{
		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentLinearMapping;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int framesUnchanged;

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0x81FF3C", Offset = "0x81FF3C", VA = "0x81FF3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D82")]
		[Address(RVA = "0x82003C", Offset = "0x82003C", VA = "0x82003C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0x8200E4", Offset = "0x8200E4", VA = "0x8200E4")]
		public LinearAnimator()
		{
		}
	}
	[Token(Token = "0x200038F")]
	public class LinearAudioPitch : MonoBehaviour
	{
		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve pitchCurve;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minPitch;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxPitch;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool applyContinuously;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource audioSource;

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0x8200F4", Offset = "0x8200F4", VA = "0x8200F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0x8201D4", Offset = "0x8201D4", VA = "0x8201D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0x8201E4", Offset = "0x8201E4", VA = "0x8201E4")]
		private void Apply()
		{
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0x8202A4", Offset = "0x8202A4", VA = "0x8202A4")]
		public LinearAudioPitch()
		{
		}
	}
	[Token(Token = "0x2000390")]
	public class LinearBlendshape : MonoBehaviour
	{
		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinnedMeshRenderer skinnedMesh;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastValue;

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0x8202B4", Offset = "0x8202B4", VA = "0x8202B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0x820394", Offset = "0x820394", VA = "0x820394")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0x8204E0", Offset = "0x8204E0", VA = "0x8204E0")]
		public LinearBlendshape()
		{
		}
	}
	[Token(Token = "0x2000391")]
	public class LinearDisplacement : MonoBehaviour
	{
		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 displacement;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialPosition;

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0x8204E8", Offset = "0x8204E8", VA = "0x8204E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0x82059C", Offset = "0x82059C", VA = "0x82059C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0x8206E4", Offset = "0x8206E4", VA = "0x8206E4")]
		public LinearDisplacement()
		{
		}
	}
	[Token(Token = "0x2000392")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A700", Offset = "0x74A700")]
	public class LinearDrive : MonoBehaviour
	{
		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform startPosition;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform endPosition;

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool repositionGameObject;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool maintainMomemntum;

		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float momemtumDampenRate;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float initialMappingOffset;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int numMappingChangeSamples;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] mappingChangeSamples;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float prevMapping;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float mappingChangeRate;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int sampleCount;

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0x8206EC", Offset = "0x8206EC", VA = "0x8206EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0x820744", Offset = "0x820744", VA = "0x820744")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0x820A88", Offset = "0x820A88", VA = "0x820A88")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0x820D3C", Offset = "0x820D3C", VA = "0x820D3C")]
		private void CalculateMappingChangeRate()
		{
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0x820880", Offset = "0x820880", VA = "0x820880")]
		private void UpdateLinearMapping(Transform tr)
		{
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0x820BC0", Offset = "0x820BC0", VA = "0x820BC0")]
		private float CalculateLinearMapping(Transform tr)
		{
			return default(float);
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0x820E30", Offset = "0x820E30", VA = "0x820E30")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0x820FEC", Offset = "0x820FEC", VA = "0x820FEC")]
		public LinearDrive()
		{
		}
	}
	[Token(Token = "0x2000393")]
	public class LinearMapping : MonoBehaviour
	{
		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0x82100C", Offset = "0x82100C", VA = "0x82100C")]
		public LinearMapping()
		{
		}
	}
	[Token(Token = "0x2000394")]
	public class Player : MonoBehaviour
	{
		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752DC8", Offset = "0x752DC8")]
		public Transform trackingOriginTransform;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752E00", Offset = "0x752E00")]
		public Transform[] hmdTransforms;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752E38", Offset = "0x752E38")]
		public Hand[] hands;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752E70", Offset = "0x752E70")]
		public Collider headCollider;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752EA8", Offset = "0x752EA8")]
		public GameObject rigSteamVR;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752EE0", Offset = "0x752EE0")]
		public GameObject rig2DFallback;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752F18", Offset = "0x752F18")]
		public Transform audioListener;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool allowToggleTo2D;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Player _instance;

		[Token(Token = "0x170002FF")]
		public static Player instance
		{
			[Token(Token = "0x6001D97")]
			[Address(RVA = "0x81E3B0", Offset = "0x81E3B0", VA = "0x81E3B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000300")]
		public int handCount
		{
			[Token(Token = "0x6001D98")]
			[Address(RVA = "0x81E540", Offset = "0x81E540", VA = "0x81E540")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000301")]
		public Hand leftHand
		{
			[Token(Token = "0x6001D9A")]
			[Address(RVA = "0x822C14", Offset = "0x822C14", VA = "0x822C14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000302")]
		public Hand rightHand
		{
			[Token(Token = "0x6001D9B")]
			[Address(RVA = "0x822CF8", Offset = "0x822CF8", VA = "0x822CF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000303")]
		public SteamVR_Controller.Device leftController
		{
			[Token(Token = "0x6001D9C")]
			[Address(RVA = "0x822DE0", Offset = "0x822DE0", VA = "0x822DE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000304")]
		public SteamVR_Controller.Device rightController
		{
			[Token(Token = "0x6001D9D")]
			[Address(RVA = "0x822E78", Offset = "0x822E78", VA = "0x822E78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000305")]
		public Transform hmdTransform
		{
			[Token(Token = "0x6001D9E")]
			[Address(RVA = "0x821AEC", Offset = "0x821AEC", VA = "0x821AEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000306")]
		public float eyeHeight
		{
			[Token(Token = "0x6001D9F")]
			[Address(RVA = "0x822F10", Offset = "0x822F10", VA = "0x822F10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000307")]
		public Vector3 feetPositionGuess
		{
			[Token(Token = "0x6001DA0")]
			[Address(RVA = "0x8230A4", Offset = "0x8230A4", VA = "0x8230A4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000308")]
		public Vector3 bodyDirectionGuess
		{
			[Token(Token = "0x6001DA1")]
			[Address(RVA = "0x823264", Offset = "0x823264", VA = "0x823264")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0x81E47C", Offset = "0x81E47C", VA = "0x81E47C")]
		public Hand GetHand(int i)
		{
			return null;
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0x823438", Offset = "0x823438", VA = "0x823438")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0x8234C0", Offset = "0x8234C0", VA = "0x8234C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0x823700", Offset = "0x823700", VA = "0x823700")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0x823C6C", Offset = "0x823C6C", VA = "0x823C6C")]
		public void Draw2DDebug()
		{
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0x823550", Offset = "0x823550", VA = "0x823550")]
		private void ActivateRig(GameObject rig)
		{
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0x823DD4", Offset = "0x823DD4", VA = "0x823DD4")]
		public void PlayerShotSelf()
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0x823DD8", Offset = "0x823DD8", VA = "0x823DD8")]
		public Player()
		{
		}
	}
	[Token(Token = "0x2000395")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A764", Offset = "0x74A764")]
	public class PlaySound : MonoBehaviour
	{
		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752F50", Offset = "0x752F50")]
		public AudioClip[] waveFile;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752F88", Offset = "0x752F88")]
		public bool stopOnPlay;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752FC0", Offset = "0x752FC0")]
		public bool disableOnEnd;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x752FF8", Offset = "0x752FF8")]
		public bool looping;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753030", Offset = "0x753030")]
		public bool stopOnEnd;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753068", Offset = "0x753068")]
		public bool playOnAwakeWithDelay;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7530A0", Offset = "0x7530A0")]
		public bool useRandomVolume;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7530D8", Offset = "0x7530D8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7530D8", Offset = "0x7530D8")]
		public float volMin;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75312C", Offset = "0x75312C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x75312C", Offset = "0x75312C")]
		public float volMax;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753180", Offset = "0x753180")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753180", Offset = "0x753180")]
		public bool useRandomPitch;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7531E0", Offset = "0x7531E0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7531E0", Offset = "0x7531E0")]
		public float pitchMin;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753234", Offset = "0x753234")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753234", Offset = "0x753234")]
		public float pitchMax;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753288", Offset = "0x753288")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753288", Offset = "0x753288")]
		public bool useRetriggerTime;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7532E8", Offset = "0x7532E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7532E8", Offset = "0x7532E8")]
		public float timeInitial;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753340", Offset = "0x753340")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753340", Offset = "0x753340")]
		public float timeMin;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753398", Offset = "0x753398")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753398", Offset = "0x753398")]
		public float timeMax;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7533F0", Offset = "0x7533F0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7533F0", Offset = "0x7533F0")]
		public bool useRandomSilence;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753450", Offset = "0x753450")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753450", Offset = "0x753450")]
		public float percentToNotPlay;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7534A4", Offset = "0x7534A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7534A4", Offset = "0x7534A4")]
		public float delayOffsetTime;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioClip clip;

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0x822744", Offset = "0x822744", VA = "0x822744")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0x82287C", Offset = "0x82287C", VA = "0x82287C")]
		public void Play()
		{
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0x82288C", Offset = "0x82288C", VA = "0x82288C")]
		public void PlayWithDelay(float delayTime)
		{
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0x8229C8", Offset = "0x8229C8", VA = "0x8229C8")]
		public AudioClip PlayOneShotSound()
		{
			return null;
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x822904", Offset = "0x822904", VA = "0x822904")]
		public AudioClip PlayLooping()
		{
			return null;
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x822BB0", Offset = "0x822BB0", VA = "0x822BB0")]
		public void Disable()
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0x822BD8", Offset = "0x822BD8", VA = "0x822BD8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0x822A90", Offset = "0x822A90", VA = "0x822A90")]
		private void SetAudioSource()
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0x822BF4", Offset = "0x822BF4", VA = "0x822BF4")]
		public PlaySound()
		{
		}
	}
	[Token(Token = "0x2000396")]
	public class SeeThru : MonoBehaviour
	{
		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material seeThruMaterial;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject seeThru;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Interactable interactable;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Renderer sourceRenderer;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Renderer destRenderer;

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0x823DE8", Offset = "0x823DE8", VA = "0x823DE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0x8243CC", Offset = "0x8243CC", VA = "0x8243CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0x824490", Offset = "0x824490", VA = "0x824490")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0x824554", Offset = "0x824554", VA = "0x824554")]
		private void AttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0x824574", Offset = "0x824574", VA = "0x824574")]
		private void DetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0x824594", Offset = "0x824594", VA = "0x824594")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0x8247E4", Offset = "0x8247E4", VA = "0x8247E4")]
		public SeeThru()
		{
		}
	}
	[Token(Token = "0x2000397")]
	public class SleepOnAwake : MonoBehaviour
	{
		[Token(Token = "0x6001DB9")]
		[Address(RVA = "0x8247EC", Offset = "0x8247EC", VA = "0x8247EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0x824898", Offset = "0x824898", VA = "0x824898")]
		public SleepOnAwake()
		{
		}
	}
	[Token(Token = "0x2000398")]
	public class SoundDeparent : MonoBehaviour
	{
		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool destroyAfterPlayOnce;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0x824900", Offset = "0x824900", VA = "0x824900")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0x824958", Offset = "0x824958", VA = "0x824958")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0x824A4C", Offset = "0x824A4C", VA = "0x824A4C")]
		public SoundDeparent()
		{
		}
	}
	[Token(Token = "0x2000399")]
	public class SoundPlayOneshot : MonoBehaviour
	{
		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] waveFiles;

		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float volMin;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volMax;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float pitchMin;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pitchMax;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool playOnAwake;

		[Token(Token = "0x6001DBE")]
		[Address(RVA = "0x824A5C", Offset = "0x824A5C", VA = "0x824A5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0x821D28", Offset = "0x821D28", VA = "0x821D28")]
		public void Play()
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0x824ACC", Offset = "0x824ACC", VA = "0x824ACC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0x824B60", Offset = "0x824B60", VA = "0x824B60")]
		public void UnPause()
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0x824BF4", Offset = "0x824BF4", VA = "0x824BF4")]
		public SoundPlayOneshot()
		{
		}
	}
	[Token(Token = "0x200039A")]
	public class SpawnAndAttachAfterControllerIsTracking : MonoBehaviour
	{
		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemPrefab;

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0x824BFC", Offset = "0x824BFC", VA = "0x824BFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0x824C54", Offset = "0x824C54", VA = "0x824C54")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0x824DE4", Offset = "0x824DE4", VA = "0x824DE4")]
		public SpawnAndAttachAfterControllerIsTracking()
		{
		}
	}
	[Token(Token = "0x200039B")]
	public class SpawnAndAttachToHand : MonoBehaviour
	{
		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject prefab;

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0x824DEC", Offset = "0x824DEC", VA = "0x824DEC")]
		public void SpawnAndAttach(Hand passedInhand)
		{
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x824F04", Offset = "0x824F04", VA = "0x824F04")]
		public SpawnAndAttachToHand()
		{
		}
	}
	[Token(Token = "0x200039C")]
	public class SpawnRenderModel : MonoBehaviour
	{
		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material[] materials;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SteamVR_RenderModel[] renderModels;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Hand hand;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<MeshRenderer> renderers;

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<SpawnRenderModel> spawnRenderModels;

		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int lastFrameUpdated;

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int spawnRenderModelUpdateIndex;

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0x824F0C", Offset = "0x824F0C", VA = "0x824F0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0x824FD8", Offset = "0x824FD8", VA = "0x824FD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0x825330", Offset = "0x825330", VA = "0x825330")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x8254DC", Offset = "0x8254DC", VA = "0x8254DC")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0x8254E4", Offset = "0x8254E4", VA = "0x8254E4")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0x8254EC", Offset = "0x8254EC", VA = "0x8254EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0x825078", Offset = "0x825078", VA = "0x825078")]
		private void ShowController()
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0x8253D0", Offset = "0x8253D0", VA = "0x8253D0")]
		private void HideController()
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0x825794", Offset = "0x825794", VA = "0x825794")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool success)
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0x825AC0", Offset = "0x825AC0", VA = "0x825AC0")]
		public SpawnRenderModel()
		{
		}
	}
	[Token(Token = "0x200039D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A7C8", Offset = "0x74A7C8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A7C8", Offset = "0x74A7C8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A7C8", Offset = "0x74A7C8")]
	public class Throwable : MonoBehaviour
	{
		[Token(Token = "0x2000629")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C6BC", Offset = "0x74C6BC")]
		private sealed class <LateDetach>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002193")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002194")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002195")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4002196")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Throwable <>4__this;

			[Token(Token = "0x170003CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002963")]
				[Address(RVA = "0x82D8D0", Offset = "0x82D8D0", VA = "0x82D8D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002965")]
				[Address(RVA = "0x82D93C", Offset = "0x82D93C", VA = "0x82D93C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002960")]
			[Address(RVA = "0x82D6E4", Offset = "0x82D6E4", VA = "0x82D6E4")]
			[DebuggerHidden]
			public <LateDetach>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6002961")]
			[Address(RVA = "0x82D804", Offset = "0x82D804", VA = "0x82D804", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002962")]
			[Address(RVA = "0x82D808", Offset = "0x82D808", VA = "0x82D808", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002964")]
			[Address(RVA = "0x82D8D8", Offset = "0x82D8D8", VA = "0x82D8D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[EnumFlags]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753504", Offset = "0x753504")]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753550", Offset = "0x753550")]
		public string attachmentPoint;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753588", Offset = "0x753588")]
		public float catchSpeedThreshold;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7535C0", Offset = "0x7535C0")]
		public bool restoreOriginalParent;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool attachEaseIn;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve snapAttachEaseInCurve;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float snapAttachEaseInTime;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] attachEaseInAttachmentNames;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VelocityEstimator velocityEstimator;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool attached;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float attachTime;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 attachPosition;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion attachRotation;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform attachEaseInTransform;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onPickUp;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onDetachFromHand;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool snapAttachEaseInCompleted;

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0x82C5DC", Offset = "0x82C5DC", VA = "0x82C5DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0x82C670", Offset = "0x82C670", VA = "0x82C670")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0x82C754", Offset = "0x82C754", VA = "0x82C754")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0x82C7E0", Offset = "0x82C7E0", VA = "0x82C7E0")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0x82C8C4", Offset = "0x82C8C4", VA = "0x82C8C4")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0x82CB70", Offset = "0x82CB70", VA = "0x82CB70")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x82D3E8", Offset = "0x82D3E8", VA = "0x82D3E8")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0x82D664", Offset = "0x82D664", VA = "0x82D664")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7593E8", Offset = "0x7593E8")]
		private IEnumerator LateDetach(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0x82D710", Offset = "0x82D710", VA = "0x82D710")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0x82D750", Offset = "0x82D750", VA = "0x82D750")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0x82D7B0", Offset = "0x82D7B0", VA = "0x82D7B0")]
		public Throwable()
		{
		}
	}
	[Token(Token = "0x200039E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A87C", Offset = "0x74A87C")]
	public class UIElement : MonoBehaviour
	{
		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CustomEvents.UnityEventHand onHandClick;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand currentHand;

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0x82D944", Offset = "0x82D944", VA = "0x82D944")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0x82DA34", Offset = "0x82DA34", VA = "0x82DA34")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x82DAF8", Offset = "0x82DAF8", VA = "0x82DAF8")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0x82DBC0", Offset = "0x82DBC0", VA = "0x82DBC0")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0x82DC9C", Offset = "0x82DC9C", VA = "0x82DC9C")]
		private void OnButtonClick()
		{
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0x82DCF8", Offset = "0x82DCF8", VA = "0x82DCF8")]
		public UIElement()
		{
		}
	}
	[Token(Token = "0x200039F")]
	public class Unparent : MonoBehaviour
	{
		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform oldParent;

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0x82DD00", Offset = "0x82DD00", VA = "0x82DD00")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0x82DE04", Offset = "0x82DE04", VA = "0x82DE04")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0x82DEC8", Offset = "0x82DEC8", VA = "0x82DEC8")]
		public Transform GetOldParent()
		{
			return null;
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0x82DED0", Offset = "0x82DED0", VA = "0x82DED0")]
		public Unparent()
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public static class Util
	{
		[Token(Token = "0x200062A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C6CC", Offset = "0x74C6CC")]
		private sealed class <WrapCoroutine>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002197")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002198")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002199")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IEnumerator coroutine;

			[Token(Token = "0x400219A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action onCoroutineFinished;

			[Token(Token = "0x170003CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002969")]
				[Address(RVA = "0x82FAB0", Offset = "0x82FAB0", VA = "0x82FAB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600296B")]
				[Address(RVA = "0x82FB1C", Offset = "0x82FB1C", VA = "0x82FB1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002966")]
			[Address(RVA = "0x82F1E8", Offset = "0x82F1E8", VA = "0x82F1E8")]
			[DebuggerHidden]
			public <WrapCoroutine>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x6002967")]
			[Address(RVA = "0x82F944", Offset = "0x82F944", VA = "0x82F944", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002968")]
			[Address(RVA = "0x82F948", Offset = "0x82F948", VA = "0x82F948", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600296A")]
			[Address(RVA = "0x82FAB8", Offset = "0x82FAB8", VA = "0x82FAB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200062B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C6DC", Offset = "0x74C6DC")]
		private sealed class <>c__47<T>
		{
			[Token(Token = "0x400219B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__47<T> <>9;

			[Token(Token = "0x400219C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, T> <>9__47_0;

			[Token(Token = "0x600296D")]
			public <>c__47()
			{
			}

			[Token(Token = "0x600296E")]
			internal T <Median>b__47_0(T x)
			{
				return (T)null;
			}
		}

		[Token(Token = "0x4001AC2")]
		public const float FeetToMeters = 0.3048f;

		[Token(Token = "0x4001AC3")]
		public const float FeetToCentimeters = 30.48f;

		[Token(Token = "0x4001AC4")]
		public const float InchesToMeters = 0.0254f;

		[Token(Token = "0x4001AC5")]
		public const float InchesToCentimeters = 2.54f;

		[Token(Token = "0x4001AC6")]
		public const float MetersToFeet = 3.28084f;

		[Token(Token = "0x4001AC7")]
		public const float MetersToInches = 39.3701f;

		[Token(Token = "0x4001AC8")]
		public const float CentimetersToFeet = 0.0328084f;

		[Token(Token = "0x4001AC9")]
		public const float CentimetersToInches = 0.393701f;

		[Token(Token = "0x4001ACA")]
		public const float KilometersToMiles = 0.621371f;

		[Token(Token = "0x4001ACB")]
		public const float MilesToKilometers = 1.60934f;

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0x821BA4", Offset = "0x821BA4", VA = "0x821BA4")]
		public static float RemapNumber(float num, float low1, float high1, float low2, float high2)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0x82040C", Offset = "0x82040C", VA = "0x82040C")]
		public static float RemapNumberClamped(float num, float low1, float high1, float low2, float high2)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0x82DED8", Offset = "0x82DED8", VA = "0x82DED8")]
		public static float Approach(float target, float value, float speed)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0x82DF00", Offset = "0x82DF00", VA = "0x82DF00")]
		public static Vector3 BezierInterpolate3(Vector3 p0, Vector3 c0, Vector3 p1, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0x82E018", Offset = "0x82E018", VA = "0x82E018")]
		public static Vector3 BezierInterpolate4(Vector3 p0, Vector3 c0, Vector3 c1, Vector3 p1, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0x82E1F0", Offset = "0x82E1F0", VA = "0x82E1F0")]
		public static Vector3 Vector3FromString(string szString)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0x82E338", Offset = "0x82E338", VA = "0x82E338")]
		public static Vector2 Vector2FromString(string szString)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0x82E480", Offset = "0x82E480", VA = "0x82E480")]
		public static float Normalize(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0x82E490", Offset = "0x82E490", VA = "0x82E490")]
		public static Vector3 Vector2AsVector3(Vector2 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0x82E4CC", Offset = "0x82E4CC", VA = "0x82E4CC")]
		public static Vector2 Vector3AsVector2(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0x82E4FC", Offset = "0x82E4FC", VA = "0x82E4FC")]
		public static float AngleOf(Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0x82E5B4", Offset = "0x82E5B4", VA = "0x82E5B4")]
		public static float YawOf(Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF4")]
		public static void Swap<T>(ref T lhs, ref T rhs)
		{
		}

		[Token(Token = "0x6001DF5")]
		public static void Shuffle<T>(T[] array)
		{
		}

		[Token(Token = "0x6001DF6")]
		public static void Shuffle<T>(List<T> list)
		{
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0x82E67C", Offset = "0x82E67C", VA = "0x82E67C")]
		public static int RandomWithLookback(int min, int max, List<int> history, int historyCount)
		{
			return default(int);
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0x82E780", Offset = "0x82E780", VA = "0x82E780")]
		public static Transform FindChild(Transform parent, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DF9")]
		public static bool IsNullOrEmpty<T>(T[] array)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DFA")]
		public static bool IsValidIndex<T>(T[] array, int i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DFB")]
		public static bool IsValidIndex<T>(List<T> list, int i)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DFC")]
		public static int FindOrAdd<T>(List<T> list, T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001DFD")]
		public static List<T> FindAndRemove<T>(List<T> list, Predicate<T> match)
		{
			return null;
		}

		[Token(Token = "0x6001DFE")]
		public static T FindOrAddComponent<T>(GameObject gameObject) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001DFF")]
		public static void FastRemove<T>(List<T> list, int index)
		{
		}

		[Token(Token = "0x6001E00")]
		public static void ReplaceGameObject<T, U>(T replace, U replaceWith) where T : MonoBehaviour where U : MonoBehaviour
		{
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0x82EA94", Offset = "0x82EA94", VA = "0x82EA94")]
		public static void SwitchLayerRecursively(Transform transform, int fromLayer, int toLayer)
		{
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0x82B034", Offset = "0x82B034", VA = "0x82B034")]
		public static void DrawCross(Vector3 origin, Color crossColor, float size)
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0x821F6C", Offset = "0x821F6C", VA = "0x821F6C")]
		public static void ResetTransform(Transform t, bool resetScale = true)
		{
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0x82EB50", Offset = "0x82EB50", VA = "0x82EB50")]
		public static Vector3 ClosestPointOnLine(Vector3 vA, Vector3 vB, Vector3 vPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0x82ED3C", Offset = "0x82ED3C", VA = "0x82ED3C")]
		public static void AfterTimer(GameObject go, float _time, Action callback, bool trigger_if_destroyed_early = false)
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0x82EDCC", Offset = "0x82EDCC", VA = "0x82EDCC")]
		public static void SendPhysicsMessage(Collider collider, string message, SendMessageOptions sendMessageOptions)
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0x82EEEC", Offset = "0x82EEEC", VA = "0x82EEEC")]
		public static void SendPhysicsMessage(Collider collider, string message, object arg, SendMessageOptions sendMessageOptions)
		{
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0x82F020", Offset = "0x82F020", VA = "0x82F020")]
		public static void IgnoreCollisions(GameObject goA, GameObject goB)
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0x82F168", Offset = "0x82F168", VA = "0x82F168")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75944C", Offset = "0x75944C")]
		public static IEnumerator WrapCoroutine(IEnumerator coroutine, Action onCoroutineFinished)
		{
			return null;
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0x82F214", Offset = "0x82F214", VA = "0x82F214")]
		public static Color ColorWithAlpha(this Color color, float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x82F21C", Offset = "0x82F21C", VA = "0x82F21C")]
		public static void Quit()
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0x82F240", Offset = "0x82F240", VA = "0x82F240")]
		public static decimal FloatToDecimal(float value, int decimalPlaces = 2)
		{
			return default(decimal);
		}

		[Token(Token = "0x6001E0D")]
		public static T Median<T>(this IEnumerable<T> source)
		{
			return (T)null;
		}

		[Token(Token = "0x6001E0E")]
		public static void ForEach<T>(this IEnumerable<T> source, Action<T> action)
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0x82F2F8", Offset = "0x82F2F8", VA = "0x82F2F8")]
		public static string FixupNewlines(string text)
		{
			return null;
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0x82F3B0", Offset = "0x82F3B0", VA = "0x82F3B0")]
		public static float PathLength(NavMeshPath path)
		{
			return default(float);
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0x82F534", Offset = "0x82F534", VA = "0x82F534")]
		public static bool HasCommandLineArgument(string argumentName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x82F5CC", Offset = "0x82F5CC", VA = "0x82F5CC")]
		public static int GetCommandLineArgValue(string argumentName, int nDefaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0x82F698", Offset = "0x82F698", VA = "0x82F698")]
		public static float GetCommandLineArgValue(string argumentName, float flDefaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0x82F7AC", Offset = "0x82F7AC", VA = "0x82F7AC")]
		public static void SetActive(GameObject gameObject, bool active)
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0x82F854", Offset = "0x82F854", VA = "0x82F854")]
		public static string CombinePaths(params string[] paths)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003A1")]
	public class AfterTimer_Component : MonoBehaviour
	{
		[Token(Token = "0x200062C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C6EC", Offset = "0x74C6EC")]
		private sealed class <Wait>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400219D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400219E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400219F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AfterTimer_Component <>4__this;

			[Token(Token = "0x170003CE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002972")]
				[Address(RVA = "0xAD6924", Offset = "0xAD6924", VA = "0xAD6924", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002974")]
				[Address(RVA = "0xAD6990", Offset = "0xAD6990", VA = "0xAD6990", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600296F")]
			[Address(RVA = "0xAD6794", Offset = "0xAD6794", VA = "0xAD6794")]
			[DebuggerHidden]
			public <Wait>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6002970")]
			[Address(RVA = "0xAD682C", Offset = "0xAD682C", VA = "0xAD682C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002971")]
			[Address(RVA = "0xAD6830", Offset = "0xAD6830", VA = "0xAD6830", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002973")]
			[Address(RVA = "0xAD692C", Offset = "0xAD692C", VA = "0xAD692C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action callback;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float triggerTime;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool timerActive;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool triggerOnEarlyDestroy;

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0xAD66DC", Offset = "0xAD66DC", VA = "0xAD66DC")]
		public void Init(float _time, Action _callback, bool earlydestroy)
		{
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0xAD6720", Offset = "0xAD6720", VA = "0xAD6720")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7594E0", Offset = "0x7594E0")]
		private IEnumerator Wait()
		{
			return null;
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0xAD67C0", Offset = "0xAD67C0", VA = "0xAD67C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0xAD6824", Offset = "0xAD6824", VA = "0xAD6824")]
		public AfterTimer_Component()
		{
		}
	}
	[Token(Token = "0x20003A2")]
	public class VelocityEstimator : MonoBehaviour
	{
		[Token(Token = "0x200062D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C6FC", Offset = "0x74C6FC")]
		private sealed class <EstimateVelocityCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VelocityEstimator <>4__this;

			[Token(Token = "0x40021A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <previousPosition>5__2;

			[Token(Token = "0x40021A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <previousRotation>5__3;

			[Token(Token = "0x170003D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002978")]
				[Address(RVA = "0x83024C", Offset = "0x83024C", VA = "0x83024C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600297A")]
				[Address(RVA = "0x8302B8", Offset = "0x8302B8", VA = "0x8302B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002975")]
			[Address(RVA = "0x82FE10", Offset = "0x82FE10", VA = "0x82FE10")]
			[DebuggerHidden]
			public <EstimateVelocityCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002976")]
			[Address(RVA = "0x82FE50", Offset = "0x82FE50", VA = "0x82FE50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002977")]
			[Address(RVA = "0x82FE54", Offset = "0x82FE54", VA = "0x82FE54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002979")]
			[Address(RVA = "0x830254", Offset = "0x830254", VA = "0x830254", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7535F8", Offset = "0x7535F8")]
		public int velocityAverageFrames;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753630", Offset = "0x753630")]
		public int angularVelocityAverageFrames;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool estimateOnAwake;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine routine;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int sampleCount;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] velocitySamples;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] angularVelocitySamples;

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0x82CB20", Offset = "0x82CB20", VA = "0x82CB20")]
		public void BeginEstimatingVelocity()
		{
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0x82D014", Offset = "0x82D014", VA = "0x82D014")]
		public void FinishEstimatingVelocity()
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0x82D048", Offset = "0x82D048", VA = "0x82D048")]
		public Vector3 GetVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0x82D218", Offset = "0x82D218", VA = "0x82D218")]
		public Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x82FB98", Offset = "0x82FB98", VA = "0x82FB98")]
		public Vector3 GetAccelerationEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0x82FD90", Offset = "0x82FD90", VA = "0x82FD90")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0x82FB24", Offset = "0x82FB24", VA = "0x82FB24")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759544", Offset = "0x759544")]
		private IEnumerator EstimateVelocityCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0x82FE3C", Offset = "0x82FE3C", VA = "0x82FE3C")]
		public VelocityEstimator()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public class ControllerButtonHints : MonoBehaviour
	{
		[Token(Token = "0x200062E")]
		private enum OffsetType
		{
			[Token(Token = "0x40021A6")]
			Up,
			[Token(Token = "0x40021A7")]
			Right,
			[Token(Token = "0x40021A8")]
			Forward,
			[Token(Token = "0x40021A9")]
			Back
		}

		[Token(Token = "0x200062F")]
		private class ButtonHintInfo
		{
			[Token(Token = "0x40021AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string componentName;

			[Token(Token = "0x40021AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<MeshRenderer> renderers;

			[Token(Token = "0x40021AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform localTransform;

			[Token(Token = "0x40021AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject textHintObject;

			[Token(Token = "0x40021AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform textStartAnchor;

			[Token(Token = "0x40021AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform textEndAnchor;

			[Token(Token = "0x40021B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 textEndOffsetDir;

			[Token(Token = "0x40021B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform canvasOffset;

			[Token(Token = "0x40021B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Text text;

			[Token(Token = "0x40021B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public TextMesh textMesh;

			[Token(Token = "0x40021B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Canvas textCanvas;

			[Token(Token = "0x40021B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public LineRenderer line;

			[Token(Token = "0x40021B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float distanceFromCenter;

			[Token(Token = "0x40021B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public bool textHintActive;

			[Token(Token = "0x600297B")]
			[Address(RVA = "0xAE0EE8", Offset = "0xAE0EE8", VA = "0xAE0EE8")]
			public ButtonHintInfo()
			{
			}
		}

		[Token(Token = "0x2000630")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C70C", Offset = "0x74C70C")]
		private sealed class <TestButtonHints>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerButtonHints <>4__this;

			[Token(Token = "0x170003D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600297F")]
				[Address(RVA = "0xAE2AAC", Offset = "0xAE2AAC", VA = "0xAE2AAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002981")]
				[Address(RVA = "0xAE2B18", Offset = "0xAE2B18", VA = "0xAE2B18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600297C")]
			[Address(RVA = "0xAE1724", Offset = "0xAE1724", VA = "0xAE1724")]
			[DebuggerHidden]
			public <TestButtonHints>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x600297D")]
			[Address(RVA = "0xAE2814", Offset = "0xAE2814", VA = "0xAE2814", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600297E")]
			[Address(RVA = "0xAE2818", Offset = "0xAE2818", VA = "0xAE2818", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002980")]
			[Address(RVA = "0xAE2AB4", Offset = "0xAE2AB4", VA = "0xAE2AB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000631")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C71C", Offset = "0x74C71C")]
		private sealed class <TestTextHints>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerButtonHints <>4__this;

			[Token(Token = "0x170003D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002985")]
				[Address(RVA = "0xAE2D58", Offset = "0xAE2D58", VA = "0xAE2D58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002987")]
				[Address(RVA = "0xAE2DC4", Offset = "0xAE2DC4", VA = "0xAE2DC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002982")]
			[Address(RVA = "0xAE17C4", Offset = "0xAE17C4", VA = "0xAE17C4")]
			[DebuggerHidden]
			public <TestTextHints>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6002983")]
			[Address(RVA = "0xAE2B20", Offset = "0xAE2B20", VA = "0xAE2B20", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002984")]
			[Address(RVA = "0xAE2B24", Offset = "0xAE2B24", VA = "0xAE2B24", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002986")]
			[Address(RVA = "0xAE2D60", Offset = "0xAE2D60", VA = "0xAE2D60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material controllerMaterial;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color flashColor;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject textHintPrefab;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753668", Offset = "0x753668")]
		public bool debugHints;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_RenderModel renderModel;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Player player;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<MeshRenderer> renderers;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<MeshRenderer> flashingRenderers;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float startTime;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float tickCount;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<EVRButtonId, ButtonHintInfo> buttonHintInfos;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform textHintParent;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<KeyValuePair<string, ulong>> componentButtonMasks;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int colorID;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7536A0", Offset = "0x7536A0")]
		private bool <initialized>k__BackingField;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 centerPosition;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x17000309")]
		public bool initialized
		{
			[Token(Token = "0x6001E22")]
			[Address(RVA = "0xADE9DC", Offset = "0xADE9DC", VA = "0xADE9DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7595A8", Offset = "0x7595A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E23")]
			[Address(RVA = "0xADE9E4", Offset = "0xADE9E4", VA = "0xADE9E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7595B8", Offset = "0x7595B8")]
			private set
			{
			}
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0xADE9F0", Offset = "0xADE9F0", VA = "0xADE9F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0xADEAAC", Offset = "0xADEAAC", VA = "0xADEAAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0xADEAD4", Offset = "0xADEAD4", VA = "0xADEAD4")]
		private void HintDebugLog(string msg)
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0xADEB80", Offset = "0xADEB80", VA = "0xADEB80")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0xADEBA0", Offset = "0xADEBA0", VA = "0xADEBA0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0xADEC40", Offset = "0xADEC40", VA = "0xADEC40")]
		private void OnParentHandInputFocusLost()
		{
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0xADEDD8", Offset = "0xADEDD8", VA = "0xADEDD8")]
		private void OnHandInitialized(int deviceIndex)
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0xADEFB4", Offset = "0xADEFB4", VA = "0xADEFB4")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool succeess)
		{
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0xADF898", Offset = "0xADF898", VA = "0xADF898")]
		private void CreateAndAddButtonInfo(EVRButtonId buttonID)
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0xAE0974", Offset = "0xAE0974", VA = "0xAE0974")]
		private void ComputeTextEndTransforms()
		{
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0xAE0EF0", Offset = "0xAE0EF0", VA = "0xAE0EF0")]
		private void ShowButtonHint(params EVRButtonId[] buttons)
		{
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0xADEC64", Offset = "0xADEC64", VA = "0xADEC64")]
		private void HideAllButtonHints()
		{
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0xAE12A0", Offset = "0xAE12A0", VA = "0xAE12A0")]
		private void HideButtonHint(params EVRButtonId[] buttons)
		{
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0xAE1540", Offset = "0xAE1540", VA = "0xAE1540")]
		private bool IsButtonHintActive(EVRButtonId button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0xAE16B0", Offset = "0xAE16B0", VA = "0xAE16B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7595C8", Offset = "0x7595C8")]
		private IEnumerator TestButtonHints()
		{
			return null;
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0xAE1750", Offset = "0xAE1750", VA = "0xAE1750")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75962C", Offset = "0x75962C")]
		private IEnumerator TestTextHints()
		{
			return null;
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0xAE17F0", Offset = "0xAE17F0", VA = "0xAE17F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0xAE1B08", Offset = "0xAE1B08", VA = "0xAE1B08")]
		private void UpdateTextHint(ButtonHintInfo hintInfo)
		{
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0xADEBD8", Offset = "0xADEBD8", VA = "0xADEBD8")]
		private void Clear()
		{
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0xAE1E14", Offset = "0xAE1E14", VA = "0xAE1E14")]
		private void ShowText(EVRButtonId button, string text, bool highlightButton = true)
		{
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0xAE1FFC", Offset = "0xAE1FFC", VA = "0xAE1FFC")]
		private void HideText(EVRButtonId button)
		{
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0xADECA4", Offset = "0xADECA4", VA = "0xADECA4")]
		private void HideAllText()
		{
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0xAE20F8", Offset = "0xAE20F8", VA = "0xAE20F8")]
		private string GetActiveHintText(EVRButtonId button)
		{
			return null;
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0xAE21C8", Offset = "0xAE21C8", VA = "0xAE21C8")]
		private static ControllerButtonHints GetControllerButtonHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0xADBD90", Offset = "0xADBD90", VA = "0xADBD90")]
		public static void ShowButtonHint(Hand hand, params EVRButtonId[] buttons)
		{
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0xADBB94", Offset = "0xADBB94", VA = "0xADBB94")]
		public static void HideButtonHint(Hand hand, params EVRButtonId[] buttons)
		{
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0xAE22A4", Offset = "0xAE22A4", VA = "0xAE22A4")]
		public static void HideAllButtonHints(Hand hand)
		{
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0xAE2344", Offset = "0xAE2344", VA = "0xAE2344")]
		public static bool IsButtonHintActive(Hand hand, EVRButtonId button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0xAE23FC", Offset = "0xAE23FC", VA = "0xAE23FC")]
		public static void ShowTextHint(Hand hand, EVRButtonId button, string text, bool highlightButton = true)
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0xAE24CC", Offset = "0xAE24CC", VA = "0xAE24CC")]
		public static void HideTextHint(Hand hand, EVRButtonId button)
		{
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0xAE2580", Offset = "0xAE2580", VA = "0xAE2580")]
		public static void HideAllTextHints(Hand hand)
		{
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0xAE2620", Offset = "0xAE2620", VA = "0xAE2620")]
		public static string GetActiveHintText(Hand hand, EVRButtonId button)
		{
			return null;
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0xAE26E8", Offset = "0xAE26E8", VA = "0xAE26E8")]
		public ControllerButtonHints()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public class ArcheryTarget : MonoBehaviour
	{
		[Token(Token = "0x2000632")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C72C", Offset = "0x74C72C")]
		private sealed class <FallDown>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArcheryTarget <>4__this;

			[Token(Token = "0x40021C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Quaternion <startingRot>5__2;

			[Token(Token = "0x40021C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__3;

			[Token(Token = "0x40021C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <rotLerp>5__4;

			[Token(Token = "0x170003D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600298B")]
				[Address(RVA = "0xAD6CD0", Offset = "0xAD6CD0", VA = "0xAD6CD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600298D")]
				[Address(RVA = "0xAD6D3C", Offset = "0xAD6D3C", VA = "0xAD6D3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002988")]
			[Address(RVA = "0xAD6A80", Offset = "0xAD6A80", VA = "0xAD6A80")]
			[DebuggerHidden]
			public <FallDown>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6002989")]
			[Address(RVA = "0xAD6AC4", Offset = "0xAD6AC4", VA = "0xAD6AC4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600298A")]
			[Address(RVA = "0xAD6AC8", Offset = "0xAD6AC8", VA = "0xAD6AC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600298C")]
			[Address(RVA = "0xAD6CD8", Offset = "0xAD6CD8", VA = "0xAD6CD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onTakeDamage;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool onceOnly;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform targetCenter;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform baseTransform;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform fallenDownTransform;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fallTime;

		[Token(Token = "0x4001AEE")]
		private const float targetRadius = 0.25f;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool targetEnabled;

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0xAD69A8", Offset = "0xAD69A8", VA = "0xAD69A8")]
		private void ApplyDamage()
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0xAD6A08", Offset = "0xAD6A08", VA = "0xAD6A08")]
		private void FireExposure()
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0xAD69AC", Offset = "0xAD69AC", VA = "0xAD69AC")]
		private void OnDamageTaken()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0xAD6A0C", Offset = "0xAD6A0C", VA = "0xAD6A0C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759690", Offset = "0x759690")]
		private IEnumerator FallDown()
		{
			return null;
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0xAD6AAC", Offset = "0xAD6AAC", VA = "0xAD6AAC")]
		public ArcheryTarget()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem glintParticle;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody arrowHeadRB;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody shaftRB;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PhysicMaterial targetPhysMaterial;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 prevPosition;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion prevRotation;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 prevVelocity;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 prevHeadPosition;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SoundPlayOneshot fireReleaseSound;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SoundPlayOneshot airReleaseSound;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public SoundPlayOneshot hitTargetSound;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public PlaySound hitGroundSound;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool inFlight;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool released;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool hasSpreadFire;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int travelledFrames;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject scaleParentObject;

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0xAD6D44", Offset = "0xAD6D44", VA = "0xAD6D44")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0xAD6DBC", Offset = "0xAD6DBC", VA = "0xAD6DBC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0xAD6EA8", Offset = "0xAD6EA8", VA = "0xAD6EA8")]
		public void ArrowReleased(float inputVelocity)
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0xAD72BC", Offset = "0xAD72BC", VA = "0xAD72BC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0xAD7994", Offset = "0xAD7994", VA = "0xAD7994")]
		private void StickInTarget(Collision collision, bool bSkipRayCast)
		{
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0xAD8030", Offset = "0xAD8030", VA = "0xAD8030")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0xAD80E4", Offset = "0xAD80E4", VA = "0xAD80E4")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public class ArrowHand : MonoBehaviour
	{
		[Token(Token = "0x2000633")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C73C", Offset = "0x74C73C")]
		private sealed class <ArrowReleaseHaptics>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArrowHand <>4__this;

			[Token(Token = "0x170003D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002991")]
				[Address(RVA = "0xAD9270", Offset = "0xAD9270", VA = "0xAD9270", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002993")]
				[Address(RVA = "0xAD92DC", Offset = "0xAD92DC", VA = "0xAD92DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600298E")]
			[Address(RVA = "0xAD8FB8", Offset = "0xAD8FB8", VA = "0xAD8FB8")]
			[DebuggerHidden]
			public <ArrowReleaseHaptics>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x600298F")]
			[Address(RVA = "0xAD9058", Offset = "0xAD9058", VA = "0xAD9058", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002990")]
			[Address(RVA = "0xAD905C", Offset = "0xAD905C", VA = "0xAD905C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002992")]
			[Address(RVA = "0xAD9278", Offset = "0xAD9278", VA = "0xAD9278", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Longbow bow;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject currentArrow;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject arrowPrefab;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform arrowNockTransform;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float nockDistance;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lerpCompleteDistance;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rotationLerpThreshold;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float positionLerpThreshold;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool allowArrowSpawn;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool nocked;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool inNockRange;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		private bool arrowLerpComplete;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SoundPlayOneshot arrowSpawnSound;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AllowTeleportWhileAttachedToHand allowTeleport;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int maxArrowCount;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<GameObject> arrowList;

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0xAD80EC", Offset = "0xAD80EC", VA = "0xAD80EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0xAD8190", Offset = "0xAD8190", VA = "0xAD8190")]
		private void OnAttachedToHand(Hand attachedHand)
		{
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0xAD8204", Offset = "0xAD8204", VA = "0xAD8204")]
		private GameObject InstantiateArrow()
		{
			return null;
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0xAD8424", Offset = "0xAD8424", VA = "0xAD8424")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0xAD8EBC", Offset = "0xAD8EBC", VA = "0xAD8EBC")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0xAD8B7C", Offset = "0xAD8B7C", VA = "0xAD8B7C")]
		private void FireArrow()
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0xAD8FAC", Offset = "0xAD8FAC", VA = "0xAD8FAC")]
		private void EnableArrowSpawn()
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0xAD8F38", Offset = "0xAD8F38", VA = "0xAD8F38")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7596F4", Offset = "0x7596F4")]
		private IEnumerator ArrowReleaseHaptics()
		{
			return null;
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0xAD8FE4", Offset = "0xAD8FE4", VA = "0xAD8FE4")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0xAD900C", Offset = "0xAD900C", VA = "0xAD900C")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0xAD8198", Offset = "0xAD8198", VA = "0xAD8198")]
		private void FindBow()
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0xAD9034", Offset = "0xAD9034", VA = "0xAD9034")]
		public ArrowHand()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public class ArrowheadRotation : MonoBehaviour
	{
		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0xAD92E4", Offset = "0xAD92E4", VA = "0xAD92E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xAD9380", Offset = "0xAD9380", VA = "0xAD9380")]
		public ArrowheadRotation()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public class Balloon : MonoBehaviour
	{
		[Token(Token = "0x2000634")]
		public enum BalloonColor
		{
			[Token(Token = "0x40021C8")]
			Red,
			[Token(Token = "0x40021C9")]
			OrangeRed,
			[Token(Token = "0x40021CA")]
			Orange,
			[Token(Token = "0x40021CB")]
			YellowOrange,
			[Token(Token = "0x40021CC")]
			Yellow,
			[Token(Token = "0x40021CD")]
			GreenYellow,
			[Token(Token = "0x40021CE")]
			Green,
			[Token(Token = "0x40021CF")]
			BlueGreen,
			[Token(Token = "0x40021D0")]
			Blue,
			[Token(Token = "0x40021D1")]
			VioletBlue,
			[Token(Token = "0x40021D2")]
			Violet,
			[Token(Token = "0x40021D3")]
			RedViolet,
			[Token(Token = "0x40021D4")]
			LightGray,
			[Token(Token = "0x40021D5")]
			DarkGray,
			[Token(Token = "0x40021D6")]
			Random
		}

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject popPrefab;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxVelocity;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lifetime;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool burstOnLifetimeEnd;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject lifetimeEndParticlePrefab;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundPlayOneshot lifetimeEndSound;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float destructTime;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float releaseTime;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SoundPlayOneshot collisionSound;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastSoundTime;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float soundDelay;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody balloonRigidbody;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool bParticlesSpawned;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float s_flLastDeathSound;

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0xAD9388", Offset = "0xAD9388", VA = "0xAD9388")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0xAD9424", Offset = "0xAD9424", VA = "0xAD9424")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0xAD94E0", Offset = "0xAD94E0", VA = "0xAD94E0")]
		private void SpawnParticles(GameObject particlePrefab, SoundPlayOneshot sound)
		{
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0xAD9740", Offset = "0xAD9740", VA = "0xAD9740")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0xAD9844", Offset = "0xAD9844", VA = "0xAD9844")]
		private void ApplyDamage()
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0xAD98D0", Offset = "0xAD98D0", VA = "0xAD98D0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0xAD9C18", Offset = "0xAD9C18", VA = "0xAD9C18")]
		public void SetColor(BalloonColor color)
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0xAD9CAC", Offset = "0xAD9CAC", VA = "0xAD9CAC")]
		private Color BalloonColorToRGB(BalloonColor balloonColorVar)
		{
			return default(Color);
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0xAD9EE4", Offset = "0xAD9EE4", VA = "0xAD9EE4")]
		public Balloon()
		{
		}
	}
	[Token(Token = "0x20003A9")]
	public class BalloonColliders : MonoBehaviour
	{
		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] colliders;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] colliderLocalPositions;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion[] colliderLocalRotations;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0xAD9F14", Offset = "0xAD9F14", VA = "0xAD9F14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0xADA138", Offset = "0xADA138", VA = "0xADA138")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0xADA3B4", Offset = "0xADA3B4", VA = "0xADA3B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0xADA510", Offset = "0xADA510", VA = "0xADA510")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0xADA5CC", Offset = "0xADA5CC", VA = "0xADA5CC")]
		public BalloonColliders()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	public class BalloonHapticBump : MonoBehaviour
	{
		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject physParent;

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0xADA5D4", Offset = "0xADA5D4", VA = "0xADA5D4")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0xADA6FC", Offset = "0xADA6FC", VA = "0xADA6FC")]
		public BalloonHapticBump()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	public class BalloonSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minSpawnTime;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxSpawnTime;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float nextSpawnTime;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject balloonPrefab;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool autoSpawn;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool spawnAtStartup;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool playSounds;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SoundPlayOneshot inflateSound;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundPlayOneshot stretchSound;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool sendSpawnMessageToParent;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float scale;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform spawnDirectionTransform;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float spawnForce;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool attachBalloon;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Balloon.BalloonColor color;

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0xADA704", Offset = "0xADA704", VA = "0xADA704")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0xADAB90", Offset = "0xADAB90", VA = "0xADAB90")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0xADA7C0", Offset = "0xADA7C0", VA = "0xADA7C0")]
		public GameObject SpawnBalloon(Balloon.BalloonColor color = Balloon.BalloonColor.Red)
		{
			return null;
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0xADAC58", Offset = "0xADAC58", VA = "0xADAC58")]
		public void SpawnBalloonFromEvent(int color)
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0xADAC5C", Offset = "0xADAC5C", VA = "0xADAC5C")]
		public BalloonSpawner()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public class ExplosionWobble : MonoBehaviour
	{
		[Token(Token = "0x6001E75")]
		[Address(RVA = "0xAE4A94", Offset = "0xAE4A94", VA = "0xAE4A94")]
		public void ExplosionEvent(Vector3 explosionPos)
		{
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0xAE4B7C", Offset = "0xAE4B7C", VA = "0xAE4B7C")]
		public ExplosionWobble()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	public class FireSource : MonoBehaviour
	{
		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject fireParticlePrefab;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool startActive;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject fireObject;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem customParticles;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isBurning;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float burnTime;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ignitionDelay;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float ignitionTime;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Hand hand;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSource ignitionSound;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool canSpreadFromThisSource;

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0xAE4FF0", Offset = "0xAE4FF0", VA = "0xAE4FF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0xAE5244", Offset = "0xAE5244", VA = "0xAE5244")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0xAE534C", Offset = "0xAE534C", VA = "0xAE534C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0xAE53DC", Offset = "0xAE53DC", VA = "0xAE53DC")]
		private void FireExposure()
		{
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0xAE5000", Offset = "0xAE5000", VA = "0xAE5000")]
		private void StartBurning()
		{
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0xAE54F0", Offset = "0xAE54F0", VA = "0xAE54F0")]
		public FireSource()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A8F0", Offset = "0x74A8F0")]
	public class Longbow : MonoBehaviour
	{
		[Token(Token = "0x2000635")]
		public enum Handedness
		{
			[Token(Token = "0x40021D8")]
			Left,
			[Token(Token = "0x40021D9")]
			Right
		}

		[Token(Token = "0x2000636")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C74C", Offset = "0x74C74C")]
		private sealed class <ResetDrawAnim>d__55 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Longbow <>4__this;

			[Token(Token = "0x40021DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x40021DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <startLerp>5__3;

			[Token(Token = "0x170003DA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002997")]
				[Address(RVA = "0x8226D0", Offset = "0x8226D0", VA = "0x8226D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002999")]
				[Address(RVA = "0x82273C", Offset = "0x82273C", VA = "0x82273C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002994")]
			[Address(RVA = "0x821EE4", Offset = "0x821EE4", VA = "0x821EE4")]
			[DebuggerHidden]
			public <ResetDrawAnim>d__55(int <>1__state)
			{
			}

			[Token(Token = "0x6002995")]
			[Address(RVA = "0x8225DC", Offset = "0x8225DC", VA = "0x8225DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002996")]
			[Address(RVA = "0x8225E0", Offset = "0x8225E0", VA = "0x8225E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002998")]
			[Address(RVA = "0x8226D8", Offset = "0x8226D8", VA = "0x8226D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Handedness currentHandGuess;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float timeOfPossibleHandSwitch;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float timeBeforeConfirmingHandSwitch;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool possibleHandSwitch;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform pivotTransform;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform handleTransform;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ArrowHand arrowHand;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform nockTransform;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform nockRestTransform;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool autoSpawnArrowHand;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ItemPackage arrowHandItemPackage;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject arrowHandPrefab;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool nocked;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool pulled;

		[Token(Token = "0x4001B4F")]
		private const float minPull = 0.05f;

		[Token(Token = "0x4001B50")]
		private const float maxPull = 0.5f;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float nockDistanceTravelled;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float hapticDistanceThreshold;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float lastTickDistance;

		[Token(Token = "0x4001B54")]
		private const float bowPullPulseStrengthLow = 100f;

		[Token(Token = "0x4001B55")]
		private const float bowPullPulseStrengthHigh = 500f;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 bowLeftVector;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float arrowMinVelocity;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float arrowMaxVelocity;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float arrowVelocity;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float minStrainTickTime;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float maxStrainTickTime;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float nextStrainTick;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool lerpBackToZeroRotation;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float lerpStartTime;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float lerpDuration;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion lerpStartRotation;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float nockLerpStartTime;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion nockLerpStartRotation;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float drawOffset;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public LinearMapping bowDrawLinearMapping;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool deferNewPoses;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 lateUpdatePos;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Quaternion lateUpdateRot;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public SoundBowClick drawSound;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float drawTension;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SoundPlayOneshot arrowSlideSound;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SoundPlayOneshot releaseSound;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public SoundPlayOneshot nockSound;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private SteamVR_Events.Action newPosesAppliedAction;

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0x821014", Offset = "0x821014", VA = "0x821014")]
		private void OnAttachedToHand(Hand attachedHand)
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0x82101C", Offset = "0x82101C", VA = "0x82101C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0x8210B8", Offset = "0x8210B8", VA = "0x8210B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0x8210D8", Offset = "0x8210D8", VA = "0x8210D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0x8210F8", Offset = "0x8210F8", VA = "0x8210F8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0x821160", Offset = "0x821160", VA = "0x821160")]
		private void OnNewPosesApplied()
		{
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0x8211CC", Offset = "0x8211CC", VA = "0x8211CC")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0x821C20", Offset = "0x821C20", VA = "0x821C20")]
		public void ArrowReleased()
		{
		}

		[Token(Token = "0x6001E85")]
		[Address(RVA = "0x821E70", Offset = "0x821E70", VA = "0x821E70")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759758", Offset = "0x759758")]
		private IEnumerator ResetDrawAnim()
		{
			return null;
		}

		[Token(Token = "0x6001E86")]
		[Address(RVA = "0x821F10", Offset = "0x821F10", VA = "0x821F10")]
		public float GetArrowVelocity()
		{
			return default(float);
		}

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0x821F18", Offset = "0x821F18", VA = "0x821F18")]
		public void StartRotationLerp()
		{
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0x82206C", Offset = "0x82206C", VA = "0x82206C")]
		public void StartNock(ArrowHand currentArrowHand)
		{
		}

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0x821A04", Offset = "0x821A04", VA = "0x821A04")]
		private void EvaluateHandedness()
		{
		}

		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0x82212C", Offset = "0x82212C", VA = "0x82212C")]
		private void DoHandednessCheck()
		{
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0x8221B0", Offset = "0x8221B0", VA = "0x8221B0")]
		public void ArrowInPosition()
		{
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0x822248", Offset = "0x822248", VA = "0x822248")]
		public void ReleaseNock()
		{
		}

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0x8222D4", Offset = "0x8222D4", VA = "0x8222D4")]
		private void ShutDown()
		{
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0x8224A4", Offset = "0x8224A4", VA = "0x8224A4")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0x8224CC", Offset = "0x8224CC", VA = "0x8224CC")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0x82250C", Offset = "0x82250C", VA = "0x82250C")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0x822588", Offset = "0x822588", VA = "0x822588")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0x82258C", Offset = "0x82258C", VA = "0x82258C")]
		public Longbow()
		{
		}
	}
	[Token(Token = "0x20003AF")]
	public class SoundBowClick : MonoBehaviour
	{
		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip bowClick;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve pitchTensionCurve;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minPitch;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxPitch;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0x8248A0", Offset = "0x8248A0", VA = "0x8248A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0x821BC0", Offset = "0x821BC0", VA = "0x821BC0")]
		public void PlayBowTensionClicks(float normalizedTension)
		{
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0x8248F8", Offset = "0x8248F8", VA = "0x8248F8")]
		public SoundBowClick()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class ControllerHintsExample : MonoBehaviour
	{
		[Token(Token = "0x2000637")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C75C", Offset = "0x74C75C")]
		private sealed class <TestButtonHints>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x170003DC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600299D")]
				[Address(RVA = "0xAE3364", Offset = "0xAE3364", VA = "0xAE3364", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600299F")]
				[Address(RVA = "0xAE33D0", Offset = "0xAE33D0", VA = "0xAE33D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600299A")]
			[Address(RVA = "0xAE3020", Offset = "0xAE3020", VA = "0xAE3020")]
			[DebuggerHidden]
			public <TestButtonHints>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600299B")]
			[Address(RVA = "0xAE3080", Offset = "0xAE3080", VA = "0xAE3080", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600299C")]
			[Address(RVA = "0xAE3084", Offset = "0xAE3084", VA = "0xAE3084", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600299E")]
			[Address(RVA = "0xAE336C", Offset = "0xAE336C", VA = "0xAE336C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000638")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C76C", Offset = "0x74C76C")]
		private sealed class <TestTextHints>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x170003DE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029A3")]
				[Address(RVA = "0xAE3624", Offset = "0xAE3624", VA = "0xAE3624", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029A5")]
				[Address(RVA = "0xAE3690", Offset = "0xAE3690", VA = "0xAE3690", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029A0")]
			[Address(RVA = "0xAE304C", Offset = "0xAE304C", VA = "0xAE304C")]
			[DebuggerHidden]
			public <TestTextHints>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60029A1")]
			[Address(RVA = "0xAE33D8", Offset = "0xAE33D8", VA = "0xAE33D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029A2")]
			[Address(RVA = "0xAE33DC", Offset = "0xAE33DC", VA = "0xAE33DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029A4")]
			[Address(RVA = "0xAE362C", Offset = "0xAE362C", VA = "0xAE362C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine buttonHintCoroutine;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine textHintCoroutine;

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0xAE2DCC", Offset = "0xAE2DCC", VA = "0xAE2DCC")]
		public void ShowButtonHints(Hand hand)
		{
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0xAE2E94", Offset = "0xAE2E94", VA = "0xAE2E94")]
		public void ShowTextHints(Hand hand)
		{
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0xAE2F5C", Offset = "0xAE2F5C", VA = "0xAE2F5C")]
		public void DisableHints()
		{
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0xAE2E20", Offset = "0xAE2E20", VA = "0xAE2E20")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7597BC", Offset = "0x7597BC")]
		private IEnumerator TestButtonHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0xAE2EE8", Offset = "0xAE2EE8", VA = "0xAE2EE8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759820", Offset = "0x759820")]
		private IEnumerator TestTextHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0xAE3078", Offset = "0xAE3078", VA = "0xAE3078")]
		public ControllerHintsExample()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74A954", Offset = "0x74A954")]
	public class InteractableExample : MonoBehaviour
	{
		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMesh textMesh;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 oldPosition;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion oldRotation;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float attachTime;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0x81E5E0", Offset = "0x81E5E0", VA = "0x81E5E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0x81E650", Offset = "0x81E650", VA = "0x81E650")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0x81E6E4", Offset = "0x81E6E4", VA = "0x81E6E4")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0x81E740", Offset = "0x81E740", VA = "0x81E740")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0x81E944", Offset = "0x81E944", VA = "0x81E944")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0x81E9E8", Offset = "0x81E9E8", VA = "0x81E9E8")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0x81EA7C", Offset = "0x81EA7C", VA = "0x81EA7C")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0x81EB58", Offset = "0x81EB58", VA = "0x81EB58")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0x81EB5C", Offset = "0x81EB5C", VA = "0x81EB5C")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0x81EB60", Offset = "0x81EB60", VA = "0x81EB60")]
		public InteractableExample()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	public class AllowTeleportWhileAttachedToHand : MonoBehaviour
	{
		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool teleportAllowed;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool overrideHoverLock;

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0xAD6998", Offset = "0xAD6998", VA = "0xAD6998")]
		public AllowTeleportWhileAttachedToHand()
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public class ChaperoneInfo : MonoBehaviour
	{
		[Token(Token = "0x2000639")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C77C", Offset = "0x74C77C")]
		private sealed class <Start>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ChaperoneInfo <>4__this;

			[Token(Token = "0x40021E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRChaperone <chaperone>5__2;

			[Token(Token = "0x170003E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029A9")]
				[Address(RVA = "0xADB568", Offset = "0xADB568", VA = "0xADB568", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029AB")]
				[Address(RVA = "0xADB5D4", Offset = "0xADB5D4", VA = "0xADB5D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029A6")]
			[Address(RVA = "0xADB1B0", Offset = "0xADB1B0", VA = "0xADB1B0")]
			[DebuggerHidden]
			public <Start>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60029A7")]
			[Address(RVA = "0xADB250", Offset = "0xADB250", VA = "0xADB250", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029A8")]
			[Address(RVA = "0xADB254", Offset = "0xADB254", VA = "0xADB254", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029AA")]
			[Address(RVA = "0xADB570", Offset = "0xADB570", VA = "0xADB570", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7536B0", Offset = "0x7536B0")]
		private bool <initialized>k__BackingField;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7536C0", Offset = "0x7536C0")]
		private float <playAreaSizeX>k__BackingField;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7536D0", Offset = "0x7536D0")]
		private float <playAreaSizeZ>k__BackingField;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7536E0", Offset = "0x7536E0")]
		private bool <roomscale>k__BackingField;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SteamVR_Events.Event Initialized;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ChaperoneInfo _instance;

		[Token(Token = "0x1700030A")]
		public bool initialized
		{
			[Token(Token = "0x6001EA7")]
			[Address(RVA = "0xADAE94", Offset = "0xADAE94", VA = "0xADAE94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759884", Offset = "0x759884")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001EA8")]
			[Address(RVA = "0xADAE9C", Offset = "0xADAE9C", VA = "0xADAE9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759894", Offset = "0x759894")]
			private set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		public float playAreaSizeX
		{
			[Token(Token = "0x6001EA9")]
			[Address(RVA = "0xADAEA8", Offset = "0xADAEA8", VA = "0xADAEA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7598A4", Offset = "0x7598A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001EAA")]
			[Address(RVA = "0xADAEB0", Offset = "0xADAEB0", VA = "0xADAEB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7598B4", Offset = "0x7598B4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		public float playAreaSizeZ
		{
			[Token(Token = "0x6001EAB")]
			[Address(RVA = "0xADAEB8", Offset = "0xADAEB8", VA = "0xADAEB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7598C4", Offset = "0x7598C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001EAC")]
			[Address(RVA = "0xADAEC0", Offset = "0xADAEC0", VA = "0xADAEC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7598D4", Offset = "0x7598D4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		public bool roomscale
		{
			[Token(Token = "0x6001EAD")]
			[Address(RVA = "0xADAEC8", Offset = "0xADAEC8", VA = "0xADAEC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7598E4", Offset = "0x7598E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001EAE")]
			[Address(RVA = "0xADAED0", Offset = "0xADAED0", VA = "0xADAED0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7598F4", Offset = "0x7598F4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700030E")]
		public static ChaperoneInfo instance
		{
			[Token(Token = "0x6001EB0")]
			[Address(RVA = "0xADAF78", Offset = "0xADAF78", VA = "0xADAF78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EAF")]
		[Address(RVA = "0xADAEDC", Offset = "0xADAEDC", VA = "0xADAEDC")]
		public static SteamVR_Events.Action InitializedAction(UnityAction action)
		{
			return null;
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0xADB13C", Offset = "0xADB13C", VA = "0xADB13C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759904", Offset = "0x759904")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0xADB1DC", Offset = "0xADB1DC", VA = "0xADB1DC")]
		public ChaperoneInfo()
		{
		}
	}
	[Token(Token = "0x20003B4")]
	public class IgnoreTeleportTrace : MonoBehaviour
	{
		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0x81D2C0", Offset = "0x81D2C0", VA = "0x81D2C0")]
		public IgnoreTeleportTrace()
		{
		}
	}
	[Token(Token = "0x20003B5")]
	public class Teleport : MonoBehaviour
	{
		[Token(Token = "0x200063A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C78C", Offset = "0x74C78C")]
		private sealed class <TeleportHintCoroutine>d__105 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Teleport <>4__this;

			[Token(Token = "0x40021EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <prevBreakTime>5__2;

			[Token(Token = "0x40021ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <prevHapticPulseTime>5__3;

			[Token(Token = "0x40021EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <pulsed>5__4;

			[Token(Token = "0x170003E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029AF")]
				[Address(RVA = "0x82A7B4", Offset = "0x82A7B4", VA = "0x82A7B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029B1")]
				[Address(RVA = "0x82A820", Offset = "0x82A820", VA = "0x82A820", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029AC")]
			[Address(RVA = "0x82A190", Offset = "0x82A190", VA = "0x82A190")]
			[DebuggerHidden]
			public <TeleportHintCoroutine>d__105(int <>1__state)
			{
			}

			[Token(Token = "0x60029AD")]
			[Address(RVA = "0x82A54C", Offset = "0x82A54C", VA = "0x82A54C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029AE")]
			[Address(RVA = "0x82A550", Offset = "0x82A550", VA = "0x82A550", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029B0")]
			[Address(RVA = "0x82A7BC", Offset = "0x82A7BC", VA = "0x82A7BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask traceLayerMask;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask floorFixupTraceLayerMask;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float floorFixupMaximumTraceDistance;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material areaVisibleMaterial;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material areaLockedMaterial;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material areaHighlightedMaterial;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material pointVisibleMaterial;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material pointLockedMaterial;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material pointHighlightedMaterial;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform destinationReticleTransform;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform invalidReticleTransform;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject playAreaPreviewCorner;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject playAreaPreviewSide;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color pointerValidColor;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color pointerInvalidColor;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color pointerLockedColor;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool showPlayAreaMarker;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float teleportFadeTime;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float meshFadeTime;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float arcDistance;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7536F0", Offset = "0x7536F0")]
		public Transform onActivateObjectTransform;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform onDeactivateObjectTransform;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float activateObjectTime;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float deactivateObjectTime;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753728", Offset = "0x753728")]
		public AudioSource pointerAudioSource;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioSource loopingAudioSource;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioSource headAudioSource;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioSource reticleAudioSource;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753760", Offset = "0x753760")]
		public AudioClip teleportSound;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AudioClip pointerStartSound;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioClip pointerLoopSound;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioClip pointerStopSound;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioClip goodHighlightSound;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioClip badHighlightSound;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753798", Offset = "0x753798")]
		public bool debugFloor;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public bool showOffsetReticle;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Transform offsetReticleTransform;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public MeshRenderer floorDebugSphere;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public LineRenderer floorDebugLine;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private LineRenderer pointerLineRenderer;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private GameObject teleportPointerObject;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Transform pointerStartTransform;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Hand pointerHand;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Player player;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private TeleportArc teleportArc;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool visible;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private TeleportMarkerBase[] teleportMarkers;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private TeleportMarkerBase pointedAtTeleportMarker;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private TeleportMarkerBase teleportingToMarker;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3 pointedAtPosition;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private Vector3 prevPointedAtPosition;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private bool teleporting;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private float currentFadeTime;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float meshAlphaPercent;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private float pointerShowStartTime;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private float pointerHideStartTime;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private bool meshFading;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float fullTintAlpha;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float invalidReticleMinScale;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float invalidReticleMaxScale;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float invalidReticleMinScaleDistance;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private float invalidReticleMaxScaleDistance;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Vector3 invalidReticleScale;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Quaternion invalidReticleTargetRotation;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Transform playAreaPreviewTransform;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Transform[] playAreaPreviewCorners;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Transform[] playAreaPreviewSides;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float loopingAudioMaxVolume;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Coroutine hintCoroutine;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private bool originalHoverLockState;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Interactable originalHoveringInteractable;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private AllowTeleportWhileAttachedToHand allowTeleportWhileAttached;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Vector3 startingFeetOffset;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private bool movedFeetFarEnough;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private SteamVR_Events.Action chaperoneInfoInitializedAction;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SteamVR_Events.Event<float> ChangeScene;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static SteamVR_Events.Event<TeleportMarkerBase> Player;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static SteamVR_Events.Event<TeleportMarkerBase> PlayerPre;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Teleport _instance;

		[Token(Token = "0x1700030F")]
		public static Teleport instance
		{
			[Token(Token = "0x6001EB8")]
			[Address(RVA = "0x825D90", Offset = "0x825D90", VA = "0x825D90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0x825BA4", Offset = "0x825BA4", VA = "0x825BA4")]
		public static SteamVR_Events.Action<float> ChangeSceneAction(UnityAction<float> action)
		{
			return null;
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0x825C48", Offset = "0x825C48", VA = "0x825C48")]
		public static SteamVR_Events.Action<TeleportMarkerBase> PlayerAction(UnityAction<TeleportMarkerBase> action)
		{
			return null;
		}

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0x825CEC", Offset = "0x825CEC", VA = "0x825CEC")]
		public static SteamVR_Events.Action<TeleportMarkerBase> PlayerPreAction(UnityAction<TeleportMarkerBase> action)
		{
			return null;
		}

		[Token(Token = "0x6001EB9")]
		[Address(RVA = "0x825EB8", Offset = "0x825EB8", VA = "0x825EB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0x82607C", Offset = "0x82607C", VA = "0x82607C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0x826610", Offset = "0x826610", VA = "0x826610")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0x827238", Offset = "0x827238", VA = "0x827238")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0x8264CC", Offset = "0x8264CC", VA = "0x8264CC")]
		private void CheckForSpawnPoint()
		{
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0x827708", Offset = "0x827708", VA = "0x827708")]
		public void HideTeleportPointer()
		{
		}

		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0x827790", Offset = "0x827790", VA = "0x827790")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0x8282D0", Offset = "0x8282D0", VA = "0x8282D0")]
		private void UpdatePointer()
		{
		}

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0x829664", Offset = "0x829664", VA = "0x829664")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0x826648", Offset = "0x826648", VA = "0x826648")]
		private void OnChaperoneInfoInitialized()
		{
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0x8261A4", Offset = "0x8261A4", VA = "0x8261A4")]
		private void HidePointer()
		{
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x827CEC", Offset = "0x827CEC", VA = "0x827CEC")]
		private void ShowPointer(Hand newPointerHand, Hand oldPointerHand)
		{
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0x828DC8", Offset = "0x828DC8", VA = "0x828DC8")]
		private void UpdateTeleportColors()
		{
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0x829B28", Offset = "0x829B28", VA = "0x829B28")]
		private void PlayAudioClip(AudioSource source, AudioClip clip)
		{
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0x829C7C", Offset = "0x829C7C", VA = "0x829C7C")]
		private void PlayPointerHaptic(bool validLocation)
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x827B68", Offset = "0x827B68", VA = "0x827B68")]
		private void TryTeleportPlayer()
		{
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0x829CBC", Offset = "0x829CBC", VA = "0x829CBC")]
		private void InitiateTeleportFade()
		{
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0x827270", Offset = "0x827270", VA = "0x827270")]
		private void TeleportPlayer()
		{
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0x829164", Offset = "0x829164", VA = "0x829164")]
		private void HighlightSelected(TeleportMarkerBase hitTeleportMarker)
		{
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0x82A0E0", Offset = "0x82A0E0", VA = "0x82A0E0")]
		public void ShowTeleportHint()
		{
		}

		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0x829F1C", Offset = "0x829F1C", VA = "0x829F1C")]
		public void CancelTeleportHint()
		{
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0x82A11C", Offset = "0x82A11C", VA = "0x82A11C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759968", Offset = "0x759968")]
		private IEnumerator TeleportHintCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0x82A1BC", Offset = "0x82A1BC", VA = "0x82A1BC")]
		public bool IsEligibleForTeleport(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0x829A98", Offset = "0x829A98", VA = "0x829A98")]
		private bool ShouldOverrideHoverLock()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0x827AA0", Offset = "0x827AA0", VA = "0x827AA0")]
		private bool WasTeleportButtonReleased(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0x828208", Offset = "0x828208", VA = "0x828208")]
		private bool IsTeleportButtonDown(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0x827C24", Offset = "0x827C24", VA = "0x827C24")]
		private bool WasTeleportButtonPressed(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0x829BB8", Offset = "0x829BB8", VA = "0x829BB8")]
		private Transform GetPointerStartTransform(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0x82A374", Offset = "0x82A374", VA = "0x82A374")]
		public Teleport()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class TeleportArc : MonoBehaviour
	{
		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int segmentCount;

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float thickness;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7537D0", Offset = "0x7537D0")]
		public float arcDuration;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753808", Offset = "0x753808")]
		public float segmentBreak;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753840", Offset = "0x753840")]
		public float arcSpeed;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material material;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int traceLayerMask;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineRenderer[] lineRenderers;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float arcTimeOffset;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float prevThickness;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int prevSegmentCount;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool showArc;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 startPos;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 projectileVelocity;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useGravity;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform arcObjectsTransfrom;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool arcInvalid;

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0x82A828", Offset = "0x82A828", VA = "0x82A828")]
		private void Start()
		{
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0x82A850", Offset = "0x82A850", VA = "0x82A850")]
		private void Update()
		{
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0x82A89C", Offset = "0x82A89C", VA = "0x82A89C")]
		private void CreateLineRendererObjects()
		{
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0x828EEC", Offset = "0x828EEC", VA = "0x828EEC")]
		public void SetArcData(Vector3 position, Vector3 velocity, bool gravity, bool pointerAtBadAngle)
		{
		}

		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0x829BA0", Offset = "0x829BA0", VA = "0x829BA0")]
		public void Show()
		{
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x829B68", Offset = "0x829B68", VA = "0x829B68")]
		public void Hide()
		{
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0x828F40", Offset = "0x828F40", VA = "0x828F40")]
		public bool DrawArc(out RaycastHit hitInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0x82AF3C", Offset = "0x82AF3C", VA = "0x82AF3C")]
		private void DrawArcSegment(int index, float startTime, float endTime)
		{
		}

		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0x829418", Offset = "0x829418", VA = "0x829418")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x82ACE4", Offset = "0x82ACE4", VA = "0x82ACE4")]
		private float FindProjectileCollision(out RaycastHit hitInfo)
		{
			return default(float);
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x82950C", Offset = "0x82950C", VA = "0x82950C")]
		public Vector3 GetArcPositionAtTime(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0x82AC50", Offset = "0x82AC50", VA = "0x82AC50")]
		private void HideLineSegments(int startSegment, int endSegment)
		{
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0x82B328", Offset = "0x82B328", VA = "0x82B328")]
		public TeleportArc()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class TeleportArea : TeleportMarkerBase
	{
		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x753888", Offset = "0x753888")]
		private Bounds <meshBounds>k__BackingField;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer areaMesh;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int tintColorId;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color visibleTintColor;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color highlightedTintColor;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Color lockedTintColor;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool highlighted;

		[Token(Token = "0x17000310")]
		public Bounds meshBounds
		{
			[Token(Token = "0x6001EE4")]
			[Address(RVA = "0x82B350", Offset = "0x82B350", VA = "0x82B350")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7599CC", Offset = "0x7599CC")]
			get
			{
				return default(Bounds);
			}
			[Token(Token = "0x6001EE5")]
			[Address(RVA = "0x82B364", Offset = "0x82B364", VA = "0x82B364")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7599DC", Offset = "0x7599DC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0x82B378", Offset = "0x82B378", VA = "0x82B378")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0x82B508", Offset = "0x82B508", VA = "0x82B508")]
		public void Start()
		{
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0x82B5D8", Offset = "0x82B5D8", VA = "0x82B5D8", Slot = "9")]
		public override bool ShouldActivate(Vector3 playerPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0x82B5E0", Offset = "0x82B5E0", VA = "0x82B5E0", Slot = "10")]
		public override bool ShouldMovePlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0x82B5E8", Offset = "0x82B5E8", VA = "0x82B5E8", Slot = "7")]
		public override void Highlight(bool highlight)
		{
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0x82B6C4", Offset = "0x82B6C4", VA = "0x82B6C4", Slot = "8")]
		public override void SetAlpha(float tintAlpha, float alphaPercent)
		{
		}

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0x82B7E0", Offset = "0x82B7E0", VA = "0x82B7E0", Slot = "6")]
		public override void UpdateVisuals()
		{
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0x82B894", Offset = "0x82B894", VA = "0x82B894")]
		public void UpdateVisualsInEditor()
		{
		}

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0x82B3EC", Offset = "0x82B3EC", VA = "0x82B3EC")]
		private bool CalculateBounds()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0x82B784", Offset = "0x82B784", VA = "0x82B784")]
		private Color GetTintColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0x82B960", Offset = "0x82B960", VA = "0x82B960")]
		public TeleportArea()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public abstract class TeleportMarkerBase : MonoBehaviour
	{
		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool locked;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool markerActive;

		[Token(Token = "0x17000311")]
		public virtual bool showReticle
		{
			[Token(Token = "0x6001EF1")]
			[Address(RVA = "0x82B9CC", Offset = "0x82B9CC", VA = "0x82B9CC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0x82B9D4", Offset = "0x82B9D4", VA = "0x82B9D4")]
		public void SetLocked(bool locked)
		{
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0x82B9E8", Offset = "0x82B9E8", VA = "0x82B9E8", Slot = "5")]
		public virtual void TeleportPlayer(Vector3 pointedAtPosition)
		{
		}

		[Token(Token = "0x6001EF4")]
		public abstract void UpdateVisuals();

		[Token(Token = "0x6001EF5")]
		public abstract void Highlight(bool highlight);

		[Token(Token = "0x6001EF6")]
		public abstract void SetAlpha(float tintAlpha, float alphaPercent);

		[Token(Token = "0x6001EF7")]
		public abstract bool ShouldActivate(Vector3 playerPosition);

		[Token(Token = "0x6001EF8")]
		public abstract bool ShouldMovePlayer();

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0x82B9BC", Offset = "0x82B9BC", VA = "0x82B9BC")]
		protected TeleportMarkerBase()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class TeleportPoint : TeleportMarkerBase
	{
		[Token(Token = "0x200063B")]
		public enum TeleportPointType
		{
			[Token(Token = "0x40021F0")]
			MoveToLocation,
			[Token(Token = "0x40021F1")]
			SwitchToNewScene
		}

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TeleportPointType teleportType;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string title;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string switchToScene;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color titleVisibleColor;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color titleHighlightedColor;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color titleLockedColor;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool playerSpawnPoint;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool gotReleventComponents;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshRenderer markerMesh;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MeshRenderer switchSceneIcon;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshRenderer moveLocationIcon;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MeshRenderer lockedIcon;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MeshRenderer pointIcon;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform lookAtJointTransform;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Animation animation;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Text titleText;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Player player;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 lookAtPosition;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int tintColorID;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Color tintColor;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Color titleColor;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float fullTitleAlpha;

		[Token(Token = "0x4001C01")]
		private const string switchSceneAnimation = "switch_scenes_idle";

		[Token(Token = "0x4001C02")]
		private const string moveLocationAnimation = "move_location_idle";

		[Token(Token = "0x4001C03")]
		private const string lockedAnimation = "locked_idle";

		[Token(Token = "0x17000312")]
		public override bool showReticle
		{
			[Token(Token = "0x6001EFA")]
			[Address(RVA = "0x82B9EC", Offset = "0x82B9EC", VA = "0x82B9EC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0x82B9F4", Offset = "0x82B9F4", VA = "0x82B9F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0x82BC6C", Offset = "0x82BC6C", VA = "0x82BC6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0x82BC90", Offset = "0x82BC90", VA = "0x82BC90")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0x82BD24", Offset = "0x82BD24", VA = "0x82BD24", Slot = "9")]
		public override bool ShouldActivate(Vector3 playerPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0x82BDFC", Offset = "0x82BDFC", VA = "0x82BDFC", Slot = "10")]
		public override bool ShouldMovePlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0x82BE04", Offset = "0x82BE04", VA = "0x82BE04", Slot = "7")]
		public override void Highlight(bool highlight)
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0x82BFE0", Offset = "0x82BFE0", VA = "0x82BFE0", Slot = "6")]
		public override void UpdateVisuals()
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0x82C148", Offset = "0x82C148", VA = "0x82C148", Slot = "8")]
		public override void SetAlpha(float tintAlpha, float alphaPercent)
		{
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0x82BF1C", Offset = "0x82BF1C", VA = "0x82BF1C")]
		public void SetMeshMaterials(Material material, Color textColor)
		{
		}

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0x829FF8", Offset = "0x829FF8", VA = "0x829FF8")]
		public void TeleportToScene()
		{
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0x82BAE4", Offset = "0x82BAE4", VA = "0x82BAE4")]
		public void GetRelevantComponents()
		{
		}

		[Token(Token = "0x6001F06")]
		[Address(RVA = "0x82C268", Offset = "0x82C268", VA = "0x82C268")]
		public void ReleaseRelevantComponents()
		{
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0x82C280", Offset = "0x82C280", VA = "0x82C280")]
		public void UpdateVisualsInEditor()
		{
		}

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0x82C53C", Offset = "0x82C53C", VA = "0x82C53C")]
		public TeleportPoint()
		{
		}
	}
}
namespace UnityStandardAssets.Effects
{
	[Token(Token = "0x20003BA")]
	public class Moon_ParticleSystemMultiplier : MonoBehaviour
	{
		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float multiplier;

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0x7A5E54", Offset = "0x7A5E54", VA = "0x7A5E54")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0x7A5F80", Offset = "0x7A5F80", VA = "0x7A5F80")]
		public Moon_ParticleSystemMultiplier()
		{
		}
	}
}
namespace UnityEngine
{
	[Token(Token = "0x20003BB")]
	public static class CheatCode
	{
		[Token(Token = "0x4001C05")]
		public const KeyCode TakeScreenshot = KeyCode.F;

		[Token(Token = "0x4001C06")]
		public const KeyCode TakeSuperScreenshot = KeyCode.G;

		[Token(Token = "0x4001C07")]
		public const KeyCode FPS = KeyCode.M;

		[Token(Token = "0x4001C08")]
		public const KeyCode SaveGame = KeyCode.E;

		[Token(Token = "0x4001C09")]
		public const KeyCode LoadGame = KeyCode.Y;

		[Token(Token = "0x4001C0A")]
		public const KeyCode SolvePod = KeyCode.S;

		[Token(Token = "0x4001C0B")]
		public const KeyCode SolveAllPods = KeyCode.V;

		[Token(Token = "0x4001C0C")]
		public const KeyCode SolvePuzzle = KeyCode.Q;

		[Token(Token = "0x4001C0D")]
		public const KeyCode ReloadStarEmitters = KeyCode.R;

		[Token(Token = "0x4001C0E")]
		public const KeyCode SaveStarPattern = KeyCode.S;

		[Token(Token = "0x4001C0F")]
		public const KeyCode LoadStarPattern = KeyCode.L;

		[Token(Token = "0x4001C10")]
		public const KeyCode ToggleEditIconMode = KeyCode.D;

		[Token(Token = "0x4001C11")]
		public const KeyCode ToggleEditStarsMode = KeyCode.A;

		[Token(Token = "0x4001C12")]
		public const KeyCode AddStar = KeyCode.N;

		[Token(Token = "0x4001C13")]
		public const KeyCode RemoveStar = KeyCode.P;

		[Token(Token = "0x4001C14")]
		public const KeyCode AddLine = KeyCode.O;

		[Token(Token = "0x4001C15")]
		public const KeyCode EditorSelect = KeyCode.T;

		[Token(Token = "0x4001C16")]
		public const KeyCode GrowDecoStamps = KeyCode.Q;

		[Token(Token = "0x4001C17")]
		public const KeyCode TriggerScribble = KeyCode.S;

		[Token(Token = "0x4001C18")]
		public const KeyCode ForceUpdateLighting = KeyCode.L;

		[Token(Token = "0x4001C19")]
		public const KeyCode TeleportReturn = KeyCode.T;

		[Token(Token = "0x4001C1A")]
		public const KeyCode ResetHeadTracking = KeyCode.Z;

		[Token(Token = "0x4001C1B")]
		public const KeyCode RecenterTracking = KeyCode.C;

		[Token(Token = "0x4001C1C")]
		public const KeyCode SwitchControllers = KeyCode.X;

		[Token(Token = "0x4001C1D")]
		public const KeyCode SubtitleTest = KeyCode.I;

		[Token(Token = "0x4001C1E")]
		public const KeyCode TestAchievement = KeyCode.U;

		[Token(Token = "0x4001C1F")]
		public const KeyCode PauseAudio = KeyCode.J;

		[Token(Token = "0x4001C20")]
		public const KeyCode ResumeAudio = KeyCode.K;
	}
	[Token(Token = "0x20003BC")]
	public static class ControllerCheatCode
	{
		[Token(Token = "0x4001C21")]
		public const KeyCode TakeScreenshot = KeyCode.None;

		[Token(Token = "0x4001C22")]
		public const KeyCode AddStar = KeyCode.None;

		[Token(Token = "0x4001C23")]
		public const KeyCode RemoveStar = KeyCode.None;

		[Token(Token = "0x4001C24")]
		public const KeyCode AddLine = KeyCode.None;

		[Token(Token = "0x4001C25")]
		public const KeyCode RemoveLine = KeyCode.None;
	}
}
namespace Funomena
{
	[Token(Token = "0x20003BD")]
	public class Audio
	{
		[Token(Token = "0x200063C")]
		public enum AudioChannel
		{
			[Token(Token = "0x40021F3")]
			Music,
			[Token(Token = "0x40021F4")]
			Sfx,
			[Token(Token = "0x40021F5")]
			Dialog,
			[Token(Token = "0x40021F6")]
			Master
		}

		[Token(Token = "0x4001C26")]
		private const int kMaxAudioVolume = 99;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Audio s_instance;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject m_defaultSoundEmitter;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint currentBankId;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool m_isLoading;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool m_paused;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, int> m_playList;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<string> m_playedList;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<(string, GameObject)> m_waitListStr;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static List<(uint, GameObject)> m_waitListNum;

		[Token(Token = "0x4001C30")]
		private const uint kAKFlags = 5u;

		[Token(Token = "0x17000313")]
		public static Audio Instance
		{
			[Token(Token = "0x6001F0B")]
			[Address(RVA = "0x7FCE70", Offset = "0x7FCE70", VA = "0x7FCE70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000314")]
		public bool IsLoading
		{
			[Token(Token = "0x6001F0D")]
			[Address(RVA = "0x7FD1D4", Offset = "0x7FD1D4", VA = "0x7FD1D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0x7FCED8", Offset = "0x7FCED8", VA = "0x7FCED8")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0x7FCF74", Offset = "0x7FCF74", VA = "0x7FCF74")]
		public Audio()
		{
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0x7FD1DC", Offset = "0x7FD1DC", VA = "0x7FD1DC")]
		private void LoadBank(string bankName)
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0x7FD2F0", Offset = "0x7FD2F0", VA = "0x7FD2F0")]
		private void LoadBankAsync(string bankName)
		{
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0x7FD3A0", Offset = "0x7FD3A0", VA = "0x7FD3A0")]
		private void OnBankAsyncLoaded(uint in_bankID, IntPtr in_InMemoryBankPtr, AKRESULT in_eLoadResult, uint in_memPoolId, object in_Cookie)
		{
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0x7FD484", Offset = "0x7FD484", VA = "0x7FD484")]
		public uint PlaySound(uint eventId)
		{
			return default(uint);
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0x7FD5F8", Offset = "0x7FD5F8", VA = "0x7FD5F8")]
		public uint PlaySound(uint eventId, GameObject emittingObject)
		{
			return default(uint);
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0x7F3308", Offset = "0x7F3308", VA = "0x7F3308")]
		public uint PlaySound(string eventName, bool oneTime = false)
		{
			return default(uint);
		}

		[Token(Token = "0x6001F15")]
		[Address(RVA = "0x7F2FC0", Offset = "0x7F2FC0", VA = "0x7F2FC0")]
		public uint PlaySound(string eventName, GameObject emittingObject)
		{
			return default(uint);
		}

		[Token(Token = "0x6001F16")]
		[Address(RVA = "0x7FD5FC", Offset = "0x7FD5FC", VA = "0x7FD5FC")]
		private uint PostEvent(string eventName, GameObject emittingObject)
		{
			return default(uint);
		}

		[Token(Token = "0x6001F17")]
		[Address(RVA = "0x7FD48C", Offset = "0x7FD48C", VA = "0x7FD48C")]
		private uint PostEvent(uint eventId, GameObject emittingObject)
		{
			return default(uint);
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0x7FD814", Offset = "0x7FD814", VA = "0x7FD814")]
		private void OnAKAudioEvent(object cookie, AkCallbackType eventFlag, object eventInfo)
		{
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0x7FDA80", Offset = "0x7FDA80", VA = "0x7FDA80")]
		public void StopSound(uint playingId)
		{
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0x7FDAE8", Offset = "0x7FDAE8", VA = "0x7FDAE8")]
		public void SetDefaultEmitterPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0x7FD754", Offset = "0x7FD754", VA = "0x7FD754")]
		private void AddPlaying(string eventId)
		{
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0x7FD988", Offset = "0x7FD988", VA = "0x7FD988")]
		private void RemovePlaying(string eventId)
		{
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0x7FDB3C", Offset = "0x7FDB3C", VA = "0x7FDB3C")]
		public bool IsPlaying(string eventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0x7FDBE8", Offset = "0x7FDBE8", VA = "0x7FDBE8")]
		public bool IsPlaying(uint eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0x7FDC24", Offset = "0x7FDC24", VA = "0x7FDC24")]
		public void StopAllSounds()
		{
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0x7FDCA4", Offset = "0x7FDCA4", VA = "0x7FDCA4")]
		public void SetAudioVolume(AudioChannel channel, int volume)
		{
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0x7FDE08", Offset = "0x7FDE08", VA = "0x7FDE08")]
		private void PlayWaitList()
		{
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0x7FDFE0", Offset = "0x7FDFE0", VA = "0x7FDFE0")]
		public void PauseAudio()
		{
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0x7FE060", Offset = "0x7FE060", VA = "0x7FE060")]
		public void ResumeAudio()
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0x7FE0E4", Offset = "0x7FE0E4", VA = "0x7FE0E4")]
		public void PauseDialog()
		{
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0x7FE15C", Offset = "0x7FE15C", VA = "0x7FE15C")]
		public void ResumeDialog()
		{
		}
	}
}
namespace Polybrush
{
	[Token(Token = "0x20003BE")]
	[Flags]
	public enum z_BrushMirror
	{
		[Token(Token = "0x4001C32")]
		None = 0,
		[Token(Token = "0x4001C33")]
		X = 1,
		[Token(Token = "0x4001C34")]
		Y = 2,
		[Token(Token = "0x4001C35")]
		Z = 4
	}
	[Token(Token = "0x20003BF")]
	public static class z_BrushMirrorUtility
	{
		[Token(Token = "0x6001F27")]
		[Address(RVA = "0x928810", Offset = "0x928810", VA = "0x928810")]
		public static Vector3 ToVector3(this z_BrushMirror mirror)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20003C0")]
	public enum z_ComponentIndex
	{
		[Token(Token = "0x4001C37")]
		R = 0,
		[Token(Token = "0x4001C38")]
		X = 0,
		[Token(Token = "0x4001C39")]
		G = 1,
		[Token(Token = "0x4001C3A")]
		Y = 1,
		[Token(Token = "0x4001C3B")]
		B = 2,
		[Token(Token = "0x4001C3C")]
		Z = 2,
		[Token(Token = "0x4001C3D")]
		A = 3,
		[Token(Token = "0x4001C3E")]
		W = 3
	}
	[Token(Token = "0x20003C1")]
	public enum z_ComponentIndexType
	{
		[Token(Token = "0x4001C40")]
		Vector,
		[Token(Token = "0x4001C41")]
		Color,
		[Token(Token = "0x4001C42")]
		Index
	}
	[Token(Token = "0x20003C2")]
	public static class z_ComponentIndexUtility
	{
		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly GUIContent[] ComponentIndexPopupDescriptions;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int[] ComponentIndexPopupValues;

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0x9292B0", Offset = "0x9292B0", VA = "0x9292B0")]
		public static float GetValueAtIndex(this Vector3 value, z_ComponentIndex index)
		{
			return default(float);
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0x9292DC", Offset = "0x9292DC", VA = "0x9292DC")]
		public static float GetValueAtIndex(this Vector4 value, z_ComponentIndex index)
		{
			return default(float);
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0x92931C", Offset = "0x92931C", VA = "0x92931C")]
		public static float GetValueAtIndex(this Color value, z_ComponentIndex index)
		{
			return default(float);
		}

		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0x92935C", Offset = "0x92935C", VA = "0x92935C")]
		public static uint ToFlag(this z_ComponentIndex e)
		{
			return default(uint);
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0x927B18", Offset = "0x927B18", VA = "0x927B18")]
		public static string GetString(this z_ComponentIndex component, z_ComponentIndexType type = z_ComponentIndexType.Vector)
		{
			return null;
		}
	}
	[Token(Token = "0x20003C3")]
	public enum Culling
	{
		[Token(Token = "0x4001C46")]
		Back = 1,
		[Token(Token = "0x4001C47")]
		Front = 2,
		[Token(Token = "0x4001C48")]
		FrontBack = 4
	}
	[Token(Token = "0x20003C4")]
	public enum z_Direction
	{
		[Token(Token = "0x4001C4A")]
		BrushNormal,
		[Token(Token = "0x4001C4B")]
		VertexNormal,
		[Token(Token = "0x4001C4C")]
		Up,
		[Token(Token = "0x4001C4D")]
		Right,
		[Token(Token = "0x4001C4E")]
		Forward
	}
	[Token(Token = "0x20003C5")]
	public static class z_DirectionUtil
	{
		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x92956C", Offset = "0x92956C", VA = "0x92956C")]
		public static Vector3 ToVector3(this z_Direction dir)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20003C6")]
	[Flags]
	public enum z_MeshChannel
	{
		[Token(Token = "0x4001C50")]
		Null = 0,
		[Token(Token = "0x4001C51")]
		Position = 0,
		[Token(Token = "0x4001C52")]
		Normal = 1,
		[Token(Token = "0x4001C53")]
		Color = 2,
		[Token(Token = "0x4001C54")]
		Tangent = 4,
		[Token(Token = "0x4001C55")]
		UV0 = 8,
		[Token(Token = "0x4001C56")]
		UV2 = 0x10,
		[Token(Token = "0x4001C57")]
		UV3 = 0x20,
		[Token(Token = "0x4001C58")]
		UV4 = 0x40,
		[Token(Token = "0x4001C59")]
		All = 0xFF
	}
	[Token(Token = "0x20003C7")]
	public static class z_MeshChannelUtility
	{
		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0x92C734", Offset = "0x92C734", VA = "0x92C734")]
		public static z_MeshChannel StringToEnum(string str)
		{
			return default(z_MeshChannel);
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0x92CB38", Offset = "0x92CB38", VA = "0x92CB38")]
		public static int UVChannelToIndex(z_MeshChannel channel)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003C8")]
	public enum z_MirrorCoordinateSpace
	{
		[Token(Token = "0x4001C5B")]
		World,
		[Token(Token = "0x4001C5C")]
		Camera
	}
	[Token(Token = "0x20003C9")]
	public enum z_ModelSource
	{
		[Token(Token = "0x4001C5E")]
		Imported,
		[Token(Token = "0x4001C5F")]
		Asset,
		[Token(Token = "0x4001C60")]
		Scene,
		[Token(Token = "0x4001C61")]
		AdditionalVertexStreams
	}
	[Token(Token = "0x20003CA")]
	public enum z_PaintMode
	{
		[Token(Token = "0x4001C63")]
		Brush,
		[Token(Token = "0x4001C64")]
		Fill
	}
	[Token(Token = "0x20003CB")]
	[Flags]
	public enum z_SelectionRenderState
	{
		[Token(Token = "0x4001C66")]
		None = 0,
		[Token(Token = "0x4001C67")]
		Wireframe = 1,
		[Token(Token = "0x4001C68")]
		Outline = 2
	}
	[Token(Token = "0x20003CC")]
	[ExecuteInEditMode]
	public class z_AdditionalVertexStreams : MonoBehaviour
	{
		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh mesh;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x17000315")]
		private MeshRenderer meshRenderer
		{
			[Token(Token = "0x6001F31")]
			[Address(RVA = "0x92748C", Offset = "0x92748C", VA = "0x92748C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0x927534", Offset = "0x927534", VA = "0x927534")]
		public void SetMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0x927568", Offset = "0x927568", VA = "0x927568")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0x92764C", Offset = "0x92764C", VA = "0x92764C")]
		public z_AdditionalVertexStreams()
		{
		}
	}
	[Token(Token = "0x20003CD")]
	public class z_ZoomOverride : MonoBehaviour
	{
		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected float[] weights;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected float normalizedStrength;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshFilter _meshFilter;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SkinnedMeshRenderer _skinnedMeshRenderer;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private z_AdditionalVertexStreams _additionalVertexStreams;

		[Token(Token = "0x17000316")]
		public Mesh mesh
		{
			[Token(Token = "0x6001F37")]
			[Address(RVA = "0x93627C", Offset = "0x93627C", VA = "0x93627C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x936268", Offset = "0x936268", VA = "0x936268", Slot = "4")]
		public virtual void SetWeights(float[] weights, float normalizedStrength)
		{
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0x936274", Offset = "0x936274", VA = "0x936274", Slot = "5")]
		public virtual float[] GetWeights()
		{
			return null;
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0x936534", Offset = "0x936534", VA = "0x936534", Slot = "6")]
		public virtual void OnVerticesMoved(z_Mesh mesh)
		{
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0x936538", Offset = "0x936538", VA = "0x936538", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0x936674", Offset = "0x936674", VA = "0x936674")]
		public z_ZoomOverride()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003CE")]
	public class z_AttributeLayoutContainer : ScriptableObject, IEquatable<z_AttributeLayoutContainer>
	{
		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public z_AttributeLayout[] attributes;

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0x928658", Offset = "0x928658", VA = "0x928658")]
		public static z_AttributeLayoutContainer Create(Shader shader, z_AttributeLayout[] attributes)
		{
			return null;
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0x9286C0", Offset = "0x9286C0", VA = "0x9286C0", Slot = "4")]
		public bool Equals(z_AttributeLayoutContainer other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0x928808", Offset = "0x928808", VA = "0x928808")]
		public z_AttributeLayoutContainer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003CF")]
	public class z_AttributeLayout : IEquatable<z_AttributeLayout>
	{
		[Token(Token = "0x4001C72")]
		public const int NoMask = -1;

		[Token(Token = "0x4001C73")]
		public const int DefaultMask = 0;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int[] DefaultMaskValues;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly GUIContent[] DefaultMaskDescriptions;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Vector2 NormalizedRange;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public z_MeshChannel channel;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public z_ComponentIndex index;

		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 range;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string propertyTarget;

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int mask;

		[NonSerialized]
		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D previewTexture;

		[Token(Token = "0x17000317")]
		public float min
		{
			[Token(Token = "0x6001F3E")]
			[Address(RVA = "0x927654", Offset = "0x927654", VA = "0x927654")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F3F")]
			[Address(RVA = "0x92765C", Offset = "0x92765C", VA = "0x92765C")]
			set
			{
			}
		}

		[Token(Token = "0x17000318")]
		public float max
		{
			[Token(Token = "0x6001F40")]
			[Address(RVA = "0x927664", Offset = "0x927664", VA = "0x927664")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F41")]
			[Address(RVA = "0x92766C", Offset = "0x92766C", VA = "0x92766C")]
			set
			{
			}
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0x927674", Offset = "0x927674", VA = "0x927674")]
		public z_AttributeLayout(z_MeshChannel channel, z_ComponentIndex index)
		{
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0x9276FC", Offset = "0x9276FC", VA = "0x9276FC")]
		public z_AttributeLayout(z_MeshChannel channel, z_ComponentIndex index, Vector2 range, int mask)
		{
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0x92777C", Offset = "0x92777C", VA = "0x92777C")]
		public z_AttributeLayout(z_MeshChannel channel, z_ComponentIndex index, Vector2 range, int mask, string targetProperty, [Optional] Texture2D texture)
		{
		}

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0x9277B4", Offset = "0x9277B4", VA = "0x9277B4", Slot = "4")]
		public bool Equals(z_AttributeLayout other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F46")]
		[Address(RVA = "0x9278B0", Offset = "0x9278B0", VA = "0x9278B0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D0")]
	public struct z_ColorMask
	{
		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool r;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool g;

		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool b;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public bool a;

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0x63D79C", Offset = "0x63D79C", VA = "0x63D79C")]
		public z_ColorMask(bool r, bool g, bool b, bool a)
		{
		}
	}
	[Token(Token = "0x20003D1")]
	public struct z_CommonEdge : IEquatable<z_CommonEdge>
	{
		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public z_Edge edge;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public z_Edge common;

		[Token(Token = "0x17000319")]
		public int x
		{
			[Token(Token = "0x6001F49")]
			[Address(RVA = "0x63D7C0", Offset = "0x63D7C0", VA = "0x63D7C0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700031A")]
		public int y
		{
			[Token(Token = "0x6001F4A")]
			[Address(RVA = "0x63D7C8", Offset = "0x63D7C8", VA = "0x63D7C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700031B")]
		public int cx
		{
			[Token(Token = "0x6001F4B")]
			[Address(RVA = "0x63D7D0", Offset = "0x63D7D0", VA = "0x63D7D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700031C")]
		public int cy
		{
			[Token(Token = "0x6001F4C")]
			[Address(RVA = "0x63D7D8", Offset = "0x63D7D8", VA = "0x63D7D8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0x63D7E0", Offset = "0x63D7E0", VA = "0x63D7E0")]
		public z_CommonEdge(int _x, int _y, int _cx, int _cy)
		{
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0x63D7F8", Offset = "0x63D7F8", VA = "0x63D7F8", Slot = "4")]
		public bool Equals(z_CommonEdge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0x63D840", Offset = "0x63D840", VA = "0x63D840", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0x928A40", Offset = "0x928A40", VA = "0x928A40")]
		public static bool operator ==(z_CommonEdge a, z_CommonEdge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0x928A84", Offset = "0x928A84", VA = "0x928A84")]
		public static bool operator !=(z_CommonEdge a, z_CommonEdge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0x63D848", Offset = "0x63D848", VA = "0x63D848", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0x63D850", Offset = "0x63D850", VA = "0x63D850", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0x928D08", Offset = "0x928D08", VA = "0x928D08")]
		public static List<int> ToList(IEnumerable<z_CommonEdge> edges)
		{
			return null;
		}

		[Token(Token = "0x6001F55")]
		[Address(RVA = "0x928FDC", Offset = "0x928FDC", VA = "0x928FDC")]
		public static HashSet<int> ToHashSet(IEnumerable<z_CommonEdge> edges)
		{
			return null;
		}
	}
	[Token(Token = "0x20003D2")]
	public struct z_Edge : IEquatable<z_Edge>
	{
		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x6001F56")]
		[Address(RVA = "0x63D858", Offset = "0x63D858", VA = "0x63D858")]
		public z_Edge(int _x, int _y)
		{
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0x63D860", Offset = "0x63D860", VA = "0x63D860", Slot = "4")]
		public bool Equals(z_Edge p)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0x63D8A8", Offset = "0x63D8A8", VA = "0x63D8A8", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0x929718", Offset = "0x929718", VA = "0x929718")]
		public static bool operator ==(z_Edge a, z_Edge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0x929750", Offset = "0x929750", VA = "0x929750")]
		public static bool operator !=(z_Edge a, z_Edge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0x63D8B0", Offset = "0x63D8B0", VA = "0x63D8B0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0x63D8B8", Offset = "0x63D8B8", VA = "0x63D8B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0x929824", Offset = "0x929824", VA = "0x929824")]
		public static List<int> ToList(IEnumerable<z_Edge> edges)
		{
			return null;
		}

		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0x929AF8", Offset = "0x929AF8", VA = "0x929AF8")]
		public static HashSet<int> ToHashSet(IEnumerable<z_Edge> edges)
		{
			return null;
		}
	}
	[Token(Token = "0x20003D3")]
	public static class z_GradientSerializer
	{
		[Token(Token = "0x6001F5F")]
		[Address(RVA = "0x929DCC", Offset = "0x929DCC", VA = "0x929DCC")]
		public static string Serialize(this Gradient gradient)
		{
			return null;
		}

		[Token(Token = "0x6001F60")]
		[Address(RVA = "0x92A044", Offset = "0x92A044", VA = "0x92A044")]
		public static bool Deserialize(string str, out Gradient gradient)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0x92A474", Offset = "0x92A474", VA = "0x92A474")]
		private static bool TryParseColor(string str, out Color value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D4")]
	public interface z_IValid
	{
		[Token(Token = "0x1700031D")]
		bool IsValid
		{
			[Token(Token = "0x6001F62")]
			get;
		}
	}
	[Token(Token = "0x20003D5")]
	public class z_Mesh
	{
		[Serializable]
		[Token(Token = "0x200063D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C79C", Offset = "0x74C79C")]
		private sealed class <>c
		{
			[Token(Token = "0x40021F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<int[], IEnumerable<int>> <>9__22_0;

			[Token(Token = "0x60029B3")]
			[Address(RVA = "0x92C724", Offset = "0x92C724", VA = "0x92C724")]
			public <>c()
			{
			}

			[Token(Token = "0x60029B4")]
			[Address(RVA = "0x92C72C", Offset = "0x92C72C", VA = "0x92C72C")]
			internal IEnumerable<int> <GetTriangles>b__22_0(int[] x)
			{
				return null;
			}
		}

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color32[] colors;

		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector4[] tangents;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Vector4> uv0;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Vector4> uv1;

		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Vector4> uv2;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Vector4> uv3;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _subMeshCount;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] triangles;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int[][] indices;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MeshTopology[] meshTopology;

		[Token(Token = "0x1700031E")]
		public int subMeshCount
		{
			[Token(Token = "0x6001F64")]
			[Address(RVA = "0x92BD30", Offset = "0x92BD30", VA = "0x92BD30")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F65")]
			[Address(RVA = "0x92BD38", Offset = "0x92BD38", VA = "0x92BD38")]
			set
			{
			}
		}

		[Token(Token = "0x1700031F")]
		public int vertexCount
		{
			[Token(Token = "0x6001F66")]
			[Address(RVA = "0x92BE00", Offset = "0x92BE00", VA = "0x92BE00")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0x92BCEC", Offset = "0x92BCEC", VA = "0x92BCEC")]
		public MeshTopology GetTopology(int index)
		{
			return default(MeshTopology);
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0x92BE18", Offset = "0x92BE18", VA = "0x92BE18")]
		public List<Vector4> GetUVs(int index)
		{
			return null;
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0x92BE64", Offset = "0x92BE64", VA = "0x92BE64")]
		public void SetUVs(int index, List<Vector4> uvs)
		{
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0x92BEA8", Offset = "0x92BEA8", VA = "0x92BEA8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0x92BEE0", Offset = "0x92BEE0", VA = "0x92BEE0")]
		public int[] GetTriangles()
		{
			return null;
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0x92BFF8", Offset = "0x92BFF8", VA = "0x92BFF8")]
		public int[] GetIndices(int index)
		{
			return null;
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0x92C03C", Offset = "0x92C03C", VA = "0x92C03C")]
		public void SetTriangles(int[] triangles, int index)
		{
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0x92C0B8", Offset = "0x92C0B8", VA = "0x92C0B8")]
		public void RecalculateNormals()
		{
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0x92C4CC", Offset = "0x92C4CC", VA = "0x92C4CC")]
		public void ApplyAttributesToUnityMesh(Mesh m, z_MeshChannel attrib = z_MeshChannel.All)
		{
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0x92C650", Offset = "0x92C650", VA = "0x92C650")]
		public z_Mesh()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public struct z_RndVec3 : IEquatable<z_RndVec3>
	{
		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001C95")]
		private const float resolution = 0.0001f;

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0x63D8C0", Offset = "0x63D8C0", VA = "0x63D8C0")]
		public z_RndVec3(Vector3 vector)
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0x63D8CC", Offset = "0x63D8CC", VA = "0x63D8CC", Slot = "4")]
		public bool Equals(z_RndVec3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0x63D8D4", Offset = "0x63D8D4", VA = "0x63D8D4")]
		public bool Equals(Vector3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0x63D8DC", Offset = "0x63D8DC", VA = "0x63D8DC", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0x63D8E4", Offset = "0x63D8E4", VA = "0x63D8E4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0x63D928", Offset = "0x63D928", VA = "0x63D928", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0x63D930", Offset = "0x63D930", VA = "0x63D930")]
		private int round(float v)
		{
			return default(int);
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0x931744", Offset = "0x931744", VA = "0x931744")]
		public static implicit operator Vector3(z_RndVec3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0x931300", Offset = "0x931300", VA = "0x931300")]
		public static implicit operator z_RndVec3(Vector3 p)
		{
			return default(z_RndVec3);
		}
	}
	[Token(Token = "0x20003D7")]
	public class z_SplatSet
	{
		[Serializable]
		[Token(Token = "0x200063E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C7AC", Offset = "0x74C7AC")]
		private sealed class <>c
		{
			[Token(Token = "0x40021F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Converter<Color32, Vector4> <>9__11_0;

			[Token(Token = "0x40021FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Converter<Vector4, Color32> <>9__17_0;

			[Token(Token = "0x60029B6")]
			[Address(RVA = "0x933B00", Offset = "0x933B00", VA = "0x933B00")]
			public <>c()
			{
			}

			[Token(Token = "0x60029B7")]
			[Address(RVA = "0x933B08", Offset = "0x933B08", VA = "0x933B08")]
			internal Vector4 <.ctor>b__11_0(Color32 x)
			{
				return default(Vector4);
			}

			[Token(Token = "0x60029B8")]
			[Address(RVA = "0x933B10", Offset = "0x933B10", VA = "0x933B10")]
			internal Color32 <Apply>b__17_0(Vector4 x)
			{
				return default(Color32);
			}
		}

		[Token(Token = "0x4001C96")]
		private const float WEIGHT_EPSILON = 0.0001f;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int weightCount;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<z_MeshChannel, int> channelMap;

		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector4[][] weights;

		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public z_AttributeLayout[] attributeLayout;

		[Token(Token = "0x17000320")]
		public int attributeCount
		{
			[Token(Token = "0x6001F79")]
			[Address(RVA = "0x931778", Offset = "0x931778", VA = "0x931778")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0x931798", Offset = "0x931798", VA = "0x931798")]
		public z_SplatSet(int vertexCount, z_AttributeLayout[] attributes, bool preAlloc = true)
		{
		}

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0x931C84", Offset = "0x931C84", VA = "0x931C84")]
		public z_SplatSet(z_SplatSet other)
		{
		}

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0x931F4C", Offset = "0x931F4C", VA = "0x931F4C")]
		private static Vector4 Color32ToVec4(Color32 color)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0x931FB4", Offset = "0x931FB4", VA = "0x931FB4")]
		private static Color32 Vec4ToColor32(Vector4 vec)
		{
			return default(Color32);
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0x932008", Offset = "0x932008", VA = "0x932008")]
		public z_SplatSet(z_Mesh mesh, z_AttributeLayout[] attributes)
		{
		}

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0x9324E0", Offset = "0x9324E0", VA = "0x9324E0")]
		public z_SplatWeight GetMinWeights()
		{
			return null;
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0x932888", Offset = "0x932888", VA = "0x932888")]
		public z_SplatWeight GetMaxWeights()
		{
			return null;
		}

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0x932994", Offset = "0x932994", VA = "0x932994")]
		public void LerpWeights(z_SplatSet lhs, z_SplatSet rhs, int mask, float[] alpha)
		{
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0x9331A0", Offset = "0x9331A0", VA = "0x9331A0")]
		public void LerpWeights(z_SplatSet lhs, z_SplatWeight rhs, float alpha)
		{
		}

		[Token(Token = "0x6001F83")]
		[Address(RVA = "0x9334C0", Offset = "0x9334C0", VA = "0x9334C0")]
		public void CopyTo(z_SplatSet other)
		{
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0x9335F0", Offset = "0x9335F0", VA = "0x9335F0")]
		public void Apply(z_Mesh mesh)
		{
		}

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0x93393C", Offset = "0x93393C", VA = "0x93393C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D8")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x74AA38", Offset = "0x74AA38")]
	public class z_SplatWeight
	{
		[Serializable]
		[Token(Token = "0x200063F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C7BC", Offset = "0x74C7BC")]
		private sealed class <>c
		{
			[Token(Token = "0x40021FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<z_AttributeLayout, z_MeshChannel> <>9__13_0;

			[Token(Token = "0x60029BA")]
			[Address(RVA = "0x935B50", Offset = "0x935B50", VA = "0x935B50")]
			public <>c()
			{
			}

			[Token(Token = "0x60029BB")]
			[Address(RVA = "0x935B58", Offset = "0x935B58", VA = "0x935B58")]
			internal z_MeshChannel <GetChannelMap>b__13_0(z_AttributeLayout x)
			{
				return default(z_MeshChannel);
			}
		}

		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<z_MeshChannel, int> map;

		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] values;

		[Token(Token = "0x17000321")]
		public Vector4 Item
		{
			[Token(Token = "0x6001F86")]
			[Address(RVA = "0x932770", Offset = "0x932770", VA = "0x932770")]
			get
			{
				return default(Vector4);
			}
			[Token(Token = "0x6001F87")]
			[Address(RVA = "0x9327E4", Offset = "0x9327E4", VA = "0x9327E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000322")]
		public float Item
		{
			[Token(Token = "0x6001F88")]
			[Address(RVA = "0x933C70", Offset = "0x933C70", VA = "0x933C70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F89")]
			[Address(RVA = "0x933D1C", Offset = "0x933D1C", VA = "0x933D1C")]
			set
			{
			}
		}

		[Token(Token = "0x17000323")]
		public float Item
		{
			[Token(Token = "0x6001F8A")]
			[Address(RVA = "0x933DD4", Offset = "0x933DD4", VA = "0x933DD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F8B")]
			[Address(RVA = "0x933E18", Offset = "0x933E18", VA = "0x933E18")]
			set
			{
			}
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0x9325EC", Offset = "0x9325EC", VA = "0x9325EC")]
		public z_SplatWeight(Dictionary<z_MeshChannel, int> map)
		{
		}

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0x933E5C", Offset = "0x933E5C", VA = "0x933E5C")]
		public z_SplatWeight(z_SplatWeight rhs)
		{
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0x9318F8", Offset = "0x9318F8", VA = "0x9318F8")]
		public static Dictionary<z_MeshChannel, int> GetChannelMap(z_AttributeLayout[] attributes)
		{
			return null;
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0x933FF0", Offset = "0x933FF0", VA = "0x933FF0")]
		public List<int> GetAffectedIndicesWithMask(z_AttributeLayout[] attributes, int mask)
		{
			return null;
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0x934110", Offset = "0x934110", VA = "0x934110")]
		public bool MatchesAttributes(z_AttributeLayout[] attributes)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0x933B28", Offset = "0x933B28", VA = "0x933B28")]
		private Vector4 GetVec4(int index)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0x933BC8", Offset = "0x933BC8", VA = "0x933BC8")]
		private void SetVec4(int index, Vector4 value)
		{
		}

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0x933C74", Offset = "0x933C74", VA = "0x933C74")]
		public float GetAttributeValue(z_AttributeLayout attrib)
		{
			return default(float);
		}

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0x933D20", Offset = "0x933D20", VA = "0x933D20")]
		public void SetAttributeValue(z_AttributeLayout attrib, float value)
		{
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0x9341D8", Offset = "0x9341D8", VA = "0x9341D8")]
		public void CopyTo(z_SplatWeight other)
		{
		}

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0x934258", Offset = "0x934258", VA = "0x934258")]
		public void Lerp(z_SplatWeight lhs, z_SplatWeight rhs, float alpha)
		{
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0x934D60", Offset = "0x934D60", VA = "0x934D60")]
		public void Lerp(z_SplatWeight lhs, z_SplatWeight rhs, float alpha, List<int> mask)
		{
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0x9358B8", Offset = "0x9358B8", VA = "0x9358B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D9")]
	public static class z_Math
	{
		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 tv1;

		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Vector3 tv2;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector3 tv3;

		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static Vector3 tv4;

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0x92A640", Offset = "0x92A640", VA = "0x92A640")]
		public static void Cross(Vector3 a, Vector3 b, ref float x, ref float y, ref float z)
		{
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0x92A674", Offset = "0x92A674", VA = "0x92A674")]
		public static void Cross(float ax, float ay, float az, float bx, float by, float bz, ref float x, ref float y, ref float z)
		{
		}

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0x92A6A8", Offset = "0x92A6A8", VA = "0x92A6A8")]
		public static bool RayIntersectsTriangle(Vector3 origin, Vector3 direction, Vector3 InTriangleA, Vector3 InTriangleB, Vector3 InTriangleC, out float OutDistance, out Vector3 OutPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0x92AB30", Offset = "0x92AB30", VA = "0x92AB30")]
		public static Vector3 Normal(Vector3 p0, Vector3 p1, Vector3 p2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F9D")]
		[Address(RVA = "0x92ACD8", Offset = "0x92ACD8", VA = "0x92ACD8")]
		public static Vector3 Normal(Vector3[] p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0x92B02C", Offset = "0x92B02C", VA = "0x92B02C")]
		public static void NormalTangentBitangent(Vector3[] vertices, Vector2[] uv, int[] tri, out Vector3 normal, out Vector3 tangent, out Vector3 bitangent)
		{
		}

		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0x92B4CC", Offset = "0x92B4CC", VA = "0x92B4CC")]
		public static int Clamp(int value, int min, int max)
		{
			return default(int);
		}

		[Token(Token = "0x6001FA0")]
		[Address(RVA = "0x92B4E8", Offset = "0x92B4E8", VA = "0x92B4E8")]
		public static Vector3 Average(Vector3[] array, IEnumerable<int> indices)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FA1")]
		[Address(RVA = "0x92B81C", Offset = "0x92B81C", VA = "0x92B81C")]
		public static Vector3 WeightedAverage(Vector3[] array, IList<int> indices, float[] weightLookup)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0x92BC20", Offset = "0x92BC20", VA = "0x92BC20")]
		public static bool VectorIsUniform(Vector3 vec)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003DA")]
	public static class z_MeshUtility
	{
		[Token(Token = "0x2000640")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C7CC", Offset = "0x74C7CC")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x40021FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] v;

			[Token(Token = "0x60029BC")]
			[Address(RVA = "0x92E470", Offset = "0x92E470", VA = "0x92E470")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x60029BD")]
			[Address(RVA = "0x931304", Offset = "0x931304", VA = "0x931304")]
			internal z_RndVec3 <GetCommonVertices>b__3(int x)
			{
				return default(z_RndVec3);
			}
		}

		[Serializable]
		[Token(Token = "0x2000641")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C7DC", Offset = "0x74C7DC")]
		private sealed class <>c
		{
			[Token(Token = "0x40021FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<int, int> <>9__7_5;

			[Token(Token = "0x4002201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<List<int>, int> <>9__7_0;

			[Token(Token = "0x4002202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<int, int> <>9__7_1;

			[Token(Token = "0x4002203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<int, int> <>9__7_2;

			[Token(Token = "0x4002204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<IGrouping<z_RndVec3, int>, List<int>> <>9__7_4;

			[Token(Token = "0x4002205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<IGrouping<z_RndVec3, int>, bool> <>9__17_1;

			[Token(Token = "0x4002206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<IGrouping<z_RndVec3, int>, List<int>> <>9__17_2;

			[Token(Token = "0x60029BF")]
			[Address(RVA = "0x931008", Offset = "0x931008", VA = "0x931008")]
			public <>c()
			{
			}

			[Token(Token = "0x60029C0")]
			[Address(RVA = "0x931010", Offset = "0x931010", VA = "0x931010")]
			internal int <GetCommonVertices>b__7_0(List<int> x)
			{
				return default(int);
			}

			[Token(Token = "0x60029C1")]
			[Address(RVA = "0x9310FC", Offset = "0x9310FC", VA = "0x9310FC")]
			internal int <GetCommonVertices>b__7_5(int y)
			{
				return default(int);
			}

			[Token(Token = "0x60029C2")]
			[Address(RVA = "0x931104", Offset = "0x931104", VA = "0x931104")]
			internal int <GetCommonVertices>b__7_1(int z)
			{
				return default(int);
			}

			[Token(Token = "0x60029C3")]
			[Address(RVA = "0x93110C", Offset = "0x93110C", VA = "0x93110C")]
			internal int <GetCommonVertices>b__7_2(int x)
			{
				return default(int);
			}

			[Token(Token = "0x60029C4")]
			[Address(RVA = "0x931114", Offset = "0x931114", VA = "0x931114")]
			internal List<int> <GetCommonVertices>b__7_4(IGrouping<z_RndVec3, int> y)
			{
				return null;
			}

			[Token(Token = "0x60029C5")]
			[Address(RVA = "0x931164", Offset = "0x931164", VA = "0x931164")]
			internal bool <GetSmoothSeamLookup>b__17_1(IGrouping<z_RndVec3, int> n)
			{
				return default(bool);
			}

			[Token(Token = "0x60029C6")]
			[Address(RVA = "0x9311C0", Offset = "0x9311C0", VA = "0x9311C0")]
			internal List<int> <GetSmoothSeamLookup>b__17_2(IGrouping<z_RndVec3, int> t)
			{
				return null;
			}
		}

		[Token(Token = "0x2000642")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C7EC", Offset = "0x74C7EC")]
		private sealed class <>c__DisplayClass17_0
		{
			[Token(Token = "0x4002207")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] normals;

			[Token(Token = "0x4002208")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<int, z_RndVec3> <>9__3;

			[Token(Token = "0x60029C7")]
			[Address(RVA = "0x92F97C", Offset = "0x92F97C", VA = "0x92F97C")]
			public <>c__DisplayClass17_0()
			{
			}

			[Token(Token = "0x60029C8")]
			[Address(RVA = "0x931210", Offset = "0x931210", VA = "0x931210")]
			internal IEnumerable<IGrouping<z_RndVec3, int>> <GetSmoothSeamLookup>b__0(List<int> x)
			{
				return null;
			}

			[Token(Token = "0x60029C9")]
			[Address(RVA = "0x9312B0", Offset = "0x9312B0", VA = "0x9312B0")]
			internal z_RndVec3 <GetSmoothSeamLookup>b__3(int i)
			{
				return default(z_RndVec3);
			}
		}

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Color clear;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Dictionary<z_Mesh, List<List<int>>> commonVerticesCache;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Dictionary<z_Mesh, Dictionary<z_Edge, List<int>>> adjacentTrianglesCache;

		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Dictionary<z_Mesh, List<List<int>>> commonNormalsCache;

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0x92CB78", Offset = "0x92CB78", VA = "0x92CB78")]
		public static Mesh DeepCopy(Mesh src)
		{
			return null;
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0x92CC04", Offset = "0x92CC04", VA = "0x92CC04")]
		public static void Copy(Mesh dest, Mesh src)
		{
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0x92D058", Offset = "0x92D058", VA = "0x92D058")]
		public static Mesh CreateOverlayMesh(z_Mesh src)
		{
			return null;
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0x92D378", Offset = "0x92D378", VA = "0x92D378")]
		public static Mesh CreateVertexBillboardMesh(z_Mesh src, List<List<int>> common)
		{
			return null;
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0x92DB10", Offset = "0x92DB10", VA = "0x92DB10")]
		public static Dictionary<int, Vector3> GetSmoothNormalLookup(z_Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0x92DF88", Offset = "0x92DF88", VA = "0x92DF88")]
		public static List<List<int>> GetCommonVertices(z_Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0x92E478", Offset = "0x92E478", VA = "0x92E478")]
		public static List<z_CommonEdge> GetEdges(z_Mesh m)
		{
			return null;
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0x92E4F8", Offset = "0x92E4F8", VA = "0x92E4F8")]
		public static List<z_CommonEdge> GetEdges(z_Mesh m, Dictionary<int, int> lookup)
		{
			return null;
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0x92E78C", Offset = "0x92E78C", VA = "0x92E78C")]
		public static HashSet<z_CommonEdge> GetEdgesDistinct(z_Mesh mesh, out List<z_CommonEdge> duplicates)
		{
			return null;
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0x92E81C", Offset = "0x92E81C", VA = "0x92E81C")]
		private static HashSet<z_CommonEdge> GetEdgesDistinct(z_Mesh m, Dictionary<int, int> lookup, out List<z_CommonEdge> duplicates)
		{
			return null;
		}

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0x92EB98", Offset = "0x92EB98", VA = "0x92EB98")]
		public static HashSet<int> GetNonManifoldIndices(z_Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001FAE")]
		[Address(RVA = "0x92EC3C", Offset = "0x92EC3C", VA = "0x92EC3C")]
		public static Dictionary<int, List<int>> GetAdjacentVertices(z_Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0x92F1B8", Offset = "0x92F1B8", VA = "0x92F1B8")]
		public static Dictionary<z_Edge, List<int>> GetAdjacentTriangles(z_Mesh m)
		{
			return null;
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0x92F658", Offset = "0x92F658", VA = "0x92F658")]
		public static List<List<int>> GetSmoothSeamLookup(z_Mesh m)
		{
			return null;
		}

		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0x92F984", Offset = "0x92F984", VA = "0x92F984")]
		public static void RecalculateNormals(z_Mesh m)
		{
		}

		[Token(Token = "0x6001FB2")]
		[Address(RVA = "0x92FC50", Offset = "0x92FC50", VA = "0x92FC50")]
		public static string Print(Mesh m, int maxAttributesToList = 8)
		{
			return null;
		}
	}
	[Token(Token = "0x20003DB")]
	public static class z_Util
	{
		[Serializable]
		[Token(Token = "0x2000643")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C7FC", Offset = "0x74C7FC")]
		private sealed class <>c__4<T>
		{
			[Token(Token = "0x4002209")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__4<T> <>9;

			[Token(Token = "0x400220A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, string> <>9__4_0;

			[Token(Token = "0x60029CB")]
			public <>c__4()
			{
			}

			[Token(Token = "0x60029CC")]
			internal string <ToString>b__4_0(T x)
			{
				return null;
			}
		}

		[Token(Token = "0x6001FB4")]
		public static T[] Fill<T>(T value, int count)
		{
			return null;
		}

		[Token(Token = "0x6001FB5")]
		public static T[] Fill<T>(Func<int, T> constructor, int count)
		{
			return null;
		}

		[Token(Token = "0x6001FB6")]
		public static T[] Duplicate<T>(T[] array)
		{
			return null;
		}

		[Token(Token = "0x6001FB7")]
		public static Dictionary<K, V> InitDictionary<K, V>(Func<int, K> keyFunc, Func<int, V> valueFunc, int count)
		{
			return null;
		}

		[Token(Token = "0x6001FB8")]
		public static string ToString<T>(this IEnumerable<T> enumerable, string delim)
		{
			return null;
		}

		[Token(Token = "0x6001FB9")]
		public static string ToString<K, V>(this Dictionary<K, V> dictionary, string delim)
		{
			return null;
		}

		[Token(Token = "0x6001FBA")]
		public static void Resize<T>(ref T[] array, int newSize)
		{
		}

		[Token(Token = "0x6001FBB")]
		public static Dictionary<K, T> SetValuesAsKey<T, K>(this Dictionary<T, IEnumerable<K>> dic)
		{
			return null;
		}

		[Token(Token = "0x6001FBC")]
		public static Dictionary<T, int> GetCommonLookup<T>(this List<List<T>> lists)
		{
			return null;
		}

		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0x935B74", Offset = "0x935B74", VA = "0x935B74")]
		public static Color32 Lerp(Color32 lhs, Color32 rhs, z_ColorMask mask, float alpha)
		{
			return default(Color32);
		}

		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0x935C80", Offset = "0x935C80", VA = "0x935C80")]
		public static Color32 Lerp(Color32 lhs, Color32 rhs, float alpha)
		{
			return default(Color32);
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0x935D34", Offset = "0x935D34", VA = "0x935D34")]
		public static AnimationCurve ClampAnimationKeys(AnimationCurve curve, float firstKeyTime, float firstKeyValue, float secondKeyTime, float secondKeyValue)
		{
			return null;
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0x935E94", Offset = "0x935E94", VA = "0x935E94")]
		public static Enum Next(this Enum value)
		{
			return null;
		}

		[Token(Token = "0x6001FC1")]
		public static bool IsValid<T>(this T target) where T : z_IValid
		{
			return default(bool);
		}

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0x92CEAC", Offset = "0x92CEAC", VA = "0x92CEAC")]
		internal static string IncrementPrefix(string prefix, string name)
		{
			return null;
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0x935FBC", Offset = "0x935FBC", VA = "0x935FBC")]
		public static Mesh GetMesh(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0x936164", Offset = "0x936164", VA = "0x936164")]
		public static List<Material> GetMaterials(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001FC5")]
		public static Dictionary<T, List<K>> ToDictionary<T, K>(this IEnumerable<IGrouping<T, K>> groups)
		{
			return null;
		}
	}
}
namespace DigitalRuby.ThunderAndLightning
{
	[Token(Token = "0x20003DC")]
	public enum LightningBoltQualitySetting
	{
		[Token(Token = "0x4001CA6")]
		UseScript,
		[Token(Token = "0x4001CA7")]
		LimitToQualitySetting
	}
	[Token(Token = "0x20003DD")]
	public enum CameraMode
	{
		[Token(Token = "0x4001CA9")]
		Auto,
		[Token(Token = "0x4001CAA")]
		Perspective,
		[Token(Token = "0x4001CAB")]
		OrthographicXY,
		[Token(Token = "0x4001CAC")]
		OrthographicXZ,
		[Token(Token = "0x4001CAD")]
		Unknown
	}
	[Serializable]
	[Token(Token = "0x20003DE")]
	public class LightningLightParameters
	{
		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753898", Offset = "0x753898")]
		[HideInInspector]
		public LightRenderMode RenderMode;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7538E4", Offset = "0x7538E4")]
		public Color LightColor;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75391C", Offset = "0x75391C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x75391C", Offset = "0x75391C")]
		public float LightPercent;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753970", Offset = "0x753970")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753970", Offset = "0x753970")]
		public float LightShadowPercent;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7539C4", Offset = "0x7539C4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7539C4", Offset = "0x7539C4")]
		public float LightIntensity;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753A18", Offset = "0x753A18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753A18", Offset = "0x753A18")]
		public float BounceIntensity;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753A6C", Offset = "0x753A6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753A6C", Offset = "0x753A6C")]
		public float ShadowStrength;

		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753AC0", Offset = "0x753AC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753AC0", Offset = "0x753AC0")]
		public float ShadowBias;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753B14", Offset = "0x753B14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753B14", Offset = "0x753B14")]
		public float ShadowNormalBias;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753B68", Offset = "0x753B68")]
		public float LightRange;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753BA0", Offset = "0x753BA0")]
		public LayerMask CullingMask;

		[Token(Token = "0x17000324")]
		public bool HasLight
		{
			[Token(Token = "0x6001FC6")]
			[Address(RVA = "0x7E9440", Offset = "0x7E9440", VA = "0x7E9440")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0x7E948C", Offset = "0x7E948C", VA = "0x7E948C")]
		public LightningLightParameters()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003DF")]
	public sealed class LightningBoltParameters
	{
		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int randomSeed;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<LightningBoltParameters> cache;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int generationWhereForksStop;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int forkednessCalculated;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal LightningBoltQualitySetting quality;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float delaySeconds;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int maxLights;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static float Scale;

		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Dictionary<int, LightningQualityMaximum> QualityMaximums;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LightningGenerator Generator;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 Start;

		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 End;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 StartVariance;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 EndVariance;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int generations;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float LifeTime;

		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float Delay;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public RangeOfFloats DelayRange;

		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float ChaosFactor;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float TrunkWidth;

		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float EndWidthMultiplier;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float Intensity;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float GlowIntensity;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float GlowWidthMultiplier;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float Forkedness;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int GenerationWhereForksStopSubtractor;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private System.Random random;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private System.Random currentRandom;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private System.Random randomOverride;

		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float FadePercent;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float growthMultiplier;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float ForkLengthMultiplier;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float ForkLengthVariance;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float ForkEndWidthMultiplier;

		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public LightningLightParameters LightParameters;

		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x753BD8", Offset = "0x753BD8")]
		private List<Vector3> <Points>k__BackingField;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public int SmoothingFactor;

		[Token(Token = "0x17000325")]
		public int Generations
		{
			[Token(Token = "0x6001FCA")]
			[Address(RVA = "0x7C83E0", Offset = "0x7C83E0", VA = "0x7C83E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001FCB")]
			[Address(RVA = "0x7C83E8", Offset = "0x7C83E8", VA = "0x7C83E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000326")]
		public System.Random Random
		{
			[Token(Token = "0x6001FCC")]
			[Address(RVA = "0x7C859C", Offset = "0x7C859C", VA = "0x7C859C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FCD")]
			[Address(RVA = "0x7C85A4", Offset = "0x7C85A4", VA = "0x7C85A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000327")]
		public System.Random RandomOverride
		{
			[Token(Token = "0x6001FCE")]
			[Address(RVA = "0x7C85D0", Offset = "0x7C85D0", VA = "0x7C85D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FCF")]
			[Address(RVA = "0x7C85D8", Offset = "0x7C85D8", VA = "0x7C85D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000328")]
		public float GrowthMultiplier
		{
			[Token(Token = "0x6001FD0")]
			[Address(RVA = "0x7C85EC", Offset = "0x7C85EC", VA = "0x7C85EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001FD1")]
			[Address(RVA = "0x7C85F4", Offset = "0x7C85F4", VA = "0x7C85F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000329")]
		public List<Vector3> Points
		{
			[Token(Token = "0x6001FD2")]
			[Address(RVA = "0x7C867C", Offset = "0x7C867C", VA = "0x7C867C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759AFC", Offset = "0x759AFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FD3")]
			[Address(RVA = "0x7C8684", Offset = "0x7C8684", VA = "0x7C8684")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B0C", Offset = "0x759B0C")]
			set
			{
			}
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0x7C7FBC", Offset = "0x7C7FBC", VA = "0x7C7FBC")]
		static LightningBoltParameters()
		{
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0x7C8304", Offset = "0x7C8304", VA = "0x7C8304")]
		public LightningBoltParameters()
		{
		}

		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0x7C868C", Offset = "0x7C868C", VA = "0x7C868C")]
		public float ForkMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0x7C86D0", Offset = "0x7C86D0", VA = "0x7C86D0")]
		public Vector3 ApplyVariance(Vector3 pos, Vector3 variance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0x7C87D0", Offset = "0x7C87D0", VA = "0x7C87D0")]
		public static LightningBoltParameters GetOrCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0x7C7454", Offset = "0x7C7454", VA = "0x7C7454")]
		public static void ReturnParametersToCache(LightningBoltParameters p)
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public class LightningBoltSegmentGroup
	{
		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float LineWidth;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int StartIndex;

		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Generation;

		[Token(Token = "0x4001CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Delay;

		[Token(Token = "0x4001CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float PeakStart;

		[Token(Token = "0x4001CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float PeakEnd;

		[Token(Token = "0x4001CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LifeTime;

		[Token(Token = "0x4001CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float EndWidthMultiplier;

		[Token(Token = "0x4001CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color32 Color;

		[Token(Token = "0x4001CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly List<LightningBoltSegment> Segments;

		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly List<Light> Lights;

		[Token(Token = "0x4001CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LightningLightParameters LightParameters;

		[Token(Token = "0x1700032A")]
		public int SegmentCount
		{
			[Token(Token = "0x6001FD8")]
			[Address(RVA = "0x7E70FC", Offset = "0x7E70FC", VA = "0x7E70FC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0x7E7158", Offset = "0x7E7158", VA = "0x7E7158")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0x7E71D4", Offset = "0x7E71D4", VA = "0x7E71D4")]
		public LightningBoltSegmentGroup()
		{
		}
	}
	[Token(Token = "0x20003E1")]
	public struct LightningBoltSegment
	{
		[Token(Token = "0x4001CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Start;

		[Token(Token = "0x4001CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 End;

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0x63C03C", Offset = "0x63C03C", VA = "0x63C03C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003E2")]
	public class LightningQualityMaximum
	{
		[Token(Token = "0x4001CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x753BE8", Offset = "0x753BE8")]
		private int <MaximumGenerations>k__BackingField;

		[Token(Token = "0x4001CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x753BF8", Offset = "0x753BF8")]
		private float <MaximumLightPercent>k__BackingField;

		[Token(Token = "0x4001CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x753C08", Offset = "0x753C08")]
		private float <MaximumShadowPercent>k__BackingField;

		[Token(Token = "0x1700032B")]
		public int MaximumGenerations
		{
			[Token(Token = "0x6001FDC")]
			[Address(RVA = "0x7EB820", Offset = "0x7EB820", VA = "0x7EB820")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B1C", Offset = "0x759B1C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001FDD")]
			[Address(RVA = "0x7EB828", Offset = "0x7EB828", VA = "0x7EB828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B2C", Offset = "0x759B2C")]
			set
			{
			}
		}

		[Token(Token = "0x1700032C")]
		public float MaximumLightPercent
		{
			[Token(Token = "0x6001FDE")]
			[Address(RVA = "0x7EB830", Offset = "0x7EB830", VA = "0x7EB830")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B3C", Offset = "0x759B3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001FDF")]
			[Address(RVA = "0x7EB838", Offset = "0x7EB838", VA = "0x7EB838")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B4C", Offset = "0x759B4C")]
			set
			{
			}
		}

		[Token(Token = "0x1700032D")]
		public float MaximumShadowPercent
		{
			[Token(Token = "0x6001FE0")]
			[Address(RVA = "0x7EB840", Offset = "0x7EB840", VA = "0x7EB840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B5C", Offset = "0x759B5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001FE1")]
			[Address(RVA = "0x7EB848", Offset = "0x7EB848", VA = "0x7EB848")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B6C", Offset = "0x759B6C")]
			set
			{
			}
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0x7EB850", Offset = "0x7EB850", VA = "0x7EB850")]
		public LightningQualityMaximum()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class LightningBoltDependencies
	{
		[Token(Token = "0x4001CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject Parent;

		[Token(Token = "0x4001CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material LightningMaterialMesh;

		[Token(Token = "0x4001CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material LightningMaterialMeshNoGlow;

		[Token(Token = "0x4001CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem OriginParticleSystem;

		[Token(Token = "0x4001CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem DestParticleSystem;

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 CameraPos;

		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool CameraIsOrthographic;

		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CameraMode CameraMode;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool UseWorldSpace;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string SortLayerName;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int SortOrderInLayer;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ICollection<LightningBoltParameters> Parameters;

		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LightningThreadState ThreadState;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Func<IEnumerator, Coroutine> StartCoroutine;

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Action<Light> LightAdded;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Action<Light> LightRemoved;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Action<LightningBolt> AddActiveBolt;

		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Action<LightningBoltDependencies> ReturnToCache;

		[Token(Token = "0x4001D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Action<LightningBoltParameters, Vector3, Vector3> LightningBoltStarted;

		[Token(Token = "0x4001D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Action<LightningBoltParameters, Vector3, Vector3> LightningBoltEnded;

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0x7C7FB4", Offset = "0x7C7FB4", VA = "0x7C7FB4")]
		public LightningBoltDependencies()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public class LightningBolt
	{
		[Token(Token = "0x2000644")]
		public class LineRendererMesh
		{
			[Token(Token = "0x400220B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756528", Offset = "0x756528")]
			private GameObject <GameObject>k__BackingField;

			[Token(Token = "0x400220C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x756538", Offset = "0x756538")]
			private int <Tag>k__BackingField;

			[Token(Token = "0x400220D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Vector2 uv1;

			[Token(Token = "0x400220E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static readonly Vector2 uv2;

			[Token(Token = "0x400220F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private static readonly Vector2 uv3;

			[Token(Token = "0x4002210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private static readonly Vector2 uv4;

			[Token(Token = "0x4002211")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly List<int> indices;

			[Token(Token = "0x4002212")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly List<Vector3> vertices;

			[Token(Token = "0x4002213")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly List<Vector4> lineDirs;

			[Token(Token = "0x4002214")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly List<Color32> colors;

			[Token(Token = "0x4002215")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private readonly List<Vector3> ends;

			[Token(Token = "0x4002216")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private readonly List<Vector4> texCoordsAndGlowModifiers;

			[Token(Token = "0x4002217")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private readonly List<Vector4> fadeLifetimes;

			[Token(Token = "0x4002218")]
			private const int boundsPadder = 1000000000;

			[Token(Token = "0x4002219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int currentBoundsMinX;

			[Token(Token = "0x400221A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private int currentBoundsMinY;

			[Token(Token = "0x400221B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int currentBoundsMinZ;

			[Token(Token = "0x400221C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private int currentBoundsMaxX;

			[Token(Token = "0x400221D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int currentBoundsMaxY;

			[Token(Token = "0x400221E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private int currentBoundsMaxZ;

			[Token(Token = "0x400221F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private Mesh mesh;

			[Token(Token = "0x4002220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private MeshFilter meshFilter;

			[Token(Token = "0x4002221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private MeshRenderer meshRenderer;

			[Token(Token = "0x170003E4")]
			public GameObject GameObject
			{
				[Token(Token = "0x60029CD")]
				[Address(RVA = "0x7C75EC", Offset = "0x7C75EC", VA = "0x7C75EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75B120", Offset = "0x75B120")]
				get
				{
					return null;
				}
				[Token(Token = "0x60029CE")]
				[Address(RVA = "0x7C75F4", Offset = "0x7C75F4", VA = "0x7C75F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75B130", Offset = "0x75B130")]
				private set
				{
				}
			}

			[Token(Token = "0x170003E5")]
			public Material Material
			{
				[Token(Token = "0x60029CF")]
				[Address(RVA = "0x7C75FC", Offset = "0x7C75FC", VA = "0x7C75FC")]
				get
				{
					return null;
				}
				[Token(Token = "0x60029D0")]
				[Address(RVA = "0x7C4614", Offset = "0x7C4614", VA = "0x7C4614")]
				set
				{
				}
			}

			[Token(Token = "0x170003E6")]
			public MeshRenderer MeshRenderer
			{
				[Token(Token = "0x60029D1")]
				[Address(RVA = "0x7C7618", Offset = "0x7C7618", VA = "0x7C7618")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E7")]
			public int Tag
			{
				[Token(Token = "0x60029D2")]
				[Address(RVA = "0x7C7620", Offset = "0x7C7620", VA = "0x7C7620")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75B140", Offset = "0x75B140")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60029D3")]
				[Address(RVA = "0x7C7628", Offset = "0x7C7628", VA = "0x7C7628")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75B150", Offset = "0x75B150")]
				set
				{
				}
			}

			[Token(Token = "0x60029D4")]
			[Address(RVA = "0x7C4390", Offset = "0x7C4390", VA = "0x7C4390")]
			public LineRendererMesh()
			{
			}

			[Token(Token = "0x60029D5")]
			[Address(RVA = "0x7C427C", Offset = "0x7C427C", VA = "0x7C427C")]
			public void PopulateMesh()
			{
			}

			[Token(Token = "0x60029D6")]
			[Address(RVA = "0x7C4AA0", Offset = "0x7C4AA0", VA = "0x7C4AA0")]
			public bool PrepareForLines(int lineCount)
			{
				return default(bool);
			}

			[Token(Token = "0x60029D7")]
			[Address(RVA = "0x7C4C1C", Offset = "0x7C4C1C", VA = "0x7C4C1C")]
			public void BeginLine(Vector3 start, Vector3 end, float radius, Color32 color, float colorIntensity, Vector4 fadeLifeTime, float glowWidthModifier, float glowIntensity)
			{
			}

			[Token(Token = "0x60029D8")]
			[Address(RVA = "0x7C4D98", Offset = "0x7C4D98", VA = "0x7C4D98")]
			public void AppendLine(Vector3 start, Vector3 end, float radius, Color32 color, float colorIntensity, Vector4 fadeLifeTime, float glowWidthModifier, float glowIntensity)
			{
			}

			[Token(Token = "0x60029D9")]
			[Address(RVA = "0x7C3C50", Offset = "0x7C3C50", VA = "0x7C3C50")]
			public void Reset()
			{
			}

			[Token(Token = "0x60029DA")]
			[Address(RVA = "0x7C7630", Offset = "0x7C7630", VA = "0x7C7630")]
			private void PopulateMeshInternal()
			{
			}

			[Token(Token = "0x60029DB")]
			[Address(RVA = "0x7C7CF8", Offset = "0x7C7CF8", VA = "0x7C7CF8")]
			private void UpdateBounds(ref Vector3 point1, ref Vector3 point2)
			{
			}

			[Token(Token = "0x60029DC")]
			[Address(RVA = "0x7C7DD4", Offset = "0x7C7DD4", VA = "0x7C7DD4")]
			private void AddIndices()
			{
			}

			[Token(Token = "0x60029DD")]
			[Address(RVA = "0x7C7888", Offset = "0x7C7888", VA = "0x7C7888")]
			private void AppendLineInternal(ref Vector3 start, ref Vector3 end, ref Vector4 dir, ref Vector4 dirPrev1, ref Vector4 dirPrev2, Color32 color, float colorIntensity, ref Vector4 fadeLifeTime, float glowWidthModifier, float glowIntensity)
			{
			}
		}

		[Token(Token = "0x2000645")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C80C", Offset = "0x74C80C")]
		private sealed class <EnableLastRendererCoRoutine>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002224")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightningBolt <>4__this;

			[Token(Token = "0x4002225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private LineRendererMesh <lineRenderer>5__2;

			[Token(Token = "0x4002226")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <tag>5__3;

			[Token(Token = "0x170003E8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029E2")]
				[Address(RVA = "0x7C6F90", Offset = "0x7C6F90", VA = "0x7C6F90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029E4")]
				[Address(RVA = "0x7C6FFC", Offset = "0x7C6FFC", VA = "0x7C6FFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029DF")]
			[Address(RVA = "0x7C4364", Offset = "0x7C4364", VA = "0x7C4364")]
			[DebuggerHidden]
			public <EnableLastRendererCoRoutine>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x60029E0")]
			[Address(RVA = "0x7C6E80", Offset = "0x7C6E80", VA = "0x7C6E80", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029E1")]
			[Address(RVA = "0x7C6E84", Offset = "0x7C6E84", VA = "0x7C6E84", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029E3")]
			[Address(RVA = "0x7C6F98", Offset = "0x7C6F98", VA = "0x7C6F98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000646")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C81C", Offset = "0x74C81C")]
		private sealed class <>c__DisplayClass40_0
		{
			[Token(Token = "0x4002227")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LightningBolt <>4__this;

			[Token(Token = "0x4002228")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LineRendererMesh currentLineRenderer;

			[Token(Token = "0x60029E5")]
			[Address(RVA = "0x7C4A98", Offset = "0x7C4A98", VA = "0x7C4A98")]
			public <>c__DisplayClass40_0()
			{
			}

			[Token(Token = "0x60029E6")]
			[Address(RVA = "0x7C6C6C", Offset = "0x7C6C6C", VA = "0x7C6C6C")]
			internal void <RenderGroup>b__0()
			{
			}
		}

		[Token(Token = "0x2000647")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C82C", Offset = "0x74C82C")]
		private sealed class <NotifyBolt>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002229")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400222A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400222B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightningBoltParameters p;

			[Token(Token = "0x400222C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LightningBoltDependencies dependencies;

			[Token(Token = "0x400222D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 start;

			[Token(Token = "0x400222E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 end;

			[Token(Token = "0x400222F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <lifeTime>5__2;

			[Token(Token = "0x170003EA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029EA")]
				[Address(RVA = "0x7C7578", Offset = "0x7C7578", VA = "0x7C7578", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003EB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029EC")]
				[Address(RVA = "0x7C75E4", Offset = "0x7C75E4", VA = "0x7C75E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029E7")]
			[Address(RVA = "0x7C5048", Offset = "0x7C5048", VA = "0x7C5048")]
			[DebuggerHidden]
			public <NotifyBolt>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x60029E8")]
			[Address(RVA = "0x7C72BC", Offset = "0x7C72BC", VA = "0x7C72BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029E9")]
			[Address(RVA = "0x7C72C0", Offset = "0x7C72C0", VA = "0x7C72C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029EB")]
			[Address(RVA = "0x7C7580", Offset = "0x7C7580", VA = "0x7C7580", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000648")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C83C", Offset = "0x74C83C")]
		private sealed class <>c__DisplayClass43_0
		{
			[Token(Token = "0x4002230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LightningBoltParameters p;

			[Token(Token = "0x4002231")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 start;

			[Token(Token = "0x4002232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 end;

			[Token(Token = "0x60029ED")]
			[Address(RVA = "0x7C5384", Offset = "0x7C5384", VA = "0x7C5384")]
			public <>c__DisplayClass43_0()
			{
			}
		}

		[Token(Token = "0x2000649")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C84C", Offset = "0x74C84C")]
		private sealed class <>c__DisplayClass43_1
		{
			[Token(Token = "0x4002233")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LightningBoltDependencies dependenciesRef;

			[Token(Token = "0x4002234")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass43_0 CS$<>8__locals1;

			[Token(Token = "0x60029EE")]
			[Address(RVA = "0x7C538C", Offset = "0x7C538C", VA = "0x7C538C")]
			public <>c__DisplayClass43_1()
			{
			}

			[Token(Token = "0x60029EF")]
			[Address(RVA = "0x7C6CA8", Offset = "0x7C6CA8", VA = "0x7C6CA8")]
			internal void <ProcessParameters>b__0()
			{
			}
		}

		[Token(Token = "0x200064A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C85C", Offset = "0x74C85C")]
		private sealed class <>c__DisplayClass48_0
		{
			[Token(Token = "0x4002235")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LightningBolt <>4__this;

			[Token(Token = "0x4002236")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 start;

			[Token(Token = "0x4002237")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 end;

			[Token(Token = "0x4002238")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LightningBoltParameters parameters;

			[Token(Token = "0x4002239")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public LightningLightParameters lp;

			[Token(Token = "0x400223A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int startGroupIndex;

			[Token(Token = "0x400223B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public LightningBoltQualitySetting quality;

			[Token(Token = "0x60029F0")]
			[Address(RVA = "0x7C5A6C", Offset = "0x7C5A6C", VA = "0x7C5A6C")]
			public <>c__DisplayClass48_0()
			{
			}

			[Token(Token = "0x60029F1")]
			[Address(RVA = "0x7C6D90", Offset = "0x7C6D90", VA = "0x7C6D90")]
			internal void <RenderLightningBolt>b__0()
			{
			}
		}

		[Token(Token = "0x200064B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C86C", Offset = "0x74C86C")]
		private sealed class <GenerateParticleCoRoutine>d__54 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400223C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400223D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400223E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x400223F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ParticleSystem p;

			[Token(Token = "0x4002240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 pos;

			[Token(Token = "0x170003EC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029F5")]
				[Address(RVA = "0x7C7248", Offset = "0x7C7248", VA = "0x7C7248", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029F7")]
				[Address(RVA = "0x7C72B4", Offset = "0x7C72B4", VA = "0x7C72B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029F2")]
			[Address(RVA = "0x7C6B14", Offset = "0x7C6B14", VA = "0x7C6B14")]
			[DebuggerHidden]
			public <GenerateParticleCoRoutine>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x60029F3")]
			[Address(RVA = "0x7C7004", Offset = "0x7C7004", VA = "0x7C7004", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029F4")]
			[Address(RVA = "0x7C7008", Offset = "0x7C7008", VA = "0x7C7008", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029F6")]
			[Address(RVA = "0x7C7250", Offset = "0x7C7250", VA = "0x7C7250", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int MaximumLightCount;

		[Token(Token = "0x4001D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int MaximumLightsPerBatch;

		[Token(Token = "0x4001D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x753C18", Offset = "0x753C18")]
		private float <MinimumDelay>k__BackingField;

		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x753C28", Offset = "0x753C28")]
		private bool <HasGlow>k__BackingField;

		[Token(Token = "0x4001D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x753C38", Offset = "0x753C38")]
		private CameraMode <CameraMode>k__BackingField;

		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float startTimeOffset;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LightningBoltDependencies dependencies;

		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float elapsedTime;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float lifeTime;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasLight;

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float timeSinceLevelLoad;

		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<LightningBoltSegmentGroup> segmentGroups;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly List<LightningBoltSegmentGroup> segmentGroupsWithLight;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<LineRendererMesh> activeLineRenderers;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int lightCount;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly List<LineRendererMesh> lineRendererCache;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly List<LightningBoltSegmentGroup> groupCache;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly List<Light> lightCache;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vector3 kVector3Zero;

		[Token(Token = "0x1700032E")]
		public float MinimumDelay
		{
			[Token(Token = "0x6001FE4")]
			[Address(RVA = "0x7C2288", Offset = "0x7C2288", VA = "0x7C2288")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B7C", Offset = "0x759B7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001FE5")]
			[Address(RVA = "0x7C2290", Offset = "0x7C2290", VA = "0x7C2290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B8C", Offset = "0x759B8C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032F")]
		public bool HasGlow
		{
			[Token(Token = "0x6001FE6")]
			[Address(RVA = "0x7C2298", Offset = "0x7C2298", VA = "0x7C2298")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759B9C", Offset = "0x759B9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FE7")]
			[Address(RVA = "0x7C22A0", Offset = "0x7C22A0", VA = "0x7C22A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759BAC", Offset = "0x759BAC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000330")]
		public bool IsActive
		{
			[Token(Token = "0x6001FE8")]
			[Address(RVA = "0x7C22AC", Offset = "0x7C22AC", VA = "0x7C22AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000331")]
		public CameraMode CameraMode
		{
			[Token(Token = "0x6001FE9")]
			[Address(RVA = "0x7C22BC", Offset = "0x7C22BC", VA = "0x7C22BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759BBC", Offset = "0x759BBC")]
			get
			{
				return default(CameraMode);
			}
			[Token(Token = "0x6001FEA")]
			[Address(RVA = "0x7C22C4", Offset = "0x7C22C4", VA = "0x7C22C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759BCC", Offset = "0x759BCC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0x7C22CC", Offset = "0x7C22CC", VA = "0x7C22CC")]
		public LightningBolt()
		{
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0x7C2384", Offset = "0x7C2384", VA = "0x7C2384")]
		public void SetupLightningBolt(LightningBoltDependencies dependencies)
		{
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0x7C3508", Offset = "0x7C3508", VA = "0x7C3508")]
		public bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0x7C3678", Offset = "0x7C3678", VA = "0x7C3678")]
		public void Cleanup()
		{
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0x7C3D7C", Offset = "0x7C3D7C", VA = "0x7C3D7C")]
		public LightningBoltSegmentGroup AddGroup()
		{
			return null;
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0x7C3EBC", Offset = "0x7C3EBC", VA = "0x7C3EBC")]
		public static void ClearCache()
		{
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0x7C3B2C", Offset = "0x7C3B2C", VA = "0x7C3B2C")]
		private void CleanupLight(Light l)
		{
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0x7C41C4", Offset = "0x7C41C4", VA = "0x7C41C4")]
		private void EnableLineRenderer(LineRendererMesh lineRenderer, int tag)
		{
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0x7C42F0", Offset = "0x7C42F0", VA = "0x7C42F0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759BDC", Offset = "0x759BDC")]
		private IEnumerator EnableLastRendererCoRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0x7C28BC", Offset = "0x7C28BC", VA = "0x7C28BC")]
		private LineRendererMesh GetOrCreateLineRenderer()
		{
			return null;
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0x7C4630", Offset = "0x7C4630", VA = "0x7C4630")]
		private void RenderGroup(LightningBoltSegmentGroup group, LightningBoltParameters p)
		{
		}

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0x7C4F8C", Offset = "0x7C4F8C", VA = "0x7C4F8C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759C40", Offset = "0x759C40")]
		private static IEnumerator NotifyBolt(LightningBoltDependencies dependencies, LightningBoltParameters p, Vector3 start, Vector3 end)
		{
			return null;
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0x7C5074", Offset = "0x7C5074", VA = "0x7C5074")]
		private void ProcessParameters(LightningBoltParameters p, RangeOfFloats delay)
		{
		}

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0x7C2C28", Offset = "0x7C2C28", VA = "0x7C2C28")]
		private void ProcessAllLightningParameters()
		{
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0x7C5794", Offset = "0x7C5794", VA = "0x7C5794")]
		private void EnableCurrentLineRendererFromThread()
		{
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0x7C4B10", Offset = "0x7C4B10", VA = "0x7C4B10")]
		private void EnableCurrentLineRenderer()
		{
		}

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0x7C5810", Offset = "0x7C5810", VA = "0x7C5810")]
		private void RenderParticleSystems(Vector3 start, Vector3 end, float trunkWidth, float lifeTime, float delaySeconds)
		{
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0x7C5394", Offset = "0x7C5394", VA = "0x7C5394")]
		private void RenderLightningBolt(LightningBoltQualitySetting quality, int generations, int startGroupIndex, int endGroupIndex, LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0x7C5A74", Offset = "0x7C5A74", VA = "0x7C5A74")]
		private void CreateLightsForGroup(LightningBoltSegmentGroup group, LightningLightParameters lp, LightningBoltQualitySetting quality, int maxLights)
		{
		}

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0x7C5D88", Offset = "0x7C5D88", VA = "0x7C5D88")]
		private bool AddLightToGroup(LightningBoltSegmentGroup group, LightningLightParameters lp, int segmentIndex, int nthLight, int nthShadows, ref int maxLights, ref int nthShadowCounter)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0x7C6004", Offset = "0x7C6004", VA = "0x7C6004")]
		private Light GetOrCreateLight(LightningLightParameters lp)
		{
			return null;
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0x7C62CC", Offset = "0x7C62CC", VA = "0x7C62CC")]
		private void UpdateLight(LightningLightParameters lp, IEnumerable<Light> lights, float delay, float peakStart, float peakEnd, float lifeTime)
		{
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0x7C3568", Offset = "0x7C3568", VA = "0x7C3568")]
		private void UpdateLights()
		{
		}

		[Token(Token = "0x6002002")]
		[Address(RVA = "0x7C59CC", Offset = "0x7C59CC", VA = "0x7C59CC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759CA4", Offset = "0x759CA4")]
		private IEnumerator GenerateParticleCoRoutine(ParticleSystem p, Vector3 pos, float delay)
		{
			return null;
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0x7C257C", Offset = "0x7C257C", VA = "0x7C257C")]
		private void CheckForGlow(IEnumerable<LightningBoltParameters> parameters)
		{
		}
	}
	[Token(Token = "0x20003E5")]
	public class LightningThreadState
	{
		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Thread lightningThread;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AutoResetEvent lightningThreadEvent;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Queue<Action> actionsForBackgroundThread;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Queue<KeyValuePair<Action, ManualResetEvent>> actionsForMainThread;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool Running;

		[Token(Token = "0x6002005")]
		[Address(RVA = "0x7ED668", Offset = "0x7ED668", VA = "0x7ED668")]
		private void BackgroundThreadMethod()
		{
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0x7ED968", Offset = "0x7ED968", VA = "0x7ED968")]
		public LightningThreadState()
		{
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0x7EDAC4", Offset = "0x7EDAC4", VA = "0x7EDAC4")]
		public void UpdateMainThreadActions()
		{
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0x7EDC64", Offset = "0x7EDC64", VA = "0x7EDC64")]
		public void AddActionForMainThread(Action a, bool waitForAction = false)
		{
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0x7EDDC0", Offset = "0x7EDDC0", VA = "0x7EDDC0")]
		public void AddActionForBackgroundThread(Action a)
		{
		}
	}
	[Token(Token = "0x20003E6")]
	public abstract class LightningBoltPathScriptBase : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753C48", Offset = "0x753C48")]
		[AttributeAttribute(Name = "ReorderableListAttribute", RVA = "0x753C48", Offset = "0x753C48")]
		public ReorderableList_GameObject LightningPath;

		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private readonly List<GameObject> currentPathObjects;

		[Token(Token = "0x600200A")]
		[Address(RVA = "0x7C8BDC", Offset = "0x7C8BDC", VA = "0x7C8BDC")]
		protected List<GameObject> GetCurrentPathObjects()
		{
			return null;
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0x7C8EB0", Offset = "0x7C8EB0", VA = "0x7C8EB0", Slot = "8")]
		protected override LightningBoltParameters OnCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0x7C8E24", Offset = "0x7C8E24", VA = "0x7C8E24")]
		protected LightningBoltPathScriptBase()
		{
		}
	}
	[Token(Token = "0x20003E7")]
	public class LightningBoltPathScript : LightningBoltPathScriptBase
	{
		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753CA8", Offset = "0x753CA8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753CA8", Offset = "0x753CA8")]
		public float Speed;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[AttributeAttribute(Name = "SingleLineClampAttribute", RVA = "0x753D00", Offset = "0x753D00")]
		public RangeOfFloats SpeedIntervalRange;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753D44", Offset = "0x753D44")]
		public bool Repeat;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private float nextInterval;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private int nextIndex;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Vector3? lastPoint;

		[Token(Token = "0x600200D")]
		[Address(RVA = "0x7C88D0", Offset = "0x7C88D0", VA = "0x7C88D0", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0x7C8DE4", Offset = "0x7C8DE4", VA = "0x7C8DE4")]
		public void Reset()
		{
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0x7C8E04", Offset = "0x7C8E04", VA = "0x7C8E04")]
		public LightningBoltPathScript()
		{
		}
	}
	[Token(Token = "0x20003E8")]
	public abstract class LightningBoltPrefabScriptBase : LightningBoltScript
	{
		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly List<LightningBoltParameters> batchParameters;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly System.Random random;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753D7C", Offset = "0x753D7C")]
		[AttributeAttribute(Name = "SingleLineClampAttribute", RVA = "0x753D7C", Offset = "0x753D7C")]
		public RangeOfFloats IntervalRange;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "SingleLineClampAttribute", RVA = "0x753DEC", Offset = "0x753DEC")]
		public RangeOfIntegers CountRange;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753E30", Offset = "0x753E30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753E30", Offset = "0x753E30")]
		public float CountProbabilityModifier;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[AttributeAttribute(Name = "SingleLineClampAttribute", RVA = "0x753E84", Offset = "0x753E84")]
		public RangeOfFloats DelayRange;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[AttributeAttribute(Name = "SingleLineClampAttribute", RVA = "0x753EC4", Offset = "0x753EC4")]
		public RangeOfFloats DurationRange;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x753F08", Offset = "0x753F08")]
		[AttributeAttribute(Name = "SingleLineClampAttribute", RVA = "0x753F08", Offset = "0x753F08")]
		public RangeOfFloats TrunkWidthRange;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753F78", Offset = "0x753F78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753F78", Offset = "0x753F78")]
		public float LifeTime;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x753FD0", Offset = "0x753FD0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x753FD0", Offset = "0x753FD0")]
		public int Generations;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754024", Offset = "0x754024")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x754024", Offset = "0x754024")]
		public float ChaosFactor;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754078", Offset = "0x754078")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x754078", Offset = "0x754078")]
		public float Intensity;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7540CC", Offset = "0x7540CC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7540CC", Offset = "0x7540CC")]
		public float GlowIntensity;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754120", Offset = "0x754120")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x754120", Offset = "0x754120")]
		public float GlowWidthMultiplier;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754178", Offset = "0x754178")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x754178", Offset = "0x754178")]
		public float Forkedness;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7541CC", Offset = "0x7541CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7541CC", Offset = "0x7541CC")]
		public float ForkLengthMultiplier;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x754220", Offset = "0x754220")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754220", Offset = "0x754220")]
		public float ForkLengthVariance;

		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754274", Offset = "0x754274")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x754274", Offset = "0x754274")]
		public float FadePercent;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7542C8", Offset = "0x7542C8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7542C8", Offset = "0x7542C8")]
		public float GrowthMultiplier;

		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75431C", Offset = "0x75431C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x75431C", Offset = "0x75431C")]
		public float EndWidthMultiplier;

		[Token(Token = "0x4001D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754370", Offset = "0x754370")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x754370", Offset = "0x754370")]
		public float ForkEndWidthMultiplier;

		[Token(Token = "0x4001D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7543C4", Offset = "0x7543C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7543C4", Offset = "0x7543C4")]
		public LightningLightParameters LightParameters;

		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754424", Offset = "0x754424")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x754424", Offset = "0x754424")]
		public int MaximumLightsPerBatch;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x75447C", Offset = "0x75447C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75447C", Offset = "0x75447C")]
		public bool ManualMode;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7544DC", Offset = "0x7544DC")]
		private System.Random <RandomOverride>k__BackingField;

		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float nextArc;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private float lifeTimeRemaining;

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float timer;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float seconds;

		[Token(Token = "0x17000332")]
		public System.Random RandomOverride
		{
			[Token(Token = "0x6002010")]
			[Address(RVA = "0x7C92C4", Offset = "0x7C92C4", VA = "0x7C92C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D08", Offset = "0x759D08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002011")]
			[Address(RVA = "0x7C92CC", Offset = "0x7C92CC", VA = "0x7C92CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D18", Offset = "0x759D18")]
			set
			{
			}
		}

		[Token(Token = "0x6002012")]
		[Address(RVA = "0x7C8F94", Offset = "0x7C8F94", VA = "0x7C8F94")]
		public LightningBoltPrefabScriptBase()
		{
		}

		[Token(Token = "0x6002013")]
		[Address(RVA = "0x7C9458", Offset = "0x7C9458", VA = "0x7C9458")]
		private void CreateInterval(float offset)
		{
		}

		[Token(Token = "0x6002014")]
		[Address(RVA = "0x7C94B4", Offset = "0x7C94B4", VA = "0x7C94B4")]
		private void CallLightning()
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0x7C94C8", Offset = "0x7C94C8", VA = "0x7C94C8")]
		private void CallLightning(Vector3? start, Vector3? end)
		{
		}

		[Token(Token = "0x6002016")]
		[Address(RVA = "0x7C966C", Offset = "0x7C966C", VA = "0x7C966C")]
		protected void CreateLightningBoltsNow()
		{
		}

		[Token(Token = "0x6002017")]
		[Address(RVA = "0x7C9818", Offset = "0x7C9818", VA = "0x7C9818", Slot = "9")]
		protected override void PopulateParameters(LightningBoltParameters p)
		{
		}

		[Token(Token = "0x6002018")]
		[Address(RVA = "0x7C990C", Offset = "0x7C990C", VA = "0x7C990C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0x7C9A70", Offset = "0x7C9A70", VA = "0x7C9A70", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0x7C8D7C", Offset = "0x7C8D7C", VA = "0x7C8D7C", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters p)
		{
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0x7C9C50", Offset = "0x7C9C50", VA = "0x7C9C50")]
		public void Trigger()
		{
		}

		[Token(Token = "0x600201C")]
		[Address(RVA = "0x7C9C64", Offset = "0x7C9C64", VA = "0x7C9C64")]
		public void Trigger(Vector3? start, Vector3? end)
		{
		}
	}
	[Token(Token = "0x20003E9")]
	public class LightningBoltPrefabScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7544EC", Offset = "0x7544EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7544EC", Offset = "0x7544EC")]
		public GameObject Source;

		[Token(Token = "0x4001D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75454C", Offset = "0x75454C")]
		public GameObject Destination;

		[Token(Token = "0x4001D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754584", Offset = "0x754584")]
		public Vector3 StartVariance;

		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7545BC", Offset = "0x7545BC")]
		public Vector3 EndVariance;

		[Token(Token = "0x600201E")]
		[Address(RVA = "0x7C910C", Offset = "0x7C910C", VA = "0x7C910C", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0x7C9260", Offset = "0x7C9260", VA = "0x7C9260")]
		public LightningBoltPrefabScript()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class LightningBoltScript : MonoBehaviour
	{
		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7545F4", Offset = "0x7545F4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7545F4", Offset = "0x7545F4")]
		public Camera Camera;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754654", Offset = "0x754654")]
		public CameraMode CameraMode;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal CameraMode calculatedCameraMode;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75468C", Offset = "0x75468C")]
		public bool UseWorldSpace;

		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7546C4", Offset = "0x7546C4")]
		public bool CompensateForParentTransform;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7546FC", Offset = "0x7546FC")]
		public LightningBoltQualitySetting QualitySetting;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754734", Offset = "0x754734")]
		public bool MultiThreaded;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75476C", Offset = "0x75476C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x75476C", Offset = "0x75476C")]
		public float SoftParticlesFactor;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7547C8", Offset = "0x7547C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7547C8", Offset = "0x7547C8")]
		public int RenderQueue;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public string SortLayerName;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public int SortOrderInLayer;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754848", Offset = "0x754848")]
		public Material LightningMaterialMesh;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754880", Offset = "0x754880")]
		public Material LightningMaterialMeshNoGlow;

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7548B8", Offset = "0x7548B8")]
		public Texture2D LightningTexture;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7548F0", Offset = "0x7548F0")]
		public Texture2D LightningGlowTexture;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754928", Offset = "0x754928")]
		public ParticleSystem LightningOriginParticleSystem;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754960", Offset = "0x754960")]
		public ParticleSystem LightningDestinationParticleSystem;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754998", Offset = "0x754998")]
		public Color LightningTintColor;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7549D0", Offset = "0x7549D0")]
		public Color GlowTintColor;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754A08", Offset = "0x754A08")]
		public BlendMode SourceBlendMode;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754A40", Offset = "0x754A40")]
		public BlendMode DestinationBlendMode;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x754A78", Offset = "0x754A78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754A78", Offset = "0x754A78")]
		public float JitterMultiplier;

		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754AD8", Offset = "0x754AD8")]
		public float Turbulence;

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754B10", Offset = "0x754B10")]
		public Vector3 TurbulenceVelocity;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754B48", Offset = "0x754B48")]
		private Action<LightningBoltParameters, Vector3, Vector3> <LightningStartedCallback>k__BackingField;

		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754B58", Offset = "0x754B58")]
		private Action<LightningBoltParameters, Vector3, Vector3> <LightningEndedCallback>k__BackingField;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754B68", Offset = "0x754B68")]
		private Action<Light> <LightAddedCallback>k__BackingField;

		[Token(Token = "0x4001D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754B78", Offset = "0x754B78")]
		private Action<Light> <LightRemovedCallback>k__BackingField;

		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static DateTime Now;

		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754B88", Offset = "0x754B88")]
		private Material <lightningMaterialMeshInternal>k__BackingField;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754B98", Offset = "0x754B98")]
		private Material <lightningMaterialMeshNoGlowInternal>k__BackingField;

		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Texture2D lastLightningTexture;

		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Texture2D lastLightningGlowTexture;

		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly List<LightningBolt> activeBolts;

		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private readonly LightningBoltParameters[] oneParameterArray;

		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private readonly List<LightningBolt> lightningBoltCache;

		[Token(Token = "0x4001D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly List<LightningBoltDependencies> dependenciesCache;

		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private LightningThreadState threadState;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int shaderId_MainTex;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int shaderId_GlowTex;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int shaderId_TintColor;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int shaderId_GlowTintColor;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static int shaderId_JitterMultiplier;

		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static int shaderId_Turbulence;

		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int shaderId_TurbulenceVelocity;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static int shaderId_SrcBlendMode;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static int shaderId_DstBlendMode;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static int shaderId_InvFade;

		[Token(Token = "0x17000333")]
		public Action<LightningBoltParameters, Vector3, Vector3> LightningStartedCallback
		{
			[Token(Token = "0x6002020")]
			[Address(RVA = "0x7C9C6C", Offset = "0x7C9C6C", VA = "0x7C9C6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D28", Offset = "0x759D28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002021")]
			[Address(RVA = "0x7C9C74", Offset = "0x7C9C74", VA = "0x7C9C74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D38", Offset = "0x759D38")]
			set
			{
			}
		}

		[Token(Token = "0x17000334")]
		public Action<LightningBoltParameters, Vector3, Vector3> LightningEndedCallback
		{
			[Token(Token = "0x6002022")]
			[Address(RVA = "0x7C9C7C", Offset = "0x7C9C7C", VA = "0x7C9C7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D48", Offset = "0x759D48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002023")]
			[Address(RVA = "0x7C9C84", Offset = "0x7C9C84", VA = "0x7C9C84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D58", Offset = "0x759D58")]
			set
			{
			}
		}

		[Token(Token = "0x17000335")]
		public Action<Light> LightAddedCallback
		{
			[Token(Token = "0x6002024")]
			[Address(RVA = "0x7C9C8C", Offset = "0x7C9C8C", VA = "0x7C9C8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D68", Offset = "0x759D68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002025")]
			[Address(RVA = "0x7C9C94", Offset = "0x7C9C94", VA = "0x7C9C94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D78", Offset = "0x759D78")]
			set
			{
			}
		}

		[Token(Token = "0x17000336")]
		public Action<Light> LightRemovedCallback
		{
			[Token(Token = "0x6002026")]
			[Address(RVA = "0x7C9C9C", Offset = "0x7C9C9C", VA = "0x7C9C9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D88", Offset = "0x759D88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002027")]
			[Address(RVA = "0x7C9CA4", Offset = "0x7C9CA4", VA = "0x7C9CA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759D98", Offset = "0x759D98")]
			set
			{
			}
		}

		[Token(Token = "0x17000337")]
		public bool HasActiveBolts
		{
			[Token(Token = "0x6002028")]
			[Address(RVA = "0x7C9CAC", Offset = "0x7C9CAC", VA = "0x7C9CAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000338")]
		internal Material lightningMaterialMeshInternal
		{
			[Token(Token = "0x6002031")]
			[Address(RVA = "0x7CACF8", Offset = "0x7CACF8", VA = "0x7CACF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759DA8", Offset = "0x759DA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002032")]
			[Address(RVA = "0x7CAD00", Offset = "0x7CAD00", VA = "0x7CAD00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759DB8", Offset = "0x759DB8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000339")]
		internal Material lightningMaterialMeshNoGlowInternal
		{
			[Token(Token = "0x6002033")]
			[Address(RVA = "0x7CAD08", Offset = "0x7CAD08", VA = "0x7CAD08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759DC8", Offset = "0x759DC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002034")]
			[Address(RVA = "0x7CAD10", Offset = "0x7CAD10", VA = "0x7CAD10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759DD8", Offset = "0x759DD8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0x7C9D08", Offset = "0x7C9D08", VA = "0x7C9D08", Slot = "4")]
		public virtual void CreateLightningBolt(LightningBoltParameters p)
		{
		}

		[Token(Token = "0x600202A")]
		[Address(RVA = "0x7C9718", Offset = "0x7C9718", VA = "0x7C9718")]
		public void CreateLightningBolts(ICollection<LightningBoltParameters> parameters)
		{
		}

		[Token(Token = "0x600202B")]
		[Address(RVA = "0x7CA230", Offset = "0x7CA230", VA = "0x7CA230", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600202C")]
		[Address(RVA = "0x7C997C", Offset = "0x7C997C", VA = "0x7C997C", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600202D")]
		[Address(RVA = "0x7C9C04", Offset = "0x7C9C04", VA = "0x7C9C04", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0x7C8F38", Offset = "0x7C8F38", VA = "0x7C8F38", Slot = "8")]
		protected virtual LightningBoltParameters OnCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x600202F")]
		[Address(RVA = "0x7C9618", Offset = "0x7C9618", VA = "0x7C9618")]
		protected LightningBoltParameters CreateParameters()
		{
			return null;
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0x7C9908", Offset = "0x7C9908", VA = "0x7C9908", Slot = "9")]
		protected virtual void PopulateParameters(LightningBoltParameters p)
		{
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0x7CAD18", Offset = "0x7CAD18", VA = "0x7CAD18")]
		private void OnSceneLoaded(UnityEngine.SceneManagement.Scene arg0, LoadSceneMode arg1)
		{
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0x7C9F90", Offset = "0x7C9F90", VA = "0x7C9F90")]
		private LightningBoltDependencies CreateLightningBoltDependencies(ICollection<LightningBoltParameters> parameters)
		{
			return null;
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0x7CAD74", Offset = "0x7CAD74", VA = "0x7CAD74")]
		private void ReturnLightningDependenciesToCache(LightningBoltDependencies d)
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0x7CADF4", Offset = "0x7CADF4", VA = "0x7CADF4")]
		internal void OnLightAdded(Light l)
		{
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0x7CAE68", Offset = "0x7CAE68", VA = "0x7CAE68")]
		internal void OnLightRemoved(Light l)
		{
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0x7CAEDC", Offset = "0x7CAEDC", VA = "0x7CAEDC")]
		internal void AddActiveBolt(LightningBolt bolt)
		{
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0x7CAF44", Offset = "0x7CAF44", VA = "0x7CAF44")]
		private void UpdateMainThreadActions()
		{
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0x7CA234", Offset = "0x7CA234", VA = "0x7CA234")]
		private void UpdateShaderIds()
		{
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0x7CA4F8", Offset = "0x7CA4F8", VA = "0x7CA4F8")]
		private void UpdateMaterialsForLastTexture()
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0x7C9DB8", Offset = "0x7C9DB8", VA = "0x7C9DB8")]
		private void UpdateTexture()
		{
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0x7CB030", Offset = "0x7CB030", VA = "0x7CB030")]
		private void SetMaterialPerspective()
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0x7CB120", Offset = "0x7CB120", VA = "0x7CB120")]
		private void SetMaterialOrthographicXY()
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0x7CB210", Offset = "0x7CB210", VA = "0x7CB210")]
		private void SetMaterialOrthographicXZ()
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0x7CAF60", Offset = "0x7CAF60", VA = "0x7CAF60")]
		private void SetupMaterialCamera()
		{
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0x7CB300", Offset = "0x7CB300", VA = "0x7CB300")]
		private void EnableKeyword(string keyword, bool enable, Material m)
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0x7CA6C8", Offset = "0x7CA6C8", VA = "0x7CA6C8")]
		private void UpdateShaderParameters()
		{
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0x7CAA6C", Offset = "0x7CAA6C", VA = "0x7CAA6C")]
		private void CheckCompensateForParentTransform()
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0x7CA408", Offset = "0x7CA408", VA = "0x7CA408")]
		private void UpdateCamera()
		{
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0x7C9EFC", Offset = "0x7C9EFC", VA = "0x7C9EFC")]
		private LightningBolt GetOrCreateLightningBolt()
		{
			return null;
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0x7CAC00", Offset = "0x7CAC00", VA = "0x7CAC00")]
		private void UpdateActiveBolts()
		{
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0x7CB32C", Offset = "0x7CB32C", VA = "0x7CB32C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0x7CB33C", Offset = "0x7CB33C", VA = "0x7CB33C")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0x7CB450", Offset = "0x7CB450", VA = "0x7CB450")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0x7CB560", Offset = "0x7CB560", VA = "0x7CB560")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0x7C92D4", Offset = "0x7C92D4", VA = "0x7C92D4")]
		public LightningBoltScript()
		{
		}
	}
	[Token(Token = "0x20003EB")]
	public class LightningBoltShapeConeScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x754BA8", Offset = "0x754BA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754BA8", Offset = "0x754BA8")]
		public float InnerRadius;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754C08", Offset = "0x754C08")]
		public float OuterRadius;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754C40", Offset = "0x754C40")]
		public float Length;

		[Token(Token = "0x600204F")]
		[Address(RVA = "0x7E726C", Offset = "0x7E726C", VA = "0x7E726C", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0x7E7514", Offset = "0x7E7514", VA = "0x7E7514")]
		public LightningBoltShapeConeScript()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public class LightningBoltShapeSphereScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x754C78", Offset = "0x754C78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754C78", Offset = "0x754C78")]
		public float InnerRadius;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754CD8", Offset = "0x754CD8")]
		public float Radius;

		[Token(Token = "0x6002051")]
		[Address(RVA = "0x7E7594", Offset = "0x7E7594", VA = "0x7E7594", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0x7E7684", Offset = "0x7E7684", VA = "0x7E7684")]
		public LightningBoltShapeSphereScript()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003ED")]
	public struct RangeOfIntegers
	{
		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754D10", Offset = "0x754D10")]
		public int Minimum;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754D48", Offset = "0x754D48")]
		public int Maximum;

		[Token(Token = "0x6002053")]
		[Address(RVA = "0x63C058", Offset = "0x63C058", VA = "0x63C058")]
		public int Random()
		{
			return default(int);
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0x63C068", Offset = "0x63C068", VA = "0x63C068")]
		public int Random(System.Random r)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20003EE")]
	public struct RangeOfFloats
	{
		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754D80", Offset = "0x754D80")]
		public float Minimum;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754DB8", Offset = "0x754DB8")]
		public float Maximum;

		[Token(Token = "0x6002055")]
		[Address(RVA = "0x63C044", Offset = "0x63C044", VA = "0x63C044")]
		public float Random()
		{
			return default(float);
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0x63C050", Offset = "0x63C050", VA = "0x63C050")]
		public float Random(System.Random r)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x20003EF")]
	public class ReorderableList_GameObject : ReorderableList<GameObject>
	{
		[Token(Token = "0x6002057")]
		[Address(RVA = "0x7F02C4", Offset = "0x7F02C4", VA = "0x7F02C4")]
		public ReorderableList_GameObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F0")]
	public class ReorderableList_Transform : ReorderableList<Transform>
	{
		[Token(Token = "0x6002058")]
		[Address(RVA = "0x7F0454", Offset = "0x7F0454", VA = "0x7F0454")]
		public ReorderableList_Transform()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F1")]
	public class ReorderableList_Vector3 : ReorderableList<Vector3>
	{
		[Token(Token = "0x6002059")]
		[Address(RVA = "0x7F04A4", Offset = "0x7F04A4", VA = "0x7F04A4")]
		public ReorderableList_Vector3()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F2")]
	public class ReorderableList_Rect : ReorderableList<Rect>
	{
		[Token(Token = "0x600205A")]
		[Address(RVA = "0x7F0364", Offset = "0x7F0364", VA = "0x7F0364")]
		public ReorderableList_Rect()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F3")]
	public class ReorderableList_RectOffset : ReorderableList<RectOffset>
	{
		[Token(Token = "0x600205B")]
		[Address(RVA = "0x7F03B4", Offset = "0x7F03B4", VA = "0x7F03B4")]
		public ReorderableList_RectOffset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F4")]
	public class ReorderableList_Int : ReorderableList<int>
	{
		[Token(Token = "0x600205C")]
		[Address(RVA = "0x7F0314", Offset = "0x7F0314", VA = "0x7F0314")]
		public ReorderableList_Int()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F5")]
	public class ReorderableList_Float : ReorderableList<float>
	{
		[Token(Token = "0x600205D")]
		[Address(RVA = "0x7F0274", Offset = "0x7F0274", VA = "0x7F0274")]
		public ReorderableList_Float()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F6")]
	public class ReorderableList_String : ReorderableList<string>
	{
		[Token(Token = "0x600205E")]
		[Address(RVA = "0x7F0404", Offset = "0x7F0404", VA = "0x7F0404")]
		public ReorderableList_String()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F7")]
	public class ReorderableList<T> : ReorderableListBase
	{
		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> List;

		[Token(Token = "0x600205F")]
		public ReorderableList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F8")]
	public class ReorderableListBase
	{
		[Token(Token = "0x6002060")]
		[Address(RVA = "0x7F026C", Offset = "0x7F026C", VA = "0x7F026C")]
		public ReorderableListBase()
		{
		}
	}
	[Token(Token = "0x20003F9")]
	public class ReorderableListAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754DF0", Offset = "0x754DF0")]
		private string <Tooltip>k__BackingField;

		[Token(Token = "0x1700033A")]
		public string Tooltip
		{
			[Token(Token = "0x6002062")]
			[Address(RVA = "0x7F025C", Offset = "0x7F025C", VA = "0x7F025C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759DE8", Offset = "0x759DE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002063")]
			[Address(RVA = "0x7F0264", Offset = "0x7F0264", VA = "0x7F0264")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759DF8", Offset = "0x759DF8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002061")]
		[Address(RVA = "0x7F0230", Offset = "0x7F0230", VA = "0x7F0230")]
		public ReorderableListAttribute(string tooltip)
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class SingleLineAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754E00", Offset = "0x754E00")]
		private string <Tooltip>k__BackingField;

		[Token(Token = "0x1700033B")]
		public string Tooltip
		{
			[Token(Token = "0x6002065")]
			[Address(RVA = "0x7F0520", Offset = "0x7F0520", VA = "0x7F0520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759E08", Offset = "0x759E08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002066")]
			[Address(RVA = "0x7F0528", Offset = "0x7F0528", VA = "0x7F0528")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759E18", Offset = "0x759E18")]
			private set
			{
			}
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0x7F04F4", Offset = "0x7F04F4", VA = "0x7F04F4")]
		public SingleLineAttribute(string tooltip)
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class SingleLineClampAttribute : SingleLineAttribute
	{
		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754E10", Offset = "0x754E10")]
		private double <MinValue>k__BackingField;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x754E20", Offset = "0x754E20")]
		private double <MaxValue>k__BackingField;

		[Token(Token = "0x1700033C")]
		public double MinValue
		{
			[Token(Token = "0x6002068")]
			[Address(RVA = "0x7F0570", Offset = "0x7F0570", VA = "0x7F0570")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759E28", Offset = "0x759E28")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002069")]
			[Address(RVA = "0x7F0578", Offset = "0x7F0578", VA = "0x7F0578")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759E38", Offset = "0x759E38")]
			private set
			{
			}
		}

		[Token(Token = "0x1700033D")]
		public double MaxValue
		{
			[Token(Token = "0x600206A")]
			[Address(RVA = "0x7F0580", Offset = "0x7F0580", VA = "0x7F0580")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759E48", Offset = "0x759E48")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600206B")]
			[Address(RVA = "0x7F0588", Offset = "0x7F0588", VA = "0x7F0588")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759E58", Offset = "0x759E58")]
			private set
			{
			}
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0x7F0530", Offset = "0x7F0530", VA = "0x7F0530")]
		public SingleLineClampAttribute(string tooltip, double minValue, double maxValue)
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class LightningFieldScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x754E30", Offset = "0x754E30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754E30", Offset = "0x754E30")]
		public float MinimumLength;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private float minimumLengthSquared;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754E90", Offset = "0x754E90")]
		public Bounds FieldBounds;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754EC8", Offset = "0x754EC8")]
		public Light Light;

		[Token(Token = "0x600206C")]
		[Address(RVA = "0x7E76FC", Offset = "0x7E76FC", VA = "0x7E76FC")]
		private Vector3 RandomPointInBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0x7E77E0", Offset = "0x7E77E0", VA = "0x7E77E0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0x7E7884", Offset = "0x7E7884", VA = "0x7E7884", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0x7E7978", Offset = "0x7E7978", VA = "0x7E7978", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0x7E7B04", Offset = "0x7E7B04", VA = "0x7E7B04")]
		public LightningFieldScript()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	public static class LightningSegmentGenerator
	{
		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<LightningBoltSegment> m_segments;

		[Token(Token = "0x4001D87")]
		private const int kPoolSize = 1000;

		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int m_counter;

		[Token(Token = "0x6002071")]
		[Address(RVA = "0x7EB858", Offset = "0x7EB858", VA = "0x7EB858")]
		public static void Init()
		{
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0x7EB8B4", Offset = "0x7EB8B4", VA = "0x7EB8B4")]
		public static void GenerateSegments()
		{
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0x7E83E0", Offset = "0x7E83E0", VA = "0x7E83E0")]
		public static LightningBoltSegment GetLightningBoltSegment(Vector3 start, Vector3 end)
		{
			return default(LightningBoltSegment);
		}
	}
	[Token(Token = "0x20003FE")]
	public class LightningGenerator
	{
		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly LightningGenerator GeneratorInstance;

		[Token(Token = "0x6002075")]
		[Address(RVA = "0x7E7B78", Offset = "0x7E7B78", VA = "0x7E7B78")]
		private void GetPerpendicularVector(ref Vector3 directionNormalized, out Vector3 side)
		{
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0x7E7D24", Offset = "0x7E7D24", VA = "0x7E7D24", Slot = "4")]
		protected virtual void OnGenerateLightningBolt(LightningBolt bolt, Vector3 start, Vector3 end, LightningBoltParameters p)
		{
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0x7E81E0", Offset = "0x7E81E0", VA = "0x7E81E0")]
		public bool ShouldCreateFork(LightningBoltParameters p, int generation, int totalGenerations)
		{
			return default(bool);
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0x7E8250", Offset = "0x7E8250", VA = "0x7E8250")]
		public void CreateFork(LightningBolt bolt, LightningBoltParameters p, int generation, int totalGenerations, Vector3 start, Vector3 midPoint)
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0x7E7D50", Offset = "0x7E7D50", VA = "0x7E7D50")]
		public void GenerateLightningBoltStandard(LightningBolt bolt, Vector3 start, Vector3 end, int generation, int totalGenerations, float offsetAmount, LightningBoltParameters p)
		{
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0x7E8990", Offset = "0x7E8990", VA = "0x7E8990")]
		public Vector3 RandomDirection3D(System.Random r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0x7E8AA4", Offset = "0x7E8AA4", VA = "0x7E8AA4")]
		public Vector3 RandomDirection2D(System.Random r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0x7E8B80", Offset = "0x7E8B80", VA = "0x7E8B80")]
		public Vector3 RandomDirection2DXZ(System.Random r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0x7E8538", Offset = "0x7E8538", VA = "0x7E8538")]
		public void RandomVector(LightningBolt bolt, ref Vector3 start, ref Vector3 end, float offsetAmount, System.Random random, out Vector3 result)
		{
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0x7E8C5C", Offset = "0x7E8C5C", VA = "0x7E8C5C")]
		public void GenerateLightningBolt(LightningBolt bolt, LightningBoltParameters p)
		{
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0x7E8C90", Offset = "0x7E8C90", VA = "0x7E8C90")]
		public void GenerateLightningBolt(LightningBolt bolt, LightningBoltParameters p, out Vector3 start, out Vector3 end)
		{
		}

		[Token(Token = "0x6002080")]
		[Address(RVA = "0x7E8D48", Offset = "0x7E8D48", VA = "0x7E8D48")]
		public LightningGenerator()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	public class LightningGeneratorPath : LightningGenerator
	{
		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly LightningGeneratorPath PathGeneratorInstance;

		[Token(Token = "0x6002082")]
		[Address(RVA = "0x7E8DB4", Offset = "0x7E8DB4", VA = "0x7E8DB4")]
		public void GenerateLightningBoltPath(LightningBolt bolt, Vector3 start, Vector3 end, LightningBoltParameters p)
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0x7E936C", Offset = "0x7E936C", VA = "0x7E936C", Slot = "4")]
		protected override void OnGenerateLightningBolt(LightningBolt bolt, Vector3 start, Vector3 end, LightningBoltParameters p)
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0x7E9370", Offset = "0x7E9370", VA = "0x7E9370")]
		public LightningGeneratorPath()
		{
		}
	}
	[Token(Token = "0x2000400")]
	public class LightningGizmoScript : MonoBehaviour
	{
		[Token(Token = "0x6002086")]
		[Address(RVA = "0x7E9438", Offset = "0x7E9438", VA = "0x7E9438")]
		public LightningGizmoScript()
		{
		}
	}
	[Token(Token = "0x2000401")]
	public class LightningLightsabreScript : LightningBoltPrefabScript
	{
		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x754F00", Offset = "0x754F00")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754F00", Offset = "0x754F00")]
		public float BladeHeight;

		[Token(Token = "0x4001D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754F60", Offset = "0x754F60")]
		public float ActivationTime;

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754F98", Offset = "0x754F98")]
		public AudioSource StartSound;

		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x754FD0", Offset = "0x754FD0")]
		public AudioSource StopSound;

		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755008", Offset = "0x755008")]
		public AudioSource ConstantSound;

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private int state;

		[Token(Token = "0x4001D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private Vector3 bladeStart;

		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Vector3 bladeDir;

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private float bladeTime;

		[Token(Token = "0x4001D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private float bladeIntensity;

		[Token(Token = "0x6002087")]
		[Address(RVA = "0x7E9500", Offset = "0x7E9500", VA = "0x7E9500", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0x7E9508", Offset = "0x7E9508", VA = "0x7E9508", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0x7E96DC", Offset = "0x7E96DC", VA = "0x7E96DC")]
		public bool TurnOn(bool value)
		{
			return default(bool);
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0x7E98D0", Offset = "0x7E98D0", VA = "0x7E98D0")]
		public void TurnOnGUI(bool value)
		{
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0x7E98D8", Offset = "0x7E98D8", VA = "0x7E98D8")]
		public LightningLightsabreScript()
		{
		}
	}
	[Token(Token = "0x2000402")]
	public class LightningMeshSurfaceScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x755040", Offset = "0x755040")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755040", Offset = "0x755040")]
		public MeshFilter MeshFilter;

		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7550A0", Offset = "0x7550A0")]
		public Collider MeshCollider;

		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[AttributeAttribute(Name = "SingleLineAttribute", RVA = "0x7550D8", Offset = "0x7550D8")]
		public RangeOfFloats MeshOffsetRange;

		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x755110", Offset = "0x755110")]
		[AttributeAttribute(Name = "SingleLineAttribute", RVA = "0x755110", Offset = "0x755110")]
		public RangeOfIntegers PathLengthCount;

		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[AttributeAttribute(Name = "SingleLineAttribute", RVA = "0x755170", Offset = "0x755170")]
		public RangeOfFloats MinimumPathDistanceRange;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7551A8", Offset = "0x7551A8")]
		public float MaximumPathDistance;

		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private float maximumPathDistanceSquared;

		[Token(Token = "0x4001D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7551E0", Offset = "0x7551E0")]
		public bool Spline;

		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755218", Offset = "0x755218")]
		public float DistancePerSegmentHint;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private readonly List<Vector3> sourcePoints;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Mesh previousMesh;

		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private MeshHelper meshHelper;

		[Token(Token = "0x600208C")]
		[Address(RVA = "0x7E98EC", Offset = "0x7E98EC", VA = "0x7E98EC")]
		private void CheckMesh()
		{
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0x7E9AA8", Offset = "0x7E9AA8", VA = "0x7E9AA8", Slot = "8")]
		protected override LightningBoltParameters OnCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0x7E9B3C", Offset = "0x7E9B3C", VA = "0x7E9B3C", Slot = "10")]
		protected virtual void PopulateSourcePoints(List<Vector3> points)
		{
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0x7E9B4C", Offset = "0x7E9B4C", VA = "0x7E9B4C")]
		public void CreateRandomLightningPath(List<Vector3> points)
		{
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0x7EA3C4", Offset = "0x7EA3C4", VA = "0x7EA3C4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0x7EA3CC", Offset = "0x7EA3CC", VA = "0x7EA3CC", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0x7EA3F4", Offset = "0x7EA3F4", VA = "0x7EA3F4", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0x7EA6F8", Offset = "0x7EA6F8", VA = "0x7EA6F8")]
		public LightningMeshSurfaceScript()
		{
		}
	}
	[Token(Token = "0x2000403")]
	public class LightningSplineScript : LightningBoltPathScriptBase
	{
		[Token(Token = "0x4001DA1")]
		public const int MaxSplineGenerations = 5;

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x755250", Offset = "0x755250")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755250", Offset = "0x755250")]
		public float DistancePerSegmentHint;

		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private readonly List<Vector3> prevSourcePoints;

		[Token(Token = "0x4001DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private readonly List<Vector3> sourcePoints;

		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private List<Vector3> savedSplinePoints;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private int previousGenerations;

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private float previousDistancePerSegment;

		[Token(Token = "0x6002094")]
		[Address(RVA = "0x7EC0D8", Offset = "0x7EC0D8", VA = "0x7EC0D8")]
		private bool SourceChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0x7EC234", Offset = "0x7EC234", VA = "0x7EC234", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0x7EC23C", Offset = "0x7EC23C", VA = "0x7EC23C", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0x7EC244", Offset = "0x7EC244", VA = "0x7EC244", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0x7EC6D8", Offset = "0x7EC6D8", VA = "0x7EC6D8", Slot = "8")]
		protected override LightningBoltParameters OnCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0x7EC784", Offset = "0x7EC784", VA = "0x7EC784")]
		public void Trigger(List<Vector3> points, bool spline)
		{
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0x7EA5BC", Offset = "0x7EA5BC", VA = "0x7EA5BC")]
		public static void PopulateSpline(List<Vector3> splinePoints, List<Vector3> sourcePoints, int generations, float distancePerSegmentHit, Camera camera)
		{
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0x7ED550", Offset = "0x7ED550", VA = "0x7ED550")]
		public LightningSplineScript()
		{
		}
	}
	[Token(Token = "0x2000404")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74AA80", Offset = "0x74AA80")]
	public class LightningWhipScript : MonoBehaviour
	{
		[Token(Token = "0x200064C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C87C", Offset = "0x74C87C")]
		private sealed class <WhipForward>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightningWhipScript <>4__this;

			[Token(Token = "0x170003EE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029FB")]
				[Address(RVA = "0x7EE848", Offset = "0x7EE848", VA = "0x7EE848", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029FD")]
				[Address(RVA = "0x7EE8B4", Offset = "0x7EE8B4", VA = "0x7EE8B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029F8")]
			[Address(RVA = "0x7EDF30", Offset = "0x7EDF30", VA = "0x7EDF30")]
			[DebuggerHidden]
			public <WhipForward>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60029F9")]
			[Address(RVA = "0x7EE2F0", Offset = "0x7EE2F0", VA = "0x7EE2F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029FA")]
			[Address(RVA = "0x7EE2F4", Offset = "0x7EE2F4", VA = "0x7EE2F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029FC")]
			[Address(RVA = "0x7EE850", Offset = "0x7EE850", VA = "0x7EE850", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip WhipCrack;

		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip WhipCrackThunder;

		[Token(Token = "0x4001DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioSource audioSource;

		[Token(Token = "0x4001DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject whipStart;

		[Token(Token = "0x4001DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject whipEndStrike;

		[Token(Token = "0x4001DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject whipHandle;

		[Token(Token = "0x4001DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject whipSpring;

		[Token(Token = "0x4001DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 prevDrag;

		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool dragging;

		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool canWhip;

		[Token(Token = "0x600209C")]
		[Address(RVA = "0x7EDEBC", Offset = "0x7EDEBC", VA = "0x7EDEBC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759E68", Offset = "0x759E68")]
		private IEnumerator WhipForward()
		{
			return null;
		}

		[Token(Token = "0x600209D")]
		[Address(RVA = "0x7EDF5C", Offset = "0x7EDF5C", VA = "0x7EDF5C")]
		private void Start()
		{
		}

		[Token(Token = "0x600209E")]
		[Address(RVA = "0x7EE014", Offset = "0x7EE014", VA = "0x7EE014")]
		private void Update()
		{
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0x7EE2E0", Offset = "0x7EE2E0", VA = "0x7EE2E0")]
		public LightningWhipScript()
		{
		}
	}
	[Token(Token = "0x2000405")]
	public class MeshHelper
	{
		[Token(Token = "0x4001DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x4001DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] triangles;

		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] vertices;

		[Token(Token = "0x4001DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] normals;

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] normalizedAreaWeights;

		[Token(Token = "0x1700033E")]
		public Mesh Mesh
		{
			[Token(Token = "0x60020A3")]
			[Address(RVA = "0x7EF4D8", Offset = "0x7EF4D8", VA = "0x7EF4D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700033F")]
		public int[] Triangles
		{
			[Token(Token = "0x60020A4")]
			[Address(RVA = "0x7EF4E0", Offset = "0x7EF4E0", VA = "0x7EF4E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000340")]
		public Vector3[] Vertices
		{
			[Token(Token = "0x60020A5")]
			[Address(RVA = "0x7EF4E8", Offset = "0x7EF4E8", VA = "0x7EF4E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000341")]
		public Vector3[] Normals
		{
			[Token(Token = "0x60020A6")]
			[Address(RVA = "0x7EF4F0", Offset = "0x7EF4F0", VA = "0x7EF4F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60020A0")]
		[Address(RVA = "0x7E9A3C", Offset = "0x7E9A3C", VA = "0x7E9A3C")]
		public MeshHelper(Mesh mesh)
		{
		}

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0x7E9F38", Offset = "0x7E9F38", VA = "0x7E9F38")]
		public void GenerateRandomPoint(ref RaycastHit hit, out int triangleIndex)
		{
		}

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0x7E9F7C", Offset = "0x7E9F7C", VA = "0x7E9F7C")]
		public void GetRaycastFromTriangleIndex(int triangleIndex, ref RaycastHit hit)
		{
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0x7EF4F8", Offset = "0x7EF4F8", VA = "0x7EF4F8")]
		private float[] CalculateSurfaceAreas(out float totalSurfaceArea)
		{
			return null;
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0x7EF268", Offset = "0x7EF268", VA = "0x7EF268")]
		private void CalculateNormalizedAreaWeights()
		{
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0x7EF2FC", Offset = "0x7EF2FC", VA = "0x7EF2FC")]
		private int SelectRandomTriangle()
		{
			return default(int);
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0x7EF3A4", Offset = "0x7EF3A4", VA = "0x7EF3A4")]
		private Vector3 GenerateRandomBarycentricCoordinates()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000406")]
	public static class PathGenerator
	{
		[Token(Token = "0x4001DB7")]
		public const int MinPointsForSpline = 4;

		[Token(Token = "0x4001DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool Is2D;

		[Token(Token = "0x4001DB9")]
		private const float curveMultiplier = 3f;

		[Token(Token = "0x4001DBA")]
		private const float splineMultiplier1 = -3f;

		[Token(Token = "0x4001DBB")]
		private const float splineMultiplier2 = 3f;

		[Token(Token = "0x4001DBC")]
		private const float splineMultiplier3 = 2f;

		[Token(Token = "0x4001DBD")]
		private const float splineDistanceClamp = 1f;

		[Token(Token = "0x4001DBE")]
		private const float splineEpsilon = 0.0001f;

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0x7E92E4", Offset = "0x7E92E4", VA = "0x7E92E4")]
		public static float SquareRoot(float x)
		{
			return default(float);
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0x7EF7D4", Offset = "0x7EF7D4", VA = "0x7EF7D4")]
		private static float Distance2D(ref Vector3 point1, ref Vector3 point2)
		{
			return default(float);
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0x7EF7EC", Offset = "0x7EF7EC", VA = "0x7EF7EC")]
		private static float Distance3D(ref Vector3 point1, ref Vector3 point2)
		{
			return default(float);
		}

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0x7EF81C", Offset = "0x7EF81C", VA = "0x7EF81C")]
		private static void GetCurvePoint2D(ref Vector3 start, ref Vector3 end, ref Vector3 ctr1, ref Vector3 ctr2, float t, out Vector3 point)
		{
		}

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0x7EF8F4", Offset = "0x7EF8F4", VA = "0x7EF8F4")]
		private static void GetCurvePoint3D(ref Vector3 start, ref Vector3 end, ref Vector3 ctr1, ref Vector3 ctr2, float t, out Vector3 point)
		{
		}

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0x7EFA10", Offset = "0x7EFA10", VA = "0x7EFA10")]
		private static void CalculateNonuniformCatmullRom(float p1, float p2, float p3, float p4, float distance1, float distance2, float distance3, out Vector4 point)
		{
		}

		[Token(Token = "0x60020B1")]
		[Address(RVA = "0x7EFACC", Offset = "0x7EFACC", VA = "0x7EFACC")]
		private static float CalculatePolynomial(ref Vector4 point, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60020B2")]
		[Address(RVA = "0x7EFAF8", Offset = "0x7EFAF8", VA = "0x7EFAF8")]
		private static void ClampSplineDistances(ref float distance1, ref float distance2, ref float distance3)
		{
		}

		[Token(Token = "0x60020B3")]
		[Address(RVA = "0x7EFB44", Offset = "0x7EFB44", VA = "0x7EFB44")]
		private static void GetSplinePoint2D(ref Vector3 point1, ref Vector3 point2, ref Vector3 point3, ref Vector3 point4, float t, out Vector3 point)
		{
		}

		[Token(Token = "0x60020B4")]
		[Address(RVA = "0x7EFCD8", Offset = "0x7EFCD8", VA = "0x7EFCD8")]
		private static void GetSplinePoint3D(ref Vector3 point1, ref Vector3 point2, ref Vector3 point3, ref Vector3 point4, float t, out Vector3 point)
		{
		}

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0x7EFF00", Offset = "0x7EFF00", VA = "0x7EFF00")]
		public static float CreateCurve(ICollection<Vector3> path, Vector3 start, Vector3 end, Vector3 ctr1, Vector3 ctr2, int numberOfSegments, float startT)
		{
			return default(float);
		}

		[Token(Token = "0x60020B6")]
		[Address(RVA = "0x7ECF80", Offset = "0x7ECF80", VA = "0x7ECF80")]
		public static bool CreateSpline(ICollection<Vector3> path, IList<Vector3> points, int numberOfSegments, bool closePath)
		{
			return default(bool);
		}

		[Token(Token = "0x60020B7")]
		[Address(RVA = "0x7EC91C", Offset = "0x7EC91C", VA = "0x7EC91C")]
		public static bool CreateSplineWithSegmentDistance(ICollection<Vector3> path, IList<Vector3> points, float distancePerSegment, bool closePath)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000407")]
	public class LightningBeamSpellScript : LightningSpellScript
	{
		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7552B0", Offset = "0x7552B0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7552B0", Offset = "0x7552B0")]
		public LightningBoltPathScriptBase LightningPathScript;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755310", Offset = "0x755310")]
		public float EndPointRandomization;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public Action<RaycastHit> CollisionCallback;

		[Token(Token = "0x60020B8")]
		[Address(RVA = "0x7C1DA0", Offset = "0x7C1DA0", VA = "0x7C1DA0")]
		private void CheckCollision()
		{
		}

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0x7C21BC", Offset = "0x7C21BC", VA = "0x7C21BC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0x7C21F8", Offset = "0x7C21F8", VA = "0x7C21F8", Slot = "6")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0x7C2234", Offset = "0x7C2234", VA = "0x7C2234", Slot = "8")]
		protected override void OnCastSpell()
		{
		}

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0x7C2254", Offset = "0x7C2254", VA = "0x7C2254", Slot = "9")]
		protected override void OnStopSpell()
		{
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0x7C2278", Offset = "0x7C2278", VA = "0x7C2278")]
		public LightningBeamSpellScript()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public interface ICollisionHandler
	{
		[Token(Token = "0x60020BE")]
		void HandleCollision(GameObject obj, List<ParticleCollisionEvent> collision, int collisionCount);
	}
	[Token(Token = "0x2000409")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x74AAE4", Offset = "0x74AAE4")]
	public class LightningParticleCollisionForwarder : MonoBehaviour
	{
		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755358", Offset = "0x755358")]
		public MonoBehaviour CollisionHandler;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem _particleSystem;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<ParticleCollisionEvent> collisionEvents;

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0x7EA7A8", Offset = "0x7EA7A8", VA = "0x7EA7A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0x7EA800", Offset = "0x7EA800", VA = "0x7EA800")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0x7EA908", Offset = "0x7EA908", VA = "0x7EA908")]
		public LightningParticleCollisionForwarder()
		{
		}
	}
	[Token(Token = "0x200040A")]
	public class LightningParticleSpellScript : LightningSpellScript, ICollisionHandler
	{
		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x755390", Offset = "0x755390")]
		public ParticleSystem ParticleSystem;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7553C8", Offset = "0x7553C8")]
		public float CollisionInterval;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected float collisionTimer;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public Action<GameObject, List<ParticleCollisionEvent>, int> CollisionCallback;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x755410", Offset = "0x755410")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755410", Offset = "0x755410")]
		public bool EnableParticleLights;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "SingleLineClampAttribute", RVA = "0x755470", Offset = "0x755470")]
		public RangeOfFloats ParticleLightRange;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "SingleLineClampAttribute", RVA = "0x7554B8", Offset = "0x7554B8")]
		public RangeOfFloats ParticleLightIntensity;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7554FC", Offset = "0x7554FC")]
		public Color ParticleLightColor1;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755534", Offset = "0x755534")]
		public Color ParticleLightColor2;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75556C", Offset = "0x75556C")]
		public LayerMask ParticleLightCullingMask;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly List<GameObject> particleLights;

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0x7EA978", Offset = "0x7EA978", VA = "0x7EA978")]
		private void PopulateParticleLight(Light src)
		{
		}

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0x7EAAA4", Offset = "0x7EAAA4", VA = "0x7EAAA4")]
		private void UpdateParticleLights()
		{
		}

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0x7EACE0", Offset = "0x7EACE0", VA = "0x7EACE0")]
		private void UpdateParticleSystems()
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0x7EAEA8", Offset = "0x7EAEA8", VA = "0x7EAEA8", Slot = "7")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0x7EAFCC", Offset = "0x7EAFCC", VA = "0x7EAFCC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x7EB068", Offset = "0x7EB068", VA = "0x7EB068", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x7EB158", Offset = "0x7EB158", VA = "0x7EB158", Slot = "8")]
		protected override void OnCastSpell()
		{
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x7EB1F4", Offset = "0x7EB1F4", VA = "0x7EB1F4", Slot = "9")]
		protected override void OnStopSpell()
		{
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0x7EB288", Offset = "0x7EB288", VA = "0x7EB288", Slot = "12")]
		private void DigitalRuby.ThunderAndLightning.ICollisionHandler.HandleCollision(GameObject obj, List<ParticleCollisionEvent> collisions, int collisionCount)
		{
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0x7EB6F4", Offset = "0x7EB6F4", VA = "0x7EB6F4")]
		public LightningParticleSpellScript()
		{
		}
	}
	[Token(Token = "0x200040B")]
	public abstract class LightningSpellScript : MonoBehaviour
	{
		[Token(Token = "0x200064D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C88C", Offset = "0x74C88C")]
		private sealed class <StopAfterSecondsCoRoutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002244")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002245")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightningSpellScript <>4__this;

			[Token(Token = "0x4002247")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float seconds;

			[Token(Token = "0x4002248")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <token>5__2;

			[Token(Token = "0x170003F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A01")]
				[Address(RVA = "0x7EC064", Offset = "0x7EC064", VA = "0x7EC064", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A03")]
				[Address(RVA = "0x7EC0D0", Offset = "0x7EC0D0", VA = "0x7EC0D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029FE")]
			[Address(RVA = "0x7EBA74", Offset = "0x7EBA74", VA = "0x7EBA74")]
			[DebuggerHidden]
			public <StopAfterSecondsCoRoutine>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60029FF")]
			[Address(RVA = "0x7EBF94", Offset = "0x7EBF94", VA = "0x7EBF94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A00")]
			[Address(RVA = "0x7EBF98", Offset = "0x7EBF98", VA = "0x7EBF98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A02")]
			[Address(RVA = "0x7EC06C", Offset = "0x7EC06C", VA = "0x7EC06C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7555A4", Offset = "0x7555A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7555A4", Offset = "0x7555A4")]
		public GameObject SpellStart;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755604", Offset = "0x755604")]
		public GameObject SpellEnd;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x75563C", Offset = "0x75563C")]
		public Vector3 Direction;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755688", Offset = "0x755688")]
		public float MaxDistance;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7556C0", Offset = "0x7556C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7556C0", Offset = "0x7556C0")]
		public bool CollisionIsExplosion;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755720", Offset = "0x755720")]
		public float CollisionRadius;

		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755758", Offset = "0x755758")]
		public float CollisionForce;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755790", Offset = "0x755790")]
		public ForceMode CollisionForceMode;

		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7557C8", Offset = "0x7557C8")]
		public ParticleSystem CollisionParticleSystem;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755800", Offset = "0x755800")]
		public LayerMask CollisionMask;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755838", Offset = "0x755838")]
		public AudioSource CollisionAudioSource;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755870", Offset = "0x755870")]
		public AudioClip[] CollisionAudioClips;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7558A8", Offset = "0x7558A8")]
		public RangeOfFloats CollisionVolumeRange;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7558E0", Offset = "0x7558E0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7558E0", Offset = "0x7558E0")]
		public float Duration;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755940", Offset = "0x755940")]
		public float Cooldown;

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x755978", Offset = "0x755978")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755978", Offset = "0x755978")]
		public AudioSource EmissionSound;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7559D8", Offset = "0x7559D8")]
		public ParticleSystem EmissionParticleSystem;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755A10", Offset = "0x755A10")]
		public Light EmissionLight;

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int stopToken;

		[Token(Token = "0x4001DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755A48", Offset = "0x755A48")]
		private float <DurationTimer>k__BackingField;

		[Token(Token = "0x4001DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755A58", Offset = "0x755A58")]
		private float <CooldownTimer>k__BackingField;

		[Token(Token = "0x4001DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755A68", Offset = "0x755A68")]
		private bool <Casting>k__BackingField;

		[Token(Token = "0x17000342")]
		protected float DurationTimer
		{
			[Token(Token = "0x60020CD")]
			[Address(RVA = "0x7EBAA0", Offset = "0x7EBAA0", VA = "0x7EBAA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759F30", Offset = "0x759F30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60020CE")]
			[Address(RVA = "0x7EBAA8", Offset = "0x7EBAA8", VA = "0x7EBAA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759F40", Offset = "0x759F40")]
			private set
			{
			}
		}

		[Token(Token = "0x17000343")]
		protected float CooldownTimer
		{
			[Token(Token = "0x60020CF")]
			[Address(RVA = "0x7EBAB0", Offset = "0x7EBAB0", VA = "0x7EBAB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759F50", Offset = "0x759F50")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60020D0")]
			[Address(RVA = "0x7EBAB8", Offset = "0x7EBAB8", VA = "0x7EBAB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759F60", Offset = "0x759F60")]
			private set
			{
			}
		}

		[Token(Token = "0x17000344")]
		public bool Casting
		{
			[Token(Token = "0x60020E1")]
			[Address(RVA = "0x7EBF80", Offset = "0x7EBF80", VA = "0x7EBF80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759F70", Offset = "0x759F70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60020E2")]
			[Address(RVA = "0x7EBF88", Offset = "0x7EBF88", VA = "0x7EBF88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759F80", Offset = "0x759F80")]
			private set
			{
			}
		}

		[Token(Token = "0x17000345")]
		public bool CanCastSpell
		{
			[Token(Token = "0x60020E3")]
			[Address(RVA = "0x7EBC94", Offset = "0x7EBC94", VA = "0x7EBC94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0x7EB9F0", Offset = "0x7EB9F0", VA = "0x7EB9F0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759ECC", Offset = "0x759ECC")]
		private IEnumerator StopAfterSecondsCoRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0x7EB4F8", Offset = "0x7EB4F8", VA = "0x7EB4F8")]
		protected void ApplyCollisionForce(Vector3 point)
		{
		}

		[Token(Token = "0x60020D2")]
		[Address(RVA = "0x7EB3AC", Offset = "0x7EB3AC", VA = "0x7EB3AC")]
		protected void PlayCollisionSound(Vector3 pos)
		{
		}

		[Token(Token = "0x60020D3")]
		[Address(RVA = "0x7EAFD0", Offset = "0x7EAFD0", VA = "0x7EAFD0", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0x7EB0AC", Offset = "0x7EB0AC", VA = "0x7EB0AC", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0x7EBAC0", Offset = "0x7EBAC0", VA = "0x7EBAC0", Slot = "6")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0x7EAFC8", Offset = "0x7EAFC8", VA = "0x7EAFC8", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60020D7")]
		protected abstract void OnCastSpell();

		[Token(Token = "0x60020D8")]
		protected abstract void OnStopSpell();

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0x7EBAC4", Offset = "0x7EBAC4", VA = "0x7EBAC4", Slot = "10")]
		protected virtual void OnActivated()
		{
		}

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0x7EBAC8", Offset = "0x7EBAC8", VA = "0x7EBAC8", Slot = "11")]
		protected virtual void OnDeactivated()
		{
		}

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0x7EBACC", Offset = "0x7EBACC", VA = "0x7EBACC")]
		public bool CastSpell()
		{
			return default(bool);
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0x7EBCE0", Offset = "0x7EBCE0", VA = "0x7EBCE0")]
		public void StopSpell()
		{
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0x7EBE44", Offset = "0x7EBE44", VA = "0x7EBE44")]
		public void ActivateSpell()
		{
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0x7EBE50", Offset = "0x7EBE50", VA = "0x7EBE50")]
		public void DeactivateSpell()
		{
		}

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0x7EBCB4", Offset = "0x7EBCB4", VA = "0x7EBCB4")]
		public void StopAfterSeconds(float seconds)
		{
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0x7EBE5C", Offset = "0x7EBE5C", VA = "0x7EBE5C")]
		public static GameObject FindChildRecursively(Transform t, string name)
		{
			return null;
		}

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0x7EB7BC", Offset = "0x7EB7BC", VA = "0x7EB7BC")]
		protected LightningSpellScript()
		{
		}
	}
	[Token(Token = "0x200040C")]
	public class LightningWhipSpell : LightningSpellScript
	{
		[Token(Token = "0x200064E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C89C", Offset = "0x74C89C")]
		private sealed class <WhipForward>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002249")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400224A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400224B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightningWhipSpell <>4__this;

			[Token(Token = "0x400224C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <whipPositionForwards>5__2;

			[Token(Token = "0x170003F2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A07")]
				[Address(RVA = "0x7EF1F4", Offset = "0x7EF1F4", VA = "0x7EF1F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A09")]
				[Address(RVA = "0x7EF260", Offset = "0x7EF260", VA = "0x7EF260", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A04")]
			[Address(RVA = "0x7EE930", Offset = "0x7EE930", VA = "0x7EE930")]
			[DebuggerHidden]
			public <WhipForward>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6002A05")]
			[Address(RVA = "0x7EEAD8", Offset = "0x7EEAD8", VA = "0x7EEAD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A06")]
			[Address(RVA = "0x7EEADC", Offset = "0x7EEADC", VA = "0x7EEADC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A08")]
			[Address(RVA = "0x7EF1FC", Offset = "0x7EF1FC", VA = "0x7EF1FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x755A78", Offset = "0x755A78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755A78", Offset = "0x755A78")]
		public GameObject AttachTo;

		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755AD8", Offset = "0x755AD8")]
		public GameObject RotateWith;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755B10", Offset = "0x755B10")]
		public GameObject WhipHandle;

		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755B48", Offset = "0x755B48")]
		public GameObject WhipStart;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755B80", Offset = "0x755B80")]
		public GameObject WhipSpring;

		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755BB8", Offset = "0x755BB8")]
		public AudioSource WhipCrackAudioSource;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Action<Vector3> CollisionCallback;

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0x7EE8BC", Offset = "0x7EE8BC", VA = "0x7EE8BC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x759F90", Offset = "0x759F90")]
		private IEnumerator WhipForward()
		{
			return null;
		}

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0x7EE95C", Offset = "0x7EE95C", VA = "0x7EE95C", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60020E7")]
		[Address(RVA = "0x7EE9A4", Offset = "0x7EE9A4", VA = "0x7EE9A4", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0x7EEA64", Offset = "0x7EEA64", VA = "0x7EEA64", Slot = "8")]
		protected override void OnCastSpell()
		{
		}

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0x7EEA90", Offset = "0x7EEA90", VA = "0x7EEA90", Slot = "9")]
		protected override void OnStopSpell()
		{
		}

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0x7EEA94", Offset = "0x7EEA94", VA = "0x7EEA94", Slot = "10")]
		protected override void OnActivated()
		{
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0x7EEAB4", Offset = "0x7EEAB4", VA = "0x7EEAB4", Slot = "11")]
		protected override void OnDeactivated()
		{
		}

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0x7EEAD4", Offset = "0x7EEAD4", VA = "0x7EEAD4")]
		public LightningWhipSpell()
		{
		}
	}
	[Token(Token = "0x200040D")]
	public class ThunderAndLightningScript : MonoBehaviour
	{
		[Token(Token = "0x200064F")]
		private class LightningBoltHandler
		{
			[Token(Token = "0x2000675")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C99C", Offset = "0x74C99C")]
			private sealed class <ProcessLightning>d__5 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x40022F5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x40022F6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x40022F7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public LightningBoltHandler <>4__this;

				[Token(Token = "0x40022F8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public bool intense;

				[Token(Token = "0x40022F9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				public Vector3? _start;

				[Token(Token = "0x40022FA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
				public Vector3? _end;

				[Token(Token = "0x40022FB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
				public bool visible;

				[Token(Token = "0x40022FC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
				private AudioClip[] <sounds>5__2;

				[Token(Token = "0x40022FD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
				private float <intensity>5__3;

				[Token(Token = "0x1700040A")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x6002A7C")]
					[Address(RVA = "0x7F165C", Offset = "0x7F165C", VA = "0x7F165C", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x1700040B")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x6002A7E")]
					[Address(RVA = "0x7F16C8", Offset = "0x7F16C8", VA = "0x7F16C8", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6002A79")]
				[Address(RVA = "0x7F0C4C", Offset = "0x7F0C4C", VA = "0x7F0C4C")]
				[DebuggerHidden]
				public <ProcessLightning>d__5(int <>1__state)
				{
				}

				[Token(Token = "0x6002A7A")]
				[Address(RVA = "0x7F12EC", Offset = "0x7F12EC", VA = "0x7F12EC", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6002A7B")]
				[Address(RVA = "0x7F12F0", Offset = "0x7F12F0", VA = "0x7F12F0", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x6002A7D")]
				[Address(RVA = "0x7F1664", Offset = "0x7F1664", VA = "0x7F1664", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x400224D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ThunderAndLightningScript script;

			[Token(Token = "0x400224E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly System.Random random;

			[Token(Token = "0x6002A0A")]
			[Address(RVA = "0x7F076C", Offset = "0x7F076C", VA = "0x7F076C")]
			public LightningBoltHandler(ThunderAndLightningScript script)
			{
			}

			[Token(Token = "0x6002A0B")]
			[Address(RVA = "0x7F0AB8", Offset = "0x7F0AB8", VA = "0x7F0AB8")]
			private void UpdateLighting()
			{
			}

			[Token(Token = "0x6002A0C")]
			[Address(RVA = "0x7F09D0", Offset = "0x7F09D0", VA = "0x7F09D0")]
			private void CalculateNextLightningTime()
			{
			}

			[Token(Token = "0x6002A0D")]
			[Address(RVA = "0x7F0860", Offset = "0x7F0860", VA = "0x7F0860")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75B340", Offset = "0x75B340")]
			public IEnumerator ProcessLightning(Vector3? _start, Vector3? _end, bool intense, bool visible)
			{
				return null;
			}

			[Token(Token = "0x6002A0E")]
			[Address(RVA = "0x7F0C78", Offset = "0x7F0C78", VA = "0x7F0C78")]
			private void Strike(Vector3? _start, Vector3? _end, bool intense, float intensity, Camera camera, Camera visibleInCamera)
			{
			}

			[Token(Token = "0x6002A0F")]
			[Address(RVA = "0x7F0BBC", Offset = "0x7F0BBC", VA = "0x7F0BBC")]
			private void CheckForLightning()
			{
			}

			[Token(Token = "0x6002A10")]
			[Address(RVA = "0x7F0808", Offset = "0x7F0808", VA = "0x7F0808")]
			public void Update()
			{
			}
		}

		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755C00", Offset = "0x755C00")]
		public LightningBoltPrefabScript LightningBoltScript;

		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755C38", Offset = "0x755C38")]
		public Camera Camera;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SingleLineAttribute", RVA = "0x755C70", Offset = "0x755C70")]
		public RangeOfFloats LightningIntervalTimeRange;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755CA8", Offset = "0x755CA8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x755CA8", Offset = "0x755CA8")]
		public float LightningIntenseProbability;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755CFC", Offset = "0x755CFC")]
		public AudioClip[] ThunderSoundsNormal;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755D34", Offset = "0x755D34")]
		public AudioClip[] ThunderSoundsIntense;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755D6C", Offset = "0x755D6C")]
		public bool LightningAlwaysVisible;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755DA4", Offset = "0x755DA4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x755DA4", Offset = "0x755DA4")]
		public float CloudLightningChance;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755DF8", Offset = "0x755DF8")]
		public bool ModifySkyboxExposure;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755E30", Offset = "0x755E30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x755E30", Offset = "0x755E30")]
		public float BaseLightRange;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x755E88", Offset = "0x755E88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x755E88", Offset = "0x755E88")]
		public float LightningYStart;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float skyboxExposureOriginal;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float skyboxExposureStorm;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float nextLightningTime;

		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool lightningInProgress;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioSource audioSourceThunder;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LightningBoltHandler lightningBoltHandler;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material skyboxMaterial;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AudioClip lastThunderSound;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x755EE0", Offset = "0x755EE0")]
		private bool <EnableLightning>k__BackingField;

		[Token(Token = "0x17000346")]
		public float SkyboxExposureOriginal
		{
			[Token(Token = "0x60020F3")]
			[Address(RVA = "0x7F0978", Offset = "0x7F0978", VA = "0x7F0978")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000347")]
		public bool EnableLightning
		{
			[Token(Token = "0x60020F4")]
			[Address(RVA = "0x7F0980", Offset = "0x7F0980", VA = "0x7F0980")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x759FF4", Offset = "0x759FF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60020F5")]
			[Address(RVA = "0x7F0988", Offset = "0x7F0988", VA = "0x7F0988")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A004", Offset = "0x75A004")]
			set
			{
			}
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0x7F0590", Offset = "0x7F0590", VA = "0x7F0590")]
		private void Start()
		{
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0x7F07EC", Offset = "0x7F07EC", VA = "0x7F07EC")]
		private void Update()
		{
		}

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0x7F080C", Offset = "0x7F080C", VA = "0x7F080C")]
		public void CallNormalLightning()
		{
		}

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0x7F0820", Offset = "0x7F0820", VA = "0x7F0820")]
		public void CallNormalLightning(Vector3? start, Vector3? end)
		{
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0x7F0924", Offset = "0x7F0924", VA = "0x7F0924")]
		public void CallIntenseLightning()
		{
		}

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0x7F0938", Offset = "0x7F0938", VA = "0x7F0938")]
		public void CallIntenseLightning(Vector3? start, Vector3? end)
		{
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0x7F0994", Offset = "0x7F0994", VA = "0x7F0994")]
		public ThunderAndLightningScript()
		{
		}
	}
}
namespace I2
{
	[Token(Token = "0x200040E")]
	public class CoroutineManager : MonoBehaviour
	{
		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CoroutineManager mInstance;

		[Token(Token = "0x17000348")]
		public static CoroutineManager pInstance
		{
			[Token(Token = "0x60020F7")]
			[Address(RVA = "0x90D51C", Offset = "0x90D51C", VA = "0x90D51C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0x90D658", Offset = "0x90D658", VA = "0x90D658")]
		public static Coroutine Start(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0x90D688", Offset = "0x90D688", VA = "0x90D688")]
		public CoroutineManager()
		{
		}
	}
	[Token(Token = "0x200040F")]
	public class RenameAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Name;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Tooltip;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly int HorizSpace;

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0x7D3EE8", Offset = "0x7D3EE8", VA = "0x7D3EE8")]
		public RenameAttribute(int hspace, string name, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0x7D3F28", Offset = "0x7D3F28", VA = "0x7D3F28")]
		public RenameAttribute(string name, [Optional] string tooltip)
		{
		}
	}
}
namespace I2.Loc
{
	[Token(Token = "0x2000410")]
	public class CallbackNotification : MonoBehaviour
	{
		[Token(Token = "0x60020FC")]
		[Address(RVA = "0x90D7AC", Offset = "0x90D7AC", VA = "0x90D7AC")]
		public void OnModifyLocalization()
		{
		}

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0x90D8F8", Offset = "0x90D8F8", VA = "0x90D8F8")]
		public CallbackNotification()
		{
		}
	}
	[Token(Token = "0x2000411")]
	public class Example_LocalizedString : MonoBehaviour
	{
		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString _MyLocalizedString;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _NormalString;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[TermsPopup]
		public string _StringWithTermPopup;

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0x90DA5C", Offset = "0x90DA5C", VA = "0x90DA5C")]
		private void Start()
		{
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0x90DB74", Offset = "0x90DB74", VA = "0x90DB74")]
		public Example_LocalizedString()
		{
		}
	}
	[Token(Token = "0x2000412")]
	public class GlobalParametersExample : RegisterGlobalParameters
	{
		[Token(Token = "0x6002100")]
		[Address(RVA = "0x90DB7C", Offset = "0x90DB7C", VA = "0x90DB7C", Slot = "7")]
		public override string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0x90DC2C", Offset = "0x90DC2C", VA = "0x90DC2C")]
		public GlobalParametersExample()
		{
		}
	}
	[Token(Token = "0x2000413")]
	public class RealTimeTranslation : MonoBehaviour
	{
		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string OriginalText;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string TranslatedText;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool IsTranslating;

		[Token(Token = "0x6002102")]
		[Address(RVA = "0x7CC4E4", Offset = "0x7CC4E4", VA = "0x7CC4E4")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0x7CC94C", Offset = "0x7CC94C", VA = "0x7CC94C")]
		private void StartTranslating(string fromCode, string toCode)
		{
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0x7CC9F8", Offset = "0x7CC9F8", VA = "0x7CC9F8")]
		private void OnTranslationReady(string Translation)
		{
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0x7CCA04", Offset = "0x7CCA04", VA = "0x7CCA04")]
		public RealTimeTranslation()
		{
		}
	}
	[Token(Token = "0x2000414")]
	public class RegisterBundlesManager : MonoBehaviour, IResourceManager_Bundles
	{
		[Token(Token = "0x6002106")]
		[Address(RVA = "0x7CCA74", Offset = "0x7CCA74", VA = "0x7CCA74")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0x7CCE48", Offset = "0x7CCE48", VA = "0x7CCE48")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002108")]
		public T LoadFromBundle<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0x7CCEAC", Offset = "0x7CCEAC", VA = "0x7CCEAC")]
		public RegisterBundlesManager()
		{
		}
	}
	[Token(Token = "0x2000415")]
	public class SimpleButton : MonoBehaviour
	{
		[Token(Token = "0x600210A")]
		[Address(RVA = "0x7CD9CC", Offset = "0x7CD9CC", VA = "0x7CD9CC")]
		public void OnMouseUp()
		{
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0x7CDA34", Offset = "0x7CDA34", VA = "0x7CDA34")]
		public SimpleButton()
		{
		}
	}
	[Token(Token = "0x2000416")]
	public class ToggleLanguage : MonoBehaviour
	{
		[Token(Token = "0x600210C")]
		[Address(RVA = "0x7D3B88", Offset = "0x7D3B88", VA = "0x7D3B88")]
		private void Start()
		{
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0x7D3BE0", Offset = "0x7D3BE0", VA = "0x7D3BE0")]
		private void test()
		{
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0x7D3C94", Offset = "0x7D3C94", VA = "0x7D3C94")]
		public ToggleLanguage()
		{
		}
	}
	[Token(Token = "0x2000417")]
	public class tk2dChangeLanguage : MonoBehaviour
	{
		[Token(Token = "0x600210F")]
		[Address(RVA = "0x7D3D60", Offset = "0x7D3D60", VA = "0x7D3D60")]
		public void SetLanguage_English()
		{
		}

		[Token(Token = "0x6002110")]
		[Address(RVA = "0x7D3E50", Offset = "0x7D3E50", VA = "0x7D3E50")]
		public void SetLanguage_French()
		{
		}

		[Token(Token = "0x6002111")]
		[Address(RVA = "0x7D3E98", Offset = "0x7D3E98", VA = "0x7D3E98")]
		public void SetLanguage_Spanish()
		{
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0x7D3DA8", Offset = "0x7D3DA8", VA = "0x7D3DA8")]
		public void SetLanguage(string LangName)
		{
		}

		[Token(Token = "0x6002113")]
		[Address(RVA = "0x7D3EE0", Offset = "0x7D3EE0", VA = "0x7D3EE0")]
		public tk2dChangeLanguage()
		{
		}
	}
	[Token(Token = "0x2000418")]
	public class dfSetLanguage : MonoBehaviour
	{
		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Language;

		[Token(Token = "0x6002114")]
		[Address(RVA = "0x7D3C9C", Offset = "0x7D3C9C", VA = "0x7D3C9C")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0x7D3D58", Offset = "0x7D3D58", VA = "0x7D3D58")]
		public dfSetLanguage()
		{
		}
	}
	[Token(Token = "0x2000419")]
	public class LanguagePopup : MonoBehaviour
	{
		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSource Source;

		[Token(Token = "0x6002116")]
		[Address(RVA = "0x911CA4", Offset = "0x911CA4", VA = "0x911CA4")]
		public LanguagePopup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200041A")]
	public class EventCallback
	{
		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MonoBehaviour Target;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MethodName;

		[Token(Token = "0x6002117")]
		[Address(RVA = "0x90D900", Offset = "0x90D900", VA = "0x90D900")]
		public void Execute([Optional] UnityEngine.Object Sender)
		{
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0x90D968", Offset = "0x90D968", VA = "0x90D968")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0x90D9FC", Offset = "0x90D9FC", VA = "0x90D9FC")]
		public EventCallback()
		{
		}
	}
	[Token(Token = "0x200041B")]
	public static class GoogleLanguages
	{
		[Token(Token = "0x2000650")]
		public struct LanguageCodeDef
		{
			[Token(Token = "0x400224F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Code;

			[Token(Token = "0x4002250")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string GoogleCode;
		}

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, LanguageCodeDef> mLanguageDef;

		[Token(Token = "0x600211A")]
		[Address(RVA = "0x90DC34", Offset = "0x90DC34", VA = "0x90DC34")]
		public static string GetLanguageCode(string Filter, bool ShowWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0x90DFD0", Offset = "0x90DFD0", VA = "0x90DFD0")]
		public static List<string> GetLanguagesForDropdown(string Filter, string CodesToExclude)
		{
			return null;
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0x90E480", Offset = "0x90E480", VA = "0x90E480")]
		public static string GetClosestLanguage(string Filter)
		{
			return null;
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0x90DE70", Offset = "0x90DE70", VA = "0x90DE70")]
		private static bool LanguageMatchesFilter(string Language, string[] Filters)
		{
			return default(bool);
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0x90E654", Offset = "0x90E654", VA = "0x90E654")]
		public static string GetFormatedLanguageName(string Language)
		{
			return null;
		}

		[Token(Token = "0x600211F")]
		[Address(RVA = "0x90E78C", Offset = "0x90E78C", VA = "0x90E78C")]
		public static string GetCodedLanguage(string Language, string code)
		{
			return null;
		}

		[Token(Token = "0x6002120")]
		[Address(RVA = "0x90E854", Offset = "0x90E854", VA = "0x90E854")]
		public static void UnPackCodeFromLanguageName(string CodedLanguage, out string Language, out string code)
		{
		}

		[Token(Token = "0x6002121")]
		[Address(RVA = "0x90E998", Offset = "0x90E998", VA = "0x90E998")]
		public static string GetGoogleLanguageCode(string InternationalCode)
		{
			return null;
		}

		[Token(Token = "0x6002122")]
		[Address(RVA = "0x90EAE0", Offset = "0x90EAE0", VA = "0x90EAE0")]
		public static List<string> GetAllInternationalCodes()
		{
			return null;
		}
	}
	[Token(Token = "0x200041C")]
	public struct TranslationRequest
	{
		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string Term;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Text;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string LanguageCode;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] TargetLanguagesCode;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] Results;
	}
	[Token(Token = "0x200041D")]
	public static class GoogleTranslation
	{
		[Token(Token = "0x2000651")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C8AC", Offset = "0x74C8AC")]
		private sealed class <WaitForTranslation>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002251")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WWW www;

			[Token(Token = "0x4002254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<string> OnTranslationReady;

			[Token(Token = "0x4002255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string OriginalText;

			[Token(Token = "0x170003F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A14")]
				[Address(RVA = "0x911A5C", Offset = "0x911A5C", VA = "0x911A5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A16")]
				[Address(RVA = "0x911AC8", Offset = "0x911AC8", VA = "0x911AC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A11")]
			[Address(RVA = "0x910D94", Offset = "0x910D94", VA = "0x910D94")]
			[DebuggerHidden]
			public <WaitForTranslation>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6002A12")]
			[Address(RVA = "0x9119FC", Offset = "0x9119FC", VA = "0x9119FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A13")]
			[Address(RVA = "0x911A00", Offset = "0x911A00", VA = "0x911A00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A15")]
			[Address(RVA = "0x911A64", Offset = "0x911A64", VA = "0x911A64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000652")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C8BC", Offset = "0x74C8BC")]
		private sealed class <WaitForTranslation>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WWW www;

			[Token(Token = "0x4002259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<List<TranslationRequest>> OnTranslationReady;

			[Token(Token = "0x400225A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<TranslationRequest> requests;

			[Token(Token = "0x170003F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A1A")]
				[Address(RVA = "0x911C18", Offset = "0x911C18", VA = "0x911C18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A1C")]
				[Address(RVA = "0x911C84", Offset = "0x911C84", VA = "0x911C84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A17")]
			[Address(RVA = "0x9115B0", Offset = "0x9115B0", VA = "0x9115B0")]
			[DebuggerHidden]
			public <WaitForTranslation>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002A18")]
			[Address(RVA = "0x911AD0", Offset = "0x911AD0", VA = "0x911AD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A19")]
			[Address(RVA = "0x911AD4", Offset = "0x911AD4", VA = "0x911AD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A1B")]
			[Address(RVA = "0x911C20", Offset = "0x911C20", VA = "0x911C20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0x910784", Offset = "0x910784", VA = "0x910784")]
		public static bool CanTranslate()
		{
			return default(bool);
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0x910A58", Offset = "0x910A58", VA = "0x910A58")]
		public static void Translate(string text, string LanguageCodeFrom, string LanguageCodeTo, Action<string> OnTranslationReady)
		{
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0x910D0C", Offset = "0x910D0C", VA = "0x910D0C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A014", Offset = "0x75A014")]
		private static IEnumerator WaitForTranslation(WWW www, Action<string> OnTranslationReady, string OriginalText)
		{
			return null;
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x910DC0", Offset = "0x910DC0", VA = "0x910DC0")]
		private static void UseTranslation(WWW www, Action<string> OnTranslationReady, string OriginalText)
		{
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x910AB8", Offset = "0x910AB8", VA = "0x910AB8")]
		public static WWW GetTranslationWWW(string text, string LanguageCodeFrom, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0x910EF8", Offset = "0x910EF8", VA = "0x910EF8")]
		public static string ParseTranslationResult(string html, string OriginalText)
		{
			return null;
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0x911130", Offset = "0x911130", VA = "0x911130")]
		public static void Translate(List<TranslationRequest> requests, Action<List<TranslationRequest>> OnTranslationReady)
		{
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0x911190", Offset = "0x911190", VA = "0x911190")]
		public static WWW GetTranslationWWW(List<TranslationRequest> requests)
		{
			return null;
		}

		[Token(Token = "0x600212C")]
		[Address(RVA = "0x911528", Offset = "0x911528", VA = "0x911528")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A078", Offset = "0x75A078")]
		private static IEnumerator WaitForTranslation(WWW www, Action<List<TranslationRequest>> OnTranslationReady, List<TranslationRequest> requests)
		{
			return null;
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0x9115DC", Offset = "0x9115DC", VA = "0x9115DC")]
		public static string ParseTranslationResult(string html, List<TranslationRequest> requests)
		{
			return null;
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0x911900", Offset = "0x911900", VA = "0x911900")]
		public static string UppercaseFirst(string s)
		{
			return null;
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0x911078", Offset = "0x911078", VA = "0x911078")]
		public static string TitleCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x200041E")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74AB48", Offset = "0x74AB48")]
	public class LanguageSource : MonoBehaviour
	{
		[Token(Token = "0x2000653")]
		public enum eGoogleUpdateFrequency
		{
			[Token(Token = "0x400225C")]
			Always,
			[Token(Token = "0x400225D")]
			Never,
			[Token(Token = "0x400225E")]
			Daily,
			[Token(Token = "0x400225F")]
			Weekly,
			[Token(Token = "0x4002260")]
			Monthly,
			[Token(Token = "0x4002261")]
			OnlyOnce
		}

		[Token(Token = "0x2000654")]
		public enum eInputSpecialization
		{
			[Token(Token = "0x4002263")]
			PC,
			[Token(Token = "0x4002264")]
			Touch,
			[Token(Token = "0x4002265")]
			Controller
		}

		[Token(Token = "0x2000655")]
		public enum MissingTranslationAction
		{
			[Token(Token = "0x4002267")]
			Empty,
			[Token(Token = "0x4002268")]
			Fallback,
			[Token(Token = "0x4002269")]
			ShowWarning
		}

		[Token(Token = "0x2000656")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C8CC", Offset = "0x74C8CC")]
		private sealed class <Import_Google_Coroutine>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400226A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400226B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400226C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LanguageSource <>4__this;

			[Token(Token = "0x400226D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WWW <www>5__2;

			[Token(Token = "0x170003F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A20")]
				[Address(RVA = "0x9182A8", Offset = "0x9182A8", VA = "0x9182A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A22")]
				[Address(RVA = "0x918314", Offset = "0x918314", VA = "0x918314", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A1D")]
			[Address(RVA = "0x9157C4", Offset = "0x9157C4", VA = "0x9157C4")]
			[DebuggerHidden]
			public <Import_Google_Coroutine>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6002A1E")]
			[Address(RVA = "0x917EF4", Offset = "0x917EF4", VA = "0x917EF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A1F")]
			[Address(RVA = "0x917EF8", Offset = "0x917EF8", VA = "0x917EF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A21")]
			[Address(RVA = "0x9182B0", Offset = "0x9182B0", VA = "0x9182B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Google_WebServiceURL;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string EmptyCategory;

		[Token(Token = "0x4001E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static char[] CategorySeparators;

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<TermData> mTerms;

		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool CaseInsensitiveTerms;

		[NonSerialized]
		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Dictionary<string, TermData> mDictionary;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEngine.Object[] Assets;

		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool NeverDestroy;

		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x4001E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string mTerm_AppName;

		[Token(Token = "0x14000013")]
		public event Action<LanguageSource, bool, string> Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x600213D")]
			[Address(RVA = "0x914B24", Offset = "0x914B24", VA = "0x914B24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A0DC", Offset = "0x75A0DC")]
			add
			{
			}
			[Token(Token = "0x600213E")]
			[Address(RVA = "0x914BC8", Offset = "0x914BC8", VA = "0x914BC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A0EC", Offset = "0x75A0EC")]
			remove
			{
			}
		}

		[Token(Token = "0x6002130")]
		[Address(RVA = "0x911CAC", Offset = "0x911CAC", VA = "0x911CAC")]
		public string Export_I2CSV(string Category, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0x9121E4", Offset = "0x9121E4", VA = "0x9121E4")]
		private static void AppendI2Term(StringBuilder Builder, int nLanguages, string Term, TermData termData, string postfix, string[] aLanguages, string[] aSecLanguages, char Separator, byte FlagBitMask, byte SecFlagBitMask)
		{
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0x9123CC", Offset = "0x9123CC", VA = "0x9123CC")]
		public string Export_CSV(string Category, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0x912B88", Offset = "0x912B88", VA = "0x912B88")]
		private static void AppendTerm(StringBuilder Builder, int nLanguages, string Term, TermData termData, string prefix, string[] aLanguages, string[] aSecLanguages, char Separator, byte FlagBitMask, byte SecFlagBitMask)
		{
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0x912A54", Offset = "0x912A54", VA = "0x912A54")]
		private static void AppendString(StringBuilder Builder, string Text, char Separator)
		{
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0x912E14", Offset = "0x912E14", VA = "0x912E14")]
		private static void AppendTranslation(StringBuilder Builder, string Text, char Separator, string tags)
		{
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0x912F68", Offset = "0x912F68", VA = "0x912F68")]
		public WWW Export_Google_CreateWWWcall(eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0x913104", Offset = "0x913104", VA = "0x913104")]
		private string Export_Google_CreateData()
		{
			return null;
		}

		[Token(Token = "0x6002138")]
		[Address(RVA = "0x9134D8", Offset = "0x9134D8", VA = "0x9134D8")]
		public string Import_CSV(string Category, string CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6002139")]
		[Address(RVA = "0x914070", Offset = "0x914070", VA = "0x914070")]
		public string Import_I2CSV(string Category, string I2CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x600213A")]
		[Address(RVA = "0x9135FC", Offset = "0x9135FC", VA = "0x9135FC")]
		public string Import_CSV(string Category, List<string[]> CSV, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x600213B")]
		[Address(RVA = "0x914260", Offset = "0x914260", VA = "0x914260")]
		private bool ArrayContains(string MainText, params string[] texts)
		{
			return default(bool);
		}

		[Token(Token = "0x600213C")]
		[Address(RVA = "0x914A50", Offset = "0x914A50", VA = "0x914A50")]
		public static eTermType GetTermType(string type)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x914C6C", Offset = "0x914C6C", VA = "0x914C6C")]
		public static void FreeUnusedLanguages()
		{
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x914E44", Offset = "0x914E44", VA = "0x914E44")]
		public void Import_Google_FromCache()
		{
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0x915124", Offset = "0x915124", VA = "0x915124")]
		private bool IsNewerVersion(string currentVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0x915544", Offset = "0x915544", VA = "0x915544")]
		public void Import_Google(bool ForceUpdate = false)
		{
		}

		[Token(Token = "0x6002143")]
		[Address(RVA = "0x915030", Offset = "0x915030", VA = "0x915030")]
		private string GetSourcePlayerPrefName()
		{
			return null;
		}

		[Token(Token = "0x6002144")]
		[Address(RVA = "0x915750", Offset = "0x915750", VA = "0x915750")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A0FC", Offset = "0x75A0FC")]
		private IEnumerator Import_Google_Coroutine()
		{
			return null;
		}

		[Token(Token = "0x6002145")]
		[Address(RVA = "0x9157F0", Offset = "0x9157F0", VA = "0x9157F0")]
		public WWW Import_Google_CreateWWWcall(bool ForceUpdate = false)
		{
			return null;
		}

		[Token(Token = "0x6002146")]
		[Address(RVA = "0x91594C", Offset = "0x91594C", VA = "0x91594C")]
		public bool HasGoogleSpreadsheet()
		{
			return default(bool);
		}

		[Token(Token = "0x6002147")]
		[Address(RVA = "0x9151B4", Offset = "0x9151B4", VA = "0x9151B4")]
		public string Import_Google_Result(string JsonString, eSpreadsheetUpdateMode UpdateMode, bool saveInPlayerPrefs = false)
		{
			return null;
		}

		[Token(Token = "0x6002148")]
		[Address(RVA = "0x9132E8", Offset = "0x9132E8", VA = "0x9132E8")]
		public List<string> GetCategories(bool OnlyMainCategory = false, [Optional] List<string> Categories)
		{
			return null;
		}

		[Token(Token = "0x6002149")]
		[Address(RVA = "0x915B04", Offset = "0x915B04", VA = "0x915B04")]
		public static string GetKeyFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x600214A")]
		[Address(RVA = "0x9159F4", Offset = "0x9159F4", VA = "0x9159F4")]
		public static string GetCategoryFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x600214B")]
		[Address(RVA = "0x915BEC", Offset = "0x915BEC", VA = "0x915BEC")]
		public static void DeserializeFullTerm(string FullTerm, out string Key, out string Category, bool OnlyMainCategory = false)
		{
		}

		[Token(Token = "0x600214C")]
		[Address(RVA = "0x915D24", Offset = "0x915D24", VA = "0x915D24")]
		public static eInputSpecialization GetCurrentInputType()
		{
			return default(eInputSpecialization);
		}

		[Token(Token = "0x600214D")]
		[Address(RVA = "0x915D2C", Offset = "0x915D2C", VA = "0x915D2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0x916134", Offset = "0x916134", VA = "0x916134")]
		public void UpdateDictionary(bool force = false)
		{
		}

		[Token(Token = "0x600214F")]
		[Address(RVA = "0x916544", Offset = "0x916544", VA = "0x916544")]
		public string GetSourceName()
		{
			return null;
		}

		[Token(Token = "0x6002150")]
		[Address(RVA = "0x9144E0", Offset = "0x9144E0", VA = "0x9144E0")]
		public int GetLanguageIndex(string language, bool AllowDiscartingRegion = true, bool SkipDisabled = true)
		{
			return default(int);
		}

		[Token(Token = "0x6002151")]
		[Address(RVA = "0x914394", Offset = "0x914394", VA = "0x914394")]
		public int GetLanguageIndexFromCode(string Code, bool exactMatch = true)
		{
			return default(int);
		}

		[Token(Token = "0x6002152")]
		[Address(RVA = "0x916640", Offset = "0x916640", VA = "0x916640")]
		public static int GetCommonWordInLanguageNames(string Language1, string Language2)
		{
			return default(int);
		}

		[Token(Token = "0x6002153")]
		[Address(RVA = "0x9167FC", Offset = "0x9167FC", VA = "0x9167FC")]
		public static bool AreTheSameLanguage(string Language1, string Language2)
		{
			return default(bool);
		}

		[Token(Token = "0x6002154")]
		[Address(RVA = "0x916898", Offset = "0x916898", VA = "0x916898")]
		public static string GetLanguageWithoutRegion(string Language)
		{
			return null;
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0x916944", Offset = "0x916944", VA = "0x916944")]
		public void AddLanguage(string LanguageName, string LanguageCode)
		{
		}

		[Token(Token = "0x6002156")]
		[Address(RVA = "0x916AF4", Offset = "0x916AF4", VA = "0x916AF4")]
		public void RemoveLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0x916EB8", Offset = "0x916EB8", VA = "0x916EB8")]
		public List<string> GetLanguages(bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0x916FE8", Offset = "0x916FE8", VA = "0x916FE8")]
		public List<string> GetLanguagesCode(bool allowRegions = true, bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6002159")]
		[Address(RVA = "0x917180", Offset = "0x917180", VA = "0x917180")]
		public bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x600215A")]
		[Address(RVA = "0x917230", Offset = "0x917230", VA = "0x917230")]
		public string GetTermTranslation(string term)
		{
			return null;
		}

		[Token(Token = "0x600215B")]
		[Address(RVA = "0x9172AC", Offset = "0x9172AC", VA = "0x9172AC")]
		public bool TryGetTermTranslation(string term, out string Translation)
		{
			return default(bool);
		}

		[Token(Token = "0x600215C")]
		[Address(RVA = "0x917490", Offset = "0x917490", VA = "0x917490")]
		public TermData AddTerm(string term)
		{
			return null;
		}

		[Token(Token = "0x600215D")]
		[Address(RVA = "0x914868", Offset = "0x914868", VA = "0x914868")]
		public TermData GetTermData(string term, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0x917648", Offset = "0x917648", VA = "0x917648")]
		public bool ContainsTerm(string term)
		{
			return default(bool);
		}

		[Token(Token = "0x600215F")]
		[Address(RVA = "0x917668", Offset = "0x917668", VA = "0x917668")]
		public List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x6002160")]
		[Address(RVA = "0x91749C", Offset = "0x91749C", VA = "0x91749C")]
		public TermData AddTerm(string NewTerm, eTermType termType, bool SaveSource = true)
		{
			return null;
		}

		[Token(Token = "0x6002161")]
		[Address(RVA = "0x91782C", Offset = "0x91782C", VA = "0x91782C")]
		public void RemoveTerm(string term)
		{
		}

		[Token(Token = "0x6002162")]
		[Address(RVA = "0x9146D0", Offset = "0x9146D0", VA = "0x9146D0")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x917934", Offset = "0x917934", VA = "0x917934")]
		public bool IsEqualTo(LanguageSource Source)
		{
			return default(bool);
		}

		[Token(Token = "0x6002164")]
		[Address(RVA = "0x915E30", Offset = "0x915E30", VA = "0x915E30")]
		internal bool ManagerHasASimilarSource()
		{
			return default(bool);
		}

		[Token(Token = "0x6002165")]
		[Address(RVA = "0x91430C", Offset = "0x91430C", VA = "0x91430C")]
		public void ClearAllData()
		{
		}

		[Token(Token = "0x6002166")]
		[Address(RVA = "0x917A98", Offset = "0x917A98", VA = "0x917A98")]
		public UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0x917BF0", Offset = "0x917BF0", VA = "0x917BF0")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0x917C5C", Offset = "0x917C5C", VA = "0x917C5C")]
		public void AddAsset(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0x917D24", Offset = "0x917D24", VA = "0x917D24")]
		public LanguageSource()
		{
		}
	}
	[Token(Token = "0x200041F")]
	public enum eSpreadsheetUpdateMode
	{
		[Token(Token = "0x4001E2A")]
		None,
		[Token(Token = "0x4001E2B")]
		Replace,
		[Token(Token = "0x4001E2C")]
		Merge,
		[Token(Token = "0x4001E2D")]
		AddNewTerms
	}
	[Token(Token = "0x2000420")]
	public enum eTermType
	{
		[Token(Token = "0x4001E2F")]
		Text,
		[Token(Token = "0x4001E30")]
		Font,
		[Token(Token = "0x4001E31")]
		Texture,
		[Token(Token = "0x4001E32")]
		AudioClip,
		[Token(Token = "0x4001E33")]
		GameObject,
		[Token(Token = "0x4001E34")]
		Sprite,
		[Token(Token = "0x4001E35")]
		Material,
		[Token(Token = "0x4001E36")]
		Object
	}
	[Token(Token = "0x2000421")]
	public enum TranslationFlag : byte
	{
		[Token(Token = "0x4001E38")]
		AutoTranslated_Normal = 1,
		[Token(Token = "0x4001E39")]
		AutoTranslated_Touch = 2,
		[Token(Token = "0x4001E3A")]
		AutoTranslated_All = byte.MaxValue
	}
	[Token(Token = "0x2000422")]
	public enum eTransTag_Plural
	{
		[Token(Token = "0x4001E3C")]
		Any,
		[Token(Token = "0x4001E3D")]
		Zero,
		[Token(Token = "0x4001E3E")]
		One,
		[Token(Token = "0x4001E3F")]
		Many
	}
	[Token(Token = "0x2000423")]
	public enum eTransTag_Input
	{
		[Token(Token = "0x4001E41")]
		Any,
		[Token(Token = "0x4001E42")]
		PC,
		[Token(Token = "0x4001E43")]
		Touch
	}
	[Serializable]
	[Token(Token = "0x2000424")]
	public class TermData
	{
		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Term;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public eTermType TermType;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Languages;

		[Token(Token = "0x4001E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] Languages_Touch;

		[Token(Token = "0x4001E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public byte[] Flags;

		[Token(Token = "0x600216B")]
		[Address(RVA = "0x7D36FC", Offset = "0x7D36FC", VA = "0x7D36FC")]
		public string GetTranslation(int idx, eTransTag_Input input = eTransTag_Input.Any, eTransTag_Plural plural = eTransTag_Plural.Any)
		{
			return null;
		}

		[Token(Token = "0x600216C")]
		[Address(RVA = "0x7D3794", Offset = "0x7D3794", VA = "0x7D3794")]
		public bool IsAutoTranslated(int idx, bool IsTouch)
		{
			return default(bool);
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0x7D37EC", Offset = "0x7D37EC", VA = "0x7D37EC")]
		public bool HasTouchTranslations()
		{
			return default(bool);
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0x7D38E8", Offset = "0x7D38E8", VA = "0x7D38E8")]
		public void Validate()
		{
		}

		[Token(Token = "0x600216F")]
		[Address(RVA = "0x7D378C", Offset = "0x7D378C", VA = "0x7D378C")]
		public static bool IsTouchType()
		{
			return default(bool);
		}

		[Token(Token = "0x6002170")]
		[Address(RVA = "0x7D3A3C", Offset = "0x7D3A3C", VA = "0x7D3A3C")]
		public bool IsTerm(string name, bool allowCategoryMistmatch)
		{
			return default(bool);
		}

		[Token(Token = "0x6002171")]
		[Address(RVA = "0x7D3AD4", Offset = "0x7D3AD4", VA = "0x7D3AD4")]
		public TermData()
		{
		}
	}
	[Token(Token = "0x2000425")]
	public enum eLanguageDataFlags
	{
		[Token(Token = "0x4001E4B")]
		DISABLED = 1
	}
	[Serializable]
	[Token(Token = "0x2000426")]
	public class LanguageData
	{
		[Token(Token = "0x4001E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4001E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Code;

		[Token(Token = "0x4001E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte Flags;

		[NonSerialized]
		[Token(Token = "0x4001E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Compressed;

		[Token(Token = "0x6002172")]
		[Address(RVA = "0x911C8C", Offset = "0x911C8C", VA = "0x911C8C")]
		public bool IsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6002173")]
		[Address(RVA = "0x911C9C", Offset = "0x911C9C", VA = "0x911C9C")]
		public LanguageData()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public static class LocalizationManager
	{
		[Token(Token = "0x2000657")]
		public delegate void OnLocalizeCallback();

		[Serializable]
		[Token(Token = "0x2000658")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C8DC", Offset = "0x74C8DC")]
		private sealed class <>c
		{
			[Token(Token = "0x400226E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400226F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static MatchEvaluator <>9__43_0;

			[Token(Token = "0x4002270")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static MatchEvaluator <>9__43_1;

			[Token(Token = "0x6002A28")]
			[Address(RVA = "0x91DBA0", Offset = "0x91DBA0", VA = "0x91DBA0")]
			public <>c()
			{
			}

			[Token(Token = "0x6002A29")]
			[Address(RVA = "0x91DBA8", Offset = "0x91DBA8", VA = "0x91DBA8")]
			internal string <ApplyRTLfix1>b__43_0(Match m)
			{
				return null;
			}

			[Token(Token = "0x6002A2A")]
			[Address(RVA = "0x91DC34", Offset = "0x91DC34", VA = "0x91DC34")]
			internal string <ApplyRTLfix1>b__43_1(Match m)
			{
				return null;
			}
		}

		[Token(Token = "0x2000659")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C8EC", Offset = "0x74C8EC")]
		private sealed class <Coroutine_LocalizeAll>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002271")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002272")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170003FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A2E")]
				[Address(RVA = "0x91DE98", Offset = "0x91DE98", VA = "0x91DE98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A30")]
				[Address(RVA = "0x91DF04", Offset = "0x91DF04", VA = "0x91DF04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A2B")]
			[Address(RVA = "0x91B670", Offset = "0x91B670", VA = "0x91B670")]
			[DebuggerHidden]
			public <Coroutine_LocalizeAll>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6002A2C")]
			[Address(RVA = "0x91DDA8", Offset = "0x91DDA8", VA = "0x91DDA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A2D")]
			[Address(RVA = "0x91DDAC", Offset = "0x91DDAC", VA = "0x91DDAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A2F")]
			[Address(RVA = "0x91DEA0", Offset = "0x91DEA0", VA = "0x91DEA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200065A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C8FC", Offset = "0x74C8FC")]
		private sealed class <Delayed_Import_Google>d__56 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002273")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002274")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002275")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4002276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LanguageSource source;

			[Token(Token = "0x170003FC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A34")]
				[Address(RVA = "0x91DFC4", Offset = "0x91DFC4", VA = "0x91DFC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A36")]
				[Address(RVA = "0x91E030", Offset = "0x91E030", VA = "0x91E030", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A31")]
			[Address(RVA = "0x91C7E4", Offset = "0x91C7E4", VA = "0x91C7E4")]
			[DebuggerHidden]
			public <Delayed_Import_Google>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x6002A32")]
			[Address(RVA = "0x91DF0C", Offset = "0x91DF0C", VA = "0x91DF0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A33")]
			[Address(RVA = "0x91DF10", Offset = "0x91DF10", VA = "0x91DF10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A35")]
			[Address(RVA = "0x91DFCC", Offset = "0x91DFCC", VA = "0x91DFCC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200065B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C90C", Offset = "0x74C90C")]
		private sealed class <>c__DisplayClass63_0
		{
			[Token(Token = "0x4002277")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> Languages;

			[Token(Token = "0x4002278")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<string, bool> <>9__0;

			[Token(Token = "0x6002A37")]
			[Address(RVA = "0x91CABC", Offset = "0x91CABC", VA = "0x91CABC")]
			public <>c__DisplayClass63_0()
			{
			}

			[Token(Token = "0x6002A38")]
			[Address(RVA = "0x91DCC0", Offset = "0x91DCC0", VA = "0x91DCC0")]
			internal bool <GetAllLanguages>b__0(string x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200065C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C91C", Offset = "0x74C91C")]
		private sealed class <>c__DisplayClass64_0
		{
			[Token(Token = "0x4002279")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> Languages;

			[Token(Token = "0x400227A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<string, bool> <>9__0;

			[Token(Token = "0x6002A39")]
			[Address(RVA = "0x91CCC4", Offset = "0x91CCC4", VA = "0x91CCC4")]
			public <>c__DisplayClass64_0()
			{
			}

			[Token(Token = "0x6002A3A")]
			[Address(RVA = "0x91DD34", Offset = "0x91DD34", VA = "0x91DD34")]
			internal bool <GetAllLanguagesCode>b__0(string x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string mCurrentLanguage;

		[Token(Token = "0x4001E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string mLanguageCode;

		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool mChangeCultureInfo;

		[Token(Token = "0x4001E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public static bool IsRight2Left;

		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static List<LanguageSource> Sources;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] GlobalSources;

		[Token(Token = "0x4001E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static List<ILocalizationParamsManager> ParamManagers;

		[Token(Token = "0x4001E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static bool mLocalizeIsScheduled;

		[Token(Token = "0x4001E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private static bool mLocalizeIsScheduledWithForcedValue;

		[Token(Token = "0x4001E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string[] LanguagesRTL;

		[Token(Token = "0x17000349")]
		public static string CurrentLanguage
		{
			[Token(Token = "0x6002174")]
			[Address(RVA = "0x914DD8", Offset = "0x914DD8", VA = "0x914DD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002175")]
			[Address(RVA = "0x9183F4", Offset = "0x9183F4", VA = "0x9183F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700034A")]
		public static string CurrentLanguageCode
		{
			[Token(Token = "0x6002176")]
			[Address(RVA = "0x918ADC", Offset = "0x918ADC", VA = "0x918ADC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002177")]
			[Address(RVA = "0x918B48", Offset = "0x918B48", VA = "0x918B48")]
			set
			{
			}
		}

		[Token(Token = "0x1700034B")]
		public static string CurrentRegion
		{
			[Token(Token = "0x6002178")]
			[Address(RVA = "0x918E30", Offset = "0x918E30", VA = "0x918E30")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002179")]
			[Address(RVA = "0x918F8C", Offset = "0x918F8C", VA = "0x918F8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700034C")]
		public static string CurrentRegionCode
		{
			[Token(Token = "0x600217A")]
			[Address(RVA = "0x919124", Offset = "0x919124", VA = "0x919124")]
			get
			{
				return null;
			}
			[Token(Token = "0x600217B")]
			[Address(RVA = "0x9191F0", Offset = "0x9191F0", VA = "0x9191F0")]
			set
			{
			}
		}

		[Token(Token = "0x14000014")]
		public static event OnLocalizeCallback OnLocalizeEvent
		{
			[Token(Token = "0x6002182")]
			[Address(RVA = "0x919C84", Offset = "0x919C84", VA = "0x919C84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A160", Offset = "0x75A160")]
			add
			{
			}
			[Token(Token = "0x6002183")]
			[Address(RVA = "0x919D74", Offset = "0x919D74", VA = "0x919D74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A170", Offset = "0x75A170")]
			remove
			{
			}
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0x91831C", Offset = "0x91831C", VA = "0x91831C")]
		private static void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x600217D")]
		[Address(RVA = "0x918924", Offset = "0x918924", VA = "0x918924")]
		public static void SetLanguageAndCode(string LanguageName, string LanguageCode, bool RememberLanguage = true, bool Force = false)
		{
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0x91997C", Offset = "0x91997C", VA = "0x91997C")]
		private static CultureInfo GetCulture(string code)
		{
			return null;
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0x90D6F0", Offset = "0x90D6F0", VA = "0x90D6F0")]
		public static void EnableChangingCultureInfo(bool bEnable)
		{
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0x919808", Offset = "0x919808", VA = "0x919808")]
		private static void SetCurrentCultureInfo()
		{
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0x919388", Offset = "0x919388", VA = "0x919388")]
		private static void SelectStartupLanguage()
		{
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0x90D878", Offset = "0x90D878", VA = "0x90D878")]
		public static string GetTermTranslation(string Term)
		{
			return null;
		}

		[Token(Token = "0x6002185")]
		[Address(RVA = "0x919F18", Offset = "0x919F18", VA = "0x919F18")]
		public static string GetTermTranslation(string Term, bool FixForRTL)
		{
			return null;
		}

		[Token(Token = "0x6002186")]
		[Address(RVA = "0x919F9C", Offset = "0x919F9C", VA = "0x919F9C")]
		public static string GetTermTranslation(string Term, bool FixForRTL, int maxLineLengthForRTL)
		{
			return null;
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0x91A024", Offset = "0x91A024", VA = "0x91A024")]
		public static string GetTermTranslation(string Term, bool FixForRTL, int maxLineLengthForRTL, bool ignoreRTLnumbers)
		{
			return null;
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0x919E64", Offset = "0x919E64", VA = "0x919E64")]
		public static string GetTermTranslation(string Term, bool FixForRTL, int maxLineLengthForRTL, bool ignoreRTLnumbers, bool applyParameters, GameObject localParametersRoot)
		{
			return null;
		}

		[Token(Token = "0x6002189")]
		[Address(RVA = "0x91A2A8", Offset = "0x91A2A8", VA = "0x91A2A8")]
		public static bool TryGetTermTranslation(string Term, out string Translation)
		{
			return default(bool);
		}

		[Token(Token = "0x600218A")]
		[Address(RVA = "0x91A330", Offset = "0x91A330", VA = "0x91A330")]
		public static bool TryGetTermTranslation(string Term, out string Translation, bool FixForRTL)
		{
			return default(bool);
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0x91A0B8", Offset = "0x91A0B8", VA = "0x91A0B8")]
		public static bool TryGetTermTranslation(string Term, out string Translation, bool FixForRTL, int maxLineLengthForRTL, bool ignoreRTLnumbers, bool applyParameters, GameObject localParametersRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x600218C")]
		[Address(RVA = "0x91AB64", Offset = "0x91AB64", VA = "0x91AB64")]
		public static string GetAppName(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0x91ADB4", Offset = "0x91ADB4", VA = "0x91ADB4")]
		private static bool FindNextTag(string line, int iStart, out int tagStart, out int tagEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0x91AF60", Offset = "0x91AF60", VA = "0x91AF60")]
		public static string ApplyRTLfix(string line)
		{
			return null;
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0x91A570", Offset = "0x91A570", VA = "0x91A570")]
		public static string ApplyRTLfix(string line, int maxCharacters, bool ignoreNumbers)
		{
			return null;
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0x91AFCC", Offset = "0x91AFCC", VA = "0x91AFCC")]
		public static string ApplyRTLfix1(string line, int maxCharacters, bool ignoreNumbers)
		{
			return null;
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0x91B3D4", Offset = "0x91B3D4", VA = "0x91B3D4")]
		private static string ReverseText(string source)
		{
			return null;
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0x91B3D8", Offset = "0x91B3D8", VA = "0x91B3D8")]
		public static string FixRTL_IfNeeded(string text, int maxCharacters = 0, bool ignoreNumber = false)
		{
			return null;
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0x9181C0", Offset = "0x9181C0", VA = "0x9181C0")]
		public static void LocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x6002194")]
		[Address(RVA = "0x91B610", Offset = "0x91B610", VA = "0x91B610")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A180", Offset = "0x75A180")]
		private static IEnumerator Coroutine_LocalizeAll()
		{
			return null;
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0x91B48C", Offset = "0x91B48C", VA = "0x91B48C")]
		private static void DoLocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0x91A3BC", Offset = "0x91A3BC", VA = "0x91A3BC")]
		internal static void ApplyLocalizationParams(ref string translation, GameObject root)
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0x91BF84", Offset = "0x91BF84", VA = "0x91BF84")]
		internal static string GetLocalizationParam(string ParamName, GameObject root)
		{
			return null;
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0x9192FC", Offset = "0x9192FC", VA = "0x9192FC")]
		public static bool UpdateSources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002199")]
		[Address(RVA = "0x91C210", Offset = "0x91C210", VA = "0x91C210")]
		private static void UnregisterDeletededSources()
		{
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0x91C558", Offset = "0x91C558", VA = "0x91C558")]
		private static void RegisterSceneSources()
		{
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0x91C380", Offset = "0x91C380", VA = "0x91C380")]
		private static void RegisterSourceInResources()
		{
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0x915FA0", Offset = "0x915FA0", VA = "0x915FA0")]
		internal static void AddSource(LanguageSource Source)
		{
		}

		[Token(Token = "0x600219D")]
		[Address(RVA = "0x91C760", Offset = "0x91C760", VA = "0x91C760")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A1E4", Offset = "0x75A1E4")]
		private static IEnumerator Delayed_Import_Google(LanguageSource source, float delay)
		{
			return null;
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0x91C6DC", Offset = "0x91C6DC", VA = "0x91C6DC")]
		internal static void RemoveSource(LanguageSource Source)
		{
		}

		[Token(Token = "0x600219F")]
		[Address(RVA = "0x91C810", Offset = "0x91C810", VA = "0x91C810")]
		public static bool IsGlobalSource(string SourceName)
		{
			return default(bool);
		}

		[Token(Token = "0x60021A0")]
		[Address(RVA = "0x919A7C", Offset = "0x919A7C", VA = "0x919A7C")]
		public static bool HasLanguage(string Language, bool AllowDiscartingRegion = true, bool Initialize = true, bool SkipDisabled = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60021A1")]
		[Address(RVA = "0x9184E0", Offset = "0x9184E0", VA = "0x9184E0")]
		public static string GetSupportedLanguage(string Language)
		{
			return null;
		}

		[Token(Token = "0x60021A2")]
		[Address(RVA = "0x91873C", Offset = "0x91873C", VA = "0x91873C")]
		public static string GetLanguageCode(string Language)
		{
			return null;
		}

		[Token(Token = "0x60021A3")]
		[Address(RVA = "0x918C3C", Offset = "0x918C3C", VA = "0x918C3C")]
		public static string GetLanguageFromCode(string Code, bool exactMatch = true)
		{
			return null;
		}

		[Token(Token = "0x60021A4")]
		[Address(RVA = "0x91C898", Offset = "0x91C898", VA = "0x91C898")]
		public static List<string> GetAllLanguages(bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x60021A5")]
		[Address(RVA = "0x91CAC4", Offset = "0x91CAC4", VA = "0x91CAC4")]
		public static List<string> GetAllLanguagesCode(bool allowRegions = true, bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x60021A6")]
		[Address(RVA = "0x91CCCC", Offset = "0x91CCCC", VA = "0x91CCCC")]
		public static bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x60021A7")]
		[Address(RVA = "0x91CDD8", Offset = "0x91CDD8", VA = "0x91CDD8")]
		public static List<string> GetCategories()
		{
			return null;
		}

		[Token(Token = "0x60021A8")]
		[Address(RVA = "0x91CEFC", Offset = "0x91CEFC", VA = "0x91CEFC")]
		public static List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x60021A9")]
		[Address(RVA = "0x91D144", Offset = "0x91D144", VA = "0x91D144")]
		public static TermData GetTermData(string term)
		{
			return null;
		}

		[Token(Token = "0x60021AA")]
		[Address(RVA = "0x91D254", Offset = "0x91D254", VA = "0x91D254")]
		public static LanguageSource GetSourceContaining(string term, bool fallbackToFirst = true)
		{
			return null;
		}

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0x91D444", Offset = "0x91D444", VA = "0x91D444")]
		public static UnityEngine.Object FindAsset(string value)
		{
			return null;
		}

		[Token(Token = "0x60021AC")]
		[Address(RVA = "0x91D584", Offset = "0x91D584", VA = "0x91D584")]
		public static string GetVersion()
		{
			return null;
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0x9159EC", Offset = "0x9159EC", VA = "0x9159EC")]
		public static int GetRequiredWebServiceVersion()
		{
			return default(int);
		}

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0x910838", Offset = "0x910838", VA = "0x910838")]
		public static string GetWebServiceURL([Optional] LanguageSource source)
		{
			return null;
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0x9198F4", Offset = "0x9198F4", VA = "0x9198F4")]
		public static bool IsRTL(string Code)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000428")]
	public class TermsPopup : PropertyAttribute
	{
		[Token(Token = "0x60021B1")]
		[Address(RVA = "0x7D3B80", Offset = "0x7D3B80", VA = "0x7D3B80")]
		public TermsPopup()
		{
		}
	}
	[Token(Token = "0x2000429")]
	public class LocalizationReader
	{
		[Token(Token = "0x60021B2")]
		[Address(RVA = "0x91E3FC", Offset = "0x91E3FC", VA = "0x91E3FC")]
		public static Dictionary<string, string> ReadTextAsset(TextAsset asset)
		{
			return null;
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0x91E650", Offset = "0x91E650", VA = "0x91E650")]
		public static bool TextAsset_ReadLine(string line, out string key, out string value, out string category, out string comment, out string termType)
		{
			return default(bool);
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0x91E9FC", Offset = "0x91E9FC", VA = "0x91E9FC")]
		public static string ReadCSVfile(string Path, Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0x913520", Offset = "0x913520", VA = "0x913520")]
		public static List<string[]> ReadCSV(string Text, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0x91EB98", Offset = "0x91EB98", VA = "0x91EB98")]
		private static string[] ParseCSVline(string Line, ref int iStart, char Separator)
		{
			return null;
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x91ED80", Offset = "0x91ED80", VA = "0x91ED80")]
		private static void AddCSVtoken(ref List<string> list, ref string Line, int iEnd, ref int iWordStart)
		{
		}

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0x9140B4", Offset = "0x9140B4", VA = "0x9140B4")]
		public static List<string[]> ReadI2CSV(string Text)
		{
			return null;
		}

		[Token(Token = "0x60021B9")]
		[Address(RVA = "0x91E960", Offset = "0x91E960", VA = "0x91E960")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x60021BA")]
		[Address(RVA = "0x91EEA8", Offset = "0x91EEA8", VA = "0x91EEA8")]
		public static string EncodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x60021BB")]
		[Address(RVA = "0x91E8C4", Offset = "0x91E8C4", VA = "0x91E8C4")]
		public static string DecodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x60021BC")]
		[Address(RVA = "0x91EF7C", Offset = "0x91EF7C", VA = "0x91EF7C")]
		public LocalizationReader()
		{
		}
	}
	[Token(Token = "0x200042A")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74AB80", Offset = "0x74AB80")]
	public class Localize : MonoBehaviour
	{
		[Token(Token = "0x200065D")]
		public enum TermModification
		{
			[Token(Token = "0x400227C")]
			DontModify,
			[Token(Token = "0x400227D")]
			ToUpper,
			[Token(Token = "0x400227E")]
			ToLower,
			[Token(Token = "0x400227F")]
			ToUpperFirst,
			[Token(Token = "0x4002280")]
			ToTitle
		}

		[Token(Token = "0x200065E")]
		public delegate void DelegateSetFinalTerms(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII);

		[Token(Token = "0x200065F")]
		public delegate void DelegateDoLocalize(string primaryTerm, string secondaryTerm);

		[Token(Token = "0x4001E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mTerm;

		[Token(Token = "0x4001E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mTermSecondary;

		[NonSerialized]
		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string FinalTerm;

		[NonSerialized]
		[Token(Token = "0x4001E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string FinalSecondaryTerm;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TermModification PrimaryTermModifier;

		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TermModification SecondaryTermModifier;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string TermPrefix;

		[Token(Token = "0x4001E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string TermSuffix;

		[Token(Token = "0x4001E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool LocalizeOnAwake;

		[Token(Token = "0x4001E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string LastLocalizedLanguage;

		[Token(Token = "0x4001E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.Object mTarget;

		[Token(Token = "0x4001E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public DelegateSetFinalTerms EventSetFinalTerms;

		[Token(Token = "0x4001E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public DelegateDoLocalize EventDoLocalize;

		[Token(Token = "0x4001E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool CanUseSecondaryTerm;

		[Token(Token = "0x4001E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool AllowMainTermToBeRTL;

		[Token(Token = "0x4001E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		public bool AllowSecondTermToBeRTL;

		[Token(Token = "0x4001E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		public bool IgnoreRTL;

		[Token(Token = "0x4001E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int MaxCharactersInRTL;

		[Token(Token = "0x4001E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool IgnoreNumbersInRTL;

		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool CorrectAlignmentForRTL;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEngine.Object[] TranslatedObjects;

		[Token(Token = "0x4001E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public EventCallback LocalizeCallBack;

		[Token(Token = "0x4001E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string MainTranslation;

		[Token(Token = "0x4001E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string SecondaryTranslation;

		[Token(Token = "0x4001E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string CallBackTerm;

		[Token(Token = "0x4001E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string CallBackSecondaryTerm;

		[Token(Token = "0x4001E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Localize CurrentLocalizeComponent;

		[Token(Token = "0x4001E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool AlwaysForceLocalize;

		[Token(Token = "0x4001E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool mGUI_ShowReferences;

		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		public bool mGUI_ShowTems;

		[Token(Token = "0x4001E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		public bool mGUI_ShowCallback;

		[Token(Token = "0x4001E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Text mTarget_uGUI_Text;

		[Token(Token = "0x4001E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Image mTarget_uGUI_Image;

		[Token(Token = "0x4001E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private RawImage mTarget_uGUI_RawImage;

		[Token(Token = "0x4001E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private TextAnchor mAlignmentUGUI_RTL;

		[Token(Token = "0x4001E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private TextAnchor mAlignmentUGUI_LTR;

		[Token(Token = "0x4001E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool mAlignmentUGUIwasRTL;

		[Token(Token = "0x4001E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private GUIText mTarget_GUIText;

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private TextMesh mTarget_TextMesh;

		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioSource mTarget_AudioSource;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GUITexture mTarget_GUITexture;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private GameObject mTarget_Child;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private SpriteRenderer mTarget_SpriteRenderer;

		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool mInitializeAlignment;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private TextAlignment mAlignmentStd_LTR;

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private TextAlignment mAlignmentStd_RTL;

		[Token(Token = "0x1700034D")]
		public string Term
		{
			[Token(Token = "0x60021BD")]
			[Address(RVA = "0x91EF84", Offset = "0x91EF84", VA = "0x91EF84")]
			get
			{
				return null;
			}
			[Token(Token = "0x60021BE")]
			[Address(RVA = "0x91EF8C", Offset = "0x91EF8C", VA = "0x91EF8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700034E")]
		public string SecondaryTerm
		{
			[Token(Token = "0x60021BF")]
			[Address(RVA = "0x91EFD0", Offset = "0x91EFD0", VA = "0x91EFD0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60021C0")]
			[Address(RVA = "0x91EFD8", Offset = "0x91EFD8", VA = "0x91EFD8")]
			set
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event Action EventFindTarget
		{
			[Token(Token = "0x60021C1")]
			[Address(RVA = "0x91F03C", Offset = "0x91F03C", VA = "0x91F03C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A248", Offset = "0x75A248")]
			add
			{
			}
			[Token(Token = "0x60021C2")]
			[Address(RVA = "0x91F0E0", Offset = "0x91F0E0", VA = "0x91F0E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x75A258", Offset = "0x75A258")]
			remove
			{
			}
		}

		[Token(Token = "0x60021C3")]
		[Address(RVA = "0x91F184", Offset = "0x91F184", VA = "0x91F184")]
		private void Awake()
		{
		}

		[Token(Token = "0x60021C4")]
		[Address(RVA = "0x91F1DC", Offset = "0x91F1DC", VA = "0x91F1DC")]
		private void RegisterTargets()
		{
		}

		[Token(Token = "0x60021C5")]
		[Address(RVA = "0x91F484", Offset = "0x91F484", VA = "0x91F484")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60021C6")]
		[Address(RVA = "0x91B69C", Offset = "0x91B69C", VA = "0x91B69C")]
		public void OnLocalize(bool Force = false)
		{
		}

		[Token(Token = "0x60021C7")]
		[Address(RVA = "0x91F48C", Offset = "0x91F48C", VA = "0x91F48C")]
		public bool FindTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x60021C8")]
		public void FindAndCacheTarget<T>(ref T targetCache, DelegateSetFinalTerms setFinalTerms, DelegateDoLocalize doLocalize, bool UseSecondaryTerm, bool MainRTL, bool SecondRTL) where T : Component
		{
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0x91F67C", Offset = "0x91F67C", VA = "0x91F67C")]
		private void FindAndCacheTarget(ref GameObject targetCache, DelegateSetFinalTerms setFinalTerms, DelegateDoLocalize doLocalize, bool UseSecondaryTerm, bool MainRTL, bool SecondRTL)
		{
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0x91F218", Offset = "0x91F218", VA = "0x91F218")]
		private bool HasTargetCache()
		{
			return default(bool);
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0x91F4E8", Offset = "0x91F4E8", VA = "0x91F4E8")]
		public void GetFinalTerms(out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60021CC")]
		[Address(RVA = "0x91F88C", Offset = "0x91F88C", VA = "0x91F88C")]
		public string GetMainTargetsText(bool RemoveNonASCII)
		{
			return null;
		}

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0x91F8F8", Offset = "0x91F8F8", VA = "0x91F8F8")]
		private void SetFinalTerms(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021CE")]
		[Address(RVA = "0x91EF90", Offset = "0x91EF90", VA = "0x91EF90")]
		public void SetTerm(string primary)
		{
		}

		[Token(Token = "0x60021CF")]
		[Address(RVA = "0x91EFE8", Offset = "0x91EFE8", VA = "0x91EFE8")]
		public void SetTerm(string primary, string secondary)
		{
		}

		[Token(Token = "0x60021D0")]
		private T GetSecondaryTranslatedObj<T>(ref string mainTranslation, ref string secondaryTranslation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60021D1")]
		private T GetObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60021D2")]
		private T GetTranslatedObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60021D3")]
		[Address(RVA = "0x91F9BC", Offset = "0x91F9BC", VA = "0x91F9BC")]
		private void DeserializeTranslation(string translation, out string value, out string secondary)
		{
		}

		[Token(Token = "0x60021D4")]
		public T FindTranslatedObject<T>(string value) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60021D5")]
		[Address(RVA = "0x91FAB4", Offset = "0x91FAB4", VA = "0x91FAB4")]
		public bool HasTranslatedObject(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60021D6")]
		[Address(RVA = "0x91FB48", Offset = "0x91FB48", VA = "0x91FB48")]
		public void AddTranslatedObject(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0x91FC10", Offset = "0x91FC10", VA = "0x91FC10")]
		public void SetGlobalLanguage(string Language)
		{
		}

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0x91F30C", Offset = "0x91F30C", VA = "0x91F30C")]
		public static void RegisterEvents_2DToolKit()
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0x91F22C", Offset = "0x91F22C", VA = "0x91F22C")]
		public static void RegisterEvents_DFGUI()
		{
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0x91F228", Offset = "0x91F228", VA = "0x91F228")]
		public static void RegisterEvents_NGUI()
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0x91F480", Offset = "0x91F480", VA = "0x91F480")]
		public static void RegisterEvents_SVG()
		{
		}

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0x91F310", Offset = "0x91F310", VA = "0x91F310")]
		public static void RegisterEvents_TextMeshPro()
		{
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0x91F230", Offset = "0x91F230", VA = "0x91F230")]
		public void RegisterEvents_UGUI()
		{
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0x91FC74", Offset = "0x91FC74", VA = "0x91FC74")]
		private void FindTarget_uGUI_Text()
		{
		}

		[Token(Token = "0x60021DF")]
		[Address(RVA = "0x91FD40", Offset = "0x91FD40", VA = "0x91FD40")]
		private void FindTarget_uGUI_Image()
		{
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0x91FE0C", Offset = "0x91FE0C", VA = "0x91FE0C")]
		private void FindTarget_uGUI_RawImage()
		{
		}

		[Token(Token = "0x60021E1")]
		[Address(RVA = "0x91FED8", Offset = "0x91FED8", VA = "0x91FED8")]
		private void SetFinalTerms_uGUI_Text(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0x91FFE8", Offset = "0x91FFE8", VA = "0x91FFE8")]
		public void SetFinalTerms_uGUI_Image(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021E3")]
		[Address(RVA = "0x9200F0", Offset = "0x9200F0", VA = "0x9200F0")]
		public void SetFinalTerms_uGUI_RawImage(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021E4")]
		public static T FindInParents<T>(Transform tr) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60021E5")]
		[Address(RVA = "0x9201DC", Offset = "0x9201DC", VA = "0x9201DC")]
		public void DoLocalize_uGUI_Text(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021E6")]
		[Address(RVA = "0x920524", Offset = "0x920524", VA = "0x920524")]
		private void InitAlignment_UGUI(bool isRTL, TextAnchor alignment, out TextAnchor alignLTR, out TextAnchor alignRTL)
		{
		}

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0x9205E4", Offset = "0x9205E4", VA = "0x9205E4")]
		public void DoLocalize_uGUI_Image(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021E8")]
		[Address(RVA = "0x9206D4", Offset = "0x9206D4", VA = "0x9206D4")]
		public void DoLocalize_uGUI_RawImage(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0x91F314", Offset = "0x91F314", VA = "0x91F314")]
		public void RegisterEvents_UnityStandard()
		{
		}

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0x9207C4", Offset = "0x9207C4", VA = "0x9207C4")]
		private void FindTarget_GUIText()
		{
		}

		[Token(Token = "0x60021EB")]
		[Address(RVA = "0x920890", Offset = "0x920890", VA = "0x920890")]
		private void FindTarget_TextMesh()
		{
		}

		[Token(Token = "0x60021EC")]
		[Address(RVA = "0x92095C", Offset = "0x92095C", VA = "0x92095C")]
		private void FindTarget_AudioSource()
		{
		}

		[Token(Token = "0x60021ED")]
		[Address(RVA = "0x920A28", Offset = "0x920A28", VA = "0x920A28")]
		private void FindTarget_GUITexture()
		{
		}

		[Token(Token = "0x60021EE")]
		[Address(RVA = "0x920AF4", Offset = "0x920AF4", VA = "0x920AF4")]
		private void FindTarget_Child()
		{
		}

		[Token(Token = "0x60021EF")]
		[Address(RVA = "0x920BB4", Offset = "0x920BB4", VA = "0x920BB4")]
		private void FindTarget_SpriteRenderer()
		{
		}

		[Token(Token = "0x60021F0")]
		[Address(RVA = "0x920C80", Offset = "0x920C80", VA = "0x920C80")]
		public void SetFinalTerms_GUIText(string Main, string Secondary, out string PrimaryTerm, out string secondaryTranslation, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021F1")]
		[Address(RVA = "0x920D84", Offset = "0x920D84", VA = "0x920D84")]
		public void SetFinalTerms_TextMesh(string Main, string Secondary, out string PrimaryTerm, out string secondaryTranslation, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021F2")]
		[Address(RVA = "0x920E8C", Offset = "0x920E8C", VA = "0x920E8C")]
		public void SetFinalTerms_GUITexture(string Main, string Secondary, out string PrimaryTerm, out string secondaryTranslation, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021F3")]
		[Address(RVA = "0x920FFC", Offset = "0x920FFC", VA = "0x920FFC")]
		public void SetFinalTerms_AudioSource(string Main, string Secondary, out string PrimaryTerm, out string secondaryTranslation, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021F4")]
		[Address(RVA = "0x92116C", Offset = "0x92116C", VA = "0x92116C")]
		public void SetFinalTerms_Child(string Main, string Secondary, out string PrimaryTerm, out string secondaryTranslation, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021F5")]
		[Address(RVA = "0x92121C", Offset = "0x92121C", VA = "0x92121C")]
		public void SetFinalTerms_SpriteRenderer(string Main, string Secondary, out string PrimaryTerm, out string secondaryTranslation, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0x921340", Offset = "0x921340", VA = "0x921340")]
		private void DoLocalize_GUIText(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0x9215B0", Offset = "0x9215B0", VA = "0x9215B0")]
		private void DoLocalize_TextMesh(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0x92185C", Offset = "0x92185C", VA = "0x92185C")]
		private void DoLocalize_AudioSource(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0x9219B4", Offset = "0x9219B4", VA = "0x9219B4")]
		private void DoLocalize_GUITexture(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0x921AB4", Offset = "0x921AB4", VA = "0x921AB4")]
		private void DoLocalize_Child(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021FB")]
		[Address(RVA = "0x921CEC", Offset = "0x921CEC", VA = "0x921CEC")]
		private void DoLocalize_SpriteRenderer(string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0x921DEC", Offset = "0x921DEC", VA = "0x921DEC")]
		public Localize()
		{
		}
	}
	[Token(Token = "0x200042B")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74ABB8", Offset = "0x74ABB8")]
	public class LocalizeDropdown : MonoBehaviour
	{
		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> _Terms;

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0x7CBF58", Offset = "0x7CBF58", VA = "0x7CBF58")]
		public void Start()
		{
		}

		[Token(Token = "0x60021FE")]
		[Address(RVA = "0x7CC0F0", Offset = "0x7CC0F0", VA = "0x7CC0F0")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60021FF")]
		[Address(RVA = "0x7CC184", Offset = "0x7CC184", VA = "0x7CC184")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002200")]
		[Address(RVA = "0x7CBFF4", Offset = "0x7CBFF4", VA = "0x7CBFF4")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0x7CC188", Offset = "0x7CC188", VA = "0x7CC188")]
		public void UpdateLocalization()
		{
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0x7CC3A8", Offset = "0x7CC3A8", VA = "0x7CC3A8")]
		public LocalizeDropdown()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public class AutoChangeCultureInfo : MonoBehaviour
	{
		[Token(Token = "0x6002203")]
		[Address(RVA = "0x90D690", Offset = "0x90D690", VA = "0x90D690")]
		public void Start()
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0x90D7A4", Offset = "0x90D7A4", VA = "0x90D7A4")]
		public AutoChangeCultureInfo()
		{
		}
	}
	[Token(Token = "0x200042D")]
	public interface ILocalizationParamsManager
	{
		[Token(Token = "0x6002205")]
		string GetParameterValue(string Param);
	}
	[Token(Token = "0x200042E")]
	public class LocalizationParamsManager : MonoBehaviour, ILocalizationParamsManager
	{
		[Serializable]
		[Token(Token = "0x2000660")]
		public struct ParamValue
		{
			[Token(Token = "0x4002281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Name;

			[Token(Token = "0x4002282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string Value;
		}

		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<ParamValue> _Params;

		[Token(Token = "0x6002206")]
		[Address(RVA = "0x91E088", Offset = "0x91E088", VA = "0x91E088", Slot = "4")]
		public string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6002207")]
		[Address(RVA = "0x91E178", Offset = "0x91E178", VA = "0x91E178")]
		public void SetParameterValue(string ParamName, string ParamValue, bool localize = true)
		{
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0x91E2DC", Offset = "0x91E2DC", VA = "0x91E2DC")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0x91E38C", Offset = "0x91E38C", VA = "0x91E38C")]
		public LocalizationParamsManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200042F")]
	public struct LocalizedString
	{
		[Token(Token = "0x4001E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string mTerm;

		[Token(Token = "0x4001E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool mRTL_IgnoreArabicFix;

		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int mRTL_MaxLineLength;

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mRTL_ConvertNumbers;

		[Token(Token = "0x600220A")]
		[Address(RVA = "0x7CC418", Offset = "0x7CC418", VA = "0x7CC418")]
		public static implicit operator string(LocalizedString s)
		{
			return null;
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0x7CC4D8", Offset = "0x7CC4D8", VA = "0x7CC4D8")]
		public static implicit operator LocalizedString(string term)
		{
			return default(LocalizedString);
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x63BFF0", Offset = "0x63BFF0", VA = "0x63BFF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000430")]
	public class RegisterGlobalParameters : MonoBehaviour, ILocalizationParamsManager
	{
		[Token(Token = "0x600220D")]
		[Address(RVA = "0x7CCEB4", Offset = "0x7CCEB4", VA = "0x7CCEB4", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0x7CCF90", Offset = "0x7CCF90", VA = "0x7CCF90", Slot = "6")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x600220F")]
		[Address(RVA = "0x7CD014", Offset = "0x7CD014", VA = "0x7CD014", Slot = "7")]
		public virtual string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0x7CD01C", Offset = "0x7CD01C", VA = "0x7CD01C")]
		public RegisterGlobalParameters()
		{
		}
	}
	[Token(Token = "0x2000431")]
	public interface IResourceManager_Bundles
	{
		[Token(Token = "0x6002211")]
		T LoadFromBundle<T>(string path) where T : UnityEngine.Object;
	}
	[Token(Token = "0x2000432")]
	public class ResourceManager : MonoBehaviour
	{
		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ResourceManager mInstance;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<IResourceManager_Bundles> mBundleManagers;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object[] Assets;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<string, UnityEngine.Object> mResourcesCache;

		[Token(Token = "0x1700034F")]
		public static ResourceManager pInstance
		{
			[Token(Token = "0x6002212")]
			[Address(RVA = "0x7CCB0C", Offset = "0x7CCB0C", VA = "0x7CCB0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0x7CD024", Offset = "0x7CD024", VA = "0x7CD024")]
		public static void MyOnLevelWasLoaded(UnityEngine.SceneManagement.Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6002214")]
		public T GetAsset<T>(string Name) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0x7CD100", Offset = "0x7CD100", VA = "0x7CD100")]
		private UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6002216")]
		[Address(RVA = "0x7CD24C", Offset = "0x7CD24C", VA = "0x7CD24C")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002217")]
		public T LoadFromResources<T>(string Path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002218")]
		public T LoadFromBundle<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002219")]
		[Address(RVA = "0x7CD094", Offset = "0x7CD094", VA = "0x7CD094")]
		public void CleanResourceCache()
		{
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0x7CD2BC", Offset = "0x7CD2BC", VA = "0x7CD2BC")]
		public ResourceManager()
		{
		}
	}
	[Token(Token = "0x2000433")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74ABF0", Offset = "0x74ABF0")]
	public class SetLanguage : MonoBehaviour
	{
		[Token(Token = "0x4001E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string _Language;

		[Token(Token = "0x600221B")]
		[Address(RVA = "0x7CD5D8", Offset = "0x7CD5D8", VA = "0x7CD5D8")]
		private void OnClick()
		{
		}

		[Token(Token = "0x600221C")]
		[Address(RVA = "0x7CD5DC", Offset = "0x7CD5DC", VA = "0x7CD5DC")]
		public void ApplyLanguage()
		{
		}

		[Token(Token = "0x600221D")]
		[Address(RVA = "0x7CD698", Offset = "0x7CD698", VA = "0x7CD698")]
		public SetLanguage()
		{
		}
	}
	[Token(Token = "0x2000434")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x74AC28", Offset = "0x74AC28")]
	public class SetLanguageDropdown : MonoBehaviour
	{
		[Token(Token = "0x600221E")]
		[Address(RVA = "0x7CD6A0", Offset = "0x7CD6A0", VA = "0x7CD6A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600221F")]
		[Address(RVA = "0x7CD8D0", Offset = "0x7CD8D0", VA = "0x7CD8D0")]
		private void OnValueChanged(int index)
		{
		}

		[Token(Token = "0x6002220")]
		[Address(RVA = "0x7CD9C4", Offset = "0x7CD9C4", VA = "0x7CD9C4")]
		public SetLanguageDropdown()
		{
		}
	}
	[Token(Token = "0x2000435")]
	public static class ScriptLocalization
	{
		[Token(Token = "0x6002221")]
		[Address(RVA = "0x7CD3C8", Offset = "0x7CD3C8", VA = "0x7CD3C8")]
		public static string Get(string Term)
		{
			return null;
		}

		[Token(Token = "0x6002222")]
		[Address(RVA = "0x7CD444", Offset = "0x7CD444", VA = "0x7CD444")]
		public static string Get(string Term, bool FixForRTL)
		{
			return null;
		}

		[Token(Token = "0x6002223")]
		[Address(RVA = "0x7CD4C4", Offset = "0x7CD4C4", VA = "0x7CD4C4")]
		public static string Get(string Term, bool FixForRTL, int maxLineLengthForRTL)
		{
			return null;
		}

		[Token(Token = "0x6002224")]
		[Address(RVA = "0x7CD548", Offset = "0x7CD548", VA = "0x7CD548")]
		public static string Get(string Term, bool FixForRTL, int maxLineLengthForRTL, bool ignoreNumbers)
		{
			return null;
		}
	}
}
namespace I2.Loc.SimpleJSON
{
	[Token(Token = "0x2000436")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x4001E96")]
		Array = 1,
		[Token(Token = "0x4001E97")]
		Class,
		[Token(Token = "0x4001E98")]
		Value,
		[Token(Token = "0x4001E99")]
		IntValue,
		[Token(Token = "0x4001E9A")]
		DoubleValue,
		[Token(Token = "0x4001E9B")]
		BoolValue,
		[Token(Token = "0x4001E9C")]
		FloatValue
	}
	[Token(Token = "0x2000437")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x74AC60", Offset = "0x74AC60")]
	public class JSONNode
	{
		[Token(Token = "0x2000661")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C92C", Offset = "0x74C92C")]
		private sealed class <get_Childs>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x170003FE")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002A46")]
				[Address(RVA = "0x7D2EA8", Offset = "0x7D2EA8", VA = "0x7D2EA8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A48")]
				[Address(RVA = "0x7D2F14", Offset = "0x7D2F14", VA = "0x7D2F14", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A43")]
			[Address(RVA = "0x7D1B38", Offset = "0x7D1B38", VA = "0x7D1B38")]
			[DebuggerHidden]
			public <get_Childs>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6002A44")]
			[Address(RVA = "0x7D2E8C", Offset = "0x7D2E8C", VA = "0x7D2E8C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A45")]
			[Address(RVA = "0x7D2E90", Offset = "0x7D2E90", VA = "0x7D2E90", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A47")]
			[Address(RVA = "0x7D2EB0", Offset = "0x7D2EB0", VA = "0x7D2EB0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002A49")]
			[Address(RVA = "0x7D2F1C", Offset = "0x7D2F1C", VA = "0x7D2F1C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002A4A")]
			[Address(RVA = "0x7D2FB4", Offset = "0x7D2FB4", VA = "0x7D2FB4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000662")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C93C", Offset = "0x74C93C")]
		private sealed class <get_DeepChilds>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4002289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x400228A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x400228B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x17000400")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002A50")]
				[Address(RVA = "0x7D35D4", Offset = "0x7D35D4", VA = "0x7D35D4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000401")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A52")]
				[Address(RVA = "0x7D3640", Offset = "0x7D3640", VA = "0x7D3640", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A4B")]
			[Address(RVA = "0x7D1BF4", Offset = "0x7D1BF4", VA = "0x7D1BF4")]
			[DebuggerHidden]
			public <get_DeepChilds>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6002A4C")]
			[Address(RVA = "0x7D2FB8", Offset = "0x7D2FB8", VA = "0x7D2FB8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A4D")]
			[Address(RVA = "0x7D31B0", Offset = "0x7D31B0", VA = "0x7D31B0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A4E")]
			[Address(RVA = "0x7D30F0", Offset = "0x7D30F0", VA = "0x7D30F0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002A4F")]
			[Address(RVA = "0x7D3030", Offset = "0x7D3030", VA = "0x7D3030")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6002A51")]
			[Address(RVA = "0x7D35DC", Offset = "0x7D35DC", VA = "0x7D35DC", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002A53")]
			[Address(RVA = "0x7D3648", Offset = "0x7D3648", VA = "0x7D3648", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002A54")]
			[Address(RVA = "0x7D36F8", Offset = "0x7D36F8", VA = "0x7D36F8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x17000350")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6002226")]
			[Address(RVA = "0x7D19DC", Offset = "0x7D19DC", VA = "0x7D19DC", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002227")]
			[Address(RVA = "0x7D19E4", Offset = "0x7D19E4", VA = "0x7D19E4", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000351")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6002228")]
			[Address(RVA = "0x7D19E8", Offset = "0x7D19E8", VA = "0x7D19E8", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002229")]
			[Address(RVA = "0x7D19F0", Offset = "0x7D19F0", VA = "0x7D19F0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000352")]
		public virtual string Value
		{
			[Token(Token = "0x600222A")]
			[Address(RVA = "0x7D19F4", Offset = "0x7D19F4", VA = "0x7D19F4", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x600222B")]
			[Address(RVA = "0x7D1A3C", Offset = "0x7D1A3C", VA = "0x7D1A3C", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000353")]
		public virtual int Count
		{
			[Token(Token = "0x600222C")]
			[Address(RVA = "0x7D1A40", Offset = "0x7D1A40", VA = "0x7D1A40", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000354")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6002231")]
			[Address(RVA = "0x7D1AC8", Offset = "0x7D1AC8", VA = "0x7D1AC8", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A268", Offset = "0x75A268")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000355")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x6002232")]
			[Address(RVA = "0x7D1B70", Offset = "0x7D1B70", VA = "0x7D1B70")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A2CC", Offset = "0x75A2CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000356")]
		public virtual int AsInt
		{
			[Token(Token = "0x6002235")]
			[Address(RVA = "0x7D1CBC", Offset = "0x7D1CBC", VA = "0x7D1CBC", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002236")]
			[Address(RVA = "0x7D1CFC", Offset = "0x7D1CFC", VA = "0x7D1CFC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000357")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6002237")]
			[Address(RVA = "0x7D1D3C", Offset = "0x7D1D3C", VA = "0x7D1D3C", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002238")]
			[Address(RVA = "0x7D1D80", Offset = "0x7D1D80", VA = "0x7D1D80", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000358")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6002239")]
			[Address(RVA = "0x7D1DC0", Offset = "0x7D1DC0", VA = "0x7D1DC0", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600223A")]
			[Address(RVA = "0x7D1E64", Offset = "0x7D1E64", VA = "0x7D1E64", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x17000359")]
		public virtual bool AsBool
		{
			[Token(Token = "0x600223B")]
			[Address(RVA = "0x7D1EA4", Offset = "0x7D1EA4", VA = "0x7D1EA4", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600223C")]
			[Address(RVA = "0x7D1F6C", Offset = "0x7D1F6C", VA = "0x7D1F6C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700035A")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x600223D")]
			[Address(RVA = "0x7D1FEC", Offset = "0x7D1FEC", VA = "0x7D1FEC", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035B")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x600223E")]
			[Address(RVA = "0x7D206C", Offset = "0x7D206C", VA = "0x7D206C", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002225")]
		[Address(RVA = "0x7D19D8", Offset = "0x7D19D8", VA = "0x7D19D8", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600222D")]
		[Address(RVA = "0x7D1A48", Offset = "0x7D1A48", VA = "0x7D1A48", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x600222E")]
		[Address(RVA = "0x7D1AB0", Offset = "0x7D1AB0", VA = "0x7D1AB0", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x600222F")]
		[Address(RVA = "0x7D1AB8", Offset = "0x7D1AB8", VA = "0x7D1AB8", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6002230")]
		[Address(RVA = "0x7D1AC0", Offset = "0x7D1AC0", VA = "0x7D1AC0", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0x7D1C2C", Offset = "0x7D1C2C", VA = "0x7D1C2C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002234")]
		[Address(RVA = "0x7D1C74", Offset = "0x7D1C74", VA = "0x7D1C74", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x600223F")]
		[Address(RVA = "0x7D20EC", Offset = "0x7D20EC", VA = "0x7D20EC")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0x7D2150", Offset = "0x7D2150", VA = "0x7D2150")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0x7D05B8", Offset = "0x7D05B8", VA = "0x7D05B8")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0x7D21A0", Offset = "0x7D21A0", VA = "0x7D21A0")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0x7D21BC", Offset = "0x7D21BC", VA = "0x7D21BC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0x7D1440", Offset = "0x7D1440", VA = "0x7D1440", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002245")]
		[Address(RVA = "0x7CFD34", Offset = "0x7CFD34", VA = "0x7CFD34")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6002246")]
		[Address(RVA = "0x7CDA40", Offset = "0x7CDA40", VA = "0x7CDA40")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6002247")]
		[Address(RVA = "0x7D21C8", Offset = "0x7D21C8", VA = "0x7D21C8", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002248")]
		[Address(RVA = "0x7D21CC", Offset = "0x7D21CC", VA = "0x7D21CC")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0x7D224C", Offset = "0x7D224C", VA = "0x7D224C")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0x7D22BC", Offset = "0x7D22BC", VA = "0x7D22BC")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0x7D232C", Offset = "0x7D232C", VA = "0x7D232C")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x600224C")]
		[Address(RVA = "0x7D239C", Offset = "0x7D239C", VA = "0x7D239C")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x600224D")]
		[Address(RVA = "0x7D2508", Offset = "0x7D2508", VA = "0x7D2508")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x600224E")]
		[Address(RVA = "0x7D26A4", Offset = "0x7D26A4", VA = "0x7D26A4")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x600224F")]
		[Address(RVA = "0x7D2A38", Offset = "0x7D2A38", VA = "0x7D2A38")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6002250")]
		[Address(RVA = "0x7D2AA8", Offset = "0x7D2AA8", VA = "0x7D2AA8")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6002251")]
		[Address(RVA = "0x7D2B18", Offset = "0x7D2B18", VA = "0x7D2B18")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6002252")]
		[Address(RVA = "0x7D2B88", Offset = "0x7D2B88", VA = "0x7D2B88")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6002253")]
		[Address(RVA = "0x7D2CB8", Offset = "0x7D2CB8", VA = "0x7D2CB8")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0x7D2DD4", Offset = "0x7D2DD4", VA = "0x7D2DD4")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0x7CEB4C", Offset = "0x7CEB4C", VA = "0x7CEB4C")]
		public JSONNode()
		{
		}
	}
	[Token(Token = "0x2000438")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x74AC98", Offset = "0x74AC98")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000663")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C94C", Offset = "0x74C94C")]
		private sealed class <get_Childs>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400228C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400228D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x400228E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400228F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x4002290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000402")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002A59")]
				[Address(RVA = "0x7CEF60", Offset = "0x7CEF60", VA = "0x7CEF60", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000403")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A5B")]
				[Address(RVA = "0x7CEFCC", Offset = "0x7CEFCC", VA = "0x7CEFCC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A55")]
			[Address(RVA = "0x7CE57C", Offset = "0x7CE57C", VA = "0x7CE57C")]
			[DebuggerHidden]
			public <get_Childs>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002A56")]
			[Address(RVA = "0x7CED94", Offset = "0x7CED94", VA = "0x7CED94", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A57")]
			[Address(RVA = "0x7CEE08", Offset = "0x7CEE08", VA = "0x7CEE08", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A58")]
			[Address(RVA = "0x7CEDB0", Offset = "0x7CEDB0", VA = "0x7CEDB0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002A5A")]
			[Address(RVA = "0x7CEF68", Offset = "0x7CEF68", VA = "0x7CEF68", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002A5C")]
			[Address(RVA = "0x7CEFD4", Offset = "0x7CEFD4", VA = "0x7CEFD4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002A5D")]
			[Address(RVA = "0x7CF084", Offset = "0x7CF084", VA = "0x7CF084", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000664")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C95C", Offset = "0x74C95C")]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x4002294")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000404")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A62")]
				[Address(RVA = "0x7CED20", Offset = "0x7CED20", VA = "0x7CED20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000405")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A64")]
				[Address(RVA = "0x7CED8C", Offset = "0x7CED8C", VA = "0x7CED8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A5E")]
			[Address(RVA = "0x7CE628", Offset = "0x7CE628", VA = "0x7CE628")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002A5F")]
			[Address(RVA = "0x7CEB54", Offset = "0x7CEB54", VA = "0x7CEB54", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A60")]
			[Address(RVA = "0x7CEBC8", Offset = "0x7CEBC8", VA = "0x7CEBC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A61")]
			[Address(RVA = "0x7CEB70", Offset = "0x7CEB70", VA = "0x7CEB70")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002A63")]
			[Address(RVA = "0x7CED28", Offset = "0x7CED28", VA = "0x7CED28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x1700035C")]
		public override JSONNode Item
		{
			[Token(Token = "0x6002256")]
			[Address(RVA = "0x7CE0D4", Offset = "0x7CE0D4", VA = "0x7CE0D4", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002257")]
			[Address(RVA = "0x7CE1AC", Offset = "0x7CE1AC", VA = "0x7CE1AC", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700035D")]
		public override JSONNode Item
		{
			[Token(Token = "0x6002258")]
			[Address(RVA = "0x7CE250", Offset = "0x7CE250", VA = "0x7CE250", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002259")]
			[Address(RVA = "0x7CE2B4", Offset = "0x7CE2B4", VA = "0x7CE2B4", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700035E")]
		public override int Count
		{
			[Token(Token = "0x600225A")]
			[Address(RVA = "0x7CE31C", Offset = "0x7CE31C", VA = "0x7CE31C", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035F")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x600225E")]
			[Address(RVA = "0x7CE4F8", Offset = "0x7CE4F8", VA = "0x7CE4F8", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A330", Offset = "0x75A330")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600225B")]
		[Address(RVA = "0x7CE370", Offset = "0x7CE370", VA = "0x7CE370", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600225C")]
		[Address(RVA = "0x7CE3D8", Offset = "0x7CE3D8", VA = "0x7CE3D8", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x600225D")]
		[Address(RVA = "0x7CE488", Offset = "0x7CE488", VA = "0x7CE488", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x600225F")]
		[Address(RVA = "0x7CE5B4", Offset = "0x7CE5B4", VA = "0x7CE5B4", Slot = "29")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A394", Offset = "0x75A394")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002260")]
		[Address(RVA = "0x7CE654", Offset = "0x7CE654", VA = "0x7CE654", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0x7CE7FC", Offset = "0x7CE7FC", VA = "0x7CE7FC", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0x7CE9F8", Offset = "0x7CE9F8", VA = "0x7CE9F8", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002263")]
		[Address(RVA = "0x7CEADC", Offset = "0x7CEADC", VA = "0x7CEADC")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x2000439")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x74ACD0", Offset = "0x74ACD0")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000665")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C96C", Offset = "0x74C96C")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x4002295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public JSONNode aNode;

			[Token(Token = "0x6002A65")]
			[Address(RVA = "0x7CF828", Offset = "0x7CF828", VA = "0x7CF828")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x6002A66")]
			[Address(RVA = "0x7D0564", Offset = "0x7D0564", VA = "0x7D0564")]
			internal bool <Remove>b__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000666")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C97C", Offset = "0x74C97C")]
		private sealed class <get_Childs>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4002299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x400229A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000406")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002A6B")]
				[Address(RVA = "0x7D0A90", Offset = "0x7D0A90", VA = "0x7D0A90", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000407")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A6D")]
				[Address(RVA = "0x7D0AFC", Offset = "0x7D0AFC", VA = "0x7D0AFC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A67")]
			[Address(RVA = "0x7CF8B4", Offset = "0x7CF8B4", VA = "0x7CF8B4")]
			[DebuggerHidden]
			public <get_Childs>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002A68")]
			[Address(RVA = "0x7D08B8", Offset = "0x7D08B8", VA = "0x7D08B8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A69")]
			[Address(RVA = "0x7D092C", Offset = "0x7D092C", VA = "0x7D092C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A6A")]
			[Address(RVA = "0x7D08D4", Offset = "0x7D08D4", VA = "0x7D08D4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002A6C")]
			[Address(RVA = "0x7D0A98", Offset = "0x7D0A98", VA = "0x7D0A98", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002A6E")]
			[Address(RVA = "0x7D0B04", Offset = "0x7D0B04", VA = "0x7D0B04", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002A6F")]
			[Address(RVA = "0x7D0BB4", Offset = "0x7D0BB4", VA = "0x7D0BB4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000667")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74C98C", Offset = "0x74C98C")]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400229B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400229C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400229D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x400229E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000408")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A74")]
				[Address(RVA = "0x7D0844", Offset = "0x7D0844", VA = "0x7D0844", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000409")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A76")]
				[Address(RVA = "0x7D08B0", Offset = "0x7D08B0", VA = "0x7D08B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A70")]
			[Address(RVA = "0x7CF960", Offset = "0x7CF960", VA = "0x7CF960")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002A71")]
			[Address(RVA = "0x7D0650", Offset = "0x7D0650", VA = "0x7D0650", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A72")]
			[Address(RVA = "0x7D06C4", Offset = "0x7D06C4", VA = "0x7D06C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A73")]
			[Address(RVA = "0x7D066C", Offset = "0x7D066C", VA = "0x7D066C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002A75")]
			[Address(RVA = "0x7D084C", Offset = "0x7D084C", VA = "0x7D084C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x17000360")]
		public override JSONNode Item
		{
			[Token(Token = "0x6002264")]
			[Address(RVA = "0x7CF088", Offset = "0x7CF088", VA = "0x7CF088", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002265")]
			[Address(RVA = "0x7CF17C", Offset = "0x7CF17C", VA = "0x7CF17C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000361")]
		public override JSONNode Item
		{
			[Token(Token = "0x6002266")]
			[Address(RVA = "0x7CF240", Offset = "0x7CF240", VA = "0x7CF240", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002267")]
			[Address(RVA = "0x7CF2D8", Offset = "0x7CF2D8", VA = "0x7CF2D8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000362")]
		public override int Count
		{
			[Token(Token = "0x6002268")]
			[Address(RVA = "0x7CF3A0", Offset = "0x7CF3A0", VA = "0x7CF3A0", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000363")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x600226D")]
			[Address(RVA = "0x7CF830", Offset = "0x7CF830", VA = "0x7CF830", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A3F8", Offset = "0x75A3F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002269")]
		[Address(RVA = "0x7CF3F8", Offset = "0x7CF3F8", VA = "0x7CF3F8", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600226A")]
		[Address(RVA = "0x7CF528", Offset = "0x7CF528", VA = "0x7CF528", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x600226B")]
		[Address(RVA = "0x7CF5EC", Offset = "0x7CF5EC", VA = "0x7CF5EC", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x600226C")]
		[Address(RVA = "0x7CF6A8", Offset = "0x7CF6A8", VA = "0x7CF6A8", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0x7CF8EC", Offset = "0x7CF8EC", VA = "0x7CF8EC", Slot = "29")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x75A45C", Offset = "0x75A45C")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600226F")]
		[Address(RVA = "0x7CF98C", Offset = "0x7CF98C", VA = "0x7CF98C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002270")]
		[Address(RVA = "0x7CFEB4", Offset = "0x7CFEB4", VA = "0x7CFEB4", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6002271")]
		[Address(RVA = "0x7D02BC", Offset = "0x7D02BC", VA = "0x7D02BC", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002272")]
		[Address(RVA = "0x7D0480", Offset = "0x7D0480", VA = "0x7D0480")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x200043A")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x4001E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x17000364")]
		public override string Value
		{
			[Token(Token = "0x6002273")]
			[Address(RVA = "0x7D0BB8", Offset = "0x7D0BB8", VA = "0x7D0BB8", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002274")]
			[Address(RVA = "0x7D0BC0", Offset = "0x7D0BC0", VA = "0x7D0BC0", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6002275")]
		[Address(RVA = "0x7D0BC8", Offset = "0x7D0BC8", VA = "0x7D0BC8")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6002276")]
		[Address(RVA = "0x7D0BF4", Offset = "0x7D0BF4", VA = "0x7D0BF4")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x6002277")]
		[Address(RVA = "0x7D0C38", Offset = "0x7D0C38", VA = "0x7D0C38")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x6002278")]
		[Address(RVA = "0x7D0C7C", Offset = "0x7D0C7C", VA = "0x7D0C7C")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0x7D0CB8", Offset = "0x7D0CB8", VA = "0x7D0CB8")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x600227A")]
		[Address(RVA = "0x7D0CF4", Offset = "0x7D0CF4", VA = "0x7D0CF4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600227B")]
		[Address(RVA = "0x7D0D58", Offset = "0x7D0D58", VA = "0x7D0D58", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x600227C")]
		[Address(RVA = "0x7D0DBC", Offset = "0x7D0DBC", VA = "0x7D0DBC", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x200043B")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x74AD08", Offset = "0x74AD08")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4001EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x4001EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x17000365")]
		public override JSONNode Item
		{
			[Token(Token = "0x6002280")]
			[Address(RVA = "0x7D10DC", Offset = "0x7D10DC", VA = "0x7D10DC", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002281")]
			[Address(RVA = "0x7D1140", Offset = "0x7D1140", VA = "0x7D1140", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000366")]
		public override JSONNode Item
		{
			[Token(Token = "0x6002282")]
			[Address(RVA = "0x7D11CC", Offset = "0x7D11CC", VA = "0x7D11CC", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002283")]
			[Address(RVA = "0x7D123C", Offset = "0x7D123C", VA = "0x7D123C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000367")]
		public override int AsInt
		{
			[Token(Token = "0x600228C")]
			[Address(RVA = "0x7D14D8", Offset = "0x7D14D8", VA = "0x7D14D8", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600228D")]
			[Address(RVA = "0x7D155C", Offset = "0x7D155C", VA = "0x7D155C", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000368")]
		public override float AsFloat
		{
			[Token(Token = "0x600228E")]
			[Address(RVA = "0x7D15E4", Offset = "0x7D15E4", VA = "0x7D15E4", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600228F")]
			[Address(RVA = "0x7D1668", Offset = "0x7D1668", VA = "0x7D1668", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000369")]
		public override double AsDouble
		{
			[Token(Token = "0x6002290")]
			[Address(RVA = "0x7D16F0", Offset = "0x7D16F0", VA = "0x7D16F0", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002291")]
			[Address(RVA = "0x7D1774", Offset = "0x7D1774", VA = "0x7D1774", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700036A")]
		public override bool AsBool
		{
			[Token(Token = "0x6002292")]
			[Address(RVA = "0x7D17FC", Offset = "0x7D17FC", VA = "0x7D17FC", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002293")]
			[Address(RVA = "0x7D1880", Offset = "0x7D1880", VA = "0x7D1880", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700036B")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6002294")]
			[Address(RVA = "0x7D1908", Offset = "0x7D1908", VA = "0x7D1908", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036C")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6002295")]
			[Address(RVA = "0x7D1970", Offset = "0x7D1970", VA = "0x7D1970", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600227D")]
		[Address(RVA = "0x7CE180", Offset = "0x7CE180", VA = "0x7CE180")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0x7CF144", Offset = "0x7CF144", VA = "0x7CF144")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x600227F")]
		[Address(RVA = "0x7D107C", Offset = "0x7D107C", VA = "0x7D107C")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0x7D12D0", Offset = "0x7D12D0", VA = "0x7D12D0", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0x7D135C", Offset = "0x7D135C", VA = "0x7D135C", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0x7D13F0", Offset = "0x7D13F0", VA = "0x7D13F0")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0x7D1408", Offset = "0x7D1408", VA = "0x7D1408")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002288")]
		[Address(RVA = "0x7D1420", Offset = "0x7D1420", VA = "0x7D1420", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002289")]
		[Address(RVA = "0x7D1438", Offset = "0x7D1438", VA = "0x7D1438", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x7D1448", Offset = "0x7D1448", VA = "0x7D1448", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600228B")]
		[Address(RVA = "0x7D1490", Offset = "0x7D1490", VA = "0x7D1490", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x200043C")]
	public static class JSON
	{
		[Token(Token = "0x6002296")]
		[Address(RVA = "0x7CDA3C", Offset = "0x7CDA3C", VA = "0x7CDA3C")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
